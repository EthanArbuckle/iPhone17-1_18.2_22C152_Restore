void WebKit::WebResourceLoadObserver::logSubresourceLoadingForTesting(WebKit::WebResourceLoadObserver *this, WTF::StringImpl **a2, WTF::ASCIICaseInsensitiveHash **a3, int a4)
{
  WTF *v7;
  uint64_t v8;
  unsigned char v9[24];

  if (!*((unsigned char *)this + 8))
  {
    v7 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(this, a3);
    WTF::WallTime::now(v7);
    WebCore::ResourceLoadStatistics::reduceTimeResolution();
    *((void *)v7 + 1) = v8;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v7 + 13, a2, (uint64_t)v9);
    if (a4)
    {
      WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(this);
    }
    else if ((*((void *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase((WebKit::WebResourceLoadObserver *)((char *)this + 32));
    }
  }
}

uint64_t WebKit::WebResourceLoadObserver::hasCrossPageStorageAccess(WebKit::WebResourceLoadObserver *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 12, a3);
  uint64_t v6 = *((void *)this + 12);
  if (v6) {
    v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  if (v6 == v5) {
    return 0;
  }
  v7 = (uint64_t *)(v5 + 8);

  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v7, a2);
}

void WebKit::WebScreenOrientationManager::~WebScreenOrientationManager(WebKit::WebScreenOrientationManager *this)
{
  {
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0xC9u, *(void *)(*((void *)this + 6) + 40));
  v3 = (unsigned int **)*((void *)this + 7);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, v2);
  }
  *((void *)this + 4) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v2);

  MEMORY[0x1F41712C8](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebScreenOrientationManager::~WebScreenOrientationManager(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebScreenOrientationManager::~WebScreenOrientationManager(WebKit::WebScreenOrientationManager *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebScreenOrientationManager::~WebScreenOrientationManager((WebKit::WebScreenOrientationManager *)((char *)this - 32));

  WTF::fastFree(v1, v2);
}

void *WebKit::WebScreenOrientationManager::currentOrientation(WebKit::WebScreenOrientationManager *this)
{
  if (*((unsigned char *)this + 73))
  {
    LOBYTE(v2) = *((unsigned char *)this + 72);
    return (void *)v2;
  }
  v3 = (void *)*((void *)this + 6);
  uint64_t v4 = v3[4];
  v3 += 4;
  uint64_t v5 = (*(uint64_t (**)(void *))(v4 + 56))(v3);
  uint64_t v6 = (*(uint64_t (**)(void *))(*v3 + 48))(v3);
  if (!v6)
  {
    LOBYTE(v21) = 3;
    BOOL v8 = 1;
    int v23 = 1;
    if (PAL::deviceHasIPadCapability(0)) {
      LOBYTE(v2) = 2;
    }
    else {
      LOBYTE(v2) = 0;
    }
LABEL_24:
    if (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 7)) {
      *((_WORD *)this + 36) = v2 | 0x100;
    }
    ((void (*)(uint64_t **, uint64_t **))off_1EE9F7670[v8])(&v24, &v21);
    return (void *)v2;
  }
  uint64_t v2 = v6;
  uint64_t v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3827, v5, &v27, &v26);
  IPC::Connection::sendSyncMessage(v2, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, INFINITY);
  int v7 = v25;
  if (v25)
  {
    if (v25 == 1)
    {
      LOBYTE(v21) = (_BYTE)v24;
LABEL_15:
      int v23 = v7;
      int v11 = v7;
LABEL_16:
      ((void (*)(char *, uint64_t **))off_1EE9F7690[v11])(&v28, &v24);
LABEL_17:
      v13 = v26;
      v26 = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v10);
        v13 = (IPC::Encoder *)WTF::fastFree(v17, v18);
      }
      if (PAL::deviceHasIPadCapability(v13)) {
        char v14 = 2;
      }
      else {
        char v14 = 0;
      }
      BOOL v15 = v7 == 0;
      BOOL v8 = v7 != 0;
      if (!v15) {
        LOBYTE(v2) = v14;
      }
      goto LABEL_24;
    }
  }
  else
  {
    unsigned __int16 v9 = IPC::Decoder::decode<std::tuple<WebCore::ScreenOrientationType>>(v24);
    if (v9 < 0x100u)
    {
      LOBYTE(v21) = 13;
      int v7 = 1;
      int v23 = 1;
      int v11 = v25;
      if (v25 == -1) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    if (!v25)
    {
      LOBYTE(v2) = v9;
      v12 = v24;
      v24 = 0;
      v21 = v12;
      char v22 = v9;
      goto LABEL_15;
    }
  }
  uint64_t v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::WebScreenOrientationManager::orientationDidChange(v19, v20);
}

void *WebKit::WebScreenOrientationManager::orientationDidChange(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 72) = a2 | 0x100;
  uint64_t v4 = a1 + 56;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 56), &v14);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v9 = v4;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  while (v15 != v10)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v15 + 8) + 16))(*(void *)(*(void *)v15 + 8), a2);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
  }
  return result;
}

uint64_t WebKit::WebScreenOrientationManager::lock(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2819;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v20 = v9;
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
  if (v11)
  {
    unsigned char *v10 = a2;
    uint64_t v12 = *a3;
    *a3 = 0;
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v13 = &unk_1EE9F78C0;
    v13[1] = v12;
    v19[0] = v13;
    v19[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v20, v19, 0);
    uint64_t v15 = v19[0];
    v19[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t result = (uint64_t)v20;
    uint64_t v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
      return WTF::fastFree(v17, v18);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::WebScreenOrientationManager::unlock(WebKit::WebScreenOrientationManager *this)
{
  v1 = (void *)*((void *)this + 6);
  uint64_t v2 = v1[4];
  v1 += 4;
  uint64_t v3 = (*(uint64_t (**)(void *))(v2 + 56))(v1);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2821;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  (*(void (**)(void *, IPC::Encoder **, void))(*v1 + 32))(v1, &v9, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WTF *WebKit::WebScreenOrientationManager::addObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 56);
  BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 56));
  unsigned int v7 = *(_DWORD *)(a1 + 68);
  unsigned int v8 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v8;
  if (v8 > v7)
  {
    uint64_t v9 = *v4;
    if (*v4)
    {
      int v10 = *(_DWORD *)(v9 - 4);
      if (!v10) {
        goto LABEL_22;
      }
      int v11 = 0;
      unsigned int v12 = v10 - 1;
      do
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(v9 + 8 * v12);
        if ((unint64_t)(v14 + 1) >= 2 && !*(void *)(v14 + 8))
        {
          *(void *)(v9 + 8 * v12) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v14);
            WTF::fastFree((WTF *)v14, v5);
          }
          *(void *)(v9 + 8 * v12) = -1;
          ++v11;
        }
        --v12;
      }
      while (v13);
      uint64_t v9 = *v4;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        uint64_t v15 = *v4;
        if (*v4) {
          int v16 = *(_DWORD *)(v15 - 12);
        }
        else {
          int v16 = 0;
        }
        *(_DWORD *)(v15 - 12) = v16 - v11;
        uint64_t v9 = *v4;
      }
      if (v9)
      {
        unsigned int v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          uint64_t v9 = *(void *)(a1 + 56);
          *(_DWORD *)(a1 + 64) = 0;
          if (!v9)
          {
            unsigned int v19 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 64) = 0;
LABEL_25:
        unsigned int v19 = *(_DWORD *)(v9 - 12);
        int v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 68) = 2 * v20;
          goto LABEL_28;
        }
LABEL_26:
        int v20 = v19;
        goto LABEL_27;
      }
    }
    unsigned int v19 = 0;
    *(_DWORD *)(a1 + 64) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v21 = *(void *)(a2 + 8);
  if (!v21)
  {
    uint64_t v21 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)(v21 + 8) = a2;
    int v23 = *(unsigned int **)(a2 + 8);
    *(void *)(a2 + 8) = v21;
    if (v23)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v22);
      }
      uint64_t v21 = *(void *)(a2 + 8);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v21, 1u);
  atomic_fetch_add((atomic_uint *volatile)v21, 1u);
  v34 = (WTF *)v21;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v4, &v34, (uint64_t)v33);
  uint64_t result = v34;
  v34 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (WTF *)WTF::fastFree(result, v24);
  }
  if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v21);
    uint64_t result = (WTF *)WTF::fastFree((WTF *)v21, v24);
    if (!isEmptyIgnoringNullReferences) {
      return result;
    }
  }
  else if (!isEmptyIgnoringNullReferences)
  {
    return result;
  }
  v26 = *(void **)(a1 + 48);
  LOBYTE(v34) = 1;
  uint64_t v27 = v26[4];
  v26 += 4;
  uint64_t v28 = (*(uint64_t (**)(void *))(v27 + 56))(v26);
  v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v29 = 2820;
  *((void *)v29 + 1) = v28;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  v33[0] = v29;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v29, (char *)&v34);
  (*(void (**)(void *, IPC::Encoder **, void))(*v26 + 32))(v26, v33, 0);
  uint64_t result = v33[0];
  v33[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v30);
    return (WTF *)WTF::fastFree(v31, v32);
  }
  return result;
}

IPC::Encoder *WebKit::WebScreenOrientationManager::removeObserver(uint64_t a1, IPC::Encoder **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 56);
  unsigned int v5 = *(_DWORD *)(a1 + 68);
  unsigned int v6 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v6;
  if (v6 > v5)
  {
    uint64_t v7 = *v4;
    if (*v4)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v12 + 1) >= 2 && !*(void *)(v12 + 8))
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v12);
            WTF::fastFree((WTF *)v12, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v4;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v13 = *v4;
        if (*v4) {
          int v14 = *(_DWORD *)(v13 - 12);
        }
        else {
          int v14 = 0;
        }
        *(_DWORD *)(v13 - 12) = v14 - v9;
        uint64_t v7 = *v4;
      }
      if (v7)
      {
        unsigned int v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          uint64_t v7 = *(void *)(a1 + 56);
          *(_DWORD *)(a1 + 64) = 0;
          if (!v7)
          {
            unsigned int v17 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 64) = 0;
LABEL_25:
        unsigned int v17 = *(_DWORD *)(v7 - 12);
        int v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 68) = 2 * v18;
          goto LABEL_28;
        }
LABEL_26:
        int v18 = v17;
        goto LABEL_27;
      }
    }
    unsigned int v17 = 0;
    *(_DWORD *)(a1 + 64) = 0;
    goto LABEL_26;
  }
LABEL_28:
  unsigned int v19 = a2[1];
  if (v19 && *((void *)v19 + 1))
  {
    v31 = a2[1];
    int v20 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v31);
    if (*v4)
    {
      uint64_t v21 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
      if ((unsigned int **)v21 == v20) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!v20) {
        goto LABEL_37;
      }
      uint64_t v21 = 0;
    }
    if ((unsigned int **)v21 != v20) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, v20);
    }
  }
LABEL_37:
  uint64_t result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)v4);
  if (result)
  {
    if (*(unsigned char *)(a1 + 73)) {
      *(unsigned char *)(a1 + 73) = 0;
    }
    int v23 = *(void **)(a1 + 48);
    char v30 = 0;
    uint64_t v24 = v23[4];
    v23 += 4;
    uint64_t v25 = (*(uint64_t (**)(void *))(v24 + 56))(v23);
    v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)v26 = 2820;
    *((void *)v26 + 1) = v25;
    *((void *)v26 + 66) = (char *)v26 + 16;
    *((void *)v26 + 67) = 512;
    *((void *)v26 + 68) = 0;
    *((void *)v26 + 70) = 0;
    *((void *)v26 + 69) = 0;
    IPC::Encoder::encodeHeader(v26);
    v31 = v26;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v26, &v30);
    (*(void (**)(void *, IPC::Encoder **, void))(*v23 + 32))(v23, &v31, 0);
    uint64_t result = v31;
    v31 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v27);
      return (IPC::Encoder *)WTF::fastFree(v28, v29);
    }
  }
  return result;
}

uint64_t WebKit::WebSearchPopupMenu::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v6 + 8) = 1;
  *(void *)uint64_t v6 = &unk_1EE9F7390;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x20);
  uint64_t result = WebKit::WebPopupMenu::WebPopupMenu(v7, a1, a2);
  *(void *)(v6 + 16) = result;
  *a3 = v6;
  return result;
}

uint64_t WebKit::WebSearchPopupMenu::popupMenu(WebKit::WebSearchPopupMenu *this)
{
  return *((void *)this + 2);
}

void WebKit::WebSearchPopupMenu::saveRecentSearches(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
  {
    if (*(_DWORD *)(*a2 + 4))
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          CFRetain(*(CFTypeRef *)(v4 - 8));
          {
            uint64_t v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v21);
          }
          uint64_t v7 = *(atomic_uchar *volatile **)(WebKit::WebProcess::singleton(void)::process + 40);
          if (v7)
          {
            char v8 = 0;
            atomic_uchar *volatile v9 = *v7;
            int v10 = 1;
            atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
            if (v8)
            {
              char v22 = v9;
              MEMORY[0x19972E8D0]();
              atomic_uchar *volatile v9 = v22;
            }
            ++*((void *)v9 + 1);
            atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
            if (v10 != 1) {
              WTF::Lock::unlockSlow((WTF::Lock *)v9);
            }
            int v23 = a2;
            uint64_t v24 = a3;
            IPC::Connection::send<Messages::WebPageProxy::SaveRecentSearches>((uint64_t)v7, &v23, *(void *)(v4 + 24));
            char v11 = 0;
            atomic_uchar *volatile v12 = *v7;
            atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
            if (v11) {
              MEMORY[0x19972E8D0](v12);
            }
            uint64_t v13 = *((void *)v12 + 1);
            uint64_t v14 = v13 - 1;
            *((void *)v12 + 1) = v13 - 1;
            if (v13 == 1)
            {
              uint64_t v20 = *((void *)v12 + 2);
              uint64_t v16 = *((void *)v12 + 3);
              *((void *)v12 + 3) = 0;
              BOOL v15 = v20 == 0;
            }
            else
            {
              BOOL v15 = 0;
              uint64_t v16 = 0;
            }
            int v17 = 1;
            atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
            if (v17 == 1)
            {
              if (!v14) {
                goto LABEL_17;
              }
            }
            else
            {
              WTF::Lock::unlockSlow((WTF::Lock *)v12);
              if (!v14)
              {
LABEL_17:
                uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
                *(void *)uint64_t v18 = &unk_1EE9B37E8;
                *(void *)(v18 + 8) = v12;
                *(void *)(v18 + 16) = v16;
                *(unsigned char *)(v18 + 24) = v15;
                int v23 = (uint64_t *)v18;
                WTF::ensureOnMainRunLoop();
                unsigned int v19 = v23;
                int v23 = 0;
                if (v19) {
                  (*(void (**)(uint64_t *))(*v19 + 8))(v19);
                }
              }
            }
          }
          else
          {
            int v23 = a2;
            uint64_t v24 = a3;
            IPC::Connection::send<Messages::WebPageProxy::SaveRecentSearches>(0, &v23, *(void *)(v4 + 24));
          }
          CFRelease(*(CFTypeRef *)(v4 - 8));
        }
      }
    }
  }
}

void WebKit::WebSearchPopupMenu::loadRecentSearches(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!*a2) {
    return;
  }
  if (!*(_DWORD *)(*a2 + 4)) {
    return;
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 24);
  if (!v3) {
    return;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return;
  }
  CFRetain(*(CFTypeRef *)(v4 - 8));
  {
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v26);
  }
  uint64_t v7 = *(atomic_uchar *volatile **)(WebKit::WebProcess::singleton(void)::process + 40);
  if (v7)
  {
    char v8 = 0;
    atomic_uchar *volatile v9 = *v7;
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8)
    {
      uint64_t v27 = v9;
      MEMORY[0x19972E8D0]();
      atomic_uchar *volatile v9 = v27;
    }
    ++*((void *)v9 + 1);
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
    }
    v29[0] = a2;
    IPC::Connection::sendSync<Messages::WebPageProxy::LoadRecentSearches>((uint64_t)v30, (uint64_t)v7, v29, *(void *)(v4 + 24));
    char v12 = 0;
    atomic_uchar *volatile v13 = *v7;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12) {
      MEMORY[0x19972E8D0](v13);
    }
    uint64_t v14 = *((void *)v13 + 1) - 1;
    *((void *)v13 + 1) = v14;
    if (v14)
    {
      BOOL v15 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v25 = *((void *)v13 + 2);
      uint64_t v16 = *((void *)v13 + 3);
      *((void *)v13 + 3) = 0;
      BOOL v15 = v25 == 0;
    }
    int v17 = 1;
    atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 == 1)
    {
      if (!v14) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v28 = v14;
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (!v28)
      {
LABEL_17:
        uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v18 = &unk_1EE9B37E8;
        *(void *)(v18 + 8) = v13;
        *(void *)(v18 + 16) = v16;
        *(unsigned char *)(v18 + 24) = v15;
        v29[0] = (uint64_t *)v18;
        WTF::ensureOnMainRunLoop();
        unsigned int v19 = v29[0];
        v29[0] = 0;
        if (v19) {
          (*(void (**)(uint64_t *))(*v19 + 8))(v19);
        }
      }
    }
  }
  else
  {
    v29[0] = a2;
    IPC::Connection::sendSync<Messages::WebPageProxy::LoadRecentSearches>((uint64_t)v30, 0, v29, *(void *)(v4 + 24));
  }
  uint64_t v20 = v33;
  if (v33 != -1)
  {
    if (!v33)
    {
      uint64_t v21 = v31;
      uint64_t v22 = v32;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v23 = *(unsigned int *)(a3 + 12);
      if (v23) {
        WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(void *)a3 + 16 * v23));
      }
      uint64_t v24 = *(WTF **)a3;
      if (*(void *)a3)
      {
        *(void *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
        WTF::fastFree(v24, v11);
      }
      v29[0] = 0;
      v29[1] = 0;
      *(void *)a3 = v21;
      *(void *)(a3 + 8) = v22;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v11);
    }
    ((void (*)(uint64_t **, unsigned char *))off_1EE9F7680[v20])(v29, v30);
  }
  CFRelease(*(CFTypeRef *)(v4 - 8));
}

uint64_t WebKit::WebSearchPopupMenu::enabled(WebKit::WebSearchPopupMenu *this)
{
  return 1;
}

uint64_t WebKit::WebSpeechRecognitionConnection::WebSpeechRecognitionConnection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  uint64_t v3 = a1 + 32;
  *(void *)a1 = &unk_1EE9F73D0;
  *(void *)(a1 + 16) = &unk_1EE9F7438;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = a2;
  uint64_t v4 = (uint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = &unk_1EE9F7470;
  *(void *)(a1 + 48) = 0;
  {
    char v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  v14[0] = 208;
  v14[1] = a2;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 56), (unsigned __int8 *)v14, a1 + 16, (unsigned __int8 **)v13);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 2591;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  v13[0] = v5;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, v4);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, v13, 0);
  uint64_t v7 = v13[0];
  v13[0] = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v9, v10);
  }
  {
    char v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  WebKit::WebProcess::ensureSpeechRecognitionRealtimeMediaSourceManager((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  return a1;
}

void WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection(WebKit::WebSpeechRecognitionConnection *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 40);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2592;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v14 = v3;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, v2);
  (*(void (**)(char *, IPC::Encoder **, void))(*((void *)this + 4) + 32))((char *)this + 32, &v14, 0);
  unsigned int v5 = v14;
  uint64_t v14 = 0;
  if (v5)
  {
    IPC::Encoder::~Encoder(v5, v4);
    WTF::fastFree(v11, v12);
  }
  {
    atomic_uchar *volatile v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(WebKit::WebProcess::singleton(void)::process + 48), (WebKit::WebSpeechRecognitionConnection *)((char *)this + 16));
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      atomic_uchar *volatile v9 = (unsigned int **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (unsigned int *)-1)
        {
          int v10 = *v9;
          *atomic_uchar *volatile v9 = 0;
          if (v10)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v10);
              WTF::fastFree((WTF *)v10, v6);
            }
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), v6);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v6);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection(WebKit::WebSpeechRecognitionConnection *this)
{
}

{
  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection((WebKit::WebSpeechRecognitionConnection *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection((WebKit::WebSpeechRecognitionConnection *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSpeechRecognitionConnection::~WebSpeechRecognitionConnection((WebKit::WebSpeechRecognitionConnection *)((char *)this - 32));

  WTF::fastFree(v1, v2);
}

void WebKit::WebSpeechRecognitionConnection::registerClient(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v5 = a2[1];
  if (v3
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand((uint64_t *)(a1 + 48), 0), (uint64_t v3 = *v4) != 0))
  {
    int v6 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unint64_t v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  char v11 = (void *)(v3 + 16 * v10);
  uint64_t v12 = *v11;
  if (*v11)
  {
    atomic_uchar *volatile v13 = 0;
    int v14 = 1;
    while (v12 != v5)
    {
      if (v12 == -1) {
        atomic_uchar *volatile v13 = v11;
      }
      unsigned int v10 = (v10 + v14) & v6;
      char v11 = (void *)(v3 + 16 * v10);
      uint64_t v12 = *v11;
      ++v14;
      if (!*v11)
      {
        if (v13)
        {
          void *v13 = 0;
          v13[1] = 0;
          --*(_DWORD *)(*v4 - 16);
          char v11 = v13;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    *char v11 = v5;
    uint64_t v15 = a2[2];
    if (v15) {
      goto LABEL_17;
    }
    uint64_t v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v15 = 1;
    *(void *)(v15 + 8) = a2;
    uint64_t v16 = (unsigned int *)a2[2];
    a2[2] = v15;
    if (!v16) {
      goto LABEL_17;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
    uint64_t v15 = a2[2];
    if (v15) {
LABEL_17:
    }
      atomic_fetch_add((atomic_uint *volatile)v15, 1u);
    int v17 = (unsigned int *)v11[1];
    v11[1] = v15;
    if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
    uint64_t v18 = *v4;
    if (*v4) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *v4;
    if (*v4) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        return;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      return;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v4, (uint64_t)v11);
  }
}

void WebKit::WebSpeechRecognitionConnection::unregisterClient(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, *(void *)(a2 + 8));
  if (v3)
  {
    uint64_t v5 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v5 == v4) {
      return;
    }
  }
  else
  {
    if (!v4) {
      return;
    }
    uint64_t v5 = 0;
  }
  if (v5 != v4)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v2, v4);
  }
}

IPC::Encoder *WebKit::WebSpeechRecognitionConnection::start(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v28[1] = a10;
  uint64_t v29 = a2;
  v28[0] = a9;
  uint64_t v15 = a1 + 32;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  int v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v17 = 1489;
  *((void *)v17 + 1) = v16;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  char v30 = v17;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, &v29);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a3);
  uint64_t v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v19) {
    goto LABEL_9;
  }
  unsigned char *v18 = a4;
  uint64_t v20 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1991EAF8CLL);
  }
  *uint64_t v20 = a5;
  uint64_t v22 = (void *)IPC::Encoder::grow(v17, 8uLL, 8);
  if (v23 <= 7)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1991EAF6CLL);
  }
  *uint64_t v22 = a6;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v17, a7);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v17, v28);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v15 + 32))(v15, &v30, 0);
  uint64_t result = v30;
  char v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v26, v27);
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechRecognitionConnection::stop(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = a1 + 32;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1490;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unsigned int v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechRecognitionConnection::abort(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = a1 + 32;
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1487;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unsigned int v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v10, 0);
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t *WebKit::WebSpeechRecognitionConnection::didReceiveUpdate(uint64_t *result, WebCore::SpeechRecognitionUpdate *this)
{
  uint64_t v2 = result + 6;
  uint64_t v3 = result[6];
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(void *)this;
  unsigned int v6 = *(_DWORD *)(v3 - 8);
  unint64_t v7 = *(void *)this + ~(*(void *)this << 32);
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(void *)(v3 + 16 * v10);
  if (v11 != *(void *)this)
  {
    int v14 = 1;
    uint64_t v15 = *(void *)(v3 + 16 * v10);
    unsigned int v16 = v10;
    while (v15)
    {
      unsigned int v16 = (v16 + v14) & v6;
      uint64_t v15 = *(void *)(v3 + 16 * v16);
      ++v14;
      if (v15 == v5)
      {
        if (v11 == v5) {
          goto LABEL_3;
        }
        int v17 = 1;
        while (v11)
        {
          uint64_t v10 = (v10 + v17) & v6;
          uint64_t v11 = *(void *)(v3 + 16 * v10);
          ++v17;
          if (v11 == v5) {
            goto LABEL_3;
          }
        }
        uint64_t v12 = 0;
        char v18 = 1;
        goto LABEL_16;
      }
    }
    return result;
  }
LABEL_3:
  uint64_t v12 = *(void *)(v3 + 16 * v10 + 8);
  if (!v12)
  {
    uint64_t v20 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(result[6], *(void *)this);
    char v18 = 1;
    goto LABEL_17;
  }
  atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  uint64_t v13 = *(void *)(v12 + 8);
  if (v13)
  {
    switch(*((unsigned char *)this + 8))
    {
      case 0:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 16))(*(void *)(v12 + 8));
        break;
      case 1:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 24))(*(void *)(v12 + 8));
        break;
      case 2:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 32))(*(void *)(v12 + 8));
        break;
      case 3:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 40))(*(void *)(v12 + 8));
        break;
      case 4:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 48))(*(void *)(v12 + 8));
        break;
      case 5:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 56))(*(void *)(v12 + 8));
        break;
      case 6:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 64))(*(void *)(v12 + 8));
        break;
      case 7:
        WebCore::SpeechRecognitionUpdate::result((uint64_t *)&v29, this);
        (*(void (**)(uint64_t, IPC::Encoder **))(*(void *)v13 + 80))(v13, &v29);
        uint64_t result = (uint64_t *)WTF::Vector<WebCore::SpeechRecognitionResultData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v28);
        break;
      case 8:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 72))(*(void *)(v12 + 8));
        break;
      case 9:
        WebCore::SpeechRecognitionUpdate::error((uint64_t *)&v29, this);
        (*(void (**)(uint64_t, IPC::Encoder **))(*(void *)v13 + 88))(v13, &v29);
        uint64_t result = (uint64_t *)v30;
        char v30 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, this);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        break;
      case 0xA:
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v13 + 96))(*(void *)(v12 + 8));
        break;
      default:
        break;
    }
LABEL_26:
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v12);
      return (uint64_t *)WTF::fastFree((WTF *)v12, this);
    }
    return result;
  }
  char v18 = 0;
  uint64_t v3 = *v2;
LABEL_16:
  uint64_t v19 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, v5);
  uint64_t v20 = (void *)v19;
  if (v3)
  {
LABEL_17:
    uint64_t v21 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v21 == v20) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  if (!v19) {
    goto LABEL_23;
  }
  uint64_t v21 = 0;
LABEL_21:
  if (v21 != v20) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteLegacyCDMSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v2, v20);
  }
LABEL_23:
  uint64_t v31 = v5;
  uint64_t v23 = v4[4];
  uint64_t v22 = v4 + 4;
  uint64_t v24 = (*(uint64_t (**)(uint64_t *))(v23 + 56))(v22);
  uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v25 = 1488;
  *((void *)v25 + 1) = v24;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  uint64_t v29 = v25;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v25, &v31);
  (*(void (**)(uint64_t *, IPC::Encoder **, void))(*v22 + 32))(v22, &v29, 0);
  uint64_t result = (uint64_t *)v29;
  uint64_t v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, this);
    uint64_t result = (uint64_t *)WTF::fastFree(v26, v27);
  }
  if ((v18 & 1) == 0) {
    goto LABEL_26;
  }
  return result;
}

uint64_t WebKit::WebSpeechRecognitionConnection::messageSenderConnection(WebKit::WebSpeechRecognitionConnection *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
}

uint64_t non-virtual thunk to'WebKit::WebSpeechRecognitionConnection::messageSenderConnection(WebKit::WebSpeechRecognitionConnection *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
}

uint64_t WebKit::WebSpeechRecognitionConnection::messageSenderDestinationID(WebKit::WebSpeechRecognitionConnection *this)
{
  return *((void *)this + 5);
}

uint64_t non-virtual thunk to'WebKit::WebSpeechRecognitionConnection::messageSenderDestinationID(WebKit::WebSpeechRecognitionConnection *this)
{
  return *((void *)this + 1);
}

void WebKit::WebPlatformStrategies::~WebPlatformStrategies(WebKit::WebPlatformStrategies *this)
{
}

void non-virtual thunk to'WebKit::WebPlatformStrategies::~WebPlatformStrategies(WebKit::WebPlatformStrategies *this)
{
}

{
  JUMPOUT(0x199740C10);
}

void WebKit::WebProgressTrackerClient::~WebProgressTrackerClient(WebKit::WebProgressTrackerClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F7160;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F7160;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

void WebKit::WebSearchPopupMenu::~WebSearchPopupMenu(WebKit::WebSearchPopupMenu *this)
{
  *(void *)this = &unk_1EE9F7390;
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
}

void WebKit::WebSearchPopupMenu::~WebSearchPopupMenu(WebKit::WebSearchPopupMenu *this, void *a2)
{
  *(void *)this = &unk_1EE9F7390;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  WTF::fastFree(this, a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18GetPasteboardTypesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy26GetPasteboardBufferForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a2[3];
  a2[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl *)a2[2];
  a2[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a2[1];
  a2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy29GetPasteboardPathnamesForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t)a2 + 8;
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 24, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v4);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy26GetPasteboardStringForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy27GetPasteboardStringsForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy24GetPasteboardChangeCountEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18GetPasteboardColorEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a2[1];
  if (((unint64_t)v3 & 0x8000000000000) != 0)
  {
    uint64_t v5 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      uint64_t v2 = a2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](v2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy16GetPasteboardURLEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18AddPasteboardTypesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18SetPasteboardTypesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy26SetPasteboardBufferForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy16SetPasteboardURLEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy18SetPasteboardColorEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy26SetPasteboardStringForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy16GetNumberOfFilesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy35ContainsURLStringSuitableForLoadingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy27URLStringSuitableForLoadingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy29TypesSafeForDOMToReadAndWriteEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy15WriteCustomDataEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy37ContainsStringSafeForDOMToReadForTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy23GetPasteboardItemsCountEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy21AllPasteboardItemInfoEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2)
{
  if (a2[24]) {
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 8), a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy25InformationForItemAtIndexEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy24ReadBufferFromPasteboardEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy21ReadURLFromPasteboardEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages18WebPasteboardProxy24ReadStringFromPasteboardEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

void WebCore::PopupMenuStyle::~PopupMenuStyle(WebCore::PopupMenuStyle *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 320) == 11) {
    WebCore::Length::deref((WebCore::PopupMenuStyle *)((char *)this + 316));
  }
  uint64_t v3 = (_DWORD *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      uint64_t v4 = (WTF *)MEMORY[0x199733070]();
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*v3;
    }
  }
  if (*((unsigned char *)this + 228) == 11) {
    WebCore::Length::deref((WebCore::PopupMenuStyle *)((char *)this + 224));
  }
  if (*((unsigned char *)this + 220) == 11) {
    WebCore::Length::deref((WebCore::PopupMenuStyle *)((char *)this + 216));
  }
  unsigned int v6 = (unsigned int *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v6)
  {
    if (*v6 == 1)
    {
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(v6 + 2), (WTF::StringImpl *)&v6[2 * v6[1] + 2]);
      WTF::fastFree((WTF *)v6, v7);
    }
    else
    {
      --*v6;
    }
  }
  unint64_t v8 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unint64_t v9 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v14);
  unsigned int v16 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  int v17 = (WTF *)*((void *)this + 6);
  if (v17)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v17, v15);
  }
  char v18 = (WTF *)*((void *)this + 4);
  if (v18)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v18, v15);
  }
  uint64_t v19 = *((void *)this + 2);
  if (v19)
  {
    *(void *)(v19 + 8) = 0;
    uint64_t v20 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v15);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  uint64_t v21 = *((void *)this + 1);
  if ((v21 & 0x8000000000000) != 0)
  {
    uint64_t v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v15);
    }
  }
  uint64_t v22 = *(void *)this;
  if ((*(void *)this & 0x8000000000000) != 0)
  {
    uint64_t v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v15);
    }
  }
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy26RenderTreeAsTextForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy29BindRemoteAccessibilityFramesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        if (*(void *)(v4 + 8))
        {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)(v4 + 8), a2);
          uint64_t v5 = *(WTF::StringImpl **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebCore::ResourceLoadStatistics **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebCore::ResourceLoadStatistics *)-1)
      {
        std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](v4, 0);
        uint64_t v5 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebCore::ResourceLoadStatistics *std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](WebCore::ResourceLoadStatistics **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::ResourceLoadStatistics::~ResourceLoadStatistics(result, a2);
    return (WebCore::ResourceLoadStatistics *)WTF::fastFree(v4, v5);
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy18LoadRecentSearchesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

unsigned char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, v4);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v3);
  }
  return a1;
}

unsigned char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, v4);
}

unsigned char *IPC::ArgumentCoder<std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  uint64_t v5 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, v5);
}

unsigned char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 24);

  return IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, v4);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WTF::String,WTF::String>>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>(a1, &v13);
  if (*(unsigned __int8 *)(a2 + 16) == v14)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v5 = v13;
      *(void *)&long long v13 = 0;
      unsigned int v6 = *(WTF::StringImpl **)a2;
      *(void *)a2 = v5;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      uint64_t v9 = *((void *)&v13 + 1);
      *((void *)&v13 + 1) = 0;
      uint64_t v10 = *(WTF::StringImpl **)(a2 + 8);
      *(void *)(a2 + 8) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v4);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v7 = *(WTF::StringImpl **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v4);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v11 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v4);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    *(unsigned char *)(a2 + 16) = 0;
  }
  else
  {
    long long v8 = v13;
    long long v13 = 0uLL;
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v4);
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      uint64_t result = v6;
      unsigned int v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v9);
  char v6 = v10;
  if (!v10)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = v9;
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v8;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::PasteboardItemInfo>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PasteboardItemInfo,void>::decode(a2, a2, a1);
  if (!*(unsigned char *)(a1 + 120))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

__n128 WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardItemInfo>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 120 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  uint64_t v6 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v4 + 28) = v6;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  *(void *)(v4 + 32) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 40);
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 44);
  *(_DWORD *)(v3 + 44) = 0;
  *(_DWORD *)(v4 + 44) = v7;
  uint64_t v8 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  *(void *)(v4 + 48) = v8;
  __n128 result = *(__n128 *)(v3 + 56);
  long long v10 = *(_OWORD *)(v3 + 72);
  *(_WORD *)(v4 + 88) = *(_WORD *)(v3 + 88);
  *(_OWORD *)(v4 + 72) = v10;
  *(__n128 *)(v4 + 56) = result;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 104) = 0;
  uint64_t v11 = *(void *)(v3 + 96);
  *(void *)(v3 + 96) = 0;
  *(void *)(v4 + 96) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 104);
  *(_DWORD *)(v3 + 104) = 0;
  *(_DWORD *)(v4 + 104) = v11;
  LODWORD(v11) = *(_DWORD *)(v3 + 108);
  *(_DWORD *)(v3 + 108) = 0;
  *(_DWORD *)(v4 + 108) = v11;
  *(unsigned char *)(v4 + 112) = *(unsigned char *)(v3 + 112);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
      JUMPOUT(0x1991ECB20);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = (void *)(*(void *)result + 120 * *(unsigned int *)(result + 12));
    int v5 = 120 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(void *)uint64_t v2 = v6;
    __n128 result = WTF::VectorMover<false,WebCore::PasteboardItemInfo>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::PasteboardItemInfo>::move(uint64_t result, void *a2, uint64_t a3)
{
  if ((void *)result != a2)
  {
    uint64_t v5 = result;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v6 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(a3 + 16) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 28);
      *(_DWORD *)(v5 + 28) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v8 = *(void *)(v5 + 32);
      *(void *)(v5 + 32) = 0;
      *(void *)(a3 + 32) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 40);
      *(_DWORD *)(v5 + 40) = 0;
      *(_DWORD *)(a3 + 40) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 44);
      *(_DWORD *)(v5 + 44) = 0;
      *(_DWORD *)(a3 + 44) = v8;
      uint64_t v9 = *(void *)(v5 + 48);
      *(void *)(v5 + 48) = 0;
      *(void *)(a3 + 48) = v9;
      long long v10 = *(_OWORD *)(v5 + 56);
      long long v11 = *(_OWORD *)(v5 + 72);
      *(_WORD *)(a3 + 88) = *(_WORD *)(v5 + 88);
      *(_OWORD *)(a3 + 72) = v11;
      *(_OWORD *)(a3 + 56) = v10;
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 104) = 0;
      uint64_t v12 = *(void *)(v5 + 96);
      *(void *)(v5 + 96) = 0;
      *(void *)(a3 + 96) = v12;
      LODWORD(v12) = *(_DWORD *)(v5 + 104);
      *(_DWORD *)(v5 + 104) = 0;
      *(_DWORD *)(a3 + 104) = v12;
      LODWORD(v12) = *(_DWORD *)(v5 + 108);
      *(_DWORD *)(v5 + 108) = 0;
      *(_DWORD *)(a3 + 108) = v12;
      *(unsigned char *)(a3 + 112) = *(unsigned char *)(v5 + 112);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 96, a2);
      unsigned __int8 v14 = *(WTF::StringImpl **)(v5 + 48);
      *(void *)(v5 + 48) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 32, v13);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 16, v15);
      __n128 result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v16);
      v5 += 120;
      a3 += 120;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F76B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F76B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>(a2, (uint64_t)v5);
    if (v7)
    {
      __n128 result = WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(v2, v5);
      if (v7)
      {
        if (v6 != -1) {
          return (void *)((uint64_t (*)(char *, __n128 *))off_1EE9F76C8[v6])(&v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(v4);
  }
  return result;
}

void *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorSubscribeToPushService,WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(uint64_t *a1)
{
  int v3 = 0;
  memset(v2, 0, sizeof(v2));
  __n128 result = WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(a1, v2);
  if (v3 != -1) {
    return (void *)((uint64_t (*)(char *, __n128 *))off_1EE9F76C8[v3])(&v4, v2);
  }
  return result;
}

void *WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(WTF::URL const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(uint64_t *a1, __n128 *a2)
{
  unsigned __int32 v3 = a2[5].n128_u32[0];
  if (v3)
  {
    if (v3 != 1)
    {
      char v8 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(v8);
    }
    unsigned __int8 v4 = a2->n128_u8[0];
    uint64_t v5 = (_DWORD *)a2->n128_u64[1];
    if (v5) {
      *v5 += 2;
    }
    v9[0].n128_u8[0] = v4;
    v9[0].n128_u64[1] = (unint64_t)v5;
    int v10 = 1;
  }
  else
  {
    std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>(v9, a2);
    int v10 = 0;
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, __n128 *))(*(void *)v6 + 16))(v6, v9);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v10 != -1) {
    return (void *)((uint64_t (*)(char *, __n128 *))off_1EE9F76D8[v10])(&v11, v9);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F76F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F76F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v8);
  if (!v11) {
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v2);
  }
  if (v10)
  {
    if (v10 == 1)
    {
      char v3 = v8[0];
      unsigned __int8 v4 = v9;
      if (v9) {
        *v9 += 2;
      }
      v12[0] = v3;
      long long v13 = v4;
      int v14 = 1;
      goto LABEL_14;
    }
    uint64_t v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v5);
  }
  v12[0] = v8[0];
  int v14 = 0;
LABEL_14:
  uint64_t v7 = *v2;
  uint64_t *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v7 + 16))(v7, v12);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v14 != -1) {
    uint64_t result = ((uint64_t (*)(char *, char *))off_1EE9F7720[v14])(&v15, v12);
  }
  if (v11)
  {
    if (v10 != -1) {
      return ((uint64_t (*)(char *, char *))off_1EE9F7710[v10])(v12, v8);
    }
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorUnsubscribeFromPushService,WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(WTF::URL const&,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(uint64_t *a1)
{
  v3[0] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F7720[v4])(&v5, v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7740;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7740;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>(a2, v6);
    if (v9)
    {
      uint64_t result = WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(v2, (uint64_t)v6);
      if (v9)
      {
        if (v8 != -1) {
          return (void *)((uint64_t (*)(char *, uint64_t *))off_1EE9F7758[v8])(&v5, &v7);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    int v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(v4);
  }
  return result;
}

void *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushSubscription,WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[80] = 0;
  int v5 = 0;
  uint64_t result = WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1) {
    return (void *)((uint64_t (*)(char *, unsigned char *))off_1EE9F7758[v5])(&v2, v4);
  }
  return result;
}

void *WebKit::WebPlatformStrategies::navigatorGetPushSubscription(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 96);
  if (v3)
  {
    if (v3 == 1)
    {
      char v4 = *(unsigned char *)(a2 + 8);
      int v5 = *(_DWORD **)(a2 + 16);
      if (v5) {
        *v5 += 2;
      }
      v12[0] = v4;
      long long v13 = v5;
      int v15 = 1;
      uint64_t v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 16))(v6, v11);
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
      if (v15 != -1) {
        return (void *)((uint64_t (*)(char *, unsigned char *))off_1EE9F7768[v15])(&v10, v12);
      }
    }
    else
    {
      char v9 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(v9);
    }
  }
  else
  {
    v12[0] = 0;
    char v14 = 0;
    if (*(unsigned char *)(a2 + 88))
    {
      std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>((uint64_t)v12, a2 + 8);
      char v14 = 1;
    }
    int v15 = 0;
    uint64_t v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v11);
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v15 != -1) {
      return (void *)((uint64_t (*)(char *, unsigned char *))off_1EE9F7768[v15])(&v10, v12);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7788;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7788;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    int v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>>(a2, (uint64_t)v8);
  if (!v11) {
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v2);
  }
  if (v10)
  {
    if (v10 == 1)
    {
      char v3 = v8[0];
      char v4 = v9;
      if (v9) {
        *v9 += 2;
      }
      v12[0] = v3;
      long long v13 = v4;
      int v14 = 1;
      goto LABEL_14;
    }
    int v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v5);
  }
  v12[0] = v8[0];
  int v14 = 0;
LABEL_14:
  uint64_t v7 = *v2;
  uint64_t *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v7 + 16))(v7, v12);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v14 != -1) {
    uint64_t result = ((uint64_t (*)(char *, char *))off_1EE9F77B0[v14])(&v15, v12);
  }
  if (v11)
  {
    if (v10 != -1) {
      return ((uint64_t (*)(char *, char *))off_1EE9F77A0[v10])(v12, v8);
    }
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::NavigatorGetPushPermissionState,WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(uint64_t *a1)
{
  v3[0] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F77B0[v4])(&v5, v3);
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidStartProgress>(uint64_t a1, uint64_t a2)
{
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 1951;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v7 = v4;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v7, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidFinishProgress>(uint64_t a1, uint64_t a2)
{
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 1923;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v7 = v4;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v7, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

void *WTF::Detail::CallableWrapper<WebKit::WebRemoteFrameClient::changeLocation(WebCore::FrameLoadRequest &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F77D0;
  MEMORY[0x1997330E0](a1 + 2);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebRemoteFrameClient::changeLocation(WebCore::FrameLoadRequest &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F77D0;
  MEMORY[0x1997330E0]((char *)a1 + 16);
  uint64_t v3 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(a1, v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(WTF::CompletionHandler<void ()(WTF::URL const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F77F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(WTF::CompletionHandler<void ()(WTF::URL const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F77F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(WTF::CompletionHandler<void ()(WTF::URL const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::URL>>(a2, v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7[0];
        v7[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(v6);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebPageProxy::DocumentURLForConsoleLog,WTF::CompletionHandler<void ()(WTF::URL const&)>>(uint64_t *a1)
{
  v5[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v5);
  uint64_t v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, v5);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadObserver::WebResourceLoadObserver(WebCore::ResourceLoadStatistics::IsEphemeral)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9F7848;
  char v5 = v2;
  WebKit::WebResourceLoadObserver::updateCentralStatisticsStore(v1, (uint64_t *)&v5);
  uint64_t result = (uint64_t)v5;
  if (v5)
  {
    int v4 = *(uint64_t (**)(void))(*v5 + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (!*a1)
  {
    unsigned int v4 = 0;
    int v5 = 0;
LABEL_3:
    unsigned int v6 = 8;
    goto LABEL_4;
  }
  unsigned int v4 = *(_DWORD *)(v3 - 4);
  int v5 = *(_DWORD *)(v3 - 12);
  if (!v4) {
    goto LABEL_3;
  }
  unsigned int v6 = v4 << (6 * v5 >= 2 * v4);
LABEL_4:
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v4;
    do
    {
      long long v13 = (WTF::ASCIICaseInsensitiveHash **)(v3 + 16 * v10);
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v13, 0, v9))
        {
          std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100]((WebCore::ResourceLoadStatistics **)(v3 + 16 * v10 + 8), 0);
          char v15 = *v13;
          _DWORD *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v8);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v18 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v14);
          int v20 = 0;
          do
          {
            uint64_t v21 = v18 & v17;
            int v22 = WTF::equal(*(WTF **)(v16 + 16 * v21), 0, v19);
            int v18 = ++v20 + v21;
          }
          while (!v22);
          uint64_t v23 = (WTF::StringImpl **)(v16 + 16 * v21);
          std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](v23 + 1, 0);
          uint64_t v25 = *v23;
          *uint64_t v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v24);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          v26 = *v13;
          _DWORD *v13 = 0;
          *uint64_t v23 = v26;
          uint64_t v27 = (WebCore::ResourceLoadStatistics **)(v3 + 16 * v10);
          uint64_t v28 = v27[1];
          *++uint64_t v27 = 0;
          v23[1] = v28;
          std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](v27, 0);
          uint64_t v29 = *v13;
          _DWORD *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v8);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v13 == a2) {
            uint64_t v11 = v16 + 16 * v21;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v3 - 16), v8);
  return v11;
}

uint64_t IPC::Connection::makeAsyncReplyHandler<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9F7898;
  v4[1] = v3;
  *a1 = v4;
  uint64_t result = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  a1[1] = result;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7898;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7898;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 200 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::ResourceLoadStatistics,void>::encode(a1, v6);
      v6 += 200;
      v7 -= 200;
    }
    while (v7);
  }
  return result;
}

uint64_t WTF::Mapper<WebKit::WebResourceLoadObserver::takeStatistics(void)::$_0,WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>,void>::map(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t result = *a2;
  if (*a2)
  {
    unsigned int v12 = *(_DWORD *)(result - 12);
    if (v12)
    {
      if (v12 >= 0x147AE15)
      {
        __break(0xC471u);
        return result;
      }
      int v13 = 200 * v12;
      uint64_t v14 = WTF::fastMalloc((WTF *)(200 * v12));
      *(_DWORD *)(a1 + 8) = (v13 & 0xFFFFFFF8) / 0xC8;
      *(void *)a1 = v14;
      uint64_t result = *a2;
    }
  }
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(result, (uint64_t)a2, a3);
  uint64_t v6 = result;
  v16[1] = v7;
  if (*a2) {
    uint64_t v8 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    do
    {
      WebCore::ResourceLoadStatistics::ResourceLoadStatistics((uint64_t)v15, *(uint64_t **)(v6 + 8));
      WebCore::ResourceLoadStatistics::ResourceLoadStatistics(*(void *)a1 + 200 * *(unsigned int *)(a1 + 12), v15);
      ++*(_DWORD *)(a1 + 12);
      WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v15, v9);
      v16[0] = v6 + 16;
      uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v16, v10, v11);
      uint64_t v6 = v16[0];
    }
    while (v16[0] != v8);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!a1) {
    return 0;
  }
  if (!*(_DWORD *)(a1 - 12)) {
    return a1 + 16 * *(unsigned int *)(a1 - 4);
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(a1, a1, a3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1) {
    uint64_t v3 = *(unsigned int *)(a1 - 4);
  }
  else {
    uint64_t v3 = 0;
  }
  v5[0] = a2;
  v5[1] = a1 + 16 * v3;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v5, a2, a3);
  return v5[0];
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v12 = v9;
  uint64_t v13 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v13;
  *(_DWORD *)(v12 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v14 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    uint64_t v16 = v6;
    do
    {
      if (*(void *)v16 != -1)
      {
        if (WTF::equal(*(WTF **)v16, 0, v11))
        {
          unsigned int v17 = *(WTF::StringImpl ***)(v16 + 8);
          if (v17) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v10);
          }
          int v18 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v10);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        else
        {
          uint64_t v19 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(a1, (WTF::ASCIICaseInsensitiveHash **)v16);
          int v20 = *(WTF::StringImpl ***)(v19 + 8);
          if (v20) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v10);
          }
          uint64_t v21 = *(WTF::StringImpl **)v19;
          *(void *)uint64_t v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v10);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          int v22 = *(WTF::ASCIICaseInsensitiveHash **)v16;
          *(void *)uint64_t v16 = 0;
          *(void *)uint64_t v19 = v22;
          *(void *)(v19 + 8) = 0;
          uint64_t v23 = *(void *)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          *(void *)(v19 + 8) = v23;
          uint64_t v24 = *(WTF::StringImpl ***)(v16 + 8);
          if (v24) {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v10);
          }
          uint64_t v25 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v10);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          if (v16 == a3) {
            uint64_t v14 = v19;
          }
        }
      }
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F78C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F78C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::Exception>>>(a2, (uint64_t)&v7);
    if (v10)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v10)
      {
        if (v9)
        {
          uint64_t result = v8;
          int v8 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(v6);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebScreenOrientationManagerProxy::Lock,WTF::CompletionHandler<void ()(std::optional<WebCore::Exception> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  char v6 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v6)
  {
    uint64_t result = v5;
    unsigned int v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WebCore::Exception>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Exception>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Exception>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ExceptionData>>(a1, (uint64_t)v5);
  char v4 = v8;
  if (v8)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    char v4 = 1;
    if (v7)
    {
      *(unsigned char *)a2 = v5[0];
      *(void *)(a2 + 8) = v6;
      *(unsigned char *)(a2 + 16) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 24) = v4;
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebPageProxy::SaveRecentSearches>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2058;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  char v7 = a2[1];
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v6, *((unsigned int *)v7 + 3));
  uint64_t v8 = *((unsigned int *)v7 + 3);
  if (v8)
  {
    uint64_t v9 = *v7;
    uint64_t v10 = v9 + 16 * v8;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, (uint64_t *)v9);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v6, *(double *)(v9 + 8));
      v9 += 16;
    }
    while (v9 != v10);
  }
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::LoadRecentSearches>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v38 = 0;
  IPC::Connection::createSyncMessageEncoder(3765, a4, &v38, &v37);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v37, *a3);
  IPC::Connection::sendSyncMessage(a2, v38, (uint64_t *)&v37, 0, (uint64_t)&v35, INFINITY);
  if (!v36)
  {
    uint64_t v9 = v35;
    IPC::Decoder::decode<WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v35, v7, (uint64_t)&v41);
    if ((_BYTE)v43)
    {
      uint64_t v11 = v41;
      v41 = 0;
      v39[0] = v11;
      uint64_t v12 = v42;
      uint64_t v42 = 0;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v10);
      char v40 = 1;
      uint64_t v13 = v39[0];
      v39[0] = 0;
      uint64_t v32 = v13;
      v39[1] = 0;
      uint64_t v33 = v12;
      char v34 = 1;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v14);
      if (v36) {
        goto LABEL_21;
      }
      uint64_t v16 = v35;
      v35 = 0;
      uint64_t v17 = v32;
      uint64_t v32 = 0;
      v41 = 0;
      uint64_t v42 = 0;
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      uint64_t v43 = 0;
      uint64_t v18 = v33;
      uint64_t v33 = 0;
      *(void *)(a1 + 16) = v18;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v15);
      int v20 = v41;
      v41 = 0;
      if (v20)
      {
        IPC::Decoder::~Decoder(v20);
        WTF::fastFree(v27, v28);
      }
      if (v34) {
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v19);
      }
    }
    else
    {
      uint64_t v19 = *(void **)v9;
      uint64_t v21 = *((void *)v9 + 1);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v22 = *((void *)v9 + 3);
      if (v22) {
        BOOL v23 = v21 == 0;
      }
      else {
        BOOL v23 = 1;
      }
      if (!v23) {
        (*(void (**)(uint64_t, void *))(*(void *)v22 + 16))(v22, v19);
      }
      *(unsigned char *)a1 = 13;
      *(_DWORD *)(a1 + 24) = 1;
    }
    int v8 = v36;
    if (v36 == -1) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v36 != 1)
  {
LABEL_21:
    uint64_t v29 = (IPC::Decoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Decoder::decode<WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v29, v30, v31);
  }
  *(unsigned char *)a1 = (_BYTE)v35;
  int v8 = 1;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_17:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F7690[v8])(&v41, &v35);
LABEL_18:
  uint64_t result = v37;
  v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      int v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v6, v5);
        uint64_t v21 = *(void *)a1;
        unint64_t v20 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_38;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    if (v10 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::RecentSearch>(a1, (uint64_t)&v24);
        if (!v26) {
          break;
        }
        if (HIDWORD(v28) == v28)
        {
          WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v27, (unint64_t)&v24);
        }
        else
        {
          uint64_t v16 = (WTF::StringImpl **)(v27 + 16 * HIDWORD(v28));
          uint64_t v17 = v24;
          uint64_t v24 = 0;
          *uint64_t v16 = v17;
          v16[1] = v25;
          ++HIDWORD(v28);
        }
        if (v26)
        {
          uint64_t v18 = v24;
          uint64_t v24 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, a2);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        if (!--v10)
        {
          WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v27, HIDWORD(v28));
          *(void *)a3 = v27;
          uint64_t v23 = v28;
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          *(void *)(a3 + 8) = v23;
          goto LABEL_23;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
LABEL_22:
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        *(void *)a3 = v14;
        *(void *)(a3 + 8) = v15;
LABEL_23:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, a2);
      }
      LODWORD(v28) = v10;
      uint64_t v27 = WTF::fastMalloc((WTF *)(16 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::RecentSearch>(a1, (uint64_t)&v24);
        if (!v26) {
          break;
        }
        if (HIDWORD(v28) == v28)
        {
          WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v27, (unint64_t)&v24);
        }
        else
        {
          uint64_t v11 = (WTF::StringImpl **)(v27 + 16 * HIDWORD(v28));
          uint64_t v12 = v24;
          uint64_t v24 = 0;
          *uint64_t v11 = v12;
          v11[1] = v25;
          ++HIDWORD(v28);
        }
        if (v26)
        {
          uint64_t v13 = v24;
          uint64_t v24 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, a2);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
        if (!--v10)
        {
          uint64_t v14 = v27;
          uint64_t v15 = v28;
          goto LABEL_22;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, a2);
  }
  unint64_t v20 = v5;
  uint64_t v21 = 0;
LABEL_38:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v20) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v21);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::RecentSearch>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RecentSearch,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t WebKit::WebSpeechSynthesisClient::voiceList(WebKit::WebSpeechSynthesisClient *this)
{
  char v4 = (void *)*((void *)this + 2);
  uint64_t v5 = v4[4];
  v4 += 4;
  uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v4);
  int v8 = (WTF *)(*(uint64_t (**)(void *))(*v4 + 48))(v4);
  if (!v8)
  {
    unsigned int v2 = 0;
    LODWORD(v1) = 0;
    LOBYTE(v79) = 3;
    int v82 = 1;
LABEL_41:
    v41 = &v76;
    goto LABEL_43;
  }
  uint64_t v75 = 0;
  IPC::Connection::createSyncMessageEncoder(3778, v6, &v75, &v74);
  IPC::Connection::sendSyncMessage((uint64_t)v8, v75, (uint64_t *)&v74, 0, (uint64_t)&v72, INFINITY);
  if (!v73)
  {
    int v8 = v72;
    unint64_t v12 = *((void *)v72 + 1);
    uint64_t v13 = *(void *)v72;
    unint64_t v14 = ((*((void *)v72 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v72;
    if (v12 >= v14 && v12 - v14 > 7)
    {
      uint64_t v16 = (unint64_t *)(v13 + v14);
      *((void *)v72 + 2) = v16 + 1;
      if (v13)
      {
        unint64_t v17 = *v16;
        v69 = 0;
        uint64_t v70 = 0;
        if (v17 >= 0x8000)
        {
          do
          {
            IPC::Decoder::decode<WebKit::WebSpeechSynthesisVoice>((uint64_t)&v79, v8);
            if (!v83) {
              goto LABEL_31;
            }
            int v32 = HIDWORD(v70);
            if (HIDWORD(v70) == v70)
            {
              WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebSpeechSynthesisVoice>((unsigned int *)&v69, (unint64_t)&v79);
            }
            else
            {
              uint64_t v33 = (char *)v69 + 32 * HIDWORD(v70);
              char v34 = v79;
              v79 = 0;
              *(void *)uint64_t v33 = v34;
              v35 = v80;
              v80 = 0;
              *((void *)v33 + 1) = v35;
              unint64_t v36 = v81;
              unint64_t v81 = 0;
              *((void *)v33 + 2) = v36;
              *((_WORD *)v33 + 12) = v82;
              HIDWORD(v70) = v32 + 1;
            }
            std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v79, v18);
            --v17;
          }
          while (v17);
          unsigned int v2 = v70;
          uint64_t v1 = HIDWORD(v70);
          int v8 = v69;
          if (v70 > HIDWORD(v70))
          {
            v66 = v69;
            if (HIDWORD(v70))
            {
              if (HIDWORD(v70) >> 27) {
                goto LABEL_85;
              }
              uint64_t v67 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v70)));
              unsigned int v2 = v1;
              v66 = v8;
              if ((WTF *)v67 != v8)
              {
                v68 = (WTF *)v67;
                WTF::VectorMover<false,WebKit::WebSpeechSynthesisVoice>::move(v8, (WTF *)((char *)v8 + 32 * v1), v67);
                unsigned int v2 = v1;
                v66 = v68;
              }
            }
            if (v8)
            {
              if (v66 == v8)
              {
                unsigned int v2 = 0;
                v66 = 0;
                v69 = 0;
                LODWORD(v70) = 0;
              }
              WTF::fastFree(v8, v9);
            }
            int v8 = v66;
          }
        }
        else
        {
          if (v17)
          {
            LODWORD(v70) = v17;
            v69 = (WTF *)WTF::fastMalloc((WTF *)(32 * v17));
            while (1)
            {
              IPC::Decoder::decode<WebKit::WebSpeechSynthesisVoice>((uint64_t)&v79, v8);
              if (!v83) {
                break;
              }
              int v19 = HIDWORD(v70);
              if (HIDWORD(v70) == v70)
              {
                WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebSpeechSynthesisVoice>((unsigned int *)&v69, (unint64_t)&v79);
              }
              else
              {
                unint64_t v20 = (char *)v69 + 32 * HIDWORD(v70);
                uint64_t v21 = v79;
                v79 = 0;
                *(void *)unint64_t v20 = v21;
                uint64_t v22 = v80;
                v80 = 0;
                *((void *)v20 + 1) = v22;
                unint64_t v23 = v81;
                unint64_t v81 = 0;
                *((void *)v20 + 2) = v23;
                *((_WORD *)v20 + 12) = v82;
                HIDWORD(v70) = v19 + 1;
              }
              std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v79, v18);
              if (!--v17)
              {
                int v8 = v69;
                unsigned int v2 = v70;
                LODWORD(v1) = HIDWORD(v70);
                goto LABEL_22;
              }
            }
LABEL_31:
            std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v79, v18);
            WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v37);
            goto LABEL_32;
          }
          LODWORD(v1) = 0;
          unsigned int v2 = 0;
          int v8 = 0;
        }
LABEL_22:
        v69 = 0;
        uint64_t v70 = 0;
        LOBYTE(v86) = 1;
        WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v9);
        v84 = 0;
        unint64_t v85 = 0;
        WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v24);
        char v78 = 1;
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        char v71 = 1;
        WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v25);
        if (!v73)
        {
          uint64_t v27 = v72;
          v72 = 0;
          v69 = 0;
          uint64_t v70 = 0;
          v84 = 0;
          unint64_t v85 = 0;
          v79 = v27;
          v80 = v8;
          uint64_t v86 = 0;
          unint64_t v81 = __PAIR64__(v1, v2);
          int v82 = 0;
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v26);
          uint64_t v29 = v84;
          v84 = 0;
          if (v29)
          {
            IPC::Decoder::~Decoder(v29);
            WTF::fastFree(v30, v31);
          }
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v28);
          int v10 = 0;
LABEL_35:
          int v11 = v73;
          if (v73 == -1) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
        goto LABEL_79;
      }
      unint64_t v61 = v12;
      v62 = 0;
    }
    else
    {
      unint64_t v61 = 0;
      v62 = 0;
      *(void *)v72 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v63 = *((void *)v8 + 3);
      if (v63) {
        goto LABEL_80;
      }
    }
LABEL_64:
    *(void *)int v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v64 = *((void *)v8 + 3);
    if (v64) {
      BOOL v65 = v61 == 0;
    }
    else {
      BOOL v65 = 1;
    }
    if (!v65) {
      (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v64 + 16))(v64, v62, v61);
    }
LABEL_32:
    unint64_t v7 = *(void **)v8;
    uint64_t v38 = *((void *)v8 + 1);
    *(void *)int v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v39 = *((void *)v8 + 3);
    if (v39 && v38)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v39 + 16))(v39, v7);
      unint64_t v7 = *(void **)v8;
      uint64_t v59 = *((void *)v8 + 1);
      uint64_t v60 = *((void *)v8 + 3);
      *(void *)int v8 = 0;
      *((void *)v8 + 1) = 0;
      if (v60 && v59) {
        (*(void (**)(uint64_t, void *))(*(void *)v60 + 16))(v60, v7);
      }
    }
    else
    {
      *(void *)int v8 = 0;
      *((void *)v8 + 1) = 0;
    }
    LOBYTE(v79) = 13;
    int v10 = 1;
    int v82 = 1;
    goto LABEL_35;
  }
  if (v73 != 1)
  {
LABEL_79:
    uint64_t v63 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
    if (v12)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v63 + 16))(v63, v13, v12);
      v62 = *(void **)v8;
      unint64_t v61 = *((void *)v8 + 1);
    }
    else
    {
      unint64_t v61 = 0;
      v62 = 0;
    }
    goto LABEL_64;
  }
  LOBYTE(v79) = (_BYTE)v72;
  int v10 = 1;
  int v82 = 1;
  int v11 = 1;
LABEL_36:
  ((void (*)(WTF **, WTF **))off_1EE9F7B00[v11])(&v84, &v72);
LABEL_37:
  char v40 = v74;
  v74 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v7);
    WTF::fastFree(v57, v58);
  }
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  if (v10)
  {
    int v8 = 0;
    unsigned int v2 = 0;
    LODWORD(v1) = 0;
    goto LABEL_41;
  }
  v41 = &v80;
LABEL_43:
  void *v41 = 0;
  v41[1] = 0;
  v84 = v8;
  unint64_t v85 = __PAIR64__(v1, v2);
  WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v7);
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  if (!v1)
  {
    LODWORD(v44) = 0;
    goto LABEL_49;
  }
  if (v1 >> 29)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x1991EF788);
  }
  uint64_t v43 = WTF::fastMalloc((WTF *)(8 * v1));
  unint64_t v44 = 0;
  LODWORD(v77) = v1;
  uint64_t v76 = v43;
  v45 = (unsigned __int8 *)v8 + 16;
  do
  {
    unint64_t v46 = v44;
    WebCore::PlatformSpeechSynthesisVoice::create((WebCore::PlatformSpeechSynthesisVoice *)(v45 - 16), (const WTF::String *)(v45 - 8), (const WTF::String *)v45, (const WTF::String *)v45[8]);
    ++v44;
    *(void *)(v43 + 8 * v46) = v69;
    v45 += 32;
  }
  while (v44 < HIDWORD(v85));
LABEL_49:
  v47 = (WTF::StringImpl ****)((char *)this + 32);
  uint64_t v48 = *((unsigned int *)this + 11);
  if (v48)
  {
    v49 = *v47;
    uint64_t v50 = 8 * v48;
    do
    {
      v51 = *v49;
      *v49 = 0;
      if (v51) {
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v51, v42);
      }
      ++v49;
      v50 -= 8;
    }
    while (v50);
  }
  v52 = (WTF *)*v47;
  if (*v47)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v52, v42);
  }
  *((void *)this + 4) = v76;
  int v53 = v77;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  *((_DWORD *)this + 10) = v53;
  *((_DWORD *)this + 11) = v44;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformSpeechSynthesisVoice,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisVoice>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisVoice>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v42);
  uint64_t v55 = WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v54);
  if (v82 != -1) {
    ((void (*)(uint64_t, WTF **))off_1EE9F7AF0[v82])(v55, &v79);
  }
  return (uint64_t)this + 32;
}

uint64_t WebKit::WebSpeechSynthesisClient::corePageObserver(WebKit::WebSpeechSynthesisClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 48);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 272);
  if (!v3) {
    return 0;
  }
  (*(void (**)(WTF **__return_ptr))(*(void *)v3 + 24))(&v12);
  uint64_t v5 = (unsigned int *)v12;
  if (!v12) {
    return 0;
  }
  uint64_t v6 = *((void *)v12 + 1);
  unint64_t v12 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    uint64_t v10 = v6;
    WTF::fastFree((WTF *)v5, v4);
    if (!v10) {
      return 0;
    }
  }
  else if (!v6)
  {
    return 0;
  }
  (*(void (**)(WTF **__return_ptr))(**(void **)(*(void *)(*((void *)this + 2) + 48) + 272) + 24))(&v12);
  int v8 = (unsigned int *)v12;
  if (!v12) {
    return 0;
  }
  uint64_t v9 = *((void *)v12 + 1);
  unint64_t v12 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  return v9;
}

IPC::Encoder *WebKit::WebSpeechSynthesisClient::resetState(WebKit::WebSpeechSynthesisClient *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  uint64_t v2 = v1[4];
  v1 += 4;
  uint64_t v3 = (*(uint64_t (**)(void *))(v2 + 56))(v1);
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 2102;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  (*(void (**)(void *, IPC::Encoder **, void))(*v1 + 32))(v1, &v9, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSpeechSynthesisClient::speak(uint64_t a1, uint64_t a2)
{
  char v4 = (unsigned int *)(a1 + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v5 = *(atomic_uint **)(a1 + 8);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v6 = &unk_1EE9F7B20;
  v6[1] = a1;
  v6[2] = v5;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v4, a1);
  unint64_t v7 = *(atomic_uint **)(a1 + 8);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v8 = &unk_1EE9F7B48;
  v8[1] = a1;
  v8[2] = v7;
  uint64_t v9 = *(void *)(*(void *)a2 + 32);
  uint64_t v10 = (WTF::StringImpl **)(v9 + 8);
  int v11 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
  if (!v9) {
    uint64_t v10 = (WTF::StringImpl **)MEMORY[0x1E4F30980];
  }
  unint64_t v12 = *v10;
  if (v12) {
    *(_DWORD *)v12 += 2;
  }
  uint64_t v55 = v12;
  uint64_t v13 = (WTF::StringImpl **)(v9 + 16);
  if (!v9) {
    uint64_t v13 = v11;
  }
  unint64_t v14 = *v13;
  if (v14) {
    *(_DWORD *)v14 += 2;
  }
  v54 = v14;
  if (v9) {
    int v11 = (WTF::StringImpl **)(v9 + 24);
  }
  uint64_t v15 = *v11;
  if (v15) {
    *(_DWORD *)v15 += 2;
  }
  int v53 = v15;
  if (v9)
  {
    BOOL v16 = *(unsigned char *)(v9 + 32) != 0;
    BOOL v17 = *(unsigned char *)(v9 + 33) != 0;
  }
  else
  {
    BOOL v16 = 0;
    BOOL v17 = 0;
  }
  uint64_t v18 = *(void **)(a1 + 16);
  uint64_t v19 = v18[4];
  v18 += 4;
  uint64_t v20 = (*(uint64_t (**)(void *))(v19 + 56))(v18);
  uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v21 = 2104;
  *((void *)v21 + 1) = v20;
  *((void *)v21 + 66) = (char *)v21 + 16;
  *((void *)v21 + 67) = 512;
  *((void *)v21 + 68) = 0;
  *((void *)v21 + 70) = 0;
  *((void *)v21 + 69) = 0;
  IPC::Encoder::encodeHeader(v21);
  v58 = v21;
  uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v22 = &unk_1EE9F7B70;
  v22[1] = v8;
  v56 = v22;
  uint64_t v57 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void **, void))(*v18 + 40))(v18, &v58, &v56, 0);
  uint64_t v24 = v56;
  v56 = 0;
  if (v24) {
    (*(void (**)(void *))(*v24 + 8))(v24);
  }
  uint64_t v25 = v58;
  v58 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v23);
    WTF::fastFree(v49, v50);
  }
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v28 = *(void *)(v26 + 32);
  uint64_t v27 = v26 + 32;
  uint64_t v29 = (uint64_t *)(*(void *)a2 + 16);
  char v30 = (uint64_t *)(*(void *)a2 + 24);
  float v31 = *(float *)(*(void *)a2 + 40);
  float v32 = *(float *)(*(void *)a2 + 44);
  float v33 = *(float *)(*(void *)a2 + 48);
  double v34 = *(double *)(*(void *)a2 + 56);
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(v28 + 56))(v27);
  unint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v36 = 2105;
  *((void *)v36 + 1) = v35;
  *((void *)v36 + 66) = (char *)v36 + 16;
  *((void *)v36 + 67) = 512;
  *((void *)v36 + 68) = 0;
  *((void *)v36 + 70) = 0;
  *((void *)v36 + 69) = 0;
  IPC::Encoder::encodeHeader(v36);
  v58 = v36;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v36, v29);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v36, v30);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v36, v31);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v36, v32);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v36, v33);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v36, v34);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v36, (uint64_t *)&v55);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v36, (uint64_t *)&v54);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v36, (uint64_t *)&v53);
  v37 = (unsigned char *)IPC::Encoder::grow(v36, 1uLL, 1);
  if (!v38 || (unsigned char *v37 = v16, v39 = (unsigned char *)IPC::Encoder::grow(v36, 1uLL, 1), !v40))
  {
    __break(0xC471u);
    JUMPOUT(0x1991EFE94);
  }
  *uint64_t v39 = v17;
  v41 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v41 = &unk_1EE9F7B98;
  v41[1] = v6;
  uint64_t v42 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v56 = v41;
  uint64_t v57 = v42;
  (*(void (**)(uint64_t, IPC::Encoder **, void **, void))(*(void *)v27 + 40))(v27, &v58, &v56, 0);
  unint64_t v44 = v56;
  v56 = 0;
  if (v44) {
    (*(void (**)(void *))(*v44 + 8))(v44);
  }
  v45 = v58;
  v58 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v43);
    WTF::fastFree(v51, v52);
  }
  unint64_t v46 = v53;
  int v53 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v43);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v43);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  uint64_t result = v55;
  uint64_t v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v43);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechSynthesisClient::cancel(WebKit::WebSpeechSynthesisClient *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  uint64_t v2 = v1[4];
  v1 += 4;
  uint64_t v3 = (*(uint64_t (**)(void *))(v2 + 56))(v1);
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 2100;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  (*(void (**)(void *, IPC::Encoder **, void))(*v1 + 32))(v1, &v9, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechSynthesisClient::pause(WebKit::WebSpeechSynthesisClient *this)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v3 = &unk_1EE9F7BC0;
  v3[1] = this;
  v3[2] = v2;
  char v4 = (void *)*((void *)this + 2);
  uint64_t v5 = v4[4];
  v4 += 4;
  uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v4);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2101;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v15 = v7;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9F7BE8;
  v8[1] = v3;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*v4 + 40))(v4, &v15, v14, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSpeechSynthesisClient::resume(WebKit::WebSpeechSynthesisClient *this)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v3 = &unk_1EE9F7C10;
  v3[1] = this;
  v3[2] = v2;
  char v4 = (void *)*((void *)this + 2);
  uint64_t v5 = v4[4];
  v4 += 4;
  uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v4);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2103;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v15 = v7;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9F7C38;
  v8[1] = v3;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*v4 + 40))(v4, &v15, v14, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebStorageConnection::getPersisted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  {
    BOOL v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  uint64_t v5 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, *(atomic_uchar *volatile **)(v5 + 24));
  uint64_t v6 = (os_unfair_lock_s *)v18;
  uint64_t v7 = *a3;
  *a3 = 0;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9F7C60;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 583;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v20 = v10;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v10, a2);
  v19[0] = (uint64_t)v8;
  v19[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v20, v19, 0, 0);
  uint64_t v12 = v19[0];
  v19[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
}

atomic_uchar *volatile **WebKit::WebStorageConnection::persist(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  {
    BOOL v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  uint64_t v5 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, *(atomic_uchar *volatile **)(v5 + 24));
  uint64_t v6 = (os_unfair_lock_s *)v18;
  uint64_t v7 = *a3;
  *a3 = 0;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9F7C88;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 582;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v20 = v10;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v10, a2);
  v19[0] = (uint64_t)v8;
  v19[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v20, v19, 0, 0);
  uint64_t v12 = v19[0];
  v19[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
}

atomic_uchar *volatile **WebKit::WebStorageConnection::getEstimate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  {
    BOOL v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  uint64_t v5 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, *(atomic_uchar *volatile **)(v5 + 24));
  uint64_t v6 = (os_unfair_lock_s *)v18;
  uint64_t v7 = *a3;
  *a3 = 0;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9F7CB0;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 564;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v20 = v10;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v10, a2);
  v19[0] = (uint64_t)v8;
  v19[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v20, v19, 0, 0);
  uint64_t v12 = v19[0];
  v19[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
}

atomic_uchar *volatile **WebKit::WebStorageConnection::fileSystemGetDirectory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  {
    BOOL v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  uint64_t v5 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, *(atomic_uchar *volatile **)(v5 + 24));
  uint64_t v6 = (os_unfair_lock_s *)v18;
  uint64_t v7 = *a3;
  *a3 = 0;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9F7CE8;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 565;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v20 = v10;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v10, a2);
  v19[0] = (uint64_t)v8;
  v19[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v20, v19, 0, 0);
  uint64_t v12 = v19[0];
  v19[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
}

uint64_t WebKit::WebUserMediaClient::pageDestroyed(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 72))();
  }
  return this;
}

void WebKit::WebUserMediaClient::requestUserMediaAccess(WebKit::WebUserMediaClient *this, WebCore::UserMediaRequest *a2)
{
}

void *WebKit::WebUserMediaClient::cancelUserMediaAccessRequest(WebKit::WebUserMediaClient *this, WebCore::UserMediaRequest *a2)
{
  return WebKit::UserMediaPermissionRequestManager::cancelUserMediaRequest(*(WebKit::UserMediaPermissionRequestManager **)(*((void *)this + 1) + 656), a2);
}

void WebKit::WebUserMediaClient::enumerateMediaDevices(uint64_t a1, void *a2, uint64_t *a3)
{
}

uint64_t WebKit::WebUserMediaClient::addDeviceChangeObserver(uint64_t a1, uint64_t *a2)
{
  return WebKit::UserMediaPermissionRequestManager::addDeviceChangeObserver(*(void *)(*(void *)(a1 + 8) + 656), a2);
}

uint64_t *WebKit::WebUserMediaClient::removeDeviceChangeObserver(uint64_t a1, uint64_t a2)
{
  return WebKit::UserMediaPermissionRequestManager::removeDeviceChangeObserver(*(void *)(*(void *)(a1 + 8) + 656), a2);
}

WTF::StringImpl *WebKit::WebUserMediaClient::updateCaptureState(uint64_t a1, void *a2, __int16 a3, __int16 a4, uint64_t *a5)
{
  return WebKit::WebPage::updateCaptureState(*(void *)(*(void *)(*(void *)(a1 + 8) + 656) + 16), a2, a3, a4, a5);
}

IPC::Encoder *WebKit::WebUserMediaClient::setShouldListenToVoiceActivity(WebKit::WebUserMediaClient *this, char a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  char v10 = a2;
  uint64_t v3 = v2[4];
  v2 += 4;
  uint64_t v4 = (*(uint64_t (**)(void *))(v3 + 56))(v2);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2080;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v11 = v5;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, &v10);
  (*(void (**)(void *, IPC::Encoder **, void))(*v2 + 32))(v2, &v11, 0);
  uint64_t result = v11;
  int v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::GPUProcessWebWorkerClient::createNestedWorkerClient@<X0>(WebKit::GPUProcessWebWorkerClient *this@<X0>, WebCore::WorkerOrWorkletThread *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 16) = *((_DWORD *)this + 4);
  *(void *)uint64_t result = &unk_1EE9F7A80;
  *(void *)(result + 8) = a2;
  *(void *)(result + 24) = 0;
  *a3 = result;
  return result;
}

uint64_t WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(WebKit::GPUProcessWebWorkerClient *this)
{
  uint64_t result = *((void *)this + 3);
  if (!result)
  {
    WebKit::RemoteRenderingBackendProxy::create(*((void *)this + 1), &v6);
    uint64_t v3 = v6;
    uint64_t v6 = 0;
    uint64_t v4 = *((void *)this + 3);
    *((void *)this + 3) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
    return *((void *)this + 3);
  }
  return result;
}

uint64_t WebKit::GPUProcessWebWorkerClient::sinkIntoImageBuffer@<X0>(WebKit::GPUProcessWebWorkerClient *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    uint64_t v7 = *a2;
    if (v6)
    {
      *a2 = 0;
      uint64_t v12 = v7;
      int v8 = (WebKit::RemoteRenderingBackendProxy *)WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(a1);
      WebKit::RemoteSerializedImageBufferProxy::sinkIntoImageBuffer(&v12, v8, a3);
      uint64_t result = v12;
      uint64_t v12 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      return result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = 0;
  uint64_t v11 = v7;
  WebKit::WebWorkerClient::sinkIntoImageBuffer(v6, &v11);
  uint64_t result = v11;
  if (v11)
  {
    char v10 = *(uint64_t (**)(void))(*(void *)v11 + 8);
    return v10();
  }
  return result;
}

uint64_t WebKit::WebWorkerClient::sinkIntoImageBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v4 = v2;
  WebCore::SerializedImageBuffer::sinkIntoImageBuffer();
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

void WebKit::GPUProcessWebWorkerClient::createImageBuffer(WebKit::GPUProcessWebWorkerClient *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, CFTypeRef *a4@<X3>, char a5@<W4>, char a6@<W5>, WebCore::ImageBuffer **a7@<X8>, float a8@<S0>)
{
  char v12 = a3;
  {
    BOOL v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  if ((a3 - 2) < 5)
  {
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 762)) {
      goto LABEL_4;
    }
LABEL_9:
    *a7 = 0;
    return;
  }
  if (a3 == 1)
  {
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 761)) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (a3 != 8 || !*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 763)) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v15 = (WebKit::RemoteRenderingBackendProxy *)WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(a1);

  WebKit::RemoteRenderingBackendProxy::createImageBuffer(v15, a2, v12, a4, a5, a6, a7, a8);
}

unsigned int **WebKit::GPUProcessWebWorkerClient::createGraphicsContextGL@<X0>(WebKit::GPUProcessWebWorkerClient *this@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 764))
  {
    uint64_t v6 = (uint64_t *)WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend(this);
    uint64_t result = WebKit::RemoteGraphicsContextGLProxy::create(a2, v6, *((void *)this + 1), &v10);
    if (v10) {
      int v8 = (char *)v10 + 24;
    }
    else {
      int v8 = 0;
    }
    *a3 = v8;
  }
  else
  {
    return (unsigned int **)MEMORY[0x1F4172158](a2);
  }
  return result;
}

unsigned int **WebKit::GPUProcessWebWorkerClient::createGPUForWebGPU@<X0>(WebKit::RemoteRenderingBackendProxy **this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (WebKit::RemoteGPUProxy *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v4 = &unk_1EE9EBCC8;
  *((void *)v4 + 1) = 1;
  uint64_t v5 = (WebKit::WebGPU::ConvertToBackingContext *)WebKit::GPUProcessWebWorkerClient::ensureRenderingBackend((WebKit::GPUProcessWebWorkerClient *)this);
  uint64_t result = WebKit::RemoteGPUProxy::create(v4, v5, this[1], &v8);
  *a2 = v8;
  if (*((_DWORD *)v4 + 2) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(WebKit::RemoteGPUProxy *))(*(void *)v4 + 8);
    return (unsigned int **)v7(v4);
  }
  else
  {
    --*((_DWORD *)v4 + 2);
  }
  return result;
}

uint64_t WebKit::WebWorkerClient::displayID(WebKit::WebWorkerClient *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t WebKit::WebCaptionPreferencesDelegate::setDisplayMode(uint64_t a1, char a2)
{
  {
    char v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2607;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v4, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  uint64_t v6 = v11;
  uint64_t v11 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v8, v9);
  }
  return WebCore::CaptionUserPreferencesMediaAF::setCachedCaptionDisplayMode();
}

IPC::Encoder *WebKit::WebCaptionPreferencesDelegate::setPreferredLanguage(WebKit::WebCaptionPreferencesDelegate *this, const WTF::String *a2)
{
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2608;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v10 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::WebValidationMessageClient::~WebValidationMessageClient(WebKit::WebValidationMessageClient *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      *(_DWORD *)(v4 + 28) += 2;
      WebKit::WebValidationMessageClient::hideValidationMessage(this, (const WebCore::Element *)v4);
      if (*(_DWORD *)(v4 + 28) == 2)
      {
        if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
      }
      else
      {
        *(_DWORD *)(v4 + 28) -= 2;
      }
    }
    uint64_t v5 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v5) {
      WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v5, a2);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebValidationMessageClient::~WebValidationMessageClient(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::WebValidationMessageClient::hideValidationMessage(WebKit::WebValidationMessageClient *this, const WebCore::Element *a2)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    uint64_t v6 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    char v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  uint64_t v8 = *((void *)this + 2);
  if (!v8 || *(const WebCore::Element **)(v8 + 8) != a2)
  {
    if (v7) {
      return;
    }
    goto LABEL_8;
  }
  if ((v7 & 1) == 0)
  {
    *((void *)this + 2) = 0;
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref((unsigned int *)v8, a2);
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 32) + 56))(v6 + 32);
    char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v10 = 1990;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v15 = v10;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v6 + 32) + 32))(v6 + 32, &v15, 0);
    char v12 = v15;
    uint64_t v15 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
LABEL_8:
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void WebKit::WebValidationMessageClient::documentDetached(WebKit::WebValidationMessageClient *this, WebCore::Document *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(const WebCore::Element **)(v2 + 8);
    if (v3)
    {
      if (*(WebCore::Document **)(*((void *)v3 + 6) + 8) == a2) {
        WebKit::WebValidationMessageClient::hideValidationMessage(this, v3);
      }
    }
  }
}

void WebKit::WebValidationMessageClient::showValidationMessage(WebKit::WebValidationMessageClient *this, const WebCore::Element *a2, const WTF::String *a3)
{
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    char v7 = *(const WebCore::Element **)(v6 + 8);
    if (v7) {
      WebKit::WebValidationMessageClient::hideValidationMessage(this, v7);
    }
  }
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  uint64_t v9 = (atomic_uint *)(*((void *)a2 + 2) & 0xFFFFFFFFFFFFLL);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  char v10 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = v9;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v10, v8);
  }
  *((void *)this + 3) = WebCore::Element::boundingBoxInRootViewCoordinates(a2);
  *((void *)this + 4) = v11;
  char v12 = (void *)((char *)this + 24);
  uint64_t v13 = *(v12 - 2);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if (v14) {
      uint64_t v15 = v14 - 16;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  CFRetain(*(CFTypeRef *)(v15 + 8));
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)(v15 + 32) + 56))(v15 + 32);
  BOOL v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v17 = 2099;
  *((void *)v17 + 1) = v16;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v22 = v17;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v17, v12);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v15 + 32) + 32))(v15 + 32, &v22, 0);
  uint64_t v19 = v22;
  uint64_t v22 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v18);
    WTF::fastFree(v20, v21);
  }
  CFRelease(*(CFTypeRef *)(v15 + 8));
}

BOOL WebKit::WebValidationMessageClient::isValidationMessageVisible(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v2 = *(void *)(v2 + 8);
  }
  return v2 == a2;
}

void WebKit::WebValidationMessageClient::hideAnyValidationMessage(WebKit::WebValidationMessageClient *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v5 = v4 - 16;
    CFRetain(*(CFTypeRef *)(v4 - 8));
    char v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  uint64_t v7 = *((void *)this + 2);
  if (!v7 || !*(void *)(v7 + 8))
  {
    if (v6) {
      return;
    }
    goto LABEL_7;
  }
  if ((v6 & 1) == 0)
  {
    *((void *)this + 2) = 0;
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref((unsigned int *)v7, a2);
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    uint64_t v15 = v5;
    uint64_t v8 = v5 + 32;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 32) + 56))(v5 + 32);
    char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v10 = 1990;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v16 = v10;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v16, 0);
    char v12 = v16;
    uint64_t v16 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
    uint64_t v5 = v15;
LABEL_7:
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

uint64_t WebKit::WebPreviewLoaderClient::WebPreviewLoaderClient(uint64_t result, _DWORD **a2, _DWORD **a3, uint64_t a4)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9F7998;
  uint64_t v4 = *a2;
  if (*a2) {
    *v4 += 2;
  }
  *(void *)(result + 16) = v4;
  uint64_t v5 = *a3;
  if (*a3) {
    *v5 += 2;
  }
  *(void *)(result + 24) = v5;
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = 0;
  return result;
}

void WebKit::WebPreviewLoaderClient::~WebPreviewLoaderClient(WebKit::WebPreviewLoaderClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPreviewLoaderClient::~WebPreviewLoaderClient(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebPreviewLoaderClient::didReceiveData(uint64_t **this, const WebCore::SharedBuffer *a2)
{
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  v8[0] = this[4];
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), v8);
  if (result)
  {
    uint64_t v4 = this[5];
    if (!v4 || !v4[6])
    {
      v8[0] = (uint64_t *)(this + 2);
      v8[1] = (uint64_t *)(this + 3);
      uint64_t v5 = result + 32;
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(result + 32) + 56))(result + 32);
      IPC::MessageSender::send<Messages::WebPageProxy::DidStartLoadForQuickLookDocumentInMainFrame>(v5, v8, v6, 0);
    }
    WebCore::SharedBufferBuilder::ensureBuffer((WebCore::SharedBufferBuilder *)(this + 5));
    return WebCore::FragmentedSharedBuffer::append();
  }
  return result;
}

unsigned int *WebKit::WebPreviewLoaderClient::didFinishLoading(WebKit::WebPreviewLoaderClient *this)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v6 = (WebCore::FragmentedSharedBuffer *)*((void *)this + 4);
  uint64_t result = (unsigned int *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v6);
  if (result)
  {
    uint64_t v3 = (WebKit::WebPage *)result;
    WebCore::SharedBufferBuilder::take((uint64_t *)&v6, (WebKit::WebPreviewLoaderClient *)((char *)this + 40));
    WebKit::WebPage::didFinishLoadForQuickLookDocumentInMainFrame(v3, v6);
    uint64_t result = (unsigned int *)v6;
    uint64_t v6 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v4);
    }
  }
  return result;
}

unsigned int *WebKit::WebPreviewLoaderClient::didFail(WebKit::WebPreviewLoaderClient *this, void *a2)
{
  uint64_t result = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPreviewLoaderClient::didRequestPassword(uint64_t a1, uint64_t *a2)
{
  {
    char v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  char v12 = *(WTF::StringImpl **)(a1 + 32);
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v12);
  if (v4)
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    uint64_t v11 = (WTF::StringImpl *)v5;
    char v12 = (WTF::StringImpl *)(a1 + 16);
    uint64_t v6 = v4 + 32;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 32) + 56))(v4 + 32);
    IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::RequestPasswordForQuickLookDocumentInMainFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6, (uint64_t **)&v12, (uint64_t *)&v11, v7, 0);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    char v12 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)*a2 + 16))(*a2, &v12);
    uint64_t result = v12;
    char v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebKit::WebSpeechSynthesisClient::~WebSpeechSynthesisClient(WebKit::WebSpeechSynthesisClient *this, WTF::StringImpl *a2)
{
  WebKit::WebSpeechSynthesisClient::~WebSpeechSynthesisClient(this, a2);

  WTF::fastFree(v2, v3);
}

{
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;

  *(void *)this = &unk_1EE9F79E0;
  WTF::Vector<WTF::RefPtr<WebCore::PlatformSpeechSynthesisVoice,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisVoice>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisVoice>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    *(void *)(v5 + 8) = 0;
    uint64_t v6 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v6)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v3);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

unsigned int **WebKit::WebSpeechSynthesisClient::setObserver(uint64_t a1, atomic_uint **a2)
{
  return WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 24), a2);
}

uint64_t WebKit::WebSpeechSynthesisClient::observer@<X0>(uint64_t this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *(atomic_uint **)(this + 24);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *a2 = v2;
  return this;
}

void WebKit::GPUProcessWebWorkerClient::~GPUProcessWebWorkerClient(WebKit::GPUProcessWebWorkerClient *this)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void WebKit::GPUProcessWebWorkerClient::~GPUProcessWebWorkerClient(WebKit::GPUProcessWebWorkerClient *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebPreviewLoaderClient::supportsPasswordEntry(WebKit::WebPreviewLoaderClient *this)
{
  return 1;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy24SpeechSynthesisVoiceListEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::PlatformSpeechSynthesisVoice,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisVoice>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisVoice>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF::StringImpl ****)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      void *v4 = 0;
      if (v6) {
        WTF::RefCounted<WebCore::PlatformSpeechSynthesisVoice>::deref(v6, a2);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebSpeechSynthesisVoice>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebSpeechSynthesisVoice,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebSpeechSynthesisVoice>(unsigned int *a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 32 * a1[3];
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  *(void *)(v4 + 16) = v7;
  *(_WORD *)(v4 + 24) = *(_WORD *)(result + 24);
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebSpeechSynthesisVoice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1991F1F90);
    }
    unint64_t v3 = result;
    uint64_t v4 = *(WTF::StringImpl **)result;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)result + 32 * *((unsigned int *)result + 3));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(void *)unint64_t v3 = v6;
    unint64_t result = WTF::VectorMover<false,WebKit::WebSpeechSynthesisVoice>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebSpeechSynthesisVoice>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v7;
      uint64_t v8 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v8;
      *(_WORD *)(a3 + 24) = *((_WORD *)v5 + 12);
      unint64_t v9 = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      unint64_t v10 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      unint64_t result = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F7B20;
  unint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F7B20;
  unint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      unint64_t result = WebKit::WebSpeechSynthesisClient::corePageObserver(*(WebKit::WebSpeechSynthesisClient **)(result + 8));
      if (result)
      {
        int v2 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v2();
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F7B48;
  unint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F7B48;
  unint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::speak(WTF::RefPtr<WebCore::PlatformSpeechSynthesisUtterance,WTF::RawPtrTraits<WebCore::PlatformSpeechSynthesisUtterance>,WTF::DefaultRefDerefTraits<WebCore::PlatformSpeechSynthesisUtterance>>)::$_1,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      unint64_t result = WebKit::WebSpeechSynthesisClient::corePageObserver(*(WebKit::WebSpeechSynthesisClient **)(result + 8));
      if (result)
      {
        int v2 = *(uint64_t (**)(void))(*(void *)result + 24);
        return v2();
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSetFinishedCallback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7B70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSetFinishedCallback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7B70;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSetFinishedCallback,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSpeak,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7B98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSpeak,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7B98;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisSpeak,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::pause(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F7BC0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::pause(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F7BC0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::pause(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      unint64_t result = WebKit::WebSpeechSynthesisClient::corePageObserver(*(WebKit::WebSpeechSynthesisClient **)(result + 8));
      if (result)
      {
        uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 32);
        return v2();
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisPause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7BE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisPause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7BE8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisPause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::resume(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F7C10;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::resume(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F7C10;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSpeechSynthesisClient::resume(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    if (*(void *)(v1 + 8))
    {
      unint64_t result = WebKit::WebSpeechSynthesisClient::corePageObserver(*(WebKit::WebSpeechSynthesisClient **)(result + 8));
      if (result)
      {
        uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 40);
        return v2();
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisResume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7C38;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisResume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7C38;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::SpeechSynthesisResume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persisted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7C60;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persisted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7C60;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persisted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  unint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persist,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7C88;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persist,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7C88;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Persist,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  unint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7CB0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7CB0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (uint64_t v4 = *a2) == 0)
  {
    unint64_t v10 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(v10);
  }
  unint64_t v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v4, v5);
        unint64_t v12 = 0;
        uint64_t v25 = *a2;
        uint64_t v26 = a2[1];
        uint64_t v27 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v13 = 0;
        if (v27 && v26)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25, v26);
          uint64_t v13 = *a2;
          unint64_t v12 = a2[1];
        }
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_16;
  }
  uint64_t v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    unint64_t v12 = v5;
    uint64_t v13 = v4;
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15 && v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
    }
LABEL_20:
    uint64_t v19 = *a2;
    uint64_t v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v21 = a2[3];
    if (v21 && v20)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
      uint64_t v22 = *a2;
      uint64_t v23 = a2[1];
      uint64_t v24 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v24 && v23) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(v2);
  }
  if (v7)
  {
    IPC::ArgumentCoder<WebCore::StorageEstimate,void>::decode(a2, (uint64_t)&v31);
    if ((_BYTE)v33
      || (uint64_t v16 = *a2, v17 = a2[1], *a2 = 0, a2[1] = 0, (v18 = a2[3]) != 0)
      && v17
      && ((*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16), (_BYTE)v33))
    {
      *(void *)uint64_t v29 = *(void *)v32;
      *(void *)&v29[7] = *(void *)&v32[7];
      char v28 = v31;
      int v30 = 0;
      uint64_t v8 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v8 + 16))(v8, &v28);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
      if (v30 != -1) {
        return ((uint64_t (*)(char *, char *))off_1EE9F7CC8[v30])(&v31, &v28);
      }
      return result;
    }
    goto LABEL_20;
  }
  char v31 = 33;
  *(void *)&v32[7] = 0;
  int v33 = 1;
  uint64_t v11 = *v2;
  uint64_t *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v11 + 16))(v11, &v31);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (v33 != -1) {
    return ((uint64_t (*)(char *, char *))off_1EE9F7CC8[v33])(&v28, &v31);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::Estimate,WebKit::WebStorageConnection::getEstimate(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::StorageEstimate> &&)> &&)::$_0>(uint64_t *a1)
{
  v3[0] = 33;
  uint64_t v4 = 0;
  int v5 = 1;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, char *))off_1EE9F7CC8[v5])(&v6, v3);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15StorageEstimateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0>(WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F7CE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0>(WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F7CE8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::ClientOrigin &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::FileSystemGetDirectory,WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0>(WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::FileSystemStorageConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>>>(a2, (uint64_t)&v5), v6))
  {
    long long v7 = v5;
    uint64_t v3 = (uint64_t *)&v7;
  }
  else
  {
    LOBYTE(v5) = 7;
    DWORD2(v5) = 1;
    uint64_t v3 = (uint64_t *)&v5;
  }
  return WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WebCore::ClientOrigin &&::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WebCore::ClientOrigin &&::SupportsObjectIdentifierNullState)1>,WebCore::ClientOrigin &&::RefPtr<WebCore::FileSystemStorageConnection,WebCore::ClientOrigin &&::RawPtrTraits<WebCore::ClientOrigin &&::RefPtr>,WebCore::ClientOrigin &&::DefaultRefDerefTraits<WebCore::ClientOrigin &&::RefPtr>>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebCore::ClientOrigin &&::SupportsObjectIdentifierNullState,WebKit::FileSystemStorageError>>(v2, v3);
}

WTF::StringImpl *WebKit::WebStorageConnection::fileSystemGetDirectory(WebCore::ClientOrigin &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::pair<WebCore::ClientOrigin &&::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WebCore::ClientOrigin &&::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WebCore::ClientOrigin &&::SupportsObjectIdentifierNullState)1>,WebCore::ClientOrigin &&::RefPtr<WebCore::FileSystemStorageConnection,WebCore::ClientOrigin &&::RawPtrTraits<WebCore::ClientOrigin &&::RefPtr>,WebCore::ClientOrigin &&::DefaultRefDerefTraits<WebCore::ClientOrigin &&::RefPtr>>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebCore::ClientOrigin &&::SupportsObjectIdentifierNullState,WebKit::FileSystemStorageError>>(uint64_t *a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    if (v3 == 1)
    {
      switch(*(unsigned char *)a2)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v4 = 8;
          goto LABEL_19;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v4 = 6;
          goto LABEL_19;
        case 2:
          char v4 = 5;
          goto LABEL_17;
        case 3:
          char v4 = 10;
          goto LABEL_17;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v4 = 33;
          goto LABEL_19;
        case 5:
          char v4 = 8;
          goto LABEL_17;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v4 = 13;
LABEL_19:
          v13[0] = v4;
          break;
        default:
          char v4 = 24;
LABEL_17:
          v13[0] = v4;
          uint64_t v14 = 0;
          break;
      }
      unint64_t v9 = v14;
      uint64_t v14 = 0;
      LOBYTE(v15) = v4;
      uint64_t v16 = (uint64_t)v9;
      int v17 = 1;
      uint64_t v10 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 16))(v10, &v15);
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      if (v17 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9F7D00[v17])(&v18, &v15);
      }
      int v17 = -1;
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      return result;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_28:
    unint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t v5 = *a2;
  if ((unint64_t)(*a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v15) = 24;
    int v17 = 1;
  }
  else
  {
      goto LABEL_28;
    uint64_t v6 = WebKit::WebProcess::fileSystemStorageConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
    uint64_t v15 = v5;
    uint64_t v16 = v6;
    int v17 = 0;
  }
  uint64_t v7 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v15);
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v17 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1EE9F7D00[v17])(v13, &v15);
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSO_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned int **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF23ObjectIdentifierGenericIN7WebCore30FileSystemHandleIdentifierTypeENS9_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEENS9_6RefPtrINSB_27FileSystemStorageConnectionENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSO_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::DrawingArea::~DrawingArea(WebKit::DrawingArea *this)
{
  *(void *)this = &unk_1EE9F7D20;
  *((void *)this + 2) = &unk_1EE9F7EF8;
  WebKit::DrawingArea::removeMessageReceiverIfNeeded((unsigned __int8 *)this);
  int v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

unsigned __int8 *WebKit::DrawingArea::removeMessageReceiverIfNeeded(unsigned __int8 *this)
{
  if (!this[66])
  {
    this[66] = 1;
    {
      int v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v3);
    }
    uint64_t v1 = *((void *)this + 4);
    uint64_t v2 = WebKit::WebProcess::singleton(void)::process + 48;
    return IPC::MessageReceiverMap::removeMessageReceiver(v2, 6u, v1);
  }
  return this;
}

uint64_t WebKit::DrawingArea::delegatedScrollingMode(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::dispatchAfterEnsuringUpdatedScrollPosition(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 16))();
}

uint64_t WebKit::DrawingArea::tryMarkLayersVolatile(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  int v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void WebKit::DrawingArea::createDisplayRefreshMonitor(void *a1@<X8>)
{
  *a1 = 0;
}

void non-virtual thunk to'WebKit::DrawingArea::createDisplayRefreshMonitor(void *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::EventDispatcher::~EventDispatcher(WebKit::EventDispatcher *this, void *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t vars8;

  WebKit::EventDispatcher::~EventDispatcher(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::EventDispatcher::internalWheelEvent(WTF::RunLoop *a1, uint64_t a2, _OWORD *a3, uint64_t a4, __int16 a5)
{
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v9 = &unk_1EE9F80D8;
  v9[1] = a2;
  uint64_t v11 = v9;
  WTF::ensureOnMainRunLoop();
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  return WebKit::EventDispatcher::dispatchWheelEventViaMainThread(a1, a2, a3, 10, a5);
}

uint64_t WebKit::EventDispatcher::dispatchWheelEventViaMainThread(WTF::RunLoop *a1, uint64_t a2, _OWORD *a3, char a4, __int16 a5)
{
  WTF::RunLoop::main(a1);
  *(_OWORD *)char v18 = *(_OWORD *)((char *)a3 + 4);
  *(_OWORD *)&v18[12] = a3[1];
  long long v14 = a3[4];
  long long v15 = a3[5];
  long long v16 = a3[6];
  long long v12 = a3[2];
  long long v13 = a3[3];
  uint64_t v10 = WTF::fastMalloc((WTF *)0xA0);
  *(void *)uint64_t v10 = &unk_1EE9F8128;
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(_DWORD *)(v10 + 32) = 0;
  *(_OWORD *)(v10 + 36) = *(_OWORD *)v18;
  *(_OWORD *)(v10 + 80) = v13;
  *(_OWORD *)(v10 + 96) = v14;
  *(_OWORD *)(v10 + 112) = v15;
  *(_OWORD *)(v10 + 128) = v16;
  *(_OWORD *)(v10 + 48) = *(_OWORD *)&v18[12];
  *(_OWORD *)(v10 + 64) = v12;
  *(_WORD *)(v10 + 144) = a5 & 0x1FF | ((((a4 & 0xFE) >> 1) & 0x7F) << 9);
  uint64_t v17 = v10;
  WTF::RunLoop::dispatch();
  uint64_t result = v17;
  if (v17) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return result;
}

uint64_t *WebKit::EventDispatcher::takeQueuedTouchEventsForPage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6 = 0;
  uint64_t v7 = (atomic_uchar *)(a1 + 32);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](a1 + 32);
  }
  uint64_t v8 = (uint64_t *)(a1 + 40);
  uint64_t v16 = *(void *)(a2 + 40);
  unint64_t v9 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8, &v16);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::take(v8, v9, &v17);
  uint64_t v11 = v17;
  if (v17)
  {
    uint64_t v17 = 0;
    std::unique_ptr<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](a3, v11);
    uint64_t result = (uint64_t *)v17;
    uint64_t v17 = 0;
    if (result)
    {
      long long v13 = (WTF *)WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, v12);
      uint64_t result = (uint64_t *)WTF::fastFree(v13, v14);
    }
  }
  int v15 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1) {
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

WTF *WebKit::EventDispatcher::touchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  char v12 = 0;
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  long long v13 = (atomic_uchar *)(a1 + 32);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x19972E8D0](a1 + 32);
  }
  uint64_t v113 = a1;
  uint64_t v16 = *(void *)(a1 + 40);
  int v15 = (uint64_t *)(a1 + 40);
  uint64_t v14 = v16;
  if (v16) {
    BOOL v17 = *(_DWORD *)(v14 - 12) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0xA0);
  *uint64_t v19 = v19 + 2;
  v19[1] = 1;
  uint64_t v20 = *v15;
  if (*v15
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v15, 0), (uint64_t v20 = *v15) != 0))
  {
    int v21 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    int v21 = 0;
  }
  unint64_t v22 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
  unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
  unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
  uint64_t v26 = (uint64_t *)(v20 + 16 * v25);
  uint64_t v27 = *v26;
  if (!*v26)
  {
LABEL_17:
    uint64_t *v26 = a2;
    std::unique_ptr<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v26 + 1, v19);
    uint64_t v30 = *v15;
    if (*v15) {
      int v31 = *(_DWORD *)(v30 - 12) + 1;
    }
    else {
      int v31 = 1;
    }
    *(_DWORD *)(v30 - 12) = v31;
    uint64_t v82 = *v15;
    if (*v15) {
      int v83 = *(_DWORD *)(v82 - 12);
    }
    else {
      int v83 = 0;
    }
    uint64_t v84 = (*(_DWORD *)(v82 - 16) + v83);
    unint64_t v85 = *(unsigned int *)(v82 - 4);
    if (v85 > 0x400)
    {
      if (v85 > 2 * v84) {
        goto LABEL_65;
      }
    }
    else if (3 * v85 > 4 * v84)
    {
LABEL_65:
      uint64_t v86 = v13;
LABEL_72:
      v97 = (unsigned int *)v26[1];
      *(void *)&long long v124 = a3;
      *((void *)&v124 + 1) = a4;
      int v125 = 0;
      *(_OWORD *)v126 = *(_OWORD *)(a5 + 4);
      *(_OWORD *)&v126[12] = *(_OWORD *)(a5 + 16);
      WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v127, (uint64_t *)(a5 + 32));
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v130, (uint64_t *)(a5 + 48));
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v133, (uint64_t *)(a5 + 64));
      unsigned __int32 v137 = *(_DWORD *)(a5 + 96);
      __n128 v136 = *(__n128 *)(a5 + 80);
      unint64_t v98 = *a6;
      *a6 = 0;
      unint64_t v138 = v98;
      unsigned int v99 = v97[3];
      if (v99 == v97[2])
      {
        __n128 v90 = WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::EventDispatcher::TouchEventData>(v97, (unint64_t)&v124);
      }
      else
      {
        uint64_t v100 = *(void *)v97 + 144 * v99;
        *(_OWORD *)uint64_t v100 = v124;
        *(_DWORD *)(v100 + 16) = 0;
        long long v101 = *(_OWORD *)v126;
        *(_OWORD *)(v100 + 32) = *(_OWORD *)&v126[12];
        *(_OWORD *)(v100 + 20) = v101;
        *(void *)(v100 + 48) = 0;
        *(void *)(v100 + 56) = 0;
        v102 = v127;
        v127 = 0;
        *(void *)(v100 + 48) = v102;
        LODWORD(v102) = v128;
        int v128 = 0;
        *(_DWORD *)(v100 + 56) = v102;
        LODWORD(v102) = v129;
        int v129 = 0;
        *(_DWORD *)(v100 + 60) = v102;
        *(void *)(v100 + 64) = 0;
        *(void *)(v100 + 72) = 0;
        uint64_t v103 = v130;
        uint64_t v130 = 0;
        *(void *)(v100 + 64) = v103;
        LODWORD(v103) = v131;
        int v131 = 0;
        *(_DWORD *)(v100 + 72) = v103;
        LODWORD(v103) = v132;
        int v132 = 0;
        *(_DWORD *)(v100 + 76) = v103;
        *(void *)(v100 + 80) = 0;
        *(void *)(v100 + 88) = 0;
        uint64_t v104 = v133;
        uint64_t v133 = 0;
        *(void *)(v100 + 80) = v104;
        LODWORD(v104) = v134;
        int v134 = 0;
        *(_DWORD *)(v100 + 88) = v104;
        LODWORD(v104) = v135;
        int v135 = 0;
        *(_DWORD *)(v100 + 92) = v104;
        __n128 v90 = v136;
        *(_DWORD *)(v100 + 112) = v137;
        *(__n128 *)(v100 + 96) = v90;
        unint64_t v105 = v138;
        unint64_t v138 = 0;
        *(void *)(v100 + 128) = v105;
        ++v97[3];
      }
      long long v13 = v86;
      goto LABEL_76;
    }
    uint64_t v86 = v13;
    uint64_t v26 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v15, v26);
    goto LABEL_72;
  }
  char v28 = 0;
  int v29 = 1;
  while (v27 != a2)
  {
    if (v27 == -1) {
      char v28 = v26;
    }
    unsigned int v25 = (v25 + v29) & v21;
    uint64_t v26 = (uint64_t *)(v20 + 16 * v25);
    uint64_t v27 = *v26;
    ++v29;
    if (!*v26)
    {
      if (v28)
      {
        *char v28 = 0;
        v28[1] = 0;
        --*(_DWORD *)(*v15 - 16);
        uint64_t v26 = v28;
      }
      goto LABEL_17;
    }
  }
  float v32 = (WTF *)WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v18);
  WTF::fastFree(v32, v33);
  double v34 = (unsigned int *)v26[1];
  unsigned int v35 = v34[3];
  if (!v35)
  {
    __break(0xC471u);
    goto LABEL_92;
  }
  unint64_t v36 = (_OWORD *)(a5 + 4);
  if (*(unsigned char *)(a5 + 4) != 12 || *(unsigned char *)(*(void *)v34 + 144 * v35 - 124) != 12)
  {
    *(void *)&long long v124 = a3;
    *((void *)&v124 + 1) = a4;
    int v125 = 0;
    *(_OWORD *)v126 = *v36;
    *(_OWORD *)&v126[12] = *(_OWORD *)(a5 + 16);
    WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v127, (uint64_t *)(a5 + 32));
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v130, (uint64_t *)(a5 + 48));
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v133, (uint64_t *)(a5 + 64));
    unsigned __int32 v137 = *(_DWORD *)(a5 + 96);
    __n128 v136 = *(__n128 *)(a5 + 80);
    unint64_t v88 = *a6;
    *a6 = 0;
    unint64_t v138 = v88;
    unsigned int v89 = v34[3];
    if (v89 == v34[2])
    {
      __n128 v90 = WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::EventDispatcher::TouchEventData>(v34, (unint64_t)&v124);
    }
    else
    {
      uint64_t v91 = *(void *)v34 + 144 * v89;
      *(_OWORD *)uint64_t v91 = v124;
      *(_DWORD *)(v91 + 16) = 0;
      long long v92 = *(_OWORD *)v126;
      *(_OWORD *)(v91 + 32) = *(_OWORD *)&v126[12];
      *(_OWORD *)(v91 + 20) = v92;
      *(void *)(v91 + 48) = 0;
      *(void *)(v91 + 56) = 0;
      v93 = v127;
      v127 = 0;
      *(void *)(v91 + 48) = v93;
      LODWORD(v93) = v128;
      int v128 = 0;
      *(_DWORD *)(v91 + 56) = v93;
      LODWORD(v93) = v129;
      int v129 = 0;
      *(_DWORD *)(v91 + 60) = v93;
      *(void *)(v91 + 64) = 0;
      *(void *)(v91 + 72) = 0;
      uint64_t v94 = v130;
      uint64_t v130 = 0;
      *(void *)(v91 + 64) = v94;
      LODWORD(v94) = v131;
      int v131 = 0;
      *(_DWORD *)(v91 + 72) = v94;
      LODWORD(v94) = v132;
      int v132 = 0;
      *(_DWORD *)(v91 + 76) = v94;
      *(void *)(v91 + 80) = 0;
      *(void *)(v91 + 88) = 0;
      uint64_t v95 = v133;
      uint64_t v133 = 0;
      *(void *)(v91 + 80) = v95;
      LODWORD(v95) = v134;
      int v134 = 0;
      *(_DWORD *)(v91 + 88) = v95;
      LODWORD(v95) = v135;
      int v135 = 0;
      *(_DWORD *)(v91 + 92) = v95;
      __n128 v90 = v136;
      *(_DWORD *)(v91 + 112) = v137;
      *(__n128 *)(v91 + 96) = v90;
      unint64_t v96 = v138;
      unint64_t v138 = 0;
      *(void *)(v91 + 128) = v96;
      ++v34[3];
    }
LABEL_76:
    unint64_t v106 = v138;
    unint64_t v138 = 0;
    if (v106) {
      (*(void (**)(unint64_t, __n128))(*(void *)v106 + 8))(v106, v90);
    }
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v133, v87);
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v130, v107);
    uint64_t result = v127;
    if (v127)
    {
      v127 = 0;
      int v128 = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v108);
    }
    goto LABEL_80;
  }
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v37 = v26[1];
  unsigned int v38 = *(_DWORD *)(v37 + 12);
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x1991F494CLL);
  }
  uint64_t v39 = *(void *)v37 + 144 * v38;
  unint64_t v40 = *(unsigned int *)(v39 - 68);
  if (v40)
  {
    uint64_t v41 = *(void *)(v39 - 80);
    if (v40 <= 0x10) {
      unint64_t v42 = 16;
    }
    else {
      unint64_t v42 = *(unsigned int *)(v39 - 68);
    }
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v114, v42);
    if (v40 < HIDWORD(v115))
    {
      __break(0xC471u);
      JUMPOUT(0x1991F495CLL);
    }
    WTF::VectorCopier<false,WebKit::WebTouchEvent>::uninitializedCopy<WebKit::WebTouchEvent>(v41, v41 + 112 * v40, v114 + 112 * HIDWORD(v115));
    HIDWORD(v115) = v40;
  }
  v112 = v13;
  uint64_t v43 = *(void *)(a5 + 48);
  uint64_t v44 = *(unsigned int *)(a5 + 60);
  if (!v44) {
    goto LABEL_39;
  }
  unint64_t v111 = v44 + v40;
  if (v44 + v40 > v115)
  {
    unint64_t v45 = v115 + ((unint64_t)v115 >> 2);
    unint64_t v46 = v45 >= 0x10 ? v45 + 1 : 16;
    unint64_t v47 = v46 <= v111 ? v44 + v40 : v46;
    unint64_t v40 = *(void *)(a5 + 48);
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v114, v47);
    uint64_t v43 = v40;
    LODWORD(v40) = HIDWORD(v115);
    if (v111 < HIDWORD(v115))
    {
      __break(0xC471u);
LABEL_92:
      JUMPOUT(0x1991F4944);
    }
  }
  WTF::VectorCopier<false,WebKit::WebTouchEvent>::uninitializedCopy<WebKit::WebTouchEvent>(v43, v43 + 112 * v44, v114 + 112 * v40);
  HIDWORD(v115) = v111;
LABEL_39:
  int v116 = 0;
  *(_OWORD *)v117 = *v36;
  *(_OWORD *)&v117[12] = *(_OWORD *)(a5 + 16);
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v118, (uint64_t *)(a5 + 32));
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v120, (uint64_t *)(a5 + 48));
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v121, (uint64_t *)(a5 + 64));
  __n128 v122 = *(__n128 *)(a5 + 80);
  unsigned __int32 v123 = *(_DWORD *)(a5 + 96);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v120, &v114);
  *(void *)&long long v124 = a3;
  *((void *)&v124 + 1) = a4;
  int v125 = 0;
  *(_OWORD *)v126 = *(_OWORD *)v117;
  *(_OWORD *)&v126[12] = *(_OWORD *)&v117[12];
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v127, (uint64_t *)&v118);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v130, v120);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v133, v121);
  unsigned __int32 v137 = v123;
  __n128 v136 = v122;
  unint64_t v49 = *a6;
  *a6 = 0;
  unint64_t v138 = v49;
  uint64_t v50 = v26[1];
  uint64_t v51 = *(unsigned int *)(v50 + 12);
  if (!v51)
  {
    __break(0xC471u);
    JUMPOUT(0x1991F4954);
  }
  uint64_t v52 = v51 - 1;
  uint64_t v53 = *(void *)v50;
  uint64_t v54 = *(void *)v50 + 144 * (v51 - 1);
  *(_OWORD *)uint64_t v54 = v124;
  long long v55 = *(_OWORD *)v126;
  *(_OWORD *)(v54 + 32) = *(_OWORD *)&v126[12];
  *(_OWORD *)(v54 + 20) = v55;
  v58 = *(WTF **)(v54 + 48);
  uint64_t v57 = v54 + 48;
  v56 = v58;
  if (v58)
  {
    *(void *)uint64_t v57 = 0;
    *(_DWORD *)(v57 + 8) = 0;
    WTF::fastFree(v56, v48);
  }
  uint64_t v59 = v127;
  v127 = 0;
  *(void *)uint64_t v57 = v59;
  LODWORD(v59) = v128;
  int v128 = 0;
  *(_DWORD *)(v57 + 8) = v59;
  LODWORD(v59) = v129;
  int v129 = 0;
  *(_DWORD *)(v57 + 12) = v59;
  uint64_t v60 = v53 + 144 * v52;
  uint64_t v61 = v60 + 64;
  unsigned int v62 = *(_DWORD *)(v60 + 76);
  if (v62) {
    WTF::VectorDestructor<true,WebKit::WebTouchEvent>::destruct(*(WTF **)v61, (WTF *)(*(void *)v61 + 112 * v62));
  }
  uint64_t v63 = *(WTF **)v61;
  if (*(void *)v61)
  {
    *(void *)uint64_t v61 = 0;
    *(_DWORD *)(v61 + 8) = 0;
    WTF::fastFree(v63, v48);
  }
  uint64_t v64 = v130;
  uint64_t v130 = 0;
  *(void *)uint64_t v61 = v64;
  LODWORD(v64) = v131;
  int v131 = 0;
  *(_DWORD *)(v61 + 8) = v64;
  LODWORD(v64) = v132;
  int v132 = 0;
  *(_DWORD *)(v61 + 12) = v64;
  uint64_t v65 = v53 + 144 * v52;
  uint64_t v66 = v65 + 80;
  unsigned int v67 = *(_DWORD *)(v65 + 92);
  if (v67) {
    WTF::VectorDestructor<true,WebKit::WebTouchEvent>::destruct(*(WTF **)v66, (WTF *)(*(void *)v66 + 112 * v67));
  }
  v68 = *(WTF **)v66;
  if (*(void *)v66)
  {
    *(void *)uint64_t v66 = 0;
    *(_DWORD *)(v66 + 8) = 0;
    WTF::fastFree(v68, v48);
  }
  uint64_t v69 = v133;
  uint64_t v133 = 0;
  *(void *)uint64_t v66 = v69;
  LODWORD(v69) = v134;
  int v134 = 0;
  *(_DWORD *)(v66 + 8) = v69;
  LODWORD(v69) = v135;
  int v135 = 0;
  *(_DWORD *)(v66 + 12) = v69;
  uint64_t v70 = (__n128 *)(v53 + 144 * v52);
  __n128 v71 = v136;
  v70[7].n128_u32[0] = v137;
  v70[6] = v71;
  unint64_t v72 = v138;
  unint64_t v138 = 0;
  uint64_t v73 = v70[8].n128_i64[0];
  v70[8].n128_u64[0] = v72;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  }
  unint64_t v74 = v138;
  unint64_t v138 = 0;
  long long v13 = v112;
  if (v74) {
    (*(void (**)(unint64_t))(*(void *)v74 + 8))(v74);
  }
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v133, v48);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v130, v75);
  uint64_t v77 = v127;
  if (v127)
  {
    v127 = 0;
    int v128 = 0;
    WTF::fastFree(v77, v76);
  }
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v121, v76);
  WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v120, v78);
  v80 = v118;
  if (v118)
  {
    v118 = 0;
    int v119 = 0;
    WTF::fastFree(v80, v79);
  }
  uint64_t result = (WTF *)WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v114, v79);
LABEL_80:
  int v109 = 1;
  atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v109, 0, memory_order_release, memory_order_relaxed);
  if (v109 == 1)
  {
    if (!v17) {
      return result;
    }
  }
  else
  {
    uint64_t result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (!v17) {
      return result;
    }
  }
  WTF::RunLoop::main(result);
  v110 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v110 = &unk_1EE9F8100;
  v110[1] = v113;
  *(void *)&long long v124 = v110;
  WTF::RunLoop::dispatch();
  uint64_t result = (WTF *)v124;
  *(void *)&long long v124 = 0;
  if (result) {
    return (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::FindController::~FindController(WebKit::FindController *this, void *a2)
{
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v4 + 8));
  }
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, a2);
  char v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::FindController::~FindController(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::FindController::countStringMatches(uint64_t a1, WebCore::LocalFrame *a2, unint64_t a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      char v12 = (WebKit::WebPage *)(v11 - 16);
    }
    else {
      char v12 = 0;
    }
  }
  else
  {
    char v12 = 0;
  }
  uint64_t v13 = WebKit::WebPage::mainFramePlugIn(v12, a2);
  if (v13)
  {
    uint64_t v14 = (_DWORD *)v13;
    ++*(_DWORD *)(v13 + 8);
    if (a4 == -1) {
      uint64_t v15 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v15 = a4 + 1;
    }
    unsigned int Matches = WebKit::PluginView::countFindMatches(v13, (uint64_t)a2, a3 & 0x1F | (((a3 >> 10) & 1) << 7) | (a3 >> 2) & 0x200, v15);
    if (v14[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v14 + 8))(v14);
    }
    else {
      --v14[2];
    }
  }
  else
  {
    unsigned int Matches = WebCore::Page::countFindMatches();
    uint64_t v22 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v22) {
      uint64_t v23 = v22 - 16;
    }
    else {
      uint64_t v23 = 0;
    }
    WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v23 + 48));
  }
  if (a4 >= 0xFFFFFFFE) {
    unsigned int v17 = -2;
  }
  else {
    unsigned int v17 = a4;
  }
  if (Matches > v17) {
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v18 = Matches;
  }
  uint64_t v19 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v18);
  uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 8);

  return v20(v19);
}

uint64_t WebKit::FindController::replaceMatches(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  unsigned int v4 = *((_DWORD *)a2 + 3);
  if (v4)
  {
    uint64_t v23 = 0;
    if (v4 >= 0x3E8) {
      int v6 = 1000;
    }
    else {
      int v6 = v4;
    }
    LODWORD(v23) = v6;
    uint64_t v22 = WTF::fastMalloc((WTF *)(32 * v6));
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (v7)
    {
      unint64_t v8 = 0;
      unint64_t v9 = *a2;
      uint64_t v10 = 4 * v7;
      do
      {
        uint64_t v11 = *v9;
        if (*(_DWORD *)(a1 + 60) > v11)
        {
          unint64_t v12 = *(void *)(a1 + 48) + 32 * v11;
          if (v8 == v23)
          {
            WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SimpleRange&>((uint64_t)&v22, v12);
            unint64_t v8 = HIDWORD(v23);
          }
          else
          {
            unint64_t v13 = v22 + 32 * v8++;
            uint64_t v14 = *(void *)v12;
            *(_DWORD *)(v14 + 28) = *(_DWORD *)(*(void *)v12 + 28) + 2;
            *(void *)unint64_t v13 = v14;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
            uint64_t v15 = *(void *)(v12 + 16);
            *(_DWORD *)(v15 + 28) += 2;
            *(void *)(v13 + 16) = v15;
            *(_DWORD *)(v13 + 24) = *(_DWORD *)(v12 + 24);
            HIDWORD(v23) = v8;
          }
          if (v8 >= 0x3E8) {
            break;
          }
        }
        ++v9;
        v10 -= 4;
      }
      while (v10);
    }
    uint64_t v16 = WebCore::Page::replaceRangesWithText();
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v17);
    return v16;
  }
  else
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v19) {
      uint64_t v20 = v19 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void *)(v20 + 48);
    return MEMORY[0x1F4172748](v21, a3);
  }
}

void WebKit::FindController::frameWithSelection(WebCore::Page *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *((void *)a1 + 20);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  if (v4)
  {
    while (*(unsigned char *)(v4 + 144) || *(unsigned char *)(*(void *)(*(void *)(v4 + 296) + 3096) + 153) != 2)
    {
      uint64_t v5 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v4 + 48), 0);
      if (!v5)
      {
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
        goto LABEL_10;
      }
      uint64_t v6 = v5;
      atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      uint64_t v4 = v6;
    }
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    *a2 = v4;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
LABEL_10:
    *a2 = 0;
  }
}

unsigned int *WebKit::FindController::updateFindUIAfterPageScroll(uint64_t a1, int a2, uint64_t Matches, unint64_t a4, unsigned int a5, uint64_t a6, long long *a7, uint64_t *a8)
{
  unint64_t v11 = a4;
  unsigned int v15 = (unsigned __int16)a4;
  uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v16) {
    uint64_t v17 = v16 - 16;
  }
  else {
    uint64_t v17 = 0;
  }
  WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v17 + 48), &v72);
  uint64_t v19 = *(void *)(a1 + 8);
  if (!v19) {
    goto LABEL_121;
  }
  uint64_t v20 = *(void *)(v19 + 8);
  if (v20) {
    uint64_t v21 = (WebKit::WebPage *)(v20 - 16);
  }
  else {
    uint64_t v21 = 0;
  }
  while (1)
  {
    uint64_t v22 = WebKit::WebPage::mainFramePlugIn(v21, v18);
    uint64_t v23 = (WebKit::PluginView *)v22;
    if (v22)
    {
      ++*(_DWORD *)(v22 + 8);
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      if ((a2 & 1) == 0) {
        goto LABEL_38;
      }
      unsigned int v62 = a6;
      a6 = (v15 >> 5) & 1;
      if ((v15 & 0x100) != 0)
      {
        unsigned int Matches = WebKit::PluginView::countFindMatches(v22, Matches, v11 & 0x1F | (((v11 >> 10) & 1) << 7) | (v11 >> 2) & 0x200, a5 + 1);
        if ((v15 & 0xA0) == 0)
        {
          unint64_t v11 = (v15 >> 11) & 1;
          uint64_t v26 = a7;
          goto LABEL_53;
        }
        if (a5 >= 0xFFFFFFFE) {
          unsigned int v24 = -2;
        }
        else {
          unsigned int v24 = a5;
        }
      }
      else
      {
        if ((v15 & 0xA0) == 0)
        {
          unsigned int Matches = 1;
          unint64_t v11 = (v15 >> 11) & 1;
          uint64_t v26 = a7;
          goto LABEL_54;
        }
        if (a5 >= 0xFFFFFFFE) {
          unsigned int v24 = -2;
        }
        else {
          unsigned int v24 = a5;
        }
        if (a5 == -1) {
          uint64_t v25 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v25 = a5 + 1;
        }
        unsigned int Matches = WebKit::PluginView::countFindMatches(v22, Matches, v11 & 0x1F | (((v11 >> 10) & 1) << 7) | (v11 >> 2) & 0x200, v25);
      }
      unint64_t v11 = (v15 >> 11) & 1;
      unsigned int v61 = WebKit::PluginView::drawsFindOverlay(v23) ^ 1;
      goto LABEL_24;
    }
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    if ((a2 & 1) == 0) {
      break;
    }
    unsigned int v61 = (v15 >> 5) & 1;
    unsigned int v62 = a6;
    if ((v15 & 0x100) == 0)
    {
      if ((v15 & 0xA0) == 0)
      {
        unsigned int Matches = 1;
        unint64_t v11 = (v15 >> 11) & 1;
        uint64_t v26 = a7;
        a6 = v61;
        goto LABEL_54;
      }
      if (a5 >= 0xFFFFFFFE) {
        unsigned int v24 = -2;
      }
      else {
        unsigned int v24 = a5;
      }
LABEL_46:
      uint64_t v30 = *(void *)(*(void *)(a1 + 8) + 8);
      if (v30) {
        uint64_t v31 = v30 - 16;
      }
      else {
        uint64_t v31 = 0;
      }
      WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v31 + 48));
      unsigned int Matches = WebCore::Page::markAllMatchesForText();
      unint64_t v11 = (v15 >> 11) & 1;
LABEL_24:
      uint64_t v26 = a7;
      if (Matches > v24)
      {
        a6 = 0;
LABEL_60:
        unsigned int Matches = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 64) = -1;
        goto LABEL_61;
      }
      goto LABEL_52;
    }
    uint64_t v29 = WebCore::Page::countFindMatches();
    if ((v15 & 0xA0) != 0)
    {
      if (a5 >= 0xFFFFFFFE) {
        unsigned int v24 = -2;
      }
      else {
        unsigned int v24 = a5;
      }
      goto LABEL_46;
    }
    unsigned int Matches = v29;
    unint64_t v11 = (v15 >> 11) & 1;
    uint64_t v26 = a7;
LABEL_52:
    a6 = v61;
LABEL_53:
    if (Matches == -1) {
      goto LABEL_60;
    }
LABEL_54:
    int v32 = *(_DWORD *)(a1 + 64);
    int v33 = (Matches & (v32 >> 31)) + v32;
    if (v32 < 0 || v33 >= (int)Matches)
    {
      if (v33 < (int)Matches) {
        int v34 = 0;
      }
      else {
        int v34 = Matches;
      }
      *(_DWORD *)(a1 + 64) = v33 - v34;
    }
LABEL_61:
    if (!*((unsigned char *)v26 + 16))
    {
      if (a6) {
        goto LABEL_76;
      }
LABEL_70:
      a6 = v62;
      goto LABEL_71;
    }
    a5 = a1 + 48;
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 48, 0);
    uint64_t v35 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v35) {
      uint64_t v36 = v35 - 16;
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v37 = (WebCore::VisibleSelection *)WebCore::Page::selection(*(WebCore::Page **)(v36 + 48));
    WebCore::VisibleSelection::firstRange((uint64_t *)&v66, v37);
    if (!v69) {
      goto LABEL_75;
    }
    WebCore::RenderObject::absoluteTextRects();
    uint64_t v70 = v64;
    uint64_t v71 = v65;
    if (v69)
    {
      uint64_t v38 = *(unsigned int *)(a1 + 60);
      if (v38 == *(_DWORD *)(a1 + 56))
      {
        WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SimpleRange&>(a1 + 48, (unint64_t)&v66);
      }
      else
      {
        int v42 = v38 + 1;
        uint64_t v43 = *(void *)(a1 + 48) + 32 * v38;
        uint64_t v44 = v66;
        *(_DWORD *)(v66 + 28) += 2;
        *(void *)uint64_t v43 = v44;
        *(_DWORD *)(v43 + 8) = DWORD2(v66);
        uint64_t v45 = v67;
        *(_DWORD *)(v67 + 28) += 2;
        *(void *)(v43 + 16) = v45;
        *(_DWORD *)(v43 + 24) = v68;
        *(_DWORD *)(a1 + 60) = v42;
      }
LABEL_75:
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66);
      if (a6)
      {
LABEL_76:
        uint64_t v46 = *(void *)(a1 + 16);
        if (v46)
        {
          uint64_t v48 = *(void *)(v46 + 8);
          if (v48)
          {
            ++*(_DWORD *)(v48 + 8);
            a6 = v62;
            goto LABEL_87;
          }
        }
        WebCore::PageOverlay::create();
        uint64_t v48 = v66;
        a6 = v62;
        if ((void)v66)
        {
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v66 + 16), v66);
          unint64_t v49 = *(atomic_uint **)(v48 + 16);
          if (v49) {
            atomic_fetch_add(v49, 1u);
          }
        }
        else
        {
          unint64_t v49 = 0;
        }
        uint64_t v50 = *(unsigned int **)(a1 + 16);
        *(void *)(a1 + 16) = v49;
        if (v50 && atomic_fetch_add((atomic_uint *volatile)v50, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v50);
          WTF::fastFree((WTF *)v50, v47);
          if (v23) {
            goto LABEL_84;
          }
        }
        else if (v23)
        {
LABEL_84:
          if ((WebKit::PluginView::drawsFindOverlay(v23) & 1) == 0) {
            *(unsigned char *)(v48 + 120) = 1;
          }
        }
        WebCore::PageOverlayController::installPageOverlay();
LABEL_87:
        WebCore::PageOverlay::setNeedsDisplay((WebCore::PageOverlay *)v48);
        WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v48 + 8));
        BOOL v40 = 1;
        goto LABEL_88;
      }
      goto LABEL_70;
    }
    __break(1u);
LABEL_121:
    uint64_t v21 = 0;
  }
  uint64_t v27 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v27) {
    uint64_t v28 = v27 - 16;
  }
  else {
    uint64_t v28 = 0;
  }
  WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v28 + 48));
LABEL_38:
  LODWORD(v11) = (v15 >> 11) & 1;
  if (v72 && ((v15 >> 11) & 1) == 0) {
    WebCore::FrameSelection::clear(*(WebCore::FrameSelection **)(*(void *)(v72 + 296) + 3096));
  }
  WebKit::FindController::hideFindIndicator(a1);
  unsigned int Matches = 0;
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v26 = a7;
LABEL_71:
  uint64_t v39 = *(void *)(a1 + 16);
  if (v39)
  {
    uint64_t v59 = *(void *)(v39 + 8);
    if (v59)
    {
      uint64_t v60 = (_DWORD *)(v59 + 8);
      ++*(_DWORD *)(v59 + 8);
      WebCore::PageOverlayController::uninstallPageOverlay();
      WTF::RefCounted<WebCore::PageOverlay>::deref(v60);
    }
  }
  BOOL v40 = 0;
  if (!a2)
  {
    BOOL v41 = 1;
    goto LABEL_89;
  }
LABEL_88:
  BOOL v41 = (v15 & 0x40) == 0;
LABEL_89:
  uint64_t v51 = v72;
  if (v72) {
    uint64_t v52 = WTF::RefPtr<WebCore::LocalFrame,WTF::RawPtrTraits<WebCore::LocalFrame>,WTF::DefaultRefDerefTraits<WebCore::LocalFrame>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v52 = 0;
  }
  if (v23)
  {
    int v53 = WebKit::PluginView::drawsFindOverlay(v23) ^ 1;
    if (v11) {
      goto LABEL_104;
    }
  }
  else
  {
    int v53 = 0;
    if (v11) {
      goto LABEL_104;
    }
  }
  if (v52) {
    int v53 = 1;
  }
  if (v53) {
    char v54 = v41;
  }
  else {
    char v54 = 1;
  }
  if ((v54 & 1) != 0 || !WebKit::FindController::updateFindIndicator((WebKit::FindController *)a1, v40, 1)) {
    WebKit::FindController::hideFindIndicator(a1);
  }
LABEL_104:
  long long v66 = *v26;
  uint64_t v67 = *((void *)v26 + 2);
  uint64_t v55 = *(unsigned int *)(a1 + 64);
  uint64_t v56 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, long long *, WTF **, uint64_t, uint64_t, uint64_t))(*(void *)v56 + 16))(v56, &v66, &v70, Matches, v55, a6);
  (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  uint64_t result = (unsigned int *)v70;
  if (v70)
  {
    uint64_t v70 = 0;
    LODWORD(v71) = 0;
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v57);
  }
  if (!v23)
  {
LABEL_109:
    if (!v51) {
      return result;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v51 + 8));
  }
  if (*((_DWORD *)v23 + 2) != 1)
  {
    --*((_DWORD *)v23 + 2);
    goto LABEL_109;
  }
  uint64_t result = (unsigned int *)(*(uint64_t (**)(WebKit::PluginView *))(*(void *)v23 + 8))(v23);
  if (v51) {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v51 + 8));
  }
  return result;
}

uint64_t WebKit::FindController::findStringIncludingImages(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(atomic_uint **)(a1 + 8);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = *a2;
  if (*a2) {
    *(_DWORD *)v6 += 2;
  }
  unint64_t v7 = a3 | (unint64_t)(a4 << 32);
  uint64_t v8 = *a5;
  *a5 = 0;
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x28);
  *unint64_t v9 = &unk_1EE9F8150;
  v9[1] = v5;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  v9[2] = v6;
  v9[3] = v7;
  v9[4] = v8;
  unint64_t v12 = v9;
  WebCore::Page::analyzeImagesForFindInPage();
  uint64_t result = (uint64_t)v12;
  if (v12)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v12 + 8))(v12);
    if (!v6) {
      return result;
    }
  }
  else if (!v6)
  {
    return result;
  }
  if (*(_DWORD *)v6 == 2) {
    return WTF::StringImpl::destroy(v6, v10);
  }
  *(_DWORD *)v6 -= 2;
  return result;
}

void WebKit::FindController::findString(uint64_t a1, WebCore::LocalFrame *a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      unint64_t v12 = (WebKit::WebPage *)(v11 - 16);
    }
    else {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  unsigned int v13 = a3;
  uint64_t v14 = WebKit::WebPage::mainFramePlugIn(v12, a2);
  uint64_t v15 = v14;
  if (v14) {
    ++*(_DWORD *)(v14 + 8);
  }
  uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v16) {
    uint64_t v17 = v16 - 16;
  }
  else {
    uint64_t v17 = 0;
  }
  WebKit::setSelectionChangeUpdatesEnabledInAllFrames(v17, (WebKit::WebPage *)1);
  int v53 = a4;
  uint64_t v52 = a5;
  if (!v15)
  {
    uint64_t v25 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v25) {
      uint64_t v26 = v25 - 16;
    }
    else {
      uint64_t v26 = 0;
    }
    WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v26 + 48), &v57);
    uint64_t v27 = v57;
    if (v57)
    {
      WebCore::FrameSelection::selectionBounds();
      BOOL v30 = v29 <= 0.0 || v28 <= 0.0;
      if (v30)
      {
        WebCore::Page::findTextMatches();
        uint64_t v32 = *(unsigned int *)(a1 + 60);
        if (v32) {
          WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(*(uint64_t **)(a1 + 48), (uint64_t *)(*(void *)(a1 + 48) + 32 * v32));
        }
        int v33 = *(WTF **)(a1 + 48);
        if (v33)
        {
          *(void *)(a1 + 48) = 0;
          *(_DWORD *)(a1 + 56) = 0;
          WTF::fastFree(v33, v31);
        }
        *(void *)(a1 + 48) = v54;
        uint64_t v34 = v55;
        unint64_t v54 = 0;
        uint64_t v55 = 0;
        *(void *)(a1 + 56) = v34;
        *(_DWORD *)(a1 + 64) = v56;
        WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v31);
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v27 + 8));
    }
    else
    {
      LOBYTE(v30) = 0;
    }
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 48, 0);
    WebCore::Page::findString();
    LOBYTE(v22) = v54;
    unint64_t v5 = v54 >> 8;
    char v24 = v56;
    uint64_t v50 = v55;
    if (!(_BYTE)v56)
    {
      LOBYTE(v23) = 0;
      goto LABEL_49;
    }
    if ((v13 & 0x800) != 0) {
      goto LABEL_46;
    }
    WebKit::FindController::didFindString((WebKit::FindController *)a1);
    if (v30) {
      goto LABEL_46;
    }
    goto LABEL_41;
  }
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 48, 0);
  char String = WebKit::PluginView::findString(v15, (uint64_t)a2, v13 & 0x1F | (((v13 >> 10) & 1) << 7) | (v13 >> 2) & 0x200 | 0x40, a4);
  uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v15 + 64) + 48) + 8) + 544);
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + 8);
    char v21 = v20 ? String : 0;
    if (v21)
    {
      unint64_t v22 = *(void *)(v20 + 32);
      uint64_t v50 = *(void *)(v20 + 40);
      unint64_t v5 = v22 >> 8;
      LOBYTE(v23) = 1;
      char v24 = 1;
      if ((v13 & 0x800) != 0) {
        goto LABEL_49;
      }
LABEL_35:
      WebKit::FindController::didFindString((WebKit::FindController *)a1);
      char v24 = v23;
LABEL_41:
      if ((v13 & 8) != 0)
      {
        int v23 = -1;
      }
      else
      {
        int v23 = 1;
        if ((v13 & 0x200) != 0) {
          goto LABEL_49;
        }
      }
      *(_DWORD *)(a1 + 64) += v23;
LABEL_46:
      LOBYTE(v23) = 1;
      goto LABEL_49;
    }
  }
  if (String)
  {
    LOBYTE(v22) = 0;
    if ((v13 & 0x800) != 0)
    {
      LOBYTE(v23) = 1;
      char v24 = 0;
      goto LABEL_49;
    }
    LOBYTE(v23) = 0;
    goto LABEL_35;
  }
  LOBYTE(v23) = 0;
  LOBYTE(v22) = 0;
  char v24 = 0;
LABEL_49:
  uint64_t v35 = *(void *)(a1 + 8);
  char v51 = v23;
  if (v35 && (uint64_t v36 = *(void *)(v35 + 8)) != 0)
  {
    uint64_t v37 = v36 - 16;
    CFRetain(*(CFTypeRef *)(v36 - 8));
    uint64_t v38 = *(void *)(a1 + 8);
    if (v38)
    {
      uint64_t v39 = *(void *)(v38 + 8);
      if (v39) {
        uint64_t v40 = v39 - 16;
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v41 = *(void *)(v40 + 72);
    }
    else
    {
      uint64_t v41 = MEMORY[0x48];
    }
    __int16 v42 = v13;
    CFRetain(*(CFTypeRef *)(v36 - 8));
    char v43 = 0;
  }
  else
  {
    __int16 v42 = v13;
    uint64_t v37 = 0;
    uint64_t v41 = MEMORY[0x48];
    char v43 = 1;
  }
  uint64_t v44 = *(WTF::StringImpl **)a2;
  if (v44) {
    *(_DWORD *)v44 += 2;
  }
  unint64_t v45 = v22 | (v5 << 8);
  uint64_t v46 = *v52;
  uint64_t *v52 = 0;
  uint64_t v47 = WTF::fastMalloc((WTF *)0x50);
  *(void *)uint64_t v47 = &unk_1EE9F8178;
  *(void *)(v47 + 8) = v37;
  *(unsigned char *)(v47 + 16) = v51;
  if (v44) {
    *(_DWORD *)v44 += 2;
  }
  *(void *)(v47 + 24) = v44;
  *(_WORD *)(v47 + 32) = v42;
  *(_DWORD *)(v47 + 36) = v53;
  *(unsigned char *)(v47 + 40) = 0;
  *(_DWORD *)(v47 + 41) = v57;
  *(_DWORD *)(v47 + 44) = *(_DWORD *)((char *)&v57 + 3);
  *(void *)(v47 + 48) = v45;
  *(void *)(v47 + 56) = v50;
  *(unsigned char *)(v47 + 64) = v24;
  *(void *)(v47 + 72) = v46;
  unint64_t v54 = v47;
  (*(void (**)(uint64_t, unint64_t *))(*(void *)v41 + 312))(v41, &v54);
  unint64_t v49 = v54;
  unint64_t v54 = 0;
  if (v49)
  {
    (*(void (**)(unint64_t))(*(void *)v49 + 8))(v49);
    if (!v44) {
      goto LABEL_67;
    }
  }
  else if (!v44)
  {
    goto LABEL_67;
  }
  if (*(_DWORD *)v44 == 2) {
    WTF::StringImpl::destroy(v44, v48);
  }
  else {
    *(_DWORD *)v44 -= 2;
  }
LABEL_67:
  if ((v43 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(v37 + 8));
  }
  if (v15)
  {
    if (*(_DWORD *)(v15 + 8) == 1) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    else {
      --*(_DWORD *)(v15 + 8);
    }
  }
}

uint64_t WebKit::FindController::findStringMatches(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  WebCore::Page::findTextMatches();
  uint64_t v11 = *(unsigned int *)(a1 + 60);
  if (v11) {
    WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(*(uint64_t **)(a1 + 48), (uint64_t *)(*(void *)(a1 + 48) + 32 * v11));
  }
  unint64_t v12 = *(WTF **)(a1 + 48);
  if (v12)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v12, v10);
  }
  *(void *)(a1 + 48) = v53;
  int v13 = v54;
  uint64_t v14 = HIDWORD(v54);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  *(_DWORD *)(a1 + 56) = v13;
  *(_DWORD *)(a1 + 60) = v14;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (!v14) {
    goto LABEL_20;
  }
  if (v14 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x1991F5F18);
  }
  uint64_t v15 = WTF::fastMalloc((WTF *)(16 * v14));
  LODWORD(v52) = v14;
  uint64_t v51 = v15;
  if (*(_DWORD *)(a1 + 60))
  {
    uint64_t v16 = v15;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      WebCore::RenderObject::absoluteTextRects();
      uint64_t v20 = (char *)v18 + v16;
      *(void *)uint64_t v20 = v57;
      *((_DWORD *)v20 + 2) = v58;
      *((_DWORD *)v20 + 3) = v59;
      ++v19;
      uint64_t v18 = (WTF *)((char *)v18 + 16);
      v17 += 32;
    }
    while (v19 < *(unsigned int *)(a1 + 60));
    HIDWORD(v52) = v19;
    uint64_t v50 = 0;
    if (v19)
    {
      uint64_t v48 = a4;
      if (v19 >> 28)
      {
LABEL_45:
        __break(0xC471u);
        JUMPOUT(0x1991F5F10);
      }
      uint64_t v21 = WTF::fastMalloc(v18);
      LODWORD(v50) = v19;
      uint64_t v49 = v21;
      unint64_t v22 = (char *)v18 + v16;
      uint64_t v23 = v21;
      do
      {
        uint64_t v24 = *(unsigned int *)(v16 + 12);
        *(void *)uint64_t v23 = 0;
        *(void *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 12) = v24;
        if (v24)
        {
          if (v24 >> 28) {
            goto LABEL_45;
          }
          uint64_t v25 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v24));
          *(_DWORD *)(v23 + 8) = v24;
          *(void *)uint64_t v23 = v25;
          uint64_t v26 = *(unsigned int *)(v16 + 12);
          if (v26)
          {
            uint64_t v27 = *(long long **)v16;
            uint64_t v28 = 16 * v26;
            do
            {
              long long v29 = *v27++;
              *v25++ = v29;
              v28 -= 16;
            }
            while (v28);
          }
        }
        v23 += 16;
        v16 += 16;
      }
      while (v22 != (char *)v16);
      a4 = v48;
    }
    else
    {
      uint64_t v21 = 0;
    }
  }
  else
  {
LABEL_20:
    LODWORD(v19) = 0;
    uint64_t v21 = 0;
    uint64_t v50 = 0;
  }
  uint64_t v30 = v55;
  uint64_t v31 = *a5;
  *a5 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  v56[0] = 0;
  v56[1] = 0;
  uint64_t v57 = v21;
  int v58 = v19;
  int v59 = v19;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v31 + 16))(v31, &v57, v30);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v32);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v33);
  (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v34);
  if ((a3 & 0x60) != 0)
  {
    BOOL v36 = *(_DWORD *)(a1 + 60) != 0;
    uint64_t v37 = *(void *)(a1 + 8);
    if (v37)
    {
      uint64_t v38 = *(void *)(v37 + 8);
      uint64_t v39 = v38 - 16;
      if (v38) {
        uint64_t v40 = v38 - 16;
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v41 = *(void *)(v40 + 72);
      if (v38) {
        CFRetain(*(CFTypeRef *)(v38 - 8));
      }
      else {
        uint64_t v39 = 0;
      }
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v41 = MEMORY[0x48];
    }
    __int16 v42 = *a2;
    if (v42) {
      *(_DWORD *)v42 += 2;
    }
    unint64_t v43 = a3 | (unint64_t)(a4 << 32);
    uint64_t v44 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v44 = &unk_1EE9F81A0;
    *(void *)(v44 + 8) = v39;
    *(unsigned char *)(v44 + 16) = v36;
    if (v42) {
      *(_DWORD *)v42 += 2;
    }
    *(void *)(v44 + 24) = v42;
    *(void *)(v44 + 32) = v43;
    uint64_t v57 = v44;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 312))(v41, &v57);
    uint64_t v45 = v57;
    uint64_t v57 = 0;
    if (v45)
    {
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      if (!v42) {
        goto LABEL_38;
      }
    }
    else if (!v42)
    {
      goto LABEL_38;
    }
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v35);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
LABEL_38:
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v35);
  return WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v46);
}

WTF *WebKit::FindController::findRectsForStringMatches(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t *a5)
{
  WebCore::Page::findTextMatches();
  uint64_t v11 = *(unsigned int *)(a1 + 60);
  if (v11) {
    WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct(*(uint64_t **)(a1 + 48), (uint64_t *)(*(void *)(a1 + 48) + 32 * v11));
  }
  uint64_t result = *(WTF **)(a1 + 48);
  if (result)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v10);
  }
  *(void *)(a1 + 48) = v42;
  int v13 = v43;
  uint64_t v14 = HIDWORD(v43);
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  *(_DWORD *)(a1 + 56) = v13;
  *(_DWORD *)(a1 + 60) = v14;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (v14)
  {
    if (v14 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v15 = (WTF *)WTF::fastMalloc((WTF *)(16 * v14));
    LODWORD(v41) = v14;
    uint64_t v40 = v15;
    if (*(_DWORD *)(a1 + 60))
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v18 = (_DWORD *)((char *)v15 + 8);
      do
      {
        uint64_t v19 = *(void *)(a1 + 48) + v16;
        WebCore::RenderObject::absoluteTextRects();
        v46[0] = WebCore::unionRect();
        v46[1] = v20;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v47, (const WebCore::IntRect *)v46);
        unint64_t v22 = v44;
        if (v44)
        {
          uint64_t v44 = 0;
          int v45 = 0;
          WTF::fastFree(v22, v21);
        }
        WebCore::ScrollView::contentsToRootView(*(WebCore::ScrollView **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)v19 + 48) + 8) + 544)+ 8)+ 288), (const WebCore::FloatRect *)v47);
        *(v18 - 2) = v23;
        *(v18 - 1) = v24;
        _DWORD *v18 = v25;
        v18[1] = v26;
        v18 += 4;
        ++v17;
        v16 += 32;
      }
      while (v17 < *(unsigned int *)(a1 + 60));
      HIDWORD(v41) = v17;
    }
  }
  uint64_t v27 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF **))(*(void *)v27 + 16))(v27, &v40);
  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  if ((a3 & 0x60) != 0)
  {
    BOOL v29 = *(_DWORD *)(a1 + 60) != 0;
    uint64_t v30 = *(void *)(a1 + 8);
    if (v30)
    {
      uint64_t v31 = *(void *)(v30 + 8);
      uint64_t v32 = v31 - 16;
      if (v31) {
        uint64_t v33 = v31 - 16;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = *(void *)(v33 + 72);
      if (v31) {
        CFRetain(*(CFTypeRef *)(v31 - 8));
      }
      else {
        uint64_t v32 = 0;
      }
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v34 = MEMORY[0x48];
    }
    uint64_t v35 = *a2;
    if (v35) {
      *(_DWORD *)v35 += 2;
    }
    unint64_t v36 = a3 | (unint64_t)(a4 << 32);
    uint64_t v37 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v37 = &unk_1EE9F81F0;
    *(void *)(v37 + 8) = v32;
    *(unsigned char *)(v37 + 16) = v29;
    if (v35) {
      *(_DWORD *)v35 += 2;
    }
    *(void *)(v37 + 24) = v35;
    *(void *)(v37 + 32) = v36;
    v47[0] = v37;
    (*(void (**)(uint64_t, void *))(*(void *)v34 + 312))(v34, v47);
    uint64_t v38 = v47[0];
    v47[0] = 0;
    if (v38)
    {
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      if (!v35) {
        goto LABEL_30;
      }
    }
    else if (!v35)
    {
      goto LABEL_30;
    }
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v28);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
LABEL_30:
  uint64_t v39 = v40;
  if (v40)
  {
    uint64_t v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree(v39, v28);
  }
  return (WTF *)WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v28);
}

unsigned int *WebKit::FindController::getImageForFindMatch(unsigned int *this, unsigned int a2)
{
  if (this[15] > a2)
  {
    uint64_t v3 = (uint64_t)this;
    uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 32 * a2) + 48) + 8) + 544);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v6 = (unsigned int *)(v5 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
        uint64_t v7 = *(void *)(*(void *)(v5 + 296) + 3096);
        uint64_t v8 = *(void *)(v7 + 56);
        if (v8) {
          *(_DWORD *)(v8 + 28) += 2;
        }
        uint64_t v34 = v8;
        int v35 = *(_DWORD *)(v7 + 64);
        char v36 = *(unsigned char *)(v7 + 68);
        uint64_t v9 = *(void *)(v7 + 72);
        if (v9) {
          *(_DWORD *)(v9 + 28) += 2;
        }
        uint64_t v37 = v9;
        int v38 = *(_DWORD *)(v7 + 80);
        char v39 = *(unsigned char *)(v7 + 84);
        uint64_t v10 = *(void *)(v7 + 88);
        if (v10) {
          *(_DWORD *)(v10 + 28) += 2;
        }
        uint64_t v40 = v10;
        int v41 = *(_DWORD *)(v7 + 96);
        char v42 = *(unsigned char *)(v7 + 100);
        uint64_t v11 = *(void *)(v7 + 104);
        if (v11) {
          *(_DWORD *)(v11 + 28) += 2;
        }
        uint64_t v43 = v11;
        int v44 = *(_DWORD *)(v7 + 112);
        char v45 = *(unsigned char *)(v7 + 116);
        uint64_t v12 = *(void *)(v7 + 120);
        if (v12) {
          *(_DWORD *)(v12 + 28) += 2;
        }
        uint64_t v46 = v12;
        int v47 = *(_DWORD *)(v7 + 128);
        char v48 = *(unsigned char *)(v7 + 132);
        uint64_t v13 = *(void *)(v7 + 136);
        if (v13) {
          *(_DWORD *)(v13 + 28) += 2;
        }
        uint64_t v49 = v13;
        int v50 = *(_DWORD *)(v7 + 144);
        char v51 = *(unsigned char *)(v7 + 148);
        __int16 v52 = *(_WORD *)(v7 + 152);
        char v53 = *(unsigned char *)(v7 + 154);
        if (this[15] <= a2)
        {
          __break(0xC471u);
        }
        else
        {
          WebCore::VisibleSelection::VisibleSelection();
          WebCore::FrameSelection::setSelection();
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v32);
          WebKit::WebFrame::fromCoreFrame(v5, v32);
          uint64_t v14 = v32[0];
          WebKit::WebFrame::createSelectionSnapshot(v32[0], &v31);
          if (v14) {
            CFRelease(*((CFTypeRef *)v14 + 1));
          }
          WebCore::FrameSelection::setSelection();
          if (!v31) {
            goto LABEL_31;
          }
          WebKit::WebImage::createHandle(v31, 1, v32);
          if (!v33 || (uint64_t v15 = *(void *)(v31 + 16)) == 0)
          {
LABEL_29:
            std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v32);
            uint64_t v28 = v31;
            uint64_t v31 = 0;
            if (v28) {
              CFRelease(*(CFTypeRef *)(v28 + 8));
            }
LABEL_31:
            WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v34);
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
          }
          uint64_t v16 = v15 + 16;
          uint64_t v17 = *(void *)(v3 + 8);
          if (v17)
          {
            uint64_t v18 = *(void *)(v17 + 8);
            if (v18) {
              uint64_t v19 = v18 - 16;
            }
            else {
              uint64_t v19 = 0;
            }
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v21 = *(void *)(v19 + 32);
          uint64_t v20 = v19 + 32;
          uint64_t v22 = (*(uint64_t (**)(uint64_t))(v21 + 56))(v20);
          int v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)int v23 = 1927;
          *((void *)v23 + 1) = v22;
          *((void *)v23 + 66) = (char *)v23 + 16;
          *((void *)v23 + 67) = 512;
          *((void *)v23 + 68) = 0;
          *((void *)v23 + 70) = 0;
          *((void *)v23 + 69) = 0;
          IPC::Encoder::encodeHeader(v23);
          uint64_t v54 = v23;
          IPC::ArgumentCoder<WebCore::ImageBufferParameters,void>::encode(v23, v16);
          IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode(v23, (unint64_t)v32);
          int v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
          if (v25 > 3)
          {
            _DWORD *v24 = a2;
            (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v20 + 32))(v20, &v54, 0);
            uint64_t v27 = v54;
            uint64_t v54 = 0;
            if (v27)
            {
              IPC::Encoder::~Encoder(v27, v26);
              WTF::fastFree(v29, v30);
            }
            goto LABEL_29;
          }
          __break(0xC471u);
        }
        JUMPOUT(0x1991F65FCLL);
      }
    }
  }
  return this;
}

unsigned int *WebKit::FindController::selectFindMatch(unsigned int *this, unsigned int a2)
{
  if (this[15] > a2)
  {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 6) + 32 * a2) + 48) + 8) + 544);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3)
      {
        uint64_t v4 = (unsigned int *)(v3 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
        if (this[15] <= a2)
        {
          __break(0xC471u);
        }
        else
        {
          WebCore::VisibleSelection::VisibleSelection();
          WebCore::FrameSelection::setSelection();
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v5);
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
        }
      }
    }
  }
  return this;
}

void WebKit::FindController::indicateFindMatch(WebKit::FindController *this, unsigned int a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 1) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  WebKit::setSelectionChangeUpdatesEnabledInAllFrames(v5, (WebKit::WebPage *)1);
  WebKit::FindController::selectFindMatch((unsigned int *)this, a2);
  uint64_t v6 = *(void *)(*((void *)this + 1) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v7 + 48), &v10);
  if (v10)
  {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
    WebKit::FindController::didFindString(this);
    uint64_t v8 = *((void *)this + 2);
    if (v8) {
      BOOL v9 = *(void *)(v8 + 8) != 0;
    }
    else {
      BOOL v9 = 0;
    }
    WebKit::FindController::updateFindIndicator(this, v9, 1);
  }
}

uint64_t WebKit::FindController::hideFindUI(WebKit::FindController *this)
{
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 48, 0);
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v2 = *(_DWORD **)(v3 + 8);
    if (v2)
    {
      uint64_t v12 = v2 + 2;
      ++v2[2];
      WebCore::PageOverlayController::uninstallPageOverlay();
      WTF::RefCounted<WebCore::PageOverlay>::deref(v12);
    }
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v6 = (WebKit::WebPage *)(v5 - 16);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = WebKit::WebPage::mainFramePlugIn(v6, (WebCore::LocalFrame *)v2);
  if (v7)
  {
    uint64_t v8 = (_DWORD *)v7;
    ++*(_DWORD *)(v7 + 8);
    WebKit::PluginView::findString(v7, MEMORY[0x1E4F30980], 0, 0);
    if (v8[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
    }
    else {
      --v8[2];
    }
  }
  else
  {
    uint64_t v13 = *(void *)(*((void *)this + 1) + 8);
    if (v13) {
      uint64_t v14 = v13 - 16;
    }
    else {
      uint64_t v14 = 0;
    }
    WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v14 + 48));
  }
  WebKit::FindController::hideFindIndicator((uint64_t)this);
  *((_DWORD *)this + 16) = -1;
  uint64_t v9 = *(void *)(*((void *)this + 1) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t result = *(void *)(*(void *)(v10 + 48) + 1216);
  if (result)
  {
    return MEMORY[0x1F416F180]();
  }
  return result;
}

uint64_t WebKit::FindController::willMoveToPage(uint64_t this, WebCore::PageOverlay *a2, WebCore::Page *a3)
{
  if (!a3)
  {
    uint64_t v3 = this;
    this = *(void *)(this + 16);
    *(void *)(v3 + 16) = 0;
    if (this)
    {
      if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)this);
        return WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  return this;
}

WTF *WebKit::FindController::drawRect(WebKit::FindController *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, int8x16_t *a4)
{
  v7.i64[0] = 0xFFFFFFFF00000000;
  v7.i64[1] = 0xFFFFFFFF00000000;
  int64x2_t v64 = vaddq_s64((int64x2_t)vbslq_s8(v7, *a4, (int8x16_t)vaddq_s64(*(int64x2_t *)a4, (int64x2_t)xmmword_1994F78B0)), (int64x2_t)xmmword_1994F78C0);
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9) {
      uint64_t v10 = (WebKit::WebPage *)(v9 - 16);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = WebKit::WebPage::mainFramePlugIn(v10, a2);
  if (v11)
  {
    uint64_t v12 = (WebCore::ScrollView *)v11;
    ++*(_DWORD *)(v11 + 8);
    WebKit::PluginView::rectsForTextMatchesInRect((atomic_uchar *)v11, (const WebCore::IntRect *)&v64, &v68);
LABEL_7:
    if (*((_DWORD *)v12 + 2) == 1) {
      (*(void (**)(WebCore::ScrollView *))(*(void *)v12 + 8))(v12);
    }
    else {
      --*((_DWORD *)v12 + 2);
    }
    goto LABEL_10;
  }
  int v68 = 0;
  uint64_t v69 = 0;
  uint64_t v44 = *(void *)(*((void *)this + 1) + 8);
  if (v44) {
    uint64_t v45 = v44 - 16;
  }
  else {
    uint64_t v45 = 0;
  }
  uint64_t v46 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v45 + 48) + 160) + 56))(*(void *)(*(void *)(v45 + 48) + 160));
  uint64_t v12 = (WebCore::ScrollView *)v46;
  if (v46) {
    ++*(_DWORD *)(v46 + 8);
  }
  uint64_t v47 = *(void *)(*((void *)this + 1) + 8);
  if (v47) {
    uint64_t v48 = v47 - 16;
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = *(void *)(*(void *)(v48 + 48) + 160);
  atomic_fetch_add((atomic_uint *volatile)(v49 + 8), 1u);
  if (v49)
  {
    while (1)
    {
      if (!*(unsigned char *)(v49 + 144))
      {
        uint64_t v50 = *(void *)(v49 + 296);
        if (v50)
        {
          *(_DWORD *)(v50 + 28) += 2;
          if (!*(void *)(v50 + 1536)) {
            WebCore::Document::ensureMarkers((WebCore::Document *)v50);
          }
          WebCore::DocumentMarkerController::renderedRectsForMarkers();
          __int16 v52 = (WTF *)v75;
          if (v77)
          {
            uint64_t v53 = 16 * v77;
            do
            {
              long long v74 = *(_OWORD *)v52;
              if (*(void *)(*(void *)(v49 + 128) + 8) != v49)
              {
                uint64_t v54 = *(WebCore::ScrollView **)(v49 + 288);
                v70[0] = WebCore::enclosingIntRect((WebCore *)&v74, v51);
                v70[1] = v55;
                v71[0] = WebCore::ScrollView::contentsToWindow(v54, (const WebCore::IntRect *)v70);
                v71[1] = v56;
                v72[0] = WebCore::ScrollView::windowToContents(v12, (const WebCore::IntRect *)v71);
                v72[1] = v57;
                WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v73, (const WebCore::IntRect *)v72);
                long long v74 = v73;
              }
              if (*((float *)&v74 + 2) > 0.0 && *((float *)&v74 + 3) > 0.0)
              {
                WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v73, (const WebCore::IntRect *)&v64);
                if (WebCore::FloatRect::intersects((WebCore::FloatRect *)&v74, (const WebCore::FloatRect *)&v73))
                {
                  uint64_t v58 = HIDWORD(v69);
                  if (HIDWORD(v69) == v69)
                  {
                    int v59 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v68, HIDWORD(v69) + 1, (unint64_t)&v74);
                    uint64_t v58 = HIDWORD(v69);
                    uint64_t v60 = v68;
                    long long v61 = *v59;
                  }
                  else
                  {
                    uint64_t v60 = v68;
                    long long v61 = v74;
                  }
                  *((_OWORD *)v60 + v58) = v61;
                  ++HIDWORD(v69);
                }
              }
              __int16 v52 = (WTF *)((char *)v52 + 16);
              v53 -= 16;
            }
            while (v53);
            __int16 v52 = (WTF *)v75;
          }
          if (v52)
          {
            uint64_t v75 = 0;
            int v76 = 0;
            WTF::fastFree(v52, v51);
          }
          if (*(_DWORD *)(v50 + 28) == 2)
          {
            if ((*(_WORD *)(v50 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v50);
            }
          }
          else
          {
            *(_DWORD *)(v50 + 28) -= 2;
          }
        }
      }
      uint64_t v62 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v49 + 48), 0);
      if (!v62) {
        break;
      }
      uint64_t v63 = v62;
      atomic_fetch_add((atomic_uint *volatile)(v62 + 8), 1u);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v49 + 8));
      uint64_t v49 = v63;
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v49 + 8));
  }
  if (v12) {
    goto LABEL_7;
  }
LABEL_10:
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v64, (const WebCore::IntRect *)a4);
  uint64_t v75 = 0x110400001A1A1A40;
  (*(void (**)(WebCore::GraphicsContext *, int64x2_t *, uint64_t *))(*(void *)a3 + 224))(a3, &v64, &v75);
  if ((v75 & 0x8000000000000) != 0)
  {
    int v41 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v13);
    }
  }
  WebCore::PathUtilities::pathsWithShrinkWrappedRects();
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 96))(a3, 1);
  v64.i64[0] = 0;
  v64.i32[2] = 1065353216;
  uint64_t v65 = 0x1104000000000080;
  char v66 = 0;
  int v67 = 1065353216;
  WebCore::GraphicsContext::setDropShadow((uint64_t)a3, (uint64_t)&v64);
  if ((v65 & 0x8000000000000) != 0)
  {
    char v42 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v14);
    }
  }
  v64.i64[0] = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContextState::setStrokeColor((WebCore::GraphicsContext *)((char *)a3 + 8), (const WebCore::Color *)&v64);
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(void *)a3 + 88))(a3, (char *)a3 + 8);
  if ((v64.i64[0] & 0x8000000000000) != 0)
  {
    uint64_t v43 = (unsigned int *)(v64.i64[0] & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v64.i64[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, v15);
    }
  }
  if (*((float *)a3 + 47) != 2.0)
  {
    *((_DWORD *)a3 + 46) |= 8u;
    *((_DWORD *)a3 + 47) = 0x40000000;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(void *)a3 + 88))(a3, (char *)a3 + 8);
  if (v77)
  {
    uint64_t v16 = v75;
    uint64_t v17 = 72 * v77;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 184))(a3, v16);
      v16 += 72;
      v17 -= 72;
    }
    while (v17);
  }
  WebCore::GraphicsContext::clearDropShadow(a3);
  WebCore::GraphicsContext::setCompositeMode((uint64_t)a3, 256);
  if (v77)
  {
    uint64_t v18 = v75;
    uint64_t v19 = 72 * v77;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 176))(a3, v18);
      v18 += 72;
      v19 -= 72;
    }
    while (v19);
  }
  if (*((unsigned char *)this + 24))
  {
    uint64_t v20 = *(void *)(*((void *)this + 1) + 8);
    uint64_t v21 = v20 ? v20 - 16 : 0;
    WebKit::FindController::frameWithSelection(*(WebCore::Page **)(v21 + 48), (uint64_t *)&v73);
    uint64_t v22 = v73;
    if ((void)v73)
    {
      int v23 = *(WebCore::ScrollView **)(v73 + 288);
      WebCore::FrameSelection::selectionBounds();
      *(void *)&long long v74 = __PAIR64__(v25, v24);
      *((void *)&v74 + 1) = __PAIR64__(v27, v26);
      v64.i64[0] = WebCore::enclosingIntRect((WebCore *)&v74, v28);
      v64.i64[1] = v29;
      uint64_t v30 = WebCore::ScrollView::contentsToRootView(v23, (const WebCore::IntRect *)&v64);
      BOOL v33 = *((_DWORD *)this + 7) == v30 && *((_DWORD *)this + 8) == HIDWORD(v30);
      if (v33 && (*((_DWORD *)this + 9) == v31 ? (BOOL v34 = *((_DWORD *)this + 10) == v32) : (BOOL v34 = 0), v34))
      {
        *(void *)&long long v73 = 0;
      }
      else
      {
        int v35 = (atomic_uint *)*((void *)this + 1);
        if (v35) {
          atomic_fetch_add(v35, 1u);
        }
        char v36 = (void *)WTF::fastMalloc((WTF *)0x10);
        *char v36 = &unk_1EE9F8218;
        v36[1] = v35;
        v64.i64[0] = (uint64_t)v36;
        WTF::callOnMainRunLoop();
        uint64_t v37 = v64.i64[0];
        v64.i64[0] = 0;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
        }
        uint64_t v22 = v73;
        *(void *)&long long v73 = 0;
        if (!v22) {
          goto LABEL_43;
        }
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v22 + 8));
    }
  }
LABEL_43:
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 104))(a3, 1);
  WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v38);
  uint64_t result = v68;
  if (v68)
  {
    int v68 = 0;
    LODWORD(v69) = 0;
    return (WTF *)WTF::fastFree(result, v39);
  }
  return result;
}

uint64_t WebCore::GraphicsContext::setDropShadow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  WebCore::Color::Color((WebCore::Color *)v10, (const Color *)(a2 + 16));
  v10[1] = *(void *)(a2 + 24);
  char v11 = 1;
  WebCore::GraphicsContextState::setProperty<std::optional<WebCore::GraphicsDropShadow>>(v4, 64, 192, &v8);
  if (v11)
  {
    if ((v10[0] & 0x8000000000000) != 0)
    {
      int8x16_t v7 = (unsigned int *)(v10[0] & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v10[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v4);
}

uint64_t WebCore::GraphicsContext::clearDropShadow(WebCore::GraphicsContext *this)
{
  uint64_t v2 = (char *)this + 8;
  LOBYTE(v6) = 0;
  char v8 = 0;
  WebCore::GraphicsContextState::setProperty<std::optional<WebCore::GraphicsDropShadow>>((uint64_t)this + 8, 64, 192, &v6);
  if (v8)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      uint64_t v5 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  return (*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(void *)this + 88))(this, v2);
}

uint64_t WebKit::FindController::mouseEvent(WebKit::FindController *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 8) == 6) {
    WebKit::FindController::hideFindUI(a1);
  }
  return 0;
}

_DWORD *WebKit::FindController::didInvalidateFindRects(_DWORD *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    this = *(_DWORD **)(v1 + 8);
    if (this)
    {
      uint64_t v2 = this + 2;
      ++this[2];
      WebCore::PageOverlay::setNeedsDisplay((WebCore::PageOverlay *)this);
      return WTF::RefCounted<WebCore::PageOverlay>::deref(v2);
    }
  }
  return this;
}

void WebKit::VisitedLinkTableController::~VisitedLinkTableController(WebKit::VisitedLinkTableController *this)
{
  {
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v2 = IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0x9Du, *((void *)this + 6));
  WebKit::visitedLinkTableControllers((WebKit *)v2);
  if (qword_1EB359F48)
  {
    uint64_t v4 = *((void *)this + 6);
    unsigned int v5 = *(_DWORD *)(qword_1EB359F48 - 8);
    unint64_t v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
    uint64_t v10 = *(void *)(qword_1EB359F48 + 16 * v9);
    if (v10 != v4)
    {
      int v11 = 1;
      while (v10)
      {
        uint64_t v9 = (v9 + v11) & v5;
        uint64_t v10 = *(void *)(qword_1EB359F48 + 16 * v9);
        ++v11;
        if (v10 == v4) {
          goto LABEL_9;
        }
      }
      uint64_t v9 = *(unsigned int *)(qword_1EB359F48 - 4);
    }
LABEL_9:
    if (v9 != *(_DWORD *)(qword_1EB359F48 - 4))
    {
      uint64_t v12 = (void *)(qword_1EB359F48 + 16 * v9);
      uint64_t v13 = (unsigned int *)v12[1];
      void *v12 = -1;
      v12[1] = 0;
      if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v3);
      }
      ++*(_DWORD *)(qword_1EB359F48 - 16);
      if (qword_1EB359F48) {
        int v14 = *(_DWORD *)(qword_1EB359F48 - 12) - 1;
      }
      else {
        int v14 = -1;
      }
      *(_DWORD *)(qword_1EB359F48 - 12) = v14;
      if (qword_1EB359F48)
      {
        unsigned int v15 = *(_DWORD *)(qword_1EB359F48 - 4);
        if (6 * *(_DWORD *)(qword_1EB359F48 - 12) < v15 && v15 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(&qword_1EB359F48, v15 >> 1, 0);
        }
      }
    }
  }
  uint64_t v17 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v17) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v17);
  }
  *((void *)this + 4) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v3);

  MEMORY[0x1F416EC10](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::VisitedLinkTableController::~VisitedLinkTableController(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::VisitedLinkTableController::~VisitedLinkTableController(WebKit::VisitedLinkTableController *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::VisitedLinkTableController::~VisitedLinkTableController((WebKit::VisitedLinkTableController *)((char *)this - 32));

  WTF::fastFree(v1, v2);
}

_DWORD *WebKit::VisitedLinkTableController::isLinkVisited(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashTableReadOnly *)(a1 + 56), a3);
  if (result) {
    return (_DWORD *)(*result != 0);
  }
  return result;
}

IPC::Encoder *WebKit::VisitedLinkTableController::addVisitedLink(WebKit::VisitedLinkTableController *this, WebCore::Page *a2, unsigned int a3)
{
  uint64_t result = (IPC::Encoder *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::VisitedLinkTableController *)((char *)this + 56), a3);
  if (!result || !*(_DWORD *)result)
  {
    {
      uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v16);
    }
    uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    unint64_t v8 = *(void **)(*((void *)a2 + 6) + 16);
    (*(void (**)(void *))(*v8 + 1368))(v8);
    uint64_t v9 = *(void *)(v8[2] + 8);
    if (v9) {
      uint64_t v10 = v9 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v17 = *(void *)(v10 + 2120);
    uint64_t v11 = *((void *)this + 6);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 1550;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v18 = v12;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v17);
    IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v12, a3);
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v18, 0, 0);
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

unsigned int *WebKit::VisitedLinkTableController::setVisitedLinkTable(WebCore::VisitedLinkStore *a1)
{
  uint64_t result = (unsigned int *)WebCore::SharedMemory::map();
  if (v4)
  {
    uint64_t v3 = v4;
    uint64_t v4 = 0;
    WebKit::SharedStringHashTableReadOnly::setSharedMemory((uint64_t)a1 + 56, &v3);
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    }
    WebCore::VisitedLinkStore::invalidateStylesForAllLinks(a1);
    uint64_t result = v4;
    uint64_t v4 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

WebCore::VisitedLinkStore *WebKit::VisitedLinkTableController::visitedLinkStateChanged(WebCore::VisitedLinkStore *this, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 3);
  if (v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *a2;
    uint64_t v5 = 4 * v2;
    do
    {
      v4 += 4;
      this = (WebCore::VisitedLinkStore *)WebCore::VisitedLinkStore::invalidateStylesForLink(v3);
      v5 -= 4;
    }
    while (v5);
  }
  return this;
}

uint64_t WebKit::VisitedLinkTableController::removeAllVisitedLinks(WebKit::VisitedLinkTableController *this)
{
  uint64_t v3 = 0;
  WebKit::SharedStringHashTableReadOnly::setSharedMemory((uint64_t)this + 56, &v3);
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }

  return WebCore::VisitedLinkStore::invalidateStylesForAllLinks(this);
}

_DWORD *WebKit::WebBackForwardListProxy::addItemFromUIProcess(uint64_t a1, void *a2, _DWORD **a3, uint64_t a4, char a5)
{
  if (a5) {
    goto LABEL_5;
  }
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
  }
  uint64_t result = (_DWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&WebKit::idToHistoryItemMap(void)::map, a2);
  if ((result & 1) == 0)
  {
LABEL_5:
    {
      WebKit::idToHistoryItemMap(void)::map = 0;
    }
    uint64_t v10 = *a3;
    uint64_t result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::HistoryItem*>(&WebKit::idToHistoryItemMap(void)::map, a2, &v10, (uint64_t)&v9);
    if (*(unsigned char *)(a1 + 32)) {
      *(unsigned char *)(a1 + 32) = 0;
    }
  }
  return result;
}

WebCore::BackForwardCache *WebKit::WebBackForwardListProxy::removeItem(void *a1)
{
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
  }
  uint64_t v1 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&WebKit::idToHistoryItemMap(void)::map, a1);
  uint64_t result = (WebCore::BackForwardCache *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::take(&WebKit::idToHistoryItemMap(void)::map, v1, &v5);
  if (v5)
  {
    uint64_t v3 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(result);
    WebCore::BackForwardCache::remove(v3, v5);
    WebCore::Page::clearPreviousItemFromAllPages(v5, v4);
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result) {
      return (WebCore::BackForwardCache *)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebBackForwardListProxy::addItem(WTF::StringImpl *result, uint64_t a2, uint64_t a3, WebKit **a4)
{
  v43[0] = a2;
  v43[1] = a3;
  uint64_t v4 = *((void *)result + 2);
  if (!v4 || !*(void *)(v4 + 8)) {
    return result;
  }
  unint64_t v6 = result;
  {
    uint64_t v7 = WebKit::idToHistoryItemMap(void)::map;
    unint64_t v8 = *a4;
    uint64_t v9 = (void *)((char *)*a4 + 336);
    if (WebKit::idToHistoryItemMap(void)::map)
    {
LABEL_5:
      int v10 = *(_DWORD *)(v7 - 8);
      goto LABEL_6;
    }
  }
  else
  {
    WebKit::idToHistoryItemMap(void)::map = 0;
    unint64_t v8 = *a4;
    uint64_t v9 = (void *)((char *)*a4 + 336);
  }
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(&WebKit::idToHistoryItemMap(void)::map, 0);
  uint64_t v7 = WebKit::idToHistoryItemMap(void)::map;
  if (WebKit::idToHistoryItemMap(void)::map) {
    goto LABEL_5;
  }
  int v10 = 0;
LABEL_6:
  unsigned int v36 = -1640531527;
  __int16 v37 = 0;
  char v38 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v36, v9);
  unsigned int v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v36) & v10;
  uint64_t v12 = (void *)(v7 + 24 * v11);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    unsigned int v15 = 0;
    int v16 = 1;
    while (v14 != *v9 || v13 != v9[1])
    {
      if (v13 == -1) {
        unsigned int v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v10;
      uint64_t v12 = (void *)(v7 + 24 * v11);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      ++v16;
      if (*(_OWORD *)v12 == 0)
      {
        if (v15)
        {
          v15[1] = 0;
          v15[2] = 0;
          *unsigned int v15 = 0;
          --*(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 16);
          uint64_t v12 = v15;
        }
        goto LABEL_15;
      }
    }
    goto LABEL_25;
  }
LABEL_15:
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v9;
  if (v8) {
    ++*(_DWORD *)v8;
  }
  uint64_t v17 = (_DWORD *)v12[2];
  v12[2] = v8;
  if (v17) {
    WTF::RefCounted<WebCore::HistoryItem>::deref(v17);
  }
  if (WebKit::idToHistoryItemMap(void)::map) {
    int v18 = *(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 12) = v18;
  if (WebKit::idToHistoryItemMap(void)::map) {
    int v19 = *(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(WebKit::idToHistoryItemMap(void)::map - 16) + v19);
  unint64_t v21 = *(unsigned int *)(WebKit::idToHistoryItemMap(void)::map - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20) {
      goto LABEL_25;
    }
LABEL_43:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(&WebKit::idToHistoryItemMap(void)::map, (uint64_t)v12);
    goto LABEL_25;
  }
  if (3 * v21 <= 4 * v20) {
    goto LABEL_43;
  }
LABEL_25:
  if (*((unsigned char *)v6 + 32)) {
    *((unsigned char *)v6 + 32) = 0;
  }
  uint64_t v22 = *((void *)v6 + 2);
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 8);
    if (v23) {
      uint64_t v24 = v23 - 16;
    }
    else {
      uint64_t v24 = 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  WebKit::toBackForwardListItemState(*a4, (uint64_t)&v36);
  uint64_t v26 = *(void *)(v24 + 32);
  uint64_t v25 = v24 + 32;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v26 + 56))(v25);
  uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v28 = 1869;
  *((void *)v28 + 1) = v27;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  uint64_t v44 = v28;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v28, v43);
  IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode(v28, (uint64_t)&v36);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v25 + 32))(v25, &v44, 0);
  uint64_t v30 = v44;
  uint64_t v44 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v34, v35);
  }
  int v31 = v42;
  char v42 = 0;
  if (v31) {
    WTF::RefCounted<WebKit::ViewSnapshot>::deref(v31);
  }
  int v32 = v41;
  int v41 = 0;
  if (v32) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v32);
  }
  WebKit::FrameState::~FrameState(&v40);
  uint64_t result = v39;
  char v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebBackForwardListProxy::goToItem(uint64_t this, WebCore::HistoryItem *a2)
{
  uint64_t v2 = *(void *)(this + 16);
  if (!v2) {
    return this;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return this;
  }
  uint64_t v5 = this;
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v6 = v3 + 16;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  if (v9)
  {
    uint64_t v10 = v9;
    unsigned int v11 = (uint64_t *)((char *)a2 + 336);
    uint64_t v28 = 0;
    IPC::Connection::createSyncMessageEncoder(3741, v8, &v28, &v27);
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v27, v11);
    IPC::Connection::sendSyncMessage(v10, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
    int v12 = v26;
    if (v26)
    {
      if (v26 == 1)
      {
        LOBYTE(v23[0]) = (_BYTE)v25;
LABEL_11:
        int v24 = v12;
        int v17 = v12;
LABEL_12:
        ((void (*)(char *, unint64_t **))off_1EE9F8230[v17])(&v29, &v25);
LABEL_13:
        int v18 = v27;
        uint64_t v27 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v15);
          WTF::fastFree(v19, v20);
        }
        if (v12) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v11;
        }
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v14 = IPC::Decoder::decode<std::tuple<WebKit::WebBackForwardListCounts>>(v25);
      if (!(_BYTE)v15)
      {
        LOBYTE(v23[0]) = 13;
        int v12 = 1;
        int v24 = 1;
        int v17 = v26;
        if (v26 == -1) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
      if (!v26)
      {
        unsigned int v11 = (uint64_t *)v14;
        int v16 = v25;
        uint64_t v25 = 0;
        v23[0] = v16;
        v23[1] = v14;
        goto LABEL_11;
      }
    }
    unint64_t v21 = (WebKit::WebBackForwardListProxy *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebBackForwardListProxy::itemAtIndex(v21, v22);
  }
  uint64_t v13 = 0;
  LOBYTE(v23[0]) = 3;
  int v12 = 1;
  int v24 = 1;
LABEL_18:
  if (!*(unsigned char *)(v5 + 32)) {
    *(unsigned char *)(v5 + 32) = 1;
  }
  *(void *)(v5 + 24) = v13;
  return ((uint64_t (*)(unint64_t **, void *))off_1EE9F8088[v12])(&v25, v23);
}

uint64_t WebKit::WebBackForwardListProxy::itemAtIndex@<X0>(uint64_t this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(this + 16);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0)
  {
    *a3 = 0;
    return this;
  }
  {
    uint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  int v21 = a2;
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3742, v7, &v27, &v26);
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v26, &v21);
  IPC::Connection::sendSyncMessage(v6, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, INFINITY);
  if (v25)
  {
    if (v25 == 1)
    {
      v22[0] = (_BYTE)v24;
      int v8 = 1;
      int v23 = 1;
      int v9 = 1;
LABEL_13:
      ((void (*)(unsigned char *, IPC::Decoder **))off_1EE9F8230[v9])(v28, &v24);
      goto LABEL_14;
    }
    goto LABEL_26;
  }
  uint64_t v10 = v24;
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v24, (uint64_t)v22);
  if (v22[24])
  {
    char v11 = v22[0];
    *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[1];
    *(void *)&v28[15] = *(void *)&v22[16];
    int v9 = v25;
    if (!v25)
    {
      int v8 = 0;
      int v12 = v24;
      int v24 = 0;
      *(_OWORD *)&v22[9] = *(_OWORD *)v28;
      *(void *)&v22[24] = *(void *)&v28[15];
      *(void *)int v22 = v12;
      v22[8] = v11;
      int v23 = 0;
      goto LABEL_13;
    }
LABEL_26:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  uint64_t v13 = *(void **)v10;
  uint64_t v14 = *((void *)v10 + 1);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  uint64_t v15 = *((void *)v10 + 3);
  if (v15 && v14) {
    (*(void (**)(uint64_t, void *))(*(void *)v15 + 16))(v15, v13);
  }
  v22[0] = 13;
  int v8 = 1;
  int v23 = 1;
  int v9 = v25;
  if (v25 != -1) {
    goto LABEL_13;
  }
LABEL_14:
  int v16 = v26;
  int v26 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
    if (v8) {
      goto LABEL_16;
    }
  }
  else if (v8)
  {
    goto LABEL_16;
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[8];
  *(void *)&v28[16] = *(void *)&v22[24];
  if (v22[24])
  {
    {
      WebKit::idToHistoryItemMap(void)::map = 0;
    }
    int v17 = (_DWORD *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&WebKit::idToHistoryItemMap(void)::map, v28);
    if (v17) {
      ++*v17;
    }
    goto LABEL_23;
  }
LABEL_16:
  int v17 = 0;
LABEL_23:
  *a3 = v17;
  return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9F8098[v8])(v28, v22);
}

uint64_t WebKit::WebBackForwardListProxy::backListCount(WebKit::WebBackForwardListProxy *this)
{
  return *(unsigned int *)WebKit::WebBackForwardListProxy::cacheListCountsIfNecessary(this);
}

uint64_t *WebKit::WebBackForwardListProxy::cacheListCountsIfNecessary(WebKit::WebBackForwardListProxy *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 24);
  if (!*((unsigned char *)this + 32))
  {
    uint64_t v4 = *((void *)this + 2);
    if (!v4 || (uint64_t v4 = *(void *)(v4 + 8)) == 0)
    {
LABEL_18:
      *((unsigned char *)this + 32) = 1;
LABEL_19:
      uint64_t *v1 = v4;
      return v1;
    }
    {
      uint64_t v5 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v6 = *(void *)(v4 + 24);
      uint64_t v21 = 0;
      IPC::Connection::createSyncMessageEncoder(3744, v6, &v21, &v20);
      IPC::Connection::sendSyncMessage(v5, v21, (uint64_t *)&v20, 0, (uint64_t)&v18, INFINITY);
      int v7 = v19;
      if (v19)
      {
        if (v19 == 1)
        {
          LOBYTE(v16[0]) = (_BYTE)v18;
          goto LABEL_10;
        }
      }
      else
      {
        int v8 = IPC::Decoder::decode<std::tuple<WebKit::WebBackForwardListCounts>>(v18);
        if (!(_BYTE)v9)
        {
          LOBYTE(v16[0]) = 13;
          int v7 = 1;
          int v17 = 1;
          int v11 = v19;
          if (v19 == -1)
          {
LABEL_12:
            int v12 = v20;
            uint64_t v20 = 0;
            if (v12)
            {
              IPC::Encoder::~Encoder(v12, v9);
              WTF::fastFree(v13, v14);
            }
            ((void (*)(unint64_t **, void *))off_1EE9F80B8[v7])(&v18, v16);
            if (v7) {
              uint64_t v4 = 0;
            }
            else {
              uint64_t v4 = v5;
            }
            if (*((unsigned char *)this + 32)) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
LABEL_11:
          ((void (*)(char *, unint64_t **))off_1EE9F8230[v11])(&v22, &v18);
          goto LABEL_12;
        }
        if (!v19)
        {
          uint64_t v5 = (uint64_t)v8;
          uint64_t v10 = v18;
          int v18 = 0;
          v16[0] = v10;
          v16[1] = v8;
LABEL_10:
          int v17 = v7;
          int v11 = v7;
          goto LABEL_11;
        }
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  return v1;
}

uint64_t WebKit::WebBackForwardListProxy::forwardListCount(WebKit::WebBackForwardListProxy *this)
{
  return *((unsigned int *)WebKit::WebBackForwardListProxy::cacheListCountsIfNecessary(this) + 1);
}

uint64_t WebKit::WebBackForwardListProxy::containsItem(WebKit::WebBackForwardListProxy *this, const WebCore::HistoryItem *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(v4 + 32) + 48))();
  if (v6)
  {
    uint64_t v24 = 0;
    IPC::Connection::createSyncMessageEncoder(3743, v5, &v24, &v23);
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v23, (uint64_t *)a2 + 42);
    IPC::Connection::sendSyncMessage(v6, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
    if (v22)
    {
      if (v22 == 1)
      {
        LODWORD(v6) = 0;
        LOBYTE(v17) = (_BYTE)v21;
        int v7 = 1;
        int v19 = 1;
        int v8 = 1;
LABEL_13:
        ((void (*)(__int16 *, uint64_t **))off_1EE9F8230[v8])(&v20, &v21);
LABEL_14:
        int v11 = v23;
        int v23 = 0;
        if (v11)
        {
          IPC::Encoder::~Encoder(v11, v9);
          WTF::fastFree(v14, v15);
        }
        goto LABEL_16;
      }
    }
    else
    {
      __int16 v20 = 0;
      IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
      if (!HIBYTE(v20))
      {
        LODWORD(v6) = 0;
        LOBYTE(v17) = 13;
        int v7 = 1;
        int v19 = 1;
        int v8 = v22;
        if (v22 == -1) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
      int v8 = v22;
      if (!v22)
      {
        int v7 = 0;
        uint64_t v10 = v21;
        uint64_t v21 = 0;
        LODWORD(v6) = v20;
        int v17 = v10;
        char v18 = v20;
        int v19 = 0;
        goto LABEL_13;
      }
    }
    int v16 = (WebKit::WebBackForwardListProxy *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebBackForwardListProxy::close(v16);
  }
  LOBYTE(v17) = 3;
  int v7 = 1;
  int v19 = 1;
LABEL_16:
  ((void (*)(uint64_t **, uint64_t **))off_1EE9F80A8[v7])(&v21, &v17);
  if (v7) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v6 == 0;
  }
  return !v12;
}

unsigned int *WebKit::WebBackForwardListProxy::close(WebKit::WebBackForwardListProxy *this, void *a2)
{
  uint64_t result = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  if (!*((unsigned char *)this + 32)) {
    *((unsigned char *)this + 32) = 1;
  }
  *((void *)this + 3) = 0;
  return result;
}

IPC::Encoder *WebKit::WebBackForwardListProxy::clear(WebKit::WebBackForwardListProxy *this)
{
  if (!*((unsigned char *)this + 32)) {
    *((unsigned char *)this + 32) = 1;
  }
  *((void *)this + 3) = 0;
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = v3 + 32;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v7 = 1870;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  BOOL v12 = v7;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v12, 0);
  uint64_t result = v12;
  BOOL v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::DrawingArea::layerTreeStateIsFrozen(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::supportsAsyncScrolling(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::usesDelegatedPageScaling(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::shouldUseTiledBackingForFrameView()
{
  return 0;
}

uint64_t WebKit::DrawingArea::graphicsLayerFactory(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::scheduleRenderingUpdate(WebKit::DrawingArea *this)
{
  return 0;
}

uint64_t WebKit::DrawingArea::activityStateDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::DrawingArea::addMilestonesToDispatch()
{
  return 0;
}

void WebKit::WebBackForwardListProxy::~WebBackForwardListProxy(WebKit::WebBackForwardListProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9F8028;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9F8028;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1) {
        std::unique_ptr<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v4, 0);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::unique_ptr<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    uint64_t v4 = (WTF *)WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::EventDispatcher::TouchEventData>::destruct(*(WTF **)a1, (WTF *)(*(void *)a1 + 144 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (a1 + 16 != *(void *)a1 && v4 != 0)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebKit::EventDispatcher::TouchEventData>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (uint64_t)result + 64;
    do
    {
      uint64_t v4 = *(void *)(v3 + 64);
      *(void *)(v3 + 64) = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 16, a2);
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, v5);
      uint64_t result = *(WTF **)(v3 - 16);
      if (result)
      {
        *(void *)(v3 - 16) = 0;
        *(_DWORD *)(v3 - 8) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, a2);
      }
      uint64_t v6 = (WTF *)(v3 + 80);
      v3 += 144;
    }
    while (v6 != a2);
  }
  return result;
}

__n128 WTF::VectorCopier<false,WebKit::WebTouchEvent>::uninitializedCopy<WebKit::WebTouchEvent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(_DWORD *)uint64_t v7 = 0;
      long long v8 = *(_OWORD *)(a1 + v6 + 4);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + v6 + 16);
      *(_OWORD *)(v7 + 4) = v8;
      WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3 + v6 + 32, (uint64_t *)(a1 + v6 + 32));
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3 + v6 + 48, (uint64_t *)(a1 + v6 + 48));
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3 + v6 + 64, (uint64_t *)(a1 + v6 + 64));
      __n128 result = *(__n128 *)(a1 + v6 + 80);
      *(_DWORD *)(v7 + 96) = *(_DWORD *)(a1 + v6 + 96);
      *(__n128 *)(v7 + 80) = result;
      v6 += 112;
    }
    while (a1 + v6 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *((_DWORD *)a2 + 3);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebKit::WebTouchEvent>::destruct((WTF *)(*(void *)a1 + 112 * v5), (WTF *)(*(void *)a1 + 112 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = *(void *)a1;
    if (v4)
    {
      uint64_t v8 = v6 + 112 * v4;
      do
      {
        long long v9 = *(_OWORD *)(v6 + 4);
        *(_OWORD *)(v7 + 16) = *(_OWORD *)(v6 + 16);
        *(_OWORD *)(v7 + 4) = v9;
        if (v6 != v7)
        {
          unint64_t v10 = *(unsigned int *)(v7 + 44);
          unint64_t v11 = *(unsigned int *)(v6 + 44);
          if (v10 <= v11)
          {
            if (v11 > *(unsigned int *)(v7 + 40))
            {
              WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v7 + 32, 0);
              WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v7 + 32, *(unsigned int *)(v6 + 44));
              unint64_t v10 = *(unsigned int *)(v7 + 44);
            }
          }
          else
          {
            *(_DWORD *)(v7 + 44) = v11;
            unint64_t v10 = v11;
          }
          if (v10)
          {
            memmove(*(void **)(v7 + 32), *(const void **)(v6 + 32), 72 * v10 - 7);
            unint64_t v10 = *(unsigned int *)(v7 + 44);
          }
          uint64_t v12 = *(unsigned int *)(v6 + 44);
          if (v10 != v12)
          {
            uint64_t v13 = 9 * v10;
            uint64_t v14 = *(void *)(v7 + 32) + 72 * v10;
            uint64_t v15 = *(void *)(v6 + 32) + 8 * v13;
            uint64_t v16 = 72 * v12 - 8 * v13;
            do
            {
              *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
              long long v17 = *(_OWORD *)(v15 + 16);
              long long v18 = *(_OWORD *)(v15 + 32);
              long long v19 = *(_OWORD *)(v15 + 48);
              *(void *)(v14 + 64) = *(void *)(v15 + 64);
              *(_OWORD *)(v14 + 32) = v18;
              *(_OWORD *)(v14 + 48) = v19;
              *(_OWORD *)(v14 + 16) = v17;
              v14 += 72;
              v15 += 72;
              v16 -= 72;
            }
            while (v16);
            LODWORD(v10) = *(_DWORD *)(v6 + 44);
          }
          *(_DWORD *)(v7 + 44) = v10;
        }
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v7 + 48, v6 + 48);
        WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v7 + 64, v6 + 64);
        long long v20 = *(_OWORD *)(v6 + 80);
        *(_DWORD *)(v7 + 96) = *(_DWORD *)(v6 + 96);
        *(_OWORD *)(v7 + 80) = v20;
        v6 += 112;
        v7 += 112;
      }
      while (v6 != v8);
      uint64_t v6 = *a2;
      uint64_t v21 = *(unsigned int *)(a1 + 12);
      uint64_t v7 = *(void *)a1;
    }
    else
    {
      uint64_t v21 = 0;
    }
    WTF::VectorCopier<false,WebKit::WebTouchEvent>::uninitializedCopy<WebKit::WebTouchEvent>(v6 + 112 * v21, v6 + 112 * *((unsigned int *)a2 + 3), v7 + 112 * v21);
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

uint64_t WebCore::GraphicsContextState::setProperty<std::optional<WebCore::GraphicsDropShadow>>(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1 + a3;
  uint64_t result = std::operator==[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(a1 + a3, (uint64_t)a4);
  if ((result & 1) == 0)
  {
    uint64_t result = std::__optional_storage_base<WebCore::GraphicsDropShadow,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::GraphicsDropShadow,false> const&>(v7, a4);
    *(_DWORD *)(a1 + 176) |= a2;
  }
  return result;
}

BOOL std::operator==[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v2 = *(unsigned char *)(a2 + 32) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 32) != 0) == (*(unsigned char *)(a2 + 32) != 0);
  }
  BOOL v4 = *(float *)a1 == *(float *)a2 && *(float *)(a1 + 4) == *(float *)(a2 + 4);
  if (!v4 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((v5 & 0x8000000000000) == 0) {
    return (v6 & 0x8000000000000) == 0 && v5 == v6;
  }
  if ((v6 & 0x8000000000000) == 0) {
    return 0;
  }
  BOOL v8 = 0;
  unint64_t v9 = 0;
  long long v10 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
  long long v13 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
  long long v14 = v10;
  do
  {
    if (*((float *)&v14 + v9) != *((float *)&v13 + v9)) {
      break;
    }
    BOOL v8 = v9++ > 2;
  }
  while (v9 != 4);
  unint64_t v11 = HIBYTE(v6);
  BOOL v12 = BYTE6(v5) == BYTE6(v6);
  if (HIBYTE(v5) != v11) {
    BOOL v12 = 0;
  }
  return v8 && v12;
}

uint64_t std::__optional_storage_base<WebCore::GraphicsDropShadow,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::GraphicsDropShadow,false> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(unsigned char *)(result + 32))
    {
      uint64_t v4 = *a2;
      *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t result = v4;
      uint64_t result = WebCore::Color::operator=();
      *(void *)(v3 + 24) = a2[3];
    }
  }
  else if (*(unsigned char *)(result + 32))
  {
    return std::__optional_destruct_base<WebCore::GraphicsDropShadow,false>::reset[abi:sn180100](result, a2);
  }
  else
  {
    uint64_t v5 = *a2;
    *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t result = v5;
    uint64_t result = WebCore::Color::Color((WebCore::Color *)(result + 16), (const Color *)a2 + 2);
    *(void *)(v3 + 24) = a2[3];
    *(unsigned char *)(v3 + 32) = 1;
  }
  return result;
}

unsigned int *WebCore::GraphicsContextState::setStrokeColor(WebCore::GraphicsContextState *this, const WebCore::Color *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v7 = 0;
  WebCore::SourceBrush::SourceBrush();
  uint64_t result = (unsigned int *)WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>((uint64_t)this, 4, 88, (uint64_t)&v8);
  if (v10 != -1) {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1EE9F8070[v10])(&v5, &v9);
  }
  int v10 = -1;
  if ((v8 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  if (v7 != -1) {
    return (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1EE9F8070[v7])(&v5, &v6);
  }
  return result;
}

uint64_t WebCore::GraphicsContext::setCompositeMode(uint64_t a1, __int16 a2)
{
  if (__PAIR64__(*(unsigned __int8 *)(a1 + 195), *(unsigned __int8 *)(a1 + 194)) != __PAIR64__(HIBYTE(a2), a2))
  {
    *(_WORD *)(a1 + 194) = a2;
    *(_DWORD *)(a1 + 184) |= 0x20u;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a1 + 8);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19BackForwardGoToItemEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy22BackForwardItemAtIndexEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy27BackForwardListContainsItemEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21BackForwardListCountsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void WTF::Detail::CallableWrapper<WebKit::EventDispatcher::internalWheelEvent(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebWheelEvent const&,WebCore::RectEdges<BOOL>,WebKit::EventDispatcher::WheelEventOrigin)::$_0,void>::call(uint64_t a1)
{
  {
    int v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v1 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v8);
  if (v1)
  {
    uint64_t v2 = v1;
    CFRetain(*(CFTypeRef *)(v1 + 8));
    uint64_t v3 = *(void *)(v2 + 48);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 1760);
      if (v4)
      {
        char v5 = *(WebCore::KeyboardScrollingAnimator **)(v4 + 8);
        if (v5) {
          WebCore::KeyboardScrollingAnimator::stopScrollingImmediately(v5);
        }
      }
    }
    uint64_t v6 = *(const void **)(v2 + 8);
    CFRelease(v6);
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    char v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    char v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  uint64_t result = (uint64_t *)std::unique_ptr<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](a2 + 1, 0);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    BOOL v12 = 0;
    do
    {
      long long v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = (uint64_t *)(v15 + 16 * v22);
          std::unique_ptr<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v24 + 1, 0);
          uint64_t *v24 = *v13;
          int v25 = (uint64_t *)(v6 + 16 * v11);
          uint64_t v26 = v25[1];
          *++int v25 = 0;
          v24[1] = v26;
          std::unique_ptr<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v25, 0);
          if (v13 == a3) {
            BOOL v12 = v24;
          }
        }
        else
        {
          std::unique_ptr<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    BOOL v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

__n128 WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::EventDispatcher::TouchEventData>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  uint64_t v4 = *(void *)a1 + 144 * a1[3];
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  *(_DWORD *)(v4 + 16) = 0;
  long long v5 = *(_OWORD *)(v3 + 20);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 20) = v5;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  uint64_t v6 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = 0;
  *(void *)(v4 + 48) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v4 + 56) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  *(_DWORD *)(v4 + 60) = v6;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  uint64_t v7 = *(void *)(v3 + 64);
  *(void *)(v3 + 64) = 0;
  *(void *)(v4 + 64) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 72);
  *(_DWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v4 + 72) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 76);
  *(_DWORD *)(v3 + 76) = 0;
  *(_DWORD *)(v4 + 76) = v7;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  uint64_t v8 = *(void *)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  *(void *)(v4 + 80) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 88);
  *(_DWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v4 + 88) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 92);
  *(_DWORD *)(v3 + 92) = 0;
  *(_DWORD *)(v4 + 92) = v8;
  __n128 result = *(__n128 *)(v3 + 96);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(v3 + 112);
  *(__n128 *)(v4 + 96) = result;
  uint64_t v10 = *(void *)(v3 + 128);
  *(void *)(v3 + 128) = 0;
  *(void *)(v4 + 128) = v10;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 144 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] >= a2) {
    return result;
  }
  uint64_t v2 = result;
  unint64_t v3 = *(WTF **)result;
  uint64_t v4 = result[3];
  if (a2 >= 2)
  {
    if (a2 >= 0x1C71C72)
    {
      __break(0xC471u);
      return result;
    }
    int v5 = 144 * a2;
    __n128 result = (unsigned int *)WTF::fastMalloc((WTF *)(144 * a2));
    uint64_t v6 = result;
    v2[2] = (v5 & 0xFFFFFFF0) / 0x90;
    *(void *)uint64_t v2 = result;
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  uint64_t v6 = result + 4;
  *(void *)__n128 result = result + 4;
  result[2] = 1;
  if (v4)
  {
LABEL_7:
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = &v6[v7 / 4];
      unint64_t v9 = (char *)v3 + v7;
      *(_OWORD *)unint64_t v8 = *(_OWORD *)((char *)v3 + v7);
      v8[4] = 0;
      long long v10 = *(_OWORD *)((char *)v3 + v7 + 20);
      *((_OWORD *)v8 + 2) = *(_OWORD *)((char *)v3 + v7 + 32);
      *(_OWORD *)(v8 + 5) = v10;
      *((void *)v8 + 6) = 0;
      *((void *)v8 + 7) = 0;
      uint64_t v11 = *(void *)((char *)v3 + v7 + 48);
      *((void *)v9 + 6) = 0;
      *((void *)v8 + 6) = v11;
      LODWORD(v11) = *(_DWORD *)((char *)v3 + v7 + 56);
      *((_DWORD *)v9 + 14) = 0;
      v8[14] = v11;
      LODWORD(v11) = *(_DWORD *)((char *)v3 + v7 + 60);
      *((_DWORD *)v9 + 15) = 0;
      v8[15] = v11;
      *((void *)v8 + 8) = 0;
      *((void *)v8 + 9) = 0;
      uint64_t v12 = *(void *)((char *)v3 + v7 + 64);
      *(void *)((char *)v3 + v7 + 64) = 0;
      *((void *)v8 + 8) = v12;
      LODWORD(v12) = *(_DWORD *)((char *)v3 + v7 + 72);
      *((_DWORD *)v9 + 18) = 0;
      v8[18] = v12;
      LODWORD(v12) = *(_DWORD *)((char *)v3 + v7 + 76);
      *((_DWORD *)v9 + 19) = 0;
      *((void *)v8 + 10) = 0;
      *((void *)v8 + 11) = 0;
      uint64_t v13 = *(void *)((char *)v3 + v7 + 80);
      v8[19] = v12;
      *(void *)((char *)v3 + v7 + 80) = 0;
      *((void *)v8 + 10) = v13;
      LODWORD(v12) = *(_DWORD *)((char *)v3 + v7 + 88);
      *((_DWORD *)v9 + 22) = 0;
      v8[22] = v12;
      LODWORD(v12) = *(_DWORD *)((char *)v3 + v7 + 92);
      *((_DWORD *)v9 + 23) = 0;
      v8[23] = v12;
      long long v14 = *(_OWORD *)((char *)v3 + v7 + 96);
      v8[28] = *(_DWORD *)((char *)v3 + v7 + 112);
      *((_OWORD *)v8 + 6) = v14;
      uint64_t v15 = *(void *)((char *)v3 + v7 + 128);
      *((void *)v9 + 16) = 0;
      *((void *)v8 + 16) = v15;
      uint64_t v16 = *(void *)((char *)v3 + v7 + 128);
      *((void *)v9 + 16) = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + v7 + 80, (void *)a2);
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3 + v7 + 64, v17);
      __n128 result = (unsigned int *)*((void *)v9 + 6);
      if (result)
      {
        *((void *)v9 + 6) = 0;
        *((_DWORD *)v9 + 14) = 0;
        __n128 result = (unsigned int *)WTF::fastFree((WTF *)result, (void *)a2);
      }
      v7 += 144;
    }
    while (144 * v4 != v7);
  }
LABEL_13:
  if (v2 + 4 != (unsigned int *)v3 && v3 != 0)
  {
    if (*(WTF **)v2 == v3)
    {
      *(void *)uint64_t v2 = 0;
      v2[2] = 0;
    }
    return (unsigned int *)WTF::fastFree(v3, (void *)a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::EventDispatcher::touchEvent(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::WebTouchEvent const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::RemoteUserInputEventData>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  kdebug_trace();
  char v3 = 0;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 32), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](v1 + 32);
  }
  uint64_t v5 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v1 + 32), (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 32));
    if (v5) {
      goto LABEL_5;
    }
LABEL_14:
    unint64_t v8 = 0;
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  if (!v5) {
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v6 = *(unsigned int *)(v5 - 4);
  unint64_t v7 = (uint64_t *)(v5 + 16 * v6);
  if (*(_DWORD *)(v5 - 12))
  {
    unint64_t v8 = (uint64_t *)v5;
    if (v6)
    {
      uint64_t v9 = 16 * v6;
      unint64_t v8 = (uint64_t *)v5;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        v9 -= 16;
        if (!v9)
        {
          unint64_t v8 = v7;
          goto LABEL_11;
        }
      }
    }
    goto LABEL_11;
  }
  unint64_t v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_15:
  unint64_t v7 = (uint64_t *)(v5 + 16 * v6);
  if (v5)
  {
LABEL_11:
    long long v10 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    goto LABEL_17;
  }
  long long v10 = 0;
LABEL_17:
  while (v8 != v10)
  {
    {
      long long v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v14);
    }
    uint64_t v16 = *v8;
    uint64_t v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v16);
    if (v11)
    {
      uint64_t v12 = v11;
      CFRetain(*(CFTypeRef *)(v11 + 8));
      WebKit::WebPage::dispatchAsynchronousTouchEvents(v12, (uint64_t)(v8 + 1));
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    uint64_t v13 = v8 + 2;
    unint64_t v8 = v7;
    if (v13 != v7)
    {
      unint64_t v8 = v13;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          unint64_t v8 = v7;
          break;
        }
      }
    }
  }
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WTF::Vector<WebKit::EventDispatcher::TouchEventData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v5, v2);
  }

  return kdebug_trace();
}

void *WTF::Detail::CallableWrapper<WebKit::EventDispatcher::dispatchWheelEventViaMainThread(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebKit::EventDispatcher::WheelEventOrigin)::$_0,void>::~CallableWrapper(void *result)
{
  uint64_t *result = &unk_1EE9F8128;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::EventDispatcher::dispatchWheelEventViaMainThread(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebKit::EventDispatcher::WheelEventOrigin)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F8128;
  return WTF::fastFree(a1, a2);
}

void WTF::Detail::CallableWrapper<WebKit::EventDispatcher::dispatchWheelEventViaMainThread(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::WebWheelEvent const&,WTF::OptionSet<WebCore::WheelEventProcessingSteps>,WebKit::EventDispatcher::WheelEventOrigin)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 145);
  int v4 = *(unsigned __int8 *)(a1 + 144);
  {
    uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  *(void *)unint64_t v18 = *(void *)(a1 + 24);
  uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), v18);
  if (v5)
  {
    uint64_t v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = *(void *)(v6 + 48);
    if (v7)
    {
      uint64_t v7 = *(void *)(v7 + 160);
      if (v7)
      {
        long long v20 = *(_OWORD *)(v7 + 32);
        WebKit::WebPage::wheelEvent(v6, (uint64_t *)&v20, a1 + 32, (uint64_t)v18);
        if (v19) {
          BOOL v8 = 1;
        }
        else {
          BOOL v8 = v18[0] == 0;
        }
        LOBYTE(v7) = !v8;
      }
    }
    if (!v4 && (v3 & 2) != 0)
    {
      char v9 = *(unsigned char *)(a1 + 36);
      {
        unint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v17);
      }
      uint64_t v10 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      v18[0] = 0;
      LOBYTE(v19) = 0;
      LOBYTE(v20) = v9;
      BYTE1(v20) = v7;
      *((void *)&v20 + 1) = v18;
      uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v11 = 1940;
      *((void *)v11 + 1) = v2;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 70) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      int v21 = v11;
      IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>(v11, (uint64_t)&v20);
      IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v21, 0, 0);
      uint64_t v13 = v21;
      int v21 = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v12);
        WTF::fastFree(v14, v15);
      }
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::WebEventType,BOOL,std::optional<WebCore::RemoteUserInputEventData> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)a2);
  char v4 = *(unsigned char *)(a2 + 1);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *uint64_t v5 = v4;
    uint64_t v7 = *(void *)(a2 + 8);
    IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(a1, v7);
  }
  else
  {
    __break(0xC471u);
  }
}

unint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SimpleRange&>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = *(void *)a1 + 32 * v4;
  uint64_t v7 = *(void *)result;
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(*(void *)result + 28) + 2;
  *(void *)uint64_t v6 = v7;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  *(_DWORD *)(v8 + 28) += 2;
  *(void *)(v6 + 16) = v8;
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(result + 24);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1991F9CECLL);
    }
    unint64_t v3 = result;
    uint64_t v4 = (uint64_t *)*result;
    uint64_t v5 = (uint64_t *)(*result + 32 * *((unsigned int *)result + 3));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    uint64_t *v3 = v6;
    unint64_t result = WTF::VectorMover<false,WebCore::SimpleRange>::move(v4, v5, v6);
    if (v4)
    {
      if ((uint64_t *)*v3 == v4)
      {
        uint64_t *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

uint64_t *WTF::VectorMover<false,WebCore::SimpleRange>::move(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      *(void *)a3 = v6;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
      uint64_t v7 = v5[2];
      void v5[2] = 0;
      *(void *)(a3 + 16) = v7;
      *(_DWORD *)(a3 + 24) = *((_DWORD *)v5 + 6);
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v5 + 2);
      unint64_t result = WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v5);
      v5 += 4;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      unint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct((uint64_t *)(*(void *)result + 32 * a2), (uint64_t *)(*(void *)result + 32 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(uint64_t **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      unint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((uint64_t *)result != v5) {
        unint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::SimpleRange>::move(v5, &v5[4 * v4], result);
      }
    }
    if (v5)
    {
      if (*(uint64_t **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree((WTF *)v5, (void *)a2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::FindController::findStringIncludingImages(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F8150;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findStringIncludingImages(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F8150;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::FindController::findStringIncludingImages(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0)
  {
    uint64_t v3 = (WebCore::LocalFrame *)(a1 + 16);
    unsigned __int16 v4 = *(_WORD *)(a1 + 24);
    uint64_t v5 = *(unsigned int *)(a1 + 28);
    uint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = *(void *)(v2 + 432);
    WebKit::FindController::findString(v7, v3, v4, v5, v6);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    v13[0] = 0;
    v13[16] = 0;
    (*(void (**)(uint64_t, unsigned char *, WTF **, void, void, void))(*(void *)v8 + 16))(v8, v13, &v11, 0, 0, 0);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    unint64_t v10 = v11;
    if (v11)
    {
      uint64_t v11 = 0;
      LODWORD(v12) = 0;
      WTF::fastFree(v10, v9);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::FindController::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F8178;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned __int16 v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F8178;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned __int16 v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::FindController::findString(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned int,int,BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 448);
  int v2 = *(unsigned __int8 *)(a1 + 16);
  unint64_t v3 = *(unsigned __int16 *)(a1 + 32);
  unsigned int v4 = *(_DWORD *)(a1 + 36);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 40);
  long long v7 = *(_OWORD *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 64);
  return WebKit::FindController::updateFindUIAfterPageScroll(v1, v2, a1 + 24, v3, v4, v5, &v7, (uint64_t *)(a1 + 72));
}

void *WTF::Detail::CallableWrapper<WebKit::FindController::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F81A0;
  unint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F81A0;
  unint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 448);
  int v2 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v3 = a1 + 24;
  unint64_t v4 = *(unsigned __int16 *)(a1 + 32);
  unsigned int v5 = *(_DWORD *)(a1 + 36);
  LOBYTE(v10) = 0;
  char v11 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9F81C8;
  unint64_t v9 = v6;
  WebKit::FindController::updateFindUIAfterPageScroll(v1, v2, v3, v4, v5, 0, &v10, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::FindController::findRectsForStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F81F0;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findRectsForStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F81F0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::findRectsForStringMatches(WTF::String const&,WTF::OptionSet<WebKit::FindOptions>,unsigned int,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 448);
  int v2 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v3 = a1 + 24;
  unint64_t v4 = *(unsigned __int16 *)(a1 + 32);
  unsigned int v5 = *(_DWORD *)(a1 + 36);
  LOBYTE(v10) = 0;
  char v11 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9F81C8;
  unint64_t v9 = v6;
  WebKit::FindController::updateFindUIAfterPageScroll(v1, v2, v3, v4, v5, 0, &v10, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::FindController::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F8218;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FindController::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F8218;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::FindController::drawRect(WebCore::PageOverlay &,WebCore::GraphicsContext &,WebCore::IntRect const&)::$_0,void>::call(BOOL result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      return WebKit::FindController::updateFindIndicator(*(WebKit::FindController **)(v2 + 432), 1, 0);
    }
  }
  return result;
}

BOOL WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v17 = -1640531527;
  __int16 v18 = 0;
  char v19 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v17, a2);
  int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
  uint64_t v6 = a2[1];
  unsigned int v7 = v5 & v4;
  uint64_t v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (*v8 == *a2 && v10 == v6) {
    return 1;
  }
  int v13 = 1;
  do
  {
    uint64_t v14 = v9 | v10;
    BOOL result = v14 != 0;
    if (!v14) {
      break;
    }
    unsigned int v7 = (v7 + v13) & v4;
    uint64_t v15 = (uint64_t *)(v2 + 24 * v7);
    uint64_t v9 = *v15;
    uint64_t v10 = v15[1];
    ++v13;
  }
  while (v9 != *a2 || v10 != v6);
  return result;
}

_DWORD *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::HistoryItem*>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, a2);
  unsigned int v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v9;
  char v11 = (void *)(v8 + 24 * v10);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (*(_OWORD *)v11 == 0)
  {
LABEL_12:
    *(_OWORD *)char v11 = *(_OWORD *)a2;
    uint64_t v16 = *a3;
    if (*a3) {
      ++*v16;
    }
    BOOL result = (_DWORD *)v11[2];
    v11[2] = v16;
    if (result) {
      BOOL result = WTF::RefCounted<WebCore::HistoryItem>::deref(result);
    }
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *a1;
    if (*a1) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        goto LABEL_22;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
LABEL_22:
      *(void *)a4 = v11;
      *(void *)(a4 + 8) = v20 + 24 * v23;
      *(unsigned char *)(a4 + 16) = 1;
      return result;
    }
    BOOL result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, (uint64_t)v11);
    char v11 = result;
    uint64_t v20 = *a1;
    if (*a1) {
      LODWORD(v23) = *(_DWORD *)(v20 - 4);
    }
    else {
      LODWORD(v23) = 0;
    }
    goto LABEL_22;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v13 != *a2 || v12 != a2[1])
  {
    if (v12 == -1) {
      uint64_t v14 = v11;
    }
    unsigned int v10 = (v10 + v15) & v9;
    char v11 = (void *)(v8 + 24 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    ++v15;
    if (*(_OWORD *)v11 == 0)
    {
      if (v14)
      {
        *uint64_t v14 = 0;
        v14[1] = 0;
        void v14[2] = 0;
        --*(_DWORD *)(*a1 - 16);
        char v11 = v14;
      }
      goto LABEL_12;
    }
  }
  uint64_t v24 = *a1;
  if (*a1) {
    unsigned int v25 = *(_DWORD *)(v24 - 4);
  }
  else {
    unsigned int v25 = 0;
  }
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v24 + 24 * v25;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v26 = *a3;
  if (*a3) {
    ++*v26;
  }
  BOOL result = (_DWORD *)v11[2];
  v11[2] = v26;
  if (result) {
    return WTF::RefCounted<WebCore::HistoryItem>::deref(result);
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    char v11 = 0;
    uint64_t v12 = v6;
    do
    {
      uint64_t v13 = v5 + 24 * v10;
      if (*(void *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          uint64_t v14 = v5 + 24 * v10;
          int v15 = *(_DWORD **)(v14 + 16);
          *(void *)(v14 + 16) = 0;
          if (v15) {
            WTF::RefCounted<WebCore::HistoryItem>::deref(v15);
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v31 = -1640531527;
          __int16 v32 = 0;
          char v33 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v31, (void *)(v5 + 24 * v10));
          int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v17;
            int v21 = (_OWORD *)(v16 + 24 * (v18 & v17));
            int v18 = ++v19 + (v18 & v17);
          }
          while (*v21 != 0);
          uint64_t v22 = v16 + 24 * v20;
          unsigned int v25 = *(_DWORD **)(v22 + 16);
          uint64_t v24 = (void *)(v22 + 16);
          unint64_t v23 = v25;
          void *v24 = 0;
          if (v25) {
            WTF::RefCounted<WebCore::HistoryItem>::deref(v23);
          }
          _OWORD *v21 = *(_OWORD *)v13;
          uint64_t v26 = v5 + 24 * v10;
          uint64_t v27 = *(void *)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          void *v24 = v27;
          __int16 v28 = *(_DWORD **)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          if (v28) {
            WTF::RefCounted<WebCore::HistoryItem>::deref(v28);
          }
          if (v13 == a3) {
            char v11 = v21;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    char v11 = 0;
    BOOL result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    int v5 = WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::hash(a2);
    uint64_t v6 = a2[1];
    unsigned int v7 = v5 & v4;
    uint64_t v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 == *a2 && v10 == v6) {
      return *(void *)(v2 + 24 * v7 + 16);
    }
    int v12 = 1;
    while (v9 | v10)
    {
      unsigned int v7 = (v7 + v12) & v4;
      uint64_t v13 = (uint64_t *)(v2 + 24 * v7);
      uint64_t v9 = *v13;
      uint64_t v10 = v13[1];
      ++v12;
      if (v9 == *a2 && v10 == v6) {
        return *(void *)(v2 + 24 * v7 + 16);
      }
    }
  }
  return 0;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 3 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[2];
  a2[2] = 0;
  *a3 = v4;
  if (*a1)
  {
    int v5 = (void *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    int v5 = 0;
  }
  if (v5 != a2) {
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(a1, a2);
  }
  return a1;
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  BOOL result = (_DWORD *)a2[2];
  a2[2] = 0;
  if (result) {
    BOOL result = WTF::RefCounted<WebCore::HistoryItem>::deref(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebKit::WebBackForwardListCounts>>(unint64_t *a1)
{
  BOOL result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (!v3)
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
    return 0;
  }
  return result;
}

void WebKit::WebCookieCache::~WebCookieCache(WebKit::WebCookieCache *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 5);
  *(void *)uint64_t v3 = 0;
  if (!*(unsigned char *)(v3 + 16) && !*(void *)(v3 + 8)) {
    MEMORY[0x199740C10]();
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    WebCore::NetworkStorageSession::operator delete(v5, 0x128uLL);
  }
  uint64_t v6 = (WTF::StringImpl **)*((void *)this + 2);
  if (v6) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  }
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    *(void *)(v7 + 8) = 0;
    unsigned int v8 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v8)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::WebCookieCache::~WebCookieCache(this, a2);

  JUMPOUT(0x199740C10);
}

unsigned int *WebKit::WebCookieJar::addChangeListener(uint64_t a1, WTF::StringImpl **a2, unsigned int *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 80), 0), (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *((_DWORD *)*a2 + 4);
  if (v8 >= 0x100) {
    unsigned int v9 = v8 >> 8;
  }
  else {
    unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v10 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v7;
    uint64_t v13 = v6 + 24 * (v9 & v7);
    uint64_t v14 = *(WTF **)v13;
    if (*(void *)v13 == -1)
    {
      uint64_t v10 = (void *)(v6 + 24 * v12);
      goto LABEL_13;
    }
    if (!v14) {
      break;
    }
    if (WTF::equal(v14, *a2, (const WTF::StringImpl *)a3)) {
      goto LABEL_27;
    }
LABEL_13:
    unsigned int v9 = i + v12;
  }
  if (v10)
  {
    void *v10 = 0;
    v10[1] = 0;
    void v10[2] = 0;
    --*(_DWORD *)(*v5 - 16);
    uint64_t v13 = (uint64_t)v10;
  }
  WTF::String::operator=((uint64_t *)v13, a2);
  uint64_t v16 = *(unsigned int ***)(v13 + 8);
  *(void *)(v13 + 8) = 0;
  if (v16) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v16, v15);
  }
  *(void *)(v13 + 16) = 0;
  uint64_t v17 = *v5;
  if (*v5) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *v5;
  if (*v5) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21) {
LABEL_26:
    }
      uint64_t v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v5, (WTF::StringImpl **)v13);
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_26;
  }
LABEL_27:
  unint64_t v23 = (uint64_t *)(v13 + 8);
  unsigned int v24 = *(_DWORD *)(v13 + 20);
  unsigned int v25 = *(_DWORD *)(v13 + 16) + 1;
  *(_DWORD *)(v13 + 16) = v25;
  if (v25 <= v24) {
    goto LABEL_55;
  }
  uint64_t v26 = *v23;
  if (!*v23) {
    goto LABEL_50;
  }
  int v27 = *(_DWORD *)(v26 - 4);
  if (!v27)
  {
LABEL_49:
    *(_DWORD *)(v13 + 16) = 0;
    goto LABEL_52;
  }
  int v28 = 0;
  unsigned int v29 = v27 - 1;
  do
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)(v26 + 8 * v29);
    if ((unint64_t)(v31 + 1) >= 2 && !*(void *)(v31 + 8))
    {
      *(void *)(v26 + 8 * v29) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v31);
        WTF::fastFree((WTF *)v31, v15);
      }
      *(void *)(v26 + 8 * v29) = -1;
      ++v28;
    }
    --v29;
  }
  while (v30);
  uint64_t v26 = *v23;
  if (v28)
  {
    *(_DWORD *)(v26 - 16) += v28;
    uint64_t v32 = *v23;
    if (*v23) {
      int v33 = *(_DWORD *)(v32 - 12);
    }
    else {
      int v33 = 0;
    }
    *(_DWORD *)(v32 - 12) = v33 - v28;
    uint64_t v26 = *v23;
  }
  if (!v26)
  {
LABEL_50:
    unsigned int v36 = 0;
    *(_DWORD *)(v13 + 16) = 0;
    goto LABEL_53;
  }
  unsigned int v34 = *(_DWORD *)(v26 - 4);
  if (v34 < 9 || 6 * *(_DWORD *)(v26 - 12) >= v34) {
    goto LABEL_49;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v13 + 8));
  uint64_t v26 = *(void *)(v13 + 8);
  *(_DWORD *)(v13 + 16) = 0;
  if (v26)
  {
LABEL_52:
    unsigned int v36 = *(_DWORD *)(v26 - 12);
    int v37 = 0x7FFFFFFF;
    if (v36 < 0x7FFFFFFF) {
      goto LABEL_53;
    }
  }
  else
  {
    unsigned int v36 = 0;
LABEL_53:
    int v37 = v36;
  }
  *(_DWORD *)(v13 + 20) = 2 * v37;
LABEL_55:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a3 + 2, (uint64_t)a3);
  char v38 = (atomic_uint *)*((void *)a3 + 1);
  atomic_fetch_add(v38, 1u);
  atomic_fetch_add(v38, 1u);
  int v59 = (WTF *)v38;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)(v13 + 8), &v59, (uint64_t)v58);
  BOOL result = (unsigned int *)v59;
  int v59 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    BOOL result = (unsigned int *)WTF::fastFree((WTF *)result, v39);
  }
  if (v38 && atomic_fetch_add(v38, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v38);
    BOOL result = (unsigned int *)WTF::fastFree((WTF *)v38, v39);
  }
  uint64_t v41 = *v23;
  if (!*v23) {
    goto LABEL_82;
  }
  int v42 = *(_DWORD *)(v41 - 4);
  if (!v42)
  {
LABEL_81:
    *(_DWORD *)(v13 + 16) = 0;
LABEL_85:
    unsigned int v50 = *(_DWORD *)(v41 - 12);
    if (v50 >= 0x7FFFFFFF) {
      int v51 = -2;
    }
    else {
      int v51 = 2 * v50;
    }
    *(_DWORD *)(v13 + 20) = v51;
    if (*(_DWORD *)(v41 - 12) <= 1u) {
      goto LABEL_89;
    }
    return result;
  }
  int v43 = 0;
  unsigned int v44 = v42 - 1;
  do
  {
    uint64_t v45 = v44;
    BOOL result = *(unsigned int **)(v41 + 8 * v44);
    if ((unint64_t)result + 1 >= 2 && !*((void *)result + 1))
    {
      *(void *)(v41 + 8 * v44) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        BOOL result = (unsigned int *)WTF::fastFree((WTF *)result, v39);
      }
      *(void *)(v41 + 8 * v44) = -1;
      ++v43;
    }
    --v44;
  }
  while (v45);
  uint64_t v41 = *v23;
  if (v43)
  {
    *(_DWORD *)(v41 - 16) += v43;
    uint64_t v46 = *v23;
    if (*v23) {
      int v47 = *(_DWORD *)(v46 - 12);
    }
    else {
      int v47 = 0;
    }
    *(_DWORD *)(v46 - 12) = v47 - v43;
    uint64_t v41 = *v23;
  }
  if (!v41)
  {
LABEL_82:
    *(_DWORD *)(v13 + 16) = 0;
    goto LABEL_83;
  }
  unsigned int v48 = *(_DWORD *)(v41 - 4);
  if (v48 < 9 || 6 * *(_DWORD *)(v41 - 12) >= v48) {
    goto LABEL_81;
  }
  BOOL result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v13 + 8));
  uint64_t v41 = *(void *)(v13 + 8);
  *(_DWORD *)(v13 + 16) = 0;
  if (v41) {
    goto LABEL_85;
  }
LABEL_83:
  *(_DWORD *)(v13 + 20) = 0;
LABEL_89:
  if (v58[16])
  {
    {
      uint64_t v57 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v57);
    }
    uint64_t v52 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                    + 24);
    uint64_t v53 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v53 = 288;
    *((void *)v53 + 1) = 0;
    *((void *)v53 + 66) = (char *)v53 + 16;
    *((void *)v53 + 67) = 512;
    *((void *)v53 + 68) = 0;
    *((void *)v53 + 70) = 0;
    *((void *)v53 + 69) = 0;
    IPC::Encoder::encodeHeader(v53);
    int v59 = v53;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v53, (uint64_t *)a2);
    IPC::Connection::sendMessageImpl(v52, (uint64_t *)&v59, 1, 0);
    BOOL result = (unsigned int *)v59;
    int v59 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v54);
      return (unsigned int *)WTF::fastFree(v55, v56);
    }
  }
  return result;
}

uint64_t WebKit::WebCookieCache::cookiesAdded(uint64_t result, WTF::StringImpl **a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = (WebKit::WebCookieCache *)result;
    int v7 = *(_DWORD *)(v3 - 8);
    unsigned int v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100) {
      unsigned int v9 = v8 >> 8;
    }
    else {
      unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v9 = i + v11)
    {
      int v11 = v9 & v7;
      BOOL result = *(void *)(v3 + 8 * (v9 & v7));
      if (result != -1)
      {
        if (!result) {
          return result;
        }
        BOOL result = WTF::equal((WTF *)result, *a2, (const WTF::StringImpl *)a3);
        if (result) {
          break;
        }
      }
      ++i;
    }
    uint64_t v12 = a3[3];
    if (v12)
    {
      uint64_t v13 = *(void *)a3;
      uint64_t v14 = 136 * v12;
      do
      {
        WebKit::WebCookieCache::inMemoryStorageSession(v6);
        BOOL result = WebCore::NetworkStorageSession::setCookie();
        v13 += 136;
        v14 -= 136;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t WebKit::WebCookieCache::cookiesDeleted(uint64_t result, WTF::StringImpl **a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = (WebKit::WebCookieCache *)result;
    int v7 = *(_DWORD *)(v3 - 8);
    unsigned int v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100) {
      unsigned int v9 = v8 >> 8;
    }
    else {
      unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v9 = i + v11)
    {
      int v11 = v9 & v7;
      BOOL result = *(void *)(v3 + 8 * (v9 & v7));
      if (result != -1)
      {
        if (!result) {
          return result;
        }
        BOOL result = WTF::equal((WTF *)result, *a2, (const WTF::StringImpl *)a3);
        if (result) {
          break;
        }
      }
      ++i;
    }
    uint64_t v12 = a3[3];
    if (v12)
    {
      uint64_t v13 = *(void *)a3;
      uint64_t v14 = 136 * v12;
      do
      {
        WebKit::WebCookieCache::inMemoryStorageSession(v6);
        int v15 = (void *)WTF::fastMalloc((WTF *)0x10);
        *int v15 = &unk_1EE9F8478;
        uint64_t v16 = v15;
        WebCore::NetworkStorageSession::deleteCookie();
        BOOL result = (uint64_t)v16;
        if (v16) {
          BOOL result = (*(uint64_t (**)(void *))(*v16 + 8))(v16);
        }
        v13 += 136;
        v14 -= 136;
      }
      while (v14);
    }
  }
  return result;
}

void WebKit::WebCookieCache::clear(WebKit::WebCookieCache *this)
{
  uint64_t v2 = (WTF::StringImpl ***)((char *)this + 16);
  uint64_t v4 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 2);
  uint64_t v5 = (WTF::StringImpl **)v3;
  uint64_t v6 = (WTF::StringImpl **)*((void *)this + 2);
  if (v6) {
    int v7 = &v6[*((unsigned int *)v6 - 1)];
  }
  else {
    int v7 = 0;
  }
  if (v7 != v4)
  {
    do
    {
      {
        unsigned int v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v8);
      }
      WebKit::WebCookieJar::removeChangeListener(*(void *)(WebKit::WebProcess::singleton(void)::process + 408), v4, this);
      while (++v4 != v5)
      {
        if ((unint64_t)*v4 + 1 > 1) {
          goto LABEL_10;
        }
      }
      uint64_t v4 = v5;
LABEL_10:
      ;
    }
    while (v4 != v7);
    uint64_t v6 = *v2;
  }
  if (v6)
  {
    void *v2 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v3);
  }
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9)
  {
    WebCore::NetworkStorageSession::operator delete(v9, 0x128uLL);
  }
}

uint64_t WebKit::WebCookieJar::removeChangeListener(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 80);
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 80), a2, a3);
  unsigned int v8 = (uint64_t *)result;
  uint64_t v9 = *(void *)(a1 + 80);
  if (v9) {
    v9 += 24 * *(unsigned int *)(v9 - 4);
  }
  if (v9 != result)
  {
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(result + 8, a3);
    uint64_t result = WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v8 + 1);
    if (result)
    {
      if (*v6)
      {
        uint64_t v10 = *v6 + 24 * *(unsigned int *)(*v6 - 4);
        if ((uint64_t *)v10 == v8) {
          goto LABEL_12;
        }
      }
      else
      {
        if (!v8)
        {
LABEL_12:
          {
            uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v12);
          }
          uint64_t v11 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                          + 24);
          uint64_t v13 = a2;
          return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::UnsubscribeFromCookieChangeNotifications>(v11, (uint64_t **)&v13, 0, 1, 0);
        }
        uint64_t v10 = 0;
      }
      if ((uint64_t *)v10 != v8) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v6, (WTF::StringImpl *)v8);
      }
      goto LABEL_12;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebCookieCache::clearForHost(WebKit::WebCookieCache *this, WTF::StringImpl **a2)
{
  v14[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t result = (WTF::StringImpl *)WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take(&v13, (uint64_t *)this + 2, a2);
  uint64_t v4 = v13;
  if (v13)
  {
    WebKit::WebCookieCache::inMemoryStorageSession(this);
    *(_DWORD *)v4 += 2;
    v14[0] = v4;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v12, (_DWORD **)v14, 1uLL);
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v5 = &unk_1EE9F84A0;
    uint64_t v11 = v5;
    WebCore::NetworkStorageSession::deleteCookiesForHostnames();
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v6);
    unsigned int v8 = v14[0];
    v14[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        unsigned int v8 = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = WebKit::WebProcess::singleton(v8);
    WebKit::WebCookieJar::removeChangeListener(*(void *)(v9 + 408), &v13, this);
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take(WTF::StringImpl **a1, uint64_t *a2, WTF::StringImpl **a3)
{
  uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a2, a3, (const WTF::StringImpl *)a3);
  uint64_t v6 = *a2;
  if (*a2) {
    v6 += 8 * *(unsigned int *)(v6 - 4);
  }
  if ((WTF::StringImpl **)v6 == result)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = *result;
    WTF::StringImpl *result = 0;
    uint64_t result = (WTF::StringImpl **)WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(a2, result);
  }
  *a1 = v7;
  return result;
}

uint64_t WebKit::WebCookieJar::isEligibleForCache(WebKit::WebCookieJar *this, WebKit::WebFrame *a2, const WTF::URL *a3, const WTF::URL *a4)
{
  uint64_t v4 = *((void *)this + 3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    return 0;
  }
  uint64_t v11 = *(void **)(*(void *)(v7 + 48) + 16);
  if (((*(uint64_t (**)(void *, WebKit::WebFrame *, const WTF::URL *, const WTF::URL *))(*v11 + 1368))(v11, a2, a3, a4) & 1) != 0|| !*(void *)(v11[2] + 8))
  {
    return 0;
  }
  uint64_t v12 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v12 + 1368))(v12);
  uint64_t v13 = *(void *)(v12[2] + 8);
  uint64_t v14 = v13 ? v13 - 16 : 0;
  if (!*(void *)(v14 + 48)) {
    return 0;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v24, a3);
  if (!v24) {
    return 0;
  }
  if (*((_DWORD *)v24 + 1) && (MEMORY[0x19972E990]() & 1) == 0)
  {
    uint64_t v17 = *((void *)this + 3);
    if (v17 && (uint64_t v18 = *(void *)(v17 + 8)) != 0 && *(void *)(*(void *)(v18 + 128) + 8) == v18)
    {
      uint64_t v16 = 1;
    }
    else
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v23, a2);
      uint64_t v16 = WTF::equal(v23, v24, v19);
      int v20 = v23;
      unint64_t v23 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v15);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v21 = v24;
  unsigned int v24 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v15);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v16;
}

void WebKit::WebCookieJar::cookies(WebKit::WebCookieJar *this@<X0>, WebCore::Document *a2@<X1>, const WTF::URL *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v5 = *((void *)a2 + 68);
  if (!v5 || (uint64_t v7 = *(void *)(v5 + 8)) == 0 || (WebKit::WebFrame::fromCoreFrame(v7, &v98), (v10 = v98) == 0))
  {
    *a4 = 0;
    return;
  }
  uint64_t v11 = *(void *)(v98 + 24);
  if (!v11
    || (uint64_t v12 = *(void *)(v11 + 8)) == 0
    || (uint64_t v13 = *(void *)(v12 + 24)) == 0
    || (uint64_t v14 = *(void *)(v13 + 8)) == 0
    || (int v15 = *(void **)(*(void *)(v14 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) != 0)
    || !*(void *)(v15[2] + 8))
  {
    *a4 = 0;
    goto LABEL_127;
  }
  uint64_t v16 = WebCore::CookieJar::sameSiteInfo();
  __int16 v96 = v16;
  char v97 = BYTE2(v16);
  char v95 = 0;
  uint64_t v17 = (uint64_t *)((char *)a2 + 1040);
  if (WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v10, (WebCore::Document *)((char *)a2 + 1040), a3, &v95))
  {
    WebKit::WebCookieJar::cookiesInPartitionedCookieStorage(a2, a3, (uint64_t)this, &v96, a4);
    goto LABEL_127;
  }
  char shouldIncludeSecureCookies = WebCore::CookieJar::shouldIncludeSecureCookies(a2, a3, v18);
  uint64_t v20 = *(void *)(v10 + 80);
  uint64_t v21 = *(void *)(v10 + 88);
  v94[0] = v20;
  v94[1] = v21;
  unint64_t v22 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v10 + 24) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v22 + 1368))(v22);
  uint64_t v24 = *(void *)(v22[2] + 8);
  if (v24) {
    uint64_t v25 = v24 - 16;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v93 = *(void *)(v25 + 40);
  if (!WebKit::WebCookieJar::isEligibleForCache((WebKit::WebCookieJar *)v10, (WebKit::WebFrame *)v17, a3, v23))
  {
    {
      unint64_t v85 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v85);
    }
    uint64_t v36 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                    + 24);
    char v37 = v95;
    shouldRelaxThirdPartyCookieBlocking = (unsigned int *)WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v10, v38);
    v108 = 0;
    IPC::Connection::createSyncMessageEncoder(3610, 0, (uint64_t *)&v108, v114);
    unsigned int v29 = v114[0];
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v114[0], v17);
    IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v29, (char *)&v96);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, (uint64_t *)a3);
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v29, v94);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v29, &v93);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v29, shouldIncludeSecureCookies);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v29, v37);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v29, (char)shouldRelaxThirdPartyCookieBlocking);
    IPC::Connection::sendSyncMessage(v36, (uint64_t)v108, (uint64_t *)v114, 0, (uint64_t)&v105, INFINITY);
    if (v106)
    {
      if (v106 != 1) {
        goto LABEL_137;
      }
      LOBYTE(v99) = (_BYTE)v105;
      int v39 = 1;
      int v103 = 1;
      int v40 = 1;
    }
    else
    {
      LOBYTE(v111) = 0;
      LOBYTE(v113) = 0;
      IPC::Decoder::operator>><std::tuple<WTF::String,BOOL>>(v105, (uint64_t)&v111);
      if ((_BYTE)v113)
      {
        int v40 = v106;
        if (v106) {
          goto LABEL_137;
        }
        int v39 = 0;
        int v42 = v105;
        unint64_t v105 = 0;
        a3 = v111;
        unsigned int v99 = v42;
        uint64_t v100 = v111;
        LOBYTE(v101) = v112;
        int v103 = 0;
      }
      else
      {
        LOBYTE(v99) = 13;
        int v39 = 1;
        int v103 = 1;
        int v40 = v106;
        if (v106 == -1) {
          goto LABEL_43;
        }
      }
    }
    ((void (*)(const WTF::URL **, IPC::Decoder **))off_1EE9F8458[v40])(&v111, &v105);
LABEL_43:
    unsigned int v48 = v114[0];
    v114[0] = 0;
    if (v48)
    {
      IPC::Encoder::~Encoder(v48, v41);
      WTF::fastFree(v52, v53);
      if (v39) {
        goto LABEL_58;
      }
    }
    else if (v39)
    {
      goto LABEL_58;
    }
    uint64_t v100 = 0;
    if (a3)
    {
      int v49 = *(_DWORD *)a3;
      *(_DWORD *)a3 += 2;
      *a4 = a3;
      if (v49)
      {
        int v39 = 0;
        *(_DWORD *)a3 = v49;
      }
      else
      {
        WTF::StringImpl::destroy(a3, (WTF::StringImpl *)v41);
        int v39 = v103;
        if (v103 == -1) {
          goto LABEL_127;
        }
      }
LABEL_48:
      ((void (*)(const WTF::URL **, IPC::Decoder **))off_1EE9F83C0[v39])(&v111, &v99);
      goto LABEL_127;
    }
LABEL_58:
    *a4 = 0;
    goto LABEL_48;
  }
  uint64_t v91 = (const WTF::URL *)v21;
  uint64_t v92 = v20;
  uint64_t v26 = WTF::URL::host(a3);
  unsigned int v29 = (WebKit::WebCookieJar *)((char *)this + 48);
  uint64_t v28 = *((void *)this + 6);
  shouldRelaxThirdPartyCookieBlocking = (unsigned int *)((char *)this + 32);
  if (v28)
  {
    unsigned int v77 = (unsigned __int8 *)v26;
    uint64_t v78 = v27;
    unsigned int v90 = *(_DWORD *)(v28 - 8);
    int v79 = WTF::StringViewHashTranslator::hash(v26, v27);
    for (int i = 0; ; v79 = i + v81)
    {
      int v81 = v79 & v90;
      uint64_t v82 = (uint64_t *)(v28 + 8 * (v79 & v90));
      if (*v82 != -1)
      {
        int v88 = v81;
        int v89 = i;
        if (!*v82) {
          break;
        }
        BOOL v83 = WTF::StringViewHashTranslator::equal(v82, v77, v78);
        int v81 = v88;
        int i = v89;
        if (v83)
        {
          if (!*(void *)(*((void *)this + 9) + 8)) {
            goto LABEL_126;
          }
          WTF::URL::host(a3);
          if ((v84 & 0xFF00000000) != 0) {
            WTF::String::String();
          }
          else {
            WTF::String::String();
          }
          int v32 = 1;
          goto LABEL_23;
        }
      }
      ++i;
    }
  }
  WTF::URL::host(a3);
  if ((v31 & 0xFF00000000) == 0) {
    goto LABEL_138;
  }
  WTF::String::String();
  while (1)
  {
    {
      uint64_t v86 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v86);
    }
    WebKit::WebCookieJar::addChangeListener(*(void *)(WebKit::WebProcess::singleton(void)::process + 408), &v104, shouldRelaxThirdPartyCookieBlocking);
    int v32 = 0;
LABEL_23:
    {
      v87 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v87);
    }
    uint64_t v33 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                    + 24);
    v114[0] = 0;
    IPC::Connection::createSyncMessageEncoder(3611, 0, (uint64_t *)v114, &v110);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v110, (uint64_t *)a3);
    IPC::Connection::sendSyncMessage(v33, (uint64_t)v114[0], (uint64_t *)&v110, 0, (uint64_t)&v108, INFINITY);
    if (v109)
    {
      if (v109 == 1)
      {
        LOBYTE(v99) = (_BYTE)v108;
        int v34 = 1;
        int v103 = 1;
        int v35 = 1;
        goto LABEL_53;
      }
      goto LABEL_137;
    }
    LOBYTE(v105) = 0;
    char v107 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v108, &v105);
    if (!v107)
    {
      LOBYTE(v99) = 13;
      int v34 = 1;
      int v103 = 1;
      goto LABEL_52;
    }
    if (!v109) {
      break;
    }
LABEL_137:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_138:
    WTF::String::String();
  }
  uint64_t v45 = v108;
  v108 = 0;
  this = v105;
  unint64_t v105 = 0;
  int v46 = v106;
  LODWORD(v33) = HIDWORD(v106);
  uint64_t v106 = 0;
  unint64_t v111 = 0;
  uint64_t v112 = 0;
  unsigned int v99 = v45;
  uint64_t v100 = this;
  uint64_t v113 = 0;
  int v101 = v46;
  int v102 = v33;
  int v103 = 0;
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v43);
  int v47 = v111;
  unint64_t v111 = 0;
  if (v47)
  {
    IPC::Decoder::~Decoder(v47);
    WTF::fastFree(v75, v76);
  }
  if (v107) {
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v43);
  }
  int v34 = 0;
LABEL_52:
  int v35 = v109;
  if (v109 == -1) {
    goto LABEL_54;
  }
LABEL_53:
  ((void (*)(const WTF::URL **, IPC::Decoder **))off_1EE9F8458[v35])(&v111, &v108);
LABEL_54:
  unsigned int v50 = v110;
  v110 = 0;
  if (v50)
  {
    IPC::Encoder::~Encoder(v50, v43);
    WTF::fastFree(v54, v55);
    if (v34) {
      goto LABEL_56;
    }
  }
  else if (v34)
  {
LABEL_56:
    *a4 = 0;
    LODWORD(v33) = 1;
    int v51 = 1;
    goto LABEL_119;
  }
  if (!v32)
  {
    while (*(void *)v29 && *(_DWORD *)(*(void *)v29 - 12) >= 5u)
    {
      uint64_t v71 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::random(v29);
      WebKit::WebCookieCache::clearForHost((WebKit::WebCookieCache *)shouldRelaxThirdPartyCookieBlocking, v71);
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v29, &v104, v44, (uint64_t)&v111);
    if (v33)
    {
      uint64_t v33 = 136 * v33;
      do
      {
        WebKit::WebCookieCache::inMemoryStorageSession((WebKit::WebCookieCache *)shouldRelaxThirdPartyCookieBlocking);
        WebCore::NetworkStorageSession::setCookie();
        this = (WebKit::WebCookieJar *)((char *)this + 136);
        v33 -= 136;
      }
      while (v33);
    }
    goto LABEL_118;
  }
  unint64_t v111 = 0;
  uint64_t v112 = 0;
  LODWORD(v113) = 0;
  BYTE4(v113) = 1;
  if (!v33) {
    goto LABEL_107;
  }
  uint64_t v56 = 136 * v33;
  while (2)
  {
    uint64_t v57 = *(void *)this;
    if (*(void *)this)
    {
      uint64_t v58 = *(unsigned int *)(v57 + 4);
      if (v58)
      {
        if (!*((unsigned char *)this + 56))
        {
          if (v113)
          {
            WTF::StringBuilder::append();
            if (v113 || v112)
            {
              uint64_t v57 = *(void *)this;
              if (*(void *)this)
              {
                uint64_t v58 = *(unsigned int *)(v57 + 4);
                goto LABEL_71;
              }
              uint64_t v59 = 0;
              unint64_t v60 = 0x100000000;
LABEL_72:
              WTF::StringBuilder::append((uint64_t)&v111, v59, v60);
LABEL_77:
              LOBYTE(v105) = 61;
              if (!v112
                || ((uint64_t v62 = v113, v113 < *(_DWORD *)(v112 + 4))
                  ? (BOOL v63 = v111 == 0)
                  : (BOOL v63 = 0),
                    !v63))
              {
                WTF::StringBuilder::append();
                goto LABEL_85;
              }
              int v64 = *(_DWORD *)(v112 + 16);
              uint64_t v65 = *(void *)(v112 + 8);
              LODWORD(v113) = v113 + 1;
              if ((v64 & 4) != 0)
              {
                *(unsigned char *)(v65 + v62) = 61;
LABEL_85:
                char v66 = (uint64_t *)((char *)this + 8);
                if (!v113 && !v112)
                {
                  WTF::String::operator=((uint64_t *)&v111, (WTF::StringImpl **)this + 1);
                  uint64_t v67 = *v66;
                  if (*v66) {
                    LODWORD(v67) = *(_DWORD *)(v67 + 4);
                  }
                  LODWORD(v113) = v67;
                  goto LABEL_90;
                }
              }
              else
              {
                *(_WORD *)(v65 + 2 * v62) = 61;
                char v66 = (uint64_t *)((char *)this + 8);
              }
              uint64_t v68 = *v66;
              if (*v66)
              {
                uint64_t v69 = *(void *)(v68 + 8);
                unint64_t v70 = *(unsigned int *)(v68 + 4) | ((unint64_t)((*(_DWORD *)(v68 + 16) >> 2) & 1) << 32);
              }
              else
              {
                uint64_t v69 = 0;
                unint64_t v70 = 0x100000000;
              }
              WTF::StringBuilder::append((uint64_t)&v111, v69, v70);
              goto LABEL_90;
            }
          }
          else if (v112)
          {
LABEL_71:
            uint64_t v59 = *(void *)(v57 + 8);
            unint64_t v60 = v58 | ((unint64_t)((*(_DWORD *)(v57 + 16) >> 2) & 1) << 32);
            goto LABEL_72;
          }
          WTF::String::operator=((uint64_t *)&v111, (WTF::StringImpl **)this);
          uint64_t v61 = *(void *)this;
          if (*(void *)this) {
            LODWORD(v61) = *(_DWORD *)(v61 + 4);
          }
          LODWORD(v113) = v61;
          goto LABEL_77;
        }
      }
    }
LABEL_90:
    this = (WebKit::WebCookieJar *)((char *)this + 136);
    v56 -= 136;
    if (v56) {
      continue;
    }
    break;
  }
  uint64_t v72 = v111;
  if (v111) {
    goto LABEL_108;
  }
LABEL_107:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v111);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v111);
  uint64_t v72 = v111;
  if (v111) {
LABEL_108:
  }
    *(_DWORD *)v72 += 2;
  *a4 = v72;
  long long v73 = (WTF::StringImpl *)v112;
  uint64_t v112 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v43);
      uint64_t v72 = v111;
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  unint64_t v111 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2) {
      WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v43);
    }
    else {
      *(_DWORD *)v72 -= 2;
    }
  }
  LODWORD(v33) = 1;
LABEL_118:
  int v51 = v103;
  if (v103 != -1) {
LABEL_119:
  }
    ((void (*)(const WTF::URL **, IPC::Decoder **))off_1EE9F8388[v51])(&v111, &v99);
  long long v74 = v104;
  uint64_t v104 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 != 2)
    {
      *(_DWORD *)v74 -= 2;
      goto LABEL_123;
    }
    WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v43);
    if (!v33)
    {
LABEL_126:
      WebKit::WebCookieCache::inMemoryStorageSession((WebKit::WebCookieCache *)shouldRelaxThirdPartyCookieBlocking);
      unsigned int v99 = (IPC::Decoder *)v92;
      uint64_t v100 = v91;
      LOBYTE(v101) = 1;
      WebCore::NetworkStorageSession::cookiesForDOM();
      *a4 = v111;
    }
  }
  else
  {
LABEL_123:
    if (!v33) {
      goto LABEL_126;
    }
  }
LABEL_127:
  CFRelease(*(CFTypeRef *)(v10 + 8));
}

uint64_t WebKit::WebFrame::fromCoreFrame@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 144))
  {
    uint64_t v3 = *(void **)(a1 + 264);
  }
  else
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 280) + 16);
    uint64_t result = (*(uint64_t (**)(void *))(*v3 + 1072))(v3);
    if (result)
    {
      uint64_t v5 = 0;
      goto LABEL_4;
    }
  }
  uint64_t v5 = v3[2];
  uint64_t result = (uint64_t)CFRetain(*(CFTypeRef *)(v5 + 8));
LABEL_4:
  *a2 = v5;
  return result;
}

uint64_t WebKit::shouldBlockCookies(WebCore::DeprecatedGlobalSettings *a1, const WTF::URL *a2, const WTF::URL *a3, unsigned char *a4)
{
  if (!*(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared(a1) + 19)) {
    return 0;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v23, a2);
  if (!v23) {
    return 0;
  }
  if (*((_DWORD *)v23 + 1))
  {
    if ((MEMORY[0x19972E990]() & 1) == 0)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v22, a3);
      if (v22)
      {
        if (*((_DWORD *)v22 + 1))
        {
          if ((MEMORY[0x19972E990]() & 1) == 0 && (WTF::equal(v23, v22, v10) & 1) == 0)
          {
            if (!a1
              || !*(unsigned char *)(WebKit::WebFrame::localFrameLoaderClient(a1) + 80)
              && ((uint64_t v11 = *((void *)a1 + 3)) == 0
               || (uint64_t v12 = *(void *)(v11 + 8)) == 0
               || (uint64_t v13 = *(void *)(v12 + 24)) == 0
               || (uint64_t v14 = *(void *)(v13 + 8)) == 0
               || (int v15 = *(void **)(*(void *)(v14 + 48) + 16),
                   ((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) != 0)
               || (uint64_t v16 = *(void *)(v15[2] + 8)) == 0
               || (WebKit::WebPage::hasPageLevelStorageAccess((WebKit::WebPage *)(v16 - 16), &v23, &v22) & 1) == 0
               && ((uint64_t v17 = *(void *)(v16 + 32)) == 0 || !*(unsigned char *)(v17 + 1683))))
            {
              {
                uint64_t v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                WebKit::WebProcess::WebProcess(v21);
              }
              uint64_t v9 = 1;
              if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 680)) {
                goto LABEL_26;
              }
              *a4 = 1;
            }
          }
        }
        uint64_t v9 = 0;
LABEL_26:
        uint64_t v18 = v22;
        unint64_t v22 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v8);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        goto LABEL_30;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_30:
  uint64_t v19 = v23;
  unint64_t v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v8);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  return v9;
}

BOOL WebKit::shouldRelaxThirdPartyCookieBlocking(WebKit *this, const WebKit::WebFrame *a2)
{
  if (!this) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void **)(*(void *)(v5 + 48) + 16);
  if ((*(uint64_t (**)(void *, const WebKit::WebFrame *))(*v6 + 1368))(v6, a2)) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6[2] + 8);
  if (!v7) {
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v7 - 8));
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8) {
    BOOL v9 = *(unsigned __int8 *)(v8 + 1683) != 0;
  }
  else {
    BOOL v9 = 0;
  }
  CFRelease(*(CFTypeRef *)(v7 - 8));
  return v9;
}

void WebKit::WebCookieJar::setCookies(WebKit::WebCookieJar *this, WebCore::Document *a2, const WTF::URL *a3, const WTF::String *a4)
{
  uint64_t v4 = *((void *)a2 + 68);
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    if (v6)
    {
      WebKit::WebFrame::fromCoreFrame(v6, &v51);
      uint64_t v10 = v51;
      if (v51)
      {
        uint64_t v11 = *(void *)(v51 + 24);
        if (v11)
        {
          uint64_t v12 = *(void *)(v11 + 8);
          if (v12)
          {
            uint64_t v13 = *(void *)(v12 + 24);
            if (v13)
            {
              uint64_t v14 = *(void *)(v13 + 8);
              if (v14)
              {
                int v15 = *(void **)(*(void *)(v14 + 48) + 16);
                if (((*(uint64_t (**)(void *))(*v15 + 1368))(v15) & 1) == 0)
                {
                  if (*(void *)(v15[2] + 8))
                  {
                    uint64_t v16 = WebCore::CookieJar::sameSiteInfo();
                    __int16 v49 = v16;
                    char v50 = BYTE2(v16);
                    char v48 = 0;
                    uint64_t v17 = (WebCore::Document *)((char *)a2 + 1040);
                    if (WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v10, (WebCore::Document *)((char *)a2 + 1040), a3, &v48))
                    {
                      WebKit::WebCookieJar::setCookiesInPartitionedCookieStorage((uint64_t)this, a2, a3, &v49, (uint64_t)a4);
                    }
                    else
                    {
                      uint64_t v19 = *(IPC::Encoder **)(v10 + 80);
                      uint64_t v18 = *(IPC::Encoder **)(v10 + 88);
                      v47[0] = (uint64_t)v19;
                      v47[1] = (uint64_t)v18;
                      uint64_t v20 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v10 + 24) + 8)
                                                                           + 24)
                                                               + 8)
                                                   + 48)
                                       + 16);
                      (*(void (**)(void *))(*v20 + 1368))(v20);
                      uint64_t v22 = *(void *)(v20[2] + 8);
                      if (v22) {
                        uint64_t v23 = v22 - 16;
                      }
                      else {
                        uint64_t v23 = 0;
                      }
                      uint64_t v46 = *(void *)(v23 + 40);
                      if (WebKit::WebCookieJar::isEligibleForCache((WebKit::WebCookieJar *)v10, v17, a3, v21))
                      {
                        WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v10, v24);
                        uint64_t v25 = WTF::URL::host(a3);
                        uint64_t v27 = *((void *)this + 6);
                        if (v27)
                        {
                          int v42 = (WebKit::WebCookieJar *)((char *)this + 32);
                          unsigned int v45 = *(_DWORD *)(v27 - 8);
                          uint64_t v43 = v26;
                          unsigned int v44 = (unsigned __int8 *)v25;
                          int v37 = WTF::StringViewHashTranslator::hash(v25, v26);
                          for (i = 0; ; int v37 = i + v39)
                          {
                            int v39 = v37 & v45;
                            int v40 = (uint64_t *)(v27 + 8 * (v37 & v45));
                            if (*v40 != -1)
                            {
                              if (!*v40) {
                                goto LABEL_17;
                              }
                              if (WTF::StringViewHashTranslator::equal(v40, v44, v43)) {
                                break;
                              }
                            }
                            ++i;
                          }
                          WebKit::WebCookieCache::inMemoryStorageSession(v42);
                          v52[0] = v19;
                          v52[1] = v18;
                          char v53 = 1;
                          WebCore::NetworkStorageSession::setCookiesFromDOM();
                        }
                      }
LABEL_17:
                      {
                        uint64_t v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                        WebKit::WebProcess::WebProcess(v41);
                      }
                      uint64_t v28 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                                      + 24);
                      char v29 = v48;
                      char shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v10, v30);
                      int v32 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                      *(_WORD *)int v32 = 282;
                      *((void *)v32 + 1) = 0;
                      *((void *)v32 + 66) = (char *)v32 + 16;
                      *((void *)v32 + 67) = 512;
                      *((void *)v32 + 68) = 0;
                      *((void *)v32 + 70) = 0;
                      *((void *)v32 + 69) = 0;
                      IPC::Encoder::encodeHeader(v32);
                      v52[0] = v32;
                      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v32, (uint64_t *)v17);
                      IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v32, (char *)&v49);
                      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v32, (uint64_t *)a3);
                      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v32, v47);
                      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v32, &v46);
                      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v32, v29);
                      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v32, (uint64_t *)a4);
                      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v32, shouldRelaxThirdPartyCookieBlocking);
                      IPC::Connection::sendMessageImpl(v28, (uint64_t *)v52, 0, 0);
                      int v34 = v52[0];
                      v52[0] = 0;
                      if (v34)
                      {
                        IPC::Encoder::~Encoder(v34, v33);
                        WTF::fastFree(v35, v36);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        CFRelease(*(CFTypeRef *)(v10 + 8));
      }
    }
  }
}

uint64_t WebKit::WebCookieJar::cookiesAdded(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 80), a2, a3);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7) {
    v7 += 24 * *(unsigned int *)(v7 - 4);
  }
  if (v7 != result)
  {
    uint64_t v8 = (uint64_t *)(result + 8);
    BOOL v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *BOOL v9 = &unk_1EE9F84C8;
    v9[1] = a2;
    v9[2] = a3;
    uint64_t v10 = v9;
    WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v8, &v10);
    uint64_t result = (uint64_t)v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, void *a2)
{
  BOOL v9 = 0;
  uint64_t v10 = 0;
  WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v9, (void **)a1);
  if (HIDWORD(v10))
  {
    uint64_t v5 = v9;
    uint64_t v6 = 8 * HIDWORD(v10);
    do
    {
      if (*v5)
      {
        if (*(void *)(*v5 + 8))
        {
          uint64_t v11 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v11))
          {
            if (*v5) {
              uint64_t v7 = *(void *)(*v5 + 8);
            }
            else {
              uint64_t v7 = 0;
            }
            (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v7);
          }
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
}

uint64_t WebKit::WebCookieJar::cookiesDeleted(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 80), a2, a3);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7) {
    v7 += 24 * *(unsigned int *)(v7 - 4);
  }
  if (v7 != result)
  {
    uint64_t v8 = (uint64_t *)(result + 8);
    BOOL v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *BOOL v9 = &unk_1EE9F84F0;
    v9[1] = a2;
    v9[2] = a3;
    uint64_t v10 = v9;
    WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v8, &v10);
    uint64_t result = (uint64_t)v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void WebKit::WebCookieJar::clearCache(WebKit::WebCookieJar *this)
{
}

WTF::StringImpl *WebKit::WebCookieJar::clearCacheForHost(WebKit::WebCookieJar *this, WTF::StringImpl **a2)
{
  return WebKit::WebCookieCache::clearForHost((WebKit::WebCookieJar *)((char *)this + 32), a2);
}

BOOL WebKit::WebCookieJar::cookiesEnabled(WebKit::WebCookieJar *this, WebCore::Document *a2)
{
  uint64_t v2 = *((void *)a2 + 68);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      WebKit::WebFrame::fromCoreFrame(v3, &v49);
      uint64_t v5 = (CFTypeRef *)v49;
      if (v49)
      {
        uint64_t v6 = *(void *)(v49 + 24);
        if (v6
          && (uint64_t v7 = *(void *)(v6 + 8)) != 0
          && (uint64_t v8 = *(void *)(v7 + 24)) != 0
          && (uint64_t v9 = *(void *)(v8 + 8)) != 0
          && (uint64_t v10 = *(void **)(*(void *)(v9 + 48) + 16),
              ((*(uint64_t (**)(void *))(*v10 + 1368))(v10) & 1) == 0)
          && *(void *)(v10[2] + 8))
        {
          char v48 = 0;
          uint64_t v11 = (WTF::StringImpl **)((char *)a2 + 1000);
          BOOL v12 = 0;
          if ((WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v5, (WebCore::Document *)((char *)a2 + 1040), (WebCore::Document *)((char *)a2 + 1000), &v48) & 1) == 0)
          {
            if (v48)
            {
              unsigned int v13 = *((unsigned __int16 *)a2 + 1772);
              if (v13 > 0xFF)
              {
LABEL_65:
                BOOL v12 = v13 != 0;
                goto LABEL_66;
              }
              uint64_t v14 = *((void *)a2 + 68);
              if (!v14
                || (uint64_t v15 = *(void *)(v14 + 8)) == 0
                || (WebKit::WebFrame::fromCoreFrame(v15, &v62), (uint64_t v16 = v62) == 0))
              {
                LOWORD(v13) = 0;
LABEL_64:
                *((_WORD *)a2 + 1772) = v13 | 0x100;
                goto LABEL_65;
              }
              uint64_t v17 = *(void *)(v62 + 24);
              if (!v17
                || (uint64_t v18 = *(void *)(v17 + 8)) == 0
                || (uint64_t v19 = *(void *)(v18 + 24)) == 0
                || (uint64_t v20 = *(void *)(v19 + 8)) == 0
                || (uint64_t v21 = *(void **)(*(void *)(v20 + 48) + 16),
                    ((*(uint64_t (**)(void *))(*v21 + 1368))(v21) & 1) != 0)
                || !*(void *)(v21[2] + 8)
                || (uint64_t v23 = *v11) == 0)
              {
                LOWORD(v13) = 0;
LABEL_63:
                CFRelease(*(CFTypeRef *)(v16 + 8));
                goto LABEL_64;
              }
              int v24 = *(_DWORD *)v23;
              *(_DWORD *)v23 += 2;
              uint64_t v59 = v23;
              long long v25 = *((_OWORD *)a2 + 64);
              long long v60 = *((_OWORD *)a2 + 63);
              long long v61 = v25;
              if (!*((_DWORD *)v23 + 1))
              {
                LOWORD(v13) = 0;
                uint64_t v59 = 0;
LABEL_60:
                if (v24) {
                  *(_DWORD *)uint64_t v23 = v24;
                }
                else {
                  WTF::StringImpl::destroy(v23, v22);
                }
                goto LABEL_63;
              }
              long long v57 = *(_OWORD *)(v16 + 80);
              char v58 = 1;
              uint64_t v26 = *(void *)(v16 + 24);
              if (v26
                && (uint64_t v27 = *(void *)(v26 + 8)) != 0
                && (uint64_t v28 = *(void *)(v27 + 24)) != 0
                && (uint64_t v29 = *(void *)(v28 + 8)) != 0
                && (uint64_t v30 = *(void **)(*(void *)(v29 + 48) + 16),
                    ((*(uint64_t (**)(void *))(*v30 + 1368))(v30) & 1) == 0)
                && *(void *)(v30[2] + 8))
              {
                uint64_t v31 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v16 + 24) + 8) + 24)
                                                         + 8)
                                             + 48)
                                 + 16);
                (*(void (**)(void *))(*v31 + 1368))(v31);
                uint64_t v32 = *(void *)(v31[2] + 8);
                if (v32) {
                  uint64_t v33 = v32 - 16;
                }
                else {
                  uint64_t v33 = 0;
                }
                uint64_t v55 = *(void *)(v33 + 40);
                uint64_t v56 = 1;
              }
              else
              {
                LOBYTE(v55) = 0;
                LOBYTE(v56) = 0;
              }
              {
                uint64_t v34 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                                + 24);
                BOOL shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v16, v35);
                v50[0] = (char *)a2 + 1040;
                v50[1] = &v59;
                v50[2] = &v57;
                v50[3] = &v55;
                BOOL v51 = shouldRelaxThirdPartyCookieBlocking;
                uint64_t v67 = 0;
                IPC::Connection::createSyncMessageEncoder(3609, 0, &v67, &v66);
                IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,0ul,1ul,2ul,3ul,4ul>(v66, (uint64_t)v50);
                IPC::Connection::sendSyncMessage(v34, v67, (uint64_t *)&v66, 0, (uint64_t)&v64, INFINITY);
                if (v65)
                {
                  if (v65 == 1)
                  {
                    int v37 = 0;
                    LOBYTE(v52) = (_BYTE)v64;
                    int v38 = 1;
                    int v54 = 1;
                    int v39 = 1;
                    goto LABEL_49;
                  }
                }
                else
                {
                  __int16 v63 = 0;
                  IPC::Decoder::operator>><std::tuple<BOOL>>(v64, &v63);
                  if (!HIBYTE(v63))
                  {
                    int v37 = 0;
                    LOBYTE(v52) = 13;
                    int v38 = 1;
                    int v54 = 1;
                    int v39 = v65;
                    if (v65 == -1)
                    {
LABEL_50:
                      int v42 = v66;
                      char v66 = 0;
                      if (v42)
                      {
                        IPC::Encoder::~Encoder(v42, v40);
                        WTF::fastFree(v45, v46);
                      }
                      if (v38) {
                        BOOL v43 = 1;
                      }
                      else {
                        BOOL v43 = v37 == 0;
                      }
                      LOWORD(v13) = !v43;
                      ((void (*)(void *, uint64_t **))off_1EE9F83D0[v38])(v50, &v52);
                      uint64_t v23 = v59;
                      uint64_t v59 = 0;
                      if (!v23) {
                        goto LABEL_63;
                      }
                      int v24 = *(_DWORD *)v23 - 2;
                      goto LABEL_60;
                    }
LABEL_49:
                    ((void (*)(__int16 *, uint64_t **))off_1EE9F8458[v39])(&v63, &v64);
                    goto LABEL_50;
                  }
                  int v39 = v65;
                  if (!v65)
                  {
                    int v38 = 0;
                    uint64_t v41 = v64;
                    int v64 = 0;
                    int v37 = v63;
                    uint64_t v52 = v41;
                    char v53 = v63;
                    int v54 = 0;
                    goto LABEL_49;
                  }
                }
                std::__throw_bad_variant_access[abi:sn180100]();
              }
              int v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              WebKit::WebProcess::WebProcess(v47);
            }
            BOOL v12 = 1;
          }
        }
        else
        {
          BOOL v12 = 0;
        }
LABEL_66:
        CFRelease(v5[1]);
        return v12;
      }
    }
  }
  return 0;
}

void WebKit::WebCookieJar::remoteCookiesEnabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a2 + 544);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0)
  {
    uint64_t v6 = 0;
LABEL_4:
    char v7 = 1;
    goto LABEL_5;
  }
  WebKit::WebFrame::fromCoreFrame(v5, &v40);
  uint64_t v6 = v40;
  if (!v40) {
    goto LABEL_4;
  }
  uint64_t v10 = *(void *)(v40 + 24);
  if (!v10
    || (uint64_t v11 = *(void *)(v10 + 8)) == 0
    || (uint64_t v12 = *(void *)(v11 + 24)) == 0
    || (uint64_t v13 = *(void *)(v12 + 8)) == 0
    || (uint64_t v14 = *(void **)(*(void *)(v13 + 48) + 16),
        uint64_t v15 = (*(uint64_t (**)(void *))(*v14 + 1368))(v14),
        (v15 & 1) != 0)
    || !*(void *)(v14[2] + 8))
  {
    char v7 = 0;
LABEL_5:
    uint64_t v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v7) {
      return;
    }
    goto LABEL_6;
  }
  uint64_t v16 = *(WTF::StringImpl **)(a2 + 1000);
  if (v16)
  {
    *(_DWORD *)v16 += 2;
    int v37 = v16;
    long long v17 = *(_OWORD *)(a2 + 1024);
    long long v38 = *(_OWORD *)(a2 + 1008);
    long long v39 = v17;
    if (*((_DWORD *)v16 + 1))
    {
      long long v35 = *(_OWORD *)(v6 + 80);
      char v36 = 1;
      uint64_t v18 = *(void *)(v6 + 24);
      if (v18
        && (uint64_t v19 = *(void *)(v18 + 8)) != 0
        && (uint64_t v20 = *(void *)(v19 + 24)) != 0
        && (uint64_t v21 = *(void *)(v20 + 8)) != 0
        && (uint64_t v22 = *(void **)(*(void *)(v21 + 48) + 16),
            uint64_t v15 = (*(uint64_t (**)(void *))(*v22 + 1368))(v22),
            (v15 & 1) == 0)
        && *(void *)(v22[2] + 8))
      {
        uint64_t v15 = WebKit::WebFrame::page((WebKit::WebFrame *)v6);
        uint64_t v33 = *(void *)(v15 + 40);
        uint64_t v34 = 1;
      }
      else
      {
        LOBYTE(v33) = 0;
        LOBYTE(v34) = 0;
      }
      uint64_t v23 = (WebKit::WebProcess *)WebKit::WebProcess::singleton((WebKit::WebProcess *)v15);
      int v24 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection(v23) + 24);
      v31[0] = a2 + 1040;
      v31[1] = &v37;
      v31[2] = &v35;
      v31[3] = &v33;
      BOOL shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v6, v25);
      IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(v24, (uint64_t)v31, a3);
      uint64_t v27 = v37;
      goto LABEL_25;
    }
  }
  else
  {
    long long v28 = *(_OWORD *)(a2 + 1024);
    long long v38 = *(_OWORD *)(a2 + 1008);
    long long v39 = v28;
  }
  uint64_t v29 = *a3;
  *a3 = 0;
  uint64_t v30 = v16;
  (*(void (**)(uint64_t, void))(*(void *)v29 + 16))(v29, 0);
  (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  uint64_t v27 = v30;
LABEL_25:
  int v37 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v26);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
LABEL_6:
  CFRelease(*(CFTypeRef *)(v6 + 8));
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9F8518;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 231;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v15 = v8;
  IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,0ul,1ul,2ul,3ul,4ul>(v8, a2);
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void WebKit::WebCookieJar::cookieRequestHeaderFieldValue(const WTF::URL *a1@<X1>, char *a2@<X2>, const WTF::URL *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, char a7@<W7>, uint64_t a8@<X8>)
{
  uint64_t v9 = a4;
  v42[0] = a5;
  v42[1] = a6;
  char v41 = 0;
  if (*(unsigned char *)(a4 + 16))
  {
      goto LABEL_33;
    uint64_t v14 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a4, *(void *)(a4 + 8));
    uint64_t v15 = (CFTypeRef *)v14;
    if (v14)
    {
      CFRetain(*(CFTypeRef *)(v14 + 8));
      char v16 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  char v16 = 1;
LABEL_7:
  if (WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v15, a1, a3, &v41))
  {
    *(unsigned char *)(a8 + 8) = 0;
    *(void *)a8 = 0;
    goto LABEL_26;
  }
  uint64_t v36 = a8;
  char v35 = v16;
  char v17 = a7;
  {
    uint64_t v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v34);
  }
  uint64_t v18 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 24);
  char v19 = v41;
  char shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v15, v20);
  uint64_t v49 = 0;
  IPC::Connection::createSyncMessageEncoder(3608, 0, &v49, &v48);
  uint64_t v22 = v48;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v48, (uint64_t *)a1);
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v22, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v22, (uint64_t *)a3);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v22, v9);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v22, (uint64_t)v42);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v22, v17);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v22, v19);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v22, shouldRelaxThirdPartyCookieBlocking);
  IPC::Connection::sendSyncMessage(v18, v49, (uint64_t *)&v48, 0, (uint64_t)&v46, INFINITY);
  if (!v47)
  {
    LOBYTE(v43) = 0;
    char v45 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String,BOOL>>(v46, (uint64_t)&v43);
    uint64_t v23 = v36;
    if (!v45)
    {
      LOBYTE(v37) = 13;
      int v24 = 1;
      int v40 = 1;
      int v25 = v47;
      char v16 = v35;
      if (v47 == -1) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    int v25 = v47;
    char v16 = v35;
    if (!v47)
    {
      int v24 = 0;
      uint64_t v27 = v46;
      uint64_t v46 = 0;
      uint64_t v22 = v43;
      LOBYTE(v9) = v44;
      int v37 = v27;
      long long v38 = v43;
      char v39 = v44;
      int v40 = 0;
      goto LABEL_17;
    }
    goto LABEL_32;
  }
  uint64_t v23 = v36;
  if (v47 != 1)
  {
LABEL_32:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_33:
    uint64_t v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v33);
  }
  LOBYTE(v37) = (_BYTE)v46;
  int v24 = 1;
  int v40 = 1;
  int v25 = 1;
  char v16 = v35;
LABEL_17:
  ((void (*)(IPC::Encoder **, IPC::Decoder **))off_1EE9F8458[v25])(&v43, &v46);
LABEL_18:
  long long v28 = v48;
  char v48 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v26);
    WTF::fastFree(v30, v31);
    if (v24) {
      goto LABEL_20;
    }
  }
  else if (v24)
  {
LABEL_20:
    *(unsigned char *)(v23 + 8) = 0;
    *(void *)uint64_t v23 = 0;
    int v29 = 1;
LABEL_25:
    ((void (*)(IPC::Encoder **, IPC::Decoder **))off_1EE9F83E0[v29])(&v43, &v37);
    goto LABEL_26;
  }
  long long v38 = 0;
  if (!v22)
  {
    int v29 = 0;
    *(void *)uint64_t v23 = 0;
    *(unsigned char *)(v23 + 8) = v9;
    goto LABEL_25;
  }
  int v32 = *(_DWORD *)v22;
  *(_DWORD *)v22 += 2;
  *(void *)uint64_t v23 = v22;
  *(unsigned char *)(v23 + 8) = v9;
  if (v32)
  {
    int v29 = 0;
    *(_DWORD *)uint64_t v22 = v32;
    goto LABEL_25;
  }
  WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v26);
  int v29 = v40;
  if (v40 != -1) {
    goto LABEL_25;
  }
LABEL_26:
  if ((v16 & 1) == 0) {
    CFRelease(v15[1]);
  }
}

BOOL WebKit::WebCookieJar::getRawCookies(uint64_t a1, uint64_t a2, const WTF::URL *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 544);
  if (v7 && (uint64_t v8 = *(void *)(v7 + 8)) != 0)
  {
    WebKit::WebFrame::fromCoreFrame(v8, &v54);
    uint64_t v9 = v54;
  }
  else
  {
    uint64_t v9 = 0;
  }
  unsigned __int8 v53 = 0;
  uint64_t v10 = (uint64_t *)(a2 + 1040);
  BOOL v11 = 0;
  if (WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v9, (const WTF::URL *)(a2 + 1040), a3, &v53)) {
    goto LABEL_43;
  }
  if (!v9)
  {
    LOBYTE(v51) = 0;
    char v52 = 0;
LABEL_18:
    LOBYTE(v49) = 0;
    LOBYTE(v50) = 0;
    goto LABEL_19;
  }
  long long v51 = *(_OWORD *)(v9 + 80);
  char v52 = 1;
  uint64_t v12 = *(void *)(v9 + 24);
  if (!v12) {
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = *(void *)(v13 + 24);
  if (!v14) {
    goto LABEL_18;
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15) {
    goto LABEL_18;
  }
  char v16 = *(void **)(*(void *)(v15 + 48) + 16);
  if (((*(uint64_t (**)(void *))(*v16 + 1368))(v16) & 1) != 0 || !*(void *)(v16[2] + 8)) {
    goto LABEL_18;
  }
  char v17 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v9 + 24) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v17 + 1368))(v17);
  uint64_t v18 = *(void *)(v17[2] + 8);
  if (v18) {
    uint64_t v19 = v18 - 16;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v49 = *(void *)(v19 + 40);
  uint64_t v50 = 1;
LABEL_19:
    goto LABEL_47;
  uint64_t v20 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 24);
  uint64_t v21 = WebCore::CookieJar::sameSiteInfo();
  __int16 v43 = v21;
  char v44 = BYTE2(v21);
  unsigned int v22 = v53;
  char shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v9, v23);
  uint64_t v61 = 0;
  IPC::Connection::createSyncMessageEncoder(3614, 0, &v61, &v60);
  int v25 = v60;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v60, v10);
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v25, (char *)&v43);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a3);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v25, (uint64_t)&v51);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v25, (uint64_t)&v49);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v25, v22);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v25, shouldRelaxThirdPartyCookieBlocking);
  IPC::Connection::sendSyncMessage(v20, v61, (uint64_t *)&v60, 0, (uint64_t)&v58, INFINITY);
  if (v59)
  {
    if (v59 == 1)
    {
      LOBYTE(v45) = (_BYTE)v58;
      int v26 = 1;
      int v48 = 1;
      int v27 = 1;
LABEL_32:
      ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F8458[v27])(&v62, &v58);
      goto LABEL_33;
    }
    goto LABEL_46;
  }
  LOBYTE(v55) = 0;
  char v57 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v58, &v55);
  if (v57)
  {
    if (v59)
    {
LABEL_46:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_47:
      int v42 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v42);
    }
    int v29 = v58;
    char v58 = 0;
    uint64_t v10 = v55;
    uint64_t v55 = 0;
    unsigned int v22 = v56;
    LODWORD(a3) = HIDWORD(v56);
    uint64_t v56 = 0;
    uint64_t v62 = 0;
    v63[0] = 0;
    char v45 = v29;
    uint64_t v46 = v10;
    v63[1] = 0;
    unint64_t v47 = __PAIR64__(a3, v22);
    int v48 = 0;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v63, v28);
    uint64_t v30 = v62;
    uint64_t v62 = 0;
    if (v30)
    {
      IPC::Decoder::~Decoder(v30);
      WTF::fastFree(v40, v41);
    }
    if (v57) {
      WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v28);
    }
    int v26 = 0;
  }
  else
  {
    LOBYTE(v45) = 13;
    int v26 = 1;
    int v48 = 1;
  }
  int v27 = v59;
  if (v59 != -1) {
    goto LABEL_32;
  }
LABEL_33:
  uint64_t v31 = v60;
  long long v60 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v28);
    WTF::fastFree(v38, v39);
  }
  BOOL v11 = v26 == 0;
  if (!v26)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    uint64_t v32 = *(unsigned int *)(a4 + 12);
    if (v32)
    {
      uint64_t v33 = *(WebCore::Cookie **)a4;
      uint64_t v34 = 136 * v32;
      do
      {
        WebCore::Cookie::~Cookie(v33, v28);
        uint64_t v33 = (WebCore::Cookie *)(v35 + 136);
        v34 -= 136;
      }
      while (v34);
    }
    uint64_t v36 = *(WTF **)a4;
    if (*(void *)a4)
    {
      *(void *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      WTF::fastFree(v36, v28);
    }
    uint64_t v62 = 0;
    *(void *)a4 = v10;
    v63[0] = 0;
    *(_DWORD *)(a4 + 8) = v22;
    *(_DWORD *)(a4 + 12) = a3;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v28);
  }
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F83F0[v26])(&v62, &v45);
LABEL_43:
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  return v11;
}

IPC::Encoder *WebKit::WebCookieJar::setRawCookie(WebKit::WebCookieJar *this, const WebCore::Document *a2, const WebCore::Cookie *a3)
{
  {
    uint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v4 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 284;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v11 = v5;
  IPC::ArgumentCoder<WebCore::Cookie,void>::encode(v5, (uint64_t)a3);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  BOOL v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebCookieJar::deleteCookie(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  {
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v8 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 24);
  uint64_t v9 = *a5;
  *a5 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F8540;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 236;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v20 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a4);
  v19[0] = (uint64_t)v10;
  v19[1] = v11;
  IPC::Connection::sendMessageWithAsyncReply(v8, &v20, v19, 0, 0);
  uint64_t v14 = v19[0];
  v19[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

unsigned int *WebKit::WebCookieJar::getCookiesAsync(uint64_t a1, uint64_t *a2, const WebCore::Document *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = a2[68];
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      uint64_t v11 = (unsigned int *)(v7 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
      WebKit::WebFrame::fromCoreFrame(v7, &v46);
      char v45 = 0;
      uint64_t v12 = v46;
      uint64_t v13 = a2 + 130;
      if (WebKit::shouldBlockCookies(v46, (const WTF::URL *)(a2 + 130), a3, &v45))
      {
        LOBYTE(v47) = 0;
        char v48 = 0;
        uint64_t v14 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, long long *))(*(void *)v14 + 16))(v14, &v47);
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        if (v48)
        {
          WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v15);
          if (!v12) {
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
          }
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v16 = WebCore::CookieJar::sameSiteInfo();
        __int16 v43 = v16;
        char v44 = BYTE2(v16);
        char shouldIncludeSecureCookies = WebCore::CookieJar::shouldIncludeSecureCookies((WebCore::CookieJar *)a2, a3, v17);
        if (v12)
        {
          long long v47 = *((_OWORD *)v12 + 5);
          uint64_t v18 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)v12 + 3) + 8) + 24) + 8)
                                       + 48)
                           + 16);
          (*(void (**)(void *))(*v18 + 1368))(v18);
          uint64_t v19 = *(void *)(v18[2] + 8);
          if (v19) {
            uint64_t v20 = v19 - 16;
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = *(void *)(v20 + 40);
          char v22 = 1;
          uint64_t v41 = v21;
          uint64_t v42 = 1;
        }
        else
        {
          char v22 = 0;
          LOBYTE(v47) = 0;
          LOBYTE(v41) = 0;
          LOBYTE(v42) = 0;
        }
        char v48 = v22;
        {
          long long v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v38);
        }
        char v39 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                                   + 24);
        char v23 = v45;
        char shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking(v12, v24);
        uint64_t v26 = *a5;
        *a5 = 0;
        int v27 = (void *)WTF::fastMalloc((WTF *)0x10);
        *int v27 = &unk_1EE9F8568;
        v27[1] = v26;
        uint64_t v28 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        int v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v29 = 232;
        *((void *)v29 + 1) = 0;
        *((void *)v29 + 66) = (char *)v29 + 16;
        *((void *)v29 + 67) = 512;
        *((void *)v29 + 68) = 0;
        *((void *)v29 + 70) = 0;
        *((void *)v29 + 69) = 0;
        IPC::Encoder::encodeHeader(v29);
        uint64_t v50 = v29;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, v13);
        IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v29, (char *)&v43);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, (uint64_t *)a3);
        IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v29, (uint64_t)&v47);
        IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v29, (uint64_t)&v41);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v29, shouldIncludeSecureCookies);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v29, v23);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v29, shouldRelaxThirdPartyCookieBlocking);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, a4);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, a4 + 1);
        v49[0] = (uint64_t)v27;
        v49[1] = v28;
        IPC::Connection::sendMessageWithAsyncReply(v39, &v50, v49, 0, 0);
        uint64_t v31 = v49[0];
        v49[0] = 0;
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
        uint64_t v32 = v50;
        uint64_t v50 = 0;
        if (v32)
        {
          IPC::Encoder::~Encoder(v32, v30);
          WTF::fastFree(v34, v35);
          if (!v12) {
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
          }
          goto LABEL_18;
        }
      }
      if (!v12) {
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
      }
LABEL_18:
      CFRelease(*((CFTypeRef *)v12 + 1));
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
    }
  }
  LOBYTE(v47) = 0;
  char v48 = 0;
  uint64_t v36 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v36 + 16))(v36, &v47);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v36 + 8))(v36);
  if (v48) {
    return (unsigned int *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v37);
  }
  return result;
}

unsigned int *WebKit::WebCookieJar::setCookieAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = *(void *)(a2 + 544);
  if (v6 && (uint64_t v8 = *(void *)(v6 + 8)) != 0)
  {
    uint64_t v12 = (unsigned int *)(v8 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    WebKit::WebFrame::fromCoreFrame(v8, &v82);
    char v81 = 0;
    uint64_t v13 = v82;
    uint64_t v14 = (uint64_t *)(a2 + 1040);
    if (WebKit::shouldBlockCookies(v82, (const WTF::URL *)(a2 + 1040), (const WTF::URL *)a3, &v81))
    {
      uint64_t v15 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v15 + 16))(v15, 0);
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    else
    {
      uint64_t v50 = v12;
      int v16 = WebCore::CookieJar::sameSiteInfo();
      __int16 v79 = v16;
      char v80 = BYTE2(v16);
      if (v13)
      {
        long long v77 = *((_OWORD *)v13 + 5);
        char v78 = 1;
        char v17 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)v13 + 3) + 8) + 24) + 8)
                                     + 48)
                         + 16);
        (*(void (**)(void *))(*v17 + 1368))(v17);
        uint64_t v19 = *(void *)(v17[2] + 8);
        if (v19) {
          uint64_t v20 = v19 - 16;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v75 = *(void *)(v20 + 40);
        uint64_t v76 = 1;
        if (WebKit::WebCookieJar::isEligibleForCache(v13, (WebKit::WebFrame *)(a2 + 1040), (const WTF::URL *)a3, v18))
        {
          uint64_t v21 = *(void *)(a1 + 72);
          if (v21 && (char v22 = *(void **)v21, ++*(void *)(v21 + 8), v22) && *v22)
          {
            char v23 = 1;
            (*(void (**)(void, uint64_t))(*(void *)*v22 + 16))(*v22, 1);
          }
          else
          {
            char v23 = 1;
          }
        }
        else
        {
          char v23 = 0;
          uint64_t v21 = 0;
        }
      }
      else
      {
        char v23 = 0;
        uint64_t v21 = 0;
        LOBYTE(v77) = 0;
        char v78 = 0;
        LOBYTE(v75) = 0;
        LOBYTE(v76) = 0;
      }
      ++*(_DWORD *)(a1 + 8);
      v51[0] = a1;
      v51[1] = v21;
      char v52 = v23;
      *(_DWORD *)(a2 + 28) += 2;
      uint64_t v53 = a2;
      if (v13) {
        CFRetain(*((CFTypeRef *)v13 + 1));
      }
      uint64_t v54 = v13;
      __int16 v55 = v79;
      char v56 = v80;
      int v24 = *(_DWORD **)a3;
      if (*(void *)a3) {
        *v24 += 2;
      }
      char v57 = v24;
      long long v58 = *(_OWORD *)(a3 + 8);
      long long v59 = *(_OWORD *)(a3 + 24);
      long long v60 = v77;
      char v61 = v78;
      uint64_t v62 = v75;
      char v63 = v76;
      int v25 = *(_DWORD **)a4;
      if (*(void *)a4) {
        *v25 += 2;
      }
      int v64 = v25;
      uint64_t v26 = *(_DWORD **)(a4 + 8);
      if (v26) {
        *v26 += 2;
      }
      int v65 = v26;
      int v27 = *(_DWORD **)(a4 + 16);
      if (v27) {
        *v27 += 2;
      }
      char v66 = v27;
      uint64_t v28 = *(_DWORD **)(a4 + 24);
      if (v28) {
        *v28 += 2;
      }
      uint64_t v67 = v28;
      v68[0] = *(_OWORD *)(a4 + 32);
      *(_OWORD *)((char *)v68 + 11) = *(_OWORD *)(a4 + 43);
      int v29 = *(_DWORD **)(a4 + 64);
      if (v29) {
        *v29 += 2;
      }
      uint64_t v69 = v29;
      uint64_t v30 = *(_DWORD **)(a4 + 72);
      if (v30) {
        *v30 += 2;
      }
      unint64_t v70 = v30;
      long long v31 = *(_OWORD *)(a4 + 96);
      long long v71 = *(_OWORD *)(a4 + 80);
      long long v72 = v31;
      WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v73, a4 + 112);
      v73[16] = *(unsigned char *)(a4 + 128);
      uint64_t v32 = *a5;
      *a5 = 0;
      uint64_t v74 = v32;
      {
        uint64_t v49 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v49);
      }
      uint64_t v33 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                                 + 24);
      char v34 = v81;
      char shouldRelaxThirdPartyCookieBlocking = WebKit::shouldRelaxThirdPartyCookieBlocking(v13, v35);
      WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::$_0((uint64_t)v84, v51);
      int v37 = (void *)WTF::fastMalloc((WTF *)0x118);
      void *v37 = &unk_1EE9F8590;
      WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::$_0((uint64_t)(v37 + 1), v84);
      WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0((uint64_t)v84, v38);
      uint64_t v39 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      int v40 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v40 = 281;
      *((void *)v40 + 1) = 0;
      *((void *)v40 + 66) = (char *)v40 + 16;
      *((void *)v40 + 67) = 512;
      *((void *)v40 + 68) = 0;
      *((void *)v40 + 70) = 0;
      *((void *)v40 + 69) = 0;
      IPC::Encoder::encodeHeader(v40);
      BOOL v83 = v40;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v40, v14);
      IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v40, (char *)&v79);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v40, (uint64_t *)a3);
      IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v40, (uint64_t)&v77);
      IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v40, (uint64_t)&v75);
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v40, v34);
      IPC::ArgumentCoder<WebCore::Cookie,void>::encode(v40, a4);
      IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v40, shouldRelaxThirdPartyCookieBlocking);
      v84[0] = (uint64_t)v37;
      v84[1] = v39;
      IPC::Connection::sendMessageWithAsyncReply(v33, &v83, v84, 0, 0);
      uint64_t v42 = v84[0];
      v84[0] = 0;
      if (v42) {
        (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
      }
      __int16 v43 = v83;
      BOOL v83 = 0;
      uint64_t v12 = v50;
      if (v43)
      {
        IPC::Encoder::~Encoder(v43, v41);
        WTF::fastFree(v45, v46);
      }
      WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0((uint64_t)v51, v41);
    }
    if (v13) {
      CFRelease(*((CFTypeRef *)v13 + 1));
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
  }
  else
  {
    uint64_t v47 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v47 + 16))(v47, 0);
    char v48 = *(uint64_t (**)(uint64_t))(*(void *)v47 + 8);
    return (unsigned int *)v48(v47);
  }
}

uint64_t WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::Cookie::~Cookie((WebCore::Cookie *)(a1 + 128), a2);
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(a1 + 24));
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v7)
  {
    uint64_t v8 = *(uint64_t **)v7;
    uint64_t v9 = *(void *)(v7 + 8) - 1;
    *(void *)(v7 + 8) = v9;
    if (v8)
    {
      uint64_t v10 = *v8;
      if (!*v8) {
        goto LABEL_16;
      }
      char v11 = *(unsigned char *)(v7 + 16);
      *(unsigned char *)(v7 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
      *(unsigned char *)(v7 + 16) = v11;
      if (*(void *)v7) {
        goto LABEL_16;
      }
      uint64_t v9 = *(void *)(v7 + 8);
    }
    if (!v9) {
      MEMORY[0x199740C10](v7, 0x1020C40545B2139);
    }
  }
LABEL_16:
  uint64_t v12 = *(_DWORD **)a1;
  *(void *)a1 = 0;
  if (v12)
  {
    if (v12[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v12 + 120))(v12);
    }
    else {
      --v12[2];
    }
  }
  return a1;
}

BOOL WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(uint64_t *a1)
{
  if (!*a1 || !*(_DWORD *)(*a1 - 12)) {
    return 1;
  }
  uint64_t v12 = a1;
  uint64_t v13 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)a1);
  uint64_t v14 = v2;
  uint64_t v3 = *v12;
  if (*v12)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = (void *)(v3 + 8 * v4);
    uint64_t v15 = v5;
    int v16 = v5;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v7 = a1;
  uint64_t v8 = v5;
  uint64_t v9 = v5;
  uint64_t v10 = v5;
  uint64_t v11 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  return v13 == v8;
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::UnsubscribeFromCookieChangeNotifications>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 292;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  char v17 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  char v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::WebFoundTextRangeController::findTextRangesForStringMatches(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebCore::Page::findTextMatches();
  uint64_t v7 = v75;
  uint64_t v72 = v75;
  int v8 = v76;
  uint64_t v9 = HIDWORD(v76);
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  int v73 = v8;
  int v74 = v9;
  if (v9)
  {
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v11 = (uint64_t *)(a1 + 56);
    uint64_t v10 = v12;
    if (v12)
    {
      *uint64_t v11 = 0;
      WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v10, v6);
    }
    uint64_t v13 = 0;
    uint64_t v70 = 0;
    long long v71 = 0;
    uint64_t v69 = 0;
    uint64_t v14 = v7 + 32 * v9;
    while (1)
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)v7 + 48) + 8);
      *(_DWORD *)(v15 + 28) += 2;
      uint64_t v68 = v15;
      uint64_t v16 = *(void *)(v15 + 1304);
      if (v16) {
        break;
      }
LABEL_78:
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v68);
      v7 += 32;
      if (v7 == v14) {
        goto LABEL_85;
      }
    }
    *(_DWORD *)(v16 + 28) += 2;
    uint64_t v17 = *(void *)(v15 + 544);
    if (v17) {
      uint64_t v17 = *(void *)(v17 + 8);
    }
    WebCore::FrameTree::uniqueName((uint64_t *)&v67, (WebCore::FrameTree *)(v17 + 48));
    if (v71 != v67)
    {
      WTF::String::operator=((uint64_t *)&v71, &v67);
      ++v13;
    }
    *(_DWORD *)(v16 + 28) += 2;
    uint64_t v77 = 0;
    *(void *)&long long v64 = v16;
    DWORD2(v64) = 0;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v77);
    WebCore::SimpleRange::SimpleRange();
    uint64_t v18 = WebCore::characterCount();
    uint64_t v19 = WebCore::characterCount();
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v79);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v77);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v64);
    *(void *)&long long v64 = v18;
    *((void *)&v64 + 1) = v19;
    uint64_t v21 = v71;
    if (v71 && *((_DWORD *)v71 + 1) || (uint64_t v21 = (WTF::StringImpl *)*MEMORY[0x1E4F30970]) != 0) {
      *(_DWORD *)v21 += 2;
    }
    int v65 = v21;
    uint64_t v66 = v13;
    uint64_t v22 = *v11;
    if (*v11
      || (WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(v11, 0), (uint64_t v22 = *v11) != 0))
    {
      int v23 = *(_DWORD *)(v22 - 8);
    }
    else
    {
      int v23 = 0;
    }
    uint64_t v24 = 0;
    unint64_t v25 = (0xD7862706ELL * (unint64_t)(277951225 * v64 + 95187966 * DWORD2(v64))) >> 4;
    for (int i = 1; ; ++i)
    {
      unsigned int v27 = v25 & v23;
      uint64_t v28 = (uint64_t *)(v22 + 72 * v27);
      int v29 = (WTF::StringImpl *)v28[2];
      uint64_t v30 = *v28;
      if (v29 != (WTF::StringImpl *)-1 && v30 == 0)
      {
        uint64_t v20 = (WTF::StringImpl *)v28[1];
        if (!v29 && v20 == 0)
        {
          uint64_t v20 = (WTF::StringImpl *)v28[3];
          if (!v20) {
            break;
          }
        }
      }
      if (v29 == (WTF::StringImpl *)-1 || (WTF::StringImpl *)((char *)v65 + 1) == 0)
      {
        if (v29 == (WTF::StringImpl *)-1 && (WTF::StringImpl *)((char *)v65 + 1) == 0) {
          goto LABEL_61;
        }
      }
      else if (v30 == (void)v64)
      {
        BOOL v35 = v29 == v65 && v28[1] == *((void *)&v64 + 1);
        if (v35 && v28[3] == v66) {
          goto LABEL_61;
        }
      }
      if (v29 == (WTF::StringImpl *)-1) {
        uint64_t v24 = v22 + 72 * v27;
      }
      LODWORD(v25) = i + v27;
    }
    if (v24)
    {
      *(unsigned char *)(v24 + 64) = 0;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(unsigned char *)(v24 + 32) = 0;
      --*(_DWORD *)(*v11 - 16);
      uint64_t v28 = (uint64_t *)v24;
    }
    *(_OWORD *)uint64_t v28 = v64;
    WTF::String::operator=(v28 + 2, &v65);
    v28[3] = v66;
    uint64_t v36 = *(void *)v7;
    *(_DWORD *)(v36 + 28) = *(_DWORD *)(*(void *)v7 + 28) + 2;
    uint64_t v77 = v36;
    int v78 = *(_DWORD *)(v7 + 8);
    uint64_t v37 = *(void *)(v7 + 16);
    *(_DWORD *)(v37 + 28) += 2;
    uint64_t v79 = v37;
    int v80 = *(_DWORD *)(v7 + 24);
    int v38 = 1;
    char v81 = 1;
    std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(v28 + 4, (uint64_t)&v77);
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v77);
    uint64_t v39 = *v11;
    if (*v11) {
      int v38 = *(_DWORD *)(v39 - 12) + 1;
    }
    *(_DWORD *)(v39 - 12) = v38;
    uint64_t v40 = *v11;
    if (*v11) {
      int v41 = *(_DWORD *)(v40 - 12);
    }
    else {
      int v41 = 0;
    }
    uint64_t v42 = (*(_DWORD *)(v40 - 16) + v41);
    unint64_t v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 > 2 * v42) {
        goto LABEL_61;
      }
    }
    else if (3 * v43 > 4 * v42)
    {
LABEL_61:
      uint64_t v44 = HIDWORD(v70);
      if (HIDWORD(v70) == v70)
      {
        unint64_t v45 = WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, HIDWORD(v70) + 1, (unint64_t)&v64);
        uint64_t v46 = HIDWORD(v70);
        uint64_t v47 = v69;
        *(_OWORD *)(v69 + 32 * HIDWORD(v70)) = *(_OWORD *)v45;
        char v48 = *(_DWORD **)(v45 + 16);
        if (v48) {
          *v48 += 2;
        }
        uint64_t v49 = v47 + 32 * v46;
        *(void *)(v49 + 16) = v48;
        uint64_t v50 = (uint64_t *)(v49 + 24);
        long long v51 = (uint64_t *)(v45 + 24);
      }
      else
      {
        uint64_t v52 = v69;
        *(_OWORD *)(v69 + 32 * HIDWORD(v70)) = v64;
        uint64_t v53 = v65;
        if (v65) {
          *(_DWORD *)v65 += 2;
        }
        uint64_t v54 = v52 + 32 * v44;
        *(void *)(v54 + 16) = v53;
        uint64_t v50 = (uint64_t *)(v54 + 24);
        long long v51 = &v66;
      }
      *uint64_t v50 = *v51;
      ++HIDWORD(v70);
      __int16 v55 = v65;
      int v65 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2) {
          WTF::StringImpl::destroy(v55, v20);
        }
        else {
          *(_DWORD *)v55 -= 2;
        }
      }
      char v56 = v67;
      uint64_t v67 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2) {
          WTF::StringImpl::destroy(v56, v20);
        }
        else {
          *(_DWORD *)v56 -= 2;
        }
      }
      if (*(_DWORD *)(v16 + 28) == 2)
      {
        if ((*(_WORD *)(v16 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v16);
        }
      }
      else
      {
        *(_DWORD *)(v16 + 28) -= 2;
      }
      goto LABEL_78;
    }
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(v11, v28);
    goto LABEL_61;
  }
  uint64_t v70 = 0;
  long long v71 = 0;
  uint64_t v69 = 0;
LABEL_85:
  uint64_t v57 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v57 + 16))(v57, &v69);
  (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v58);
  long long v60 = v71;
  long long v71 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2) {
      WTF::StringImpl::destroy(v60, v59);
    }
    else {
      *(_DWORD *)v60 -= 2;
    }
  }
  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v59);
  return WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v61);
}

uint64_t WebKit::WebFoundTextRangeController::replaceFoundTextRangeWithString(WebKit::WebFoundTextRangeController *this, const WebFoundTextRange *a2, const WTF::String *a3)
{
  *(_OWORD *)&v17.var0 = *(_OWORD *)&a2->var0;
  m_ptr = a2->var2.var0.m_impl.m_ptr;
  if (m_ptr) {
    *(_DWORD *)m_ptr += 2;
  }
  unint64_t var3 = a2->var3;
  v17.var2.var0.m_impl.m_ptr = m_ptr;
  v17.unint64_t var3 = var3;
  WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange(this, &v17, (uint64_t)v18);
  int v8 = v17.var2.var0.m_impl.m_ptr;
  v17.var2.var0.m_impl.m_ptr = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  if (!v19) {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
  }
  uint64_t result = WebKit::WebFoundTextRangeController::documentForFoundTextRange(this, a2);
  if (!result) {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
  }
  uint64_t v10 = result;
  int v11 = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = v11 + 2;
  uint64_t v12 = *(void *)(result + 544);
  if (!v12 || (uint64_t v13 = *(void *)(v12 + 8)) == 0)
  {
LABEL_15:
    if (v11)
    {
      *(_DWORD *)(v10 + 28) = v11;
    }
    else if ((*(_WORD *)(v10 + 34) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
  }
  atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
  if (v19)
  {
    WebCore::VisibleSelection::VisibleSelection();
    std::__optional_destruct_base<WebCore::VisibleSelection,false>::__optional_destruct_base[abi:sn180100]<WebCore::VisibleSelection&>((uint64_t)v14, v16);
    WebCore::TemporarySelectionChange::TemporarySelectionChange();
    if (v14[104]) {
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v14);
    }
    WebCore::Document::editor(*(WebCore::Document **)(v13 + 296));
    WebCore::Editor::replaceSelectionWithText();
    MEMORY[0x199737F60](v15);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v16);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v13 + 8));
    int v11 = *(_DWORD *)(v10 + 28) - 2;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange@<X0>(WebKit::WebFoundTextRangeController *this@<X0>, WebFoundTextRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (uint64_t *)((char *)this + 56);
  uint64_t v6 = *((void *)this + 7);
  long long v31 = (uint64_t *)((char *)this + 56);
  if (v6
    || (WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand((uint64_t *)this + 7, 0), (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = (0xD7862706ELL * (unint64_t)(277951225 * LODWORD(a2->var0) + 95187966 * LODWORD(a2->var1))) >> 4;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v9 & v7;
    uint64_t v12 = v6 + 72 * (v9 & v7);
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13 != -1 && *(void *)v12 == 0)
    {
      BOOL v15 = !v13 && *(void *)(v12 + 8) == 0;
      if (v15 && !*(void *)(v12 + 24)) {
        break;
      }
    }
    uint64_t result = WebKit::WebFoundTextRange::operator==((void *)(v6 + 72 * v11), a2);
    if (result) {
      goto LABEL_35;
    }
    if (v13 == -1) {
      uint64_t v8 = v6 + 72 * v11;
    }
    LODWORD(v9) = i + v11;
  }
  if (v8)
  {
    *(unsigned char *)(v8 + 64) = 0;
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(unsigned char *)(v8 + 32) = 0;
    --*(_DWORD *)(*v31 - 16);
    uint64_t v12 = v8;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&a2->var0;
  WTF::String::operator=((uint64_t *)(v12 + 16), (WTF::StringImpl **)&a2->var2);
  *(void *)(v12 + 24) = a2->var3;
  uint64_t found = WebKit::WebFoundTextRangeController::documentForFoundTextRange(this, a2);
  if (found)
  {
    uint64_t v19 = found;
    *(_DWORD *)(found + 28) += 2;
    uint64_t v20 = *(WebCore **)(found + 1304);
    *((_DWORD *)v20 + 7) += 2;
    unint64_t v43 = v20;
    WebCore::makeRangeSelectingNodeContents(v37, v20, v18);
    WebCore::resolveCharacterRange();
    uint64_t v32 = v39;
    int v33 = v40;
    uint64_t v21 = v41;
    uint64_t v39 = 0;
    uint64_t v41 = 0;
    uint64_t v34 = v21;
    int v35 = v42;
    char v36 = 1;
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v41);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v39);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v38);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v37);
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v43);
    if (*(_DWORD *)(v19 + 28) == 2)
    {
      if ((*(_WORD *)(v19 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
      }
    }
    else
    {
      *(_DWORD *)(v19 + 28) -= 2;
    }
  }
  else
  {
    LOBYTE(v32) = 0;
    char v36 = 0;
  }
  std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t *)(v12 + 32), (uint64_t)&v32);
  uint64_t result = std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
  uint64_t v22 = *v31;
  if (*v31) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v31;
  if (*v31) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 <= 0x400)
  {
    if (3 * v27 > 4 * v26) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v27 <= 2 * v26)
  {
LABEL_34:
    uint64_t result = (uint64_t)WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(v31, (void *)v12);
    uint64_t v12 = result;
  }
LABEL_35:
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 32) = 0;
  if (*(unsigned char *)(v12 + 64))
  {
    uint64_t v28 = *(void *)(v12 + 32);
    *(_DWORD *)(v28 + 28) += 2;
    *(void *)a3 = v28;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v12 + 40);
    uint64_t v29 = *(void *)(v12 + 48);
    *(_DWORD *)(v29 + 28) += 2;
    *(void *)(a3 + 16) = v29;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v12 + 56);
    *(unsigned char *)(a3 + 32) = 1;
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::documentForFoundTextRange(WebKit::WebFoundTextRangeController *this, const WebFoundTextRange *a2)
{
  uint64_t result = 0;
  uint64_t v4 = *(void *)(*((void *)this + 1) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(*(void *)(v5 + 48) + 160);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v6 + 144) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    m_ptr = a2->var2.var0.m_impl.m_ptr;
    if (!m_ptr || !*((_DWORD *)m_ptr + 1)) {
      return *(void *)(v6 + 296);
    }
    *(_DWORD *)m_ptr += 2;
    v12.var0.m_impl.m_ptr = m_ptr;
    uint64_t v9 = WebCore::FrameTree::findByUniqueName((WebCore::FrameTree *)(v6 + 48), &v12, (WebCore::Frame *)v6);
    if (v9)
    {
      if (*(unsigned char *)(v9 + 144)) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v9;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    unsigned int v11 = v12.var0.m_impl.m_ptr;
    v12.var0.m_impl.m_ptr = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v11, v10);
        if (v6) {
          return *(void *)(v6 + 296);
        }
        return 0;
      }
      *(_DWORD *)v11 -= 2;
    }
    if (v6) {
      return *(void *)(v6 + 296);
    }
    return 0;
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::decorateTextRangeWithStyle(WebKit::WebFoundTextRangeController *this, uint64_t a2, int a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&v66.var0 = *(_OWORD *)a2;
  BOOL v7 = (WTF::StringImpl **)(a2 + 16);
  uint64_t v6 = *(StringImpl **)(a2 + 16);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  unint64_t v8 = *(void *)(a2 + 24);
  v66.var2.var0.m_impl.m_ptr = v6;
  v66.unint64_t var3 = v8;
  WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange(this, &v66, (uint64_t)v67);
  m_ptr = v66.var2.var0.m_impl.m_ptr;
  v66.var2.var0.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v9);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  if (!v68) {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v67);
  }
  unsigned int v11 = (uint64_t *)((char *)this + 64);
  uint64_t v12 = *((void *)this + 8);
  if (!v12)
  {
    if (!a3) {
      return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v67);
    }
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand((uint64_t *)this + 8);
    uint64_t v12 = *v11;
    LODWORD(v20) = 0;
    if (*v11) {
      int v13 = *(_DWORD *)(v12 - 8);
    }
    else {
      int v13 = 0;
    }
LABEL_31:
    int v61 = v20;
    int v62 = a3;
    char v63 = this;
    int v65 = v7;
    uint64_t v21 = 0;
    unint64_t v22 = (0xD7862706ELL * (unint64_t)(277951225 * *(_DWORD *)a2 + 95187966 * *(_DWORD *)(a2 + 8))) >> 4;
    for (int i = 1; ; ++i)
    {
      unsigned int v24 = v22 & v13;
      uint64_t v25 = v12 + 40 * (v22 & v13);
      uint64_t v26 = *(void *)(v25 + 16);
      if (v26 != -1 && *(void *)v25 == 0)
      {
        BOOL v28 = !v26 && *(void *)(v25 + 8) == 0;
        if (v28 && !*(void *)(v25 + 24)) {
          break;
        }
      }
      if (WebKit::WebFoundTextRange::operator==((void *)(v12 + 40 * v24), (void *)a2))
      {
        uint64_t v30 = v12 + 40 * v24;
        int v32 = v61;
        int v31 = v62;
        *(unsigned char *)(v30 + 32) = v62;
        int v33 = v63;
        goto LABEL_48;
      }
      if (v26 == -1) {
        uint64_t v21 = v12 + 40 * v24;
      }
      LODWORD(v22) = i + v24;
    }
    if (v21)
    {
      *(unsigned char *)(v21 + 32) = 0;
      *(_OWORD *)uint64_t v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      --*(_DWORD *)(*v11 - 16);
      uint64_t v25 = v21;
    }
    *(_OWORD *)uint64_t v25 = *(_OWORD *)a2;
    WTF::String::operator=((uint64_t *)(v25 + 16), v65);
    *(void *)(v25 + 24) = *(void *)(a2 + 24);
    int v32 = v61;
    int v31 = v62;
    *(unsigned char *)(v25 + 32) = v62;
    uint64_t v36 = *v11;
    int v33 = v63;
    if (*v11) {
      int v37 = *(_DWORD *)(v36 - 12) + 1;
    }
    else {
      int v37 = 1;
    }
    *(_DWORD *)(v36 - 12) = v37;
    uint64_t v38 = *v11;
    if (*v11) {
      int v39 = *(_DWORD *)(v38 - 12);
    }
    else {
      int v39 = 0;
    }
    uint64_t v40 = (*(_DWORD *)(v38 - 16) + v39);
    unint64_t v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40) {
        goto LABEL_48;
      }
    }
    else if (3 * v41 > 4 * v40)
    {
LABEL_48:
      if (v32 == 2 && WebKit::WebFoundTextRange::operator==((void *)a2, (void *)v33 + 3))
      {
        uint64_t v34 = (WebCore::TextIndicator *)*((void *)v33 + 9);
        *((void *)v33 + 9) = 0;
        if (v34) {
          WTF::RefCounted<WebCore::TextIndicator>::deref(v34);
        }
        *((void *)v33 + 3) = 0;
        *((void *)v33 + 4) = 0;
        int v35 = (WTF::StringImpl *)*((void *)v33 + 5);
        *((void *)v33 + 5) = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2) {
            WTF::StringImpl::destroy(v35, v29);
          }
          else {
            *(_DWORD *)v35 -= 2;
          }
        }
        *((void *)v33 + 6) = 0;
      }
      if (v31 == 2)
      {
        *(_OWORD *)((char *)v33 + 24) = *(_OWORD *)a2;
        WTF::String::operator=((uint64_t *)v33 + 5, v65);
        *((void *)v33 + 6) = *(void *)(a2 + 24);
        uint64_t v42 = v68;
        if (*((void *)v33 + 2))
        {
          if (v68)
          {
            WebKit::WebFoundTextRangeController::setTextIndicatorWithRange((uint64_t)v33);
            goto LABEL_114;
          }
        }
        else if (v68)
        {
          uint64_t v43 = *(void *)(*(void *)(v67[0] + 48) + 8);
          *(_DWORD *)(v43 + 28) += 2;
          uint64_t v70 = v43;
          WebCore::VisibleSelection::VisibleSelection();
          WebCore::FrameSelection::setSelection();
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v71);
          WebKit::WebFoundTextRangeController::createTextIndicatorForRange((uint64_t)v33);
          uint64_t v44 = v69;
          if (!v69)
          {
LABEL_113:
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v70);
LABEL_114:
            long long v58 = (WebCore::PageOverlay *)*((void *)v33 + 2);
            if (v58) {
              WebCore::PageOverlay::setNeedsDisplay(v58);
            }
            return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v67);
          }
          uint64_t v45 = *((void *)v33 + 1);
          if (v45)
          {
            uint64_t v46 = *(void *)(v45 + 8);
            if (v46) {
              uint64_t v47 = (WebKit::WebPage *)(v46 - 16);
            }
            else {
              uint64_t v47 = 0;
            }
          }
          else
          {
            uint64_t v47 = 0;
          }
          long long v48 = *(_OWORD *)(v69 + 8);
          long long v49 = *(_OWORD *)(v69 + 40);
          v71[1] = *(_OWORD *)(v69 + 24);
          void v71[2] = v49;
          v71[0] = v48;
          WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v72, v69 + 56);
          int v74 = *(_DWORD *)(v44 + 72);
          uint64_t v50 = *(_DWORD **)(v44 + 80);
          if (v50) {
            ++v50[2];
          }
          uint64_t v75 = v50;
          long long v51 = *(_DWORD **)(v44 + 88);
          if (v51) {
            ++v51[2];
          }
          uint64_t v76 = v51;
          uint64_t v52 = *(_DWORD **)(v44 + 96);
          if (v52) {
            ++v52[2];
          }
          uint64_t v77 = v52;
          WebCore::Color::Color((WebCore::Color *)&v78, (const Color *)(v44 + 104));
          int v79 = *(_DWORD *)(v44 + 112);
          WebKit::WebPage::setTextIndicator(v47, (const WebCore::TextIndicatorData *)v71);
          uint64_t v42 = v78;
          if ((v78 & 0x8000000000000) == 0)
          {
LABEL_97:
            uint64_t v53 = v77;
            uint64_t v77 = 0;
            if (v53)
            {
              if (v53[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v53 + 8))(v53);
              }
              else {
                --v53[2];
              }
            }
            uint64_t v54 = v76;
            uint64_t v76 = 0;
            if (v54)
            {
              if (v54[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v54 + 8))(v54);
              }
              else {
                --v54[2];
              }
            }
            __int16 v55 = v75;
            uint64_t v75 = 0;
            if (v55)
            {
              if (v55[2] == 1) {
                (*(void (**)(_DWORD *))(*(void *)v55 + 8))(v55);
              }
              else {
                --v55[2];
              }
            }
            char v56 = v72;
            if (v72)
            {
              uint64_t v72 = 0;
              int v73 = 0;
              WTF::fastFree(v56, v29);
            }
            uint64_t v57 = (WebCore::TextIndicator *)v69;
            uint64_t v69 = 0;
            if (v57) {
              WTF::RefCounted<WebCore::TextIndicator>::deref(v57);
            }
            goto LABEL_113;
          }
LABEL_120:
          long long v60 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v60);
            WTF::fastFree((WTF *)v60, v29);
          }
          goto LABEL_97;
        }
      }
      else if (v31 == 1)
      {
        uint64_t v42 = v68;
        if (v68)
        {
          if (*(void *)(*(void *)(*(void *)(v67[0] + 48) + 8) + 1536)
            || (WebCore::Document::ensureMarkers(*(WebCore::Document **)(*(void *)(v67[0] + 48) + 8)),
                (uint64_t v42 = v68) != 0))
          {
            *(void *)&v71[0] = 0;
            LODWORD(v72) = 0;
            WebCore::DocumentMarkerController::addMarker();
            if (v72 != -1) {
              ((void (*)(uint64_t *, _OWORD *))off_1EE9F8400[v72])(&v70, v71);
            }
            goto LABEL_114;
          }
        }
      }
      else
      {
        if (v31) {
          goto LABEL_114;
        }
        uint64_t v42 = v68;
        if (v68)
        {
          if (*(void *)(*(void *)(*(void *)(v67[0] + 48) + 8) + 1536)
            || (WebCore::Document::ensureMarkers(*(WebCore::Document **)(*(void *)(v67[0] + 48) + 8)),
                (uint64_t v42 = v68) != 0))
          {
            WebCore::DocumentMarkerController::removeMarkers();
            goto LABEL_114;
          }
        }
      }
      __break(1u);
      goto LABEL_120;
    }
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(v11);
    goto LABEL_48;
  }
  int v13 = *(_DWORD *)(v12 - 8);
  unsigned int v14 = v13 & ((0xD7862706ELL
              * (unint64_t)(277951225 * *(_DWORD *)a2 + 95187966 * *(_DWORD *)(a2 + 8))) >> 4);
  BOOL v15 = (void *)(v12 + 40 * v14);
  if (WebKit::WebFoundTextRange::operator==(v15, (void *)a2))
  {
LABEL_24:
    LODWORD(v20) = *(unsigned __int8 *)(v12 + 40 * v14 + 32);
  }
  else
  {
    long long v64 = v7;
    int v16 = 1;
    while (1)
    {
      uint64_t v17 = v15[2];
      if (v17 != -1 && *v15 == 0 && !v17 && v15[1] == 0)
      {
        uint64_t v20 = v15[3];
        if (!v20) {
          break;
        }
      }
      unsigned int v14 = (v14 + v16) & v13;
      BOOL v15 = (void *)(v12 + 40 * v14);
      ++v16;
      if (WebKit::WebFoundTextRange::operator==(v15, (void *)a2))
      {
        BOOL v7 = v64;
        goto LABEL_24;
      }
    }
    BOOL v7 = v64;
  }
  if (v20 != a3) {
    goto LABEL_31;
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v67);
}

WebCore::TextIndicator *WebKit::WebFoundTextRangeController::setTextIndicatorWithRange(uint64_t a1)
{
  WebKit::WebFoundTextRangeController::createTextIndicatorForRange(a1);
  uint64_t result = *(WebCore::TextIndicator **)(a1 + 72);
  *(void *)(a1 + 72) = v3;
  if (result)
  {
    WTF::RefCounted<WebCore::TextIndicator>::deref(result);
    return 0;
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::scrollTextRangeToVisible(WebKit::WebFoundTextRangeController *this, const WebFoundTextRange *a2)
{
  *(_OWORD *)&v13.var0 = *(_OWORD *)&a2->var0;
  m_ptr = a2->var2.var0.m_impl.m_ptr;
  if (m_ptr) {
    *(_DWORD *)m_ptr += 2;
  }
  unint64_t var3 = a2->var3;
  v13.var2.var0.m_impl.m_ptr = m_ptr;
  v13.unint64_t var3 = var3;
  WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange(this, &v13, (uint64_t)v14);
  BOOL v7 = v13.var2.var0.m_impl.m_ptr;
  v13.var2.var0.m_impl.m_ptr = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (!v15) {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  }
  uint64_t result = WebKit::WebFoundTextRangeController::documentForFoundTextRange(this, a2);
  if (!result) {
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  }
  uint64_t v9 = result;
  *(_DWORD *)(result + 28) += 2;
  if (v15)
  {
    WebCore::VisibleSelection::VisibleSelection();
    WebCore::Document::isTopDocument((WebCore::Document *)v9);
    std::__optional_destruct_base<WebCore::VisibleSelection,false>::__optional_destruct_base[abi:sn180100]<WebCore::VisibleSelection&>((uint64_t)v10, v12);
    WebCore::TemporarySelectionChange::TemporarySelectionChange();
    if (v10[104]) {
      WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v10);
    }
    MEMORY[0x199737F60](v11);
    WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v12);
    if (*(_DWORD *)(v9 + 28) == 2)
    {
      if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
    }
    else
    {
      *(_DWORD *)(v9 + 28) -= 2;
    }
    return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  }
  __break(1u);
  return result;
}

WebCore::PageOverlay *WebKit::WebFoundTextRangeController::clearAllDecoratedFoundText(WebKit::WebFoundTextRangeController *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    *((void *)this + 7) = 0;
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4)
  {
    *((void *)this + 8) = 0;
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *(void *)(*((void *)this + 1) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v6 + 48));
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  unint64_t v8 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  *((void *)this + 6) = 0;
  uint64_t v9 = (WebCore::TextIndicator *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v9) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v9);
  }
  uint64_t result = (WebCore::PageOverlay *)*((void *)this + 2);
  if (result)
  {
    return (WebCore::PageOverlay *)WebCore::PageOverlay::setNeedsDisplay(result);
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::didBeginTextSearchOperation(WebKit::WebFoundTextRangeController *this)
{
  uint64_t v2 = (WebCore::PageOverlay *)*((void *)this + 2);
  if (v2)
  {
    WebCore::PageOverlay::stopFadeOutAnimation(v2);
  }
  else
  {
    WebCore::PageOverlay::create();
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = v5;
    if (v3) {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v3 + 8));
    }
    WebCore::PageOverlayController::installPageOverlay();
  }
  return WebCore::PageOverlay::setNeedsDisplay(*((WebCore::PageOverlay **)this + 2));
}

uint64_t WebKit::WebFoundTextRangeController::addLayerForFindOverlay(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(WebCore::PageOverlay **)(a1 + 16);
  if (!v4)
  {
    WebCore::PageOverlay::create();
    uint64_t v5 = v14;
    *(void *)&long long v14 = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v5;
    if (v6)
    {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v6 + 8));
      uint64_t v7 = v14;
      *(void *)&long long v14 = 0;
      if (v7) {
        WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v7 + 8));
      }
    }
    WebCore::PageOverlayController::installPageOverlay();
    uint64_t v8 = *(void *)WebCore::PageOverlay::layer(*(WebCore::PageOverlay **)(a1 + 16));
    (*(void (**)(double))(v8 + 280))(0.0);
    uint64_t v4 = *(WebCore::PageOverlay **)(a1 + 16);
  }
  uint64_t v9 = WebCore::PageOverlay::layer(v4);
  (*(void (**)(long long *__return_ptr))(*(void *)v9 + 32))(&v12);
  uint64_t v10 = *a2;
  *a2 = 0;
  uint64_t v15 = v13;
  long long v14 = v12;
  (*(void (**)(uint64_t, long long *))(*(void *)v10 + 16))(v10, &v14);
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  return WebCore::PageOverlay::setNeedsDisplay(*(WebCore::PageOverlay **)(a1 + 16));
}

uint64_t WebKit::WebFoundTextRangeController::removeLayerForFindOverlay(uint64_t this)
{
  if (*(void *)(this + 16)) {
    return WebCore::PageOverlayController::uninstallPageOverlay();
  }
  return this;
}

uint64_t WebKit::WebFoundTextRangeController::requestRectForFoundTextRange(WebKit::WebFoundTextRangeController *a1, uint64_t a2, uint64_t *a3)
{
  *(_OWORD *)&v23.var0 = *(_OWORD *)a2;
  uint64_t v4 = *(StringImpl **)(a2 + 16);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  unint64_t v5 = *(void *)(a2 + 24);
  v23.var2.var0.m_impl.m_ptr = v4;
  v23.unint64_t var3 = v5;
  WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange(a1, &v23, (uint64_t)v24);
  m_ptr = v23.var2.var0.m_impl.m_ptr;
  v23.var2.var0.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v6);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  if (v25)
  {
    uint64_t v8 = *(WebCore::ScrollView **)(*(void *)(*(void *)(*(void *)(*(void *)(v24[0] + 48) + 8) + 544) + 8)
                                 + 288);
    if (v8) {
      ++*((_DWORD *)v8 + 2);
    }
    WebCore::RenderObject::absoluteTextRects();
    v20[0] = WebCore::unionRect();
    v20[1] = v9;
    v21[0] = WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)v20);
    v21[1] = v10;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v22, (const WebCore::IntRect *)v21);
    float v11 = *(float *)v22;
    float v12 = *(float *)&v22[1];
    float v13 = *(float *)&v22[2];
    float v14 = *(float *)&v22[3];
    uint64_t v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, float, float, float, float))(*(void *)v15 + 16))(v15, v11, v12, v13, v14);
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    if (v19) {
      WTF::fastFree(v19, v16);
    }
    if (v8)
    {
      if (*((_DWORD *)v8 + 2) == 1) {
        (*(void (**)(WebCore::ScrollView *))(*(void *)v8 + 8))(v8);
      }
      else {
        --*((_DWORD *)v8 + 2);
      }
    }
  }
  else
  {
    uint64_t v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, double, double, double, double))(*(void *)v17 + 16))(v17, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24);
}

_DWORD *WebKit::WebFoundTextRangeController::willMoveToPage(_DWORD *this, WebCore::PageOverlay *a2, WebCore::Page *a3)
{
  if (!a3)
  {
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v3) {
      return WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v3 + 8));
    }
  }
  return this;
}

uint64_t WebKit::WebFoundTextRangeController::mouseEvent()
{
  return 0;
}

WTF *WebKit::WebFoundTextRangeController::drawRect(WebKit::WebFoundTextRangeController *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, int8x16_t *a4)
{
  uint64_t v6 = *((void *)this + 1);
  v7.i64[0] = 0xFFFFFFFF00000000;
  v7.i64[1] = 0xFFFFFFFF00000000;
  int64x2_t v61 = vaddq_s64((int64x2_t)vbslq_s8(v7, *a4, (int8x16_t)vaddq_s64(*(int64x2_t *)a4, (int64x2_t)xmmword_1994F78B0)), (int64x2_t)xmmword_1994F78C0);
  int v65 = 0;
  uint64_t v66 = 0;
  uint64_t v8 = *(void *)(v6 + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(*(void *)(v9 + 48) + 160);
  float v11 = (atomic_uint *)(v10 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, WebCore::PageOverlay *))(*(void *)v10 + 56))(v10, a2);
  float v13 = (WebCore::ScrollView *)v12;
  if (v12) {
    ++*(_DWORD *)(v12 + 8);
  }
  atomic_fetch_add(v11, 1u);
  while (1)
  {
    if (!*(unsigned char *)(v10 + 144))
    {
      uint64_t v14 = *(void *)(v10 + 296);
      if (v14)
      {
        *(_DWORD *)(v14 + 28) += 2;
        if (!*(void *)(v14 + 1536)) {
          WebCore::Document::ensureMarkers((WebCore::Document *)v14);
        }
        WebCore::DocumentMarkerController::renderedRectsForMarkers();
        int v16 = (WTF *)v73;
        if (v75)
        {
          uint64_t v17 = 16 * v75;
          do
          {
            *(_OWORD *)uint64_t v72 = *(_OWORD *)v16;
            if (*(void *)(*(void *)(v10 + 128) + 8) != v10)
            {
              uint64_t v18 = *(WebCore::ScrollView **)(v10 + 288);
              v67[0] = WebCore::enclosingIntRect((WebCore *)v72, v15);
              v67[1] = v19;
              v68[0] = WebCore::ScrollView::contentsToWindow(v18, (const WebCore::IntRect *)v67);
              v68[1] = v20;
              uint64_t v69 = WebCore::ScrollView::windowToContents(v13, (const WebCore::IntRect *)v68);
              uint64_t v70 = v21;
              WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v71, (const WebCore::IntRect *)&v69);
              *(_OWORD *)uint64_t v72 = *(_OWORD *)v71;
            }
            if (*(float *)&v72[1] > 0.0 && *((float *)&v72[1] + 1) > 0.0)
            {
              WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v71, (const WebCore::IntRect *)&v61);
              if (WebCore::FloatRect::intersects((WebCore::FloatRect *)v72, (const WebCore::FloatRect *)v71))
              {
                uint64_t v22 = HIDWORD(v66);
                if (HIDWORD(v66) == v66)
                {
                  WebFoundTextRange v23 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v65, HIDWORD(v66) + 1, (unint64_t)v72);
                  uint64_t v22 = HIDWORD(v66);
                  unsigned int v24 = v65;
                  long long v25 = *v23;
                }
                else
                {
                  unsigned int v24 = v65;
                  long long v25 = *(_OWORD *)v72;
                }
                *((_OWORD *)v24 + v22) = v25;
                ++HIDWORD(v66);
              }
            }
            int v16 = (WTF *)((char *)v16 + 16);
            v17 -= 16;
          }
          while (v17);
          int v16 = (WTF *)v73;
        }
        if (v16)
        {
          uint64_t v73 = 0;
          int v74 = 0;
          WTF::fastFree(v16, v15);
        }
        if (*(_DWORD *)(v14 + 28) == 2)
        {
          if ((*(_WORD *)(v14 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
        }
        else
        {
          *(_DWORD *)(v14 + 28) -= 2;
        }
      }
    }
    uint64_t v26 = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v10 + 48), 0);
    if (!v26) {
      break;
    }
    uint64_t v27 = v26;
    atomic_fetch_add((atomic_uint *volatile)(v26 + 8), 1u);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
    uint64_t v10 = v27;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1) {
      (*(void (**)(WebCore::ScrollView *))(*(void *)v13 + 8))(v13);
    }
    else {
      --*((_DWORD *)v13 + 2);
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v11);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v61, (const WebCore::IntRect *)a4);
  uint64_t v73 = 0x110400001A1A1A40;
  (*(void (**)(WebCore::GraphicsContext *, int64x2_t *, uint64_t *))(*(void *)a3 + 224))(a3, &v61, &v73);
  if ((v73 & 0x8000000000000) != 0)
  {
    char v56 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v56);
      WTF::fastFree((WTF *)v56, v28);
    }
  }
  WebCore::PathUtilities::pathsWithShrinkWrappedRects();
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 96))(a3, 1);
  v61.i64[0] = 0;
  v61.i32[2] = 1065353216;
  uint64_t v62 = 0x1104000000000080;
  char v63 = 0;
  int v64 = 1065353216;
  WebCore::GraphicsContext::setDropShadow((uint64_t)a3, (uint64_t)&v61);
  if ((v62 & 0x8000000000000) != 0)
  {
    uint64_t v57 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v57);
      WTF::fastFree((WTF *)v57, v29);
    }
  }
  v61.i64[0] = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContextState::setStrokeColor((WebCore::GraphicsContext *)((char *)a3 + 8), (const WebCore::Color *)&v61);
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(void *)a3 + 88))(a3, (char *)a3 + 8);
  if ((v61.i64[0] & 0x8000000000000) != 0)
  {
    long long v58 = (unsigned int *)(v61.i64[0] & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v61.i64[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v30);
    }
  }
  if (*((float *)a3 + 47) != 2.0)
  {
    *((_DWORD *)a3 + 46) |= 8u;
    *((_DWORD *)a3 + 47) = 0x40000000;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(void *)a3 + 88))(a3, (char *)a3 + 8);
  if (v75)
  {
    uint64_t v31 = v73;
    uint64_t v32 = 72 * v75;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 184))(a3, v31);
      v31 += 72;
      v32 -= 72;
    }
    while (v32);
  }
  WebCore::GraphicsContext::clearDropShadow(a3);
  WebCore::GraphicsContext::setCompositeMode((uint64_t)a3, 256);
  if (v75)
  {
    uint64_t v33 = v73;
    uint64_t v34 = 72 * v75;
    do
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 176))(a3, v33);
      v33 += 72;
      v34 -= 72;
    }
    while (v34);
  }
  int v35 = (float32x2_t *)*((void *)this + 9);
  if (v35)
  {
    if (v35[2].f32[0] > 0.0 && v35[2].f32[1] > 0.0)
    {
      uint64_t v36 = (_DWORD *)v35[12];
      if (v36)
      {
        ++v36[2];
        float32x2_t v38 = v35[3];
        uint64_t v37 = (uint64_t)v35[4];
        *(float32x2_t *)v61.i8 = v38;
        v61.i64[1] = v37;
        uint64_t result = (WTF *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v72, (uint64_t)&v35[7]);
        v71[0] = 0;
        v71[1] = 0;
        int v40 = HIDWORD(v72[1]);
        if (HIDWORD(v72[1]))
        {
          if (HIDWORD(v72[1]) >> 28)
          {
            __break(0xC471u);
            return result;
          }
          unint64_t v41 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v72[1])));
          LODWORD(v71[1]) = v40;
          v71[0] = v41;
          int v42 = HIDWORD(v72[1]);
          if (HIDWORD(v72[1]))
          {
            uint64_t v43 = (void *)((char *)v41 + 8);
            uint64_t v44 = (uint64_t *)((char *)v72[0] + 8);
            uint64_t v45 = HIDWORD(v72[1]);
            do
            {
              uint64_t v46 = *v44;
              *(v43 - 1) = vadd_f32(v38, (float32x2_t)*(v44 - 1));
              *uint64_t v43 = v46;
              v43 += 2;
              v44 += 2;
              --v45;
            }
            while (v45);
            HIDWORD(v71[1]) = v42;
          }
        }
        WebCore::PathUtilities::pathsWithShrinkWrappedRects();
        WebCore::GraphicsContext::setCompositeMode((uint64_t)a3, 258);
        v68[0] = 0x11040000FFE438FFLL;
        WebCore::GraphicsContextState::setFillColor((WebCore::GraphicsContext *)((char *)a3 + 8), (const WebCore::Color *)v68);
        (*(void (**)(WebCore::GraphicsContext *, char *))(*(void *)a3 + 88))(a3, (char *)a3 + 8);
        if ((v68[0] & 0x8000000000000) != 0)
        {
          long long v59 = (unsigned int *)(v68[0] & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v68[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v59);
            WTF::fastFree((WTF *)v59, v47);
          }
        }
        if (HIDWORD(v70))
        {
          uint64_t v48 = v69;
          uint64_t v49 = 72 * HIDWORD(v70);
          do
          {
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 176))(a3, v48);
            v48 += 72;
            v49 -= 72;
          }
          while (v49);
        }
        WebCore::GraphicsContext::drawImage();
        WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v50);
        uint64_t v52 = v71[0];
        if (v71[0])
        {
          v71[0] = 0;
          LODWORD(v71[1]) = 0;
          WTF::fastFree(v52, v51);
        }
        uint64_t v53 = v72[0];
        if (v72[0])
        {
          v72[0] = 0;
          LODWORD(v72[1]) = 0;
          WTF::fastFree(v53, v51);
        }
        if (v36[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
        }
        else {
          --v36[2];
        }
      }
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a3 + 104))(a3, 1);
  WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v54);
  uint64_t result = v65;
  if (v65)
  {
    int v65 = 0;
    LODWORD(v66) = 0;
    return (WTF *)WTF::fastFree(result, v55);
  }
  return result;
}

uint64_t WebKit::WebFoundTextRangeController::createTextIndicatorForRange(uint64_t a1)
{
  WebCore::ImageOverlay::isInsideOverlay();
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  WebCore::Page::checkedFocusController((uint64_t *)&v10, *(WebCore::Page **)(v3 + 48));
  uint64_t v4 = WebCore::FocusController::focusedOrMainFrame(v10);
  uint64_t v5 = v4;
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  }
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (v6)
  {
    if (!*(_DWORD *)v6)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    --*(_DWORD *)v6;
  }
  if (v4)
  {
    int8x16_t v7 = (_WORD *)(*(void *)(*(void *)(v4 + 296) + 3096) + 257);
    *v7 |= 0x100u;
    WebCore::FrameSelection::updateAppearance(*(WebCore::FrameSelection **)(*(void *)(v4 + 296) + 3096));
    uint64_t v8 = (_WORD *)(*(void *)(*(void *)(v5 + 296) + 3096) + 257);
    *v8 &= ~0x100u;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return WebCore::TextIndicator::createWithRange();
}

unsigned int *WebKit::WebFrame::createSubframe@<X0>(WebKit::WebFrame *this@<X0>, WebKit::WebPage *a2@<X1>, WebKit::WebFrame *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v10 = (WebCore::Process *)WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v11 = WebCore::Process::identifier(v10);
  uint64_t v12 = API::Object::newObject(0x78uLL, 137);
  uint64_t v13 = WebKit::WebFrame::WebFrame(v12, (uint64_t)this, (uint64_t)v10, v11);
  *a4 = v13;
  CFRetain(*(CFTypeRef *)(v13 + 8));
  uint64_t v14 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = (uint64_t)&unk_1EE9F85B8;
  v14[1] = v12;
  v32[0] = v14;
  WebCore::LocalFrame::createSubframe();
  uint64_t v15 = v32[0];
  v32[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t *))(*v15 + 8))(v15);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v33 + 4, (uint64_t)v33);
  uint64_t v17 = (atomic_uint *)*((void *)v33 + 2);
  if (v17)
  {
    atomic_fetch_add(v17, 1u);
    uint64_t v12 = *a4;
  }
  uint64_t v18 = *(unsigned int **)(v12 + 24);
  *(void *)(v12 + 24) = v17;
  if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v16);
  }
  long long v19 = *((_OWORD *)a2 + 5);
  long long v30 = *((_OWORD *)v33 + 2);
  long long v31 = v19;
  v32[0] = (uint64_t *)&v31;
  v32[1] = (uint64_t *)&v30;
  v32[2] = (uint64_t *)a3;
  uint64_t v21 = *((void *)this + 4);
  uint64_t v20 = (char *)this + 32;
  uint64_t v22 = (*(uint64_t (**)(char *))(v21 + 56))(v20);
  WebFoundTextRange v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)WebFoundTextRange v23 = 1909;
  *((void *)v23 + 1) = v22;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  uint64_t v34 = v23;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&>,0ul,1ul,2ul>(v23, v32);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v20 + 32))(v20, &v34, 0);
  long long v25 = v34;
  uint64_t v34 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v24);
    WTF::fastFree(v28, v29);
  }
  WebCore::FrameTree::setSpecifiedName((WebCore::LocalFrame *)((char *)v33 + 48), (const AtomString *)a3);
  uint64_t result = (unsigned int *)WebCore::LocalFrame::init(v33);
  uint64_t v27 = v33;
  uint64_t v33 = 0;
  if (v27) {
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v27 + 2);
  }
  return result;
}

uint64_t WebKit::WebFrame::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = API::Object::newObject(0x78uLL, 137);
  uint64_t result = WebKit::WebFrame::WebFrame(v8, a2, a3, a4);
  *a1 = result;
  return result;
}

WTF::StringImpl *WebKit::WebFrame::createRemoteSubframe@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF::AtomStringImpl **a5@<X4>, uint64_t *a6@<X8>)
{
  WebKit::WebFrame::create(a6, a1, a3, a4);
  if (!*(void *)(a1 + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x199201544);
  }
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10 || !*(void *)(v10 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x199201524);
  }
  uint64_t v11 = *a6;
  CFRetain(*(CFTypeRef *)(*a6 + 8));
  uint64_t v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v12 = &unk_1EE9F85E0;
  *((void *)v12 + 1) = v11;
  uint64_t v21 = v12;
  WebCore::RemoteFrame::createSubframe();
  uint64_t v13 = v21;
  uint64_t v21 = 0;
  if (v13) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v13 + 8))(v13);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v22 + 16), v22);
  uint64_t v15 = *(atomic_uint **)(v22 + 16);
  if (v15)
  {
    atomic_fetch_add(v15, 1u);
    uint64_t v11 = *a6;
  }
  int v16 = *(unsigned int **)(v11 + 24);
  *(void *)(v11 + 24) = v15;
  if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v14);
  }
  uint64_t v17 = (WebCore::FrameTree *)(v22 + 48);
  WTF::AtomString::AtomString((WTF::AtomString *)&v21, a5);
  WebCore::FrameTree::setSpecifiedName(v17, (const AtomString *)&v21);
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  uint64_t v20 = v22;
  uint64_t v22 = 0;
  if (v20) {
    return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v20 + 8));
  }
  return result;
}

uint64_t WebKit::WebFrame::localFrameLoaderClient(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || *(unsigned char *)(v2 + 144)) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(v2 + 280) + 16);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 1072))(v4)) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t WebKit::WebFrame::frameLoaderClient(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (*(unsigned char *)(v2 + 144)) {
    return *(void *)(v2 + 264) + 8;
  }
  uint64_t v4 = *(void *)(*(void *)(v2 + 280) + 16);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 1072))(v4);
  if (v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v7 = v6 + 8;
  if (v5) {
    return 0;
  }
  else {
    return v7;
  }
}

void WebKit::WebFrame::~WebFrame(WebKit::WebFrame *this, void *a2)
{
  *(void *)this = &unk_1EE9F8340;
  uint64_t v3 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  uint64_t v8 = *((void *)this + 2);
  if (v8)
  {
    *(void *)(v8 + 8) = 0;
    uint64_t v9 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v9)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::WebFrame::~WebFrame(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebFrame::protectedPage@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 24);
  if (v3
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && (uint64_t v5 = *(void *)(v4 + 24)) != 0
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (uint64_t v7 = *(void **)(*(void *)(v6 + 48) + 16),
        this = (*(uint64_t (**)(void *))(*v7 + 1368))(v7),
        (this & 1) == 0)
    && (uint64_t v8 = *(void *)(v7[2] + 8)) != 0)
  {
    uint64_t v9 = v8 - 16;
    this = (uint64_t)CFRetain(*(CFTypeRef *)(v8 - 8));
  }
  else
  {
    uint64_t v9 = 0;
  }
  *a2 = v9;
  return this;
}

void WebKit::WebFrame::info(WebKit::WebFrame *this@<X0>, uint64_t a2@<X8>)
{
  WebKit::WebFrame::parentFrame((unsigned int *)this, &v19);
  uint64_t v4 = *((void *)this + 3);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    *(unsigned char *)a2 = *(void *)(*(void *)(v5 + 128) + 8) == v5;
    BOOL v6 = *(unsigned char *)(v5 + 144) != 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    BOOL v6 = 1;
  }
  *(unsigned char *)(a2 + 1) = v6;
  WebKit::WebFrame::url(this, (uint64_t)v18);
  WebCore::ResourceRequestBase::ResourceRequestBase(a2 + 8, (const String *)v18, 0);
  *(void *)(a2 + 200) = 0;
  uint64_t v8 = *((void *)this + 3);
  if (v8 && (uint64_t v9 = *(WebCore::SecurityOriginData **)(v8 + 8)) != 0)
  {
    if (*((unsigned char *)v9 + 144)) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  WebCore::SecurityOriginData::fromFrame(v10, v7);
  uint64_t v11 = *((void *)this + 3);
  if (v11)
  {
    uint64_t v11 = *(void *)(v11 + 8);
    if (v11)
    {
      uint64_t v11 = *(void *)(v11 + 64);
      if (v11) {
        *(_DWORD *)v11 += 2;
      }
    }
  }
  *(void *)(a2 + 240) = v11;
  *(_OWORD *)(a2 + 248) = *((_OWORD *)this + 5);
  uint64_t v12 = (_OWORD *)(a2 + 264);
  uint64_t v13 = v19;
  if (v19)
  {
    _OWORD *v12 = *(_OWORD *)(v19 + 80);
    char v14 = 1;
  }
  else
  {
    char v14 = 0;
    *(unsigned char *)uint64_t v12 = 0;
  }
  *(unsigned char *)(a2 + 280) = v14;
  *(_DWORD *)(a2 + 288) = getpid();
  *(unsigned char *)(a2 + 292) = WebKit::WebFrame::isFocused(this);
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    uint64_t v16 = *(void *)(v16 + 8);
    if (v16)
    {
      if (*(unsigned char *)(v16 + 144)) {
        LOBYTE(v16) = 0;
      }
      else {
        LOBYTE(v16) = *(unsigned char *)(*(void *)(v16 + 280) + 397) != 0;
      }
    }
  }
  *(unsigned char *)(a2 + 293) = v16;
  uint64_t v17 = v18[0];
  v18[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v15);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

unsigned int *WebKit::WebFrame::parentFrame@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v5 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    uint64_t v6 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v4 + 48));
    if (v6)
    {
      uint64_t v7 = (unsigned int *)(v6 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
      WebKit::WebFrame::fromCoreFrame(v6, a2);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
    }
    else
    {
      *a2 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::url@<X0>(WebKit::WebFrame *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    uint64_t v6 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    uint64_t v7 = *(_DWORD **)(*(void *)(v4 + 280) + 88);
    if (v7)
    {
      ++v7[6];
      uint64_t v8 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 218));
      uint64_t v9 = *(_DWORD **)v8;
      if (*(void *)v8) {
        *v9 += 2;
      }
      *(void *)a2 = v9;
      long long v10 = *(_OWORD *)(v8 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(a2 + 8) = v10;
      if (v7[6] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 24))(v7);
      }
      else {
        --v7[6];
      }
    }
    else
    {
      *(void *)a2 = 0;
      WTF::URL::invalidate((WTF::URL *)a2);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *(void *)a2 = 0;
    return (unsigned int *)WTF::URL::invalidate((WTF::URL *)a2);
  }
}

BOOL WebKit::WebFrame::isFocused(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(v4 + 72) + 16);
  if (v5) {
    uint64_t v5 = *(void *)(v5 + 8);
  }
  return v5 == v2;
}

void WebKit::WebFrame::frameTreeData(WebKit::WebFrame *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  WebKit::WebFrame::info(this, a2);
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      unsigned int v6 = WebCore::FrameTree::childCount((WebCore::FrameTree *)(v5 + 48));
      if (v6)
      {
        if (v6 >= 0xD20D21)
        {
          __break(0xC471u);
          return;
        }
        unsigned int v7 = 312 * v6;
        uint64_t v8 = WTF::fastMalloc((WTF *)(312 * v6));
        *(_DWORD *)(a2 + 304) = v7 / 0x138;
        *(void *)(a2 + 296) = v8;
      }
      for (uint64_t i = *(void *)(*(void *)(*((void *)this + 3) + 8) + 88); i; uint64_t i = *(void *)(i + 72))
      {
        WebKit::WebFrame::fromCoreFrame(i, &v30);
        long long v10 = v30;
        if (v30)
        {
          WebKit::WebFrame::frameTreeData(&v32, v30);
          unsigned int v11 = *(_DWORD *)(a2 + 308);
          if (v11 == *(_DWORD *)(a2 + 304))
          {
            WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>(a2 + 296, (unint64_t)&v32);
          }
          else
          {
            uint64_t v13 = *(void *)(a2 + 296) + 312 * v11;
            *(_WORD *)uint64_t v13 = v32;
            WTF::URL::URL(v13 + 8, v33);
            WTF::URL::URL(v13 + 48, v34);
            *(void *)(v13 + 88) = v34[5];
            uint64_t v14 = v35;
            uint64_t v35 = 0;
            *(void *)(v13 + 104) = 0;
            *(void *)(v13 + 112) = 0;
            *(void *)(v13 + 96) = v14;
            uint64_t v15 = v36;
            uint64_t v36 = 0;
            *(void *)(v13 + 104) = v15;
            LODWORD(v15) = v37;
            int v37 = 0;
            *(_DWORD *)(v13 + 112) = v15;
            LODWORD(v15) = v38;
            int v38 = 0;
            *(_DWORD *)(v13 + 116) = v15;
            *(void *)(v13 + 120) = 0;
            *(void *)(v13 + 128) = 0;
            uint64_t v16 = v39;
            uint64_t v39 = 0;
            *(void *)(v13 + 120) = v16;
            LODWORD(v16) = v40;
            int v40 = 0;
            *(_DWORD *)(v13 + 128) = v16;
            LODWORD(v16) = v41;
            int v41 = 0;
            *(_DWORD *)(v13 + 132) = v16;
            *(void *)(v13 + 136) = 0;
            *(void *)(v13 + 144) = 0;
            uint64_t v17 = v42;
            uint64_t v42 = 0;
            *(void *)(v13 + 136) = v17;
            LODWORD(v17) = v43;
            int v43 = 0;
            *(_DWORD *)(v13 + 144) = v17;
            LODWORD(v17) = v44;
            int v44 = 0;
            *(_DWORD *)(v13 + 148) = v17;
            LODWORD(v17) = v45;
            *(unsigned char *)(v13 + 156) = v46;
            *(_DWORD *)(v13 + 152) = v17;
            uint64_t v18 = v47;
            uint64_t v47 = 0;
            *(void *)(v13 + 160) = v18;
            uint64_t v19 = v48;
            uint64_t v48 = 0;
            *(void *)(v13 + 168) = v19;
            uint64_t v20 = v49;
            uint64_t v49 = 0;
            *(void *)(v13 + 176) = v20;
            uint64_t v21 = v50;
            *(unsigned char *)(v13 + 192) = v51;
            *(void *)(v13 + 184) = v21;
            CFTypeRef v22 = cf;
            CFTypeRef cf = 0;
            *(unsigned char *)(v13 + 208) = 0;
            v13 += 208;
            *(void *)(v13 - 8) = v22;
            *(_DWORD *)(v13 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v13, (uint64_t)v53);
            WebFoundTextRange v23 = v55;
            __int16 v55 = 0;
            *(void *)(v13 + 32) = v23;
            long long v24 = v56;
            long long v25 = v57[0];
            *(_OWORD *)(v13 + 70) = *(_OWORD *)((char *)v57 + 14);
            *(_OWORD *)(v13 + 56) = v25;
            *(_OWORD *)(v13 + 40) = v24;
            *(void *)(v13 + 88) = 0;
            *(void *)(v13 + 96) = 0;
            uint64_t v26 = v58;
            uint64_t v58 = 0;
            *(void *)(v13 + 88) = v26;
            LODWORD(v26) = v59;
            int v59 = 0;
            *(_DWORD *)(v13 + 96) = v26;
            LODWORD(v26) = v60;
            int v60 = 0;
            *(_DWORD *)(v13 + 100) = v26;
            ++*(_DWORD *)(a2 + 308);
          }
          WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v12);
          BOOL v28 = v55;
          __int16 v55 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v27);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          if (v54 != -1) {
            ((void (*)(char *, unsigned char *))off_1EE9F8438[v54])(&v31, v53);
          }
          int v54 = -1;
          CFTypeRef v29 = cf;
          CFTypeRef cf = 0;
          if (v29) {
            CFRelease(v29);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v33);
          CFRelease(*((CFTypeRef *)v10 + 1));
        }
      }
    }
  }
}

unsigned int *WebKit::WebFrame::invalidate(WebKit::WebFrame *this)
{
  {
    unsigned int v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v2 = *((void *)this + 4);
  if (v2 && (uint64_t v2 = *(void *)(v2 + 8)) != 0)
  {
    uint64_t v2 = *(void *)(v2 + 2104);
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFF00;
    uint64_t v2 = v2;
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  WebKit::WebProcess::removeWebFrame((void *)WebKit::WebProcess::singleton(void)::process, *((void *)this + 10), *((void *)this + 11), v4 | v2, v3);
  uint64_t result = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

uint64_t WebKit::WebFrame::setUpPolicyListener(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v3 = WebKit::generateListenerID(void)::uniqueListenerID++;
  uint64_t v10 = v3;
  v8[0] = a3;
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v9 = v4;
  WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::add<WebKit::WebFrame::PolicyCheck>((uint64_t *)(a1 + 48), &v10, v8, (uint64_t)&v7);
  uint64_t v5 = v9;
  uint64_t v9 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v10;
}

uint64_t *WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::add<WebKit::WebFrame::PolicyCheck>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  unsigned int v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  uint64_t v16 = (uint64_t *)(v8 + 24 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    BOOL v28 = 0;
    int v29 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = *(_DWORD *)(v8 - 4);
        }
        char v27 = 0;
        uint64_t v26 = v8 + 24 * v30;
        goto LABEL_14;
      }
      if (v17 == -1) {
        BOOL v28 = v16;
      }
      unsigned int v15 = (v15 + v29) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 24 * v15);
      uint64_t v17 = *v16;
      ++v29;
    }
    while (*v16);
    if (v28)
    {
      *BOOL v28 = 0;
      v28[1] = 0;
      uint64_t v28[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v28;
    }
  }
  *uint64_t v16 = v11;
  char v18 = *a3;
  uint64_t v19 = *((void *)a3 + 1);
  *((void *)a3 + 1) = 0;
  *((unsigned char *)v16 + 8) = v18;
  uint64_t result = (uint64_t *)v16[2];
  void v16[2] = v19;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
    uint64_t v16 = result;
    uint64_t v22 = *v6;
    if (*v6) {
      LODWORD(v25) = *(_DWORD *)(v22 - 4);
    }
    else {
      LODWORD(v25) = 0;
    }
    goto LABEL_13;
  }
  if (3 * v25 <= 4 * v24) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v26 = v22 + 24 * v25;
  char v27 = 1;
LABEL_14:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 16) = v27;
  return result;
}

unsigned int *WebKit::WebFrame::loadDidCommitInAnotherProcess(unsigned int *result)
{
  uint64_t v1 = *((void *)result + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
        uint64_t v3 = *(void *)(v2 + 24);
        if (!v3) {
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
        }
        uint64_t v4 = *(void *)(v3 + 8);
        if (!v4) {
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
        }
        uint64_t v5 = result;
        uint64_t v6 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v2 + 48));
        uint64_t v7 = v6;
        if (v6) {
          atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
        }
        uint64_t v8 = *(void *)(v2 + 120);
        if (v8)
        {
          uint64_t v9 = *(void *)(v8 + 8);
          if (v9)
          {
            char v10 = 0;
            *(_DWORD *)(v9 + 28) += 2;
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        char v10 = 1;
LABEL_11:
        uint64_t v11 = WebKit::WebFrame::localFrameLoaderClient((WebKit::WebFrame *)v5);
        if (!v11)
        {
LABEL_50:
          if ((v10 & 1) == 0)
          {
            if (*(_DWORD *)(v9 + 28) == 2)
            {
              if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v9);
              }
            }
            else
            {
              *(_DWORD *)(v9 + 28) -= 2;
            }
          }
          if (v7) {
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
          }
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
        }
        char v24 = v10;
        uint64_t v12 = *(void *)(v11 + 24);
        *(void *)(v11 + 24) = 0;
        char v13 = *(unsigned char *)(v11 + 32);
        *(unsigned char *)(v11 + 32) = 0;
        uint64_t v23 = WebCore::Frame::ownerRenderer((WebCore::Frame *)v2);
        WebCore::LocalFrame::setView();
        if (v7) {
          WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v7 + 48), (WebCore::Frame *)v2);
        }
        if (v9) {
          WebCore::Frame::disconnectOwnerElement((WebCore::Frame *)v2);
        }
        CFRetain(*((CFTypeRef *)v5 + 1));
        uint64_t v32 = 0;
        char v33 = 0;
        if (v9)
        {
          uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v14 = &unk_1EE9F8630;
          *(void *)(v14 + 8) = v5;
          uint64_t v30 = 0;
          *(void *)(v14 + 16) = v12;
          char v31 = 0;
          *(unsigned char *)(v14 + 24) = v13;
          uint64_t v25 = v14;
          WebCore::RemoteFrame::createSubframeWithContentsInAnotherProcess();
          if (v25) {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
          char v10 = v24;
          uint64_t v15 = v23;
          if (v7) {
            goto LABEL_29;
          }
        }
        else
        {
          if (v7)
          {
            uint64_t v16 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v16 = &unk_1EE9F8630;
            *(void *)(v16 + 8) = v5;
            uint64_t v30 = 0;
            *(void *)(v16 + 16) = v12;
            char v31 = 0;
            *(unsigned char *)(v16 + 24) = v13;
            uint64_t v26 = v16;
            WebCore::RemoteFrame::createSubframe();
            if (v26) {
              (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
            }
            char v10 = v24;
            uint64_t v15 = v23;
            goto LABEL_29;
          }
          uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v17 = &unk_1EE9F8630;
          *(void *)(v17 + 8) = v5;
          uint64_t v30 = 0;
          *(void *)(v17 + 16) = v12;
          char v31 = 0;
          *(unsigned char *)(v17 + 24) = v13;
          uint64_t v27 = v17;
          char v10 = v24;
          uint64_t v15 = v23;
          WebCore::RemoteFrame::createMainFrame();
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
        }
        atomic_fetch_add((atomic_uint *volatile)v29 + 2, 1u);
        WebCore::Page::setMainFrame();
        if (v29) {
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v29 + 2);
        }
LABEL_29:
        WebCore::Frame::takeWindowProxyAndOpenerFrom(v29, (WebCore::Frame *)v2);
        WebCore::FrameTree::setSpecifiedName((WebCore::Frame *)((char *)v29 + 48), (const AtomString *)(v2 + 64));
        if (v15)
        {
          char v18 = (_DWORD *)*((void *)v29 + 32);
          if (v18) {
            ++v18[2];
          }
          BOOL v28 = v18;
          WebCore::RenderWidget::setWidget();
          if (v28)
          {
            if (v28[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
            }
            else {
              --v28[2];
            }
          }
        }
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v29 + 4, (uint64_t)v29);
        uint64_t v20 = (atomic_uint *)*((void *)v29 + 2);
        if (v20) {
          atomic_fetch_add(v20, 1u);
        }
        int v21 = (unsigned int *)*((void *)v5 + 3);
        *((void *)v5 + 3) = v20;
        if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v19);
        }
        uint64_t v22 = *(void *)(*(void *)(v4 + 72) + 16);
        if (v22) {
          uint64_t v22 = *(void *)(v22 + 8);
        }
        if (v22 == v2) {
          WebCore::FocusController::setFocusedFrame();
        }
        WebCore::FrameLoader::detachFromParent(*(WebCore::FrameLoader **)(v2 + 280));
        if (v9) {
          WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition((WebCore::HTMLFrameOwnerElement *)v9);
        }
        if (v29) {
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v29 + 2);
        }
        WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(&v30);
        WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(&v32);
        goto LABEL_50;
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebFrame::createProvisionalFrame(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4 && *(void *)(v4 + 8))
        {
          uint64_t v6 = result;
          uint64_t v7 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v3 + 48));
          uint64_t v8 = v7;
          if (v7)
          {
            atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
            CFRetain(*((CFTypeRef *)v6 + 1));
            uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
            *uint64_t v9 = &unk_1EE9F8658;
            v9[1] = v6;
            v9[2] = v6;
            uint64_t v12 = v9;
            WebCore::LocalFrame::createProvisionalSubframe();
          }
          else
          {
            CFRetain(*((CFTypeRef *)v6 + 1));
            uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
            *uint64_t v11 = &unk_1EE9F8658;
            v11[1] = v6;
            v11[2] = v6;
            uint64_t v12 = v11;
            WebCore::LocalFrame::createMainFrame();
          }
          if (v12) {
            (*(void (**)(void *))(*v12 + 8))(v12);
          }
          if (v13) {
            atomic_fetch_add(v13 + 2, 1u);
          }
          uint64_t v10 = *((void *)v6 + 5);
          *((void *)v6 + 5) = v13;
          if (v10) {
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
          }
          WebCore::LocalFrame::init((WebCore::LocalFrame *)v13);
          if (*(unsigned char *)(a2 + 8)) {
            *((void *)v6 + 14) = *(void *)a2;
          }
          if (v13) {
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v13 + 2);
          }
          if (v8) {
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
          }
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebFrame::destroyProvisionalFrame(unsigned int *this)
{
  uint64_t v1 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(*(void *)(v1 + 280) + 16);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 1072))(v2) & 1) == 0)
    {
      uint64_t v3 = *(_DWORD **)(v2 + 24);
      *(void *)(v2 + 24) = 0;
      uint64_t v7 = v3;
      *(unsigned char *)(v2 + 32) = 0;
      char v8 = 0;
      WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(&v7);
    }
    uint64_t v4 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v1 + 48));
    if (v4)
    {
      uint64_t v5 = (unsigned int *)(v4 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
      WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v4 + 48), (WebCore::Frame *)v1);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
    }
    WebCore::FrameLoader::detachFromParent(*(WebCore::FrameLoader **)(v1 + 280));
    uint64_t v7 = 0;
    WebCore::LocalFrame::setView();
    uint64_t v6 = v7;
    uint64_t v7 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  }
  return this;
}

unsigned int *WebKit::WebFrame::commitProvisionalFrame(unsigned int *this)
{
  uint64_t v1 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = *((void *)this + 3);
    if (!v3) {
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
    }
    uint64_t v4 = *(void *)(v3 + 8);
    if (!v4 || !*(unsigned char *)(v4 + 144)) {
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
    }
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    uint64_t v5 = *(void *)(v4 + 24);
    if (!v5 || (uint64_t v6 = *(void *)(v5 + 8)) == 0)
    {
LABEL_41:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
    }
    uint64_t v7 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v4 + 48));
    uint64_t v8 = v7;
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
    }
    uint64_t v9 = *(void *)(v4 + 120);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10)
      {
        char v11 = 0;
        *(_DWORD *)(v10 + 28) += 2;
LABEL_12:
        uint64_t v12 = WebCore::Frame::ownerRenderer((WebCore::Frame *)v4);
        if (v8) {
          WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v8 + 48), (WebCore::Frame *)v4);
        }
        WebCore::Frame::disconnectOwnerElement((WebCore::Frame *)v4);
        uint64_t v13 = *(void *)(v4 + 264);
        uint64_t v14 = *(_DWORD **)(v13 + 24);
        *(void *)(v13 + 24) = 0;
        uint64_t v23 = v14;
        *(unsigned char *)(v13 + 32) = 0;
        char v24 = 0;
        WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(&v23);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v1 + 16), v1);
        uint64_t v16 = *(atomic_uint **)(v1 + 16);
        if (v16) {
          atomic_fetch_add(v16, 1u);
        }
        uint64_t v17 = (unsigned int *)*((void *)v2 + 3);
        *((void *)v2 + 3) = v16;
        if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, v15);
        }
        uint64_t v23 = 0;
        WebCore::RemoteFrame::setView();
        char v18 = v23;
        uint64_t v23 = 0;
        if (v18)
        {
          if (v18[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
          }
          else {
            --v18[2];
          }
        }
        WebCore::FrameTree::setSpecifiedName((WebCore::FrameTree *)(v1 + 48), (const AtomString *)(v4 + 64));
        if (v12)
        {
          uint64_t v19 = *(_DWORD **)(v1 + 288);
          if (v19) {
            ++v19[2];
          }
          uint64_t v23 = v19;
          WebCore::RenderWidget::setWidget();
          uint64_t v20 = v23;
          uint64_t v23 = 0;
          if (v20)
          {
            if (v20[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
            }
            else {
              --v20[2];
            }
          }
        }
        WebCore::Frame::setOwnerElement((WebCore::Frame *)v1, (WebCore::HTMLFrameOwnerElement *)v10);
        if (*(void *)(*(void *)(v4 + 128) + 8) == v4)
        {
          atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
          uint64_t v23 = (_DWORD *)v1;
          WebCore::Page::setMainFrame();
          int v21 = v23;
          uint64_t v23 = 0;
          if (v21) {
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v21 + 2);
          }
        }
        WebCore::Frame::takeWindowProxyAndOpenerFrom((WebCore::Frame *)v1, (WebCore::Frame *)v4);
        uint64_t v22 = *(void *)(*(void *)(v6 + 72) + 16);
        if (v22 && *(void *)(v22 + 8) == v4) {
          WebCore::FocusController::setFocusedFrame();
        }
        if (v10) {
          WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition((WebCore::HTMLFrameOwnerElement *)v10);
        }
        if ((v11 & 1) == 0)
        {
          if (*(_DWORD *)(v10 + 28) == 2)
          {
            if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
          }
          else
          {
            *(_DWORD *)(v10 + 28) -= 2;
          }
        }
        if (v8) {
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
        }
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    char v11 = 1;
    goto LABEL_12;
  }
  return this;
}

unsigned int *WebKit::WebFrame::removeFromTree(unsigned int *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(atomic_uint **)(v1 + 8);
    if (v2)
    {
      atomic_fetch_add(v2 + 2, 1u);
      uint64_t v3 = *((void *)this + 4);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          CFRetain(*(CFTypeRef *)(v4 - 8));
          if (*(void *)(v4 + 32))
          {
            uint64_t v5 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v2 + 12));
            if (v5)
            {
              uint64_t v6 = (unsigned int *)(v5 + 8);
              atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
              WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v5 + 48), (WebCore::Frame *)v2);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
            }
            (*(void (**)(atomic_uint *))(*(void *)v2 + 64))(v2);
          }
          CFRelease(*(CFTypeRef *)(v4 - 8));
        }
      }
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v2 + 2);
    }
  }
  return this;
}

void WebKit::WebFrame::invalidatePolicyListeners(CFTypeRef *this)
{
  CFRetain(this[1]);
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 64) = 0;
  uint64_t v8 = this[6];
  this[6] = 0;
  uint64_t v3 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::begin(&v8);
  uint64_t v4 = v2;
  uint64_t v5 = 0;
  uint64_t v6 = v8;
  if (v8) {
    uint64_t v5 = &v8[3 * *((unsigned int *)v8 - 1)];
  }
  if (v5 != v3)
  {
    do
    {
      uint64_t v7 = v3[2];
      v3[2] = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, 2);
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      while (1)
      {
        v3 += 3;
        if (v3 == v4) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v3 = v4;
LABEL_13:
      ;
    }
    while (v3 != v5);
    uint64_t v6 = v8;
  }
  if (v6) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable((uint64_t)v6, v2);
  }
  if (this) {
    CFRelease(this[1]);
  }
}

void WebKit::WebFrame::didReceivePolicyDecision(CFTypeRef *this, uint64_t a2, __int16 *a3)
{
  uint64_t v5 = (WebKit::WebFrame *)this;
  uint64_t v6 = this[4];
  if (v6)
  {
    uint64_t v7 = v6[1];
    if (v7)
    {
      __int16 v8 = *a3;
      CFRetain(this[1]);
      *((_WORD *)v5 + 52) = v8;
      *(unsigned char *)(v7 + 2234) = 1;
      CFRelease(*((CFTypeRef *)v5 + 1));
      if (*((unsigned char *)a3 + 200))
      {
        uint64_t v43 = *((void *)v5 + 4);
        if (v43)
        {
          uint64_t v44 = *(void *)(v43 + 8);
          if (v44) {
            uint64_t v45 = v44 - 16;
          }
          else {
            uint64_t v45 = 0;
          }
        }
        else
        {
          uint64_t v45 = 0;
        }
        WebKit::WebPage::addConsoleMessage(v45, *((void *)v5 + 10), *((void *)v5 + 11));
      }
    }
  }
  uint64_t v9 = *((void *)v5 + 3);
  if (v9)
  {
    if (*(void *)(v9 + 8))
    {
      uint64_t v10 = (uint64_t *)((char *)v5 + 48);
      uint64_t v11 = *((void *)v5 + 6);
      if (v11)
      {
        int v12 = *(_DWORD *)(v11 - 8);
        unint64_t v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
        uint64_t v17 = (uint64_t *)(v11 + 24 * v16);
        uint64_t v18 = *v17;
        if (*v17 != a2)
        {
          int v42 = 1;
          while (v18)
          {
            unsigned int v16 = (v16 + v42) & v12;
            uint64_t v17 = (uint64_t *)(v11 + 24 * v16);
            uint64_t v18 = *v17;
            ++v42;
            if (*v17 == a2) {
              goto LABEL_8;
            }
          }
          uint64_t v17 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
        }
LABEL_8:
        if ((uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4)) != v17)
        {
          uint64_t v19 = 0;
          int v20 = *((unsigned __int8 *)v17 + 8);
          uint64_t v21 = v17[2];
          v17[2] = 0;
          if (!*v10 || (uint64_t v19 = *v10 + 24 * *(unsigned int *)(*v10 - 4), (uint64_t *)v19 != v17))
          {
            if ((uint64_t *)v19 != v17)
            {
              uint64_t *v17 = -1;
              v17[2] = 0;
              ++*(_DWORD *)(*v10 - 16);
              uint64_t v22 = *v10;
              int v23 = *v10 ? *(_DWORD *)(v22 - 12) - 1 : -1;
              *(_DWORD *)(v22 - 12) = v23;
              uint64_t v24 = *v10;
              if (*v10)
              {
                unsigned int v25 = 6 * *(_DWORD *)(v24 - 12);
                unsigned int v26 = *(_DWORD *)(v24 - 4);
                if (v25 < v26 && v26 >= 9) {
                  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v10, v26 >> 1, 0);
                }
              }
            }
          }
          if (v21)
          {
            if (!v20 || !WebKit::WebFrame::localFrameLoaderClient(v5) || !*((unsigned char *)a3 + 160)) {
              goto LABEL_42;
            }
            uint64_t v28 = *((void *)v5 + 3);
            if (!v28) {
              goto LABEL_40;
            }
            uint64_t v29 = *(void *)(v28 + 8);
            if (!v29) {
              goto LABEL_40;
            }
            uint64_t v30 = *(void *)(v29 + 24);
            if (!v30) {
              goto LABEL_40;
            }
            uint64_t v31 = *(void *)(v30 + 8);
            if (!v31) {
              goto LABEL_40;
            }
            uint64_t v32 = *(void **)(*(void *)(v31 + 48) + 16);
            if (((*(uint64_t (**)(void *))(*v32 + 1368))(v32) & 1) != 0 || !*(void *)(v32[2] + 8)) {
              goto LABEL_40;
            }
            uint64_t v33 = *((void *)v5 + 3);
            if (v33)
            {
              uint64_t v33 = *(void *)(v33 + 8);
              if (v33)
              {
                uint64_t v33 = *(void *)(v33 + 24);
                if (v33)
                {
                  uint64_t v33 = *(void *)(v33 + 8);
                  if (v33)
                  {
                    uint64_t v34 = *(void **)(*(void *)(v33 + 48) + 16);
                    if ((*(uint64_t (**)(void *))(*v34 + 1368))(v34)) {
                      goto LABEL_71;
                    }
                    uint64_t v35 = *(void *)(v34[2] + 8);
                    if (v35) {
                      uint64_t v33 = v35 - 16;
                    }
                    else {
                      uint64_t v33 = 0;
                    }
                  }
                }
              }
            }
            while (1)
            {
              if (*((unsigned char *)a3 + 160))
              {
                *(unsigned char *)(v33 + 2248) = *((unsigned char *)a3 + 142);
LABEL_40:
                uint64_t v36 = WebKit::WebFrame::localFrameLoaderClient(v5);
                if (*((unsigned char *)a3 + 160))
                {
                  WebKit::WebLocalFrameLoaderClient::applyWebsitePolicies(v36, (uint64_t)(a3 + 20));
LABEL_42:
                  uint64_t v37 = *((void *)a3 + 3);
                  *((unsigned char *)v5 + 64) = *((unsigned char *)a3 + 32);
                  *((void *)v5 + 7) = v37;
                  if (*((unsigned char *)a3 + 16))
                  {
                    uint64_t v38 = *((void *)v5 + 3);
                    if (v38)
                    {
                      uint64_t v39 = *(void *)(v38 + 8);
                      if (v39)
                      {
                        if (!*(unsigned char *)(v39 + 144))
                        {
                          int v41 = *(_DWORD **)(*(void *)(v39 + 280) + 104);
                          if (v41)
                          {
                            ++v41[6];
                            WebCore::DocumentLoader::setNavigationID();
                            if (v41[6] == 1) {
                              (*(void (**)(_DWORD *))(*(void *)v41 + 24))(v41);
                            }
                            else {
                              --v41[6];
                            }
                          }
                        }
                      }
                    }
                  }
                  if (*((unsigned char *)a3 + 2)) {
                    goto LABEL_48;
                  }
                  if (!*((unsigned char *)a3 + 176)) {
                    goto LABEL_48;
                  }
                  uint64_t v46 = WebKit::WebFrame::page(v5);
                  if (!v46) {
                    goto LABEL_48;
                  }
                  uint64_t v5 = (WebKit::WebFrame *)v46;
                  uint64_t v47 = *(void *)(v46 + 88);
                  CFRetain(*(CFTypeRef *)(v47 + 8));
                  if (*((unsigned char *)a3 + 176)) {
                    break;
                  }
                }
              }
              __break(1u);
LABEL_71:
              uint64_t v33 = 0;
            }
            WebKit::WebPage::SandboxExtensionTracker::beginLoad((const char ****)v5 + 86, (const char ***)a3 + 21);
            CFRelease(*(CFTypeRef *)(v47 + 8));
LABEL_48:
            (*(void (**)(uint64_t, void))(*(void *)v21 + 16))(v21, *((unsigned __int8 *)a3 + 2));
            int v40 = *(void (**)(uint64_t))(*(void *)v21 + 8);
            v40(v21);
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebFrame::startDownload(uint64_t result, WebCore::ResourceRequest *a2, uint64_t *a3, char a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(result + 64)) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 24);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 8)) == 0 || *(unsigned char *)(v9 + 144))
  {
    uint64_t v9 = 0;
    char v10 = 1;
LABEL_6:
    int v11 = 0;
    v29[0] = 0;
    goto LABEL_9;
  }
  uint64_t result = *(void *)(v9 + 296);
  if (!result)
  {
    char v10 = 0;
    goto LABEL_6;
  }
  uint64_t v12 = WebCore::Document::topOrigin((WebCore::Document *)result);
  v29[0] = 0;
  int v30 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v29, v12 + 8);
  char v10 = 0;
  int v11 = 1;
LABEL_9:
  unsigned __int8 v31 = v11;
  if (!*(unsigned char *)(v7 + 64))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v13 = *(void *)(v7 + 56);
  *(unsigned char *)(v7 + 64) = 0;
  uint64_t v27 = v13;
  __int16 v26 = *(_WORD *)(v7 + 104);
  if ((v10 & 1) == 0)
  {
    {
      uint64_t v14 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                      + 24);
      long long v24 = *(_OWORD *)(v9 + 32);
      char v25 = 1;
      v23[0] = WebCore::Frame::pageID((WebCore::Frame *)v9);
      v23[1] = v15;
      unsigned int v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v16 = 286;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 66) = (char *)v16 + 16;
      *((void *)v16 + 67) = 512;
      *((void *)v16 + 68) = 0;
      *((void *)v16 + 70) = 0;
      *((void *)v16 + 69) = 0;
      IPC::Encoder::encodeHeader(v16);
      uint64_t v28 = v16;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, &v27);
      IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v16, a2);
      IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v16, (uint64_t)v29);
      IPC::ArgumentCoder<std::optional<WebKit::NavigatingToAppBoundDomain>,void>::encode<IPC::Encoder,std::optional<WebKit::NavigatingToAppBoundDomain> const&>(v16, (char *)&v26);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a3);
      uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
      if (!v18)
      {
        __break(0xC471u);
        JUMPOUT(0x199203664);
      }
      unsigned char *v17 = a4;
      IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v16, (uint64_t)&v24);
      IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v16, (uint64_t)v23);
      IPC::Connection::sendMessageImpl(v14, (uint64_t *)&v28, 0, 0);
      uint64_t result = (uint64_t)v28;
      uint64_t v28 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v19);
        uint64_t result = WTF::fastFree(v20, v21);
      }
      int v11 = v31;
      goto LABEL_16;
    }
LABEL_23:
    uint64_t v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v22);
  }
LABEL_16:
  if (v11)
  {
    if (v30 != -1) {
      return ((uint64_t (*)(long long *, unsigned char *))off_1EE9F8438[v30])(&v24, v29);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFrame::convertMainResourceLoadToDownload(IPC::Encoder *this, WebCore::DocumentLoader *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 64)) {
    return this;
  }
  uint64_t v7 = this;
  uint64_t v8 = *((void *)this + 3);
  if (v8
    && (uint64_t v9 = *(void *)(v8 + 8)) != 0
    && !*(unsigned char *)(v9 + 144)
    && (int v11 = *(WebCore::Document **)(v9 + 296)) != 0)
  {
    uint64_t v12 = WebCore::Document::topOrigin(v11);
    v27[0] = 0;
    int v28 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, v12 + 8);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    v27[0] = 0;
  }
  char v29 = v10;
  if (!*((unsigned char *)v7 + 64))
  {
    __break(1u);
LABEL_19:
    uint64_t v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v21);
  }
  uint64_t v13 = *((void *)v7 + 7);
  *((unsigned char *)v7 + 64) = 0;
  uint64_t v25 = v13;
  uint64_t v14 = WebCore::DocumentLoader::mainResourceLoader(a2);
    goto LABEL_19;
  LOBYTE(v23) = 0;
  char v24 = 0;
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 744);
    char v24 = 1;
    uint64_t v23 = v15;
  }
  __int16 v22 = *((_WORD *)v7 + 52);
  uint64_t v16 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 24);
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 230;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  __int16 v26 = v17;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v17, (uint64_t)&v23);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, &v25);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v17, a3);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v17, (uint64_t)v27);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v17, a4);
  IPC::ArgumentCoder<std::optional<WebKit::NavigatingToAppBoundDomain>,void>::encode<IPC::Encoder,std::optional<WebKit::NavigatingToAppBoundDomain> const&>(v17, (char *)&v22);
  IPC::Connection::sendMessageImpl(v16, (uint64_t *)&v26, 0, 0);
  this = v26;
  __int16 v26 = 0;
  if (this)
  {
    IPC::Encoder::~Encoder(this, v18);
    this = (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  if (v29)
  {
    if (v28 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9F8438[v28])(&v23, v27);
    }
  }
  return this;
}

uint64_t WebKit::WebFrame::addConsoleMessage(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 144))
      {
        uint64_t result = *(void *)(v2 + 296);
        if (result) {
          return WebCore::Document::addConsoleMessage();
        }
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebFrame::source@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    uint64_t v5 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    uint64_t v6 = *(void *)(v4 + 296);
    if (v6)
    {
      *(_DWORD *)(v6 + 28) += 2;
      if (*(void *)(v6 + 1784)
        && (active = (_DWORD *)WebCore::FrameLoader::activeDocumentLoader(*(WebCore::FrameLoader **)(v4 + 280))) != 0)
      {
        uint64_t v8 = active;
        ++active[6];
        WebCore::DocumentLoader::mainResourceData((uint64_t *)&v13, (WebCore::DocumentLoader *)active);
        if (v13)
        {
          WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v12, v13);
          WebCore::SharedBuffer::data(v12);
          char v14 = 0;
          PAL::TextEncoding::decode();
          char v10 = (unsigned int *)v12;
          uint64_t v12 = 0;
          if (v10) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v9);
          }
          int v11 = (unsigned int *)v13;
          uint64_t v13 = 0;
          if (v11) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v11, v9);
          }
        }
        else
        {
          *a2 = 0;
        }
        if (v8[6] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v8 + 24))(v8);
        }
        else {
          --v8[6];
        }
      }
      else
      {
        *a2 = 0;
      }
      if (*(_DWORD *)(v6 + 28) == 2)
      {
        if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
      }
      else
      {
        *(_DWORD *)(v6 + 28) -= 2;
      }
    }
    else
    {
      *a2 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::contentsAsString@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    uint64_t v5 = this;
    uint64_t v6 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    if (WebKit::WebFrame::isFrameSet(*((WebKit::WebFrame **)this + 3)))
    {
      LODWORD(v25) = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      BYTE4(v25) = 1;
      uint64_t v10 = *(void *)(*(void *)(*((void *)v5 + 3) + 8) + 88);
      if (v10)
      {
        atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
        while (1)
        {
          uint64_t v11 = v25;
          if (v25)
          {
            LOBYTE(v27) = 32;
            if (v24 && (v25 < *(_DWORD *)(v24 + 4) ? (BOOL v12 = v23 == 0) : (BOOL v12 = 0), v12))
            {
              int v13 = *(_DWORD *)(v24 + 16);
              uint64_t v14 = *(void *)(v24 + 8);
              LODWORD(v25) = v25 + 1;
              if ((v13 & 4) != 0) {
                *(unsigned char *)(v14 + v11) = 32;
              }
              else {
                *(_WORD *)(v14 + 2 * v11) = 32;
              }
            }
            else
            {
              WTF::StringBuilder::append();
            }
          }
          WebKit::WebFrame::fromCoreFrame(v10, &v27);
          uint64_t v15 = v27;
          if (v27)
          {
            WebKit::WebFrame::contentsAsString((uint64_t *)&v26, v27);
            if (v25 || v24)
            {
              if (v26)
              {
                uint64_t v20 = *((void *)v26 + 1);
                unint64_t v21 = *((unsigned int *)v26 + 1) | ((unint64_t)((*((_DWORD *)v26 + 4) >> 2) & 1) << 32);
              }
              else
              {
                uint64_t v20 = 0;
                unint64_t v21 = 0x100000000;
              }
              WTF::StringBuilder::append((uint64_t)&v23, v20, v21);
              uint64_t v17 = v26;
            }
            else
            {
              WTF::String::operator=((uint64_t *)&v23, &v26);
              uint64_t v17 = v26;
              if (v26) {
                int v18 = *((_DWORD *)v26 + 1);
              }
              else {
                int v18 = 0;
              }
              LODWORD(v25) = v18;
            }
            __int16 v26 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2) {
                WTF::StringImpl::destroy(v17, v16);
              }
              else {
                *(_DWORD *)v17 -= 2;
              }
            }
            CFRelease(*((CFTypeRef *)v15 + 1));
          }
          uint64_t v19 = *(void *)(v10 + 72);
          if (!v19) {
            break;
          }
          atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
          uint64_t v10 = v19;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
      }
      WTF::StringBuilder::toString((WTF::StringBuilder *)&v23, a2);
      WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v23, v22);
    }
    else
    {
      uint64_t v8 = *(void *)(v4 + 296);
      if (v8)
      {
        *(_DWORD *)(v8 + 28) += 2;
        uint64_t v9 = *(void *)(v8 + 1304);
        if (v9)
        {
          *(_DWORD *)(v9 + 28) += 2;
          WebCore::makeRangeSelectingNodeContents((uint64_t *)&v23, (WebCore *)v9, v7);
          WebCore::plainText();
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v25);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v23);
          if (*(_DWORD *)(v9 + 28) == 2)
          {
            if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v9);
            }
          }
          else
          {
            *(_DWORD *)(v9 + 28) -= 2;
          }
        }
        else
        {
          *a2 = 0;
        }
        if (*(_DWORD *)(v8 + 28) == 2)
        {
          if ((*(_WORD *)(v8 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
        }
        else
        {
          *(_DWORD *)(v8 + 28) -= 2;
        }
      }
      else
      {
        *a2 = 0;
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::WebFrame::isFrameSet(WebKit::WebFrame *this)
{
  if (!this) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 1);
  if (!v1 || *(unsigned char *)(v1 + 144)) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v1 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
  uint64_t v5 = *(WebCore::Node **)(v1 + 296);
  if (v5)
  {
    *((_DWORD *)v5 + 7) += 2;
    uint64_t v2 = (*(uint64_t (**)(WebCore::Node *))(*(void *)v5 + 392))(v5);
    if (*((_DWORD *)v5 + 7) == 2)
    {
      if ((*((_WORD *)v5 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v5);
      }
    }
    else
    {
      *((_DWORD *)v5 + 7) -= 2;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v2;
}

unsigned int *WebKit::WebFrame::selectionAsString@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    uint64_t v5 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v4 + 296));
    WebCore::Editor::selectedText((uint64_t *)&v8, v5);
    WebCore::LocalFrame::displayStringModifiedByEncoding((WebCore::LocalFrame *)v4, (const WTF::String *)&v8);
    uint64_t v7 = v8;
    uint64_t v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

WTF::StringImpl *WebKit::WebFrame::name@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && (WebCore::FrameTree::uniqueName((uint64_t *)&v7, (WebCore::FrameTree *)(v4 + 48)), (this = v7) != 0))
  {
    int v6 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    *a2 = this;
    uint64_t v7 = 0;
    if (v6) {
      *(_DWORD *)this = v6;
    }
    else {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::certificateInfo@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 8)) == 0 || *(unsigned char *)(v3 + 144))
  {
    *a2 = 0;
    return this;
  }
  uint64_t v4 = (unsigned int *)(v3 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  uint64_t v5 = *(void *)(*(void *)(v3 + 280) + 88);
  if (!v5)
  {
    *a2 = 0;
    goto LABEL_12;
  }
  int v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  if (*(unsigned char *)(v5 + 1400) && (uint64_t v7 = *(const void **)(v5 + 1392)) != 0)
  {
    uint64_t v10 = v5;
    CFRetain(v7);
    *a2 = v7;
    CFRetain(v7);
    CFRelease(v7);
    uint64_t v5 = v10;
    int v9 = *(_DWORD *)(v10 + 24);
    int v6 = v9 - 1;
    if (v9 == 1) {
      goto LABEL_11;
    }
  }
  else
  {
    *a2 = 0;
    if (!v6)
    {
LABEL_11:
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      goto LABEL_12;
    }
  }
  *(_DWORD *)(v5 + 24) = v6;
LABEL_12:

  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
}

uint64_t *WebKit::WebFrame::innerText(uint64_t *this, uint64_t a2)
{
  if (a2 && (uint64_t v2 = *(void *)(a2 + 8)) != 0 && !*(unsigned char *)(v2 + 144))
  {
    uint64_t v3 = (unsigned int *)(v2 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    uint64_t v4 = *(WebCore::Element **)(*(void *)(v2 + 296) + 1304);
    if (v4) {
      WebCore::Element::innerText(this, v4);
    }
    else {
      *this = 0;
    }
    return (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
  }
  else
  {
    *this = 0;
  }
  return this;
}

uint64_t WebKit::WebFrame::childFrames@<X0>(WebKit::WebFrame *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t result = WebCore::FrameTree::childCount((WebCore::FrameTree *)(v4 + 48));
    if (!result)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
LABEL_5:
      API::Array::create(&v15, a2);
      return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v7);
    }
    uint64_t v16 = 0;
    if (!(result >> 29))
    {
      LODWORD(v16) = result;
      uint64_t v15 = WTF::fastMalloc((WTF *)(8 * result));
      uint64_t v8 = *(void *)(*(void *)(*((void *)this + 3) + 8) + 88);
      if (v8)
      {
        atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
        while (1)
        {
          WebKit::WebFrame::fromCoreFrame(v8, &v14);
          uint64_t v9 = v14;
          if (v14)
          {
            uint64_t v10 = HIDWORD(v16);
            if (HIDWORD(v16) == v16)
            {
              WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,API::Object*>((uint64_t)&v15, &v14);
            }
            else
            {
              uint64_t v11 = v15;
              CFRetain(*(CFTypeRef *)(v14 + 8));
              *(void *)(v11 + 8 * v10) = v9;
              ++HIDWORD(v16);
            }
            uint64_t v12 = v14;
            uint64_t v14 = 0;
            if (v12) {
              CFRelease(*(CFTypeRef *)(v12 + 8));
            }
          }
          uint64_t v13 = *(void *)(v8 + 72);
          if (!v13) {
            break;
          }
          atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
          uint64_t v8 = v13;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
      }
      goto LABEL_5;
    }
    __break(0xC471u);
  }
  else
  {
    return API::Array::create(a2);
  }
  return result;
}

unsigned int *WebKit::WebFrame::layerTreeAsText@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3 && (this = *(unsigned int **)(v3 + 8)) != 0 && !*((unsigned char *)this + 144))
  {
    uint64_t v5 = this + 2;
    atomic_fetch_add((atomic_uint *volatile)this + 2, 1u);
    int v6 = (WebCore::RenderView *)WebCore::LocalFrame::contentRenderer((WebCore::LocalFrame *)this);
    WebCore::RenderView::compositor(v6);
    WebCore::RenderLayerCompositor::layerTreeAsText();
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    uint64_t v4 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v4 += 2;
    }
    *a2 = v4;
  }
  return this;
}

uint64_t WebKit::WebFrame::pendingUnloadCount(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || *(unsigned char *)(v2 + 144)) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v2 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  uint64_t v5 = WebCore::LocalDOMWindow::pendingUnloadEventListeners(*(WebCore::LocalDOMWindow **)(*(void *)(v2 + 296) + 728));
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v5;
}

uint64_t WebKit::WebFrame::allowsFollowingLink(WebKit::WebFrame *this, const WTF::URL *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3 || *(unsigned char *)(v3 + 144)) {
    return 1;
  }
  uint64_t v5 = (unsigned int *)(v3 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  int v6 = (WebCore::OriginAccessPatternsForWebProcess *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(void *)(v3 + 296) + 208));
  WebCore::OriginAccessPatternsForWebProcess::singleton(v6);
  uint64_t canDisplay = WebCore::SecurityOrigin::canDisplay();
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  return canDisplay;
}

uint64_t WebKit::WebFrame::jsContext(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || *(unsigned char *)(v2 + 144)) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v2 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  uint64_t v5 = *(WebCore::ScriptController **)(v2 + 304);
  int v6 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(this);
  uint64_t v3 = *(void *)(WebCore::ScriptController::jsWindowProxy(v5, v6) + 16);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v3;
}

uint64_t WebKit::WebFrame::jsContextForWorld(WebKit::WebFrame *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3 || *(unsigned char *)(v3 + 144)) {
    return 0;
  }
  int v6 = (unsigned int *)(v3 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  uint64_t v4 = *(void *)(WebCore::ScriptController::jsWindowProxy(*(WebCore::ScriptController **)(v3 + 304), a2) + 16);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  return v4;
}

uint64_t WebKit::WebFrame::jsContextForWorld(WebKit::WebFrame *a1, uint64_t a2)
{
  return WebKit::WebFrame::jsContextForWorld(a1, *(WebCore::DOMWrapperWorld **)(a2 + 24));
}

uint64_t WebKit::WebFrame::jsContextForServiceWorkerWorld(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0 && (v3 = *(void *)(v2 + 24)) != 0 && *(void *)(v3 + 8)) {
    return MEMORY[0x1F4172790]();
  }
  else {
    return 0;
  }
}

unsigned int *WebKit::WebFrame::setAccessibleName(unsigned int *this, const WTF::AtomString *a2)
{
  unsigned __int8 v2 = atomic_load(MEMORY[0x1E4FB64B0]);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        if (!*(unsigned char *)(v4 + 144))
        {
          uint64_t v5 = (unsigned int *)(v4 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
          uint64_t v6 = *(void *)(v4 + 296);
          if (v6)
          {
            *(_DWORD *)(v6 + 28) += 2;
            uint64_t v8 = (WebCore::AXObjectCache *)WebCore::Document::axObjectCache((WebCore::Document *)v6);
            uint64_t v9 = WebCore::AXObjectCache::rootObject(v8);
            if (v9)
            {
              uint64_t v10 = (atomic_uchar **)v9;
              WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v9 + 8));
              (*((void (**)(atomic_uchar **, const WTF::AtomString *))*v10 + 169))(v10, a2);
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AXCoreObject,(WTF::DestructionThread)0>(v10[1], v11);
            }
            if (*(_DWORD *)(v6 + 28) == 2)
            {
              if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v6);
              }
            }
            else
            {
              *(_DWORD *)(v6 + 28) -= 2;
            }
          }
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebFrame::contentBounds(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = (WebCore::ScrollView *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
      if (v3)
      {
        uint64_t v4 = v3;
        ++*((_DWORD *)v3 + 2);
        WebCore::ScrollView::contentsSize(v3);
        WebCore::ScrollView::contentsSize(v4);
        if (*((_DWORD *)v4 + 2) == 1) {
          (*(void (**)(WebCore::ScrollView *))(*(void *)v4 + 8))(v4);
        }
        else {
          --*((_DWORD *)v4 + 2);
        }
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebFrame::visibleContentBounds(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
      if (v3)
      {
        uint64_t v4 = (_DWORD *)v3;
        ++*(_DWORD *)(v3 + 8);
        WebCore::ScrollableArea::visibleContentRectIncludingScrollbars();
        if (v4[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        }
        else {
          --v4[2];
        }
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebFrame::visibleContentBoundsExcludingScrollbars(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 144))
      {
        uint64_t v3 = (unsigned int *)(v2 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
        uint64_t v4 = *(_DWORD **)(v2 + 288);
        if (v4)
        {
          ++v4[2];
          WebCore::ScrollableArea::visibleContentRect();
          if (v4[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
          }
          else {
            --v4[2];
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
      }
    }
  }
  return 0;
}

unint64_t WebKit::WebFrame::scrollOffset(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1
    && (uint64_t v2 = *(void *)(v1 + 8)) != 0
    && (uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2)) != 0)
  {
    uint64_t v4 = (_DWORD *)v3;
    ++*(_DWORD *)(v3 + 8);
    unint64_t v5 = WebCore::ScrollableArea::visibleContentRect();
    unsigned int v6 = v5;
    unint64_t v7 = HIDWORD(v5);
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  else
  {
    unsigned int v6 = 0;
    LODWORD(v7) = 0;
  }
  return v6 | ((unint64_t)v7 << 32);
}

BOOL WebKit::WebFrame::hasHorizontalScrollbar(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || *(unsigned char *)(v2 + 144)) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v2 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  uint64_t v5 = *(void *)(v2 + 288);
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 + 8);
    *(_DWORD *)(v5 + 8) = v6 + 1;
    BOOL v3 = *(void *)(v5 + 152) != 0;
    if (v6) {
      *(_DWORD *)(v5 + 8) = v6;
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
  return v3;
}

BOOL WebKit::WebFrame::hasVerticalScrollbar(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  if (!v3) {
    return 0;
  }
  int v4 = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v4 + 1;
  BOOL v5 = *(void *)(v3 + 160) != 0;
  if (v4) {
    *(_DWORD *)(v3 + 8) = v4;
  }
  else {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v5;
}

unsigned int *WebKit::WebFrame::hitTest@<X0>(unsigned int *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    BOOL v5 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    WebCore::EventHandler::hitTestResultAtPoint();
    WebKit::InjectedBundleHitTestResult::create((WebKit::InjectedBundleHitTestResult *)v6, &v7);
    *a2 = v7;
    MEMORY[0x199731400](v6);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::WebFrame::getDocumentBackgroundColor(WebKit::WebFrame *this, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || *(unsigned char *)(v6 + 144)) {
    return 0;
  }
  uint64_t v8 = (unsigned int *)(v6 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  uint64_t v9 = *(WebCore::LocalFrameView **)(v6 + 288);
  if (v9)
  {
    ++*((_DWORD *)v9 + 2);
    WebCore::LocalFrameView::documentBackgroundColor((uint64_t *)&v28, v9);
    unint64_t v16 = v28;
    uint64_t v17 = v28;
    if ((v28 & 0x4000000000000) != 0)
    {
      *(float *)v18.i32 = WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor> const&)#1}>(&v28, (uint64_t)&v29, v15);
      double v22 = WebCore::mapColorComponents<WebCore::resolveColorComponents(WebCore::ColorComponents<float,4ul> const&)::{lambda(float)#1},WebCore::ColorComponents<float,4ul>>(v18, v19, v20, v21);
      *a2 = *(float *)&v22;
      *a3 = v23;
      *a4 = v24;
      *a5 = v25;
      uint64_t v17 = v28;
    }
    uint64_t v7 = (v16 >> 50) & 1;
    if ((v17 & 0x8000000000000) != 0)
    {
      uint64_t v27 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v14);
      }
    }
    if (*((_DWORD *)v9 + 2) == 1) {
      (*(void (**)(WebCore::LocalFrameView *))(*(void *)v9 + 8))(v9);
    }
    else {
      --*((_DWORD *)v9 + 2);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  return v7;
}

BOOL WebKit::WebFrame::containsAnyFormElements(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 144))
      {
        uint64_t v4 = (unsigned int *)(v2 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
        uint64_t v5 = *(void *)(v2 + 296);
        if (!v5)
        {
          BOOL v3 = 0;
LABEL_13:
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
          return v3;
        }
        int v7 = *(_DWORD *)(v5 + 24);
        int v6 = *(_DWORD *)(v5 + 28);
        *(_DWORD *)(v5 + 24) = v7 + 1;
        *(_DWORD *)(v5 + 28) = v6 + 2;
        uint64_t v8 = *(void *)(v5 + 88);
        if (v8)
        {
          do
          {
            if ((*(_WORD *)(v8 + 32) & 0x10) != 0
              && *(void *)(*(void *)(v8 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB68F8] + 24))
            {
              break;
            }
            uint64_t v8 = *(void *)(v8 + 64);
          }
          while (v8);
          BOOL v3 = v8 != 0;
          if (v7 != -1) {
            goto LABEL_11;
          }
        }
        else
        {
          BOOL v3 = 0;
          if (v7 != -1)
          {
LABEL_11:
            *(_DWORD *)(v5 + 24) = v7;
            if (v6)
            {
              *(_DWORD *)(v5 + 28) = v6;
            }
            else if ((*(_WORD *)(v5 + 34) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v5);
            }
            goto LABEL_13;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x199204D04);
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebFrame::containsAnyFormControls(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 144))
      {
        uint64_t v4 = (unsigned int *)(v2 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
        uint64_t v5 = *(void *)(v2 + 296);
        if (v5)
        {
          int v6 = *(_DWORD *)(v5 + 24);
          *(_DWORD *)(v5 + 28) += 2;
          uint64_t v3 = *(void *)(v5 + 88);
          if (v3)
          {
            while ((*(_WORD *)(v3 + 32) & 8) == 0)
            {
              uint64_t v3 = *(void *)(v3 + 64);
              if (!v3) {
                goto LABEL_9;
              }
            }
            *(_DWORD *)(v5 + 24) = v6 + 2;
            ++*(_DWORD *)(v3 + 24);
            uint64_t v9 = MEMORY[0x1E4FB6B08];
            while (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 872))(v3) & 1) == 0
                 && ((*(_WORD *)(v3 + 32) & 0x10) == 0
                  || *(void *)(*(void *)(v3 + 104) + 24) != *(void *)(*(void *)v9 + 24)))
            {
              uint64_t v10 = v3;
              while (1)
              {
                uint64_t v10 = *(void *)(v10 + 64);
                if (!v10) {
                  break;
                }
                if ((*(_WORD *)(v10 + 32) & 8) != 0)
                {
                  ++*(_DWORD *)(v10 + 24);
                  break;
                }
              }
              int v11 = *(_DWORD *)(v3 + 24);
              if (!v11)
              {
                __break(0xC471u);
                JUMPOUT(0x199204EE0);
              }
              *(_DWORD *)(v3 + 24) = v11 - 1;
              uint64_t v3 = v10;
              if (!v10) {
                goto LABEL_28;
              }
            }
            int v12 = *(_DWORD *)(v3 + 24);
            if (!v12) {
              goto LABEL_35;
            }
            *(_DWORD *)(v3 + 24) = v12 - 1;
            uint64_t v3 = 1;
LABEL_28:
            int v7 = *(_DWORD *)(v5 + 24);
            if (!v7)
            {
LABEL_35:
              __break(0xC471u);
              JUMPOUT(0x199204EC0);
            }
          }
          else
          {
LABEL_9:
            uint64_t v3 = 0;
            int v7 = v6 + 2;
            *(_DWORD *)(v5 + 24) = v7;
            if (!v7) {
              goto LABEL_35;
            }
          }
          *(_DWORD *)(v5 + 24) = v7 - 1;
          if (v7 == 1)
          {
            __break(0xC471u);
            JUMPOUT(0x199204F1CLL);
          }
          *(_DWORD *)(v5 + 24) = v7 - 2;
          if (*(_DWORD *)(v5 + 28) == 2)
          {
            if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
              WebCore::Node::removedLastRef((WebCore::Node *)v5);
            }
          }
          else
          {
            *(_DWORD *)(v5 + 28) -= 2;
          }
        }
        else
        {
          uint64_t v3 = 0;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
        return v3;
      }
    }
  }
  return 0;
}

unsigned int *WebKit::WebFrame::stopLoading(unsigned int *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (!*(unsigned char *)(v2 + 144))
      {
        uint64_t v3 = (unsigned int *)(v2 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
        WebCore::FrameLoader::stopForUserCancel(*(WebCore::FrameLoader **)(v2 + 280));
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v3);
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebFrame::frameForContext@<X0>(WebKit::WebFrame *this@<X0>, const OpaqueJSContext *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (unsigned int *)WebCore::LocalFrame::fromJSContext(this, a2);
  if (result)
  {
    uint64_t v5 = result + 2;
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
    WebKit::WebFrame::fromCoreFrame((uint64_t)result, a3);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

unsigned int *WebKit::WebFrame::contentFrameForWindowOrFrameElement@<X0>(WebKit::WebFrame *this@<X0>, const OpaqueJSContext *a2@<X1>, const OpaqueJSValue *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = (unsigned int *)WebCore::LocalFrame::contentFrameFromWindowOrFrameElement(this, a2, a3);
  if (result)
  {
    int v6 = result + 2;
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
    WebKit::WebFrame::fromCoreFrame((uint64_t)result, a4);
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebKit::WebFrame::jsWrapperForWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4 || *(unsigned char *)(v4 + 144)) {
    return 0;
  }
  int v7 = (unsigned int *)(v4 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  WebCore::ScriptController::jsWindowProxy(*(WebCore::ScriptController **)(v4 + 304), *(WebCore::DOMWrapperWorld **)(a3 + 24));
  JSC::JSLockHolder::JSLockHolder();
  uint64_t v8 = *(void *)(a2 + 24);
  if (v8)
  {
    (*(void (**)(void))(*(void *)v8 + 16))(*(void *)(a2 + 24));
    uint64_t v5 = WebCore::toJS();
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  else
  {
    uint64_t v5 = 2;
  }
  MEMORY[0x19972D170](v10);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t OutOfLineCachedWrapper;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if (!*(unsigned char *)(v4 + 144))
      {
        uint64_t v8 = (unsigned int *)(v4 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
        uint64_t v9 = *(void *)(WebCore::ScriptController::jsWindowProxy(*(WebCore::ScriptController **)(v4 + 304), *(WebCore::DOMWrapperWorld **)(a3 + 24))+ 16);
        JSC::JSLockHolder::JSLockHolder();
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          OutOfLineCachedWrapper = 2;
LABEL_13:
          MEMORY[0x19972D170](&v14);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
          return OutOfLineCachedWrapper;
        }
        int v11 = *(_DWORD *)(v10 + 28) + 2;
        *(_DWORD *)(v10 + 28) = v11;
        if (*(unsigned char *)(v9 + 3416))
        {
          int v12 = *(void *)(v10 + 8);
          if (!v12) {
            goto LABEL_10;
          }
          if ((*(unsigned char *)(v12 + 8) & 3) != 0) {
            goto LABEL_10;
          }
          OutOfLineCachedWrapper = *(void *)v12;
          if (!*(void *)v12) {
            goto LABEL_10;
          }
        }
        else
        {
          OutOfLineCachedWrapper = WebCore::getOutOfLineCachedWrapper();
          int v11 = *(_DWORD *)(v10 + 28);
          if (!OutOfLineCachedWrapper)
          {
LABEL_10:
            *(_DWORD *)(v10 + 28) = v11 + 2;
            int8x8_t v15 = v10;
            OutOfLineCachedWrapper = WebCore::createWrapper();
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v15);
            int v11 = *(_DWORD *)(v10 + 28);
          }
        }
        uint64_t v13 = v11 - 2;
        if (v13)
        {
          *(_DWORD *)(v10 + 28) = v13;
        }
        else if ((*(_WORD *)(v10 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
        }
        goto LABEL_13;
      }
    }
  }
  return 0;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned char v11[8];

  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4 || *(unsigned char *)(v4 + 144)) {
    return 0;
  }
  int v7 = (unsigned int *)(v4 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  uint64_t v8 = *(void *)(WebCore::ScriptController::jsWindowProxy(*(WebCore::ScriptController **)(v4 + 304), *(WebCore::DOMWrapperWorld **)(a3 + 24))+ 16);
  JSC::JSLockHolder::JSLockHolder();
  uint64_t v9 = *(_DWORD **)(a2 + 24);
  ++v9[2];
  uint64_t v5 = MEMORY[0x19973A780](v8, v8, v9);
  if (v9[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
  }
  else {
    --v9[2];
  }
  MEMORY[0x19972D170](v11);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
  return v5;
}

uint64_t *WebKit::WebFrame::counterValue@<X0>(uint64_t *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned __int8 *)this + 5) == 241)
  {
    uint64_t v3 = this[3];
    *(_DWORD *)(v3 + 28) += 2;
    uint64_t v4 = v3;
    WebCore::counterValueForElement();
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v4);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::provisionalURL@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && !*(unsigned char *)(v4 + 144))
  {
    uint64_t v5 = (unsigned int *)(v4 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    int v6 = *(_DWORD **)(*(void *)(v4 + 280) + 96);
    if (v6)
    {
      ++v6[6];
      int v7 = *(_DWORD **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v6 + 218));
      if (v7) {
        *v7 += 2;
      }
      *a2 = v7;
      if (v6[6] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 24))(v6);
      }
      else {
        --v6[6];
      }
    }
    else
    {
      *a2 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::suggestedFilenameForResourceWithURL@<X0>(unsigned int *this@<X0>, const WTF::URL *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0 && !*(unsigned char *)(v5 + 144))
  {
    int v6 = (unsigned int *)(v5 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
    int v7 = *(_DWORD **)(*(void *)(v5 + 280) + 88);
    if (v7)
    {
      ++v7[6];
      uint64_t v9 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 218));
      if (WTF::equal(*v9, *(const WTF::StringImpl **)a2, v10))
      {
        WebCore::ResourceResponseBase::suggestedFilename((WebCore::ResourceResponseBase *)(v7 + 318));
      }
      else
      {
        WebCore::DocumentLoader::subresource((uint64_t *)&v12, (WebCore::DocumentLoader *)v7, a2);
        if (v12)
        {
          WebCore::ResourceResponseBase::suggestedFilename((WebCore::ResourceResponseBase *)(v12 + 14));
          int v11 = v12;
          int v12 = 0;
          if (v11)
          {
            if (v11[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
            }
            else {
              --v11[2];
            }
          }
        }
        else
        {
          *a3 = 0;
        }
      }
      if (v7[6] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 24))(v7);
      }
      else {
        --v7[6];
      }
    }
    else
    {
      *a3 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

unsigned int *WebKit::WebFrame::mimeTypeForResourceWithURL@<X0>(unsigned int *this@<X0>, const WTF::URL *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0 && !*(unsigned char *)(v5 + 144))
  {
    int v6 = (unsigned int *)(v5 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
    int v7 = *(_DWORD **)(*(void *)(v5 + 280) + 88);
    if (v7)
    {
      ++v7[6];
      uint64_t v9 = (WTF **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 218));
      if (WTF::equal(*v9, *(const WTF::StringImpl **)a2, v10))
      {
        int v11 = *(_DWORD **)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v7 + 318));
        if (v11) {
          *v11 += 2;
        }
        *a3 = v11;
      }
      else
      {
        WebCore::DocumentLoader::subresource(&v14, (WebCore::DocumentLoader *)v7, a2);
        int v12 = (_DWORD *)v14;
        if (v14)
        {
          uint64_t v13 = *(_DWORD **)(v14 + 320);
          if (v13) {
            *v13 += 2;
          }
          *a3 = v13;
          uint64_t v14 = 0;
          if (v12[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
          }
          else {
            --v12[2];
          }
        }
        else
        {
          *a3 = 0;
        }
      }
      if (v7[6] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 24))(v7);
      }
      else {
        --v7[6];
      }
    }
    else
    {
      *a3 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

IPC::Encoder *WebKit::WebFrame::updateRemoteFrameSize(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v12 = a2;
  uint64_t v2 = *((void *)result + 4);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = (uint64_t *)((char *)result + 80);
      uint64_t v6 = *(void *)(v3 + 16);
      uint64_t v5 = v3 + 16;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
      uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v8 = 2116;
      *((void *)v8 + 1) = v7;
      *((void *)v8 + 66) = (char *)v8 + 16;
      *((void *)v8 + 67) = 512;
      *((void *)v8 + 68) = 0;
      *((void *)v8 + 70) = 0;
      *((void *)v8 + 69) = 0;
      IPC::Encoder::encodeHeader(v8);
      uint64_t v13 = v8;
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, v4);
      IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, (int *)&v12);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v13, 0);
      uint64_t result = v13;
      uint64_t v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v9);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebFrame::setTextDirection(unsigned int *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (!*(unsigned char *)(v3 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
        if ((MEMORY[0x19972E990](*(void *)a2, "auto", 4) & 1) != 0
          || (MEMORY[0x19972E990](*(void *)a2, "ltr", 3) & 1) != 0
          || MEMORY[0x19972E990](*(void *)a2, "rtl", 3))
        {
          WebCore::Document::editor(*(WebCore::Document **)(v3 + 296));
          WebCore::Editor::setBaseWritingDirection();
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return this;
}

uint64_t *WebKit::WebFrame::webArchiveData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8);
  if (*(unsigned char *)(v8 + 144)) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v8 + 296);
  *(_DWORD *)(v9 + 28) += 2;
  uint64_t v14 = v9;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9F8680;
  v10[1] = a1;
  void v10[2] = a2;
  v10[3] = a3;
  uint64_t v12 = v10;
  WebCore::LegacyWebArchive::create();
  if (v12) {
    (*(void (**)(void *))(*v12 + 8))(v12);
  }
  if (v13)
  {
    WebCore::LegacyWebArchive::rawDataRepresentation(a4, v13);
    if (*((_DWORD *)v13 + 2) == 1) {
      (*(void (**)())(*(void *)v13 + 8))();
    }
    else {
      --*((_DWORD *)v13 + 2);
    }
  }
  else
  {
    *a4 = 0;
  }
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v14);
}

void WebKit::WebFrame::createSelectionSnapshot(WebKit::WebFrame *this@<X0>, void *a2@<X8>)
{
  LOWORD(v17) = 136;
  BYTE2(v17) = 1;
  uint64_t v3 = *(const void **)WebCore::DestinationColorSpace::SRGB(this);
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  WebCore::snapshotSelection();
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  if (!v19)
  {
    *a2 = 0;
    return;
  }
  uint64_t v16 = v19;
  uint64_t v19 = 0;
  WebKit::WebImage::create(&v16, &v17);
  *a2 = v17;
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v16, v5);
  uint64_t v7 = v19;
  uint64_t v19 = 0;
  if (!v7) {
    return;
  }
  char v8 = 0;
  uint64_t v9 = *(void *)(v7 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](v9);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  int v11 = 1;
  uint64_t v12 = v10 - 1;
  *(void *)(v9 + 8) = v10 - 1;
  if (v10 == 1)
  {
    uint64_t v15 = *(void *)(v9 + 16);
    uint64_t v13 = *(void *)(v9 + 24);
    *(void *)(v9 + 24) = 0;
    BOOL v14 = v15 != 0;
  }
  else
  {
    uint64_t v13 = 0;
    BOOL v14 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 == 1)
  {
    if (v12) {
      return;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12) {
      return;
    }
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (!v14) {
    WTF::fastFree((WTF *)v9, v6);
  }
}

uint64_t WebKit::WebFrame::shouldEnableInAppBrowserPrivacyProtections(WebKit::WebFrame *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v6 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v6 + 1368))(v6) & 1) == 0)
          {
            if (*(void *)(v6[2] + 8))
            {
              uint64_t v7 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)v1 + 3) + 8) + 24) + 8)
                                          + 48)
                              + 16);
              (*(void (**)(void *))(*v7 + 1368))(v7);
              uint64_t v8 = *(void *)(v7[2] + 8);
              uint64_t v9 = v8 ? v8 - 16 : 0;
              if (*(unsigned char *)(v9 + 195)) {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  if (!*((unsigned char *)v1 + 105) || *((unsigned char *)v1 + 104))
  {
    CFRetain(*((CFTypeRef *)v1 + 1));
    while (*((unsigned __int16 *)v1 + 52) < 0x100u || *((_WORD *)v1 + 52) != 0)
    {
      WebKit::WebFrame::parentFrame((unsigned int *)v1, &v13);
      int v11 = v13;
      CFRelease(*((CFTypeRef *)v1 + 1));
      uint64_t v1 = v11;
      if (!v11) {
        return 0;
      }
    }
    CFRelease(*((CFTypeRef *)v1 + 1));
  }
  return 1;
}

uint64_t WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain(WebKit::WebFrame *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1
    && (uint64_t v2 = *(void *)(v1 + 8)) != 0
    && !*(unsigned char *)(v2 + 144)
    && ((v3 = *(void *)(*(void *)(v2 + 128) + 8)) != 0 ? (BOOL v4 = *(unsigned char *)(v3 + 144) == 0) : (BOOL v4 = 0), v4))
  {
    WebKit::WebFrame::fromCoreFrame(v3, &v8);
    unsigned int v6 = *(unsigned __int16 *)(v8 + 104);
    unsigned int v5 = v6 >> 8;
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    unsigned int v5 = 0;
    LOBYTE(v6) = 0;
  }
  return v6 | (v5 << 8);
}

uint64_t WebKit::WebFrame::advancedPrivacyProtections(WebKit::WebFrame **this)
{
  uint64_t v1 = WebKit::WebFrame::policySourceDocumentLoader(this[3]);
  if (!v1) {
    return 0;
  }
  int v2 = v1[6];
  v1[6] = v2 + 1;
  uint64_t v3 = *((unsigned __int16 *)v1 + 1757);
  if (v2) {
    v1[6] = v2;
  }
  else {
    (*(void (**)(_DWORD *))(*(void *)v1 + 24))(v1);
  }
  return v3;
}

_DWORD *WebKit::WebFrame::policySourceDocumentLoader(WebKit::WebFrame *this)
{
  if (this)
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1)
    {
      if (!*(unsigned char *)(v1 + 144))
      {
        BOOL v4 = (unsigned int *)(v1 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
        uint64_t v5 = *(void *)(v1 + 296);
        if (!v5)
        {
          int v2 = 0;
LABEL_14:
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
          return v2;
        }
        *(_DWORD *)(v5 + 28) += 2;
        unsigned int v6 = (WebCore::Document *)WebCore::Document::topDocument((WebCore::Document *)v5);
        uint64_t v7 = (_DWORD *)WebCore::Document::loader(v6);
        int v2 = v7;
        if (v7)
        {
          ++v7[6];
          uint64_t v10 = v7;
          uint64_t v8 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 218));
          if ((WTF::URL::hasSpecialScheme(v8) & 1) != 0 || (*(unsigned char *)(v5 + 776) & 2) == 0)
          {
            uint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = (_DWORD *)WebCore::Document::loader((WebCore::Document *)v5);
            WTF::RefPtr<WebCore::DocumentLoader,WTF::RawPtrTraits<WebCore::DocumentLoader>,WTF::DefaultRefDerefTraits<WebCore::DocumentLoader>>::operator=(&v10, v9);
            int v2 = v10;
            uint64_t v10 = 0;
            if (!v2) {
              goto LABEL_12;
            }
          }
          if (v2[6] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v2 + 24))(v2);
          }
          else {
            --v2[6];
          }
        }
LABEL_12:
        if (*(_DWORD *)(v5 + 28) == 2)
        {
          if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
          }
        }
        else
        {
          *(_DWORD *)(v5 + 28) -= 2;
        }
        goto LABEL_14;
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebFrame::originatorAdvancedPrivacyProtections(WebKit::WebFrame **this)
{
  uint64_t v1 = WebKit::WebFrame::policySourceDocumentLoader(this[3]);
  if (v1)
  {
    int v2 = v1[6];
    unsigned int v3 = v1[879];
    unsigned int v4 = v3 >> 8;
    v1[6] = v2 + 1;
    unsigned int v5 = HIWORD(v3);
    unsigned int v6 = HIBYTE(v3);
    if (v2) {
      v1[6] = v2;
    }
    else {
      (*(void (**)(_DWORD *))(*(void *)v1 + 24))(v1);
    }
  }
  else
  {
    LOBYTE(v3) = 0;
    LOBYTE(v5) = 0;
    unsigned int v6 = 0;
    LOBYTE(v4) = 0;
  }
  return (v5 << 16) | (v6 << 24) | (v4 << 8) | v3;
}

WTF::StringImpl *WebKit::WebFrame::handleMouseEvent@<X0>(WTF::StringImpl *this@<X0>, const WebMouseEvent *a2@<X1>, uint64_t a3@<X8>)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 3);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0 || *(unsigned char *)(v5 + 144) || !*(void *)(v5 + 288))
  {
    *(unsigned char *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    return this;
  }
  uint64_t v7 = this;
  WebKit::platform(&v23, a2);
  switch(v24)
  {
    case 5:
      uint64_t v12 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)v7 + 3) + 8) + 24) + 8) + 48)
                       + 16);
      (*(void (**)(void *))(*v12 + 1368))(v12);
      uint64_t v13 = *(void *)(v12[2] + 8);
      if (v13) {
        uint64_t v14 = v13 - 16;
      }
      else {
        uint64_t v14 = 0;
      }
      if ((*(_WORD *)(*(void *)(*(void *)(v14 + 48) + 72) + 26) & 1) != 0
        || *((unsigned __int8 *)a2 + 32) != 254)
      {
        goto LABEL_29;
      }
      char v9 = WebCore::EventHandler::passMouseMovedEventToScrollbars();
      goto LABEL_9;
    case 6:
      WebCore::EventHandler::handleMousePressEvent();
      if (v25 != 2) {
        goto LABEL_12;
      }
      int v15 = *(_DWORD *)(a3 + 24);
      if (v15)
      {
        if (v15 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
          WebCore::EventHandler::mouseMoved();
        }
        goto LABEL_12;
      }
      uint64_t v16 = *((void *)v7 + 3);
      if (!v16 || (uint64_t v17 = *(void *)(v16 + 8)) == 0 || *(unsigned char *)(v17 + 144))
      {
        char v18 = 0;
LABEL_34:
        *(unsigned char *)a3 = v18;
        goto LABEL_12;
      }
      WebCore::ScrollView::windowToContents(*(WebCore::ScrollView **)(v17 + 288), (const WebCore::IntPoint *)&v26);
      WebCore::EventHandler::hitTestResultAtPoint();
      uint64_t v19 = (unsigned int *)(v17 + 8);
      atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
      if (v22)
      {
        uint64_t v20 = *(void *)(*(void *)(*(void *)(v22 + 48) + 8) + 544);
        if (v20) {
          uint64_t v17 = *(void *)(v20 + 8);
        }
        else {
          uint64_t v17 = 0;
        }
        atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v19);
      }
      char v18 = WebCore::EventHandler::sendContextMenuEvent();
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v17 + 8));
      MEMORY[0x199731400](v21);
      if (!*(_DWORD *)(a3 + 24)) {
        goto LABEL_34;
      }
LABEL_12:
      WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v8);
      WTF::Vector<WebCore::PlatformMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
      this = v27;
      uint64_t v27 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
        }
        else {
          *(_DWORD *)this -= 2;
        }
      }
      return this;
    case 7:
      if (*((unsigned char *)a2 + 104)) {
        WebCore::EventHandler::invalidateClick(*(WebCore::EventHandler **)(v5 + 624));
      }
      WebCore::EventHandler::handleMouseReleaseEvent();
      goto LABEL_12;
    case 8:
    case 9:
    case 10:
      char v9 = WebCore::EventHandler::handleMouseForceEvent();
LABEL_9:
      *(unsigned char *)a3 = v9;
      goto LABEL_11;
    default:
      *(unsigned char *)a3 = 0;
LABEL_11:
      *(_DWORD *)(a3 + 24) = 0;
      goto LABEL_12;
  }
}

uint64_t WebKit::WebFrame::handleKeyEvent(WebKit::WebFrame *this, const WebKit::WebKeyboardEvent *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (!*(unsigned char *)(v3 + 144))
      {
        unsigned int v6 = (unsigned int *)(v3 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
        if (*((unsigned char *)a2 + 4) != 10 || *((unsigned char *)a2 + 87) == 0)
        {
          WebCore::LocalFrame::checkedEventHandler((WebCore::LocalFrame *)v3);
          WebKit::platform(a2, (uint64_t)v14);
          uint64_t v4 = WebCore::EventHandler::keyEvent();
          WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v14, v8);
          char v9 = v13;
          if (!v13)
          {
LABEL_16:
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
            return v4;
          }
          int v10 = *v13;
          if (!*v13)
          {
            __break(0xC471u);
            JUMPOUT(0x199206468);
          }
        }
        else
        {
          WebCore::LocalFrame::checkedEventHandler((WebCore::LocalFrame *)v3);
          WebKit::platform(a2, (uint64_t)v14);
          uint64_t v4 = WebCore::EventHandler::handleAccessKey();
          WebCore::PlatformKeyboardEvent::~PlatformKeyboardEvent((WebCore::PlatformKeyboardEvent *)v14, v11);
          char v9 = v13;
          if (!v13) {
            goto LABEL_16;
          }
          int v10 = *v13;
          if (!*v13)
          {
            __break(0xC471u);
            JUMPOUT(0x199206508);
          }
        }
        *char v9 = v10 - 1;
        goto LABEL_16;
      }
    }
  }
  return 0;
}

WTF::StringImpl *WebKit::WebFrame::frameTextForTesting@<X0>(WTF::StringImpl *this@<X0>, char a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 3);
  if (!v5 || !*(void *)(v5 + 8))
  {
    *a3 = 0;
    return this;
  }
  unsigned int v6 = this;
  uint64_t v82 = 0;
  BOOL v83 = 0;
  int v84 = 0;
  char v85 = 1;
  WebKit::WebFrame::innerText((uint64_t *)&v81, v5);
  if (v81)
  {
    uint64_t v8 = (WTF::StringImpl *)(*((unsigned int *)v81 + 1) | ((unint64_t)((*((_DWORD *)v81 + 4) >> 2) & 1) << 32));
    v89[0] = *((WTF::StringImpl **)v81 + 1);
    v89[1] = v8;
    LOWORD(v90[0]) = 10;
    BYTE2(v90[0]) = 1;
    uint64_t v77 = (WTF::StringView *)v89;
    unsigned int v78 = 0;
    char v80 = 0;
    WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v77);
    int v9 = (int)v89[1];
    while (1)
    {
      uint64_t v7 = (WTF::StringImpl *)v78;
      if (v78 == v9)
      {
        if (v80) {
          break;
        }
      }
      *(void *)&long long v76 = WTF::StringView::substring((const char *)v77, v78, v79);
      *((void *)&v76 + 1) = v10;
      if (WTF::StringView::endsWith())
      {
        do
        {
          if (DWORD2(v76))
          {
            uint64_t v11 = (DWORD2(v76) - 1);
            uint64_t v12 = (const char *)v76;
            if (BYTE12(v76)) {
              v11 |= 0x100000000uLL;
            }
          }
          else
          {
            uint64_t v11 = 0x100000000;
            uint64_t v12 = "";
          }
          *(void *)&long long v76 = v12;
          DWORD2(v76) = v11;
          BYTE12(v76) = BYTE4(v11);
        }
        while ((WTF::StringView::endsWith() & 1) != 0);
      }
      int v13 = DWORD2(v76) + 1;
      if (DWORD2(v76) == -1) {
        int v13 = -1;
      }
      if (__CFADD__(v13, v84)) {
        uint64_t v14 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v14 = (v13 + v84);
      }
      uint64_t v15 = v83;
      if (v83 || (uint64_t v15 = v82) != 0)
      {
        if ((*((void *)&v76 + 1) & 0xFF00000000) != 0 && (*((_DWORD *)v15 + 4) & 4) != 0)
        {
LABEL_22:
          uint64_t v16 = (char *)MEMORY[0x19972DE60](&v82, v14);
          if (v16)
          {
            uint64_t v17 = v16;
            long long v86 = v76;
            WTF::StringView::getCharacters<unsigned char>(&v86, v16);
            v17[DWORD2(v86)] = 10;
          }
          goto LABEL_28;
        }
      }
      else if ((*((void *)&v76 + 1) & 0xFF00000000) != 0)
      {
        goto LABEL_22;
      }
      char v18 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v82);
      if (v18)
      {
        uint64_t v19 = v18;
        long long v86 = v76;
        WTF::StringTypeAdapter<WTF::StringView,void>::writeTo<char16_t>(&v86, v18);
        *(_WORD *)&v19[2 * DWORD2(v86)] = 10;
      }
LABEL_28:
      WTF::StringView::SplitResult::Iterator::operator++();
    }
    if (a2)
    {
      uint64_t v20 = *(void *)(*(void *)(*((void *)v6 + 3) + 8) + 88);
      if (v20)
      {
        while (1)
        {
          WebKit::WebFrame::fromCoreFrame(v20, &v75);
          float v21 = (uint64_t *)v75;
          if (v75) {
            break;
          }
LABEL_137:
          uint64_t v20 = *(void *)(v20 + 72);
          if (!v20) {
            goto LABEL_149;
          }
        }
        this = WebKit::WebFrame::name(v75, &v73);
        uint64_t v23 = v73;
        if (v73)
        {
          int v24 = *((_DWORD *)v73 + 1);
          *(_DWORD *)v73 += 2;
          if (v24 < 0)
          {
LABEL_44:
            int v74 = 0;
            goto LABEL_45;
          }
        }
        else
        {
          int v24 = 0;
        }
        BOOL v25 = __OFADD__(v24, 11);
        int v26 = v24 + 11;
        if (v25) {
          goto LABEL_44;
        }
        uint64_t v27 = (v26 + 18);
        if (__OFADD__(v26, 18)) {
          goto LABEL_44;
        }
        if (v23 && (*((unsigned char *)v23 + 16) & 4) == 0)
        {
          if (v27 < 0x40)
          {
            for (uint64_t i = 0; i != 18; ++i)
              *((_WORD *)v89 + i) = aFrame_0[i];
            uint64_t v77 = v23;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v77, (char *)v91);
            uint64_t v67 = v77;
            if (v77) {
              uint64_t v67 = (WTF::StringView *)*((unsigned int *)v77 + 1);
            }
            uint64_t v68 = 0;
            uint64_t v69 = &v91[(void)v67];
            do
            {
              v69[v68] = asc_1995A1D39[v68];
              ++v68;
            }
            while (v68 != 11);
            this = (WTF::StringImpl *)WTF::AtomStringImpl::add();
            goto LABEL_45;
          }
          int v30 = 0;
        }
        else
        {
          if (v27 < 0x40)
          {
            LOWORD(v90[0]) = 10016;
            *(_OWORD *)int v89 = *(_OWORD *)"\n--------\nFrame: '";
            uint64_t v77 = v23;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v77, (char *)v90 + 2);
            uint64_t v28 = v77;
            if (v77) {
              uint64_t v28 = (WTF::StringView *)*((unsigned int *)v77 + 1);
            }
            char v29 = (char *)v28 + (void)v90 + 2;
            *(void *)char v29 = *(void *)"'\n--------\n";
            *(_DWORD *)(v29 + 7) = 170732845;
            this = (WTF::StringImpl *)WTF::AtomStringImpl::add();
            goto LABEL_45;
          }
          int v30 = 1;
        }
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v27, v30, (int8x16_t *)"\n--------\nFrame: '", 0x12u, (uint64_t)v23, (int8x16_t *)"'\n--------\n", 0xBu, v89);
        this = v89[0];
        if (!v89[0]) {
          goto LABEL_44;
        }
        if ((*((unsigned char *)v89[0] + 16) & 0x10) != 0)
        {
          *(_DWORD *)v89[0] += 2;
          int v74 = this;
          v89[0] = 0;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((uint64_t *)&v74, v89[0], v22);
          this = v89[0];
          v89[0] = 0;
          if (!this) {
            goto LABEL_45;
          }
        }
        if (*(_DWORD *)this == 2) {
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v22);
        }
        else {
          *(_DWORD *)this -= 2;
        }
LABEL_45:
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v22);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
          if (!v74)
          {
LABEL_168:
            __break(0xC471u);
            return this;
          }
          uint64_t v73 = 0;
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v22);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
        else
        {
          if (!v74) {
            goto LABEL_168;
          }
          uint64_t v73 = 0;
        }
        if (!*(unsigned char *)(v20 + 144))
        {
          WebKit::WebFrame::innerText((uint64_t *)v89, v21[3]);
          int v40 = v89[0];
          v89[0] = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v7);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
            WebKit::WebFrame::frameTextForTesting((uint64_t *)&v86, (WebKit::WebFrame *)v21, 1);
            uint64_t v43 = v74;
            uint64_t v44 = (WTF::StringImpl *)v86;
            uint64_t v45 = v83;
            if ((v83 || (uint64_t v45 = v82) != 0) && (*((unsigned char *)v45 + 16) & 4) == 0
              || v74 && (*((unsigned char *)v74 + 16) & 4) == 0
              || (void)v86 && (*(unsigned char *)(v86 + 16) & 4) == 0)
            {
              uint64_t v46 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v82);
              if (v46)
              {
                uint64_t v47 = v46;
                uint64_t v77 = v43;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v77, v46);
                uint64_t v48 = v77;
                if (v77) {
                  uint64_t v48 = (WTF::StringView *)*((unsigned int *)v77 + 1);
                }
                v89[0] = v44;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v89, &v47[2 * (void)v48]);
              }
            }
            else
            {
              int v59 = (char *)MEMORY[0x19972DE60](&v82);
              if (v59)
              {
                int v60 = v59;
                uint64_t v77 = v43;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v77, v59);
                uint64_t v61 = v77;
                if (v77) {
                  uint64_t v61 = (WTF::StringView *)*((unsigned int *)v77 + 1);
                }
                v89[0] = v44;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)v89, (char *)v61 + (void)v60);
              }
            }
            if (v44)
            {
              if (*(_DWORD *)v44 == 2) {
                WTF::StringImpl::destroy(v44, v7);
              }
              else {
                *(_DWORD *)v44 -= 2;
              }
            }
          }
          goto LABEL_131;
        }
        uint64_t v31 = *((void *)v6 + 4);
        if (v31)
        {
          uint64_t v32 = *(void *)(v31 + 8);
          if (v32) {
            uint64_t v33 = v32 - 16;
          }
          else {
            uint64_t v33 = 0;
          }
        }
        else
        {
          uint64_t v33 = 0;
        }
        long long v76 = *(_OWORD *)(v20 + 32);
        uint64_t v35 = *(void *)(v33 + 32);
        uint64_t v34 = v33 + 32;
        uint64_t v36 = (*(uint64_t (**)(uint64_t))(v35 + 56))(v34);
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34);
        if (!v37)
        {
          LOBYTE(v89[0]) = 3;
          v90[0] = 1;
          goto LABEL_89;
        }
        uint64_t v38 = v37;
        uint64_t v88 = 0;
        IPC::Connection::createSyncMessageEncoder(3756, v36, &v88, &v87);
        IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v87, (uint64_t *)&v76);
        IPC::Connection::sendSyncMessage(v38, v88, (uint64_t *)&v87, 0, (uint64_t)&v77, INFINITY);
        if (v78)
        {
          if (v78 != 1) {
            goto LABEL_167;
          }
          LOBYTE(v89[0]) = (_BYTE)v77;
          v90[0] = 1;
          uint64_t v39 = 1;
        }
        else
        {
          LOBYTE(v86) = 0;
          BYTE8(v86) = 0;
          IPC::Decoder::operator>><std::tuple<WTF::String>>(v77, (uint64_t *)&v86);
          if (BYTE8(v86))
          {
            if (v78) {
LABEL_167:
            }
              std::__throw_bad_variant_access[abi:sn180100]();
            uint64_t v39 = 0;
            int v42 = v77;
            uint64_t v77 = 0;
            v89[0] = v42;
            v89[1] = (WTF::StringImpl *)v86;
            v90[0] = 0;
          }
          else
          {
            LOBYTE(v89[0]) = 13;
            v90[0] = 1;
            uint64_t v39 = v78;
            if (v78 == -1) {
              goto LABEL_86;
            }
          }
        }
        ((void (*)(long long *, WTF::StringView **))off_1EE9F8458[v39])(&v86, &v77);
LABEL_86:
        uint64_t v49 = v87;
        v87 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v41);
          WTF::fastFree(v57, v58);
        }
        if (!v90[0])
        {
          uint64_t v50 = v89[1];
          v89[1] = 0;
LABEL_91:
          char v51 = v74;
          if (v50) {
            int v52 = (*((unsigned __int8 *)v50 + 16) >> 2) & 1;
          }
          else {
            int v52 = 1;
          }
          uint64_t v53 = v83;
          if (!v83 && (uint64_t v53 = v82) == 0 || (*((unsigned char *)v53 + 16) & 4) != 0)
          {
            if (v74)
            {
              if (v52 & (*((unsigned __int8 *)v74 + 16) >> 2)) {
                goto LABEL_97;
              }
            }
            else if (v52)
            {
LABEL_97:
              int v54 = (char *)MEMORY[0x19972DE60](&v82);
              if (v54)
              {
                __int16 v55 = v54;
                *(void *)&long long v86 = v51;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v86, v54);
                uint64_t v56 = v86;
                if ((void)v86) {
                  uint64_t v56 = *(unsigned int *)(v86 + 4);
                }
                uint64_t v77 = v50;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v77, &v55[v56]);
              }
LABEL_125:
              if (v50)
              {
                if (*(_DWORD *)v50 == 2) {
                  WTF::StringImpl::destroy(v50, v7);
                }
                else {
                  *(_DWORD *)v50 -= 2;
                }
              }
              if (v90[0] != -1) {
                ((void (*)(WTF::StringView **, WTF::StringImpl **))off_1EE9F8448[v90[0]])(&v77, v89);
              }
LABEL_131:
              int v65 = v74;
              int v74 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2) {
                  WTF::StringImpl::destroy(v65, v7);
                }
                else {
                  *(_DWORD *)v65 -= 2;
                }
              }
              if (v75) {
                CFRelease(*((CFTypeRef *)v75 + 1));
              }
              goto LABEL_137;
            }
          }
          uint64_t v62 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v82);
          if (v62)
          {
            char v63 = v62;
            *(void *)&long long v86 = v51;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v86, v62);
            uint64_t v64 = v86;
            if ((void)v86) {
              uint64_t v64 = *(unsigned int *)(v86 + 4);
            }
            uint64_t v77 = v50;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v77, &v63[2 * v64]);
          }
          goto LABEL_125;
        }
LABEL_89:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v50 = v77;
        goto LABEL_91;
      }
    }
LABEL_149:
    uint64_t v70 = v82;
    if (v82
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v82),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v82),
          (uint64_t v70 = v82) != 0))
    {
      *(_DWORD *)v70 += 2;
    }
    *a3 = v70;
    long long v71 = v81;
    char v81 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2) {
        WTF::StringImpl::destroy(v71, v7);
      }
      else {
        *(_DWORD *)v71 -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  uint64_t v72 = v83;
  BOOL v83 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2) {
      WTF::StringImpl::destroy(v72, v7);
    }
    else {
      *(_DWORD *)v72 -= 2;
    }
  }
  this = v82;
  uint64_t v82 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebHistoryItemClient::historyItemChanged(WTF::StringImpl *this, const WebCore::HistoryItem *a2)
{
  if (!*((unsigned char *)this + 12))
  {
    {
      uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v11);
    }
    uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    WebKit::toBackForwardListItemState(a2, (uint64_t)v12);
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v3 = 2612;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 66) = (char *)v3 + 16;
    *((void *)v3 + 67) = 512;
    *((void *)v3 + 68) = 0;
    *((void *)v3 + 70) = 0;
    *((void *)v3 + 69) = 0;
    IPC::Encoder::encodeHeader(v3);
    uint64_t v17 = v3;
    IPC::ArgumentCoder<WebKit::BackForwardListItemState,void>::encode(v3, (uint64_t)v12);
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v17, 0, 0);
    uint64_t v5 = v17;
    uint64_t v17 = 0;
    if (v5)
    {
      IPC::Encoder::~Encoder(v5, v4);
      WTF::fastFree(v9, v10);
    }
    unsigned int v6 = v16;
    uint64_t v16 = 0;
    if (v6) {
      WTF::RefCounted<WebKit::ViewSnapshot>::deref(v6);
    }
    uint64_t v7 = v15;
    uint64_t v15 = 0;
    if (v7) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v7);
    }
    WebKit::FrameState::~FrameState(&v14);
    this = v13;
    int v13 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebOpenPanelResultListener::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v6 = 1;
  uint64_t result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t v8 = *(atomic_uint **)(a1 + 24);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)(v6 + 8) = v8;
  uint64_t v9 = *a2;
  *a2 = 0;
  *(void *)(v6 + 16) = v9;
  *a3 = v6;
  return result;
}

void WebKit::WebOpenPanelResultListener::~WebOpenPanelResultListener(WebKit::WebOpenPanelResultListener *this, void *a2)
{
  uint64_t v3 = (WebCore::FileChooser *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::FileChooser>::deref(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

void WebKit::WebCookieJar::~WebCookieJar(WebKit::WebCookieJar *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  WebKit::WebCookieCache::~WebCookieCache((WebKit::WebCookieJar *)((char *)this + 32), (WTF::StringImpl *)a2);

  WebCore::CookieJar::~CookieJar(this);
}

{
  const void *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  WebKit::WebCookieCache::~WebCookieCache((WebKit::WebCookieJar *)((char *)this + 32), (WTF::StringImpl *)a2);
  WebCore::CookieJar::~CookieJar(this);

  WTF::fastFree(v5, v6);
}

void WebKit::WebFoundTextRangeController::~WebFoundTextRangeController(WebKit::WebFoundTextRangeController *this, WTF::StringImpl *a2)
{
  WebKit::WebFoundTextRangeController::~WebFoundTextRangeController(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WebCore::TextIndicator *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int *v8;

  *(void *)this = &unk_1EE9F82E0;
  uint64_t v3 = (WebCore::TextIndicator *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v7 + 8));
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)137>::type()
{
  return 137;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess17DomCookiesForHostEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t WebKit::WebStorageSessionProvider::storageSession(WebKit::WebStorageSessionProvider *this)
{
  return 0;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess13CookiesForDOMEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess18CookiesEnabledSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess29CookieRequestHeaderFieldValueEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess13GetRawCookiesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t std::__optional_destruct_base<WebCore::VisibleSelection,false>::__optional_destruct_base[abi:sn180100]<WebCore::VisibleSelection&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2) {
    *(_DWORD *)(v2 + 28) += 2;
  }
  *(void *)uint64_t result = v2;
  int v3 = *((_DWORD *)a2 + 2);
  *(unsigned char *)(result + 12) = *((unsigned char *)a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  uint64_t v4 = a2[2];
  if (v4) {
    *(_DWORD *)(v4 + 28) += 2;
  }
  *(void *)(result + 16) = v4;
  int v5 = *((_DWORD *)a2 + 6);
  *(unsigned char *)(result + 28) = *((unsigned char *)a2 + 28);
  *(_DWORD *)(result + 24) = v5;
  uint64_t v6 = a2[4];
  if (v6) {
    *(_DWORD *)(v6 + 28) += 2;
  }
  *(void *)(result + 32) = v6;
  int v7 = *((_DWORD *)a2 + 10);
  *(unsigned char *)(result + 44) = *((unsigned char *)a2 + 44);
  *(_DWORD *)(result + 40) = v7;
  uint64_t v8 = a2[6];
  if (v8) {
    *(_DWORD *)(v8 + 28) += 2;
  }
  *(void *)(result + 48) = v8;
  int v9 = *((_DWORD *)a2 + 14);
  *(unsigned char *)(result + 60) = *((unsigned char *)a2 + 60);
  *(_DWORD *)(result + 56) = v9;
  uint64_t v10 = a2[8];
  if (v10) {
    *(_DWORD *)(v10 + 28) += 2;
  }
  *(void *)(result + 64) = v10;
  int v11 = *((_DWORD *)a2 + 18);
  *(unsigned char *)(result + 76) = *((unsigned char *)a2 + 76);
  *(_DWORD *)(result + 72) = v11;
  uint64_t v12 = a2[10];
  if (v12) {
    *(_DWORD *)(v12 + 28) += 2;
  }
  *(void *)(result + 80) = v12;
  int v13 = *((_DWORD *)a2 + 22);
  *(unsigned char *)(result + 92) = *((unsigned char *)a2 + 92);
  *(_DWORD *)(result + 88) = v13;
  LOWORD(v13) = *((_WORD *)a2 + 48);
  *(unsigned char *)(result + 98) = *((unsigned char *)a2 + 98);
  *(_WORD *)(result + 96) = v13;
  *(unsigned char *)(result + 104) = 1;
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 2) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19FrameTextForTestingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

_DWORD **WTF::Ref<WebKit::WebHistoryItemClient,WTF::RawPtrTraits<WebKit::WebHistoryItemClient>,WTF::DefaultRefDerefTraits<WebKit::WebHistoryItemClient>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        if (*(void *)(v4 + 8))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(unsigned int ***)(v4 + 8), a2);
          uint64_t v5 = *(WTF::StringImpl **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)(a1 + 16);
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 5;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      if (*(void *)(v4 - 16) != -1)
      {
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v4);
        uint64_t v5 = *(WTF::StringImpl **)(v4 - 16);
        *(void *)(v4 - 16) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 72;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *a1, void *a2)
{
  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, a2, (uint64_t)&v13);
  if (*((unsigned __int8 *)a2 + 16) == v15)
  {
    if (!*((unsigned char *)a2 + 16)) {
      return a1;
    }
    uint64_t v5 = *((unsigned int *)a2 + 3);
    if (v5)
    {
      uint64_t v6 = (WebCore::Cookie *)*a2;
      uint64_t v7 = 136 * v5;
      do
      {
        WebCore::Cookie::~Cookie(v6, v4);
        uint64_t v6 = (WebCore::Cookie *)(v8 + 136);
        v7 -= 136;
      }
      while (v7);
    }
    int v9 = (WTF *)*a2;
    if (*a2)
    {
      *a2 = 0;
      *((_DWORD *)a2 + 2) = 0;
      WTF::fastFree(v9, v4);
    }
    *a2 = v13;
    uint64_t v10 = v14;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    a2[1] = v10;
  }
  else if (*((unsigned char *)a2 + 16))
  {
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, v4);
    *((unsigned char *)a2 + 16) = 0;
  }
  else
  {
    *a2 = v13;
    uint64_t v11 = v14;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    a2[1] = v11;
    *((unsigned char *)a2 + 16) = 1;
  }
  if (v15) {
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v4);
  }
  return a1;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AXCoreObject,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WTF::String,BOOL>>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>(a1, &v11);
  if (*(unsigned __int8 *)(a2 + 16) == v13)
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return a1;
    }
    int v5 = v11;
    uint64_t v11 = 0;
    uint64_t v6 = *(WTF::StringImpl **)a2;
    *(void *)a2 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    *(unsigned char *)(a2 + 8) = v12;
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v7 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v4);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    *(unsigned char *)(a2 + 16) = 0;
  }
  else
  {
    BOOL v8 = v11;
    uint64_t v11 = 0;
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = v12;
    *(unsigned char *)(a2 + 16) = 1;
  }
  if (v13)
  {
    uint64_t v9 = v11;
    uint64_t v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v4);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebCookieJar::cookiesAdded(WTF::String const&,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::CookieChangeListener &>::call(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebCookieJar::cookiesDeleted(WTF::String const&,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::CookieChangeListener &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&,WebCore::ShouldRelaxThirdPartyCookieBlocking>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, *(void *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, *(void *)(a2 + 24));
  char v4 = *(unsigned char *)(a2 + 32);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F8518;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F8518;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 < 0x100u)
    {
      IPC::Decoder::markInvalid(a2);
      uint64_t v5 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    }
    else
    {
      uint64_t v5 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
  else
  {
    BOOL v8 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(v8);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesEnabled,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F8540;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F8540;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F8568;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F8568;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v18 = *((void *)a2 + 3);
        if (v18)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v4, v5);
            unint64_t v16 = 0;
            uint64_t v26 = *(void *)a2;
            uint64_t v27 = *((void *)a2 + 1);
            uint64_t v28 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v17 = 0;
            if (v28 && v27)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26, v27);
              uint64_t v17 = *(void *)a2;
              unint64_t v16 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v16 = 0;
            uint64_t v17 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (!v7)
          {
            LOBYTE(v29[0]) = 0;
            char v30 = 0;
            char v31 = 1;
LABEL_12:
            uint64_t v14 = *v2;
            uint64_t *v2 = 0;
            (*(void (**)(uint64_t, void *))(*(void *)v14 + 16))(v14, v29);
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
            if (v31)
            {
              if (v30) {
                return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v15);
              }
            }
            return result;
          }
          IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v35);
          if (v37)
          {
            uint64_t v9 = v35;
            uint64_t v35 = 0;
            char v33 = 1;
            uint64_t v10 = v36;
            uint64_t v36 = 0;
            WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v8);
            char v34 = 1;
            v32[0] = 0;
            v29[0] = v9;
            v32[1] = 0;
            v29[1] = v10;
            char v30 = 1;
            char v31 = 1;
            WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v11);
            goto LABEL_12;
          }
          goto LABEL_17;
        }
        unint64_t v16 = v5;
        uint64_t v17 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v19 = *((void *)a2 + 3);
      if (v19 && v16) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
LABEL_17:
      uint64_t v20 = *(void *)a2;
      uint64_t v21 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v22 = *((void *)a2 + 3);
      if (v22 && v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
        uint64_t v23 = *(void *)a2;
        uint64_t v24 = *((void *)a2 + 1);
        uint64_t v25 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v25 && v24) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
        }
      }
      else
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
      }
      return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v2);
    }
  }
  char v12 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v12);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::CookiesForDOMAsync,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  char v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v5) {
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  }
  return result;
}

uint64_t WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::$_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  uint64_t v6 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a2[4];
  a2[4] = 0;
  *(void *)(a1 + 32) = v7;
  LOWORD(v7) = *((_WORD *)a2 + 20);
  *(unsigned char *)(a1 + 42) = *((unsigned char *)a2 + 42);
  *(_WORD *)(a1 + 40) = v7;
  BOOL v8 = (_DWORD *)a2[6];
  if (v8) {
    *v8 += 2;
  }
  *(void *)(a1 + 48) = v8;
  long long v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 56) = v9;
  long long v10 = *(_OWORD *)(a2 + 11);
  long long v11 = *(_OWORD *)(a2 + 13);
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  char v12 = (_DWORD *)a2[16];
  if (v12) {
    *v12 += 2;
  }
  *(void *)(a1 + 128) = v12;
  unsigned __int8 v13 = (_DWORD *)a2[17];
  if (v13) {
    *v13 += 2;
  }
  *(void *)(a1 + 136) = v13;
  uint64_t v14 = (_DWORD *)a2[18];
  if (v14) {
    *v14 += 2;
  }
  *(void *)(a1 + 144) = v14;
  unsigned __int8 v15 = (_DWORD *)a2[19];
  if (v15) {
    *v15 += 2;
  }
  *(void *)(a1 + 152) = v15;
  long long v16 = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 171) = *(_OWORD *)((char *)a2 + 171);
  *(_OWORD *)(a1 + 160) = v16;
  uint64_t v17 = (_DWORD *)a2[24];
  if (v17) {
    *v17 += 2;
  }
  *(void *)(a1 + 192) = v17;
  uint64_t v18 = (_DWORD *)a2[25];
  if (v18) {
    *v18 += 2;
  }
  *(void *)(a1 + 200) = v18;
  long long v19 = *((_OWORD *)a2 + 14);
  *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
  *(_OWORD *)(a1 + 224) = v19;
  WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 240, (uint64_t)(a2 + 30));
  *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
  uint64_t v20 = a2[33];
  a2[33] = 0;
  *(void *)(a1 + 264) = v20;
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F8590;
  WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F8590;
  WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)const::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 8;
  if (a2 && *a2)
  {
    uint64_t v6 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if ((unsigned __int16)v6 > 0xFFu)
    {
      char v8 = v6;
      if (!(_BYTE)v6 || !*(unsigned char *)(a1 + 24)) {
        goto LABEL_16;
      }
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (*(unsigned char *)(a1 + 112) && *(unsigned char *)(a1 + 128))
      {
        WebKit::shouldRelaxThirdPartyCookieBlocking(*(WebKit **)(a1 + 40), v7);
        uint64_t v6 = WTF::URL::host((WTF::URL *)(a1 + 56));
        uint64_t v2 = *(void *)(v10 + 48);
        if (!v2)
        {
LABEL_9:
          if (!v9) {
            goto LABEL_16;
          }
          long long v11 = *(uint64_t **)v9;
          uint64_t v12 = *(void *)(v9 + 8) - 1;
          *(void *)(v9 + 8) = v12;
          if (v11)
          {
            uint64_t v13 = *v11;
            if (!*v11) {
              goto LABEL_16;
            }
            char v14 = *(unsigned char *)(v9 + 16);
            *(unsigned char *)(v9 + 16) = 1;
            (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
            *(unsigned char *)(v9 + 16) = v14;
            if (*(void *)v9) {
              goto LABEL_16;
            }
            uint64_t v12 = *(void *)(v9 + 8);
          }
          if (!v12) {
            MEMORY[0x199740C10](v9, 0x1020C40545B2139);
          }
LABEL_16:
          uint64_t v15 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = 0;
          if (v15)
          {
            long long v16 = *(uint64_t **)v15;
            uint64_t v17 = *(void *)(v15 + 8) - 1;
            *(void *)(v15 + 8) = v17;
            if (!v16) {
              goto LABEL_21;
            }
            uint64_t v18 = *v16;
            if (*v16)
            {
              char v19 = *(unsigned char *)(v15 + 16);
              *(unsigned char *)(v15 + 16) = 1;
              (*(void (**)(uint64_t, void))(*(void *)v18 + 16))(v18, 0);
              *(unsigned char *)(v15 + 16) = v19;
              if (!*(void *)v15)
              {
                uint64_t v17 = *(void *)(v15 + 8);
LABEL_21:
                if (!v17) {
                  MEMORY[0x199740C10](v15, 0x1020C40545B2139);
                }
              }
            }
          }
          BOOL v20 = v8 != 0;
          uint64_t v21 = *(void *)(a1 + 272);
          *(void *)(a1 + 272) = 0;
          (*(void (**)(uint64_t, BOOL))(*(void *)v21 + 16))(v21, v20);
          uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 8);
          return v22(v21);
        }
      }
      else
      {
        __break(1u);
      }
      char v33 = (WebKit::WebCookieCache *)(v10 + 32);
      unsigned int v34 = *(_DWORD *)(v2 - 8);
      uint64_t v27 = (unsigned __int8 *)v6;
      uint64_t v28 = (uint64_t)v7;
      int v29 = WTF::StringViewHashTranslator::hash(v6, (uint64_t)v7);
      for (i = 0; ; int v29 = i + v31)
      {
        int v31 = v29 & v34;
        uint64_t v32 = (uint64_t *)(v2 + 8 * (v29 & v34));
        if (*v32 != -1)
        {
          if (!*v32) {
            goto LABEL_9;
          }
          if (WTF::StringViewHashTranslator::equal(v32, v27, v28)) {
            break;
          }
        }
        ++i;
      }
      WebKit::WebCookieCache::inMemoryStorageSession(v33);
      WebCore::NetworkStorageSession::setCookieFromDOM();
      goto LABEL_9;
    }
    uint64_t v24 = *a2;
    uint64_t v25 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26 && v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
    }
  }

  return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v3);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SetCookieFromDOMAsync,WebKit::WebCookieJar::setCookieAsync(WebCore::Document &,WTF::URL const&,WebCore::Cookie const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)v2;
    uint64_t v4 = *(void *)(v2 + 8) - 1;
    *(void *)(v2 + 8) = v4;
    if (v3)
    {
      uint64_t v5 = *v3;
      if (!*v3) {
        goto LABEL_8;
      }
      char v6 = *(unsigned char *)(v2 + 16);
      *(unsigned char *)(v2 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
      *(unsigned char *)(v2 + 16) = v6;
      if (*(void *)v2) {
        goto LABEL_8;
      }
      uint64_t v4 = *(void *)(v2 + 8);
    }
    if (!v4) {
      MEMORY[0x199740C10](v2, 0x1020C40545B2139);
    }
  }
LABEL_8:
  uint64_t v7 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
  char v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 24 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    do
    {
      char v14 = (WTF::StringImpl **)(v4 + 24 * v11);
      uint64_t v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = *((_DWORD *)v15 + 4);
          if (v18 >= 0x100) {
            int v19 = v18 >> 8;
          }
          else {
            int v19 = WTF::StringImpl::hashSlowCase(v15);
          }
          int v20 = 0;
          do
          {
            unsigned int v21 = v19 & v17;
            uint64_t v22 = (WTF::StringImpl **)(v16 + 24 * (v19 & v17));
            int v19 = ++v20 + (v19 & v17);
          }
          while (*v22);
          uint64_t v23 = v16 + 24 * v21;
          uint64_t v26 = *(unsigned int ***)(v23 + 8);
          uint64_t v25 = (void *)(v23 + 8);
          uint64_t v24 = v26;
          if (v26)
          {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v24, v8);
            uint64_t v32 = *v22;
            *uint64_t v22 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2) {
                WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
              }
              else {
                *(_DWORD *)v32 -= 2;
              }
            }
          }
          else
          {
            *uint64_t v22 = 0;
          }
          uint64_t v27 = *v14;
          *char v14 = 0;
          *uint64_t v22 = v27;
          uint64_t v28 = v4 + 24 * v11;
          *uint64_t v25 = 0;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          *uint64_t v25 = v29;
          *(void *)(v16 + 24 * v21 + 16) = *(void *)(v28 + 16);
          char v30 = *(unsigned int ***)(v28 + 8);
          if (v30) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v30, v8);
          }
          int v31 = *v14;
          *char v14 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
          if (v14 == a3) {
            uint64_t v12 = v16 + 24 * v21;
          }
        }
        else
        {
          if (*(void *)(v4 + 24 * v11 + 8))
          {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(unsigned int ***)(v4 + 24 * v11 + 8), v8);
            uint64_t v15 = *v14;
          }
          *char v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

unsigned int **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unsigned int **WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakHashSet<WebCore::CookieChangeListener,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  uint64_t result = *(unsigned int ***)(a1 + 8);
  if (result)
  {
    return (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(result, v3);
  }
  return result;
}

void *WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,std::optional<WebCore::SimpleRange>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<std::optional<WebCore::SimpleRange>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(72 * v5 + 16));
  if (v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = (unsigned char *)(v6 + 80);
    do
    {
      *uint64_t v9 = 0;
      *((_OWORD *)v9 - 4) = 0uLL;
      *((_OWORD *)v9 - 3) = 0uLL;
      *(v9 - 32) = 0;
      v9 += 72;
      --v8;
    }
    while (v8);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v3;
    while (1)
    {
      uint64_t v13 = (void *)(v2 + 72 * v10);
      uint64_t v14 = v13[2];
      if (v14 != -1)
      {
        if (*v13)
        {
          uint64_t v15 = v13[1];
        }
        else
        {
          uint64_t v15 = v13[1];
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v15 == 0;
          }
          if (v16)
          {
            if (!v13[3])
            {
              std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v2 + 72 * v10 + 32);
              uint64_t v38 = (WTF::StringImpl *)v13[2];
              v13[2] = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2) {
                  WTF::StringImpl::destroy(v38, v7);
                }
                else {
                  *(_DWORD *)v38 -= 2;
                }
              }
              goto LABEL_49;
            }
            LODWORD(v15) = 0;
          }
        }
        uint64_t v17 = *a1;
        if (*a1) {
          int v18 = *(_DWORD *)(v17 - 8);
        }
        else {
          int v18 = 0;
        }
        unsigned int v19 = v18 & ((0xD7862706ELL * (unint64_t)(277951225 * *v13 + 95187966 * v15)) >> 4);
        for (int i = 1; ; ++i)
        {
          unsigned int v21 = v19;
          uint64_t v22 = (void *)(v17 + 72 * v19);
          uint64_t v23 = v22[2];
          if (v23 != -1 && *v22 == 0)
          {
            BOOL v25 = !v23 && v22[1] == 0;
            if (v25 && !v22[3]) {
              break;
            }
          }
          unsigned int v19 = (v21 + i) & v18;
        }
        uint64_t v26 = (unsigned char *)(v17 + 72 * v21 + 32);
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26);
        uint64_t v28 = (WTF::StringImpl *)v22[2];
        v22[2] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v27);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        *(_OWORD *)uint64_t v22 = *(_OWORD *)v13;
        uint64_t v29 = v13[2];
        uint64_t v30 = v13[3];
        v13[2] = 0;
        v22[2] = v29;
        v22[3] = v30;
        unsigned char *v26 = 0;
        uint64_t v31 = v17 + 72 * v21;
        *(unsigned char *)(v31 + 64) = 0;
        uint64_t v32 = (unsigned char *)(v31 + 64);
        if (*(unsigned char *)(v2 + 72 * v10 + 64))
        {
          uint64_t v33 = v2 + 72 * v10;
          uint64_t v34 = *(void *)(v33 + 32);
          *(void *)(v33 + 32) = 0;
          *(void *)uint64_t v26 = v34;
          uint64_t v35 = v17 + 72 * v21;
          *(_DWORD *)(v35 + 40) = *(_DWORD *)(v33 + 40);
          uint64_t v36 = *(void *)(v33 + 48);
          *(void *)(v33 + 48) = 0;
          *(void *)(v35 + 48) = v36;
          *(_DWORD *)(v35 + 56) = *(_DWORD *)(v33 + 56);
          unsigned char *v32 = 1;
        }
        std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100](v2 + 72 * v10 + 32);
        char v37 = (WTF::StringImpl *)v13[2];
        v13[2] = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2) {
            WTF::StringImpl::destroy(v37, v7);
          }
          else {
            *(_DWORD *)v37 -= 2;
          }
        }
        if (v13 == a2) {
          uint64_t v11 = v22;
        }
      }
LABEL_49:
      if (++v10 == v12) {
        goto LABEL_56;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t result = 0;
  if (v2)
  {
LABEL_56:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::WebFoundTextRange,WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle>>,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashMap<WebKit::WebFoundTextRange,WebKit::FindDecorationStyle,WTF::DefaultHash<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::WebFoundTextRange>,WTF::HashTraits<WebKit::FindDecorationStyle>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebFoundTextRange>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  if (v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = result + 16;
    do
    {
      *(unsigned char *)(v9 + 32) = 0;
      *(_OWORD *)uint64_t v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      v9 += 40;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v3;
    while (1)
    {
      uint64_t v12 = (void *)(v2 + 40 * v10);
      uint64_t v13 = v12[2];
      if (v13 != -1)
      {
        if (*v12)
        {
          uint64_t v14 = v12[1];
          goto LABEL_21;
        }
        uint64_t v14 = v12[1];
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v14 == 0;
        }
        if (!v15) {
          goto LABEL_21;
        }
        if (v12[3])
        {
          LODWORD(v14) = 0;
LABEL_21:
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = v17 & ((0xD7862706ELL * (unint64_t)(277951225 * *v12 + 95187966 * v14)) >> 4);
          for (int i = 1; ; ++i)
          {
            unsigned int v20 = v18;
            unsigned int v21 = (void *)(v16 + 40 * v18);
            uint64_t v22 = v21[2];
            if (v22 != -1 && *v21 == 0)
            {
              BOOL v24 = !v22 && v21[1] == 0;
              if (v24 && !v21[3]) {
                break;
              }
            }
            unsigned int v18 = (v20 + i) & v17;
          }
          void v21[2] = 0;
          *(_OWORD *)unsigned int v21 = *(_OWORD *)v12;
          uint64_t v25 = v12[2];
          uint64_t v26 = v12[3];
          uint64_t v12[2] = 0;
          void v21[2] = v25;
          v21[3] = v26;
          *(unsigned char *)(v16 + 40 * v20 + 32) = *(unsigned char *)(v2 + 40 * v10 + 32);
          uint64_t v27 = (WTF::StringImpl *)v12[2];
          uint64_t v12[2] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v7);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          goto LABEL_41;
        }
        uint64_t v12[2] = 0;
      }
LABEL_41:
      if (++v10 == v11) {
        goto LABEL_45;
      }
    }
  }
  if (v2)
  {
LABEL_45:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebFrame::createSubframe(WebKit::WebPage &,WebKit::WebFrame&,WTF::AtomString const&,WebCore::HTMLFrameOwnerElement &)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F85B8;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::createSubframe(WebKit::WebPage &,WebKit::WebFrame&,WTF::AtomString const&,WebCore::HTMLFrameOwnerElement &)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F85B8;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned char *WTF::Detail::CallableWrapper<WebKit::WebFrame::createSubframe(WebKit::WebPage &,WebKit::WebFrame&,WTF::AtomString const&,WebCore::HTMLFrameOwnerElement &)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9F8608;
  v6[1] = v5;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x60);
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  char v11 = 0;
  *(unsigned char *)(v7 + 32) = 1;
  *(void *)uint64_t v7 = &unk_1EE9F6478;
  *(void *)(v7 + 8) = &unk_1EE9F6970;
  *(unsigned char *)(v7 + 56) = 0;
  *(unsigned char *)(v7 + 80) = 0;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 45) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  uint64_t v8 = *(atomic_uint **)(a2 + 16);
  atomic_fetch_add(v8, 1u);
  *(void *)(v7 + 88) = v8;
  uint64_t result = WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(&v10);
  *a3 = v7;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebFrame::createRemoteSubframe(WebKit::WebPage &,WebKit::WebFrame&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F85E0;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::createRemoteSubframe(WebKit::WebPage &,WebKit::WebFrame&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F85E0;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned char *WTF::Detail::CallableWrapper<WebKit::WebFrame::createRemoteSubframe(WebKit::WebPage &,WebKit::WebFrame&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String const&)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebFrame::makeInvalidator(*(CFTypeRef **)(a1 + 8), (uint64_t)&v8);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x28);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v6;
  LOBYTE(v6) = v9;
  char v9 = 0;
  *(unsigned char *)(v5 + 32) = v6;
  *(void *)uint64_t v5 = &unk_1EE9F71A8;
  *(void *)(v5 + 8) = &unk_1EE9F7238;
  uint64_t result = WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(&v8);
  *a2 = v5;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebFrame::makeInvalidator(void)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F8608;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::makeInvalidator(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F8608;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebFrame::makeInvalidator(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebFrame::invalidate(*(WebKit::WebFrame **)(a1 + 8));
}

void *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 24 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    uint64_t v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          unsigned int v18 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::reinsert(*a1, v16);
          uint64_t v19 = v16[2];
          void v16[2] = 0;
          if (v19)
          {
            unsigned int v20 = v18;
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
            unsigned int v18 = v20;
          }
          if (v16 == a3) {
            uint64_t v13 = v18;
          }
        }
        else
        {
          uint64_t v17 = v16[2];
          void v16[2] = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
        }
      }
      v16 += 3;
      --v15;
    }
    while (v15);
    goto LABEL_19;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

void *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (a1) {
    int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v5 = 0;
  }
  unint64_t v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  int v10 = 1;
  do
  {
    unsigned int v11 = v9;
    uint64_t v12 = (void *)(a1 + 24 * v9);
    unsigned int v9 = (v9 + v10++) & v5;
  }
  while (*v12);
  unsigned int v13 = v11;
  uint64_t v14 = a1 + 24 * v11;
  uint64_t v17 = *(void *)(v14 + 16);
  uint64_t v16 = (void *)(v14 + 16);
  uint64_t v15 = v17;
  *uint64_t v16 = 0;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    uint64_t v4 = *a2;
  }
  void *v12 = v4;
  *(unsigned char *)(a1 + 24 * v13 + 8) = *((unsigned char *)a2 + 8);
  uint64_t v18 = a2[2];
  a2[2] = 0;
  *uint64_t v16 = v18;
  return v12;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::loadDidCommitInAnotherProcess(std::optional<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F8630;
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit((unsigned char *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9F8630;
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit((unsigned char *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::loadDidCommitInAnotherProcess(std::optional<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>)::$_0,WTF::UniqueRef<WebCore::RemoteFrameClient>,WebCore::RemoteFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x28);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(result + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(result + 24) = v6;
  LOBYTE(v6) = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(result + 32) = v6;
  *(void *)uint64_t result = &unk_1EE9F71A8;
  *(void *)(result + 8) = &unk_1EE9F7238;
  *a2 = result;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebFrame::createProvisionalFrame(WebKit::ProvisionalFrameCreationParameters &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WTF::UniqueRef::LocalFrame &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F8658;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::createProvisionalFrame(WebKit::ProvisionalFrameCreationParameters &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WTF::UniqueRef::LocalFrame &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F8658;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

unsigned char *WTF::Detail::CallableWrapper<WebKit::WebFrame::createProvisionalFrame(WebKit::ProvisionalFrameCreationParameters &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WTF::UniqueRef::LocalFrame &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + 16);
  WebKit::WebFrame::makeInvalidator(*(CFTypeRef **)(a1 + 8), (uint64_t)v8);
  uint64_t v6 = WTF::fastMalloc((WTF *)0x60);
  WebKit::WebLocalFrameLoaderClient::WebLocalFrameLoaderClient(v6, a2, v5, v8);
  uint64_t result = WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v8);
  *a3 = v6;
  return result;
}

void *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[3 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[3 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 24 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v4 -= 24;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

float WebCore::Color::callOnUnderlyingType<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor> WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(void)::{lambda(WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor> const&)#1}>(unint64_t *a1, uint64_t a2, int8x8_t a3)
{
  unint64_t v3 = *a1;
  if ((*a1 & 0x8000000000000) != 0)
  {
    int8x16_t v6 = *(int8x16_t *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    v7[0] = a2;
    v7[1] = &v6;
    *(float *)&double v4 = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v3), (uint64_t)v7, v6);
  }
  else
  {
    double v4 = WebCore::mapColorComponents<WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)::{lambda(unsigned char)#1},WebCore::ColorComponents<unsigned char,4ul>>(a3, (uint64_t)v7, bswap32(v3));
  }
  return *(float *)&v4;
}

float _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(int a1, uint64_t a2, int8x16_t a3)
{
  switch(a1)
  {
    case 0:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v5);
      break;
    case 1:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v5);
      break;
    case 2:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v5);
      break;
    case 3:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v5);
      break;
    case 4:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v5);
      break;
    case 5:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(&v5);
      break;
    case 6:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v5);
      break;
    case 7:
      uint64_t v4 = *(void *)(a2 + 8);
      a3.i32[0] = *(_DWORD *)v4;
      float result = WebCore::clipToGamut<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>(a3, *(float *)(v4 + 4), *(float *)(v4 + 8), *(float *)(v4 + 12));
      break;
    case 8:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert();
      break;
    case 9:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert();
      break;
    case 10:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::LCHA<float>,void>::convert();
      break;
    case 11:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::Lab<float>,void>::convert();
      break;
    case 12:
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::toGammaEncoded<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>>((uint64_t)&v5, *(int8x16_t *)*(void *)(a2 + 8));
      break;
    case 13:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLCHA<float>,void>::convert();
      break;
    case 14:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::OKLab<float>,void>::convert();
      break;
    case 15:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(&v5);
      break;
    case 16:
      int8x16_t v5 = *(int8x16_t *)*(void *)(a2 + 8);
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v5);
      break;
    case 18:
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v5, *(int8x16_t *)*(void *)(a2 + 8));
      break;
    case 19:
      float result = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((uint64_t)&v5, *(int8x16_t *)*(void *)(a2 + 8));
      break;
    default:
      float result = **(float **)(a2 + 8);
      break;
  }
  return result;
}

double WebCore::mapColorComponents<WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,void>::handleToFloatConversion(WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor> const&)::{lambda(unsigned char)#1},WebCore::ColorComponents<unsigned char,4ul>>(int8x8_t a1, uint64_t a2, __int32 a3)
{
  a1.i32[0] = a3;
  *(void *)&double result = vdivq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(a1, a1) & 0xFF00FF00FF00FFLL))), (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFrame::webArchiveData(BOOL (*)(OpaqueWKBundleFrame const*,OpaqueWKBundleFrame const*,void *),void *,WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::String const&)::$_0,BOOL,WebCore::LocalFrame &>::call(void *a1, uint64_t a2)
{
  if (!a1[2]) {
    return 1;
  }
  uint64_t v3 = a1[1];
  WebKit::WebFrame::fromCoreFrame(a2, &v9);
  uint64_t v4 = (uint64_t (*)(uint64_t, void, void))a1[2];
  if (v3) {
    uint64_t v5 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v9;
  if (!v9) {
    return v4(v5, 0, a1[3]);
  }
  uint64_t v7 = v4(v5, *(void *)(v9 + 8), a1[3]);
  CFRelease(*(CFTypeRef *)(v6 + 8));
  return v7;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebHistoryItemClient::ignoreChangesForScope(void)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F86A8;
  WTF::Ref<WebKit::WebHistoryItemClient,WTF::RawPtrTraits<WebKit::WebHistoryItemClient>,WTF::DefaultRefDerefTraits<WebKit::WebHistoryItemClient>>::~Ref((_DWORD **)(a1 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebHistoryItemClient::ignoreChangesForScope(void)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F86A8;
  WTF::Ref<WebKit::WebHistoryItemClient,WTF::RawPtrTraits<WebKit::WebHistoryItemClient>,WTF::DefaultRefDerefTraits<WebKit::WebHistoryItemClient>>::~Ref((_DWORD **)a1 + 2);

  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebHistoryItemClient::ignoreChangesForScope(void)::$_0,void>::call(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 12) = 0;
  return result;
}

void WebKit::WebPageGroupProxy::~WebPageGroupProxy(WebKit::WebPageGroupProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9F86F8;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPageGroupProxy::~WebPageGroupProxy(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebPageGroupProxy::corePageGroup(WebKit::WebPageGroupProxy *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebPageOverlay::create@<X0>(uint64_t *a1@<X0>, WebKit **a2@<X8>)
{
  uint64_t v4 = (WebKit *)API::Object::newObject(0x30uLL, 142);
  uint64_t v5 = *a1;
  *a1 = 0;
  uint64_t v8 = v5;
  *a2 = WebKit::WebPageOverlay::WebPageOverlay(v4, &v8);
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)v8 + 8);
    return v7();
  }
  return result;
}

WebKit *WebKit::WebPageOverlay::WebPageOverlay(WebKit *a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(a1);
  *(void *)a1 = &unk_1EE9F8718;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = &unk_1EE9F8780;
  WebCore::PageOverlay::create();
  *((void *)a1 + 4) = v10[0];
  uint64_t v4 = *a2;
  *a2 = 0;
  *((void *)a1 + 5) = v4;
  {
    WebKit::overlayMap(void)::map = 0;
  }
  uint64_t v5 = *((void *)a1 + 4);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 16), v5);
  uint64_t v6 = *(atomic_uint **)(v5 + 16);
  atomic_fetch_add(v6, 1u);
  unsigned int v11 = (WTF *)v6;
  WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleDOMWindowExtension&>(&WebKit::overlayMap(void)::map, (uint64_t *)&v11, (uint64_t)a1, (uint64_t)v10);
  uint64_t v8 = (unsigned int *)v11;
  unsigned int v11 = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  return a1;
}

void WebKit::WebPageOverlay::~WebPageOverlay(WebKit::WebPageOverlay *this, void *a2)
{
  *(void *)this = &unk_1EE9F8718;
  *((void *)this + 3) = &unk_1EE9F8780;
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    {
      p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
      uint64_t v5 = WebKit::overlayMap(void)::map;
      if (WebKit::overlayMap(void)::map)
      {
        int v6 = *(_DWORD *)(WebKit::overlayMap(void)::map - 8);
        unint64_t v7 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
        unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
        for (int i = 1; ; ++i)
        {
          uint64_t v12 = v10;
          uint64_t v13 = *(void *)(WebKit::overlayMap(void)::map + 16 * v10);
          if (v13 != -1)
          {
            if (!v13) {
              goto LABEL_22;
            }
            if (*(void *)(v13 + 8) == v3) {
              break;
            }
          }
          unsigned int v10 = (v10 + i) & v6;
        }
        if (v10 != *(_DWORD *)(WebKit::overlayMap(void)::map - 4))
        {
          uint64_t v14 = (void *)(WebKit::overlayMap(void)::map + 16 * v10);
          *uint64_t v14 = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            uint64_t v29 = v5;
            uint64_t v30 = v10;
            uint64_t v28 = (void *)(v5 + 16 * v10);
            WTF::fastFree((WTF *)v13, a2);
            uint64_t v14 = v28;
            uint64_t v5 = v29;
            uint64_t v12 = v30;
            p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEDragInteractionDelegate + 40);
          }
          *uint64_t v14 = -1;
          uint64_t v15 = v5 + 16 * v12;
          uint64_t v16 = *(unsigned int **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, a2);
            p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEDragInteractionDelegate + 40);
          }
          ++p_opt_inst_meths[452][-2].entrysize;
          uint64_t v17 = p_opt_inst_meths[452];
          if (v17) {
            int v18 = v17[-2].count - 1;
          }
          else {
            int v18 = -1;
          }
          v17[-2].unsigned int count = v18;
          uint64_t v19 = p_opt_inst_meths[452];
          if (v19)
          {
            unsigned int v20 = 6 * v19[-2].count;
            unsigned int count = v19[-1].count;
            if (v20 < count && count >= 9) {
              WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::rehash(&WebKit::overlayMap(void)::map, count >> 1, 0);
            }
          }
        }
      }
    }
    else
    {
      WebKit::overlayMap(void)::map = 0;
    }
LABEL_22:
    uint64_t v23 = *((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v23) {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v23 + 8));
    }
  }
  uint64_t v24 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v25) {
    WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v25 + 8));
  }
  uint64_t v26 = *((void *)this + 2);
  if (v26)
  {
    *(void *)(v26 + 8) = 0;
    uint64_t v27 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v27)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::WebPageOverlay::~WebPageOverlay(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::WebPageOverlay::~WebPageOverlay(WebKit::WebPageOverlay *this, void *a2)
{
}

{
  uint64_t vars8;

  WebKit::WebPageOverlay::~WebPageOverlay((WebKit::WebPageOverlay *)((char *)this - 24), a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebPageOverlay::willMoveToPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3
    && (uint64_t v4 = *(void **)(*(void *)(a3 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v4 + 1368))(v4) & 1) == 0)
    && (uint64_t v5 = *(void *)(v4[2] + 8)) != 0)
  {
    uint64_t v6 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    char v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), a1, v6);
  if ((v7 & 1) == 0)
  {
    unint64_t v8 = *(const void **)(v6 + 8);
    CFRelease(v8);
  }
}

void non-virtual thunk to'WebKit::WebPageOverlay::willMoveToPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void WebKit::WebPageOverlay::didMoveToPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3
    && (uint64_t v4 = *(void **)(*(void *)(a3 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v4 + 1368))(v4) & 1) == 0)
    && (uint64_t v5 = *(void *)(v4[2] + 8)) != 0)
  {
    uint64_t v6 = v5 - 16;
    CFRetain(*(CFTypeRef *)(v5 - 8));
    char v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a1, v6);
  if ((v7 & 1) == 0)
  {
    unint64_t v8 = *(const void **)(v6 + 8);
    CFRelease(v8);
  }
}

void non-virtual thunk to'WebKit::WebPageOverlay::didMoveToPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t WebKit::WebPageOverlay::drawRect(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), a1);
}

uint64_t non-virtual thunk to'WebKit::WebPageOverlay::drawRect(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a1 - 24);
}

uint64_t WebKit::WebPageOverlay::mouseEvent(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40), a1);
}

uint64_t non-virtual thunk to'WebKit::WebPageOverlay::mouseEvent(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a1 - 24);
}

void WebKit::WebPageOverlay::didScrollFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebFrame::fromCoreFrame(a3, &v6);
  uint64_t v4 = v6;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40), a1, v6);
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void non-virtual thunk to'WebKit::WebPageOverlay::didScrollFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t WebKit::WebPageOverlay::copyAccessibilityAttributeStringValueForPoint(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *a3;
  if (*a3) {
    *(_DWORD *)v5 += 2;
  }
  unsigned int v10 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v4 + 56))(v4, a1, &v10);
  unint64_t v8 = v10;
  unsigned int v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'WebKit::WebPageOverlay::copyAccessibilityAttributeStringValueForPoint(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  return WebKit::WebPageOverlay::copyAccessibilityAttributeStringValueForPoint(a1 - 24, a2, a3);
}

uint64_t WebKit::WebPageOverlay::copyAccessibilityAttributeBoolValueForPoint(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *a3;
  if (*a3) {
    *(_DWORD *)v5 += 2;
  }
  unsigned int v10 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v4 + 64))(v4, a1, &v10);
  unint64_t v8 = v10;
  unsigned int v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'WebKit::WebPageOverlay::copyAccessibilityAttributeBoolValueForPoint(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  return WebKit::WebPageOverlay::copyAccessibilityAttributeBoolValueForPoint(a1 - 24, a2, a3);
}

uint64_t WebKit::WebPageOverlay::copyAccessibilityAttributeNames(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 72))(*(void *)(a1 + 40), a1);
}

uint64_t non-virtual thunk to'WebKit::WebPageOverlay::copyAccessibilityAttributeNames(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), a1 - 24);
}

void WebKit::WebPageTesting::~WebPageTesting(WebKit::WebPageTesting *this)
{
  *(void *)this = &unk_1EE9F87E0;
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0xB9u, *(void *)(v3 + 40));
  uint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPageTesting::~WebPageTesting(this);

  WTF::fastFree(v1, v2);
}

_DWORD *WebKit::WebPageTesting::setDefersLoading(_DWORD *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(WebCore::Page **)(v2 + 48);
  if (v3)
  {
    ++*(_DWORD *)v3;
    WebCore::Page::setDefersLoading(v3);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  return this;
}

uint64_t WebKit::WebPageTesting::isLayerTreeFrozen(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  BOOL v4 = *(_DWORD *)(v3 + 2104) != 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void WebKit::WebPageTesting::setPermissionLevel(WebKit::WebPageTesting *this, WTF::StringImpl **a2, char a3)
{
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  uint64_t v7 = (WebKit::NotificationPermissionRequestManager *)WebKit::WebPage::notificationPermissionRequestManager((WebKit::WebPage *)v6);
  unint64_t v8 = v7;
  if (v7) {
    ++*(_DWORD *)v7;
  }
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  if (v8)
  {
    WebKit::NotificationPermissionRequestManager::setPermissionLevelForTesting(v8, a2, a3);
    WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v8);
  }
}

unsigned int *WebKit::WebPageTesting::isEditingCommandEnabled(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = *(WebCore::Page **)(v7 + 48);
  if (v8) {
    ++*(_DWORD *)v8;
  }
  WebCore::Page::checkedFocusController((uint64_t *)v27, v8);
  uint64_t v9 = WebCore::FocusController::focusedOrMainFrame(v27[0]);
  unsigned int v10 = (unsigned int *)v9;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  }
  unsigned int v11 = v27[0];
  v27[0] = 0;
  if (v11)
  {
    if (!*(_DWORD *)v11)
    {
      __break(0xC471u);
      goto LABEL_42;
    }
    --*(_DWORD *)v11;
  }
  if (!v9)
  {
    uint64_t v19 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v19 + 16))(v19, 0);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
    goto LABEL_35;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v13 = v12 - 16;
  if (!v12) {
    uint64_t v13 = 0;
  }
  CFRetain(*(CFTypeRef *)(v13 + 8));
  uint64_t v15 = WebKit::WebPage::focusedPluginViewForFrame((WebKit::WebPage *)v10, v14);
  uint64_t v16 = (WebKit::PluginView *)v15;
  if (v15) {
    ++*(_DWORD *)(v15 + 8);
  }
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 - 8));
  }
  if (!v16)
  {
    WebCore::LocalFrame::checkedEditor((uint64_t *)&v26, (WebCore::LocalFrame *)v10);
    WebCore::Editor::command((uint64_t *)v27, v26, a2);
    unsigned int v21 = v26;
    uint64_t v26 = 0;
    if (!v21)
    {
LABEL_25:
      if (WebCore::Editor::Command::isSupported((WebCore::Editor::Command *)v27)) {
        uint64_t isEnabled = WebCore::Editor::Command::isEnabled();
      }
      else {
        uint64_t isEnabled = 0;
      }
      uint64_t v23 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, isEnabled);
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      uint64_t v24 = v29;
      uint64_t v29 = 0;
      if (v24) {
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v24 + 8));
      }
      uint64_t v25 = v28;
      uint64_t v28 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 7) == 2)
        {
          if ((*((_WORD *)v25 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v25);
          }
        }
        else
        {
          *((_DWORD *)v25 + 7) -= 2;
        }
      }
      goto LABEL_34;
    }
    if (*(_DWORD *)v21)
    {
      --*(_DWORD *)v21;
      goto LABEL_25;
    }
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x19920B174);
  }
  uint64_t isEditingCommandEnabled = WebKit::PluginView::isEditingCommandEnabled(v16, a2);
  uint64_t v18 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, isEditingCommandEnabled);
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  if (*((_DWORD *)v16 + 2) == 1) {
    (*(void (**)(WebKit::PluginView *))(*(void *)v16 + 8))(v16);
  }
  else {
    --*((_DWORD *)v16 + 2);
  }
LABEL_34:
  uint64_t result = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10 + 2);
LABEL_35:
  if (v8) {
    return WTF::RefCounted<WebCore::Page>::deref(v8);
  }
  return result;
}

_DWORD *WebKit::WebPageTesting::clearNotificationPermissionState(WebKit::WebPageTesting *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v2 + 48);
  if (v3)
  {
    ++*(_DWORD *)v3;
    v10[0] = WebCore::NotificationController::supplementName(this);
    v10[1] = v4;
    uint64_t v6 = *((void *)WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v3 + 8), (WTF::ASCIILiteralHash *)v10)+ 1);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      *(void *)(v6 + 8) = 0;
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v7, v5);
    }
    return WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v3);
  }
  else
  {
    WebCore::NotificationController::supplementName(this);
    uint64_t result = *(_DWORD **)(MEMORY[8] + 8);
    if (result)
    {
      *(void *)(MEMORY[8] + 8) = 0;
      return (_DWORD *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((uint64_t)result, v9);
    }
  }
  return result;
}

_DWORD *WebKit::WebPageTesting::clearWheelEventTestMonitor(_DWORD *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(WebCore::Page **)(v2 + 48);
  if (v3)
  {
    ++*(_DWORD *)v3;
    WebCore::Page::clearWheelEventTestMonitor(v3);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  return this;
}

uint64_t WebKit::WebPageTesting::setTopContentInset(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  WebKit::WebPage::setTopContentInset((WebKit::WebPage *)v6, a3);
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  unint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

_DWORD *WebKit::WebPageTesting::setPageScaleFactor(uint64_t a1, IntPoint a2, uint64_t *a3, double a4)
{
  IntPoint v13 = a2;
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(WebCore::Page **)(v6 + 48);
  if (v7)
  {
    ++*(_DWORD *)v7;
    float v8 = a4;
    WebCore::Page::setPageScaleFactor(v7, v8, &v13);
    uint64_t v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    return WTF::RefCounted<WebCore::Page>::deref(v7);
  }
  else
  {
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return (_DWORD *)v12(v11);
  }
}

void WebKit::WebURLSchemeHandlerProxy::~WebURLSchemeHandlerProxy(WebKit::WebURLSchemeHandlerProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

void WebKit::WebURLSchemeHandlerProxy::startNewTask(WebKit::WebURLSchemeHandlerProxy *this, const String *a2, CFTypeRef *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t m_ptr = (uint64_t)a2[93].m_impl.m_ptr;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x120);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = this;
  ++LODWORD(a2[2].m_impl.m_ptr);
  *(void *)(v7 + 24) = a2;
  CFRetain(a3[1]);
  *(void *)(v7 + 32) = a3;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v7 + 40), a2 + 42);
  *(String *)(v7 + 240) = a2[93];
  *(unsigned char *)(v7 + 248) = 0;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 272) = 0u;
  uint64_t v11 = *((void *)this + 4);
  unsigned int v10 = (uint64_t *)((char *)this + 32);
  uint64_t v9 = v11;
  if (v11
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v10, 0), (uint64_t v9 = *v10) != 0))
  {
    int v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unint64_t v13 = (m_ptr + ~(m_ptr << 32)) ^ ((unint64_t)(m_ptr + ~(m_ptr << 32)) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
  uint64_t v17 = (uint64_t *)(v9 + 16 * v16);
  uint64_t v18 = *v17;
  if (*v17)
  {
    uint64_t v19 = 0;
    int v20 = 1;
    do
    {
      if (v18 == m_ptr)
      {
        WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref((WebKit::WebURLSchemeTaskProxy *)v7, v8);
        goto LABEL_24;
      }
      if (v18 == -1) {
        uint64_t v19 = v17;
      }
      unsigned int v16 = (v16 + v20) & v12;
      uint64_t v17 = (uint64_t *)(v9 + 16 * v16);
      uint64_t v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *uint64_t v19 = 0;
      v19[1] = 0;
      --*(_DWORD *)(*v10 - 16);
      uint64_t v17 = v19;
    }
  }
  unsigned int v21 = (WebKit::WebURLSchemeTaskProxy *)v17[1];
  uint64_t *v17 = m_ptr;
  v17[1] = v7;
  if (v21) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v21, v8);
  }
  uint64_t v22 = *v10;
  if (*v10) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v10;
  if (*v10) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 <= 0x400)
  {
    if (3 * v27 > 4 * v26) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v27 <= 2 * v26) {
LABEL_23:
  }
    uint64_t v17 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v10, v17);
LABEL_24:
  {
    int v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v54);
  }
  uint64_t v28 = v17[1];
  uint64_t v29 = (uint64_t *)(*(void *)(WebKit::WebProcess::singleton(void)::process + 320) + 56);
  uint64_t v56 = *(void *)(v28 + 240);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeTaskProxy&>(v29, &v56, v28, (uint64_t)buf);
  uint64_t v30 = v17[1];
  uint64_t v31 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = *(void *)(*(void *)(v30 + 16) + 24);
    uint64_t v33 = *(void **)(v30 + 32);
    if (v33)
    {
      uint64_t v33 = (void *)v33[3];
      if (v33)
      {
        uint64_t v33 = (void *)v33[1];
        if (v33)
        {
          uint64_t v33 = (void *)v33[3];
          if (v33)
          {
            uint64_t v33 = (void *)v33[1];
            if (v33)
            {
              uint64_t v34 = *(void **)(v33[6] + 16);
              if ((*(uint64_t (**)(void *))(*v34 + 1368))(v34))
              {
                uint64_t v33 = 0;
              }
              else
              {
                uint64_t v33 = *(void **)(v34[2] + 8);
                if (v33) {
                  uint64_t v33 = (void *)v33[3];
                }
              }
            }
          }
        }
      }
      uint64_t v35 = *(void *)(v30 + 32);
      if (v35) {
        uint64_t v35 = *(void *)(v35 + 80);
      }
    }
    else
    {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *(void *)(v30 + 240);
    *(_DWORD *)buf = 134218752;
    uint64_t v63 = v32;
    __int16 v64 = 2048;
    int v65 = v33;
    __int16 v66 = 2048;
    uint64_t v67 = v35;
    __int16 v68 = 2048;
    uint64_t v69 = v36;
    _os_log_impl(&dword_1985F2000, v31, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::startLoading", buf, 0x2Au);
  }
  uint64_t v37 = *(void *)(v30 + 16);
  uint64_t v38 = *(void **)(v37 + 16);
  uint64_t v39 = *(void *)(v37 + 24);
  uint64_t v40 = *(void *)(*(void *)(v30 + 24) + 744);
  WebKit::WebFrame::info(*(WebKit::WebFrame **)(v30 + 32), (uint64_t)&v56);
  WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)buf, v39, v40, (const String *)(v30 + 40), (uint64_t)&v56);
  uint64_t v41 = v38[4];
  v38 += 4;
  uint64_t v42 = (*(uint64_t (**)(void *))(v41 + 56))(v38);
  uint64_t v43 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v43 = 2109;
  *((void *)v43 + 1) = v42;
  *((void *)v43 + 66) = (char *)v43 + 16;
  *((void *)v43 + 67) = 512;
  *((void *)v43 + 68) = 0;
  *((void *)v43 + 70) = 0;
  *((void *)v43 + 69) = 0;
  IPC::Encoder::encodeHeader(v43);
  __int16 v55 = v43;
  IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::encode(v43, (uint64_t)buf);
  (*(void (**)(void *, IPC::Encoder **, void))(*v38 + 32))(v38, &v55, 0);
  uint64_t v45 = v55;
  __int16 v55 = 0;
  if (v45)
  {
    IPC::Encoder::~Encoder(v45, v44);
    WTF::fastFree(v52, v53);
  }
  uint64_t v46 = v75;
  unsigned int v75 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2) {
      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v44);
    }
    else {
      *(_DWORD *)v46 -= 2;
    }
  }
  if (v74 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9F8878[v74])(&v55, &v73);
  }
  int v74 = -1;
  CFTypeRef v47 = cf;
  CFTypeRef cf = 0;
  if (v47) {
    CFRelease(v47);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v71);
  CFTypeRef v48 = v70;
  CFTypeRef v70 = 0;
  if (v48) {
    CFRelease(v48);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)&v65 + 2));
  uint64_t v50 = v61;
  uint64_t v61 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v49);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  if (v60 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9F8878[v60])(&v55, &v59);
  }
  int v60 = -1;
  CFTypeRef v51 = v58;
  CFTypeRef v58 = 0;
  if (v51) {
    CFRelease(v51);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v57);
}

void WebKit::WebURLSchemeHandlerProxy::loadSynchronously(uint64_t a1, uint64_t a2, WebKit::WebFrame *this, String *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a7 + 12) = 0;
  unint64_t v13 = *(void **)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  WebKit::WebFrame::info(this, (uint64_t)v125);
  WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)&v131, v12, a2, a4, (uint64_t)v125);
  uint64_t v14 = v13[4];
  v13 += 4;
  uint64_t v15 = (*(uint64_t (**)(void *))(v14 + 56))(v13);
  uint64_t v16 = (*(uint64_t (**)(void *))(*v13 + 48))(v13);
  if (!v16)
  {
    LOBYTE(v80) = 3;
    int v93 = 1;
    goto LABEL_52;
  }
  uint64_t v18 = v16;
  uint64_t v110 = 0;
  IPC::Connection::createSyncMessageEncoder(3766, v15, &v110, &v109);
  IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::encode(v109, (uint64_t)&v131);
  IPC::Connection::sendSyncMessage(v18, v110, (uint64_t *)&v109, 0, (uint64_t)&v107, INFINITY);
  if (!v108)
  {
    v94[0] = 0;
    unsigned __int8 v106 = 0;
    int v20 = v107;
    IPC::Decoder::decode<WebCore::ResourceResponse>(v107, &v122);
    if (v124)
    {
      IPC::Decoder::decode<WebCore::ResourceError>(v20, (uint64_t)&v111);
      if (v119)
      {
        IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v20, v120);
        char v23 = v121;
        if (v121)
        {
          if (!v124 || !v119)
          {
            __break(1u);
            goto LABEL_116;
          }
          std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v80, (uint64_t)&v122);
          long long v24 = v111;
          long long v111 = 0uLL;
          v84[0] = v24;
          v84[1] = v112;
          v84[2] = v113;
          LODWORD(v112) = v112 & 0xFFFFFFFE;
          char v85 = v114;
          int v86 = v115;
          __int16 v87 = v116;
          int v25 = v117;
          uint64_t v114 = 0;
          v117 = 0;
          uint64_t v88 = v25;
          char v89 = v118;
          unsigned int v90 = (WTF *)v120[0];
          char v23 = 1;
          uint64_t v91 = v120[1];
        }
        else
        {
          LOBYTE(v80) = 0;
        }
        unsigned __int8 v92 = v23;
      }
      else
      {
        LOBYTE(v80) = 0;
        unsigned __int8 v92 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v111, v22);
    }
    else
    {
      LOBYTE(v80) = 0;
      unsigned __int8 v92 = 0;
    }
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v122, v21);
    if (v92)
    {
      int v26 = 1;
    }
    else
    {
      uint64_t v17 = *(WTF::StringImpl **)v20;
      uint64_t v78 = *((void *)v20 + 1);
      *(void *)int v20 = 0;
      *((void *)v20 + 1) = 0;
      uint64_t v79 = *((void *)v20 + 3);
      if (v79 && v78)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v79 + 16))(v79, v17);
        int v26 = v92;
      }
      else
      {
        int v26 = 0;
      }
    }
    if (v106 == v26)
    {
      if (!v106) {
        goto LABEL_47;
      }
      WebCore::ResourceResponseBase::operator=((uint64_t)v94, (uint64_t)&v80);
      uint64_t v28 = v82;
      uint64_t v82 = 0;
      CFTypeRef v29 = v95;
      CFTypeRef v95 = v28;
      if (v29) {
        CFRelease(v29);
      }
      char v96 = v83;
      uint64_t v30 = *(WTF::StringImpl **)&v84[0];
      *(void *)&v84[0] = 0;
      uint64_t v31 = v97;
      char v97 = v30;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v27);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      WTF::URL::operator=((uint64_t)&v98, (uint64_t)v84 + 8);
      uint64_t v32 = v85;
      char v85 = 0;
      uint64_t v33 = v99;
      unsigned int v99 = v32;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, v17);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      int v100 = v86;
      __int16 v101 = v87;
      uint64_t v34 = v88;
      uint64_t v88 = 0;
      CFTypeRef v35 = v102;
      CFTypeRef v102 = v34;
      if (v35) {
        CFRelease(v35);
      }
      char v103 = v89;
      uint64_t v36 = v104;
      if (v104)
      {
        uint64_t v104 = 0;
        LODWORD(v105) = 0;
        WTF::fastFree(v36, v17);
      }
      uint64_t v104 = v90;
      uint64_t v37 = v91;
      unsigned int v90 = 0;
      uint64_t v91 = 0;
      uint64_t v105 = v37;
    }
    else if (v106)
    {
      WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v94, v17);
      unsigned __int8 v106 = 0;
    }
    else
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)v94, (uint64_t)&v80);
      unsigned __int8 v106 = 1;
    }
    if (v92) {
      WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)&v80, v17);
    }
    if (v106)
    {
      if (!v108)
      {
        uint64_t v38 = v107;
        char v107 = 0;
        __n128 v122 = v38;
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)v123, (uint64_t)v94);
        uint64_t v39 = v122;
        __n128 v122 = 0;
        char v80 = v39;
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)v81, (uint64_t)v123);
        int v93 = 0;
        WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v123, v40);
        uint64_t v41 = v122;
        __n128 v122 = 0;
        if (v41)
        {
          IPC::Decoder::~Decoder(v41);
          WTF::fastFree(v75, v76);
        }
        if (v106) {
          WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v94, v17);
        }
LABEL_48:
        int v19 = v108;
        if (v108 == -1) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
LABEL_116:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
LABEL_47:
    LOBYTE(v80) = 13;
    int v93 = 1;
    goto LABEL_48;
  }
  if (v108 != 1) {
    goto LABEL_116;
  }
  LOBYTE(v80) = (_BYTE)v107;
  int v19 = 1;
  int v93 = 1;
LABEL_49:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F8898[v19])(&v122, &v107);
LABEL_50:
  uint64_t v42 = v109;
  int v109 = 0;
  if (v42)
  {
    IPC::Encoder::~Encoder(v42, v17);
    WTF::fastFree(v73, v74);
  }
LABEL_52:
  uint64_t v43 = v155;
  v155 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v17);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  if (v154 != -1) {
    ((void (*)(IPC::Decoder **, uint64_t *))off_1EE9F8878[v154])(&v122, &v153);
  }
  int v154 = -1;
  CFTypeRef v44 = cf;
  CFTypeRef cf = 0;
  if (v44) {
    CFRelease(v44);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v140);
  CFTypeRef v45 = v139;
  CFTypeRef v139 = 0;
  if (v45) {
    CFRelease(v45);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v133);
  CFTypeRef v47 = v130;
  uint64_t v130 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2) {
      WTF::StringImpl::destroy(v47, v46);
    }
    else {
      *(_DWORD *)v47 -= 2;
    }
  }
  if (v129 != -1) {
    ((void (*)(IPC::Decoder **, uint64_t *))off_1EE9F8878[v129])(&v122, &v128);
  }
  int v129 = -1;
  CFTypeRef v48 = v127;
  CFTypeRef v127 = 0;
  if (v48) {
    CFRelease(v48);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v126);
  if (v93)
  {
    WebKit::failedCustomProtocolSyncLoad((WebKit *)a4, (uint64_t)&v131);
    uint64_t v50 = v131;
    int v131 = 0;
    CFTypeRef v51 = *(WTF::StringImpl **)a6;
    *(void *)a6 = v50;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2) {
        WTF::StringImpl::destroy(v51, v49);
      }
      else {
        *(_DWORD *)v51 -= 2;
      }
    }
    WTF::URL::operator=(a6 + 8, (uint64_t)&v132);
    CFTypeRef v58 = v134;
    int v134 = 0;
    uint64_t v59 = *(WTF::StringImpl **)(a6 + 48);
    *(void *)(a6 + 48) = v58;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, v57);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
    *(_DWORD *)(a6 + 56) = v135;
    *(_WORD *)(a6 + 60) = v136;
    CFTypeRef v60 = v137;
    CFTypeRef v137 = 0;
    uint64_t v61 = *(const void **)(a6 + 64);
    *(void *)(a6 + 64) = v60;
    if (v61)
    {
      CFRelease(v61);
      CFTypeRef v77 = v137;
      *(unsigned char *)(a6 + 72) = v138;
      CFTypeRef v137 = 0;
      if (v77) {
        CFRelease(v77);
      }
    }
    else
    {
      *(unsigned char *)(a6 + 72) = v138;
      CFTypeRef v137 = 0;
    }
    uint64_t v62 = v134;
    int v134 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, v57);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }
    uint64_t v63 = v132;
    int v132 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2) {
        WTF::StringImpl::destroy(v63, v57);
      }
      else {
        *(_DWORD *)v63 -= 2;
      }
    }
    __int16 v64 = v131;
    int v131 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2) {
        WTF::StringImpl::destroy(v64, v57);
      }
      else {
        *(_DWORD *)v64 -= 2;
      }
    }
  }
  else
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)&v131, (uint64_t)v81);
    WebCore::ResourceResponseBase::operator=(a5, (uint64_t)&v131);
    uint64_t v53 = v141;
    uint64_t v141 = 0;
    int v54 = *(const void **)(a5 + 240);
    *(void *)(a5 + 240) = v53;
    if (v54) {
      CFRelease(v54);
    }
    *(unsigned char *)(a5 + 248) = v142;
    uint64_t v55 = v143;
    uint64_t v143 = 0;
    uint64_t v56 = *(WTF::StringImpl **)a6;
    *(void *)a6 = v55;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2) {
        WTF::StringImpl::destroy(v56, v52);
      }
      else {
        *(_DWORD *)v56 -= 2;
      }
    }
    WTF::URL::operator=(a6 + 8, (uint64_t)&v144);
    uint64_t v66 = v145;
    uint64_t v145 = 0;
    uint64_t v67 = *(WTF::StringImpl **)(a6 + 48);
    *(void *)(a6 + 48) = v66;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2) {
        WTF::StringImpl::destroy(v67, v65);
      }
      else {
        *(_DWORD *)v67 -= 2;
      }
    }
    *(_DWORD *)(a6 + 56) = v146;
    *(_WORD *)(a6 + 60) = v147;
    uint64_t v68 = v148;
    uint64_t v148 = 0;
    uint64_t v69 = *(const void **)(a6 + 64);
    *(void *)(a6 + 64) = v68;
    if (v69) {
      CFRelease(v69);
    }
    *(unsigned char *)(a6 + 72) = v149;
    CFTypeRef v70 = *(WTF **)a7;
    if (*(void *)a7)
    {
      *(void *)a7 = 0;
      *(_DWORD *)(a7 + 8) = 0;
      WTF::fastFree(v70, v65);
    }
    uint64_t v71 = v150;
    uint64_t v150 = 0;
    *(void *)a7 = v71;
    uint64_t v72 = v151;
    uint64_t v151 = 0;
    *(void *)(a7 + 8) = v72;
    WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)&v131, v65);
  }
  if (v93 != -1) {
    ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9F8888[v93])(&v131, &v80);
  }
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeHandlerProxy::stopAllTasks(WebKit::WebURLSchemeTaskProxy *this)
{
  uint64_t v2 = (void **)((char *)this + 32);
  uint64_t v1 = (void *)*((void *)this + 4);
  if (v1)
  {
    do
    {
      if (!*((_DWORD *)v1 - 3)) {
        break;
      }
      uint64_t v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v2);
      this = WebKit::WebURLSchemeTaskProxy::stopLoading((WebKit::WebURLSchemeTaskProxy *)v3[1]);
      uint64_t v1 = *v2;
    }
    while (*v2);
  }
  return this;
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeTaskProxy::stopLoading(WebKit::WebURLSchemeTaskProxy *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*((void *)this + 2) + 24);
    uint64_t v4 = (void *)*((void *)this + 4);
    if (v4)
    {
      uint64_t v4 = (void *)v4[3];
      if (v4)
      {
        uint64_t v4 = (void *)v4[1];
        if (v4)
        {
          uint64_t v4 = (void *)v4[3];
          if (v4)
          {
            uint64_t v4 = (void *)v4[1];
            if (v4)
            {
              uint64_t v5 = *(void **)(v4[6] + 16);
              if ((*(uint64_t (**)(void *))(*v5 + 1368))(v5))
              {
                uint64_t v4 = 0;
              }
              else
              {
                uint64_t v4 = *(void **)(v5[2] + 8);
                if (v4) {
                  uint64_t v4 = (void *)v4[3];
                }
              }
            }
          }
        }
      }
      uint64_t v6 = *((void *)this + 4);
      if (v6) {
        uint64_t v6 = *(void *)(v6 + 80);
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *((void *)this + 30);
    *(_DWORD *)buf = 134218752;
    *(void *)&uint8_t buf[4] = v3;
    __int16 v25 = 2048;
    int v26 = v4;
    __int16 v27 = 2048;
    uint64_t v28 = v6;
    __int16 v29 = 2048;
    uint64_t v30 = v7;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::stopLoading", buf, 0x2Au);
  }
  uint64_t v8 = *((void *)this + 2);
  unsigned int v10 = *(void **)(v8 + 16);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v22 = *(void *)(*((void *)this + 3) + 744);
  uint64_t v23 = v9;
  uint64_t v11 = v10[4];
  v10 += 4;
  uint64_t v12 = (*(uint64_t (**)(void *))(v11 + 56))(v10);
  unint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v13 = 2110;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  *(void *)buf = v13;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v23);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v13, &v22);
  (*(void (**)(void *, unsigned char *, void))(*v10 + 32))(v10, buf, 0);
  uint64_t v15 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v20, v21);
  }
  uint64_t v16 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v16)
  {
    if (v16[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
    }
    else {
      --v16[4];
    }
  }
  uint64_t v17 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  WebKit::WebURLSchemeHandlerProxy::removeTask(*((void *)this + 2), *((void *)this + 30), (WebKit::WebURLSchemeTaskProxy **)buf);
  uint64_t result = *(WebKit::WebURLSchemeTaskProxy **)buf;
  if (*(void *)buf) {
    return WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(*(WebKit::WebURLSchemeTaskProxy **)buf, v18);
  }
  return result;
}

void WebKit::WebURLSchemeHandlerProxy::taskDidPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = a2;
  uint64_t v8 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v9);
  if (v8) {
    WebKit::WebURLSchemeTaskProxy::didPerformRedirection(v8, a3, a4, a5);
  }
}

void WebKit::WebURLSchemeTaskProxy::didPerformRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  if (WebKit::WebURLSchemeTaskProxy::hasLoader((WebKit::WebURLSchemeTaskProxy *)a1))
  {
    if (*(unsigned char *)(a1 + 248))
    {
      uint64_t v8 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);
        unsigned int v10 = *(void **)(a1 + 32);
        if (v10)
        {
          unsigned int v10 = (void *)v10[3];
          if (v10)
          {
            unsigned int v10 = (void *)v10[1];
            if (v10)
            {
              unsigned int v10 = (void *)v10[3];
              if (v10)
              {
                unsigned int v10 = (void *)v10[1];
                if (v10)
                {
                  uint64_t v11 = *(void **)(v10[6] + 16);
                  if ((*(uint64_t (**)(void *))(*v11 + 1368))(v11))
                  {
                    unsigned int v10 = 0;
                  }
                  else
                  {
                    unsigned int v10 = *(void **)(v11[2] + 8);
                    if (v10) {
                      unsigned int v10 = (void *)v10[3];
                    }
                  }
                }
              }
            }
          }
          uint64_t v12 = *(void *)(a1 + 32);
          if (v12) {
            uint64_t v12 = *(void *)(v12 + 80);
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v33 = *(void *)(a1 + 240);
        *(_DWORD *)buf = 134218752;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v10;
        __int16 v87 = 2048;
        uint64_t v88 = v12;
        __int16 v89 = 2048;
        uint64_t v90 = v33;
        _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::didPerformRedirection: Received redirect during previous redirect processing, queuing it.", buf, 0x2Au);
      }
      ++*(_DWORD *)a1;
      *(void *)buf = a1;
      *(void *)&buf[8] = a1;
      WTF::URL::URL((uint64_t)&buf[16], (uint64_t *)a2);
      uint64_t v34 = *(void *)(a2 + 40);
      uint64_t v35 = *(void *)(a2 + 48);
      *(void *)(a2 + 40) = 0;
      uint64_t v91 = v34;
      *(void *)unsigned __int8 v92 = v35;
      long long v36 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)&v92[8] = v36;
      long long v37 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a2 + 72) = 0u;
      long long v93 = v37;
      *(void *)&long long v37 = *(void *)(a2 + 88);
      *(void *)(a2 + 88) = 0;
      *(void *)&long long v94 = v37;
      uint64_t v38 = *(void *)(a2 + 96);
      *(void *)(a2 + 96) = 0;
      *((void *)&v94 + 1) = v38;
      *(void *)&long long v37 = *(void *)(a2 + 104);
      *(void *)(a2 + 104) = 0;
      uint64_t v95 = v37;
      uint64_t v39 = *(void *)(a2 + 112);
      *(void *)(a2 + 112) = 0;
      uint64_t v96 = v39;
      LOBYTE(v97) = 0;
      LOBYTE(v98) = 0;
      if (*(unsigned char *)(a2 + 128))
      {
        uint64_t v83 = *(void *)(a2 + 120);
        *(void *)(a2 + 120) = 0;
        uint64_t v97 = v83;
        LOBYTE(v98) = 1;
      }
      *(_OWORD *)CFTypeRef v102 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)&v102[16] = *(_OWORD *)(a2 + 200);
      *(_OWORD *)char v103 = *(_OWORD *)(a2 + 216);
      *(_DWORD *)&v103[15] = *(_DWORD *)(a2 + 231);
      long long v99 = *(_OWORD *)(a2 + 136);
      long long v100 = *(_OWORD *)(a2 + 152);
      long long v101 = *(_OWORD *)(a2 + 168);
      uint64_t v40 = *(const void **)(a2 + 240);
      *(void *)(a2 + 240) = 0;
      CFTypeRef v104 = v40;
      char v105 = *(unsigned char *)(a2 + 248);
      WTF::URL::URL((uint64_t)v106, (uint64_t *)a3);
      WTF::URL::URL((uint64_t)v107, (uint64_t *)(a3 + 40));
      uint64_t v41 = *(void *)(a3 + 80);
      long long v42 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a3 + 88) = 0u;
      long long v109 = v42;
      *(void *)&long long v42 = *(void *)(a3 + 104);
      *(void *)(a3 + 104) = 0;
      uint64_t v108 = v41;
      uint64_t v110 = v42;
      uint64_t v43 = *(void *)(a3 + 112);
      *(void *)(a3 + 112) = 0;
      uint64_t v111 = v43;
      uint64_t v44 = *(void *)(a3 + 120);
      *(void *)(a3 + 120) = 0;
      uint64_t v112 = v44;
      uint64_t v45 = *(void *)(a3 + 128);
      *(void *)(a3 + 128) = 0;
      uint64_t v113 = v45;
      uint64_t v46 = *(void *)(a3 + 136);
      *(void *)(a3 + 136) = 0;
      uint64_t v114 = v46;
      LODWORD(v45) = *(_DWORD *)(a3 + 144);
      char v116 = *(unsigned char *)(a3 + 148);
      int v115 = v45;
      long long v47 = *(_OWORD *)(a3 + 152);
      *(_OWORD *)(a3 + 152) = 0u;
      long long v117 = v47;
      char v120 = *(unsigned char *)(a3 + 184);
      uint64_t v48 = *(void *)(a3 + 168);
      uint64_t v49 = *(void *)(a3 + 176);
      *(void *)(a3 + 168) = 0;
      uint64_t v118 = v48;
      uint64_t v119 = v49;
      uint64_t v50 = *(const void **)(a3 + 192);
      *(void *)(a3 + 192) = 0;
      uint64_t v51 = *a4;
      *a4 = 0;
      CFTypeRef v121 = v50;
      uint64_t v122 = v51;
      uint64_t v52 = WTF::fastMalloc((WTF *)0x1E8);
      *(void *)uint64_t v52 = &unk_1EE9F88B8;
      *(void *)(v52 + 8) = *(void *)buf;
      uint64_t v53 = *(void *)&buf[8];
      *(void *)&buf[8] = 0;
      *(void *)(v52 + 16) = v53;
      WTF::URL::URL(v52 + 24, (uint64_t *)&buf[16]);
      uint64_t v54 = v91;
      uint64_t v91 = 0;
      *(void *)(v52 + 64) = v54;
      *(_OWORD *)(v52 + 72) = *(_OWORD *)v92;
      uint64_t v55 = *(void *)&v92[16];
      *(_OWORD *)&v92[8] = 0u;
      *(void *)(v52 + 88) = v55;
      *(void *)(v52 + 96) = v93;
      uint64_t v56 = *((void *)&v93 + 1);
      long long v93 = 0u;
      *(void *)(v52 + 104) = v56;
      uint64_t v57 = v94;
      *(void *)&long long v94 = 0;
      *(void *)(v52 + 112) = v57;
      uint64_t v58 = *((void *)&v94 + 1);
      *((void *)&v94 + 1) = 0;
      *(void *)(v52 + 120) = v58;
      uint64_t v59 = v95;
      uint64_t v95 = 0;
      *(void *)(v52 + 128) = v59;
      uint64_t v60 = v96;
      uint64_t v96 = 0;
      *(void *)(v52 + 136) = v60;
      *(unsigned char *)(v52 + 144) = 0;
      *(unsigned char *)(v52 + 152) = 0;
      if ((_BYTE)v98)
      {
        uint64_t v84 = v97;
        uint64_t v97 = 0;
        *(void *)(v52 + 144) = v84;
        *(unsigned char *)(v52 + 152) = 1;
      }
      long long v61 = *(_OWORD *)v102;
      long long v62 = *(_OWORD *)&v102[16];
      long long v63 = *(_OWORD *)v103;
      *(_DWORD *)(v52 + 255) = *(_DWORD *)&v103[15];
      long long v64 = v100;
      long long v65 = v101;
      *(_OWORD *)(v52 + 160) = v99;
      *(_OWORD *)(v52 + 176) = v64;
      *(_OWORD *)(v52 + 224) = v62;
      *(_OWORD *)(v52 + 240) = v63;
      *(_OWORD *)(v52 + 192) = v65;
      *(_OWORD *)(v52 + 208) = v61;
      CFTypeRef v66 = v104;
      CFTypeRef v104 = 0;
      *(void *)(v52 + 264) = v66;
      *(unsigned char *)(v52 + 272) = v105;
      WTF::URL::URL(v52 + 280, v106);
      WTF::URL::URL(v52 + 320, v107);
      *(void *)(v52 + 360) = v108;
      *(void *)(v52 + 368) = v109;
      uint64_t v67 = *((void *)&v109 + 1);
      long long v109 = 0u;
      *(void *)(v52 + 376) = v67;
      uint64_t v68 = v110;
      uint64_t v110 = 0;
      *(void *)(v52 + 384) = v68;
      uint64_t v69 = v111;
      uint64_t v111 = 0;
      *(void *)(v52 + 392) = v69;
      uint64_t v70 = v112;
      uint64_t v112 = 0;
      *(void *)(v52 + 400) = v70;
      uint64_t v71 = v113;
      uint64_t v113 = 0;
      *(void *)(v52 + 408) = v71;
      uint64_t v72 = v114;
      uint64_t v114 = 0;
      *(void *)(v52 + 416) = v72;
      LODWORD(v71) = v115;
      *(unsigned char *)(v52 + 428) = v116;
      *(_DWORD *)(v52 + 424) = v71;
      *(void *)(v52 + 432) = v117;
      uint64_t v73 = *((void *)&v117 + 1);
      long long v117 = 0u;
      *(void *)(v52 + 440) = v73;
      *(void *)(v52 + 448) = v118;
      uint64_t v74 = v119;
      *(unsigned char *)(v52 + 464) = v120;
      *(void *)(v52 + 456) = v74;
      uint64_t v118 = 0;
      *(void *)(v52 + 472) = v121;
      uint64_t v75 = v122;
      CFTypeRef v121 = 0;
      uint64_t v122 = 0;
      *(void *)(v52 + 480) = v75;
      WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1 + 256);
      uint64_t v76 = *(void *)(a1 + 264);
      *(void *)(*(void *)(a1 + 272) + 8 * v76) = v52;
      if (v76 == *(unsigned int *)(a1 + 280) - 1) {
        uint64_t v77 = 0;
      }
      else {
        uint64_t v77 = v76 + 1;
      }
      *(void *)(a1 + 264) = v77;
      uint64_t v78 = v122;
      uint64_t v122 = 0;
      if (v78) {
        (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
      }
      CFTypeRef v79 = v121;
      CFTypeRef v121 = 0;
      if (v79) {
        CFRelease(v79);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v106);
      CFTypeRef v81 = v104;
      CFTypeRef v104 = 0;
      if (v81) {
        CFRelease(v81);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&buf[16], v80);
    }
    else
    {
      *(unsigned char *)(a1 + 248) = 1;
      ++*(_DWORD *)a1;
      *(void *)buf = a1;
      *(void *)&buf[8] = a1;
      WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[16], (const String *)a3);
      uint64_t v15 = *a4;
      *a4 = 0;
      *(void *)&v102[16] = v15;
      uint64_t v16 = *(void *)(a1 + 24);
      uint64_t v17 = WTF::fastMalloc((WTF *)0xE8);
      *(void *)uint64_t v17 = &unk_1EE9F88E0;
      *(void *)(v17 + 8) = *(void *)buf;
      uint64_t v18 = *(void *)&buf[8];
      *(void *)&buf[8] = 0;
      *(void *)(v17 + 16) = v18;
      WTF::URL::URL(v17 + 24, (uint64_t *)&buf[16]);
      WTF::URL::URL(v17 + 64, &v91);
      *(void *)(v17 + 104) = *((void *)&v93 + 1);
      *(void *)(v17 + 112) = v94;
      uint64_t v19 = *((void *)&v94 + 1);
      long long v94 = 0u;
      *(void *)(v17 + 120) = v19;
      uint64_t v20 = v95;
      uint64_t v95 = 0;
      *(void *)(v17 + 128) = v20;
      uint64_t v21 = v96;
      uint64_t v96 = 0;
      *(void *)(v17 + 136) = v21;
      uint64_t v22 = v97;
      uint64_t v97 = 0;
      *(void *)(v17 + 144) = v22;
      uint64_t v23 = v98;
      uint64_t v98 = 0;
      *(void *)(v17 + 152) = v23;
      uint64_t v24 = v99;
      *(void *)&long long v99 = 0;
      *(void *)(v17 + 160) = v24;
      LODWORD(v23) = DWORD2(v99);
      *(unsigned char *)(v17 + 172) = BYTE12(v99);
      *(_DWORD *)(v17 + 168) = v23;
      *(void *)(v17 + 176) = v100;
      uint64_t v25 = *((void *)&v100 + 1);
      long long v100 = 0u;
      *(void *)(v17 + 184) = v25;
      uint64_t v26 = v101;
      *(void *)&long long v101 = 0;
      *(void *)(v17 + 192) = v26;
      uint64_t v27 = *((void *)&v101 + 1);
      *(unsigned char *)(v17 + 208) = v102[0];
      *(void *)(v17 + 200) = v27;
      *(void *)(v17 + 216) = *(void *)&v102[8];
      uint64_t v28 = *(void *)&v102[16];
      *(_OWORD *)&v102[8] = 0u;
      *(void *)(v17 + 224) = v28;
      uint64_t v85 = v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v16 + 192))(v16, a3, a2, &v85);
      uint64_t v29 = v85;
      uint64_t v85 = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      uint64_t v30 = *(void *)&v102[16];
      *(void *)&v102[16] = 0;
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      uint64_t v31 = *(const void **)&v102[8];
      *(void *)&v102[8] = 0;
      if (v31) {
        CFRelease(v31);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[16]);
    }
    uint64_t v82 = *(WebKit::WebURLSchemeTaskProxy **)&buf[8];
    *(void *)&buf[8] = 0;
    if (v82) {
      WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v82, v32);
    }
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)buf);
    uint64_t v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 16))(v13, buf);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t v14 = (const void *)*((void *)&v101 + 1);
    *((void *)&v101 + 1) = 0;
    if (v14) {
      CFRelease(v14);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  }
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeHandlerProxy::taskDidReceiveResponse(uint64_t a1, uint64_t a2, const WebCore::ResourceResponse *a3)
{
  uint64_t v5 = a2;
  uint64_t result = (WebKit::WebURLSchemeTaskProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v5);
  if (result) {
    return (WebKit::WebURLSchemeTaskProxy *)WebKit::WebURLSchemeTaskProxy::didReceiveResponse(result, a3);
  }
  return result;
}

uint64_t WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebKit::WebURLSchemeTaskProxy *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 248))
  {
    uint64_t v4 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*((void *)this + 2) + 24);
      uint64_t v6 = (void *)*((void *)this + 4);
      if (v6)
      {
        uint64_t v6 = (void *)v6[3];
        if (v6)
        {
          uint64_t v6 = (void *)v6[1];
          if (v6)
          {
            uint64_t v6 = (void *)v6[3];
            if (v6)
            {
              uint64_t v6 = (void *)v6[1];
              if (v6)
              {
                uint64_t v7 = *(void **)(v6[6] + 16);
                if ((*(uint64_t (**)(void *))(*v7 + 1368))(v7))
                {
                  uint64_t v6 = 0;
                }
                else
                {
                  uint64_t v6 = *(void **)(v7[2] + 8);
                  if (v6) {
                    uint64_t v6 = (void *)v6[3];
                  }
                }
              }
            }
          }
        }
        uint64_t v8 = *((void *)this + 4);
        if (v8) {
          uint64_t v8 = *(void *)(v8 + 80);
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v12 = *((void *)this + 30);
      *(_DWORD *)uint64_t v22 = 134218752;
      *(void *)&_DWORD v22[4] = v5;
      *(_WORD *)&v22[12] = 2048;
      *(void *)&v22[14] = v6;
      __int16 v23 = 2048;
      uint64_t v24 = v8;
      __int16 v25 = 2048;
      uint64_t v26 = v12;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::didReceiveResponse: Received response during redirect processing, queuing it.", v22, 0x2Au);
    }
    ++*(_DWORD *)this;
    *(void *)uint64_t v22 = this;
    *(void *)&v22[8] = this;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v22[16], a2);
    uint64_t v13 = (const void *)*((void *)a2 + 30);
    CFTypeRef cf = v13;
    if (v13) {
      CFRetain(v13);
    }
    char v28 = *((unsigned char *)a2 + 248);
    uint64_t v14 = WTF::fastMalloc((WTF *)0x118);
    *(void *)uint64_t v14 = &unk_1EE9F8908;
    *(void *)(v14 + 8) = *(void *)v22;
    uint64_t v15 = *(void *)&v22[8];
    *(void *)&v22[8] = 0;
    *(void *)(v14 + 16) = v15;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v14 + 24), (const WebCore::ResourceResponseBase *)&v22[16]);
    CFTypeRef v16 = cf;
    *(void *)(v14 + 264) = cf;
    if (v16) {
      CFRetain(v16);
    }
    *(unsigned char *)(v14 + 272) = v28;
    WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded((uint64_t)this + 256);
    uint64_t v18 = *((void *)this + 33);
    *(void *)(*((void *)this + 34) + 8 * v18) = v14;
    if (v18 == *((unsigned int *)this + 70) - 1) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18 + 1;
    }
    *((void *)this + 33) = v19;
    CFTypeRef v20 = cf;
    CFTypeRef cf = 0;
    if (v20) {
      CFRelease(v20);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v22[16], v17);
    uint64_t result = *(void *)&v22[8];
    *(void *)&v22[8] = 0;
    if (result) {
      return (uint64_t)WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref((WebKit::WebURLSchemeTaskProxy *)result, v21);
    }
  }
  else
  {
    uint64_t result = WebKit::WebURLSchemeTaskProxy::hasLoader(this);
    if (result)
    {
      *((unsigned char *)this + 248) = 1;
      uint64_t v10 = *((void *)this + 3);
      ++*(_DWORD *)this;
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v11 = &unk_1EE9F8930;
      v11[1] = this;
      v11[2] = this;
      *(void *)uint64_t v22 = v11;
      (*(void (**)(uint64_t, const WebCore::ResourceResponse *, unsigned char *))(*(void *)v10 + 208))(v10, a2, v22);
      uint64_t result = *(void *)v22;
      *(void *)uint64_t v22 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

WebKit::WebURLSchemeTaskProxy *WebKit::WebURLSchemeHandlerProxy::taskDidReceiveData(uint64_t a1, uint64_t a2, atomic_uint **a3)
{
  uint64_t v5 = a2;
  uint64_t result = (WebKit::WebURLSchemeTaskProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v5);
  if (result) {
    return (WebKit::WebURLSchemeTaskProxy *)WebKit::WebURLSchemeTaskProxy::didReceiveData(result, *a3);
  }
  return result;
}

uint64_t WebKit::WebURLSchemeTaskProxy::didReceiveData(WebKit::WebURLSchemeTaskProxy *this, atomic_uint *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebKit::WebURLSchemeTaskProxy::hasLoader(this);
  if (result)
  {
    if (*((unsigned char *)this + 248))
    {
      uint64_t v5 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(*((void *)this + 2) + 24);
        uint64_t v7 = (void *)*((void *)this + 4);
        if (v7)
        {
          uint64_t v7 = (void *)v7[3];
          if (v7)
          {
            uint64_t v7 = (void *)v7[1];
            if (v7)
            {
              uint64_t v7 = (void *)v7[3];
              if (v7)
              {
                uint64_t v7 = (void *)v7[1];
                if (v7)
                {
                  uint64_t v8 = *(void **)(v7[6] + 16);
                  if ((*(uint64_t (**)(void *))(*v8 + 1368))(v8))
                  {
                    uint64_t v7 = 0;
                  }
                  else
                  {
                    uint64_t v7 = *(void **)(v8[2] + 8);
                    if (v7) {
                      uint64_t v7 = (void *)v7[3];
                    }
                  }
                }
              }
            }
          }
          uint64_t v9 = *((void *)this + 4);
          if (v9) {
            uint64_t v9 = *(void *)(v9 + 80);
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v11 = *((void *)this + 30);
        int v15 = 134218752;
        uint64_t v16 = v6;
        __int16 v17 = 2048;
        uint64_t v18 = v7;
        __int16 v19 = 2048;
        uint64_t v20 = v9;
        __int16 v21 = 2048;
        uint64_t v22 = v11;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::didReceiveData: Received data during response processing, queuing it.", (uint8_t *)&v15, 0x2Au);
      }
      ++*(_DWORD *)this;
      atomic_fetch_add(a2, 1u);
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v12 = &unk_1EE9F8958;
      v12[1] = this;
      uint64_t v12[2] = this;
      v12[3] = a2;
      uint64_t result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded((uint64_t)this + 256);
      uint64_t v13 = *((void *)this + 33);
      *(void *)(*((void *)this + 34) + 8 * v13) = v12;
      if (v13 == *((unsigned int *)this + 70) - 1) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v13 + 1;
      }
      *((void *)this + 33) = v14;
    }
    else
    {
      ++*(_DWORD *)this;
      (*(void (**)(void, atomic_uint *, void, uint64_t))(**((void **)this + 3) + 216))(*((void *)this + 3), a2, 0, 1);
      WebKit::WebURLSchemeTaskProxy::processNextPendingTask(this);
      return (uint64_t)WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(this, v10);
    }
  }
  return result;
}

uint64_t *WebKit::WebURLSchemeHandlerProxy::taskDidComplete(uint64_t a1, uint64_t a2, const WebCore::ResourceError *a3)
{
  uint64_t result = WebKit::WebURLSchemeHandlerProxy::removeTask(a1, a2, &v7);
  uint64_t v5 = v7;
  if (v7)
  {
    WebKit::WebURLSchemeTaskProxy::didComplete(v7, a3);
    return (uint64_t *)WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v5, v6);
  }
  return result;
}

uint64_t *WebKit::WebURLSchemeHandlerProxy::removeTask@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebKit::WebURLSchemeTaskProxy **a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v10);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::take(v4, v5, &v9);
  if (v9)
  {
    {
      uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v8);
    }
    uint64_t result = WebKit::WebLoaderStrategy::removeURLSchemeTaskProxy(*(WebKit::WebLoaderStrategy **)(WebKit::WebProcess::singleton(void)::process + 320), v9);
    uint64_t v7 = v9;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a3 = v7;
  return result;
}

void WebKit::WebURLSchemeTaskProxy::didComplete(WebKit::WebURLSchemeTaskProxy *this, const WebCore::ResourceError *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*((void *)this + 2) + 24);
    uint64_t v6 = (void *)*((void *)this + 4);
    if (v6)
    {
      uint64_t v6 = (void *)v6[3];
      if (v6)
      {
        uint64_t v6 = (void *)v6[1];
        if (v6)
        {
          uint64_t v6 = (void *)v6[3];
          if (v6)
          {
            uint64_t v6 = (void *)v6[1];
            if (v6)
            {
              uint64_t v7 = *(void **)(v6[6] + 16);
              if ((*(uint64_t (**)(void *))(*v7 + 1368))(v7))
              {
                uint64_t v6 = 0;
              }
              else
              {
                uint64_t v6 = *(void **)(v7[2] + 8);
                if (v6) {
                  uint64_t v6 = (void *)v6[3];
                }
              }
            }
          }
        }
      }
      uint64_t v8 = *((void *)this + 4);
      if (v8) {
        uint64_t v8 = *(void *)(v8 + 80);
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *((void *)this + 30);
    *(_DWORD *)buf = 134218752;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&buf[24] = v8;
    __int16 v31 = 2048;
    uint64_t v32 = v9;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "[schemeHandler=%llu, webPageID=%llu, frameID=%llu, taskID=%llu] WebURLSchemeTaskProxy::didComplete", buf, 0x2Au);
  }
  if (WebKit::WebURLSchemeTaskProxy::hasLoader(this))
  {
    if (*((unsigned char *)this + 248))
    {
      ++*(_DWORD *)this;
      uint64_t v10 = *(WTF::StringImpl **)a2;
      if (*(void *)a2) {
        *(_DWORD *)v10 += 2;
      }
      uint64_t v11 = (WTF::StringImpl *)*((void *)a2 + 1);
      if (v11) {
        *(_DWORD *)v11 += 2;
      }
      long long v12 = *((_OWORD *)a2 + 2);
      *(_OWORD *)buf = *((_OWORD *)a2 + 1);
      *(_OWORD *)&buf[16] = v12;
      uint64_t v13 = (WTF::StringImpl *)*((void *)a2 + 6);
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      int v28 = *((_DWORD *)a2 + 14);
      __int16 v29 = *((_WORD *)a2 + 30);
      uint64_t v14 = (const void *)*((void *)a2 + 8);
      if (v14) {
        CFRetain(*((CFTypeRef *)a2 + 8));
      }
      char v15 = *((unsigned char *)a2 + 72);
      uint64_t v16 = WTF::fastMalloc((WTF *)0x68);
      uint64_t v17 = v16;
      *(void *)uint64_t v16 = &unk_1EE9F8980;
      *(void *)(v16 + 8) = this;
      *(void *)(v16 + 16) = this;
      if (v10) {
        *(_DWORD *)v10 += 2;
      }
      *(void *)(v16 + 24) = v10;
      if (v11) {
        *(_DWORD *)v11 += 2;
      }
      *(void *)(v16 + 32) = v11;
      long long v18 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v16 + 40) = *(_OWORD *)buf;
      *(_OWORD *)(v16 + 56) = v18;
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      *(void *)(v16 + 72) = v13;
      *(_DWORD *)(v16 + 80) = v28;
      *(_WORD *)(v16 + 84) = v29;
      *(void *)(v16 + 88) = v14;
      if (v14) {
        CFRetain(v14);
      }
      *(unsigned char *)(v17 + 96) = v15;
      WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded((uint64_t)this + 256);
      uint64_t v20 = *((void *)this + 33);
      *(void *)(*((void *)this + 34) + 8 * v20) = v17;
      if (v20 == *((unsigned int *)this + 70) - 1) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v20 + 1;
      }
      *((void *)this + 33) = v21;
      if (v14)
      {
        CFRelease(v14);
        if (!v13) {
          goto LABEL_42;
        }
      }
      else if (!v13)
      {
        goto LABEL_42;
      }
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v19);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
LABEL_42:
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v19);
          if (!v10) {
            return;
          }
          goto LABEL_48;
        }
        *(_DWORD *)v11 -= 2;
      }
      if (!v10) {
        return;
      }
LABEL_48:
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v19);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
      return;
    }
    uint64_t v22 = *((void *)this + 3);
    if (*((unsigned char *)a2 + 60))
    {
      (*(void (**)(void, const WebCore::ResourceError *))(*(void *)v22 + 240))(*((void *)this + 3), a2);
    }
    else
    {
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v22 + 232))(v22, buf);
      uint64_t v24 = v34;
      uint64_t v34 = 0;
      if (v24) {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v24);
      }
      __int16 v25 = v33;
      uint64_t v33 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
    uint64_t v26 = (_DWORD *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v26)
    {
      if (v26[4] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
      }
      else {
        --v26[4];
      }
    }
    uint64_t v27 = *((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v27) {
      CFRelease(*(CFTypeRef *)(v27 + 8));
    }
  }
}

BOOL WebKit::WebURLSchemeTaskProxy::hasLoader(WebKit::WebURLSchemeTaskProxy *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2 && *(unsigned char *)(v2 + 752))
  {
    *((void *)this + 3) = 0;
    if (*(_DWORD *)(v2 + 16) == 1) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    else {
      --*(_DWORD *)(v2 + 16);
    }
    uint64_t v3 = *((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
  }
  if (*((void *)this + 3)) {
    uint64_t v4 = WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 != 0;
}

void *WebKit::WebURLSchemeTaskProxy::processNextPendingTask(void *this)
{
  uint64_t v1 = this[32];
  if (v1 != this[33])
  {
    uint64_t v2 = this;
    uint64_t v3 = this[34];
    uint64_t v4 = *(void *)(v3 + 8 * v1);
    *(void *)(v3 + 8 * v1) = 0;
    uint64_t v5 = this[34];
    uint64_t v6 = *(void *)(v5 + 8 * v1);
    *(void *)(v5 + 8 * v1) = 0;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      uint64_t v1 = v2[32];
    }
    if (v1 == *((unsigned int *)v2 + 70) - 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v1 + 1;
    }
    v2[32] = v7;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return (void *)v8(v4);
  }
  return this;
}

void WebKit::ViewGestureGeometryCollector::~ViewGestureGeometryCollector(WebKit::ViewGestureGeometryCollector *this)
{
  *(void *)this = &unk_1EE9F8818;
  {
    uint64_t v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0x9Au, *(void *)(*((void *)this + 2) + 40));
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ViewGestureGeometryCollector::~ViewGestureGeometryCollector(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ViewGestureGeometryCollector::dispatchDidCollectGeometryForSmartMagnificationGesture(uint64_t a1, char a2, float a3, float a4, float a5, float a6, float a7, float a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, double a18, double a19)
{
  v29[0] = a3;
  v29[1] = a4;
  v28[0] = a5;
  v28[1] = a6;
  uint64_t v28[2] = a7;
  v28[3] = a8;
  long long v27 = a17;
  uint64_t v18 = a1 + 32;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 56))(a1 + 32);
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 1468;
  *((void *)v20 + 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  uint64_t v30 = v20;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v20, v29);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v20, v28);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v20, (float *)&v27);
  uint64_t v21 = (unsigned char *)IPC::Encoder::grow(v20, 1uLL, 1);
  if (v22)
  {
    unsigned char *v21 = a2;
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v20, a18);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v20, a19);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v18 + 32))(v18, &v30, 0);
    uint64_t result = (uint64_t)v30;
    uint64_t v30 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v23);
      return WTF::fastFree(v25, v26);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ViewGestureGeometryCollector::collectGeometryForSmartMagnificationGesture(WebKit::WebPage **a1, float a2, float a3)
{
  unint64_t v42 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  uint64_t result = WebKit::WebPage::localMainFrameView(a1[2]);
  if (result)
  {
    uint64_t v7 = (WebCore::ScrollView *)result;
    ++*(_DWORD *)(result + 8);
    v37[0] = WebCore::ScrollView::unobscuredContentRect();
    v37[1] = v8;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v41, (const WebCore::IntRect *)v37);
    double v39 = 0.0;
    double v40 = 0.0;
    float v9 = roundf(a2);
    uint64_t v10 = 0x7FFFFFFFLL;
    uint64_t v11 = 0x80000000;
    if (v9 > -2147500000.0) {
      uint64_t v11 = (int)v9;
    }
    if (v9 < 2147500000.0) {
      uint64_t v10 = v11;
    }
    float v12 = roundf(a3);
    if (v12 >= 2147500000.0)
    {
      unint64_t v13 = 0x7FFFFFFF00000000;
    }
    else if (v12 <= -2147500000.0)
    {
      unint64_t v13 = 0x8000000000000000;
    }
    else
    {
      unint64_t v13 = (unint64_t)(int)v12 << 32;
    }
    v37[0] = v13 | v10;
    int32x2_t v14 = (int32x2_t)WebCore::ScrollView::windowToContents(v7, (const WebCore::IntPoint *)v37);
    int8x8_t v15 = (int8x8_t)vcgt_s32(v14, (int32x2_t)0xFE000000FE000000);
    *(int8x8_t *)v35.f32 = vorr_s8((int8x8_t)(*(void *)&v15 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v14), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v14, 6uLL)), v15));
    WebCore::HitTestResult::HitTestResult();
    uint64_t v24 = *((void *)a1[2] + 6);
    if (v24)
    {
      uint64_t v25 = *(void *)(v24 + 160);
      if (v25)
      {
        if (!*(unsigned char *)(v25 + 144))
        {
          v35.i32[0] = 259;
          v35.i8[4] = 1;
          WebCore::Document::hitTest();
        }
      }
    }
    uint64_t v26 = v38;
    if (v38)
    {
      *((_DWORD *)v38 + 7) += 2;
      BOOL v36 = 0;
      float32x4_t v35 = 0uLL;
      WebKit::ViewGestureGeometryCollector::computeZoomInformationForNode(a1, v26, (float32x2_t *)&v42, &v35, &v36, &v40, &v39);
      LODWORD(v27) = v41;
      LODWORD(v28) = HIDWORD(v41);
      WebKit::ViewGestureGeometryCollector::dispatchDidCollectGeometryForSmartMagnificationGesture((uint64_t)a1[2], v36, *(float *)&v42, *((float *)&v42 + 1), v35.f32[0], v35.f32[1], v35.f32[2], v35.f32[3], v27, v28, v29, v30, v31, v32, v33, v34, v41, v40, v39);
      if (*((_DWORD *)v26 + 7) == 2)
      {
        if ((*((_WORD *)v26 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v26);
        }
      }
      else
      {
        *((_DWORD *)v26 + 7) -= 2;
      }
    }
    else
    {
      WebKit::ViewGestureGeometryCollector::dispatchDidCollectGeometryForSmartMagnificationGesture((uint64_t)a1[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, v22, v23, v16, v17, v18, v19, v20, v21, 0, 0.0, 0.0);
    }
    uint64_t result = MEMORY[0x199731400](v37);
    if (*((_DWORD *)v7 + 2) == 1) {
      return (*(uint64_t (**)(WebCore::ScrollView *))(*(void *)v7 + 8))(v7);
    }
    else {
      --*((_DWORD *)v7 + 2);
    }
  }
  return result;
}

void WebKit::ViewGestureGeometryCollector::computeZoomInformationForNode(WebKit::WebPage **this, WebCore::Node *a2, float32x2_t *a3, float32x4_t *a4, BOOL *a5, double *a6, double *a7)
{
  v14.i64[0] = WebCore::Node::absoluteBoundingRect(a2, a5);
  v14.i64[1] = v15;
  *a4 = vmulq_f32(vcvtq_f32_s32(v14), (float32x4_t)vdupq_n_s32(0x3C800000u));
  uint64_t v16 = *(WebCore::ImageDocument **)(*((void *)a2 + 6) + 8);
  if ((*((unsigned char *)v16 + 3406) & 4) != 0)
  {
    uint64_t v17 = (WebCore::Node *)WebCore::ImageDocument::imageElement(v16);
    if (v17)
    {
      if (v17 != a2)
      {
        int32x2_t v18 = (int32x2_t)WebCore::Node::absoluteBoundingRect(v17, a5);
        float32x2_t v19 = (float32x2_t)vdup_n_s32(0x3C800000u);
        float32x2_t v21 = vmul_f32(vcvt_f32_s32(v20), v19);
        *(float32x2_t *)v22.f32 = vmul_f32(vcvt_f32_s32(v18), v19);
        *(float32x2_t *)&v22.u32[2] = v21;
        *a4 = v22;
        *a3 = (float32x2_t)vbsl_s8(vorr_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v22.f32, *a3), (int8x8_t)vcgt_f32(*a3, vadd_f32(*(float32x2_t *)v22.f32, v21))), (int8x8_t)vadd_f32(*(float32x2_t *)v22.f32, vmul_f32(v21, (float32x2_t)0x3F0000003F000000)), (int8x8_t)*a3);
      }
      *a5 = 1;
    }
  }
  *a6 = WebKit::WebPage::minimumPageScaleFactor(this[2]);
  *a7 = WebKit::WebPage::maximumPageScaleFactor(this[2]);
}

void WebKit::ViewUpdateDispatcher::~ViewUpdateDispatcher(WebKit::ViewUpdateDispatcher *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t vars8;

  WebKit::ViewUpdateDispatcher::~ViewUpdateDispatcher(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)142>::type()
{
  return 142;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::WebURLSchemeTaskProxy **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::WebURLSchemeTaskProxy *)-1)
      {
        uint64_t v5 = *v4;
        NSObject *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy28LoadSynchronousURLSchemeTaskEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)(a2 + 8), (void *)a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    float v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          double v27 = (WebKit::WebURLSchemeTaskProxy *)v26[1];
          v26[1] = 0;
          if (v27) {
            WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v27, v10);
          }
          uint64_t *v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(WebKit::WebURLSchemeTaskProxy **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v30, v10);
          }
          if (v13 == a3) {
            float v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(WebKit::WebURLSchemeTaskProxy **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    float v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceResponse,WebCore::ResourceError,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a1, a2);
  uint64_t v4 = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(void *)(v5 + 256) = v4;
  WTF::URL::URL(v5 + 264, (uint64_t *)(a2 + 264));
  uint64_t v6 = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(void *)(a1 + 304) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 312);
  *(_WORD *)(a1 + 316) = *(_WORD *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v6;
  uint64_t v7 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  *(void *)(a1 + 320) = v7;
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v8 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(void *)(a1 + 336) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a2 + 344) = 0;
  *(_DWORD *)(a1 + 344) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 348);
  *(_DWORD *)(a2 + 348) = 0;
  *(_DWORD *)(a1 + 348) = v8;
  return a1;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    uint64_t v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v5 = 0;
  }
  if (v5 != a2) {
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

WebKit::WebURLSchemeTaskProxy *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (WebKit::WebURLSchemeTaskProxy *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebKit::WebURLSchemeTaskProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F88B8;
  uint64_t v2 = a1[60];
  a1[60] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[59];
  a1[59] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 35));
  int v5 = (const void *)a1[33];
  a1[33] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 3), v4);
  unsigned int v7 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v7, v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F88B8;
  uint64_t v2 = a1[60];
  a1[60] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[59];
  a1[59] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 35));
  int v5 = (const void *)a1[33];
  a1[33] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 3), v4);
  unsigned int v7 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v7, v6);
  }

  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void>::call(uint64_t a1)
{
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_1,void,WebCore::ResourceRequest>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F88E0;
  uint64_t v2 = a1[28];
  a1[28] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 3));
  int v5 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v5, v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_1,void,WebCore::ResourceRequest>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F88E0;
  uint64_t v2 = a1[28];
  a1[28] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 3));
  int v5 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v5, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didPerformRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_1,void,WebCore::ResourceRequest>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(unsigned char *)(v1 + 248) = 0;
  uint64_t v2 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);

  return WebKit::WebURLSchemeTaskProxy::processNextPendingTask((void *)v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F8908;
  uint64_t v3 = (WebCore::ResourceResponseBase *)(a1 + 3);
  uint64_t v4 = (const void *)a1[33];
  a1[33] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  uint64_t v6 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v6, v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F8908;
  uint64_t v3 = (WebCore::ResourceResponseBase *)(a1 + 3);
  uint64_t v4 = (const void *)a1[33];
  a1[33] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  uint64_t v6 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v6, v5);
  }

  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebURLSchemeTaskProxy::didReceiveResponse(*(WebKit::WebURLSchemeTaskProxy **)(a1 + 8), (const WebCore::ResourceResponse *)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F8930;
  uint64_t v3 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F8930;
  uint64_t v3 = (WebKit::WebURLSchemeTaskProxy *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveResponse(WebCore::ResourceResponse const&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(unsigned char *)(v1 + 248) = 0;
  return WebKit::WebURLSchemeTaskProxy::processNextPendingTask((void *)v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveData(WebCore::SharedBuffer const&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F8958;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveData(WebCore::SharedBuffer const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F8958;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = (WebKit::WebURLSchemeTaskProxy *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didReceiveData(WebCore::SharedBuffer const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebURLSchemeTaskProxy::didReceiveData(*(WebKit::WebURLSchemeTaskProxy **)(a1 + 8), *(atomic_uint **)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didComplete(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F8980;
  uint64_t v3 = (const void *)a1[11];
  a1[11] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  unsigned int v7 = (WebKit::WebURLSchemeTaskProxy *)a1[2];
  a1[2] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didComplete(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didComplete(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebURLSchemeTaskProxy::didComplete(WebCore::ResourceError const&)::$_0,void>::call(uint64_t a1)
{
}

void WebKit::WebRemoteObjectRegistry::~WebRemoteObjectRegistry(unsigned int **this)
{
  WebKit::WebRemoteObjectRegistry::close((WebKit::WebRemoteObjectRegistry *)this);
  uint64_t v3 = this[4];
  this[4] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }

  WebKit::RemoteObjectRegistry::~RemoteObjectRegistry((WebKit::RemoteObjectRegistry *)this, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebRemoteObjectRegistry::~WebRemoteObjectRegistry(this);

  WTF::fastFree(v1, v2);
}

void WebKit::WebRemoteObjectRegistry::close(WebKit::WebRemoteObjectRegistry *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 4) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  uint64_t v4 = *(WebKit::WebRemoteObjectRegistry **)(v3 + 2112);
  if (v4) {
    uint64_t v4 = (WebKit::WebRemoteObjectRegistry *)*((void *)v4 + 1);
  }
  if (v4 != this) {
    goto LABEL_10;
  }
  {
    unsigned int v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0x6Au, *(void *)(v3 + 40));
  uint64_t v6 = *(unsigned int **)(v3 + 2112);
  *(void *)(v3 + 2112) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
    if (!v2) {
      return;
    }
  }
  else
  {
LABEL_10:
    if (!v2) {
      return;
    }
  }
  unsigned int v7 = *(const void **)(v2 - 8);

  CFRelease(v7);
}

uint64_t WebKit::WebRemoteObjectRegistry::messageSender(WebKit::WebRemoteObjectRegistry *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    return v1 - 16;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebRemoteObjectRegistry::messageDestinationID(WebKit::WebRemoteObjectRegistry *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 2120);
}

void WebKit::PlatformCALayerRemoteTiledBacking::~PlatformCALayerRemoteTiledBacking(WebKit::PlatformCALayerRemoteTiledBacking *this, void *a2)
{
  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 848, a2);
  uint64_t v4 = *((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::PlatformCALayerRemoteTiledBacking::~PlatformCALayerRemoteTiledBacking(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setNeedsDisplayInRect(WebKit::PlatformCALayerRemoteTiledBacking *this, const WebCore::FloatRect *a2)
{
  uint64_t v2 = (WebCore::TileController *)*((void *)this + 105);
  v5.m_location = (IntPoint)WebCore::enclosingIntRect(a2, (const FloatRect *)a2);
  v5.m_size = v3;
  return WebCore::TileController::setNeedsDisplayInRect(v2, &v5);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::isOpaque(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return *(unsigned __int8 *)(*((void *)this + 105) + 309);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::acceleratesDrawing(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return *(unsigned __int8 *)(*((void *)this + 105) + 307);
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::wantsDeepColorBackingStore(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return *(unsigned __int8 *)(*((void *)this + 105) + 308);
}

void WebKit::StorageAreaImpl::~StorageAreaImpl(WebKit::StorageAreaImpl *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (!v3)
  {
    *((void *)this + 3) = 0;
    return;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 96) - 1, (*(void *)(v4 + 96) = v5) == 0))
  {
    WebKit::StorageNamespaceImpl::destroyStorageAreaMap(*(WebKit::StorageNamespaceImpl **)(v4 + 32), *(WebKit::StorageAreaMap **)(v4 + 40));
    uint64_t v3 = *((void *)this + 3);
    *((void *)this + 3) = 0;
    if (!v3) {
      return;
    }
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::StorageAreaImpl::~StorageAreaImpl(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::StorageAreaImpl::length(WebKit::StorageAreaImpl *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(WebKit::StorageAreaMap **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(v2);

  return WebCore::StorageMap::length(v3);
}

WebKit::StorageAreaMap *WebKit::StorageAreaImpl::key@<X0>(WebKit::StorageAreaMap *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4 && (this = *(WebKit::StorageAreaMap **)(v4 + 8)) != 0)
  {
    uint64_t v6 = WebKit::StorageAreaMap::ensureMap(this);
    return (WebKit::StorageAreaMap *)MEMORY[0x1F416C360](v6, a2);
  }
  else
  {
    unsigned int v7 = (_DWORD *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *v7 += 2;
    }
    *a3 = v7;
  }
  return this;
}

uint64_t *WebKit::StorageAreaImpl::item@<X0>(uint64_t *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = this[3];
  if (v4 && (this = *(uint64_t **)(v4 + 8)) != 0)
  {
    unsigned int v7 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap((WebKit::StorageAreaMap *)this);
    return WebCore::StorageMap::getItem(a3, v7, a2);
  }
  else
  {
    uint64_t v5 = (_DWORD *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *v5 += 2;
    }
    *a3 = (uint64_t)v5;
  }
  return this;
}

WTF::StringImpl *WebKit::StorageAreaImpl::setItem(WTF::StringImpl *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, BOOL *a5)
{
  uint64_t v6 = *((void *)this + 3);
  if (!v6) {
    return this;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    return this;
  }
  float v12 = this;
  unint64_t v13 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(*(WebKit::StorageAreaMap **)(v6 + 8));
  double v40 = 0;
  *a5 = 0;
  WebCore::StorageMap::setItem(v13, a3, a4, (WTF::String *)&v40, a5);
  if (!*a5 && (WTF::equal(v40, *(const WTF::StringImpl **)a4, v15) & 1) == 0)
  {
    LODWORD(v41) = 0;
    WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v7 + 72), (WTF::StringImpl **)a3, (const WTF::StringImpl *)&v41, (uint64_t)buf);
    ++*(_DWORD *)(*(void *)buf + 8);
    if (!*(unsigned char *)(v7 + 64))
    {
      unsigned int v24 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1985F2000, v24, OS_LOG_TYPE_ERROR, "StorageAreaMap::setItem failed because storage map ID is invalid", buf, 2u);
      }
      goto LABEL_29;
    }
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 8), v7);
    uint64_t v16 = *(atomic_uint **)(v7 + 8);
    if (v16) {
      atomic_fetch_add(v16, 1u);
    }
    uint64_t v17 = *(void *)(v7 + 80);
    int v18 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
      *(_DWORD *)v18 += 2;
    }
    unint64_t v19 = &qword_1EB35A000;
    {
      float32x4_t v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v35);
    }
    uint64_t v20 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v37, (uint64_t **)(v20 + 24));
    if (*(unsigned char *)(v7 + 64))
    {
      unint64_t v19 = v37;
      uint64_t v36 = *((void *)v12 + 2);
      uint64_t v5 = *((void *)a2 + 37);
      if (v18) {
        *(_DWORD *)v18 += 2;
      }
      unint64_t v21 = (WebCore::LocalFrame *)WTF::fastMalloc((WTF *)0x20);
      a2 = v21;
      *(void *)unint64_t v21 = &unk_1EE9F8FE0;
      *((void *)v21 + 1) = v16;
      *((void *)v21 + 2) = v17;
      if (v18)
      {
        int v23 = *(_DWORD *)v18;
        *(_DWORD *)v18 += 2;
        *((void *)v21 + 3) = v18;
        if (v23) {
          *(_DWORD *)int v18 = v23;
        }
        else {
          WTF::StringImpl::destroy(v18, v22);
        }
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    *((void *)a2 + 3) = 0;
LABEL_20:
    uint64_t v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v26 = 592;
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 66) = (char *)v26 + 16;
    *((void *)v26 + 67) = 512;
    *((void *)v26 + 68) = 0;
    *((void *)v26 + 70) = 0;
    *((void *)v26 + 69) = 0;
    IPC::Encoder::encodeHeader(v26);
    long long v41 = v26;
    uint64_t v27 = *(void *)(v7 + 56);
    uint64_t v28 = (void *)IPC::Encoder::grow(v26, 8uLL, 8);
    if (v29 <= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x19920F59CLL);
    }
    *uint64_t v28 = v27;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, &v36);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, (uint64_t *)a3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, (uint64_t *)a4);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, (uint64_t *)(v5 + 768));
    *(void *)buf = a2;
    uint64_t v39 = v25;
    IPC::Connection::sendMessageWithAsyncReply((os_unfair_lock_s *)v19, &v41, (uint64_t *)buf, 0, 0);
    uint64_t v31 = *(void *)buf;
    *(void *)buf = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
    uint64_t v32 = v41;
    long long v41 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v30);
      WTF::fastFree(v33, v34);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v37);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v14);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
LABEL_29:
  this = v40;
  double v40 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF::StringImpl *WebKit::StorageAreaImpl::removeItem(WTF::StringImpl *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = this;
    this = *(WTF::StringImpl **)(v3 + 8);
    if (this) {
      return WebKit::StorageAreaMap::removeItem(this, a2, v5, a3);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::StorageAreaMap::removeItem(WebKit::StorageAreaMap *this, WebCore::LocalFrame *a2, WebKit::StorageAreaImpl *a3, const WTF::String *a4)
{
  unsigned int v8 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(this);
  uint64_t v26 = 0;
  uint64_t result = (WTF::StringImpl *)WebCore::StorageMap::removeItem(v8, a4, (WTF::String *)&v26);
  if (v26)
  {
    LODWORD(v25[0]) = 0;
    WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)this + 9, (WTF::StringImpl **)a4, (const WTF::StringImpl *)v25, (uint64_t)buf);
    ++*(_DWORD *)(*(void *)buf + 8);
    if (*((unsigned char *)this + 64))
    {
      uint64_t v10 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      uint64_t v11 = (atomic_uint *)*((void *)this + 1);
      if (v11) {
        atomic_fetch_add(v11, 1u);
      }
      uint64_t v12 = *((void *)this + 10);
      v25[0] = (uint64_t)v11;
      v25[1] = v12;
      unint64_t v13 = *(_DWORD **)a4;
      if (*(void *)a4) {
        *v13 += 2;
      }
      v25[2] = (uint64_t)v13;
      uint64_t v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton((WebKit::WebProcess *)v10);
      uint64_t result = (WTF::StringImpl *)WebKit::WebProcess::ensureNetworkProcessConnection(v14);
      if (!*((unsigned char *)this + 64))
      {
        __break(1u);
        return result;
      }
      uint64_t v15 = (os_unfair_lock_s *)*((void *)result + 3);
      uint64_t v20 = *((void *)a3 + 2);
      *(void *)buf = (char *)this + 56;
      uint64_t v16 = *((void *)a2 + 37) + 768;
      unsigned int v22 = &v20;
      int v23 = a4;
      uint64_t v24 = v16;
      IPC::Connection::sendWithAsyncReply<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(v15, (uint64_t **)buf, v25);
      WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0::~$_0((uint64_t)v25, v17);
    }
    else
    {
      unint64_t v19 = qword_1EB3585F0;
      if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1985F2000, v19, OS_LOG_TYPE_ERROR, "StorageAreaMap::removeItem failed because storage map ID is invalid", buf, 2u);
      }
    }
    uint64_t result = v26;
    uint64_t v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebKit::StorageAreaImpl::clear(WebKit::StorageAreaImpl *this, WebCore::LocalFrame *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return;
  }
  uint64_t v6 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(*(WebKit::StorageAreaMap **)(v2 + 8));
  WebCore::StorageMap::clear(v6);
  unsigned int v8 = *(WTF::StringImpl ***)(v3 + 72);
  if (v8)
  {
    *(void *)(v3 + 72) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
  }
  ++*(void *)(v3 + 80);
  *(unsigned char *)(v3 + 104) = 1;
  if (*(unsigned char *)(v3 + 64))
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
    uint64_t v9 = *(atomic_uint **)(v3 + 8);
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
    uint64_t v10 = *(void *)(v3 + 80);
    {
      uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v26);
    }
    uint64_t v11 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    if (*(unsigned char *)(v3 + 64))
    {
      uint64_t v12 = *(os_unfair_lock_s **)(v11 + 24);
      uint64_t v27 = *((void *)this + 2);
      uint64_t v13 = *((void *)a2 + 37);
      uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v14 = &unk_1EE9F9030;
      v14[1] = v9;
      uint64_t v14[2] = v10;
      uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v16 = 545;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 66) = (char *)v16 + 16;
      *((void *)v16 + 67) = 512;
      *((void *)v16 + 68) = 0;
      *((void *)v16 + 70) = 0;
      *((void *)v16 + 69) = 0;
      IPC::Encoder::encodeHeader(v16);
      uint64_t v30 = v16;
      uint64_t v17 = *(void *)(v3 + 56);
      int v18 = (void *)IPC::Encoder::grow(v16, 8uLL, 8);
      if (v19 > 7)
      {
        void *v18 = v17;
        IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, &v27);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)(v13 + 768));
        *(void *)buf = v14;
        uint64_t v29 = v15;
        IPC::Connection::sendMessageWithAsyncReply(v12, &v30, (uint64_t *)buf, 0, 0);
        uint64_t v21 = *(void *)buf;
        *(void *)buf = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
        unsigned int v22 = v30;
        uint64_t v30 = 0;
        if (v22)
        {
          IPC::Encoder::~Encoder(v22, v20);
          WTF::fastFree(v23, v24);
        }
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(0xC471u);
    JUMPOUT(0x19920F9B4);
  }
  uint64_t v25 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1985F2000, v25, OS_LOG_TYPE_ERROR, "StorageAreaMap::clear failed because storage map ID is invalid", buf, 2u);
  }
}

uint64_t WebKit::StorageAreaImpl::contains(WebKit::StorageAreaImpl *this, const WTF::String *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(WebKit::StorageAreaMap **)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = WebKit::StorageAreaMap::ensureMap(v3);

  return MEMORY[0x1F4173F40](v5, a2);
}

uint64_t WebKit::StorageAreaImpl::storageType(WebKit::StorageAreaImpl *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return *(unsigned __int8 *)(v2 + 92);
  }
  else {
    return 1;
  }
}

uint64_t WebKit::StorageAreaImpl::memoryBytesUsedByCache(WebKit::StorageAreaImpl *this)
{
  return 0;
}

atomic_uchar *volatile **WebKit::StorageAreaImpl::prewarm(atomic_uchar *volatile **this)
{
  uint64_t v1 = this[3];
  if (v1)
  {
    this = (atomic_uchar *volatile **)*((void *)v1 + 1);
    if (this)
    {
      if (!*((unsigned char *)this + 64)) {
        return WebKit::StorageAreaMap::sendConnectMessage((uint64_t)this, 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::StorageAreaMap::StorageAreaMap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1EE9B71B0;
  *(void *)(a1 + 8) = 0;
  IdentifierInternal = (WebKit::WebProcess *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 16) = IdentifierInternal;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE9F8E38;
  *(void *)(a1 + 32) = a2;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 104) = 0;
  unsigned int v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(IdentifierInternal);
  WebKit::WebProcess::registerStorageAreaMap(v8, (WebKit::StorageAreaMap *)a1);
  return a1;
}

void WebKit::StorageAreaMap::~StorageAreaMap(unsigned int **this)
{
  WebKit::StorageAreaMap::disconnect((WebKit::StorageAreaMap *)this);
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  WebKit::WebProcess::unregisterStorageAreaMap((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process, (WebKit::StorageAreaMap *)this);
  uint64_t v3 = (WTF::StringImpl **)this[9];
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, v2);
  }
  uint64_t v4 = (WTF::StringImpl ****)this[6];
  this[6] = 0;
  if (v4) {
    std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100](v4, v2);
  }
  uint64_t v5 = (uint64_t)this[5];
  this[5] = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, v2);
  }
  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::StorageAreaMap::~StorageAreaMap(this);

  WTF::fastFree(v1, v2);
}

atomic_uchar *volatile **WebKit::StorageAreaMap::disconnect(WebKit::StorageAreaMap *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v2 = *((unsigned __int8 *)this + 64);
  {
LABEL_32:
    uint64_t v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t result = (atomic_uchar *volatile **)WebKit::WebProcess::singleton(void)::process;
  uint64_t v4 = *(void *)(WebKit::WebProcess::singleton(void)::process + 296);
  if (v2)
  {
    if (!v4)
    {
LABEL_26:
      *((unsigned char *)this + 56) = 0;
      *((unsigned char *)this + 64) = 0;
      *((void *)this + 3) = 0;
      return result;
    }
    ++*(_DWORD *)(v4 + 20);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v26, (uint64_t **)(v4 + 24));
    if (*((unsigned char *)this + 64))
    {
      uint64_t v5 = v26;
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 562;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      v29[0] = v6;
      uint64_t v7 = *((void *)this + 7);
      unsigned int v8 = (void *)IPC::Encoder::grow(v6, 8uLL, 8);
      if (v9 <= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x19920FF24);
      }
      *unsigned int v8 = v7;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)v29, 0, 0);
      uint64_t v11 = v29[0];
      v29[0] = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v10);
        WTF::fastFree(v21, v22);
      }
      uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v26);
      if (*(_DWORD *)(v4 + 20) == 1) {
        uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      else {
        --*(_DWORD *)(v4 + 20);
      }
      goto LABEL_26;
    }
    goto LABEL_31;
  }
  if (!v4) {
    return result;
  }
  int v12 = *(_DWORD *)(v4 + 20);
  *(_DWORD *)(v4 + 20) = v12 + 1;
  if (*((unsigned char *)this + 105))
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v27, (uint64_t **)(v4 + 24));
    int v13 = *((unsigned __int8 *)this + 92);
    uint64_t v14 = *((void *)this + 4);
    if ((v13 - 1) <= 1 && *(void *)(v14 + 32)) {
      LOBYTE(v13) = 2;
    }
    uint64_t v15 = v27;
    long long v26 = *(_OWORD *)(v14 + 48);
    WebKit::StorageAreaMap::clientOrigin((WebKit::StorageAreaMap *)v29, (uint64_t)this);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 544;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    uint64_t v28 = v16;
    uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
    if (!v18)
    {
      __break(0xC471u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    unsigned char *v17 = v13;
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v16, (uint64_t)&v26);
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v16, (uint64_t)v29);
    IPC::Connection::sendMessageImpl((uint64_t)v15, (uint64_t *)&v28, 0, 0);
    uint64_t v20 = v28;
    uint64_t v28 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v19);
      WTF::fastFree(v23, v24);
    }
    if (v32 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9F8FB0[v32])(&v28, &v31);
    }
    int v32 = -1;
    if (v30 != -1) {
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9F8FB0[v30])(&v28, v29);
    }
    uint64_t result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v27);
    int v12 = *(_DWORD *)(v4 + 20) - 1;
  }
  if (!v12) {
    return (atomic_uchar *volatile **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(_DWORD *)(v4 + 20) = v12;
  return result;
}

uint64_t WebKit::StorageAreaMap::ensureMap(WebKit::StorageAreaMap *this)
{
  if (!*((unsigned char *)this + 64)) {
    WebKit::StorageAreaMap::sendConnectMessage((uint64_t)this, 1);
  }
  uint64_t result = *((void *)this + 6);
  if (!result)
  {
    uint64_t v3 = (WebCore::StorageMap *)WTF::fastMalloc((WTF *)0x10);
    uint64_t result = WebCore::StorageMap::StorageMap(v3);
    uint64_t v5 = (WTF::StringImpl ****)*((void *)this + 6);
    *((void *)this + 6) = result;
    if (v5)
    {
      std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100](v5, v4);
      return *((void *)this + 6);
    }
  }
  return result;
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  *a3 = 0;
  uint64_t v7 = (WTF::StringImpl *)a3[2];
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  unsigned int v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v10 = (uint64_t)v8;
  *unsigned int v8 = &unk_1EE9F9008;
  v8[1] = v5;
  uint64_t v8[2] = v6;
  if (v7)
  {
    int v11 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    v8[3] = v7;
    if (v11) {
      *(_DWORD *)uint64_t v7 = v11;
    }
    else {
      WTF::StringImpl::destroy(v7, v9);
    }
  }
  else
  {
    v8[3] = 0;
  }
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v13 = 586;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  int v23 = v13;
  uint64_t v14 = **a2;
  uint64_t v15 = (void *)IPC::Encoder::grow(v13, 8uLL, 8);
  if (v16 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v15 = v14;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, a2[1]);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2[2]);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2[3]);
    v22[0] = v10;
    v22[1] = v12;
    IPC::Connection::sendMessageWithAsyncReply(a1, &v23, v22, 0, 0);
    uint64_t v18 = v22[0];
    v22[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t result = (uint64_t)v23;
    int v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v17);
      return WTF::fastFree(v20, v21);
    }
  }
  return result;
}

uint64_t WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WebKit::StorageAreaMap::didSetItem(uint64_t result, uint64_t a2, WTF::StringImpl **a3, int a4)
{
  if (*(void *)(result + 80) != a2) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = (uint64_t *)(result + 72);
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(result + 72), a3, (const WTF::StringImpl *)a3);
  uint64_t v7 = *(void *)(v5 + 72);
  if (v7) {
    uint64_t v8 = v7 + 16 * *(unsigned int *)(v7 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != result)
  {
    if (*(_DWORD *)(result + 8) != 1)
    {
      --*(_DWORD *)(result + 8);
      goto LABEL_8;
    }
    if (v7)
    {
      uint64_t v9 = v7 + 16 * *(unsigned int *)(v7 - 4);
      if (v9 == result) {
        goto LABEL_8;
      }
    }
    else
    {
      if (!result) {
        goto LABEL_8;
      }
      uint64_t v9 = 0;
    }
    if (v9 != result) {
      uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v6, (WTF::StringImpl **)result);
    }
  }
LABEL_8:
  if (a4)
  {
    return WebKit::StorageAreaMap::syncItems(v5);
  }
  return result;
}

uint64_t WebKit::StorageAreaMap::syncItems(uint64_t result)
{
  if (!*(void *)(result + 48)) {
    return result;
  }
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 104)) {
    return result;
  }
  int v2 = (WebCore::StorageMap *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v3 = WebCore::StorageMap::StorageMap(v2);
  uint64_t v4 = *(WebCore::StorageMap **)(v1 + 48);
  *(void *)(v1 + 48) = v3;
  uint64_t result = WebCore::StorageMap::importItems();
  uint64_t v6 = *(void *)(v1 + 72);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = v6 + 16 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      uint64_t v9 = *(void *)(v1 + 72);
      if (v7)
      {
        uint64_t v10 = 16 * v7;
        uint64_t v9 = *(void *)(v1 + 72);
        while ((unint64_t)(*(void *)v9 + 1) <= 1)
        {
          v9 += 16;
          v10 -= 16;
          if (!v10)
          {
            uint64_t v9 = v8;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    uint64_t v9 = v6 + 16 * v7;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = v6 + 16 * v7;
LABEL_13:
  if (v6) {
    uint64_t v11 = v6 + 16 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  while (v9 != v11)
  {
    uint64_t v12 = *(WTF::StringImpl **)v9;
    if (*(void *)v9) {
      *(_DWORD *)v12 += 2;
    }
    uint64_t v18 = v12;
    int v19 = *(_DWORD *)(v9 + 8);
    WebCore::StorageMap::getItem((uint64_t *)&v17, v4, (const WTF::String *)&v18);
    if (v17)
    {
      WebCore::StorageMap::setItemIgnoringQuota(*(WebCore::StorageMap **)(v1 + 48), (const WTF::String *)&v18, (const WTF::String *)&v17);
    }
    else
    {
      unint64_t v16 = 0;
      WebCore::StorageMap::removeItem(*(WebCore::StorageMap **)(v1 + 48), (const WTF::String *)&v18, (WTF::String *)&v16);
      int v13 = v16;
      unint64_t v16 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v5);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    uint64_t v14 = v17;
    uint64_t v17 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v5);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = (uint64_t)v18;
    uint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    uint64_t v15 = v9 + 16;
    uint64_t v9 = v8;
    if (v15 != v8)
    {
      uint64_t v9 = v15;
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        v9 += 16;
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
  if (v4) {
    return std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100]((WTF::StringImpl ****)v4, v5);
  }
  return result;
}

void WebKit::StorageAreaMap::dispatchStorageEvent(uint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t a4, const WTF::String *a5, uint64_t a6, unint64_t a7)
{
  if (*(void *)(a1 + 24) > a7) {
    return;
  }
  *(void *)(a1 + 24) = a7;
  if (!*(unsigned char *)(a2 + 8))
  {
    if (*(void *)a3)
    {
      if (*(void *)(a1 + 48)
        && (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 72), (WTF::StringImpl **)a3, a3) & 1) == 0)
      {
        if (*(void *)a5)
        {
          WebCore::StorageMap::setItemIgnoringQuota(*(WebCore::StorageMap **)(a1 + 48), a3, a5);
        }
        else
        {
          v21[0] = 0;
          WebCore::StorageMap::removeItem(*(WebCore::StorageMap **)(a1 + 48), a3, (WTF::String *)v21);
          int v19 = v21[0];
          v21[0] = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v18);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
      }
    }
    else
    {
      v21[0] = 0;
      WebKit::StorageAreaMap::syncItems(a1);
    }
  }
  if (*(unsigned char *)(a1 + 92))
  {
    v21[0] = *(WTF::StringImpl **)a2;
    LOBYTE(v21[1]) = *(unsigned char *)(a2 + 8);
    uint64_t v11 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v11 = &unk_1EE9F9080;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)v21;
    uint64_t v22 = v11;
    WebCore::StorageEventDispatcher::dispatchLocalStorageEvents();
    uint64_t v12 = v22;
    uint64_t v22 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    return;
  }
  {
LABEL_25:
    uint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v13 + 24))
  {
    __break(1u);
    goto LABEL_25;
  }
  v21[0] = *(WTF::StringImpl **)(v13 + 16);
  uint64_t v14 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), v21);
  if (v14)
  {
    uint64_t v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    if (*(void *)(v15 + 48))
    {
      v21[0] = *(WTF::StringImpl **)a2;
      LOBYTE(v21[1]) = *(unsigned char *)(a2 + 8);
      uint64_t v16 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v16 = &unk_1EE9F9058;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)v21;
      uint64_t v22 = v16;
      WebCore::StorageEventDispatcher::dispatchSessionStorageEvents();
      uint64_t v17 = v22;
      uint64_t v22 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
}

uint64_t WebKit::StorageAreaMap::clearCache(uint64_t this, unint64_t a2)
{
  if (*(void *)(this + 24) <= a2)
  {
    *(void *)(this + 24) = a2;
    WebKit::StorageAreaMap::syncItems(this);
    return 0;
  }
  return this;
}

uint64_t WebKit::StorageNamespaceImpl::topLevelOrigin(WebKit::StorageNamespaceImpl *this)
{
  return *((void *)this + 4);
}

uint64_t WebKit::StorageAreaMap::clientOrigin(WebKit::StorageAreaMap *this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 40) + 8;
  v12[0] = 0;
  int v13 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v12, v4);
  uint64_t v5 = *(void *)(*(void *)(a2 + 32) + 32);
  if (v5) {
    uint64_t v6 = (unsigned char *)(v5 + 8);
  }
  else {
    uint64_t v6 = v12;
  }
  v10[0] = 0;
  int v11 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10, (uint64_t)v6);
  *(unsigned char *)this = 0;
  *((_DWORD *)this + 6) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this, (uint64_t)v10);
  *((unsigned char *)this + 32) = 0;
  uint64_t v7 = (char *)this + 32;
  *((_DWORD *)v7 + 6) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v7, (uint64_t)v12);
  if (v11 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9F8FB0[v11])(&v9, v10);
  }
  if (v13 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9F8FB0[v13])(v10, v12);
  }
  return result;
}

atomic_uchar *volatile **WebKit::StorageAreaMap::sendConnectMessage(uint64_t a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 105) = 1;
  uint64_t v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton((WebKit::WebProcess *)a1);
  uint64_t v5 = WebKit::WebProcess::ensureNetworkProcessConnection(v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v27, *(atomic_uchar *volatile **)(v5 + 24));
  long long v26 = *(_OWORD *)(*(void *)(a1 + 32) + 48);
  WebKit::StorageAreaMap::clientOrigin((WebKit::StorageAreaMap *)v28, a1);
  int v6 = *(unsigned __int8 *)(a1 + 92);
  if ((v6 - 1) <= 1 && *(void *)(*(void *)(a1 + 32) + 32)) {
    LOBYTE(v6) = 2;
  }
  char v25 = v6;
  if (a2)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)&long long v17 = &v25;
    *((void *)&v17 + 1) = &v16;
    uint64_t v18 = &v26;
    int v19 = v28;
    IPC::Connection::sendSync<Messages::NetworkStorageManager::ConnectToStorageAreaSync>((uint64_t)&v20, (uint64_t)v27, (uint64_t)&v17);
    uint64_t v11 = v24;
    if (v24)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      unint64_t v14 = 0;
    }
    else
    {
      uint64_t v12 = (uint64_t)v21;
      int v13 = v22;
      uint64_t v22 = 0;
      unint64_t v14 = (unint64_t)v23;
    }
    *(void *)&long long v17 = v12;
    *((void *)&v17 + 1) = v13;
    uint64_t v18 = (long long *)v14;
    WebKit::StorageAreaMap::didConnect(a1, v12, (uint64_t)&v17 + 8, v14);
    if (*((void *)&v17 + 1)) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v17 + 1), v15);
    }
    if (v11 != -1) {
      ((void (*)(long long *, char **))off_1EE9F8FC0[v11])(&v17, &v20);
    }
  }
  else
  {
    *(void *)&long long v17 = a1;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    uint64_t v7 = *(atomic_uint **)(a1 + 8);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    *((void *)&v17 + 1) = v7;
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v20 = &v25;
    uint64_t v21 = &v16;
    uint64_t v22 = &v26;
    int v23 = v28;
    IPC::Connection::sendWithAsyncReply<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>((os_unfair_lock_s *)v27, (uint64_t)&v20, &v17);
    char v9 = (unsigned int *)*((void *)&v17 + 1);
    *((void *)&v17 + 1) = 0;
    if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v28);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v27);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkStorageManager::ConnectToStorageAreaSync>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3623, 0, &v19, &v18);
  IPC::ArgumentCoder<std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ClientOrigin const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ClientOrigin const&>,0ul,1ul,2ul,3ul>(v18, a3);
  IPC::Connection::sendSyncMessage(a2, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, INFINITY);
  int v6 = v17;
  if (v17)
  {
    if (v17 == 1)
    {
      *(unsigned char *)a1 = (_BYTE)v16;
LABEL_7:
      *(_DWORD *)(a1 + 32) = v6;
LABEL_8:
      ((void (*)(void *, uint64_t **))off_1EE9F9098[v6])(v20, &v16);
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>>(v20, v16);
  if (v21)
  {
    if (!v17)
    {
      uint64_t v8 = v20[0];
      uint64_t v9 = v20[1];
      uint64_t v10 = v20[2];
      uint64_t v11 = v16;
      uint64_t v16 = 0;
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = v10;
      goto LABEL_7;
    }
LABEL_14:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::StorageAreaMap::didConnect(v15);
  }
  *(unsigned char *)a1 = 13;
  *(_DWORD *)(a1 + 32) = 1;
  int v6 = v17;
  if (v17 != -1) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::StorageAreaMap::didConnect(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  *(unsigned char *)(result + 105) = 0;
  if (*(void *)(result + 24) <= a4)
  {
    uint64_t v4 = result;
    *(void *)(result + 24) = a4;
    if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (!*(unsigned char *)(result + 64)) {
        *(unsigned char *)(result + 64) = 1;
      }
      *(void *)(result + 56) = a2;
      uint64_t v5 = (WebCore::StorageMap *)WTF::fastMalloc((WTF *)0x10);
      uint64_t v6 = WebCore::StorageMap::StorageMap(v5);
      uint64_t v8 = *(WTF::StringImpl *****)(v4 + 48);
      *(void *)(v4 + 48) = v6;
      if (v8) {
        std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100](v8, v7);
      }
      return WebCore::StorageMap::importItems();
    }
  }
  return result;
}

IPC::Encoder **IPC::Connection::sendWithAsyncReply<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(os_unfair_lock_s *a1, uint64_t a2, long long *a3)
{
  IPC::Connection::makeAsyncReplyHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(v12, a3);
  uint64_t v5 = v12[1];
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 550;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ClientOrigin const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ClientOrigin const&>,0ul,1ul,2ul,3ul>(v6, a2);
  v10[0] = v12[0];
  v10[1] = v5;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v11, v10, 0, 0);
  uint64_t v8 = v10[0];
  v10[0] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v11, v7);
}

void WebKit::StorageNamespaceImpl::destroyStorageAreaMap(WebKit::StorageNamespaceImpl *this, WebKit::StorageAreaMap *a2)
{
  int v2 = (uint64_t *)((char *)this + 64);
  uint64_t v3 = *((void *)this + 8);
  if (!v3) {
    return;
  }
  int v4 = *(_DWORD *)(v3 - 8);
  int v19 = -1640531527;
  __int16 v20 = 0;
  char v21 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v19, (uint64_t)a2 + 8);
  unsigned int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v19) & v4;
  uint64_t v6 = v3 + 40 * v5;
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v6);
  if (v7)
  {
LABEL_3:
    uint64_t v8 = *v2;
    if (!*v2) {
      return;
    }
    uint64_t v6 = v8 + 40 * *(unsigned int *)(v8 - 4);
    goto LABEL_5;
  }
  int v12 = 1;
  while (1)
  {
    int v13 = *(_DWORD *)(v6 + 24);
    if (!v13)
    {
      if (*(void *)v6 == -1) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    if (v13 != 1) {
      break;
    }
LABEL_14:
    if (WebCore::operator==()) {
      goto LABEL_19;
    }
LABEL_15:
    unsigned int v5 = (v5 + v12) & v4;
    uint64_t v6 = v3 + 40 * v5;
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v6);
    ++v12;
    if (v14) {
      goto LABEL_3;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_19:
  uint64_t v8 = *v2;
  if (!*v2)
  {
LABEL_6:
    if (v8 != v6)
    {
      uint64_t v9 = *(unsigned int *)(v6 + 24);
      if (v9 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9F8FB0[v9])(&v22, v6);
      }
      *(void *)uint64_t v6 = -1;
      *(void *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 24) = 0;
      std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100]((unsigned int ***)(v6 + 32), 0);
      ++*(_DWORD *)(*v2 - 16);
      uint64_t v10 = *v2;
      if (*v2) {
        int v11 = *(_DWORD *)(v10 - 12) - 1;
      }
      else {
        int v11 = -1;
      }
      *(_DWORD *)(v10 - 12) = v11;
      uint64_t v15 = *v2;
      if (*v2)
      {
        unsigned int v16 = 6 * *(_DWORD *)(v15 - 12);
        unsigned int v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9)
        {
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v2, v17 >> 1, 0);
        }
      }
    }
    return;
  }
LABEL_5:
  v8 += 40 * *(unsigned int *)(v8 - 4);
  if (v8 != v6) {
    goto LABEL_6;
  }
}

uint64_t WebKit::StorageNamespaceImpl::createLocalStorageNamespace(WebKit::StorageNamespaceImpl *this, int a2)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9F8E70;
  *(unsigned char *)(result + 12) = 1;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = a2;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(void *)this = result;
  return result;
}

void WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(WebKit::StorageNamespaceImpl *this, void *a2)
{
  uint64_t v3 = *((void *)this + 8);
  if (!v3) {
    goto LABEL_14;
  }
  uint64_t v4 = *(unsigned int *)(v3 - 4);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = *((void *)this + 8);
  while (1)
  {
    int v6 = *(_DWORD *)(v5 + 24);
    if (v6) {
      break;
    }
    if (*(void *)v5 != -1) {
      goto LABEL_6;
    }
LABEL_9:
    v5 += 40;
    if (!--v4) {
      goto LABEL_13;
    }
  }
  if (v6 == 1)
  {
LABEL_6:
    std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100]((unsigned int ***)(v5 + 32), 0);
    uint64_t v7 = *(unsigned int *)(v5 + 24);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9F8FB0[v7])(&v9, v5);
    }
    *(_DWORD *)(v5 + 24) = -1;
    goto LABEL_9;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_13:
  WTF::fastFree((WTF *)(v3 - 16), a2);
LABEL_14:
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, (WTF::StringImpl *)a2);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::StorageNamespaceImpl::~StorageNamespaceImpl(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::StorageNamespaceImpl::sessionID(WebKit::StorageNamespaceImpl *this)
{
  {
LABEL_5:
    int v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
  {
    __break(1u);
    goto LABEL_5;
  }
  return *(void *)(WebKit::WebProcess::singleton(void)::process + 664);
}

unsigned int *WebKit::StorageNamespaceImpl::storageArea@<X0>(WebKit::StorageNamespaceImpl *this@<X0>, const WebCore::SecurityOrigin *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)((char *)this + 64);
  uint64_t v5 = *((void *)this + 8);
  int v6 = (char *)a2 + 8;
  v27[0] = this;
  v27[1] = a2;
  if (v5
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)this + 8, 0), (uint64_t v5 = *v4) != 0))
  {
    int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v7 = 0;
  }
  int v28 = -1640531527;
  __int16 v29 = 0;
  char v30 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v28, (uint64_t)v6);
  unsigned int v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v28) & v7;
  char v9 = (unsigned int *)(v5 + 40 * v8);
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
  if ((v10 & 1) == 0)
  {
    int v11 = 0;
    int v12 = 1;
    while (1)
    {
      unsigned int v13 = v9[6];
      if (v13) {
        break;
      }
      if (*(void *)v9 != -1) {
        goto LABEL_7;
      }
      int v11 = v9;
LABEL_14:
      unsigned int v8 = (v8 + v12) & v7;
      char v9 = (unsigned int *)(v5 + 40 * v8);
      WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
      ++v12;
      if (v18)
      {
        if (v11)
        {
          *((void *)v11 + 4) = 0;
          *(_OWORD *)int v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          --*(_DWORD *)(*v4 - 16);
          char v9 = v11;
        }
        goto LABEL_17;
      }
    }
    if (v13 != 1)
    {
      char v25 = (WebKit::StorageNamespaceImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebKit::StorageNamespaceImpl::copy(v25, v26);
    }
LABEL_7:
    if (WebCore::operator==()) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_17:
  WTF::HashMapEnsureTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData const&,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WebKit::StorageNamespaceImpl::storageArea(WebCore::SecurityOrigin const&)::$_0>((uint64_t)v9, (uint64_t)v6, (uint64_t)v27);
  uint64_t v19 = *v4;
  if (*v4) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *v4;
  if (*v4) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
  if (3 * v24 <= 4 * v23) {
LABEL_23:
  }
    char v9 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v4, (WebCore::SecurityOriginData *)v9);
LABEL_8:
  uint64_t v14 = *((void *)v9 + 4);
  uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v15 + 8) = 1;
  *(void *)uint64_t v15 = &unk_1EE9F8F38;
  *(void *)(v15 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)uint64_t v15 = &unk_1EE9F8DB0;
  uint64_t result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v14 + 8), v14);
  unsigned int v17 = *(atomic_uint **)(v14 + 8);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  *(void *)(v15 + 24) = v17;
  ++*(void *)(v14 + 96);
  *a3 = v15;
  return result;
}

void WebKit::StorageNamespaceImpl::copy(WebKit::StorageNamespaceImpl *this@<X0>, WebCore::Page *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void **)(*((void *)a2 + 6) + 16);
  if (((*(uint64_t (**)(void *))(*v5 + 1368))(v5) & 1) != 0 || (uint64_t v6 = *(void *)(v5[2] + 8)) == 0)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = (void *)(v6 - 16);
    CFRetain(*(CFTypeRef *)(v6 - 8));
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x48);
  uint64_t v9 = v7[265];
  if (v9 == -1)
  {
    __break(0xC471u);
  }
  else
  {
    char v10 = (atomic_uint *)*((void *)this + 4);
    int v11 = *((_DWORD *)this + 10);
    char v12 = *((unsigned char *)this + 12);
    uint64_t v13 = v7[5];
    *(_DWORD *)(v8 + 8) = 1;
    *(void *)uint64_t v8 = &unk_1EE9F8E70;
    *(unsigned char *)(v8 + 12) = v12;
    *(void *)(v8 + 16) = v13;
    *(unsigned char *)(v8 + 24) = 1;
    if (v10) {
      atomic_fetch_add(v10, 1u);
    }
    *(void *)(v8 + 32) = v10;
    *(_DWORD *)(v8 + 40) = v11;
    *(void *)(v8 + 48) = v9;
    *(void *)(v8 + 56) = 1;
    *(void *)(v8 + 64) = 0;
    *a3 = v8;
    uint64_t v14 = (const void *)v7[1];
    CFRelease(v14);
  }
}

uint64_t *WebKit::WebStorageNamespaceProvider::decrementUseCount(uint64_t *result)
{
  uint64_t v6 = result;
  {
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = 0;
    return result;
  }
  if (WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider)
  {
    uint64_t v1 = *(void *)(WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider + 8);
    if (v1)
    {
      uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 48), &v6);
      int v2 = *((_DWORD *)result + 2) - 1;
      *((_DWORD *)result + 2) = v2;
      if (!v2)
      {
        if (WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider) {
          uint64_t v3 = *(void *)(WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider + 8);
        }
        else {
          uint64_t v3 = 0;
        }
        uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 48), &v6);
        uint64_t v4 = *(void *)(v3 + 48);
        if (v4)
        {
          uint64_t v5 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
          if (v5 == result) {
            return result;
          }
        }
        else
        {
          if (!result) {
            return result;
          }
          uint64_t v5 = 0;
        }
        if (v5 != result) {
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove((uint64_t *)(v3 + 48), result);
        }
      }
    }
  }
  return result;
}

void WebKit::WebStorageNamespaceProvider::~WebStorageNamespaceProvider(WebKit::WebStorageNamespaceProvider *this, void *a2)
{
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)(v3 + 16);
      do
      {
        if (*(v5 - 2) != -1 && *v5) {
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(*v5, a2);
        }
        v5 += 3;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    *(void *)(v6 + 8) = 0;
    int v7 = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }

  MEMORY[0x1F4171350](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebStorageNamespaceProvider::~WebStorageNamespaceProvider(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebStorageNamespaceProvider::createLocalStorageNamespace@<X0>(int a1@<W1>, WebKit::StorageNamespaceImpl *a2@<X8>)
{
  return WebKit::StorageNamespaceImpl::createLocalStorageNamespace(a2, a1);
}

uint64_t WebKit::WebStorageNamespaceProvider::createTransientLocalStorageNamespace@<X0>(atomic_uint *a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t result = &unk_1EE9F8E70;
  *(unsigned char *)(result + 12) = 2;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  atomic_fetch_add(a1, 1u);
  *(void *)(result + 32) = a1;
  *(_DWORD *)(result + 40) = a2;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *a3 = result;
  return result;
}

void WebKit::WebStorageNamespaceProvider::sessionStorageNamespace(uint64_t a1@<X0>, atomic_uint *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, atomic_uint *a5@<X8>)
{
  uint64_t v9 = *(void **)(*(void *)(a3 + 48) + 16);
  if (((*(uint64_t (**)(void *))(*v9 + 1368))(v9) & 1) != 0 || (uint64_t v10 = *(void *)(v9[2] + 8)) == 0)
  {
    *(void *)a5 = 0;
    return;
  }
  CFRetain(*(CFTypeRef *)(v10 - 8));
  if (*(void *)(v10 + 2104) == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x199211D84);
  }
  int v11 = (uint64_t *)(a1 + 48);
  uint64_t v72 = *(void *)(v10 + 2104);
  char v12 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 48), &v72);
  uint64_t v14 = v12;
  uint64_t v15 = *(void *)(a1 + 48);
  if (v15) {
    unsigned int v16 = (uint64_t *)(v15 + 24 * *(unsigned int *)(v15 - 4));
  }
  else {
    unsigned int v16 = 0;
  }
  if (v16 == v12)
  {
    if (!a4) {
      goto LABEL_48;
    }
    uint64_t v38 = *(void *)(v10 + 2104);
    if (v38 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x199211DC4);
    }
    if (v15
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 48), 0), (uint64_t v15 = *v11) != 0))
    {
      int v39 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      int v39 = 0;
    }
    unint64_t v40 = (v38 + ~(v38 << 32)) ^ ((unint64_t)(v38 + ~(v38 << 32)) >> 22);
    unint64_t v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
    unint64_t v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
    unsigned int v43 = v39 & ((v42 >> 31) ^ v42);
    uint64_t v14 = (uint64_t *)(v15 + 24 * v43);
    uint64_t v44 = *v14;
    if (*v14)
    {
      uint64_t v45 = 0;
      int v46 = 1;
      while (v44 != v38)
      {
        if (v44 == -1) {
          uint64_t v45 = v14;
        }
        unsigned int v43 = (v43 + v46) & v39;
        uint64_t v14 = (uint64_t *)(v15 + 24 * v43);
        uint64_t v44 = *v14;
        ++v46;
        if (!*v14)
        {
          if (v45)
          {
            uint64_t *v45 = 0;
            v45[1] = 0;
            v45[2] = 0;
            --*(_DWORD *)(*v11 - 16);
            uint64_t v14 = v45;
          }
          goto LABEL_44;
        }
      }
      *((_DWORD *)v14 + 2) = 0;
      uint64_t v61 = v14[2];
      uint64_t v14[2] = 0;
      if (v61) {
        WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v61, v13);
      }
      goto LABEL_9;
    }
LABEL_44:
    *uint64_t v14 = v38;
    *((_DWORD *)v14 + 2) = 0;
    uint64_t v47 = v14[2];
    uint64_t v14[2] = 0;
    if (v47) {
      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v47, v13);
    }
    uint64_t v48 = *v11;
    if (*v11) {
      int v49 = *(_DWORD *)(v48 - 12) + 1;
    }
    else {
      int v49 = 1;
    }
    *(_DWORD *)(v48 - 12) = v49;
    uint64_t v64 = *v11;
    if (*v11) {
      int v65 = *(_DWORD *)(v64 - 12);
    }
    else {
      int v65 = 0;
    }
    uint64_t v66 = (*(_DWORD *)(v64 - 16) + v65);
    unint64_t v67 = *(unsigned int *)(v64 - 4);
    if (v67 > 0x400)
    {
      if (v67 > 2 * v66) {
        goto LABEL_9;
      }
    }
    else if (3 * v67 > 4 * v66)
    {
      goto LABEL_9;
    }
    uint64_t v14 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 48), v14);
  }
LABEL_9:
  uint64_t v19 = v14[2];
  unsigned int v17 = v14 + 2;
  uint64_t v18 = v19;
  uint64_t v20 = (uint64_t)(a2 + 2);
  if (!v19) {
    goto LABEL_15;
  }
  int v69 = a4;
  uint64_t v70 = a1;
  uint64_t v71 = a2;
  uint64_t v21 = v10;
  uint64_t v22 = (uint64_t)a5;
  int v23 = *(_DWORD *)(v18 - 8);
  LODWORD(v72) = -1640531527;
  WORD2(v72) = 0;
  BYTE6(v72) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v72, v20);
  unsigned int v24 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v72) & v23;
  char v25 = (unsigned int *)(v18 + 40 * v24);
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v25);
  if (v26)
  {
LABEL_11:
    uint64_t v27 = *v17;
    a5 = (atomic_uint *)v22;
    uint64_t v10 = v21;
    a1 = v70;
    a2 = v71;
    if (*v17)
    {
      char v25 = (unsigned int *)(v27 + 40 * *(unsigned int *)(v27 - 4));
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  int v51 = 1;
  while (1)
  {
    unsigned int v52 = v25[6];
    if (v52) {
      break;
    }
    if (*(void *)v25 != -1) {
      goto LABEL_52;
    }
LABEL_53:
    unsigned int v24 = (v24 + v51) & v23;
    char v25 = (unsigned int *)(v18 + 40 * v24);
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v25);
    ++v51;
    if (v53) {
      goto LABEL_11;
    }
  }
  if (v52 == 1)
  {
LABEL_52:
    if (WebCore::operator==()) {
      goto LABEL_57;
    }
    goto LABEL_53;
  }
  while (2)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_57:
    uint64_t v27 = *v17;
    if (*v17)
    {
      a5 = (atomic_uint *)v22;
      uint64_t v10 = v21;
      a1 = v70;
      a2 = v71;
      a4 = v69;
LABEL_13:
      v27 += 40 * *(unsigned int *)(v27 - 4);
    }
    else
    {
      a5 = (atomic_uint *)v22;
      uint64_t v10 = v21;
      a1 = v70;
      a2 = v71;
      a4 = v69;
    }
    if ((unsigned int *)v27 != v25) {
      goto LABEL_90;
    }
LABEL_15:
    if (a4)
    {
      uint64_t v28 = *(void *)(v10 + 2104);
      if (v28 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x199211DA4);
      }
      uint64_t v29 = *(void *)(v10 + 24);
      int v30 = *(_DWORD *)(a1 + 32);
      uint64_t v21 = WTF::fastMalloc((WTF *)0x48);
      *(_DWORD *)(v21 + 8) = 1;
      *(void *)uint64_t v21 = &unk_1EE9F8E70;
      *(unsigned char *)(v21 + 12) = 0;
      *(void *)(v21 + 16) = v29;
      *(unsigned char *)(v21 + 24) = 1;
      atomic_fetch_add(a2, 1u);
      *(void *)(v21 + 32) = a2;
      *(_DWORD *)(v21 + 40) = v30;
      *(void *)(v21 + 48) = v28;
      *(void *)(v21 + 56) = 1;
      *(void *)(v21 + 64) = 0;
      uint64_t v22 = *v17;
      uint64_t v68 = v10;
      if (*v17
        || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v17, 0), (uint64_t v22 = *v17) != 0))
      {
        unsigned int v31 = *(_DWORD *)(v22 - 8);
      }
      else
      {
        unsigned int v31 = 0;
      }
      LODWORD(v72) = -1640531527;
      WORD2(v72) = 0;
      BYTE6(v72) = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v72, v20);
      uint64_t v32 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v72) & v31;
      char v25 = (unsigned int *)(v22 + 40 * v32);
      WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v25);
      if ((v33 & 1) == 0)
      {
        uint64_t v71 = a5;
        uint64_t v34 = 0;
        int v35 = 1;
        while (1)
        {
          unsigned int v36 = v25[6];
          if (v36) {
            break;
          }
          if (*(void *)v25 != -1) {
            goto LABEL_24;
          }
          uint64_t v34 = v25;
LABEL_27:
          uint64_t v32 = (v32 + v35) & v31;
          char v25 = (unsigned int *)(v22 + 40 * v32);
          WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v25);
          ++v35;
          if (v37)
          {
            a5 = v71;
            if (v34)
            {
              *((void *)v34 + 4) = 0;
              *(_OWORD *)uint64_t v34 = 0u;
              *((_OWORD *)v34 + 1) = 0u;
              --*(_DWORD *)(*v17 - 16);
              char v25 = v34;
            }
            goto LABEL_61;
          }
        }
        if (v36 != 1) {
          continue;
        }
LABEL_24:
        if (WebCore::operator==())
        {
          uint64_t v62 = v22 + 40 * v32;
          long long v63 = *(_DWORD **)(v62 + 32);
          *(void *)(v62 + 32) = v21;
          if (v63)
          {
            a5 = v71;
            uint64_t v10 = v68;
            if (v63[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v63 + 8))(v63);
            }
            else {
              --v63[2];
            }
          }
          else
          {
            a5 = v71;
            uint64_t v10 = v68;
          }
          goto LABEL_90;
        }
        goto LABEL_27;
      }
LABEL_61:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v25, v20);
      uint64_t v54 = (_DWORD *)*((void *)v25 + 4);
      *((void *)v25 + 4) = v21;
      uint64_t v10 = v68;
      if (v54)
      {
        if (v54[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v54 + 8))(v54);
        }
        else {
          --v54[2];
        }
      }
      uint64_t v55 = *v17;
      if (*v17) {
        int v56 = *(_DWORD *)(v55 - 12) + 1;
      }
      else {
        int v56 = 1;
      }
      *(_DWORD *)(v55 - 12) = v56;
      uint64_t v57 = *v17;
      if (*v17) {
        int v58 = *(_DWORD *)(v57 - 12);
      }
      else {
        int v58 = 0;
      }
      uint64_t v59 = (*(_DWORD *)(v57 - 16) + v58);
      unint64_t v60 = *(unsigned int *)(v57 - 4);
      if (v60 > 0x400)
      {
        if (v60 > 2 * v59)
        {
LABEL_90:
          uint64_t v50 = *((void *)v25 + 4);
          if (v50) {
            ++*(_DWORD *)(v50 + 8);
          }
          goto LABEL_92;
        }
      }
      else if (3 * v60 > 4 * v59)
      {
        goto LABEL_90;
      }
      char v25 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v17, (uint64_t)v25);
      goto LABEL_90;
    }
    break;
  }
LABEL_48:
  uint64_t v50 = 0;
LABEL_92:
  *(void *)a5 = v50;
  CFRelease(*(CFTypeRef *)(v10 - 8));
}

void WebKit::RemoteCaptureSampleManager::~RemoteCaptureSampleManager(WebKit::RemoteCaptureSampleManager *this, void *a2)
{
  *(void *)this = &unk_1EE9F8F00;
  uint64_t v3 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(v4 + 8);
      do
      {
        if (*(v6 - 1) != -1)
        {
          uint64_t v7 = *v6;
          *uint64_t v6 = 0;
          if (v7) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v7 + 312));
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 6);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    if (v9)
    {
      uint64_t v10 = (WebKit::RemoteCaptureSampleManager::RemoteAudio **)(v8 + 8);
      do
      {
        if (*(v10 - 1) != (WebKit::RemoteCaptureSampleManager::RemoteAudio *)-1) {
          std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100](v10, 0);
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  int v11 = (atomic_uchar *volatile *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v11)
  {
    char v12 = 0;
    atomic_uchar *volatile v13 = *v11;
    atomic_compare_exchange_strong_explicit(*v11, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12) {
      MEMORY[0x19972E8D0](v13);
    }
    uint64_t v14 = *((void *)v13 + 1);
    uint64_t v15 = v14 - 1;
    *((void *)v13 + 1) = v14 - 1;
    if (v14 == 1)
    {
      uint64_t v21 = *((void *)v13 + 2);
      uint64_t v17 = *((void *)v13 + 3);
      *((void *)v13 + 3) = 0;
      BOOL v16 = v21 == 0;
    }
    else
    {
      BOOL v16 = 0;
      uint64_t v17 = 0;
    }
    int v18 = 1;
    atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
    if (v18 == 1)
    {
      if (v15) {
        goto LABEL_27;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (v15) {
        goto LABEL_27;
      }
    }
    uint64_t v19 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v19 = &unk_1EE9B37E8;
    *(void *)(v19 + 8) = v13;
    *(void *)(v19 + 16) = v17;
    *(unsigned char *)(v19 + 24) = v16;
    uint64_t v22 = v19;
    WTF::ensureOnMainRunLoop();
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
LABEL_27:
  uint64_t v20 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 56))(v20);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteCaptureSampleManager::~RemoteCaptureSampleManager(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::RemoteCaptureSampleManager::stopListeningForIPC(WebKit::RemoteCaptureSampleManager *this)
{
  if (*((unsigned char *)this + 24))
  {
    {
      atomic_uchar *volatile v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v13);
    }
    IPC::Connection::removeWorkQueueMessageReceiver(*(void *)(WebKit::WebProcess::singleton(void)::process + 40), 0x46u, 0);
  }
  uint64_t v14 = 0;
  WebKit::RemoteCaptureSampleManager::setConnection((uint64_t)this, (uint64_t *)&v14);
  int v2 = v14;
  uint64_t v14 = 0;
  if (v2)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v2;
    atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = v5 - 1;
    *((void *)v4 + 1) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v12 = *((void *)v4 + 2);
      uint64_t v8 = *((void *)v4 + 3);
      *((void *)v4 + 3) = 0;
      BOOL v7 = v12 == 0;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v8 = 0;
    }
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v6) {
        return;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v6) {
        return;
      }
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v10 = &unk_1EE9B37E8;
    *(void *)(v10 + 8) = v4;
    *(void *)(v10 + 16) = v8;
    *(unsigned char *)(v10 + 24) = v7;
    uint64_t v15 = v10;
    WTF::ensureOnMainRunLoop();
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
}

void WebKit::RemoteCaptureSampleManager::setConnection(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 40) == *a2) {
    return;
  }
  {
    char v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v26);
  }
  atomic_uchar *volatile v4 = *(atomic_uchar *volatile **)(WebKit::WebProcess::singleton(void)::process + 40);
  if (v4) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(atomic_uchar *volatile **)(WebKit::WebProcess::singleton(void)::process + 40));
  }
  uint64_t v5 = *a2;
  if ((atomic_uchar *volatile *)*a2 != v4)
  {
    if (*(void *)(a1 + 40))
    {
      IPC::Connection::removeWorkQueueMessageReceiver(*(void *)(a1 + 40), 0x46u, 0);
      uint64_t v5 = *a2;
    }
    *a2 = 0;
    uint64_t v6 = *(atomic_uchar *volatile **)(a1 + 40);
    *(void *)(a1 + 40) = v5;
    if (!v6)
    {
LABEL_18:
      if (v5)
      {
        uint64_t v15 = *(void *)(a1 + 32);
LABEL_22:
        IPC::Connection::addWorkQueueMessageReceiver(v5, 0x46u, v15, a1, 0);
        goto LABEL_23;
      }
      goto LABEL_23;
    }
    char v7 = 0;
    atomic_uchar *volatile v8 = *v6;
    atomic_compare_exchange_strong_explicit(*v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v10 = v9 - 1;
    *((void *)v8 + 1) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v25 = *((void *)v8 + 2);
      uint64_t v12 = *((void *)v8 + 3);
      *((void *)v8 + 3) = 0;
      BOOL v11 = v25 == 0;
    }
    else
    {
      BOOL v11 = 0;
      uint64_t v12 = 0;
    }
    int v13 = 1;
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1)
    {
      if (!v10) {
        goto LABEL_15;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (!v10)
      {
LABEL_15:
        uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v14 = &unk_1EE9B37E8;
        *(void *)(v14 + 8) = v8;
        *(void *)(v14 + 16) = v12;
        *(unsigned char *)(v14 + 24) = v11;
        uint64_t v27 = v14;
        WTF::ensureOnMainRunLoop();
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
      }
    }
    uint64_t v5 = *(void *)(a1 + 40);
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 1;
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v5 = (uint64_t)v4;
    goto LABEL_22;
  }
LABEL_23:
  if (!v4) {
    return;
  }
  char v16 = 0;
  atomic_uchar *volatile v17 = *v4;
  atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
  if (v16) {
    MEMORY[0x19972E8D0](v17);
  }
  uint64_t v18 = *((void *)v17 + 1);
  uint64_t v19 = v18 - 1;
  *((void *)v17 + 1) = v18 - 1;
  if (v18 == 1)
  {
    uint64_t v24 = *((void *)v17 + 2);
    uint64_t v21 = *((void *)v17 + 3);
    *((void *)v17 + 3) = 0;
    BOOL v20 = v24 == 0;
  }
  else
  {
    BOOL v20 = 0;
    uint64_t v21 = 0;
  }
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 == 1)
  {
    if (v19) {
      return;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v19) {
      return;
    }
  }
  uint64_t v23 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v23 = &unk_1EE9B37E8;
  *(void *)(v23 + 8) = v17;
  *(void *)(v23 + 16) = v21;
  *(unsigned char *)(v23 + 24) = v20;
  uint64_t v28 = v23;
  WTF::ensureOnMainRunLoop();
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
}

uint64_t WebKit::RemoteCaptureSampleManager::addSource(uint64_t a1, uint64_t *a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, *(atomic_uchar *volatile **)(*a2 + 328));
  atomic_uchar *volatile v4 = v20;
  BOOL v20 = 0;
  uint64_t v21 = v4;
  WebKit::RemoteCaptureSampleManager::setConnection(a1, (uint64_t *)&v21);
  uint64_t v5 = v21;
  uint64_t v21 = 0;
  if (!v5) {
    goto LABEL_10;
  }
  char v6 = 0;
  atomic_uchar *volatile v7 = *v5;
  atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](v7);
  }
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t v9 = v8 - 1;
  *((void *)v7 + 1) = v8 - 1;
  if (v8 == 1)
  {
    uint64_t v19 = *((void *)v7 + 2);
    uint64_t v11 = *((void *)v7 + 3);
    *((void *)v7 + 3) = 0;
    BOOL v10 = v19 == 0;
  }
  else
  {
    BOOL v10 = 0;
    uint64_t v11 = 0;
  }
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 == 1)
  {
    if (v9) {
      goto LABEL_10;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v9) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v13 = &unk_1EE9B37E8;
  *(void *)(v13 + 8) = v7;
  *(void *)(v13 + 16) = v11;
  *(unsigned char *)(v13 + 24) = v10;
  int v22 = (void *)v13;
  WTF::ensureOnMainRunLoop();
  uint64_t v14 = v22;
  int v22 = 0;
  if (v14) {
    (*(void (**)(void *))(*v14 + 8))(v14);
  }
LABEL_10:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
  uint64_t v15 = *(void *)(a1 + 32);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v16 = *a2;
  *a2 = 0;
  atomic_uchar *volatile v17 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v17 = &unk_1EE9F90E0;
  v17[1] = a1;
  v17[2] = a1;
  v17[3] = v16;
  int v22 = v17;
  (*(void (**)(uint64_t, void **))(*(void *)v15 + 32))(v15, &v22);
  uint64_t result = (uint64_t)v22;
  int v22 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

{
  atomic_uchar *volatile *v4;
  atomic_uchar *volatile *v5;
  char v6;
  atomic_uchar *volatile v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  uint64_t v19;
  atomic_uchar *volatile *v20;
  atomic_uchar *volatile *v21;
  void *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, *(atomic_uchar *volatile **)(*a2 + 328));
  atomic_uchar *volatile v4 = v20;
  BOOL v20 = 0;
  uint64_t v21 = v4;
  WebKit::RemoteCaptureSampleManager::setConnection(a1, (uint64_t *)&v21);
  uint64_t v5 = v21;
  uint64_t v21 = 0;
  if (!v5) {
    goto LABEL_10;
  }
  char v6 = 0;
  atomic_uchar *volatile v7 = *v5;
  atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](v7);
  }
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t v9 = v8 - 1;
  *((void *)v7 + 1) = v8 - 1;
  if (v8 == 1)
  {
    uint64_t v19 = *((void *)v7 + 2);
    uint64_t v11 = *((void *)v7 + 3);
    *((void *)v7 + 3) = 0;
    BOOL v10 = v19 == 0;
  }
  else
  {
    BOOL v10 = 0;
    uint64_t v11 = 0;
  }
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 == 1)
  {
    if (v9) {
      goto LABEL_10;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v9) {
      goto LABEL_10;
    }
  }
  uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v13 = &unk_1EE9B37E8;
  *(void *)(v13 + 8) = v7;
  *(void *)(v13 + 16) = v11;
  *(unsigned char *)(v13 + 24) = v10;
  int v22 = (void *)v13;
  WTF::ensureOnMainRunLoop();
  uint64_t v14 = v22;
  int v22 = 0;
  if (v14) {
    (*(void (**)(void *))(*v14 + 8))(v14);
  }
LABEL_10:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
  uint64_t v15 = *(void *)(a1 + 32);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v16 = *a2;
  *a2 = 0;
  atomic_uchar *volatile v17 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v17 = &unk_1EE9F9108;
  v17[1] = a1;
  v17[2] = a1;
  v17[3] = v16;
  int v22 = v17;
  (*(void (**)(uint64_t, void **))(*(void *)v15 + 32))(v15, &v22);
  uint64_t result = (uint64_t)v22;
  int v22 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteCaptureSampleManager::removeSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9F9130;
  v5[1] = a1;
  void v5[2] = a1;
  v5[3] = a2;
  atomic_uchar *volatile v7 = v5;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &v7);
  uint64_t result = (uint64_t)v7;
  atomic_uchar *volatile v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::RemoteCaptureSampleManager::didUpdateSourceConnection(WebKit::RemoteCaptureSampleManager *this, atomic_uchar *volatile *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
  uint64_t v15 = a2;
  WebKit::RemoteCaptureSampleManager::setConnection((uint64_t)this, (uint64_t *)&v15);
  uint64_t v4 = v15;
  uint64_t v15 = 0;
  if (v4)
  {
    char v5 = 0;
    atomic_uchar *volatile v6 = *v4;
    atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    uint64_t v7 = *((void *)v6 + 1);
    uint64_t v8 = v7 - 1;
    *((void *)v6 + 1) = v7 - 1;
    if (v7 == 1)
    {
      uint64_t v14 = *((void *)v6 + 2);
      uint64_t v10 = *((void *)v6 + 3);
      *((void *)v6 + 3) = 0;
      BOOL v9 = v14 == 0;
    }
    else
    {
      BOOL v9 = 0;
      uint64_t v10 = 0;
    }
    int v11 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 == 1)
    {
      if (v8) {
        return;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (v8) {
        return;
      }
    }
    uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v12 = &unk_1EE9B37E8;
    *(void *)(v12 + 8) = v6;
    *(void *)(v12 + 16) = v10;
    *(unsigned char *)(v12 + 24) = v9;
    uint64_t v16 = v12;
    WTF::ensureOnMainRunLoop();
    uint64_t v13 = v16;
    uint64_t v16 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
}

unsigned int *WebKit::RemoteCaptureSampleManager::setVideoFrameObjectHeapProxy(uint64_t a1, uint64_t *a2)
{
  char v4 = 0;
  char v5 = (atomic_uchar *)(a1 + 64);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 64), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 64);
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t result = *(unsigned int **)(a1 + 72);
  *(void *)(a1 + 72) = v6;
  if (result) {
    uint64_t result = WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(result);
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1)
  {
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

void WebKit::RemoteCaptureSampleManager::audioStorageChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, IPC::Semaphore *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v12, a2);
  if (v12) {
    uint64_t v14 = v12 + 16 * *(unsigned int *)(v12 - 4);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 == v13)
  {
    int v22 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_error_impl(&dword_1985F2000, v22, OS_LOG_TYPE_ERROR, "Unable to find source %llu for storageChanged", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v15 = *(void *)(v13 + 8);
    WebKit::RemoteCaptureSampleManager::RemoteAudio::stopThread((unsigned int *)v15);
    std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(v15 + 96), 0);
    WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)a4, (WebCore::CARingBuffer **)buf);
    uint64_t v16 = *(WebCore::CARingBuffer **)(v15 + 104);
    uint64_t v17 = *(void *)buf;
    *(void *)buf = 0;
    *(void *)(v15 + 104) = v17;
    if (v16)
    {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v15 + 104, v16);
      uint64_t v18 = *(WebCore::CARingBuffer **)buf;
      *(void *)buf = 0;
      if (v18) {
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)buf, v18);
      }
      uint64_t v17 = *(void *)(v15 + 104);
    }
    if (v17)
    {
      IPC::Semaphore::operator=((IPC::Semaphore *)(v15 + 144), a5);
      if (*(unsigned char *)(v15 + 88))
      {
        long long v19 = *(_OWORD *)(a4 + 8);
        long long v20 = *(_OWORD *)(a4 + 24);
        *(void *)(v15 + 48) = *(void *)(a4 + 40);
        *(_OWORD *)(v15 + 16) = v19;
        *(_OWORD *)(v15 + 32) = v20;
        long long v21 = *(_OWORD *)(a4 + 48);
        *(void *)(v15 + 72) = *(void *)(a4 + 64);
        *(_OWORD *)(v15 + 56) = v21;
        *(_DWORD *)(v15 + 80) = *(_DWORD *)(a4 + 72);
      }
      else
      {
        *(void *)(v15 + 8) = MEMORY[0x1E4FB6B98] + 16;
        *(_OWORD *)(v15 + 16) = *(_OWORD *)(a4 + 8);
        long long v23 = *(_OWORD *)(a4 + 24);
        long long v24 = *(_OWORD *)(a4 + 40);
        long long v25 = *(_OWORD *)(a4 + 56);
        *(_DWORD *)(v15 + 80) = *(_DWORD *)(a4 + 72);
        *(_OWORD *)(v15 + 48) = v24;
        *(_OWORD *)(v15 + 64) = v25;
        *(_OWORD *)(v15 + 32) = v23;
        *(unsigned char *)(v15 + 88) = 1;
      }
      uint64_t v26 = *a6;
      *(void *)(v15 + 125) = *(uint64_t *)((char *)a6 + 5);
      *(void *)(v15 + 120) = v26;
      *(void *)(v15 + 136) = a7;
      uint64_t v27 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
      WebCore::WebAudioBufferList::WebAudioBufferList();
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(v15 + 96), v27);
      atomic_store(0, (unsigned __int8 *)(v15 + 160));
      uint64_t v28 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v28 = &unk_1EE9F9158;
      v28[1] = v15;
      uint64_t v32 = v28;
      WTF::Thread::create();
      uint64_t v29 = *(void *)buf;
      *(void *)buf = 0;
      int v30 = *(unsigned int **)(v15 + 152);
      *(void *)(v15 + 152) = v29;
      if (v30)
      {
        WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v30);
        unsigned int v31 = *(unsigned int **)buf;
        *(void *)buf = 0;
        if (v31) {
          WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v31);
        }
      }
      if (v32) {
        (*(void (**)(void *))(*v32 + 8))(v32);
      }
    }
  }
}

void WebKit::RemoteCaptureSampleManager::videoFrameAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (atomic_uchar *)(a1 + 64);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 64), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](a1 + 64);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)buf, *(atomic_uchar *volatile **)(a1 + 40));
  BOOL v9 = *(atomic_uchar *volatile **)buf;
  uint64_t v10 = *(atomic_uint **)(a1 + 72);
  atomic_fetch_add(v10, 1u);
  uint64_t v11 = WTF::fastMalloc((WTF *)0x88);
  WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(v11, v9, v10, a3);
  WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v10);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v12, a2);
  if (v12) {
    uint64_t v14 = v12 + 16 * *(unsigned int *)(v12 - 4);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 == v13)
  {
    uint64_t v15 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_error_impl(&dword_1985F2000, v15, OS_LOG_TYPE_ERROR, "Unable to find source %llu for videoFrameAvailable", buf, 0xCu);
    }
  }
  else
  {
    WebKit::RemoteRealtimeVideoSource::remoteVideoFrameAvailable(*(void *)(v13 + 8), (_OWORD *)v11);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v11 + 8));
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
}

void WebKit::RemoteCaptureSampleManager::videoFrameAvailableCV(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, a2);
  uint64_t v5 = v4;
  if (v3) {
    uint64_t v6 = v3 + 16 * *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 == v4)
  {
    uint64_t v7 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = a2;
      _os_log_error_impl(&dword_1985F2000, v7, OS_LOG_TYPE_ERROR, "Unable to find source %llu for videoFrameAvailableCV", buf, 0xCu);
    }
  }
  else
  {
    buf[0] = 0;
    BYTE4(v10) = 0;
    WebCore::VideoFrameCV::create();
    WebKit::RemoteRealtimeVideoSource::remoteVideoFrameAvailable(*(void *)(v5 + 8), (_OWORD *)v8);
    if (v8)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v8 + 8));
        (*(void (**)())(*(void *)v8 + 8))();
      }
    }
  }
}

void WebKit::RemoteCaptureSampleManager::RemoteAudio::~RemoteAudio(WebKit::RemoteCaptureSampleManager::RemoteAudio *this)
{
  WebKit::RemoteCaptureSampleManager::RemoteAudio::stopThread((unsigned int *)this);
  int v2 = (unsigned int *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v2);
  }
  IPC::Semaphore::destroy((WebKit::RemoteCaptureSampleManager::RemoteAudio *)((char *)this + 144));
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteCaptureSampleManager::RemoteAudio *)((char *)this + 144));
  uint64_t v3 = (WebCore::CARingBuffer *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 104, v3);
  }
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)this + 12, 0);
  if (*((unsigned char *)this + 88)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::RemoteCaptureSampleManager::RemoteAudio *)((char *)this + 8));
  }
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v4 + 312));
  }
}

unsigned int *WebKit::RemoteCaptureSampleManager::RemoteAudio::stopThread(unsigned int *this)
{
  if (*((void *)this + 19))
  {
    uint64_t v1 = this;
    atomic_store(1u, (unsigned __int8 *)this + 160);
    MEMORY[0x1997420B0](this[37]);
    WTF::Thread::waitForCompletion(*((WTF::Thread **)v1 + 19));
    this = (unsigned int *)*((void *)v1 + 19);
    *((void *)v1 + 19) = 0;
    if (this)
    {
      return WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(this);
    }
  }
  return this;
}

uint64_t WebKit::StorageNamespaceImpl::storageAreaMapCountForTesting(WebKit::StorageNamespaceImpl *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (v1) {
    return *(unsigned int *)(v1 - 12);
  }
  else {
    return 0;
  }
}

void WebCore::StorageNamespaceProvider::cloneSessionStorageNamespaceForPage()
{
}

uint64_t std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100](WTF::StringImpl ****this, WTF::StringImpl *a2)
{
  uint64_t v3 = *this;
  *this = 0;
  if (v3) {
    WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v3, a2);
  }

  return WTF::fastFree((WTF *)this, a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages21NetworkStorageManager24ConnectToStorageAreaSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)*((void *)a2 + 2);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>::~KeyValuePair(uint64_t a1)
{
  std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100]((unsigned int ***)(a1 + 32), 0);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9F8FB0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

unsigned int **std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100](unsigned int ***a1, unsigned int **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::StorageAreaMap::~StorageAreaMap(result);
    return (unsigned int **)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1; ; i += 40)
    {
      uint64_t v5 = *(unsigned int *)(i + 24);
      if (v5) {
        break;
      }
      if (*(void *)i != -1) {
        goto LABEL_5;
      }
LABEL_11:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    uint64_t v6 = *(_DWORD **)(i + 32);
    *(void *)(i + 32) = 0;
    if (v6)
    {
      if (v6[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
        uint64_t v5 = *(unsigned int *)(i + 24);
        if (v5 == -1) {
          goto LABEL_10;
        }
      }
      else
      {
        --v6[2];
      }
    }
    ((void (*)(char *, uint64_t))off_1EE9F8FB0[v5])(&v8, i);
LABEL_10:
    *(_DWORD *)(i + 24) = -1;
    goto LABEL_11;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9F9180;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + 16) = v6;
  *(unsigned char *)(v8 + 24) = v5;
  uint64_t v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

WebKit::RemoteCaptureSampleManager::RemoteAudio *std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100](WebKit::RemoteCaptureSampleManager::RemoteAudio **a1, WebKit::RemoteCaptureSampleManager::RemoteAudio *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteCaptureSampleManager::RemoteAudio::~RemoteAudio(result);
    return (WebKit::RemoteCaptureSampleManager::RemoteAudio *)WTF::fastFree(v4, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F8FE0;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F8FE0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v7, a2), v9))
  {
    if (!*(void *)v2
      || (uint64_t v5 = *(void *)(*(void *)v2 + 8)) == 0
      || (uint64_t result = (WTF::StringImpl **)WebKit::StorageAreaMap::didSetItem(v5, *(void *)(a1 + 16), (WTF::StringImpl **)(a1 + 24), v7[0] != 0), v9))
    {
      uint64_t result = v8;
      if (v8) {
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v4);
      }
    }
  }
  else
  {
    return (WTF::StringImpl **)IPC::Connection::cancelReply<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(v2);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(*(void *)result + 8);
    if (result)
    {
      WebKit::StorageAreaMap::didSetItem(result, *(void *)(v1 + 8), (WTF::StringImpl **)(v1 + 16), 0);
      return 0;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_7:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_8:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
    }
    goto LABEL_9;
  }
  uint64_t result = IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v18);
  if (v19)
  {
    *(void *)(a1 + 8) = v18;
    *(unsigned char *)a1 = v9 != 0;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
LABEL_9:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F9008;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F9008;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveItem,WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0>(WebKit::StorageAreaMap::removeItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2
    && *(void *)a2
    && (IPC::Decoder::decode<std::tuple<BOOL,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)v7, a2), v9))
  {
    if (!*(void *)v2
      || (uint64_t v5 = *(void *)(*(void *)v2 + 8)) == 0
      || (uint64_t result = (WTF::StringImpl **)WebKit::StorageAreaMap::didSetItem(v5, *(void *)(a1 + 16), (WTF::StringImpl **)(a1 + 24), v7[0] != 0), v9))
    {
      uint64_t result = v8;
      if (v8) {
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v4);
      }
    }
  }
  else
  {
    return (WTF::StringImpl **)IPC::Connection::cancelReply<Messages::NetworkStorageManager::SetItem,WebKit::StorageAreaMap::setItem(WebCore::LocalFrame &,WebKit::StorageAreaImpl *,WTF::String const&,WTF::String const&,BOOL &)::$_0>(v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Clear,WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0>(WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F9030;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Clear,WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0>(WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F9030;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Clear,WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0>(WebKit::StorageAreaMap::clear(WebCore::LocalFrame &,WebKit::StorageAreaImpl *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (*(void *)(v2 + 80) == *(void *)(result + 16)) {
        *(unsigned char *)(v2 + 104) = 0;
      }
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebKit::StorageAreaMap::dispatchSessionStorageEvent(std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&)::$_0,BOOL,WebCore::Storage &>::call(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a1 + 16) && *(void *)(*(void *)(a2 + 24) + 16) == *(void *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::StorageAreaMap::dispatchLocalStorageEvent(std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&)::$_0,BOOL,WebCore::Storage &>::call(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a1 + 16) && *(void *)(*(void *)(a2 + 24) + 16) == *(void *)(a1 + 8);
}

IPC::Encoder *IPC::ArgumentCoder<std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ClientOrigin const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ClientOrigin const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v5 = **(unsigned char **)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(a1, *(void *)(a2 + 16));
  return IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, *(void *)(a2 + 24));
}

unint64_t IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

WTF::StringImpl **IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    return (WTF::StringImpl **)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

WTF::StringImpl **IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = (WTF::StringImpl **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v6[0] = (uint64_t)result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (IPC::Decoder *)a2, v6);
  }
  *a1 = 0;
  a1[24] = 0;
  return result;
}

WTF::StringImpl **IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(unsigned char *a1, IPC::Decoder *a2, uint64_t *a3)
{
  uint64_t result = (WTF::StringImpl **)IPC::Decoder::decode<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v8);
  if (v9)
  {
    uint64_t result = (WTF::StringImpl **)IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t)a1, a2, a3, (uint64_t *)&v8);
    if (v9)
    {
      uint64_t result = v8;
      if (v8) {
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[24] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!v8)
  {
    char v11 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_5;
  }
  if (*((unsigned char *)a3 + 8) && *((unsigned char *)a4 + 8))
  {
    uint64_t v9 = *a3;
    uint64_t v10 = *a4;
    *a4 = 0;
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = result;
    char v11 = 1;
LABEL_5:
    *(unsigned char *)(a1 + 24) = v11;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Connection::makeAsyncReplyHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(uint64_t *a1, long long *a2)
{
  long long v5 = *a2;
  *((void *)a2 + 1) = 0;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v3 = &unk_1EE9F90B8;
  *(_OWORD *)(v3 + 8) = v5;
  *a1 = v3;
  uint64_t result = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  a1[1] = result;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F90B8;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F90B8;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  return IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1}::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t *IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1}::operator()(uint64_t *result, uint64_t *a2)
{
  if (a2 && *a2) {
    return (uint64_t *)IPC::Connection::callReply<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(a2, result);
  }
  uint64_t v2 = result[1];
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = *result;
    *(unsigned char *)(v3 + 105) = 0;
    if (!*(void *)(v3 + 24)) {
      *(void *)(v3 + 24) = 0;
    }
  }
  return result;
}

WTF::StringImpl **IPC::Connection::callReply<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>>(&v7, a1);
  if (v9)
  {
    uint64_t result = std::__invoke[abi:sn180100]<WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>(a2, v7, v8, (unint64_t)v8[1]);
    if (v9)
    {
      uint64_t result = v8[0];
      if (v8[0]) {
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8[0], v4);
      }
    }
  }
  else
  {
    uint64_t v5 = a2[1];
    if (v5)
    {
      if (*(void *)(v5 + 8))
      {
        uint64_t v6 = *a2;
        *(unsigned char *)(v6 + 105) = 0;
        if (!*(void *)(v6 + 24)) {
          *(void *)(v6 + 24) = 0;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl **std::__invoke[abi:sn180100]<WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>(uint64_t *a1, WTF::StringImpl *a2, WTF::StringImpl ***a3, unint64_t a4)
{
  uint64_t result = *a3;
  *a3 = 0;
  char v7 = result;
  uint64_t v6 = a1[1];
  if (v6 && *(void *)(v6 + 8))
  {
    WebKit::StorageAreaMap::didConnect(*a1, (uint64_t)a2, (uint64_t)&v7, a4);
    uint64_t result = v7;
  }
  if (result) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, WebCore::SecurityOriginData *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 40 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    uint64_t v16 = (WebCore::SecurityOriginData *)v6;
    while (1)
    {
      int v17 = *((_DWORD *)v16 + 6);
      if (v17) {
        break;
      }
      if (*(void *)v16 != -1) {
        goto LABEL_11;
      }
LABEL_15:
      uint64_t v16 = (WebCore::SecurityOriginData *)((char *)v16 + 40);
      if (!--v15) {
        goto LABEL_16;
      }
    }
    if (v17 != 1)
    {
      uint64_t v20 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::reinsert(v20, v21);
    }
LABEL_11:
    WebCore::SecurityOriginData::isNull(v16);
    if (v18)
    {
      WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>::~KeyValuePair((uint64_t)v16);
    }
    else
    {
      char v19 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::reinsert(*a1, (uint64_t)v16);
      WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>::~KeyValuePair((uint64_t)v16);
      if (v16 == a3) {
        uint64_t v13 = v19;
      }
    }
    goto LABEL_15;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::reinsert(uint64_t a1, uint64_t a2)
{
  if (a1) {
    int v4 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v4 = 0;
  }
  int v16 = -1640531527;
  __int16 v17 = 0;
  char v18 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v16, a2);
  unsigned int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
  int v6 = 0;
  do
  {
    unsigned int v7 = v5 & v4;
    int v8 = (unsigned int *)(a1 + 40 * (v5 & v4));
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v8);
    int v10 = v9;
    unsigned int v5 = ++v6 + v7;
  }
  while (!v10);
  uint64_t v11 = (unsigned int ***)(a1 + 40 * v7 + 32);
  std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100](v11, 0);
  uint64_t v12 = v8[6];
  if (v12 != -1) {
    ((void (*)(char *, unsigned int *))off_1EE9F8FB0[v12])(&v15, v8);
  }
  *(unsigned char *)int v8 = 0;
  v8[6] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v8, a2);
  uint64_t v13 = *(unsigned int ***)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *uint64_t v11 = v13;
  return v8;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, WebCore::SecurityOriginData *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v5, a2);
}

unsigned int **WTF::HashMapEnsureTranslator<WTF::HashMap<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<std::unique_ptr<WebKit::StorageAreaMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData const&,WTF::KeyValuePair<WebCore::SecurityOriginData,std::unique_ptr<WebKit::StorageAreaMap>>,WebKit::StorageNamespaceImpl::storageArea(WebCore::SecurityOrigin const&)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  std::make_unique[abi:sn180100]<WebKit::StorageAreaMap,WebKit::StorageNamespaceImpl &,WebCore::SecurityOrigin const&>((uint64_t *)&v7, *(void *)a3, *(atomic_uint **)(a3 + 8));
  unsigned int v5 = v7;

  return std::unique_ptr<WebKit::StorageAreaMap>::reset[abi:sn180100]((unsigned int ***)(a1 + 32), v5);
}

WTF *std::make_unique[abi:sn180100]<WebKit::StorageAreaMap,WebKit::StorageNamespaceImpl &,WebCore::SecurityOrigin const&>(uint64_t *a1, uint64_t a2, atomic_uint *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x70);
  atomic_fetch_add(a3, 1u);
  int v9 = (WTF *)a3;
  *a1 = WebKit::StorageAreaMap::StorageAreaMap(v6, a2, (uint64_t *)&v9);
  uint64_t result = v9;
  if (v9)
  {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v7);
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (a1) {
    int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v5 = 0;
  }
  unint64_t v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  int v10 = 1;
  do
  {
    unsigned int v11 = v9;
    uint64_t v12 = (void *)(a1 + 24 * v9);
    unsigned int v9 = (v9 + v10++) & v5;
  }
  while (*v12);
  unsigned int v13 = v11;
  uint64_t v14 = a1 + 24 * v11;
  uint64_t v17 = *(void *)(v14 + 16);
  int v16 = (void *)(v14 + 16);
  uint64_t v15 = v17;
  if (v17)
  {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v15, a2);
    uint64_t v4 = *a2;
  }
  void *v12 = v4;
  *(_DWORD *)(a1 + 24 * v13 + 8) = *((_DWORD *)a2 + 2);
  *int v16 = 0;
  uint64_t v18 = a2[2];
  a2[2] = 0;
  *int v16 = v18;
  return v12;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  uint64_t result = (void *)a2[2];
  if (result) {
    uint64_t result = (void *)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((uint64_t)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::WebStorageNamespaceProvider::SessionStorageNamespaces>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 40 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = v3;
    while (1)
    {
      uint64_t v13 = v2 + 40 * v10;
      int v14 = *(_DWORD *)(v13 + 24);
      if (v14) {
        break;
      }
      if (*(void *)v13 != -1) {
        goto LABEL_12;
      }
LABEL_39:
      if (++v10 == v12) {
        goto LABEL_44;
      }
    }
    if (v14 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_43;
    }
LABEL_12:
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 40 * v10));
    if (v15)
    {
      uint64_t v16 = v2 + 40 * v10;
      uint64_t v17 = *(_DWORD **)(v16 + 32);
      *(void *)(v16 + 32) = 0;
      if (v17)
      {
        if (v17[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
        }
        else {
          --v17[2];
        }
      }
      uint64_t v30 = *(unsigned int *)(v13 + 24);
      if (v30 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9F8FB0[v30])(&v40, v2 + 40 * v10);
      }
      *(_DWORD *)(v13 + 24) = -1;
    }
    else
    {
      uint64_t v18 = *a1;
      int v39 = v11;
      if (*a1) {
        int v19 = *(_DWORD *)(v18 - 8);
      }
      else {
        int v19 = 0;
      }
      int v43 = -1640531527;
      __int16 v44 = 0;
      char v45 = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v43, v2 + 40 * v10);
      unsigned int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v43);
      int v21 = 0;
      do
      {
        unsigned int v22 = v20 & v19;
        long long v23 = (unsigned int *)(v18 + 40 * (v20 & v19));
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v23);
        int v25 = v24;
        unsigned int v20 = ++v21 + v22;
      }
      while (!v25);
      uint64_t v26 = v18 + 40 * v22;
      uint64_t v29 = *(_DWORD **)(v26 + 32);
      uint64_t v28 = (void *)(v26 + 32);
      uint64_t v27 = v29;
      *uint64_t v28 = 0;
      if (v29)
      {
        if (v27[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
        }
        else {
          --v27[2];
        }
      }
      uint64_t v31 = v23[6];
      if (v31 != -1) {
        ((void (*)(char *, unsigned int *))off_1EE9F8FB0[v31])(&v41, v23);
      }
      *(unsigned char *)long long v23 = 0;
      v23[6] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, v2 + 40 * v10);
      uint64_t v32 = v2 + 40 * v10;
      uint64_t v33 = *(void *)(v32 + 32);
      *(void *)(v32 + 32) = 0;
      *uint64_t v28 = v33;
      uint64_t v34 = *(_DWORD **)(v32 + 32);
      *(void *)(v32 + 32) = 0;
      if (v34)
      {
        if (v34[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v34 + 8))(v34);
        }
        else {
          --v34[2];
        }
      }
      uint64_t v35 = *(unsigned int *)(v13 + 24);
      if (v35 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9F8FB0[v35])(&v42, v2 + 40 * v10);
      }
      *(_DWORD *)(v13 + 24) = -1;
      unsigned int v11 = v39;
      if (v13 == a2) {
        unsigned int v11 = v23;
      }
    }
    goto LABEL_39;
  }
LABEL_43:
  unsigned int v11 = 0;
  uint64_t result = 0;
  if (v2)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v11;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F90E0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v3 + 312));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F90E0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v3 + 312));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::RemoteCaptureSampleManager::RemoteAudio *WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 320);
  uint64_t v4 = WTF::fastMalloc((WTF *)0xA8);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  *(void *)uint64_t v4 = v5;
  *(unsigned char *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 88) = 0;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_DWORD *)(v4 + 128) = 10000000;
  *(unsigned char *)(v4 + 132) = 1;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)(v4 + 148), 0, 0);
  *(void *)(v4 + 152) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  uint64_t v8 = *(void *)(v2 + 48);
  unsigned int v7 = (uint64_t *)(v2 + 48);
  uint64_t v6 = v8;
  if (v8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v7),
        (uint64_t v6 = *v7) != 0))
  {
    int v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unint64_t v10 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  int v14 = (void *)(v6 + 16 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != v3)
    {
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v9;
      int v14 = (void *)(v6 + 16 * v13);
      uint64_t v15 = *v14;
      ++v17;
      if (!*v14)
      {
        if (v16)
        {
          *uint64_t v16 = 0;
          v16[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          int v14 = v16;
        }
        goto LABEL_12;
      }
    }
    WebKit::RemoteCaptureSampleManager::RemoteAudio::~RemoteAudio((WebKit::RemoteCaptureSampleManager::RemoteAudio *)v4);
    return (WebKit::RemoteCaptureSampleManager::RemoteAudio *)WTF::fastFree(v21, v22);
  }
  else
  {
LABEL_12:
    *int v14 = v3;
    uint64_t result = std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((WebKit::RemoteCaptureSampleManager::RemoteAudio **)v14 + 1, (WebKit::RemoteCaptureSampleManager::RemoteAudio *)v4);
    uint64_t v19 = *v7;
    if (*v7) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v23 = *v7;
    if (*v7) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25) {
        return result;
      }
    }
    else if (3 * v26 > 4 * v25)
    {
      return result;
    }
    return (WebKit::RemoteCaptureSampleManager::RemoteAudio *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v7);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v10 = (uint64_t *)(v4 + 16 * i);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 16 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((WebKit::RemoteCaptureSampleManager::RemoteAudio **)(v21 + 8), 0);
          *(void *)uint64_t v21 = *v10;
          uint64_t v22 = v4 + 16 * i;
          uint64_t v23 = *(void *)(v22 + 8);
          v22 += 8;
          *(void *)uint64_t v22 = 0;
          *(void *)(v21 + 8) = v23;
          std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((WebKit::RemoteCaptureSampleManager::RemoteAudio **)v22, 0);
        }
        else
        {
          std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((WebKit::RemoteCaptureSampleManager::RemoteAudio **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F9108;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v3 + 312));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F9108;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v3 + 312));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::addSource(WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(*(void *)(result + 24) + 320);
  uint64_t v6 = *(void *)(v2 + 56);
  int v5 = (uint64_t *)(v2 + 56);
  uint64_t v4 = v6;
  if (v6
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5),
        (uint64_t v4 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
  uint64_t v12 = (void *)(v4 + 16 * v11);
  uint64_t v13 = *v12;
  if (*v12)
  {
    unint64_t v14 = 0;
    int v15 = 1;
    while (v13 != v3)
    {
      if (v13 == -1) {
        unint64_t v14 = v12;
      }
      unsigned int v11 = (v11 + v15) & v7;
      uint64_t v12 = (void *)(v4 + 16 * v11);
      uint64_t v13 = *v12;
      ++v15;
      if (!*v12)
      {
        if (v14)
        {
          *unint64_t v14 = 0;
          v14[1] = 0;
          --*(_DWORD *)(*v5 - 16);
          uint64_t v12 = v14;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    void *v12 = v3;
    uint64_t v16 = *(void *)(v1 + 24);
    *(void *)(v1 + 24) = 0;
    uint64_t v17 = v12[1];
    v12[1] = v16;
    if (v17) {
      uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v17 + 312));
    }
    uint64_t v18 = *v5;
    if (*v5) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *v5;
    if (*v5) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        return result;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          unint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v24 + 312));
          }
          *unint64_t v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v13 + 312));
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::removeSource(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F9130;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::removeSource(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F9130;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::removeSource(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = (uint64_t *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, v4);
  if (v3)
  {
    uint64_t v6 = v3 + 16 * *(unsigned int *)(v3 - 4);
    if (v6 == result) {
      goto LABEL_9;
    }
LABEL_6:
    if (v6 != result)
    {
      *(void *)uint64_t result = -1;
      uint64_t result = (uint64_t)std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>::reset[abi:sn180100]((WebKit::RemoteCaptureSampleManager::RemoteAudio **)(result + 8), 0);
      ++*(_DWORD *)(*v2 - 16);
      uint64_t v7 = *v2;
      int v8 = *v2 ? *(_DWORD *)(v7 - 12) - 1 : -1;
      *(_DWORD *)(v7 - 12) = v8;
      uint64_t v13 = *v2;
      if (*v2)
      {
        unsigned int v14 = 6 * *(_DWORD *)(v13 - 12);
        unsigned int v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
        {
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCaptureSampleManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v15 >> 1);
        }
      }
    }
    return result;
  }
  if (result)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
LABEL_9:
  uint64_t v11 = *(void *)(v1 + 56);
  uint64_t v9 = (uint64_t *)(v1 + 56);
  uint64_t v10 = v11;
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v11, v4);
  if (v11)
  {
    uint64_t v12 = v10 + 16 * *(unsigned int *)(v10 - 4);
    if (v12 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v12 = 0;
  }
  if (v12 != result)
  {
    uint64_t v17 = *(void *)(result + 8);
    *(void *)uint64_t result = -1;
    *(void *)(result + 8) = 0;
    if (v17) {
      uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v17 + 312));
    }
    ++*(_DWORD *)(*v9 - 16);
    uint64_t v18 = *v9;
    if (*v9) {
      int v19 = *(_DWORD *)(v18 - 12) - 1;
    }
    else {
      int v19 = -1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *v9;
    if (*v9)
    {
      unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
      unsigned int v22 = *(_DWORD *)(v20 - 4);
      if (v21 < v22 && v22 >= 9)
      {
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v9, v22 >> 1);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCaptureSampleManager::RemoteAudio::startThread(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(v1 + 112) = 0;
  do
  {
    uint64_t result = MEMORY[0x1997420D0](*(unsigned int *)(v1 + 148));
    if (result) {
      break;
    }
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v1 + 160));
    if (v3) {
      break;
    }
    if (!*(unsigned char *)(v1 + 88)
      || (WebCore::CAAudioStreamDescription::sampleRate((WebCore::CAAudioStreamDescription *)(v1 + 8)),
          WTF::MediaTime::operator+(),
          uint64_t result = WebCore::CARingBuffer::fetch(),
          *(void *)(v1 + 112) += *(void *)(v1 + 136),
          !*(unsigned char *)(v1 + 88)))
    {
      __break(1u);
      return result;
    }
    uint64_t result = WebCore::RealtimeMediaSource::audioSamplesAvailable();
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v1 + 160));
  }
  while ((v4 & 1) == 0);
  return result;
}

uint64_t WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource(atomic_uchar **this)
{
  uint64_t v2 = WebCore::RealtimeMediaSource::deviceIDHashSalts((WebCore::RealtimeMediaSource *)this);
  uint64_t v3 = (uint64_t)this[9];
  if (!v3)
  {
    __break(1u);
LABEL_12:
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  unsigned __int8 v4 = (uint64_t *)v2;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[39]);
  int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v5 = &unk_1EE9F9920;
  v5[1] = this;
  void v5[2] = this;
  if (*((unsigned char *)this + 376)) {
    BOOL v6 = this[178][224] != 0;
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v21 = v3;
  uint64_t v7 = (os_unfair_lock_s *)this[41];
  uint64_t v20 = this[40];
  int v8 = (char *)(this + 42);
  uint64_t v9 = this + 48;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F9998;
  v10[1] = v5;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1497;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  unint64_t v23 = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, (uint64_t *)&v20);
  IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode(v12, (uint64_t)v8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, v4 + 1);
  IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(v12, v9);
  uint64_t v13 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (!v14) {
    goto LABEL_12;
  }
  unsigned char *v13 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v21);
  v22[0] = (uint64_t)v10;
  v22[1] = v11;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v23, v22, 0, 0);
  uint64_t v16 = v22[0];
  v22[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t result = (uint64_t)v23;
  unint64_t v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
    return WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t WebKit::RemoteRealtimeMediaSource::RemoteRealtimeMediaSource(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)(WebCore::RealtimeMediaSource::RealtimeMediaSource() + 304) = &unk_1EE9ED2E0;
  uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v13 = 0;
  *(_OWORD *)(v13 + 8) = xmmword_1994F5F10;
  *(void *)(v13 + 24) = a1;
  *(void *)a1 = &unk_1EE9F93A0;
  *(void *)(a1 + 304) = &unk_1EE9F9558;
  *(void *)(a1 + 312) = v13;
  WebKit::RemoteRealtimeMediaSourceProxy::RemoteRealtimeMediaSourceProxy(a1 + 320, a2, a3, a7, a4);
  *(void *)(a1 + 1424) = a6;
  *(unsigned char *)(a1 + 1432) = 0;
  *(unsigned char *)(a1 + 2400) = 0;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(unsigned char *)(a1 + 2504) = 0;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(void *)(a1 + 2590) = 0;
  *(unsigned char *)(a1 + 2600) = 0;
  *(unsigned char *)(a1 + 2744) = 0;
  *(void *)(a1 + 2757) = 0;
  *(void *)(a1 + 2752) = 0;
  *(void *)(a1 + 2776) = 0;
  *(void *)(a1 + 2768) = 0;
  *(unsigned char *)(a1 + 2784) = 0;
  *(void *)(a1 + 2808) = 0;
  *(void *)(a1 + 2792) = 0;
  *(void *)(a1 + 2800) = 0;
  *(_WORD *)(a1 + 2816) = 4;
  *(unsigned char *)(a1 + 2818) = 0;
  *(void *)(a1 + 2824) = 0x3FF0000000000000;
  *(void *)(a1 + 2846) = 0;
  *(void *)(a1 + 2832) = 0;
  *(void *)(a1 + 2840) = 0;
  return a1;
}

void WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(WebKit::RemoteRealtimeMediaSource *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F93A0;
  *((void *)this + 38) = &unk_1EE9F9558;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 351);
  *((void *)this + 351) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned __int8 v4 = (WTF::StringImpl *)*((void *)this + 350);
  *((void *)this + 350) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 349);
  *((void *)this + 349) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*((unsigned char *)this + 2744))
  {
    if (*((unsigned char *)this + 2736))
    {
      BOOL v6 = (WTF *)*((void *)this + 340);
      if (v6)
      {
        *((void *)this + 340) = 0;
        *((_DWORD *)this + 682) = 0;
        WTF::fastFree(v6, a2);
      }
    }
  }
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebKit::RemoteRealtimeMediaSource *)((char *)this + 2408), a2);
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1432, v7);
  WebKit::RemoteRealtimeMediaSourceProxy::~RemoteRealtimeMediaSourceProxy((atomic_uchar *volatile **)this + 40);

  MEMORY[0x1F416F798](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteRealtimeAudioSource::~RemoteRealtimeAudioSource(WebKit::RemoteRealtimeAudioSource *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource((WebKit::RemoteRealtimeAudioSource *)((char *)this - 304), a2);

  WTF::fastFree(v2, v3);
}

void WebKit::RemoteRealtimeAudioSource::~RemoteRealtimeAudioSource(WebKit::RemoteRealtimeAudioSource *this, WTF::StringImpl *a2)
{
  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(this, a2);

  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::RemoteRealtimeAudioSource::setIsInBackground(WebKit::RemoteRealtimeAudioSource *this, char a2)
{
  uint64_t v2 = *((void *)this + 41);
  uint64_t v8 = *((void *)this + 40);
  uint64_t v9 = &v8;
  char v10 = a2;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1502;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v11 = v3;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v3, (uint64_t)&v9);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

__n128 WebKit::RemoteRealtimeMediaSource::setCapabilities(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 2408;
  long long v5 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 2424) = a2[1];
  *(_OWORD *)(a1 + 2440) = v6;
  *(_OWORD *)(a1 + 2408) = v5;
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 2456), (uint64_t)(a2 + 3));
  char v7 = *((unsigned char *)a2 + 96);
  long long v8 = a2[5];
  *(_OWORD *)(v4 + 64) = a2[4];
  *(_OWORD *)(v4 + 80) = v8;
  *(unsigned char *)(a1 + 2504) = v7;
  WTF::String::operator=((uint64_t *)(a1 + 2512), (WTF::StringImpl **)a2 + 13);
  WTF::String::operator=((uint64_t *)(a1 + 2520), (WTF::StringImpl **)a2 + 14);
  *(_OWORD *)(a1 + 2528) = *(long long *)((char *)a2 + 120);
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 2544), (uint64_t)a2 + 136);
  uint64_t v9 = *(void *)((char *)a2 + 182);
  __n128 result = *(__n128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 2560) = *(long long *)((char *)a2 + 152);
  *(__n128 *)(a1 + 2576) = result;
  *(void *)(v4 + 182) = v9;
  return result;
}

uint64_t WebKit::RemoteRealtimeMediaSource::setSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2752;
  unsigned int v5 = WebCore::RealtimeMediaSourceSettings::difference();
  char v6 = *(unsigned char *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 2752) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 2768) = v7;
  *(unsigned char *)(a1 + 2784) = v6;
  WTF::String::operator=((uint64_t *)(a1 + 2792), (uint64_t *)(a2 + 40));
  WTF::String::operator=((uint64_t *)(a1 + 2800), (uint64_t *)(a2 + 48));
  WTF::String::operator=((uint64_t *)(a1 + 2808), (uint64_t *)(a2 + 56));
  uint64_t v8 = *(void *)(a2 + 94);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 2816) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 2832) = v9;
  *(void *)(v4 + 94) = v8;

  return MEMORY[0x1F416F770](a1, v5);
}

uint64_t *WebKit::RemoteRealtimeMediaSource::takePhoto@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5 = *(os_unfair_lock_s **)(a1 + 328);
  uint64_t v17 = *(void *)(a1 + 320);
  unsigned int v22 = 0;
  *(void *)&long long v23 = 0;
  *((void *)&v23 + 1) = "sendWithPromisedReply";
  *(void *)&long long v24 = 0;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v19, 0, (WTF::Logger::LogSiteIdentifier *)&v22);
  uint64_t v6 = v19;
  if (v19)
  {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
    uint64_t v7 = v19;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a3 = v6;
  uint64_t v19 = 0;
  long long v23 = v20;
  long long v24 = v21;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v8 = &unk_1EE9F99E8;
  *(void *)(v8 + 8) = v7;
  unsigned int v22 = 0;
  long long v9 = v24;
  *(_OWORD *)(v8 + 16) = v23;
  *(_OWORD *)(v8 + 32) = v9;
  v18[0] = v8;
  v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v22);
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 1506;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  unsigned int v22 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v17);
  IPC::ArgumentCoder<WebCore::PhotoSettings,void>::encode(v10, a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v5, &v22, v18, 0, 0);
  uint64_t v12 = v22;
  unsigned int v22 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v15, v16);
  }
  uint64_t v13 = v18[0];
  v18[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  return WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(&v19);
}

uint64_t *WebKit::RemoteRealtimeMediaSource::getPhotoCapabilities@<X0>(WebKit::RemoteRealtimeMediaSource *this@<X0>, WTF **a2@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (os_unfair_lock_s *)*((void *)this + 41);
  uint64_t v42 = *((void *)this + 40);
  long long v43 = 0uLL;
  *(void *)&long long v44 = "sendWithPromisedReply";
  *((void *)&v44 + 1) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x110);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1EE9F9A38;
  long long v5 = v44;
  *(_OWORD *)(v4 + 16) = v43;
  *(_OWORD *)(v4 + 32) = v5;
  *(unsigned char *)(v4 + 48) = 0;
  uint64_t v6 = (WTF::Lock *)(v4 + 48);
  *(_DWORD *)(v4 + 216) = 0;
  *(void *)(v4 + 224) = v4 + 240;
  *(void *)(v4 + 232) = 1;
  *(void *)(v4 + 248) = 0;
  *(void *)(v4 + 256) = 0;
  *(_WORD *)(v4 + 264) = 0;
  uint64_t v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (*v7)
  {
    uint64_t v8 = v7;
    if (v7[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v49, "creating ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v48);
      *(void *)buf = v49;
      char v45 = v48;
      __n128 result = (uint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v45, &v50);
      if (!v50)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v11 = v48;
      uint64_t v48 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v12 = v49;
      int v49 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      uint64_t v13 = *((void *)v8 + 4);
      uint64_t v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        WTF::String::utf8();
        uint64_t v16 = v45 ? (char *)v45 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v14 = v45;
        char v45 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1) {
            uint64_t v14 = (WTF *)WTF::fastFree(v14, v15);
          }
          else {
            --*(_DWORD *)v14;
          }
        }
      }
      if (*v8 && v8[16] >= 4u)
      {
        uint64_t v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v18 = *v17;
          if (v18) {
            break;
          }
          int v19 = *v17;
          atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
          if (v19 == v18)
          {
            uint64_t v20 = WTF::Logger::observers(v14);
            uint64_t v21 = *(unsigned int *)(v20 + 12);
            if (v21)
            {
              unsigned int v22 = *(uint64_t **)v20;
              uint64_t v23 = *(void *)v20 + 8 * v21;
              do
              {
                uint64_t v24 = *v22;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                *(_DWORD *)&buf[16] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v52);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v45, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v24 + 16))(v24, v8, 4, &v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v25);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  uint64_t v27 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2) {
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                    }
                    else {
                      *(_DWORD *)v27 -= 2;
                    }
                  }
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            int v28 = 1;
            atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
            if (v28 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v7 = (unsigned __int8 *)v50;
      uint64_t v50 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          uint64_t v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  char v29 = 0;
  char v45 = (WTF *)v4;
  long long v46 = v43;
  long long v47 = v44;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
  if (v29) {
    uint64_t v7 = (unsigned __int8 *)MEMORY[0x19972E8D0](v6);
  }
  uint64_t v30 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v30 && v30[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v30, (WTF::Logger::LogSiteIdentifier *)&v43, " runSynchronouslyOnTarget ", v4);
  }
  atomic_store(0, (unsigned __int8 *)(v4 + 265));
  int v31 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
  if (v31 != 1) {
    WTF::Lock::unlockSlow(v6);
  }
  uint64_t v32 = v45;
  if (v45)
  {
    atomic_fetch_add((atomic_uint *volatile)v45 + 2, 1u);
    uint64_t v33 = v45;
  }
  else
  {
    uint64_t v33 = 0;
  }
  *a2 = v32;
  char v45 = 0;
  *(_OWORD *)&uint8_t buf[8] = v46;
  long long v52 = v47;
  uint64_t v34 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v34 = &unk_1EE9F9A88;
  *(void *)(v34 + 8) = v33;
  *(void *)buf = 0;
  long long v35 = v52;
  *(_OWORD *)(v34 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v34 + 32) = v35;
  *(void *)&long long v43 = v34;
  *((void *)&v43 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer((uint64_t *)buf);
  unsigned int v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v36 = 1499;
  *((void *)v36 + 1) = 0;
  *((void *)v36 + 66) = (char *)v36 + 16;
  *((void *)v36 + 67) = 512;
  *((void *)v36 + 68) = 0;
  *((void *)v36 + 70) = 0;
  *((void *)v36 + 69) = 0;
  IPC::Encoder::encodeHeader(v36);
  *(void *)buf = v36;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v36, &v42);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v3, (IPC::Encoder **)buf, (uint64_t *)&v43, 0, 0);
  uint64_t v38 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v40, v41);
  }
  uint64_t v39 = v43;
  *(void *)&long long v43 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  return WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v45);
}

uint64_t *WebKit::RemoteRealtimeMediaSource::getPhotoSettings@<X0>(WebKit::RemoteRealtimeMediaSource *this@<X0>, WTF **a2@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (os_unfair_lock_s *)*((void *)this + 41);
  uint64_t v42 = *((void *)this + 40);
  long long v43 = 0uLL;
  *(void *)&long long v44 = "sendWithPromisedReply";
  *((void *)&v44 + 1) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1EE9F9B10;
  long long v5 = v44;
  *(_OWORD *)(v4 + 16) = v43;
  *(_OWORD *)(v4 + 32) = v5;
  *(unsigned char *)(v4 + 48) = 0;
  uint64_t v6 = (WTF::Lock *)(v4 + 48);
  *(_DWORD *)(v4 + 120) = 0;
  *(void *)(v4 + 128) = v4 + 144;
  *(void *)(v4 + 136) = 1;
  *(void *)(v4 + 152) = 0;
  *(void *)(v4 + 160) = 0;
  *(_WORD *)(v4 + 168) = 0;
  uint64_t v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (*v7)
  {
    uint64_t v8 = v7;
    if (v7[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v49, "creating ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v48);
      *(void *)buf = v49;
      char v45 = v48;
      __n128 result = (uint64_t *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v45, &v50);
      if (!v50)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v11 = v48;
      uint64_t v48 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v12 = v49;
      int v49 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      uint64_t v13 = *((void *)v8 + 4);
      uint64_t v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        WTF::String::utf8();
        uint64_t v16 = v45 ? (char *)v45 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v14 = v45;
        char v45 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1) {
            uint64_t v14 = (WTF *)WTF::fastFree(v14, v15);
          }
          else {
            --*(_DWORD *)v14;
          }
        }
      }
      if (*v8 && v8[16] >= 4u)
      {
        uint64_t v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v18 = *v17;
          if (v18) {
            break;
          }
          int v19 = *v17;
          atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
          if (v19 == v18)
          {
            uint64_t v20 = WTF::Logger::observers(v14);
            uint64_t v21 = *(unsigned int *)(v20 + 12);
            if (v21)
            {
              unsigned int v22 = *(uint64_t **)v20;
              uint64_t v23 = *(void *)v20 + 8 * v21;
              do
              {
                uint64_t v24 = *v22;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                *(_DWORD *)&buf[16] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v52);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v45, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v24 + 16))(v24, v8, 4, &v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v25);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  uint64_t v27 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2) {
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                    }
                    else {
                      *(_DWORD *)v27 -= 2;
                    }
                  }
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            int v28 = 1;
            atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
            if (v28 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v7 = (unsigned __int8 *)v50;
      uint64_t v50 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          uint64_t v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  char v29 = 0;
  char v45 = (WTF *)v4;
  long long v46 = v43;
  long long v47 = v44;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
  if (v29) {
    uint64_t v7 = (unsigned __int8 *)MEMORY[0x19972E8D0](v6);
  }
  uint64_t v30 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v30 && v30[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v30, (WTF::Logger::LogSiteIdentifier *)&v43, " runSynchronouslyOnTarget ", v4);
  }
  atomic_store(0, (unsigned __int8 *)(v4 + 169));
  int v31 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
  if (v31 != 1) {
    WTF::Lock::unlockSlow(v6);
  }
  uint64_t v32 = v45;
  if (v45)
  {
    atomic_fetch_add((atomic_uint *volatile)v45 + 2, 1u);
    uint64_t v33 = v45;
  }
  else
  {
    uint64_t v33 = 0;
  }
  *a2 = v32;
  char v45 = 0;
  *(_OWORD *)&uint8_t buf[8] = v46;
  long long v52 = v47;
  uint64_t v34 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v34 = &unk_1EE9F9B60;
  *(void *)(v34 + 8) = v33;
  *(void *)buf = 0;
  long long v35 = v52;
  *(_OWORD *)(v34 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v34 + 32) = v35;
  *(void *)&long long v43 = v34;
  *((void *)&v43 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer((uint64_t *)buf);
  unsigned int v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v36 = 1500;
  *((void *)v36 + 1) = 0;
  *((void *)v36 + 66) = (char *)v36 + 16;
  *((void *)v36 + 67) = 512;
  *((void *)v36 + 68) = 0;
  *((void *)v36 + 70) = 0;
  *((void *)v36 + 69) = 0;
  IPC::Encoder::encodeHeader(v36);
  *(void *)buf = v36;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v36, &v42);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v3, (IPC::Encoder **)buf, (uint64_t *)&v43, 0, 0);
  uint64_t v38 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v40, v41);
  }
  uint64_t v39 = v43;
  *(void *)&long long v43 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  return WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v45);
}

uint64_t WebKit::RemoteRealtimeMediaSource::didEnd(uint64_t this)
{
  if (!*(unsigned char *)(this + 1417))
  {
    uint64_t v1 = this;
    uint64_t v2 = (uint64_t *)(this + 320);
    *(unsigned char *)(this + 1417) = 1;
    uint64_t v3 = *(void *)(this + 328);
    uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v4 = 1501;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    unsigned int v22 = v4;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, v2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v22, 0, 0);
    uint64_t v6 = v22;
    unsigned int v22 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v20, v21);
    }
    uint64_t v7 = *(void *)(v1 + 1424);
    unsigned int v22 = *(IPC::Encoder **)(v1 + 320);
    uint64_t v8 = (uint64_t *)(v7 + 24);
    long long v9 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 24), &v22);
    char v10 = v9;
    uint64_t v11 = *(void *)(v7 + 24);
    if (v11)
    {
      uint64_t v12 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
      if (v12 == v9) {
        return WebKit::RemoteCaptureSampleManager::removeSource(*(void *)(v1 + 1424) + 144, *(void *)(v1 + 320));
      }
    }
    else
    {
      if (!v9) {
        return WebKit::RemoteCaptureSampleManager::removeSource(*(void *)(v1 + 1424) + 144, *(void *)(v1 + 320));
      }
      uint64_t v12 = 0;
    }
    if (v12 != v9)
    {
      *long long v9 = -1;
      uint64_t v13 = *((unsigned int *)v9 + 4);
      if (v13 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9F98F8[v13])(&v23, v9 + 1);
      }
      int v14 = -1;
      *((_DWORD *)v10 + 4) = -1;
      ++*(_DWORD *)(*v8 - 16);
      uint64_t v15 = *v8;
      if (*v8) {
        int v14 = *(_DWORD *)(v15 - 12) - 1;
      }
      *(_DWORD *)(v15 - 12) = v14;
      uint64_t v16 = *v8;
      if (*v8)
      {
        unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
        unsigned int v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(v7 + 24), v18 >> 1, 0);
        }
      }
    }
    return WebKit::RemoteCaptureSampleManager::removeSource(*(void *)(v1 + 1424) + 144, *(void *)(v1 + 320));
  }
  return this;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::applyConstraints(uint64_t a1, const WebCore::MediaTrackConstraintSetMap *a2, IPC::Encoder **a3)
{
  std::optional<WebCore::MediaConstraints>::operator=[abi:sn180100]<WebCore::MediaConstraints const&,void>(a1 + 1432, a2);

  return WebKit::RemoteRealtimeMediaSourceProxy::applyConstraints(a1 + 320, a2, a3);
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSourceProxy::applyConstraints(uint64_t a1, const WebCore::MediaTrackConstraintSetMap *a2, IPC::Encoder **a3)
{
  long long v5 = *a3;
  *a3 = 0;
  uint64_t v33 = v5;
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((WebCore::MediaTrackConstraintSetMap *)&v34, a2);
  __n128 result = (IPC::Encoder *)WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v39, (uint64_t)a2 + 944);
  v39[16] = *((unsigned char *)a2 + 960);
  uint64_t v7 = *(void *)(a1 + 1032);
  uint64_t v8 = *(void *)(a1 + 1040);
  if (!v7)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 1056);
    if (v8)
    {
      if (v8 != v9 - 1) {
        goto LABEL_20;
      }
    }
    else if (v9)
    {
      uint64_t v8 = 0;
      goto LABEL_20;
    }
LABEL_9:
    uint64_t v10 = v9;
    unint64_t v11 = ((unint64_t)v9 >> 2) + v9;
    if (v11 <= 0xF) {
      unint64_t v11 = 15;
    }
    if (v11 >= 0x4325C5)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v12 = *(WTF **)(a1 + 1048);
    int v13 = 976 * v11 + 976;
    uint64_t v14 = WTF::fastMalloc((WTF *)(976 * v11 + 976));
    *(_DWORD *)(a1 + 1056) = (v13 & 0xFFFFFFF0) / 0x3D0;
    *(void *)(a1 + 1048) = v14;
    unint64_t v15 = *(void *)(a1 + 1032);
    unint64_t v16 = *(void *)(a1 + 1040);
    if (v15 <= v16)
    {
      WTF::VectorMover<false,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::move((uint64_t)v12 + 976 * v15, (uint64_t)v12 + 976 * v16, v14 + 976 * v15);
      if (!v12)
      {
LABEL_19:
        uint64_t v8 = *(void *)(a1 + 1040);
        goto LABEL_20;
      }
    }
    else
    {
      WTF::VectorMover<false,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::move((uint64_t)v12, (uint64_t)v12 + 976 * v16, v14);
      uint64_t v17 = *(void *)(a1 + 1032);
      uint64_t v18 = v17 - v10 + *(unsigned int *)(a1 + 1056);
      WTF::VectorMover<false,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::move((uint64_t)v12 + 976 * v17, (uint64_t)v12 + 976 * v10, *(void *)(a1 + 1048) + 976 * v18);
      *(void *)(a1 + 1032) = v18;
      if (!v12) {
        goto LABEL_19;
      }
    }
    if (*(WTF **)(a1 + 1048) == v12)
    {
      *(void *)(a1 + 1048) = 0;
      *(_DWORD *)(a1 + 1056) = 0;
    }
    WTF::fastFree(v12, v19);
    goto LABEL_19;
  }
  if (v8 + 1 == v7)
  {
    LODWORD(v9) = *(_DWORD *)(a1 + 1056);
    goto LABEL_9;
  }
LABEL_20:
  std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100](*(void *)(a1 + 1048) + 976 * v8, (uint64_t *)&v33);
  uint64_t v21 = *(void *)(a1 + 1040);
  if (v21 == *(unsigned int *)(a1 + 1056) - 1) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21 + 1;
  }
  *(void *)(a1 + 1040) = v22;
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v20);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38, v23);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v24);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v25);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v26);
  uint64_t v27 = v33;
  uint64_t v33 = 0;
  if (v27) {
    (*(void (**)(IPC::Encoder *))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(a1 + 8);
  char v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v29 = 1495;
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  uint64_t v33 = v29;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v29, (uint64_t *)a1);
  IPC::ArgumentCoder<WebCore::MediaConstraints,void>::encode(v29, a2);
  IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v33, 0, 0);
  __n128 result = v33;
  uint64_t v33 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v30);
    return (IPC::Encoder *)WTF::fastFree(v31, v32);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::gpuProcessConnectionDidClose(IPC::Encoder *this, WebKit::GPUProcessConnection *a2)
{
  if (!*((unsigned char *)this + 294))
  {
    uint64_t v2 = (uint64_t)this;
    uint64_t v3 = (IPC::Encoder *)((char *)this + 320);
    WebKit::getSourceConnection((atomic_uchar *volatile **)&v9, *((unsigned __int8 *)this + 376));
    uint64_t v4 = *(IPC::Connection **)(v2 + 328);
    *(void *)(v2 + 328) = v9;
    uint64_t v9 = 0;
    uint64_t v10 = v4;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v10);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v9);
    long long v5 = (WebKit::RemoteCaptureSampleManager *)(*(void *)(v2 + 1424) + 144);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v10, *(atomic_uchar *volatile **)(v2 + 328));
    WebKit::RemoteCaptureSampleManager::didUpdateSourceConnection(v5, (atomic_uchar *volatile *)v10);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v10);
    *(unsigned char *)(v2 + 1384) = 0;
    WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource((atomic_uchar **)v2);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v6 = v10;
    uint64_t v9 = v10;
    WebKit::RemoteRealtimeMediaSourceProxy::failApplyConstraintCallbacks(v3, &v9);
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v7);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    if (*(unsigned char *)(v2 + 2400))
    {
      uint64_t v8 = (IPC::Connection *)WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v8 = &unk_1EE9F9970;
      uint64_t v10 = v8;
      WebKit::RemoteRealtimeMediaSourceProxy::applyConstraints((uint64_t)v3, (const WebCore::MediaTrackConstraintSetMap *)(v2 + 1432), &v10);
      if (v10) {
        (*(void (**)(IPC::Connection *))(*(void *)v10 + 8))(v10);
      }
    }
    this = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
    if (this) {
      return WebKit::RemoteRealtimeMediaSource::startProducingData((IPC::Encoder *)v2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteRealtimeMediaSourceProxy::failApplyConstraintCallbacks(WebKit::RemoteRealtimeMediaSourceProxy *this, WTF::StringImpl **a2)
{
  uint64_t v2 = *((void *)this + 129);
  uint64_t v3 = *((void *)this + 130);
  *(_OWORD *)((char *)this + 1032) = 0u;
  uint64_t v4 = (WTF *)*((void *)this + 131);
  *((void *)this + 131) = 0;
  uint64_t v5 = *((unsigned int *)this + 264);
  *((_DWORD *)this + 264) = 0;
  if (v2 != v3)
  {
    uint64_t v6 = v5 - 1;
    do
    {
      std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100]((uint64_t)v22, (uint64_t *)v4 + 122 * v2);
      WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct((uint64_t)v4 + 976 * v2, (uint64_t *)v4 + 122 * v2 + 122);
      if (v2 == v6) {
        uint64_t v2 = 0;
      }
      else {
        ++v2;
      }
      uint64_t v7 = *a2;
      if (*a2) {
        *(_DWORD *)v7 += 2;
      }
      v19[0] = 0;
      uint64_t v20 = v7;
      char v21 = 1;
      uint64_t v8 = v22[0];
      v22[0] = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v19);
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      if (v21)
      {
        uint64_t v10 = v20;
        uint64_t v20 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v9);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v9);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v11);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v12);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v13);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v14);
      uint64_t v15 = v22[0];
      v22[0] = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
    while (v2 != v3);
    uint64_t v2 = v3;
  }
  uint64_t result = WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct((uint64_t)v4 + 976 * v2, (uint64_t *)v4 + 122 * v3);
  if (v4) {
    return WTF::fastFree(v4, v17);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::startProducingData(IPC::Encoder *this)
{
  if (*((void *)this + 9))
  {
    uint64_t v1 = (uint64_t *)((char *)this + 320);
    uint64_t v7 = *((void *)this + 9);
    *((unsigned char *)this + 1416) = 0;
    uint64_t v2 = *((void *)this + 41);
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v3 = 1504;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 66) = (char *)v3 + 16;
    *((void *)v3 + 67) = 512;
    *((void *)v3 + 68) = 0;
    *((void *)v3 + 70) = 0;
    *((void *)v3 + 69) = 0;
    IPC::Encoder::encodeHeader(v3);
    uint64_t v8 = v3;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, v1);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, &v7);
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
    this = v8;
    uint64_t v8 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v4);
      return (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  else
  {
    __break(1u);
  }
  return this;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::gpuProcessConnectionDidClose(WebKit::RemoteRealtimeMediaSource *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteRealtimeMediaSource::gpuProcessConnectionDidClose((WebKit::RemoteRealtimeMediaSource *)((char *)this - 304), a2);
}

uint64_t WebKit::RemoteRealtimeMediaSourceProxy::RemoteRealtimeMediaSourceProxy(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned char *a5)
{
  char v6 = a4;
  *(void *)a1 = a2;
  WebKit::getSourceConnection((atomic_uchar *volatile **)(a1 + 8), a4);
  uint64_t v9 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v9 += 2;
  }
  *(void *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a3 + 8);
  uint64_t v10 = *(_DWORD **)(a3 + 16);
  if (v10) {
    *v10 += 2;
  }
  *(void *)(a1 + 32) = v10;
  unint64_t v11 = *(_DWORD **)(a3 + 24);
  if (v11) {
    *v11 += 2;
  }
  *(void *)(a1 + 40) = v11;
  int v12 = *(_DWORD *)(a3 + 32);
  *(unsigned char *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 624) = 0;
  *(unsigned char *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 736) = 0;
  *(unsigned char *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 936) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 976) = 0;
  *(unsigned char *)(a1 + 984) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_WORD *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_WORD *)(a1 + 1088) = 0;
  if (a5)
  {
    WebCore::MediaTrackConstraintSetMap::operator=((unsigned int *)(a1 + 64), a5);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 1008, (uint64_t)(a5 + 944));
    *(unsigned char *)(a1 + 1024) = a5[960];
  }
  return a1;
}

atomic_uchar *volatile **WebKit::getSourceConnection(atomic_uchar *volatile **this, int a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  if (a2) {
    uint64_t v3 = (atomic_uchar *volatile **)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
  }
                                   + 32);
  else {
    uint64_t v3 = (atomic_uchar *volatile **)(WebKit::WebProcess::singleton(void)::process + 40);
  }
  uint64_t v5 = *v3;

  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(this, v5);
}

void WebKit::RemoteRealtimeMediaSourceProxy::~RemoteRealtimeMediaSourceProxy(atomic_uchar *volatile **this)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v2 = v23;
  uint64_t v22 = v23;
  WebKit::RemoteRealtimeMediaSourceProxy::failApplyConstraintCallbacks((WebKit::RemoteRealtimeMediaSourceProxy *)this, &v22);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v3);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)this[135];
  this[135] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = this[134];
  this[134] = 0;
  if (v5) {
    (*((void (**)(atomic_uchar *volatile *))*v5 + 1))(v5);
  }
  char v6 = this[129];
  uint64_t v7 = this[130];
  uint64_t v8 = (uint64_t)this[131];
  if (v6 <= v7)
  {
    unint64_t v11 = (uint64_t *)(v8 + 976 * (void)v7);
    uint64_t v10 = v8 + 976 * (void)v6;
  }
  else
  {
    WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(v8, (uint64_t *)(v8 + 976 * (void)v7));
    uint64_t v9 = this[131];
    uint64_t v10 = (uint64_t)&v9[122 * (void)this[129]];
    unint64_t v11 = (uint64_t *)&v9[122 * *((unsigned int *)this + 264)];
  }
  WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(v10, v11);
  int v13 = (WTF *)this[131];
  if (v13)
  {
    this[131] = 0;
    *((_DWORD *)this + 264) = 0;
    WTF::fastFree(v13, v12);
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 126), v12);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 99), v14);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 92), v15);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 85), v16);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 78), v17);
  int v19 = (WTF::StringImpl *)this[5];
  this[5] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = (WTF::StringImpl *)this[4];
  this[4] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  char v21 = (WTF::StringImpl *)this[2];
  this[2] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v18);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 1);
}

uint64_t WebKit::RemoteRealtimeVideoSource::create(uint64_t *a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12 = WTF::fastMalloc((WTF *)0xB50);
  uint64_t v13 = WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WebKit::RemoteRealtimeMediaSource::RemoteRealtimeMediaSource(v12, v13, a2, a3, a4, a5, a6);
  *(void *)uint64_t v12 = &unk_1EE9F9598;
  *(void *)(v12 + 304) = &unk_1EE9F9750;
  *(_OWORD *)(v12 + 2856) = 0u;
  *(_OWORD *)(v12 + 2872) = 0u;
  *(void *)(v12 + 2888) = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v12 + 312));
  uint64_t v16 = v12;
  WebKit::UserMediaCaptureManager::addSource(a5, &v16);
  if (v16) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v16 + 312));
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v12 + 312));
  uint64_t v16 = v12;
  WebKit::RemoteCaptureSampleManager::addSource(a5 + 144, &v16);
  uint64_t v14 = v16;
  uint64_t v16 = 0;
  if (v14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v14 + 312));
  }
  uint64_t result = WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource((atomic_uchar **)v12);
  *a1 = v12;
  return result;
}

uint64_t WebKit::UserMediaCaptureManager::addSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v7 = *(void *)(*a2 + 320);
  *a2 = 0;
  uint64_t v5 = v2;
  int v6 = 2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::add<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>((uint64_t)v4, (uint64_t *)(a1 + 24), &v7, (uint64_t)&v5);
  if (v6 != -1) {
    return ((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9F98F8[v6])(v4, &v5);
  }
  return result;
}

void WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource(WebKit::RemoteRealtimeVideoSource *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 359);
  if (v3)
  {
    *((void *)this + 359) = 0;
    *((_DWORD *)this + 720) = 0;
    WTF::fastFree(v3, a2);
  }

  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(this, (WTF::StringImpl *)a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource(WebKit::RemoteRealtimeVideoSource *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRealtimeVideoSource::~RemoteRealtimeVideoSource((WebKit::RemoteRealtimeVideoSource *)((char *)this - 304), a2);

  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::RemoteRealtimeVideoSource::endProducingData(WebKit::RemoteRealtimeVideoSource *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 320);
  uint64_t v2 = *((void *)this + 41);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1498;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, v1);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::RemoteRealtimeVideoSource::setShouldApplyRotation(WebKit::RemoteRealtimeVideoSource *this, char a2)
{
  uint64_t v2 = *((void *)this + 41);
  uint64_t v9 = *((void *)this + 40);
  uint64_t v10 = &v9;
  char v11 = a2;
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1503;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v12 = v3;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v3, (uint64_t)&v10);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v12, 0, 0);
  uint64_t v5 = v12;
  uint64_t v12 = 0;
  if (v5)
  {
    IPC::Encoder::~Encoder(v5, v4);
    WTF::fastFree(v7, v8);
  }
  return 1;
}

uint64_t WebKit::RemoteRealtimeVideoSource::clone@<X0>(WebKit::RemoteRealtimeVideoSource *this@<X0>, void *a2@<X8>)
{
  uint64_t v7 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9F9C20;
  v4[1] = this;
  v4[2] = &v7;
  uint64_t v6 = (uint64_t)v4;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = v6;
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *a2 = v7;
  return result;
}

uint64_t WebKit::RemoteRealtimeVideoSource::remoteVideoFrameAvailable(uint64_t a1, _OWORD *a2)
{
  long long v30 = a2[1];
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v30);
  double v5 = v4;
  uint64_t v6 = (unint64_t *)(a1 + 2856);
  unint64_t v7 = *(void *)(a1 + 2856);
  uint64_t v8 = *(void *)(a1 + 2864);
  if (!v7)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 2880);
    if (v8)
    {
      if (v8 != v9 - 1)
      {
        unint64_t v7 = 0;
        goto LABEL_10;
      }
    }
    else if (v9)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v8 + 1 == v7)
  {
LABEL_9:
    WTF::Deque<WTF::String,0ul>::expandCapacity((uint64_t *)(a1 + 2856));
    uint64_t v8 = *(void *)(a1 + 2864);
    unint64_t v7 = *(void *)(a1 + 2856);
  }
LABEL_10:
  uint64_t v10 = *(void *)(a1 + 2872);
  *(double *)(v10 + 8 * v8) = v5;
  unint64_t v11 = *(unsigned int *)(a1 + 2880);
  if (v8 == v11 - 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = v8 + 1;
  }
  *(void *)(a1 + 2864) = v12;
  if (v7 <= v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = v11;
  }
  unint64_t v14 = v13 + v12;
  unint64_t v15 = v14 - v7;
  if (v14 != v7)
  {
    double v16 = v5 + -2.0;
    while (1)
    {
      unint64_t v17 = *v6;
      if (*v6 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x199217EE0);
      }
      double v18 = *(double *)(v10 + 8 * v17);
      if (v17 == v11 - 1) {
        unint64_t v19 = 0;
      }
      else {
        unint64_t v19 = v17 + 1;
      }
      *uint64_t v6 = v19;
      if (v16 >= v18) {
        goto LABEL_36;
      }
      if (v19) {
        break;
      }
      if (v12)
      {
        if (v12 != v11 - 1) {
          goto LABEL_32;
        }
LABEL_31:
        WTF::Deque<WTF::String,0ul>::expandCapacity((uint64_t *)(a1 + 2856));
        unint64_t v12 = *(void *)(a1 + 2864);
        uint64_t v10 = *(void *)(a1 + 2872);
        unint64_t v11 = *(unsigned int *)(a1 + 2880);
        goto LABEL_32;
      }
      if (!v11) {
        goto LABEL_31;
      }
      unint64_t v12 = 0;
LABEL_32:
      *(double *)(v10 + 8 * v12) = v18;
      if (v12 == v11 - 1) {
        unint64_t v12 = 0;
      }
      else {
        ++v12;
      }
      *(void *)(a1 + 2864) = v12;
LABEL_36:
      if (!--v15)
      {
        unint64_t v7 = *v6;
        goto LABEL_38;
      }
    }
    if (v12 + 1 != v19) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_38:
  if (v7 == v12)
  {
    __break(0xC471u);
    JUMPOUT(0x199217F00);
  }
  if (v12) {
    unint64_t v20 = v12;
  }
  else {
    unint64_t v20 = v11;
  }
  double v21 = *(double *)(v10 + 8 * v20 - 8) - *(double *)(v10 + 8 * v7);
  if (v21 > 1.0)
  {
    if (v7 <= v12) {
      unint64_t v11 = 0;
    }
    *(double *)(a1 + 2888) = (double)(v12 + v11 - v7) / v21;
  }
  float v22 = ceilf((*(float (**)(_OWORD *))(*(void *)a2 + 16))(a2));
  uint64_t v24 = 0x7FFFFFFFLL;
  uint64_t v25 = 0x80000000;
  if (v22 > -2147500000.0) {
    uint64_t v25 = (int)v22;
  }
  if (v22 < 2147500000.0) {
    uint64_t v24 = v25;
  }
  float v26 = ceilf(v23);
  if (v26 >= 2147500000.0)
  {
    unint64_t v27 = 0x7FFFFFFF00000000;
  }
  else if (v26 <= -2147500000.0)
  {
    unint64_t v27 = 0x8000000000000000;
  }
  else
  {
    unint64_t v27 = (unint64_t)(int)v26 << 32;
  }
  IntSize v29 = (IntSize)(v27 | v24);
  WebCore::RealtimeMediaSource::setIntrinsicSize((WebCore::RealtimeMediaSource *)a1, &v29);
  return WebCore::RealtimeMediaSource::videoFrameAvailable();
}

void WebKit::UserMediaCaptureManager::~UserMediaCaptureManager(WebKit::UserMediaCaptureManager *this)
{
  *(void *)this = &unk_1EE9F9790;
  *((void *)this + 1) = &unk_1EE9F97D0;
  uint64_t v2 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(this);
  uint64_t v3 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::unsetAudioCaptureFactory(v2, (WebKit::UserMediaCaptureManager *)((char *)this + 56));
  WebCore::RealtimeMediaSourceCenter::singleton(v3);
  double v4 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::unsetDisplayCaptureFactory();
  WebCore::RealtimeMediaSourceCenter::singleton(v4);
  WebCore::RealtimeMediaSourceCenter::unsetVideoCaptureFactory();
  {
    unint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 48), 0x95u);
  WebKit::RemoteCaptureSampleManager::stopListeningForIPC((WebKit::UserMediaCaptureManager *)((char *)this + 144));
  WebKit::RemoteCaptureSampleManager::~RemoteCaptureSampleManager((WebKit::UserMediaCaptureManager *)((char *)this + 144), v5);
  *((void *)this + 7) = &unk_1EE9F9868;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v6);
  *((void *)this + 4) = &unk_1EE9F98C8;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v7);
  WebCore::CaptureDeviceManager::~CaptureDeviceManager((WebKit::UserMediaCaptureManager *)((char *)this + 32));
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v9 - 4);
    if (v10)
    {
      uint64_t v11 = v9 + 8;
      do
      {
        if (*(void *)(v11 - 8) != -1)
        {
          uint64_t v12 = *(unsigned int *)(v11 + 8);
          if (v12 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9F98F8[v12])(&v14, v11);
          }
          *(_DWORD *)(v11 + 8) = -1;
        }
        v11 += 24;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree((WTF *)(v9 - 16), v8);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v8);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::UserMediaCaptureManager::~UserMediaCaptureManager(this);

  WTF::fastFree(v1, v2);
}

void WebKit::UserMediaCaptureManager::AudioFactory::~AudioFactory(WebKit::UserMediaCaptureManager::AudioFactory *this, void *a2)
{
  *(void *)this = &unk_1EE9F9868;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE9F9868;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::UserMediaCaptureManager::NoOpCaptureDeviceManager::~NoOpCaptureDeviceManager(WebKit::UserMediaCaptureManager::NoOpCaptureDeviceManager *this, void *a2)
{
  *(void *)this = &unk_1EE9F98C8;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);

  WebCore::CaptureDeviceManager::~CaptureDeviceManager(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE9F98C8;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);
  WebCore::CaptureDeviceManager::~CaptureDeviceManager(this);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::UserMediaCaptureManager::~UserMediaCaptureManager(WebKit::UserMediaCaptureManager *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::UserMediaCaptureManager::~UserMediaCaptureManager((WebKit::UserMediaCaptureManager *)((char *)this - 8));

  WTF::fastFree(v1, v2);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::add<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  unsigned int v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  uint64_t v16 = v8 + 24 * v15;
  uint64_t v17 = *(void *)v16;
  if (*(void *)v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          unsigned int v21 = 0;
        }
        else {
          unsigned int v21 = *(_DWORD *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 24 * v21;
        goto LABEL_36;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = v8 + 24 * v15;
      uint64_t v17 = *(void *)v16;
      ++v19;
    }
    while (*(void *)v16);
    if (v18)
    {
      *(void *)uint64_t v18 = 0;
      *(void *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 16) = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      uint64_t v16 = v18;
    }
  }
  *(void *)uint64_t v16 = v11;
  v30[0] = 0;
  int v31 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v30, a4);
  uint64_t v20 = *(unsigned int *)(v16 + 16);
  if (v20 == -1)
  {
    if (v31 == -1) {
      goto LABEL_21;
    }
  }
  else if (v31 == -1)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t))off_1EE9F98F8[v20])(&v32, v16 + 8);
    *(_DWORD *)(v16 + 16) = -1;
    goto LABEL_19;
  }
  uint64_t v32 = v16 + 8;
  uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, char *))off_1EE9F9C50[v31])(&v32, v16 + 8, v30);
LABEL_19:
  if (v31 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, char *))off_1EE9F98F8[v31])(&v32, v30);
  }
LABEL_21:
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *a2;
  if (*a2) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_29:
      uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, (uint64_t *)v16);
      uint64_t v16 = result;
      uint64_t v24 = *a2;
      if (*a2) {
        LODWORD(v27) = *(_DWORD *)(v24 - 4);
      }
      else {
        LODWORD(v27) = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_29;
  }
  uint64_t v29 = v24 + 24 * v27;
  char v28 = 1;
LABEL_36:
  *(void *)uint64_t v7 = v16;
  *(void *)(v7 + 8) = v29;
  *(unsigned char *)(v7 + 16) = v28;
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::sourceStopped(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v10 = a2;
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result)
  {
    int v7 = *((_DWORD *)result + 4);
    if (v7 == -1) {
      uint64_t v8 = -1;
    }
    else {
      uint64_t v8 = *((unsigned int *)result + 4);
    }
    if (v8 == 2)
    {
      if (v7 != 2) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v8 != 1)
      {
        if (!v7) {
          return result;
        }
        goto LABEL_15;
      }
      if (v7 != 1)
      {
LABEL_15:
        char v9 = (WebCore::RealtimeMediaSource *)std::__throw_bad_variant_access[abi:sn180100]();
        return (uint64_t *)WebCore::RealtimeMediaSource::end(v9, 0);
      }
    }
    char v9 = (WebCore::RealtimeMediaSource *)result[1];
    if (a3) {
      return (uint64_t *)(*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(void *)v9 + 240))(v9);
    }
    return (uint64_t *)WebCore::RealtimeMediaSource::end(v9, 0);
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::sourceMutedChanged(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v12 = a2;
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v12);
  int v7 = *(uint64_t **)(a1 + 24);
  if (v7) {
    v7 += 3 * *((unsigned int *)v7 - 1);
  }
  if (v7 == result) {
    return result;
  }
  int v8 = *((_DWORD *)result + 4);
  if (v8 == -1) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = *((unsigned int *)result + 4);
  }
  if (v9 == 2)
  {
    if (v8 == 2) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  if (v9 == 1)
  {
    if (v8 != 1) {
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v10 = (WebCore::RealtimeMediaSource *)result[1];
    *((unsigned char *)v10 + 1416) = a4;
    return (uint64_t *)WebCore::RealtimeMediaSource::notifyMutedChange(v10);
  }
  if (v8)
  {
LABEL_15:
    uint64_t v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebKit::UserMediaCaptureManager::sourceSettingsChanged(v11);
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::sourceSettingsChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a2;
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v10);
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 == result) {
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7 == -1) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = *((unsigned int *)result + 4);
  }
  if (v8 == 2)
  {
    if (v7 == 2) {
      return (uint64_t *)WebKit::RemoteRealtimeMediaSource::setSettings(result[1], a3);
    }
    goto LABEL_15;
  }
  if (v8 == 1)
  {
    if (v7 != 1) {
      goto LABEL_15;
    }
    return (uint64_t *)WebKit::RemoteRealtimeMediaSource::setSettings(result[1], a3);
  }
  if (v7)
  {
LABEL_15:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebKit::UserMediaCaptureManager::sourceConfigurationChanged(v9);
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::sourceConfigurationChanged(uint64_t a1, uint64_t a2, const WTF::String *a3, uint64_t a4, long long *a5)
{
  uint64_t v16 = a2;
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v16);
  uint64_t v10 = *(uint64_t **)(a1 + 24);
  if (v10) {
    v10 += 3 * *((unsigned int *)v10 - 1);
  }
  if (v10 != result)
  {
    int v11 = *((_DWORD *)result + 4);
    if (v11 == -1) {
      uint64_t v12 = -1;
    }
    else {
      uint64_t v12 = *((unsigned int *)result + 4);
    }
    if (v12 == 2)
    {
      if (v11 == 2)
      {
LABEL_12:
        uint64_t v13 = result[1];
        WebCore::RealtimeMediaSource::setPersistentId((WebCore::RealtimeMediaSource *)v13, a3);
        WebKit::RemoteRealtimeMediaSource::setSettings(v13, a4);
        WebKit::RemoteRealtimeMediaSource::setCapabilities(v13, a5);
        WTF::String::operator=((uint64_t *)(v13 + 120), (WTF::StringImpl **)(v13 + 2808));
        unint64_t v14 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
        *unint64_t v14 = (uint64_t)&unk_1EE9F9948;
        uint64_t v17 = v14;
        WebCore::RealtimeMediaSource::forEachObserver();
        uint64_t result = v17;
        uint64_t v17 = 0;
        if (result) {
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        }
        return result;
      }
    }
    else
    {
      if (v12 == 1)
      {
        if (v11 != 1) {
          goto LABEL_16;
        }
        goto LABEL_12;
      }
      if (!v11) {
        return result;
      }
    }
LABEL_16:
    uint64_t v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(v15);
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v36 = a2;
  uint64_t result = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v36);
  uint64_t v6 = *(uint64_t **)(v4 + 24);
  if (v6) {
    v6 += 3 * *((unsigned int *)v6 - 1);
  }
  if (v6 != result)
  {
    int v7 = *((_DWORD *)result + 4);
    if (v7 == -1) {
      uint64_t v8 = -1;
    }
    else {
      uint64_t v8 = *((unsigned int *)result + 4);
    }
    if (v8 == 2)
    {
      if (v7 != 2) {
        goto LABEL_21;
      }
    }
    else
    {
      if (v8 != 1)
      {
        if (!v7) {
          return result;
        }
        goto LABEL_21;
      }
      if (v7 != 1)
      {
LABEL_21:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_22;
      }
    }
    uint64_t v4 = result[1];
    WebKit::RemoteRealtimeMediaSource::setSettings(v4, a3);
    uint64_t v9 = *(void *)(v4 + 1352);
    if (v9 == *(void *)(v4 + 1360)
      || (std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100]((uint64_t)&v40, (uint64_t *)(*(void *)(v4 + 1368) + 976 * v9)), uint64_t v10 = *(void *)(v4 + 1352), v10 == *(void *)(v4 + 1360)))
    {
      __break(0xC471u);
      JUMPOUT(0x1992191C0);
    }
    WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(*(void *)(v4 + 1368) + 976 * v10, (uint64_t *)(*(void *)(v4 + 1368) + 976 * v10 + 976));
    uint64_t v11 = *(void *)(v4 + 1352);
    if (v11 == *(unsigned int *)(v4 + 1376) - 1) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11 + 1;
    }
    *(void *)(v4 + 1352) = v12;
    int v13 = *(unsigned __int8 *)(v4 + 432);
    if (v13 == v43)
    {
      if (*(unsigned char *)(v4 + 432))
      {
        *(unsigned char *)(v4 + 392) = v41;
        *(_OWORD *)(v4 + 396) = v42[0];
        *(_OWORD *)(v4 + 409) = *(_OWORD *)((char *)v42 + 13);
      }
      goto LABEL_25;
    }
LABEL_22:
    if (v13)
    {
      *(unsigned char *)(v4 + 432) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 392) = v41;
      *(_OWORD *)(v4 + 396) = v42[0];
      *(_OWORD *)(v4 + 409) = *(_OWORD *)((char *)v42 + 13);
      *(void *)(v4 + 384) = &unk_1EE9B4688;
      *(unsigned char *)(v4 + 432) = 1;
    }
LABEL_25:
    if (*(unsigned __int8 *)(v4 + 488) == v46)
    {
      if (*(unsigned char *)(v4 + 488))
      {
        *(unsigned char *)(v4 + 448) = v44;
        *(_OWORD *)(v4 + 452) = v45[0];
        *(_OWORD *)(v4 + 465) = *(_OWORD *)((char *)v45 + 13);
      }
    }
    else if (*(unsigned char *)(v4 + 488))
    {
      *(unsigned char *)(v4 + 488) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 448) = v44;
      *(_OWORD *)(v4 + 452) = v45[0];
      *(_OWORD *)(v4 + 465) = *(_OWORD *)((char *)v45 + 13);
      *(void *)(v4 + 440) = &unk_1EE9B4688;
      *(unsigned char *)(v4 + 488) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 544) == v49)
    {
      if (*(unsigned char *)(v4 + 544))
      {
        *(unsigned char *)(v4 + 504) = v47;
        *(_OWORD *)(v4 + 508) = v48[0];
        *(_OWORD *)(v4 + 521) = *(_OWORD *)((char *)v48 + 13);
      }
    }
    else if (*(unsigned char *)(v4 + 544))
    {
      *(unsigned char *)(v4 + 544) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 504) = v47;
      *(_OWORD *)(v4 + 508) = v48[0];
      *(_OWORD *)(v4 + 521) = *(_OWORD *)((char *)v48 + 13);
      *(void *)(v4 + 496) = &unk_1EE9B4688;
      *(unsigned char *)(v4 + 544) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 600) == v52)
    {
      if (*(unsigned char *)(v4 + 600))
      {
        *(unsigned char *)(v4 + 560) = v50;
        *(_OWORD *)(v4 + 564) = v51[0];
        *(_OWORD *)(v4 + 577) = *(_OWORD *)((char *)v51 + 13);
      }
    }
    else if (*(unsigned char *)(v4 + 600))
    {
      *(unsigned char *)(v4 + 600) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 560) = v50;
      *(_OWORD *)(v4 + 564) = v51[0];
      *(_OWORD *)(v4 + 577) = *(_OWORD *)((char *)v51 + 13);
      *(void *)(v4 + 552) = &unk_1EE9B4688;
      *(unsigned char *)(v4 + 600) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 688) == v57)
    {
      if (*(unsigned char *)(v4 + 688))
      {
        *(unsigned char *)(v4 + 616) = v53;
        long long v14 = v55;
        long long v15 = v56[0];
        *(_OWORD *)(v4 + 624) = v54;
        *(_OWORD *)(v4 + 640) = v14;
        *(_OWORD *)(v4 + 656) = v15;
        *(_OWORD *)(v4 + 665) = *(_OWORD *)((char *)v56 + 9);
      }
    }
    else if (*(unsigned char *)(v4 + 688))
    {
      *(unsigned char *)(v4 + 688) = 0;
    }
    else
    {
      long long v16 = v55;
      long long v17 = v56[0];
      *(_OWORD *)(v4 + 624) = v54;
      *(_OWORD *)(v4 + 640) = v16;
      *(unsigned char *)(v4 + 616) = v53;
      *(_OWORD *)(v4 + 656) = v17;
      *(_OWORD *)(v4 + 665) = *(_OWORD *)((char *)v56 + 9);
      *(void *)(v4 + 608) = &unk_1EE9B4700;
      *(unsigned char *)(v4 + 688) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 776) == v62)
    {
      if (*(unsigned char *)(v4 + 776))
      {
        *(unsigned char *)(v4 + 704) = v58;
        long long v18 = v60;
        *(_OWORD *)(v4 + 712) = v59;
        *(_OWORD *)(v4 + 728) = v18;
        *(_OWORD *)(v4 + 744) = v61[0];
        *(_OWORD *)(v4 + 753) = *(_OWORD *)((char *)v61 + 9);
      }
    }
    else if (*(unsigned char *)(v4 + 776))
    {
      *(unsigned char *)(v4 + 776) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 704) = v58;
      long long v19 = v60;
      *(_OWORD *)(v4 + 712) = v59;
      *(_OWORD *)(v4 + 728) = v19;
      *(_OWORD *)(v4 + 744) = v61[0];
      *(_OWORD *)(v4 + 753) = *(_OWORD *)((char *)v61 + 9);
      *(void *)(v4 + 696) = &unk_1EE9B4700;
      *(unsigned char *)(v4 + 776) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 864) == v67)
    {
      if (*(unsigned char *)(v4 + 864))
      {
        *(unsigned char *)(v4 + 792) = v63;
        long long v20 = v65;
        *(_OWORD *)(v4 + 800) = v64;
        *(_OWORD *)(v4 + 816) = v20;
        *(_OWORD *)(v4 + 832) = v66[0];
        *(_OWORD *)(v4 + 841) = *(_OWORD *)((char *)v66 + 9);
      }
    }
    else if (*(unsigned char *)(v4 + 864))
    {
      *(unsigned char *)(v4 + 864) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 792) = v63;
      long long v21 = v65;
      *(_OWORD *)(v4 + 800) = v64;
      *(_OWORD *)(v4 + 816) = v21;
      *(_OWORD *)(v4 + 832) = v66[0];
      *(_OWORD *)(v4 + 841) = *(_OWORD *)((char *)v66 + 9);
      *(void *)(v4 + 784) = &unk_1EE9B4700;
      *(unsigned char *)(v4 + 864) = 1;
    }
    uint64_t v22 = (_DWORD *)(v4 + 881);
    if (*(unsigned __int8 *)(v4 + 888) == v70)
    {
      if (*(unsigned char *)(v4 + 888))
      {
        *(unsigned char *)(v4 + 880) = v68;
        *uint64_t v22 = v69;
      }
    }
    else if (*(unsigned char *)(v4 + 888))
    {
      *(unsigned char *)(v4 + 888) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 880) = v68;
      *(void *)(v4 + 872) = &unk_1EE9B4750;
      *uint64_t v22 = v69;
      *(unsigned char *)(v4 + 888) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 912) == v73)
    {
      if (*(unsigned char *)(v4 + 912))
      {
        *(unsigned char *)(v4 + 904) = v71;
        *(_DWORD *)(v4 + 905) = v72;
      }
    }
    else if (*(unsigned char *)(v4 + 912))
    {
      *(unsigned char *)(v4 + 912) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 904) = v71;
      *(void *)(v4 + 896) = &unk_1EE9B4750;
      *(_DWORD *)(v4 + 905) = v72;
      *(unsigned char *)(v4 + 912) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 936) == v76)
    {
      if (*(unsigned char *)(v4 + 936))
      {
        *(unsigned char *)(v4 + 928) = v74;
        *(_DWORD *)(v4 + 929) = v75;
      }
    }
    else if (*(unsigned char *)(v4 + 936))
    {
      *(unsigned char *)(v4 + 936) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 928) = v74;
      *(void *)(v4 + 920) = &unk_1EE9B4750;
      *(_DWORD *)(v4 + 929) = v75;
      *(unsigned char *)(v4 + 936) = 1;
    }
    std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)(v4 + 944), (uint64_t)v77);
    std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)(v4 + 1000), (uint64_t)v78);
    std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)(v4 + 1056), (uint64_t)v79);
    std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::StringConstraint,false>>((WTF *)(v4 + 1112), (uint64_t)v80);
    if (*(unsigned __int8 *)(v4 + 1248) == v85)
    {
      if (*(unsigned char *)(v4 + 1248))
      {
        *(unsigned char *)(v4 + 1176) = v81;
        long long v24 = v83;
        *(_OWORD *)(v4 + 1184) = v82;
        *(_OWORD *)(v4 + 1200) = v24;
        *(_OWORD *)(v4 + 1216) = v84[0];
        *(_OWORD *)(v4 + 1225) = *(_OWORD *)((char *)v84 + 9);
      }
    }
    else if (*(unsigned char *)(v4 + 1248))
    {
      *(unsigned char *)(v4 + 1248) = 0;
    }
    else
    {
      long long v25 = v83;
      *(_OWORD *)(v4 + 1184) = v82;
      *(unsigned char *)(v4 + 1176) = v81;
      *(_OWORD *)(v4 + 1200) = v25;
      *(_OWORD *)(v4 + 1216) = v84[0];
      *(_OWORD *)(v4 + 1225) = *(_OWORD *)((char *)v84 + 9);
      *(void *)(v4 + 1168) = &unk_1EE9B4700;
      *(unsigned char *)(v4 + 1248) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 1272) == v88)
    {
      if (*(unsigned char *)(v4 + 1272))
      {
        *(unsigned char *)(v4 + 1264) = v86;
        *(_DWORD *)(v4 + 1265) = v87;
      }
    }
    else if (*(unsigned char *)(v4 + 1272))
    {
      *(unsigned char *)(v4 + 1272) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 1264) = v86;
      *(void *)(v4 + 1256) = &unk_1EE9B4750;
      *(_DWORD *)(v4 + 1265) = v87;
      *(unsigned char *)(v4 + 1272) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 1296) == v91)
    {
      if (*(unsigned char *)(v4 + 1296))
      {
        *(unsigned char *)(v4 + 1288) = v89;
        *(_DWORD *)(v4 + 1289) = v90;
      }
    }
    else if (*(unsigned char *)(v4 + 1296))
    {
      *(unsigned char *)(v4 + 1296) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 1288) = v89;
      *(void *)(v4 + 1280) = &unk_1EE9B4750;
      *(_DWORD *)(v4 + 1289) = v90;
      *(unsigned char *)(v4 + 1296) = 1;
    }
    if (*(unsigned __int8 *)(v4 + 1320) == v94)
    {
      if (*(unsigned char *)(v4 + 1320))
      {
        *(unsigned char *)(v4 + 1312) = v92;
        *(_DWORD *)(v4 + 1313) = v93;
      }
    }
    else if (*(unsigned char *)(v4 + 1320))
    {
      *(unsigned char *)(v4 + 1320) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 1312) = v92;
      *(void *)(v4 + 1304) = &unk_1EE9B4750;
      *(_DWORD *)(v4 + 1313) = v93;
      *(unsigned char *)(v4 + 1320) = 1;
    }
    unsigned int v26 = *(_DWORD *)(v4 + 1340);
    if (v26) {
      WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSetMap>::destruct(*(void *)(v4 + 1328), (char *)(*(void *)(v4 + 1328) + 944 * v26));
    }
    unint64_t v27 = *(WTF **)(v4 + 1328);
    if (v27)
    {
      *(void *)(v4 + 1328) = 0;
      *(_DWORD *)(v4 + 1336) = 0;
      WTF::fastFree(v27, v23);
    }
    char v28 = v40;
    *(void *)(v4 + 1328) = v95;
    uint64_t v29 = v96;
    uint64_t v96 = 0;
    *(void *)(v4 + 1336) = v29;
    *(unsigned char *)(v4 + 1344) = v97;
    v37[0] = 0;
    char v39 = 0;
    uint64_t v95 = 0;
    char v40 = 0;
    (*(void (**)(uint64_t *, char *))(*v28 + 16))(v28, v37);
    (*(void (**)(uint64_t *))(*v28 + 8))(v28);
    if (v39)
    {
      int v31 = v38;
      uint64_t v38 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v30);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v30);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v80, v32);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v79, v33);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v78, v34);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v77, v35);
    uint64_t result = v40;
    char v40 = 0;
    if (result) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManager::applyConstraintsFailed(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v25 = a2;
  uint64_t result = (uint64_t)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 24), &v25);
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    v8 += 24 * *(unsigned int *)(v8 - 4);
  }
  if (v8 != result)
  {
    int v9 = *(_DWORD *)(result + 16);
    if (v9 == -1) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = *(unsigned int *)(result + 16);
    }
    if (v10 == 2)
    {
      if (v9 != 2) {
        goto LABEL_24;
      }
    }
    else
    {
      if (v10 != 1)
      {
        if (!v9) {
          return result;
        }
        goto LABEL_24;
      }
      if (v9 != 1)
      {
LABEL_24:
        uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v24);
      }
    }
    uint64_t v11 = *(void *)(result + 8);
    uint64_t v12 = *(void *)(v11 + 1352);
    if (v12 == *(void *)(v11 + 1360)
      || (std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100]((uint64_t)&v26, (uint64_t *)(*(void *)(v11 + 1368) + 976 * v12)), uint64_t v13 = *(void *)(v11 + 1352), v13 == *(void *)(v11 + 1360)))
    {
      __break(0xC471u);
      JUMPOUT(0x199219404);
    }
    WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(*(void *)(v11 + 1368) + 976 * v13, (uint64_t *)(*(void *)(v11 + 1368) + 976 * v13 + 976));
    uint64_t v15 = *(void *)(v11 + 1352);
    if (v15 == *(unsigned int *)(v11 + 1376) - 1) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15 + 1;
    }
    *(void *)(v11 + 1352) = v16;
    uint64_t v17 = v26;
    uint64_t v26 = 0;
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v14);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32, v18);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v19);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v20);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v21);
    uint64_t v22 = v26;
    uint64_t v26 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = *a4;
    *a4 = 0;
    LOBYTE(v26) = a3;
    uint64_t v27 = v23;
    char v28 = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 16))(v17, &v26);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
    if (v28)
    {
      uint64_t result = v27;
      uint64_t v27 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          return result;
        }
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v24);
      }
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManager::AudioFactory::createAudioCaptureSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 16))
  {
    WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory((WebCore::DeprecatedGlobalSettings *)1);
    BOOL v10 = *(unsigned char *)(a1 + 16) != 0;
  }
  else
  {
    BOOL v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = WTF::fastMalloc((WTF *)0xB28);
  uint64_t v13 = WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WebKit::RemoteRealtimeMediaSource::RemoteRealtimeMediaSource(v12, v13, a2, a4, a3, v11, v10);
  *(void *)uint64_t v12 = &unk_1EE9F91A8;
  *(void *)(v12 + 304) = &unk_1EE9F9360;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v12 + 312));
  uint64_t v19 = *(void *)(v12 + 320);
  uint64_t v17 = v12;
  int v18 = 1;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::add<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>((uint64_t)v16, (uint64_t *)(v11 + 24), &v19, (uint64_t)&v17);
  if (v18 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EE9F98F8[v18])(v16, &v17);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v12 + 312));
  v16[0] = v12;
  WebKit::RemoteCaptureSampleManager::addSource(v11 + 144, v16);
  uint64_t v14 = v16[0];
  v16[0] = 0;
  if (v14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v14 + 312));
  }
  uint64_t result = WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource((atomic_uchar **)v12);
  *(void *)a5 = v12;
  *(void *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = 0;
  return result;
}

uint64_t WebKit::UserMediaCaptureManager::VideoFactory::createVideoCaptureSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v10 = *(void *)(a1 + 8) + 144;
    {
      uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v15);
    }
    uint64_t v11 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v12 = (atomic_uint *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v11);
    atomic_fetch_add(v12, 1u);
    uint64_t v16 = (unsigned int *)v12;
    WebKit::RemoteCaptureSampleManager::setVideoFrameObjectHeapProxy(v10, (uint64_t *)&v16);
    if (v16) {
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v16);
    }
    BOOL v13 = *(unsigned char *)(a1 + 16) != 0;
  }
  else
  {
    BOOL v13 = 0;
  }
  uint64_t result = WebKit::RemoteRealtimeVideoSource::create((uint64_t *)a5, a2, a4, a3, *(void *)(a1 + 8), v13);
  *(void *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = 0;
  return result;
}

uint64_t WebKit::UserMediaCaptureManager::DisplayFactory::createDisplayCaptureSource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 16))
  {
    {
      uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v15);
    }
    uint64_t v10 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v11 = (atomic_uint *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v10);
    atomic_fetch_add(v11, 1u);
    uint64_t v12 = *(void *)(a1 + 8) + 144;
    uint64_t v16 = (unsigned int *)v11;
    WebKit::RemoteCaptureSampleManager::setVideoFrameObjectHeapProxy(v12, (uint64_t *)&v16);
    if (v16) {
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v16);
    }
    BOOL v13 = *(unsigned char *)(a1 + 16) != 0;
  }
  else
  {
    BOOL v13 = 0;
  }
  uint64_t result = WebKit::RemoteRealtimeVideoSource::create((uint64_t *)a5, a2, a4, a3, *(void *)(a1 + 8), v13);
  *(void *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = 0;
  return result;
}

void WebKit::UserMediaCaptureManager::VideoFactory::~VideoFactory(WebKit::UserMediaCaptureManager::VideoFactory *this)
{
}

uint64_t WebKit::UserMediaCaptureManager::VideoFactory::videoCaptureDeviceManager(WebKit::UserMediaCaptureManager::VideoFactory *this)
{
  return *((void *)this + 1) + 32;
}

void WebKit::UserMediaCaptureManager::DisplayFactory::~DisplayFactory(WebKit::UserMediaCaptureManager::DisplayFactory *this)
{
}

uint64_t WebKit::UserMediaCaptureManager::DisplayFactory::displayCaptureDeviceManager(WebKit::UserMediaCaptureManager::DisplayFactory *this)
{
  return *((void *)this + 1) + 32;
}

uint64_t WebKit::UserMediaCaptureManager::AudioFactory::audioCaptureDeviceManager(WebKit::UserMediaCaptureManager::AudioFactory *this)
{
  return *((void *)this + 1) + 32;
}

uint64_t WebKit::UserMediaCaptureManager::AudioFactory::speakerDevices(WebKit::UserMediaCaptureManager::AudioFactory *this)
{
  return (uint64_t)this + 24;
}

uint64_t WebCore::AudioCaptureFactory::computeSpeakerDevices(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

WTF::StringImpl *WebKit::RemoteRealtimeMediaSource::whenReady(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 1384))
  {
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 1400);
    if (v4) {
      *(_DWORD *)v4 += 2;
    }
    uint64_t v14 = v4;
    __int16 v15 = *(_WORD *)(a1 + 1408);
    uint64_t v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v14);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 1392);
    if (v8)
    {
      *(void *)(a1 + 1392) = 0;
      uint64_t v9 = *a2;
      *a2 = 0;
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v10 = &unk_1EE9F9BE8;
      v10[1] = v8;
      uint64_t v10[2] = v9;
      uint64_t v11 = *a2;
      *a2 = (uint64_t)v10;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
    uint64_t v12 = *a2;
    *a2 = 0;
    uint64_t result = *(WTF::StringImpl **)(a1 + 1392);
    *(void *)(a1 + 1392) = v12;
    if (result)
    {
      BOOL v13 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (WTF::StringImpl *)v13();
    }
  }
  return result;
}

uint64_t WebKit::RemoteRealtimeMediaSource::interrupted(WebKit::RemoteRealtimeMediaSource *this)
{
  return *((unsigned __int8 *)this + 1416);
}

uint64_t WebKit::RemoteRealtimeMediaSource::capabilities(WebKit::RemoteRealtimeMediaSource *this)
{
  return (uint64_t)this + 2408;
}

uint64_t WebKit::RemoteRealtimeMediaSource::settings(WebKit::RemoteRealtimeMediaSource *this)
{
  return (uint64_t)this + 2752;
}

atomic_uchar *WebKit::RemoteRealtimeMediaSource::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[39]);
}

atomic_uchar *WebKit::RemoteRealtimeMediaSource::deref(atomic_uchar **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(this[39]);
}

uint64_t WebKit::RemoteRealtimeMediaSource::controlBlock(WebKit::RemoteRealtimeMediaSource *this)
{
  return *((void *)this + 39);
}

uint64_t WebKit::RemoteRealtimeMediaSource::isCaptureSource(WebKit::RemoteRealtimeMediaSource *this)
{
  return 1;
}

uint64_t WebKit::RemoteRealtimeMediaSource::deviceType(WebKit::RemoteRealtimeMediaSource *this)
{
  return *((unsigned __int8 *)this + 344);
}

uint64_t WebKit::RemoteRealtimeMediaSource::isPowerEfficient(WebKit::RemoteRealtimeMediaSource *this)
{
  uint64_t v1 = *((void *)this + 41);
  uint64_t v15 = *((void *)this + 40);
  WTF::ApproximateTime::now(this);
  double v3 = v2 + 3.0;
  uint64_t v23 = 0;
  IPC::Connection::createSyncMessageEncoder(3738, 0, &v23, &v22);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, &v15);
  IPC::Connection::sendSyncMessage(v1, v23, (uint64_t *)&v22, 0, (uint64_t)&v20, v3);
  if (v21)
  {
    if (v21 == 1)
    {
      int v4 = 0;
      LOBYTE(v16) = (_BYTE)v20;
      int v5 = 1;
      int v18 = 1;
      int v6 = 1;
LABEL_8:
      ((void (*)(__int16 *, uint64_t **))off_1EE9F9C00[v6])(&v19, &v20);
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  __int16 v19 = 0;
  IPC::Decoder::operator>><std::tuple<BOOL>>(v20, &v19);
  if (HIBYTE(v19))
  {
    int v6 = v21;
    if (!v21)
    {
      int v5 = 0;
      uint64_t v8 = v20;
      long long v20 = 0;
      int v4 = v19;
      uint64_t v16 = v8;
      char v17 = v19;
      int v18 = 0;
      goto LABEL_8;
    }
LABEL_17:
    uint64_t v14 = (WebKit::RemoteRealtimeMediaSource *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::RemoteRealtimeMediaSource::stopProducingData(v14);
  }
  int v4 = 0;
  LOBYTE(v16) = 13;
  int v5 = 1;
  int v18 = 1;
  int v6 = v21;
  if (v21 != -1) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v9 = v22;
  uint64_t v22 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v12, v13);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1EE9F98A8[v5])(&v20, &v16);
  if (v5) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v4 == 0;
  }
  return !v10;
}

IPC::Encoder *WebKit::RemoteRealtimeMediaSource::stopProducingData(WebKit::RemoteRealtimeMediaSource *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 320);
  *((unsigned char *)this + 1416) = 0;
  uint64_t v2 = *((void *)this + 41);
  double v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v3 = 1505;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, v1);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource(WebKit::RemoteRealtimeMediaSource *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteRealtimeMediaSource::~RemoteRealtimeMediaSource((WebKit::RemoteRealtimeMediaSource *)((char *)this - 304), a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::deref(atomic_uchar **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(this[1]);
}

uint64_t non-virtual thunk to'WebKit::RemoteRealtimeMediaSource::controlBlock(WebKit::RemoteRealtimeMediaSource *this)
{
  return *((void *)this + 1);
}

double WebKit::RemoteRealtimeVideoSource::observedFrameRate(WebKit::RemoteRealtimeVideoSource *this)
{
  return *((double *)this + 361);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t WebKit::UserMediaCaptureManager::NoOpCaptureDeviceManager::captureDevices(WebKit::UserMediaCaptureManager::NoOpCaptureDeviceManager *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebCore::DisplayCaptureManager::requiresCaptureDevicesEnumeration(WebCore::DisplayCaptureManager *this)
{
  return 0;
}

atomic_uchar *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v2 + 312));
  }
  return result;
}

atomic_uchar *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v2 + 312));
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::destruct(uint64_t result, uint64_t *a2)
{
  if ((uint64_t *)result != a2)
  {
    double v3 = (uint64_t *)result;
    do
    {
      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 119), a2);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 92), v4);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 85), v5);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 78), v6);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 71), v7);
      uint64_t result = *v3;
      uint64_t *v3 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      v3 += 122;
    }
    while (v3 != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource(void)::$_0,void,WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F9920;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v2 + 312));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource(void)::$_0,void,WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F9920;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v3 + 312));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::createRemoteMediaSource(void)::$_0,void,WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&>::call(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    *(unsigned char *)(v4 + 1384) = 1;
    int v6 = (WTF::StringImpl **)(v4 + 1400);
    uint64_t result = (WTF::StringImpl *)WTF::String::operator=((uint64_t *)(v4 + 1400), (uint64_t *)a2);
    __int16 v8 = *(_WORD *)(a2 + 8);
    *(_WORD *)(v4 + 1408) = v8;
    uint64_t v9 = *(void *)(v4 + 1392);
    if (v9)
    {
      BOOL v10 = *v6;
      if (*v6)
      {
        *(_DWORD *)v10 += 2;
        __int16 v8 = *(_WORD *)(v4 + 1408);
      }
      char v17 = v10;
      LOWORD(v18) = v8;
      *(void *)(v4 + 1392) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v9 + 16))(v9, &v17);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      uint64_t result = v17;
      char v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    WebKit::RemoteRealtimeMediaSource::setSettings(*(void *)(a1 + 8), a3);
    WebKit::RemoteRealtimeMediaSource::setCapabilities(v4, a4);
    uint64_t result = (WTF::StringImpl *)WTF::String::operator=((uint64_t *)(v4 + 120), (WTF::StringImpl **)(v4 + 2808));
    *(unsigned char *)(v4 + 1384) = 1;
    uint64_t v13 = *(void *)(v4 + 1392);
    if (v13)
    {
      char v17 = 0;
      uint64_t v18 = 0;
      *(void *)(v4 + 1392) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v13 + 16))(v13, &v17);
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      uint64_t result = v17;
      char v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (*(unsigned char *)(v4 + 376))
    {
      {
        uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v16);
      }
      uint64_t v15 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
          + 184;
      return WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v15, v4 + 304);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::configurationChanged(WTF::String &&,WebCore::RealtimeMediaSourceSettings &&,WTF::String &&::RealtimeMediaSourceCapabilities &&)::$_0,void,WTF::String &&::RealtimeMediaSourceObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSource::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::call(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v2 = *(WTF::StringImpl **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::UserMediaCaptureManagerProxy::CreateMediaSourceForCaptureDeviceWithConstraints,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>>(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&))#1},void,void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F9998;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::UserMediaCaptureManagerProxy::CreateMediaSourceForCaptureDeviceWithConstraints,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>>(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&))#1},void,void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F9998;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::UserMediaCaptureManagerProxy::CreateMediaSourceForCaptureDeviceWithConstraints,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>>(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)> &&,WTF::ThreadLikeAssertion)::{lambda(void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&))#1},void,void ()(WebCore::CaptureSourceError &&,WebCore::RealtimeMediaSourceSettings &&,WebCore::RealtimeMediaSourceCapabilities &&)>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::ArgumentCoder<WebCore::CaptureSourceError,void>::decode(a2, (uint64_t)&v43);
    if (v45)
    {
      IPC::Decoder::decode<WebCore::RealtimeMediaSourceSettings>((uint64_t *)a2, (uint64_t)v46);
      if (!v52 || (int v5 = IPC::Decoder::decode<WebCore::RealtimeMediaSourceCapabilities>((uint64_t *)a2, v53), !v66))
      {
        int v12 = 0;
        LOBYTE(v21) = 0;
        char v42 = 0;
LABEL_21:
        std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v46, v4);
        if (!v43) {
          goto LABEL_24;
        }
        if (*(_DWORD *)v43 != 2)
        {
          *(_DWORD *)v43 -= 2;
LABEL_24:
          if (!v12) {
            goto LABEL_30;
          }
LABEL_27:
          uint64_t v16 = *v2;
          uint64_t *v2 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, _OWORD *, _OWORD *))(*(void *)v16 + 16))(v16, &v21, v23, v29);
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<WebCore::CaptureSourceError,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceCapabilities>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v17);
        }
        WTF::StringImpl::destroy(v43, v15);
        if (v12) {
          goto LABEL_27;
        }
LABEL_30:
        uint64_t v18 = *(WTF::StringImpl **)a2;
        uint64_t v19 = *((void *)a2 + 1);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v20 = *((void *)a2 + 3);
        if (v20)
        {
          if (v19) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v20 + 16))(v20, v18);
          }
        }
        std::__optional_destruct_base<std::tuple<WebCore::CaptureSourceError,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceCapabilities>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v18);
        return _ZZN3IPC10Connection11cancelReplyIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN3WTF17CompletionHandlerIFvON7WebCore18CaptureSourceErrorEONS7_27RealtimeMediaSourceSettingsEONS7_31RealtimeMediaSourceCapabilitiesEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSK_(v2);
      }
      if (v52)
      {
        int v7 = v43;
        unsigned __int8 v43 = 0;
        int v21 = v7;
        __int16 v22 = v44;
        v23[0] = v46[0];
        v23[1] = v46[1];
        char v24 = v47;
        long long v8 = v48;
        long long v48 = 0u;
        long long v25 = v8;
        uint64_t v9 = v49;
        uint64_t v49 = 0;
        uint64_t v26 = v9;
        *(void *)&v28[14] = *(void *)&v51[14];
        long long v27 = v50;
        *(_OWORD *)char v28 = *(_OWORD *)v51;
        v29[0] = v53[0];
        v29[1] = v53[1];
        float v29[2] = v53[2];
        long long v30 = 0u;
        HIDWORD(v30) = v55;
        if (v55)
        {
          DWORD2(v30) = v55;
          *(void *)&long long v30 = WTF::fastMalloc((WTF *)v55);
          memcpy((void *)v30, v54, v55);
        }
        long long v31 = v56;
        long long v32 = v57;
        char v33 = v58;
        BOOL v10 = v59;
        if (v59) {
          *v59 += 2;
        }
        uint64_t v34 = v10;
        uint64_t v11 = v60;
        if (v60) {
          *v60 += 2;
        }
        uint64_t v35 = v11;
        long long v36 = v61;
        uint64_t v37 = 0;
        unsigned int v38 = 0;
        unsigned int v39 = v63;
        if (v63)
        {
          unsigned int v38 = v63;
          uint64_t v37 = (void *)WTF::fastMalloc((WTF *)v63);
          memcpy(v37, v62, v63);
        }
        *(void *)&v41[14] = *(void *)&v65[14];
        long long v40 = v64;
        *(_OWORD *)char v41 = *(_OWORD *)v65;
        int v12 = 1;
        char v42 = 1;
        if (v66) {
          WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v53, v4);
        }
        goto LABEL_21;
      }
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(WTF::StringImpl **)a2;
      uint64_t v6 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      int v5 = (WTF *)*((void *)a2 + 3);
      if (!v5)
      {
LABEL_29:
        LOBYTE(v21) = 0;
        char v42 = 0;
        goto LABEL_30;
      }
    }
    if (v6) {
      (*(void (**)(WTF *, WTF::StringImpl *))(*(void *)v5 + 16))(v5, v4);
    }
    goto LABEL_29;
  }
  uint64_t v13 = (uint64_t *)(a1 + 8);

  return _ZZN3IPC10Connection11cancelReplyIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN3WTF17CompletionHandlerIFvON7WebCore18CaptureSourceErrorEONS7_27RealtimeMediaSourceSettingsEONS7_31RealtimeMediaSourceCapabilitiesEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSK_(v13);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::RealtimeMediaSourceSettings>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 104))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::CaptureSourceError,WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceCapabilities>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 312))
  {
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)(a1 + 120), a2);
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    int v7 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v3);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *_ZZN3IPC10Connection11cancelReplyIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN3WTF17CompletionHandlerIFvON7WebCore18CaptureSourceErrorEONS7_27RealtimeMediaSourceSettingsEONS7_31RealtimeMediaSourceCapabilitiesEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSK_(uint64_t *a1)
{
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v12 = 4;
  long long v10 = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  __int16 v15 = 0;
  uint64_t v13 = 0x3FF0000000000000;
  memset(v14, 0, sizeof(v14));
  memset(v8, 0, sizeof(v8));
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *, _OWORD *, _OWORD *))(*(void *)v1 + 16))(v1, v16, v9, v8);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v8, v2);
  uint64_t v4 = (WTF::StringImpl *)*((void *)&v11 + 1);
  *((void *)&v11 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)v11;
  *(void *)&long long v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)&v10 + 1);
  *((void *)&v10 + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)v16[0];
  v16[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100](a3 + v6, (uint64_t *)(v5 + v6));
      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + v6 + 952, v7);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 736, v8);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 680, v9);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 624, v10);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + v6 + 568, v11);
      uint64_t result = *(void *)(v5 + v6);
      *(void *)(v5 + v6) = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      v6 += 976;
    }
    while (v5 + v6 != a2);
  }
  return result;
}

uint64_t std::pair<WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>,WebCore::MediaConstraints>::pair[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  uint64_t v5 = WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a1 + 8, (uint64_t)(a2 + 1));
  *(_OWORD *)(v5 + 944) = 0u;
  uint64_t v6 = a2[119];
  a2[119] = 0;
  *(void *)(v5 + 944) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 240);
  *((_DWORD *)a2 + 240) = 0;
  *(_DWORD *)(a1 + 960) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 241);
  *((_DWORD *)a2 + 241) = 0;
  *(_DWORD *)(a1 + 964) = v6;
  *(unsigned char *)(a1 + 968) = *((unsigned char *)a2 + 968);
  return a1;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F99E8;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9F99E8;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9F9A10;
  v4[1] = v3;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v14[2] = "operator()";
  v14[3] = 0;
  uint64_t isSettled = *(void *)(a1 + 8);
  if (isSettled)
  {
    uint64_t isSettled = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::isSettled(isSettled);
    uint64_t v6 = *(void *)(a1 + 8);
    if (!isSettled)
    {
      char v7 = 0;
      long long v8 = (WTF::NativePromiseBase *)(v6 + 48);
      __int16 v15 = (WTF::Lock *)(v6 + 48);
      char v16 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
      if (v7) {
        long long v8 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v9 = (unsigned char *)WTF::NativePromiseBase::logChannel(v8);
      if (*v9 && v9[16] >= 4u) {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v9, 4u, (WTF::Logger::LogSiteIdentifier *)v14, " settling ", v6);
      }
      uint64_t v10 = *(unsigned int *)(v6 + 88);
      if (v10 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9F99B0[v10])(&v17, v6 + 56);
      }
      *(void *)(v6 + 56) = v4;
      *(_DWORD *)(v6 + 88) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll((void *)v6, (atomic_uchar *volatile *)&v15);
      if (v16)
      {
        uint64_t result = v15;
        int v12 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v13 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*v13 && v13[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v13, 4u, (WTF::Logger::LogSiteIdentifier *)v14, " ignored already resolved or rejected ", v6);
  }
  return (WTF::Lock *)(*(uint64_t (**)(void *))(*v4 + 8))(v4);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9A10;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9F9A10;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::TakePhoto,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(IPC::Decoder **)(a1 + 8);
  if (!v3) {
    goto LABEL_27;
  }
  uint64_t v4 = *(void *)v3;
  if (!*(void *)v3) {
    goto LABEL_27;
  }
  unint64_t v5 = *((void *)v3 + 1);
  if (v5 <= *((void *)v3 + 2) - v4)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    long long v8 = (IPC::Decoder *)*((void *)v3 + 3);
    if (!v8) {
      goto LABEL_35;
    }
    goto LABEL_41;
  }
  uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 2);
  *((void *)v3 + 2) = v6 + 1;
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    unint64_t v21 = v5;
    uint64_t v22 = v4;
    goto LABEL_35;
  }
  if (!v7)
  {
    IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v38);
    if ((_BYTE)v39)
    {
      v33[0] = v38;
      int v34 = 1;
      goto LABEL_12;
    }
LABEL_20:
    uint64_t v14 = *(void *)v3;
    uint64_t v15 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v16 = *((void *)v3 + 3);
    if (v16) {
      BOOL v17 = v15 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
    }
    v30[0] = 0;
    char v32 = 0;
LABEL_26:
    uint64_t v18 = *(void *)v3;
    uint64_t v19 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v20 = *((void *)v3 + 3);
    if (v20)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
        if (v32) {
          goto LABEL_15;
        }
      }
    }
LABEL_27:
    uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v3, &v38);
  if (!v40)
  {
LABEL_19:
    uint64_t v11 = *(void *)v3;
    uint64_t v12 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v13 = *((void *)v3 + 3);
    if (v13 && v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
    }
    goto LABEL_20;
  }
  long long v8 = IPC::Decoder::decode<WTF::String>(v3, (uint64_t)&v36);
  unint64_t v5 = v37;
  if (!v37)
  {
    if (v40)
    {
      uint64_t v29 = v38;
      if (v38)
      {
        unsigned int v38 = 0;
        LODWORD(v39) = 0;
        WTF::fastFree(v29, v9);
      }
    }
    goto LABEL_19;
  }
  if (!v40)
  {
    __break(1u);
LABEL_41:
    if (!v5
      || (((*(void (**)(IPC::Decoder *))(*(void *)v8 + 16))(v8),
           uint64_t v25 = *(void *)v3,
           uint64_t v26 = *((void *)v3 + 1),
           uint64_t v27 = *((void *)v3 + 3),
           *(void *)uint64_t v3 = 0,
           *((void *)v3 + 1) = 0,
           v27)
        ? (BOOL v28 = v26 == 0)
        : (BOOL v28 = 1),
          v28))
    {
      unint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
      uint64_t v22 = *(void *)v3;
      unint64_t v21 = *((void *)v3 + 1);
    }
LABEL_35:
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v23 = *((void *)v3 + 3);
    if (v23) {
      BOOL v24 = v21 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v22, v21);
    }
    goto LABEL_20;
  }
  v33[0] = v38;
  v33[1] = v39;
  v33[2] = v36;
  int v34 = 0;
LABEL_12:
  char v35 = 1;
  v30[0] = 0;
  int v31 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v30, (uint64_t)v33);
  char v32 = 1;
  if (v35)
  {
    if (v34 != -1)
    {
      ((void (*)(WTF **, void *))off_1EE9F99C8[v34])(&v38, v33);
      if (!v32) {
        goto LABEL_26;
      }
    }
  }
LABEL_15:
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v30);
  if (v32)
  {
    if (v31 != -1) {
      return ((uint64_t (*)(void *, unsigned char *))off_1EE9F99C8[v31])(v33, v30);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 260);
  if (v4)
  {
    unint64_t v5 = *(uint64_t **)(v1 + 248);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    uint64_t v3 = v2[16] >= 4u;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, &v30);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    long long v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    long long v8 = v31;
    int v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = *((void *)v4 + 4);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      uint64_t v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      uint64_t v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        uint64_t v14 = *v13;
        if (v14) {
          break;
        }
        uint64_t v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          BOOL v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            uint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              int v34 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, v35);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          BOOL v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v25 = v32;
    char v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 62), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 56), v27);
  BOOL v28 = a1[54];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9F9A50[v28])(buf, a1 + 14);
  }
  a1[54] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 152);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F9A68[v3])(&v5, a2 + 8);
  }
  *(_DWORD *)(a2 + 152) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F9A88;
  WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9F9A88;
  WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  char v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9F9AE8;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    long long v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 216);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      uint64_t v13 = (WTF::NativePromiseBase *)(v11 + 48);
      char v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        uint64_t v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v11, &v69);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          BOOL v17 = v69;
          int v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          unsigned __int8 v43 = v70;
          unsigned __int8 v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          __int16 v44 = v71;
          char v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          char v45 = *((void *)v15 + 4);
          unsigned __int8 v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            long long v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            char v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            unsigned __int8 v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                unsigned __int8 v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            uint64_t v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  long long v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v11, v78);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      long long v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          long long v61 = v72;
          int v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 216);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9F9A50[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 216) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    uint64_t v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v11, &v70);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      unint64_t v21 = v70;
      unsigned __int8 v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v22 = v71;
      char v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = v72;
      int v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      BOOL v24 = *((void *)v19 + 4);
      uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        uint64_t v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        char v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        BOOL v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              int v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v31, v78);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  uint64_t v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      char v41 = v66;
      char v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  int v29 = (atomic_uint *)v30 + 2;
  *(void *)&v30[0] = 1;
  uint64_t v22 = (WTF::NativePromiseBase **)&v24;
  uint64_t v23 = 1;
  uint64_t v4 = *(void **)(a1 + 224);
  if (v4 == (void *)(a1 + 240))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 236);
    memcpy(&v24, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 224) = a1 + 240;
    uint64_t v22 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 236);
    LODWORD(v23) = *(_DWORD *)(a1 + 232);
  }
  HIDWORD(v23) = v5;
  DWORD1(v30[0]) = 0;
  *(void *)(a1 + 232) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v4);
  uint64_t v6 = *(void *)(a1 + 248);
  uint64_t v19 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 260);
  int v20 = *(_DWORD *)(a1 + 256);
  unsigned int v21 = v7;
  int v29 = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)&v30[0] = 0;
  *(void *)(a1 + 256) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
  if (HIDWORD(v23))
  {
    int v10 = v22;
    uint64_t v11 = 8 * HIDWORD(v23);
    do
    {
      char v12 = *v10++;
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    uint64_t v13 = v6 + 40 * v7;
    uint64_t v14 = a1 + 56;
    do
    {
      uint64_t v15 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      int v29 = v15;
      long long v16 = *(_OWORD *)(v6 + 24);
      v30[0] = *(_OWORD *)(v6 + 8);
      v30[1] = v16;
      if (v15)
      {
        atomic_fetch_add(v15 + 2, 1u);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = "<chained promise>";
        uint64_t v28 = 0;
        WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Storage>((uint64_t)v15, v14, (WTF::Logger::LogSiteIdentifier *)&v25);
        if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v15 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
        }
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = "<chained promise>";
        uint64_t v28 = 0;
        WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Storage>(0, v14, (WTF::Logger::LogSiteIdentifier *)&v25);
      }
      WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v29);
      v6 += 40;
    }
    while (v6 != v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v17);
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  unsigned int v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    unsigned int v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  long long v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 216);
  uint64_t v11 = *(unsigned int *)(a2 + 160);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9F9A50[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 216) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9F9AA0[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 160);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F9A50[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 160) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 160);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1EE9F9A50[v5])(v14, v4);
LABEL_8:
    *(unsigned char *)(v4 + 8) = 0;
    uint64_t v10 = v4 + 8;
    *(_DWORD *)(v10 + 152) = -1;
    *(_DWORD *)(v10 + 144) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(v10, a3 + 8);
    *(_DWORD *)(v10 + 152) = 1;
    return result;
  }
  v15[0] = 0;
  unsigned int v16 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3 + 8);
  long long v8 = (unsigned char *)(a2 + 8);
  if (v16 != -1)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 152);
    if (v9 != -1 && v9 == v16)
    {
      uint64_t result = ((uint64_t (*)(_WORD *, unsigned char *, uint64_t))off_1EE9F9AB8[v16])(v17, v15, a2 + 8);
      goto LABEL_22;
    }
    v17[0] = 0;
    if (!*((unsigned char *)v17 + v16) || (v17[0] = 0, v9 == -1))
    {
      char v12 = v15;
LABEL_20:
      LOBYTE(v17[0]) = 0;
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v8);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoCapabilities,WTF::String>>((uint64_t)v8, (uint64_t)v12);
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoCapabilities,WTF::String>>((uint64_t)v12, (uint64_t)v17);
      if (v18 != -1) {
        uint64_t result = ((uint64_t (*)(char *, _WORD *))off_1EE9F9A68[v18])(&v13, v17);
      }
      goto LABEL_22;
    }
LABEL_13:
    int v11 = *((unsigned __int8 *)v17 + v9);
    if (v11) {
      char v12 = v15;
    }
    else {
      char v12 = (unsigned char *)(a2 + 8);
    }
    if (!v11) {
      long long v8 = v15;
    }
    goto LABEL_20;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 152);
  if (v9 != -1)
  {
    v17[0] = 0;
    goto LABEL_13;
  }
LABEL_22:
  if (v16 != -1) {
    return ((uint64_t (*)(_WORD *, unsigned char *))off_1EE9F9A68[v16])(v17, v15);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 160);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F9A50[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 160) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoCapabilities,WTF::String>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 144);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F9A68[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 144) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 144);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9F9AC8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 144) = v5;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, long long *a2, long long *a3)
{
  long long v17 = a2[4];
  long long v18 = a2[5];
  long long v19 = a2[6];
  char v20 = *((unsigned char *)a2 + 112);
  long long v13 = *a2;
  long long v14 = a2[1];
  long long v15 = a2[2];
  long long v16 = a2[3];
  LOBYTE(v21[0]) = 0;
  char v22 = 0;
  if (*((unsigned char *)a2 + 136))
  {
    v21[0] = *((WTF **)a2 + 15);
    uint64_t v4 = (WTF *)*((void *)a2 + 16);
    *((void *)a2 + 15) = 0;
    *((void *)a2 + 16) = 0;
    v21[1] = v4;
    char v22 = 1;
  }
  long long v5 = *a3;
  long long v6 = a3[1];
  long long v7 = a3[3];
  a2[2] = a3[2];
  a2[3] = v7;
  *a2 = v5;
  a2[1] = v6;
  long long v8 = a3[4];
  long long v9 = a3[5];
  long long v10 = a3[6];
  *((unsigned char *)a2 + 112) = *((unsigned char *)a3 + 112);
  a2[5] = v9;
  a2[6] = v10;
  a2[4] = v8;
  std::__optional_storage_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)a2 + 120, (uint64_t *)a3 + 15);
  a3[4] = v17;
  a3[5] = v18;
  a3[6] = v19;
  *((unsigned char *)a3 + 112) = v20;
  *a3 = v13;
  a3[1] = v14;
  a3[2] = v15;
  a3[3] = v16;
  uint64_t result = (WTF *)std::__optional_storage_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)a3 + 120, (uint64_t *)v21);
  if (v22)
  {
    uint64_t result = v21[0];
    if (v21[0])
    {
      return (WTF *)WTF::fastFree(result, v12);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::FillLightMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(unsigned char *)(result + 16))
    {
      uint64_t result = *(void *)result;
      if (*(void *)v3)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        uint64_t result = WTF::fastFree((WTF *)result, a2);
      }
      uint64_t v4 = *a2;
      *a2 = 0;
      *(void *)uint64_t v3 = v4;
      LODWORD(v4) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(v3 + 8) = v4;
      LODWORD(v4) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v4;
    }
  }
  else if (*(unsigned char *)(result + 16))
  {
    uint64_t result = *(void *)result;
    if (*(void *)v3)
    {
      *(void *)uint64_t v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      uint64_t result = WTF::fastFree((WTF *)result, a2);
    }
    *(unsigned char *)(v3 + 16) = 0;
  }
  else
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v5;
    *(unsigned char *)(result + 16) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  long long v6 = a3[4];
  long long v7 = a3[5];
  long long v8 = a3[6];
  *(unsigned char *)(a2 + 112) = *((unsigned char *)a3 + 112);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  if (*((unsigned char *)a3 + 136))
  {
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0;
    uint64_t v9 = *((void *)a3 + 15);
    *((void *)a3 + 15) = 0;
    *(void *)(a2 + 120) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 32);
    *((_DWORD *)a3 + 32) = 0;
    *(_DWORD *)(a2 + 128) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 33);
    *((_DWORD *)a3 + 33) = 0;
    *(_DWORD *)(a2 + 132) = v9;
    *(unsigned char *)(a2 + 136) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoCapabilities,WTF::String>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9AE8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoCapabilities,WTF::String>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9F9AE8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoCapabilities,WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoCapabilities,WTF::String>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(IPC::Decoder **)(a1 + 8);
  if (!v3) {
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)v3;
  if (!*(void *)v3) {
    goto LABEL_25;
  }
  unint64_t v5 = *((void *)v3 + 1);
  if (v5 <= *((void *)v3 + 2) - v4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v11 = *((void *)v3 + 3);
    if (v11)
    {
      if (!v5
        || (((*(void (**)(uint64_t))(*(void *)v11 + 16))(v11),
             uint64_t v26 = *(void *)v3,
             uint64_t v27 = *((void *)v3 + 1),
             uint64_t v28 = *((void *)v3 + 3),
             *(void *)uint64_t v3 = 0,
             *((void *)v3 + 1) = 0,
             v28)
          ? (BOOL v29 = v27 == 0)
          : (BOOL v29 = 1),
            v29))
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
        uint64_t v10 = *(void *)v3;
        unint64_t v9 = *((void *)v3 + 1);
      }
    }
    goto LABEL_13;
  }
  long long v6 = (unsigned __int8 *)*((void *)v3 + 2);
  *((void *)v3 + 2) = v6 + 1;
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    unint64_t v9 = v5;
    uint64_t v10 = v4;
LABEL_13:
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v12 = *((void *)v3 + 3);
    if (v12) {
      BOOL v13 = v9 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
    }
    goto LABEL_18;
  }
  if (!v7)
  {
    IPC::Decoder::decode<WTF::String>(v3, (uint64_t)v30);
    int v8 = BYTE8(v30[0]);
    if (BYTE8(v30[0]))
    {
      *(void *)&v41[0] = *(void *)&v30[0];
      int v8 = 1;
      int v46 = 1;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  IPC::ArgumentCoder<WebCore::PhotoCapabilities,void>::decode(v3, (uint64_t)v30);
  if (!v35)
  {
    uint64_t v22 = *(void *)v3;
    uint64_t v23 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v24 = *((void *)v3 + 3);
    if (!v24 || !v23 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22), !v35))
    {
      int v8 = 0;
LABEL_28:
      v40[0] = 0;
      goto LABEL_29;
    }
  }
  v41[4] = v30[4];
  v41[5] = v30[5];
  v41[6] = v30[6];
  v41[0] = v30[0];
  v41[1] = v30[1];
  v41[2] = v30[2];
  char v42 = v31;
  v41[3] = v30[3];
  LOBYTE(v43) = 0;
  char v45 = 0;
  if (v34)
  {
    uint64_t v43 = v32;
    uint64_t v44 = v33;
    int v8 = 1;
    char v45 = 1;
    int v46 = 0;
  }
  else
  {
    int v46 = 0;
    int v8 = 1;
  }
LABEL_29:
  char v47 = v8;
  if (!v8)
  {
LABEL_18:
    uint64_t v14 = *(void *)v3;
    uint64_t v15 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v16 = *((void *)v3 + 3);
    if (v16) {
      BOOL v17 = v15 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
    }
    char v36 = 0;
    char v39 = 0;
LABEL_24:
    uint64_t v18 = *(void *)v3;
    uint64_t v19 = *((void *)v3 + 1);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v20 = *((void *)v3 + 3);
    if (v20)
    {
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
        if (v39) {
          goto LABEL_33;
        }
      }
    }
LABEL_25:
    uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 152) = 1;
    return result;
  }
  v37[0] = 0;
  int v38 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)v41);
  char v39 = 1;
  if (v47)
  {
    if (v46 != -1)
    {
      ((void (*)(_OWORD *, _OWORD *))off_1EE9F9A68[v46])(v30, v41);
      if (!v39) {
        goto LABEL_24;
      }
    }
  }
LABEL_33:
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v25 = a2 + 8;
  *(_DWORD *)(v25 + 144) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(v25, (uint64_t)v37);
  if (v39)
  {
    if (v38 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9F9A68[v38])(v40, v37);
    }
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 164);
  if (v4)
  {
    unint64_t v5 = *(uint64_t **)(v1 + 152);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    uint64_t v3 = v2[16] >= 4u;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, &v30);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    int v8 = v31;
    char v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    unint64_t v9 = *((void *)v4 + 4);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      uint64_t v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      BOOL v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        uint64_t v14 = *v13;
        if (v14) {
          break;
        }
        uint64_t v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          BOOL v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            uint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              char v34 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, v35);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          uint64_t v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v25 = v32;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 38), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 32), v27);
  uint64_t v28 = a1[30];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9F9B28[v28])(buf, a1 + 14);
  }
  a1[30] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 56);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F9B40[v3])(&v5, a2 + 8);
  }
  *(_DWORD *)(a2 + 56) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F9B60;
  WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9F9B60;
  WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  char v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9F9BC0;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    int v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 120);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      BOOL v13 = (WTF::NativePromiseBase *)(v11 + 48);
      char v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        BOOL v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        uint64_t v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v11, &v69);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          BOOL v17 = v69;
          int v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          uint64_t v43 = v70;
          unsigned __int8 v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          uint64_t v44 = v71;
          char v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          char v45 = *((void *)v15 + 4);
          int v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            uint64_t v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            char v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            int v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                int v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            uint64_t v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  long long v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v11, v78);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      long long v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          long long v61 = v72;
          int v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 120);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9F9B28[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 120) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    uint64_t v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v11, &v70);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      unsigned int v21 = v70;
      unsigned __int8 v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      uint64_t v22 = v71;
      char v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = v72;
      int v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = *((void *)v19 + 4);
      uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        uint64_t v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        char v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        uint64_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              char v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v31, v78);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  char v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      char v41 = v66;
      char v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  int v29 = (atomic_uint *)v30 + 2;
  *(void *)&v30[0] = 1;
  uint64_t v22 = (WTF::NativePromiseBase **)&v24;
  uint64_t v23 = 1;
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4 == (void *)(a1 + 144))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 140);
    memcpy(&v24, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 128) = a1 + 144;
    uint64_t v22 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 140);
    LODWORD(v23) = *(_DWORD *)(a1 + 136);
  }
  HIDWORD(v23) = v5;
  DWORD1(v30[0]) = 0;
  *(void *)(a1 + 136) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v4);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v19 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 164);
  int v20 = *(_DWORD *)(a1 + 160);
  unsigned int v21 = v7;
  int v29 = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)&v30[0] = 0;
  *(void *)(a1 + 160) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
  if (HIDWORD(v23))
  {
    int v10 = v22;
    uint64_t v11 = 8 * HIDWORD(v23);
    do
    {
      char v12 = *v10++;
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    uint64_t v13 = v6 + 40 * v7;
    uint64_t v14 = a1 + 56;
    do
    {
      uint64_t v15 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      int v29 = v15;
      long long v16 = *(_OWORD *)(v6 + 24);
      v30[0] = *(_OWORD *)(v6 + 8);
      v30[1] = v16;
      if (v15)
      {
        atomic_fetch_add(v15 + 2, 1u);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = "<chained promise>";
        uint64_t v28 = 0;
        WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Storage>((uint64_t)v15, v14, (WTF::Logger::LogSiteIdentifier *)&v25);
        if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v15 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
        }
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = "<chained promise>";
        uint64_t v28 = 0;
        WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Storage>(0, v14, (WTF::Logger::LogSiteIdentifier *)&v25);
      }
      WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v29);
      v6 += 40;
    }
    while (v6 != v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v17);
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  unsigned int v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    unsigned int v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  int v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 120);
  uint64_t v11 = *(unsigned int *)(a2 + 64);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9F9B28[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 120) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9F9B78[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 64);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F9B28[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 64);
  if (v5 == -1) {
    goto LABEL_13;
  }
  if (v5 != 1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1EE9F9B28[v5])(v18, v4);
LABEL_13:
    *(unsigned char *)(v4 + 8) = 0;
    uint64_t v12 = v4 + 8;
    *(_DWORD *)(v12 + 56) = -1;
    *(_DWORD *)(v12 + 48) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(v12, a3 + 8);
    *(_DWORD *)(v12 + 56) = 1;
    return result;
  }
  v19[0] = 0;
  unsigned int v20 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v19, a3 + 8);
  uint64_t v8 = *(unsigned int *)(a2 + 56);
  if (v20 != -1 || v8 != -1)
  {
    BOOL v9 = (unsigned char *)(a2 + 8);
    BOOL v10 = v20 == -1;
    if (v20 == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v20;
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, unsigned char *))off_1EE9F9B90[v11])(v21, v19, v9);
    }
    else
    {
      BOOL v14 = v20 - 1 < 0xFFFFFFFE || (v8 + 1) < 2;
      if (v14) {
        char v15 = v19;
      }
      else {
        char v15 = (unsigned char *)(a2 + 8);
      }
      if (v14) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = v19;
      }
      v21[0] = 0;
      int v22 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v21, (uint64_t)v16);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoSettings,WTF::String>>((uint64_t)v16, (uint64_t)v15);
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoSettings,WTF::String>>((uint64_t)v15, (uint64_t)v21);
      if (v22 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9F9B40[v22])(&v17, v21);
      }
    }
  }
  if (v20 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9F9B40[v20])(v21, v19);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 64);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F9B28[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 64) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WebCore::PhotoSettings,WTF::String>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 48);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F9B40[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 48) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 48);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9F9BA0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore13PhotoSettingsEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, long long *a2, long long *a3)
{
  long long v3 = *a2;
  *(_OWORD *)char v7 = a2[1];
  *(_OWORD *)&v7[16] = a2[2];
  long long v4 = *(long long *)((char *)a3 + 26);
  long long v5 = a3[1];
  *a2 = *a3;
  a2[1] = v5;
  *(long long *)((char *)a2 + 26) = v4;
  *a3 = v3;
  a3[1] = *(_OWORD *)v7;
  __n128 result = *(__n128 *)&v7[10];
  *(long long *)((char *)a3 + 26) = *(_OWORD *)&v7[10];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore13PhotoSettingsEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoSettings,WTF::String>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9BC0;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoSettings,WTF::String>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9F9BC0;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebKit::RemoteRealtimeMediaSourceProxy::PromiseConverter,Messages::UserMediaCaptureManagerProxy::GetPhotoSettings,WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WebCore::PhotoSettings,WTF::String>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    goto LABEL_31;
  }
  uint64_t v4 = *v3;
  if (!*v3) {
    goto LABEL_31;
  }
  unint64_t v5 = v3[1];
  if (v5 <= v3[2] - v4)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v13 = v3[3];
    if (v13)
    {
      if (!v5
        || (((*(void (**)(uint64_t))(*(void *)v13 + 16))(v13),
             uint64_t v23 = *v3,
             uint64_t v24 = v3[1],
             uint64_t v25 = v3[3],
             uint64_t *v3 = 0,
             v3[1] = 0,
             v25)
          ? (BOOL v26 = v24 == 0)
          : (BOOL v26 = 1),
            v26))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
        uint64_t v12 = *v3;
        uint64_t v11 = v3[1];
      }
    }
    goto LABEL_19;
  }
  char v6 = (unsigned __int8 *)v3[2];
  v3[2] = (uint64_t)(v6 + 1);
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    uint64_t v11 = v5;
    uint64_t v12 = v4;
LABEL_19:
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v14 = v3[3];
    if (v14) {
      BOOL v15 = v11 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12, v11);
    }
    goto LABEL_24;
  }
  if (v7)
  {
    IPC::Decoder::decode<WebCore::PhotoSettings>(v3, (uint64_t)v27);
    int v8 = v28;
    if (v28)
    {
      v34[0] = v27[0];
      v34[1] = v27[1];
      v34[2] = v27[2];
      int v35 = 0;
      int v8 = 1;
      goto LABEL_11;
    }
  }
  else
  {
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v3, (uint64_t)v27);
    int v8 = BYTE8(v27[0]);
    if (BYTE8(v27[0]))
    {
      *(void *)&v34[0] = *(void *)&v27[0];
      int v8 = 1;
      int v35 = 1;
      goto LABEL_11;
    }
  }
  v33[0] = 0;
LABEL_11:
  char v36 = v8;
  if (!v8)
  {
LABEL_24:
    uint64_t v16 = *v3;
    uint64_t v17 = v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v18 = v3[3];
    if (v18) {
      BOOL v19 = v17 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
    }
    char v29 = 0;
    char v32 = 0;
LABEL_30:
    uint64_t v20 = *v3;
    uint64_t v21 = v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v22 = v3[3];
    if (v22)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
        if (v32) {
          goto LABEL_15;
        }
      }
    }
LABEL_31:
    uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(a2 + 56) = 1;
    return result;
  }
  v30[0] = 0;
  int v31 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v30, (uint64_t)v34);
  char v32 = 1;
  if (v36)
  {
    if (v35 != -1)
    {
      ((void (*)(_OWORD *, _OWORD *))off_1EE9F9B40[v35])(v27, v34);
      if (!v32) {
        goto LABEL_30;
      }
    }
  }
LABEL_15:
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v9 = a2 + 8;
  *(_DWORD *)(v9 + 48) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v30);
  if (v32)
  {
    if (v31 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9F9B40[v31])(v33, v30);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PhotoSettings>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PhotoSettings,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSourceProxy::whenReady(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&)> &&)::$_0,void,WebCore::CaptureSourceError &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F9BE8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSourceProxy::whenReady(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&)> &&)::$_0,void,WebCore::CaptureSourceError &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F9BE8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeMediaSourceProxy::whenReady(WTF::CompletionHandler<void ()(WebCore::CaptureSourceError &&)> &&)::$_0,void,WebCore::CaptureSourceError &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v4 += 2;
  }
  BOOL v10 = v4;
  __int16 v11 = *(_WORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v10);
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  unsigned int v7 = v10;
  BOOL v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::RemoteRealtimeVideoSource::clone(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 294) || *(unsigned char *)(v2 + 1417))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v2 + 312));
    uint64_t v5 = *v3;
    uint64_t *v3 = v2;
    if (v5)
    {
      char v6 = *(atomic_uchar **)(v5 + 312);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(v6);
    }
  }
  else
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0xB50);
    uint64_t v8 = WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    WebKit::RemoteRealtimeMediaSourceProxy::RemoteRealtimeMediaSourceProxy((uint64_t)v68, v8, v2 + 336, *(unsigned __int8 *)(v2 + 376), (unsigned char *)(v2 + 384));
    uint64_t v9 = WebCore::RealtimeMediaSource::deviceIDHashSalts((WebCore::RealtimeMediaSource *)v2);
    BOOL v10 = *(WTF::StringImpl **)v9;
    if (*(void *)v9) {
      *(_DWORD *)v10 += 2;
    }
    char v92 = v10;
    __int16 v11 = *(WTF::StringImpl **)(v9 + 8);
    if (v11) {
      *(_DWORD *)v11 += 2;
    }
    int v93 = v11;
    if (!*(void *)(v2 + 72)) {
      goto LABEL_76;
    }
    uint64_t v12 = *(void *)(v2 + 1424);
    WebCore::RealtimeMediaSource::RealtimeMediaSource();
    *(void *)(v7 + 304) = &unk_1EE9ED2E0;
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)uint64_t v13 = 0;
    *(_OWORD *)(v13 + 8) = xmmword_1994F5F10;
    *(void *)(v13 + 24) = v7;
    *(void *)uint64_t v7 = &unk_1EE9F93A0;
    *(void *)(v7 + 304) = &unk_1EE9F9558;
    *(void *)(v7 + 312) = v13;
    *(void *)(v7 + 320) = *(void *)v68;
    long long v14 = *(_OWORD *)&v68[8];
    *(_OWORD *)&v68[8] = 0u;
    *(_OWORD *)(v7 + 328) = v14;
    *(unsigned char *)(v7 + 344) = v68[24];
    long long v15 = *(_OWORD *)v69;
    *(_OWORD *)int v69 = 0u;
    *(_OWORD *)(v7 + 352) = v15;
    *(_DWORD *)(v7 + 368) = v70;
    *(unsigned char *)(v7 + 376) = (_BYTE)v71;
    WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v7 + 384, (uint64_t)&v72);
    uint64_t v17 = v82;
    uint64_t v82 = 0;
    *(void *)(v7 + 1328) = v17;
    uint64_t v18 = v83;
    uint64_t v83 = 0;
    *(void *)(v7 + 1336) = v18;
    *(unsigned char *)(v7 + 1344) = v84;
    *(void *)(v7 + 1376) = 0;
    *(_OWORD *)(v7 + 1352) = v85;
    long long v85 = 0u;
    *(void *)(v7 + 1368) = v86;
    uint64_t v86 = 0;
    *(_DWORD *)(v7 + 1376) = v87;
    int v87 = 0;
    *(unsigned char *)(v7 + 1384) = v88;
    long long v19 = v89;
    long long v89 = 0u;
    *(_OWORD *)(v7 + 1392) = v19;
    *(_WORD *)(v7 + 1408) = v90;
    *(_WORD *)(v7 + 1416) = v91;
    *(void *)(v7 + 1424) = v12;
    *(unsigned char *)(v7 + 1432) = 0;
    *(unsigned char *)(v7 + 2400) = 0;
    *(unsigned char *)(v7 + 2504) = 0;
    *(_OWORD *)(v7 + 2472) = 0u;
    *(_OWORD *)(v7 + 2488) = 0u;
    *(_OWORD *)(v7 + 2440) = 0u;
    *(_OWORD *)(v7 + 2456) = 0u;
    *(_OWORD *)(v7 + 2408) = 0u;
    *(_OWORD *)(v7 + 2424) = 0u;
    *(void *)(v7 + 2590) = 0;
    *(_OWORD *)(v7 + 2576) = 0u;
    *(_OWORD *)(v7 + 2560) = 0u;
    *(_OWORD *)(v7 + 2544) = 0u;
    *(_OWORD *)(v7 + 2528) = 0u;
    *(_OWORD *)(v7 + 2512) = 0u;
    *(unsigned char *)(v7 + 2600) = 0;
    *(unsigned char *)(v7 + 2744) = 0;
    *(void *)(v7 + 2757) = 0;
    *(void *)(v7 + 2752) = 0;
    *(unsigned char *)(v7 + 2784) = 0;
    *(_OWORD *)(v7 + 2768) = 0u;
    *(void *)(v7 + 2808) = 0;
    *(_OWORD *)(v7 + 2792) = 0u;
    *(_WORD *)(v7 + 2816) = 4;
    *(unsigned char *)(v7 + 2818) = 0;
    *(void *)(v7 + 2824) = 0x3FF0000000000000;
    *(void *)(v7 + 2846) = 0;
    *(_OWORD *)(v7 + 2832) = 0u;
    *(void *)uint64_t v7 = &unk_1EE9F9598;
    *(void *)(v7 + 304) = &unk_1EE9F9750;
    *(void *)(v7 + 2888) = 0;
    *(_OWORD *)(v7 + 2856) = 0u;
    *(_OWORD *)(v7 + 2872) = 0u;
    uint64_t v20 = *(uint64_t **)(a1 + 16);
    uint64_t v21 = *v20;
    *uint64_t v20 = v7;
    if (v21) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v21 + 312));
    }
    uint64_t v22 = v93;
    int v93 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v16);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v92;
    char v92 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v16);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    WebKit::RemoteRealtimeMediaSourceProxy::~RemoteRealtimeMediaSourceProxy((atomic_uchar *volatile **)v68);
    uint64_t v24 = **(void **)(a1 + 16);
    uint64_t v25 = (unsigned char *)(v24 + 8);
    uint64_t v26 = *(void *)(v2 + 32);
    if (v26)
    {
      if (v26 == v2 + 8)
      {
        *(void *)&v68[24] = v68;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)(v2 + 8) + 24))(v2 + 8, v68);
      }
      else
      {
        *(void *)&v68[24] = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
      }
    }
    else
    {
      *(void *)&v68[24] = 0;
    }
    if (v68 != v25)
    {
      uint64_t v27 = *(void *)&v68[24];
      unsigned __int8 v28 = *(unsigned char **)(v24 + 32);
      if (*(unsigned char **)&v68[24] == v68)
      {
        if (v28 == v25)
        {
          (*(void (**)(unsigned char *, WTF::StringImpl **))(*(void *)v68 + 24))(v68, &v92);
          (*(void (**)(void))(**(void **)&v68[24] + 32))(*(void *)&v68[24]);
          *(void *)&v68[24] = 0;
          (*(void (**)(void, unsigned char *))(**(void **)(v24 + 32) + 24))(*(void *)(v24 + 32), v68);
          (*(void (**)(void))(**(void **)(v24 + 32) + 32))(*(void *)(v24 + 32));
          *(void *)(v24 + 32) = 0;
          *(void *)&v68[24] = v68;
          (*((void (**)(WTF::StringImpl **, unsigned char *))v92 + 3))(&v92, v25);
          (*((void (**)(WTF::StringImpl **))v92 + 4))(&v92);
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *))(*(void *)v68 + 24))(v68, v25);
          (*(void (**)(void))(**(void **)&v68[24] + 32))(*(void *)&v68[24]);
          *(void *)&v68[24] = *(void *)(v24 + 32);
        }
        *(void *)(v24 + 32) = v25;
      }
      else if (v28 == v25)
      {
        (*(void (**)(unsigned char *, unsigned char *))(*(void *)(v24 + 8) + 24))(v25, v68);
        (*(void (**)(void))(**(void **)(v24 + 32) + 32))(*(void *)(v24 + 32));
        *(void *)(v24 + 32) = *(void *)&v68[24];
        *(void *)&v68[24] = v68;
      }
      else
      {
        *(void *)&v68[24] = *(void *)(v24 + 32);
        *(void *)(v24 + 32) = v27;
      }
    }
    if (*(unsigned char **)&v68[24] == v68)
    {
      (*(void (**)(unsigned char *))(*(void *)v68 + 32))(v68);
    }
    else if (*(void *)&v68[24])
    {
      (*(void (**)(void))(**(void **)&v68[24] + 40))();
    }
    uint64_t v29 = **(void **)(a1 + 16);
    long long v30 = *(_OWORD *)(v2 + 2768);
    *(_OWORD *)char v68 = *(_OWORD *)(v2 + 2752);
    *(_OWORD *)&v68[16] = v30;
    LOBYTE(v69[0]) = *(unsigned char *)(v2 + 2784);
    int v31 = *(WTF::StringImpl **)(v2 + 2792);
    if (v31) {
      *(_DWORD *)v31 += 2;
    }
    v69[1] = v31;
    char v32 = *(WTF::StringImpl **)(v2 + 2800);
    if (v32) {
      *(_DWORD *)v32 += 2;
    }
    unsigned __int8 v70 = v32;
    uint64_t v33 = *(WTF::StringImpl **)(v2 + 2808);
    if (v33) {
      *(_DWORD *)v33 += 2;
    }
    char v71 = v33;
    long long v34 = *(_OWORD *)(v2 + 2832);
    long long v72 = *(_OWORD *)(v2 + 2816);
    *(_OWORD *)unsigned __int8 v73 = v34;
    *(void *)&v73[14] = *(void *)(v2 + 2846);
    WebKit::RemoteRealtimeMediaSource::setSettings(v29, (uint64_t)v68);
    char v36 = v71;
    char v71 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v35);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    uint64_t v37 = v70;
    unsigned __int8 v70 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v35);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    int v38 = v69[1];
    v69[1] = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v35);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    uint64_t v39 = **(void **)(a1 + 16);
    long long v40 = *(_OWORD *)(v2 + 2424);
    *(_OWORD *)char v68 = *(_OWORD *)(v2 + 2408);
    *(_OWORD *)&v68[16] = v40;
    *(_OWORD *)int v69 = *(_OWORD *)(v2 + 2440);
    char v41 = (WTF *)*(unsigned int *)(v2 + 2468);
    unsigned __int8 v70 = 0;
    LODWORD(v71) = 0;
    HIDWORD(v71) = v41;
    if (v41)
    {
      char v42 = (WTF::StringImpl *)WTF::fastMalloc(v41);
      LODWORD(v71) = v41;
      unsigned __int8 v70 = v42;
      memcpy(v42, *(const void **)(v2 + 2456), *(unsigned int *)(v2 + 2468));
    }
    v73[16] = *(unsigned char *)(v2 + 2504);
    long long v43 = *(_OWORD *)(v2 + 2488);
    long long v72 = *(_OWORD *)(v2 + 2472);
    *(_OWORD *)unsigned __int8 v73 = v43;
    uint64_t v44 = *(_DWORD **)(v2 + 2512);
    if (v44) {
      *v44 += 2;
    }
    char v74 = v44;
    char v45 = *(_DWORD **)(v2 + 2520);
    if (v45) {
      *v45 += 2;
    }
    long long v76 = *(_OWORD *)(v2 + 2528);
    int v46 = (WTF *)*(unsigned int *)(v2 + 2556);
    int v77 = 0;
    int v78 = 0;
    int v75 = v45;
    int v79 = (int)v46;
    if (v46)
    {
      char v47 = (void *)WTF::fastMalloc(v46);
      int v78 = (int)v46;
      int v77 = v47;
      memcpy(v47, *(const void **)(v2 + 2544), *(unsigned int *)(v2 + 2556));
    }
    long long v80 = *(_OWORD *)(v2 + 2560);
    v81[0] = *(_OWORD *)(v2 + 2576);
    *(void *)((char *)v81 + 14) = *(void *)(v2 + 2590);
    WebKit::RemoteRealtimeMediaSource::setCapabilities(v39, (long long *)v68);
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v68, v48);
    uint64_t v49 = *(void *)(v2 + 1424);
    int v50 = *(uint64_t **)(a1 + 16);
    uint64_t v51 = *v50;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(*v50 + 312));
    *(void *)char v68 = v51;
    WebKit::UserMediaCaptureManager::addSource(v49, (uint64_t *)v68);
    if (*(void *)v68) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(*(void *)v68 + 312));
    }
    uint64_t v52 = *(void *)(v2 + 1424) + 144;
    uint64_t v53 = *(uint64_t **)(a1 + 16);
    uint64_t v54 = *v53;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(*v53 + 312));
    *(void *)char v68 = v54;
    WebKit::RemoteCaptureSampleManager::addSource(v52, (uint64_t *)v68);
    uint64_t v55 = *(void *)v68;
    *(void *)char v68 = 0;
    if (v55) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v55 + 312));
    }
    uint64_t v56 = *(void *)(v2 + 72);
    if (!v56) {
LABEL_76:
    }
      __break(1u);
    long long v57 = (uint64_t *)(v2 + 320);
    char v92 = *(WTF::StringImpl **)(**(void **)(a1 + 16) + 320);
    uint64_t v67 = v56;
    uint64_t v58 = *(void *)(v2 + 328);
    long long v59 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v59 = 1496;
    *((void *)v59 + 1) = 0;
    *((void *)v59 + 66) = (char *)v59 + 16;
    *((void *)v59 + 67) = 512;
    *((void *)v59 + 68) = 0;
    *((void *)v59 + 70) = 0;
    *((void *)v59 + 69) = 0;
    IPC::Encoder::encodeHeader(v59);
    *(void *)char v68 = v59;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v59, v57);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v59, (uint64_t *)&v92);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v59, &v67);
    IPC::Connection::sendMessageImpl(v58, (uint64_t *)v68, 0, 0);
    long long v61 = *(IPC::Encoder **)v68;
    *(void *)char v68 = 0;
    if (v61)
    {
      IPC::Encoder::~Encoder(v61, v60);
      WTF::fastFree(v63, v64);
    }
    uint64_t v62 = *(void *)(**(void **)(a1 + 16) + 32);
    v68[0] = 1;
    if (v62)
    {
      return (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v62 + 48))(v62);
    }
    else
    {
      long long v65 = (uint64_t *)std::__throw_bad_function_call[abi:sn180100]();
      return (atomic_uchar *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v65, v66);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::variant<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = v7 + 16;
    do
    {
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 16) = 0;
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    do
    {
      long long v14 = (uint64_t *)(v4 + 24 * v11);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v22 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
          int v26 = 1;
          do
          {
            unsigned int v27 = v25;
            unsigned __int8 v28 = (uint64_t *)(v20 + 24 * v25);
            unsigned int v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          unsigned int v29 = v27;
          uint64_t v30 = v20 + 24 * v27;
          unsigned int v33 = *(_DWORD *)(v30 + 16);
          char v32 = (_DWORD *)(v30 + 16);
          uint64_t v31 = v33;
          if (v33 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9F98F8[v31])(&v44, v20 + 24 * v27 + 8);
          }
          _DWORD *v32 = -1;
          *unsigned __int8 v28 = *v14;
          uint64_t v34 = v20 + 24 * v29;
          uint64_t v35 = v4 + 24 * v11;
          uint64_t v36 = v35 + 8;
          *(unsigned char *)(v34 + 8) = 0;
          _DWORD *v32 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,(std::__variant_detail::_Trait)1>>(v34 + 8, v35 + 8);
          unsigned int v39 = *(_DWORD *)(v35 + 16);
          int v38 = (_DWORD *)(v35 + 16);
          uint64_t v37 = v39;
          if (v39 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9F98F8[v37])(&v45, v36);
          }
          *int v38 = -1;
          if (v14 == a3) {
            uint64_t v12 = v28;
          }
        }
        else
        {
          uint64_t v16 = v4 + 24 * v11;
          unsigned int v19 = *(_DWORD *)(v16 + 16);
          uint64_t v18 = (_DWORD *)(v16 + 16);
          uint64_t v17 = v19;
          if (v19 != -1) {
            ((void (*)(char *, uint64_t))off_1EE9F98F8[v17])(&v43, v4 + 24 * v11 + 8);
          }
          _DWORD *v18 = -1;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebKit::RemoteRealtimeAudioSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeAudioSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeAudioSource>>,WTF::Ref<WebKit::RemoteRealtimeVideoSource,WTF::RawPtrTraits<WebKit::RemoteRealtimeVideoSource>,WTF::DefaultRefDerefTraits<WebKit::RemoteRealtimeVideoSource>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F98F8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9F9C38[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(unsigned int *)(*(void *)result + 8);
  if (v3 != -1)
  {
    if (!v3)
    {
      *a2 = 0;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F98F8[v3])(&v4, v2);
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

atomic_uchar *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(atomic_uchar *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, uint64_t))off_1EE9F98F8[v5])(&v10, v4);
LABEL_8:
    uint64_t v9 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v9;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    uint64_t v8 = *(atomic_uchar **)(v7 + 312);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(v8);
  }
  return result;
}

atomic_uchar *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN6WebKit25RemoteRealtimeAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_25RemoteRealtimeVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(atomic_uchar *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(char *, uint64_t))off_1EE9F98F8[v5])(&v10, v4);
LABEL_8:
    uint64_t v9 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v9;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    uint64_t v8 = *(atomic_uchar **)(v7 + 312);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRealtimeMediaSource,(WTF::DestructionThread)2>(v8);
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManager::didReceiveMessage(uint64_t *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5E3:
      uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v6) {
        goto LABEL_51;
      }
      uint64_t v7 = v5;
      unsigned __int16 v8 = IPC::Decoder::decode<WebCore::MediaConstraintType>((uint64_t *)a3);
      if (v8 < 0x100u) {
        goto LABEL_51;
      }
      char v9 = v8;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v85);
      if (!BYTE8(v85[0])) {
        goto LABEL_51;
      }
      uint64_t v54 = v7;
      LOBYTE(v55) = v9;
      *(void *)&v56[0] = *(void *)&v85[0];
      BYTE8(v56[0]) = 1;
      this = (uint64_t *)WebKit::UserMediaCaptureManager::applyConstraintsFailed(v4, v7, v9, (uint64_t *)v56);
      if (BYTE8(v56[0]))
      {
        this = *(uint64_t **)&v56[0];
        *(void *)&v56[0] = 0;
        if (this) {
          goto LABEL_66;
        }
      }
      return this;
    case 0x5E4:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RealtimeMediaSourceSettings>>((uint64_t)&v54, (uint64_t *)a3);
      if (v61[16]) {
        WebKit::UserMediaCaptureManager::applyConstraintsSucceeded(v4, v54, (uint64_t)&v55);
      }
      return (uint64_t *)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RealtimeMediaSourceSettings>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v11);
    case 0x5E5:
      uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v13) {
        goto LABEL_51;
      }
      uint64_t v14 = v12;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v76);
      if (!v77) {
        goto LABEL_51;
      }
      IPC::Decoder::decode<WebCore::RealtimeMediaSourceSettings>((uint64_t *)a3, (uint64_t)v78);
      if (v84 && (uint64_t v16 = IPC::Decoder::decode<WebCore::RealtimeMediaSourceCapabilities>((uint64_t *)a3, v85), v98))
      {
        unint64_t v18 = v77;
        if (!v77 || (unint64_t v18 = v84) == 0)
        {
          __break(1u);
          goto LABEL_86;
        }
        unsigned int v19 = v76;
        long long v76 = 0;
        uint64_t v54 = v14;
        uint64_t v55 = v19;
        v56[0] = v78[0];
        v56[1] = v78[1];
        char v57 = v79;
        long long v20 = v80;
        long long v80 = 0u;
        *(_OWORD *)uint64_t v58 = v20;
        int v21 = v81;
        char v81 = 0;
        long long v59 = v21;
        *(void *)&v61[14] = *(void *)&v83[14];
        *(_OWORD *)long long v61 = *(_OWORD *)v83;
        long long v60 = v82;
        v62[2] = v85[2];
        v62[1] = v85[1];
        v62[0] = v85[0];
        long long v63 = 0u;
        HIDWORD(v63) = v87;
        if (v87)
        {
          DWORD2(v63) = v87;
          *(void *)&long long v63 = WTF::fastMalloc((WTF *)v87);
          memcpy((void *)v63, v86, v87);
        }
        long long v64 = v88;
        long long v65 = v89;
        char v66 = v90;
        unint64_t v22 = v91;
        if (v91) {
          *v91 += 2;
        }
        uint64_t v67 = v22;
        unint64_t v23 = v92;
        if (v92) {
          *v92 += 2;
        }
        char v68 = v23;
        long long v69 = v93;
        unsigned __int8 v70 = 0;
        unsigned int v71 = 0;
        unsigned int v72 = v95;
        if (v95)
        {
          unsigned int v71 = v95;
          unsigned __int8 v70 = (void *)WTF::fastMalloc((WTF *)v95);
          memcpy(v70, v94, v95);
        }
        *(void *)&v74[14] = *(void *)&v97[14];
        long long v73 = v96;
        *(_OWORD *)char v74 = *(_OWORD *)v97;
        int v24 = 1;
        char v75 = 1;
        if (v98) {
          WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v85, v15);
        }
      }
      else
      {
        int v24 = 0;
        LOBYTE(v54) = 0;
        char v75 = 0;
      }
      std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v78, (WTF::StringImpl *)v15);
      if (!v77) {
        goto LABEL_45;
      }
      uint64_t v34 = v76;
      long long v76 = 0;
      if (!v34) {
        goto LABEL_45;
      }
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
LABEL_45:
        if (v24) {
          goto LABEL_46;
        }
LABEL_51:
        uint64_t v37 = *(void *)a3;
        uint64_t v38 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (uint64_t *)*((void *)a3 + 3);
        if (this) {
          BOOL v39 = v38 == 0;
        }
        else {
          BOOL v39 = 1;
        }
        if (!v39) {
          return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*this + 16))(this, v37);
        }
        return this;
      }
      WTF::StringImpl::destroy(v34, v33);
      if (!v24) {
        goto LABEL_51;
      }
LABEL_46:
      this = WebKit::UserMediaCaptureManager::sourceConfigurationChanged(v4, v54, (const WTF::String *)&v55, (uint64_t)v56, v62);
      if (v75)
      {
        WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v62, v35);
        uint64_t v36 = v59;
        long long v59 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v10);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
        long long v40 = v58[1];
        v58[1] = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2) {
            WTF::StringImpl::destroy(v40, v10);
          }
          else {
            *(_DWORD *)v40 -= 2;
          }
        }
        char v41 = v58[0];
        v58[0] = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, v10);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
        this = (uint64_t *)v55;
        uint64_t v55 = 0;
        if (this)
        {
LABEL_66:
          if (*(_DWORD *)this == 2) {
            return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
      return this;
    case 0x5E6:
      uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v26) {
        goto LABEL_76;
      }
      unint64_t v27 = *((void *)a3 + 1);
      uint64_t v28 = *(void *)a3;
      unint64_t v29 = *((void *)a3 + 2) - *(void *)a3;
      if (v27 <= v29)
      {
        unint64_t v18 = 0;
        uint64_t v17 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v42 = *((void *)a3 + 3);
        if (v42)
        {
          if (v27)
          {
            (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
            uint64_t v17 = *(void *)a3;
            unint64_t v18 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v18 = 0;
            uint64_t v17 = 0;
          }
        }
      }
      else
      {
        uint64_t v30 = (unsigned __int8 *)(v28 + v29);
        *((void *)a3 + 2) = v30 + 1;
        if (v28)
        {
          unsigned int v31 = *v30;
          if (v31 < 2)
          {
            if (v27 <= (unint64_t)&v30[-v28 + 1])
            {
              unint64_t v44 = 0;
              uint64_t v45 = 0;
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v46 = *((void *)a3 + 3);
              if (v46)
              {
                (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
                unint64_t v44 = 0;
                uint64_t v51 = *(void *)a3;
                uint64_t v52 = *((void *)a3 + 1);
                uint64_t v53 = *((void *)a3 + 3);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v45 = 0;
                if (v53)
                {
                  if (v52)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v51);
                    uint64_t v45 = *(void *)a3;
                    unint64_t v44 = *((void *)a3 + 1);
                  }
                }
              }
            }
            else
            {
              *((void *)a3 + 2) = v30 + 2;
              unsigned int v32 = v30[1];
              if (v32 < 2)
              {
                return WebKit::UserMediaCaptureManager::sourceMutedChanged(v4, v25, v31 != 0, v32 != 0);
              }
              unint64_t v44 = v27;
              uint64_t v45 = v28;
            }
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v47 = *((void *)a3 + 3);
            if (v47 && v44) {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v47 + 16))(v47, v45, v44);
            }
LABEL_76:
            uint64_t v48 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            this = (uint64_t *)*((void *)a3 + 3);
            if (this) {
              BOOL v49 = v48 == 0;
            }
            else {
              BOOL v49 = 1;
            }
            if (!v49)
            {
              int v50 = *(uint64_t (**)(void))(*this + 16);
              return (uint64_t *)v50();
            }
            return this;
          }
LABEL_71:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v43 = *((void *)a3 + 3);
          if (v43 && v27) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v28);
          }
          goto LABEL_76;
        }
        unint64_t v18 = v27;
        uint64_t v17 = 0;
      }
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v16 = (WTF *)*((void *)a3 + 3);
      if (v16)
      {
LABEL_86:
        if (v18)
        {
          (*(void (**)(WTF *, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v17, v18);
          uint64_t v28 = *(void *)a3;
          unint64_t v27 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v27 = 0;
          uint64_t v28 = 0;
        }
      }
      goto LABEL_71;
    case 0x5E7:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RealtimeMediaSourceSettings>>((uint64_t)&v54, (uint64_t *)a3);
      if (v61[16]) {
        WebKit::UserMediaCaptureManager::sourceSettingsChanged(v4, v54, (uint64_t)&v55);
      }
      return (uint64_t *)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RealtimeMediaSourceSettings>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v11);
    case 0x5E8:
      this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v54);
      if (LOBYTE(v56[0])) {
        return WebKit::UserMediaCaptureManager::sourceStopped(v4, v54, v55);
      }
      return this;
    default:
      return this;
  }
}

uint64_t *non-virtual thunk to'WebKit::UserMediaCaptureManager::didReceiveMessage(WebKit::UserMediaCaptureManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::UserMediaCaptureManager::didReceiveMessage((uint64_t *)this - 1, a2, a3);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RealtimeMediaSourceSettings>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5)
  {
    uint64_t v6 = v4;
    IPC::Decoder::decode<WebCore::RealtimeMediaSourceSettings>(a2, (uint64_t)v15);
    if (v21)
    {
      *(void *)(a1 + 102) = *(void *)&v20[14];
      long long v8 = v15[1];
      *(_OWORD *)(a1 + 8) = v15[0];
      *(_OWORD *)(a1 + 24) = v8;
      *(_OWORD *)(a1 + 48) = v17;
      long long v9 = v19;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)v20;
      *(void *)a1 = v6;
      *(unsigned char *)(a1 + 40) = v16;
      long long v17 = 0uLL;
      uint64_t v10 = v18;
      uint64_t v18 = 0;
      *(void *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 72) = v9;
      *(unsigned char *)(a1 + 112) = 1;
      return std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v7);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 112) = 0;
    std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v7);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 112) = 0;
  }
  uint64_t v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v14();
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RealtimeMediaSourceSettings>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    char v5 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

void WebKit::UserMediaCaptureManagerProxy::didReceiveMessage(WebKit::UserMediaCaptureManagerProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v3 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5D7:
      uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v7)
      {
        uint64_t v8 = v6;
        IPC::Decoder::decode<WebCore::MediaConstraints>(v3, (uint64_t)v136);
        char v10 = v141;
        if (v141)
        {
          uint64_t v111 = v8;
          WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v112, (uint64_t)v136);
          uint64_t v11 = v138;
          uint64_t v138 = 0;
          v121[0] = v11;
          uint64_t v12 = v139;
          uint64_t v139 = 0;
          v121[1] = v12;
          char v122 = v140;
          char v10 = 1;
        }
        else
        {
          LOBYTE(v111) = 0;
        }
        char v123 = v10;
        std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v136, v9);
        if (v123) {
          goto LABEL_72;
        }
      }
      else
      {
        LOBYTE(v111) = 0;
        char v123 = 0;
      }
      uint64_t v89 = *v3;
      uint64_t v90 = v3[1];
      uint64_t *v3 = 0;
      v3[1] = 0;
      uint64_t v91 = v3[3];
      if (v91)
      {
        if (v90)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v91 + 16))(v91, v89);
          if (v123)
          {
LABEL_72:
            WebKit::UserMediaCaptureManagerProxy::applyConstraints((uint64_t)this, v111, (uint64_t)v112);
            if (v123)
            {
              WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v121, v81);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119, v82);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v118, v83);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117, v84);
              std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v116, v85);
            }
            return;
          }
        }
      }
      return;
    case 0x5D8:
      uint64_t v54 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v55) {
        goto LABEL_43;
      }
      uint64_t v56 = v54;
      uint64_t v57 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v3);
      if (!v58) {
        goto LABEL_43;
      }
      uint64_t v59 = v57;
      uint64_t v60 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!v61) {
        goto LABEL_43;
      }
      WebKit::UserMediaCaptureManagerProxy::clone((uint64_t)this, v56, v59, v60);
      return;
    case 0x5D9:
      uint64_t v33 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v34)
      {
        LOBYTE(v111) = 0;
        char v128 = 0;
        goto LABEL_76;
      }
      uint64_t v35 = v33;
      IPC::Decoder::decode<WebCore::CaptureDevice>((IPC::Decoder *)v3, (uint64_t)&v129);
      if (!v133)
      {
        LOBYTE(v111) = 0;
        char v128 = 0;
        goto LABEL_92;
      }
      IPC::Decoder::decode<WebCore::MediaDeviceHashSalts>((IPC::Decoder *)v3, (uint64_t)&v134);
      if (!v135)
      {
        LOBYTE(v111) = 0;
        char v128 = 0;
        goto LABEL_91;
      }
      IPC::Decoder::decode<WebCore::MediaConstraints>(v3, (uint64_t)v136);
      char v39 = v141;
      if (!v141) {
        goto LABEL_89;
      }
      unint64_t v40 = v3[1];
      uint64_t v38 = (char *)*v3;
      unint64_t v41 = v3[2] - *v3;
      if (v40 <= v41)
      {
        uint64_t v92 = 0;
        uint64_t v93 = 0;
        uint64_t *v3 = 0;
        v3[1] = 0;
        uint64_t v94 = v3[3];
        if (v94)
        {
          if (v40)
          {
            (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
            uint64_t v93 = *v3;
            uint64_t v92 = v3[1];
          }
          else
          {
            uint64_t v92 = 0;
            uint64_t v93 = 0;
          }
        }
        goto LABEL_86;
      }
      uint64_t v42 = &v38[v41];
      v3[2] = (uint64_t)(v42 + 1);
      if (!v38)
      {
        uint64_t v92 = v40;
        uint64_t v93 = 0;
LABEL_86:
        unint64_t v40 = 0;
        uint64_t v38 = 0;
        uint64_t *v3 = 0;
        v3[1] = 0;
        uint64_t v95 = v3[3];
        if (v95)
        {
          if (v92)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v95 + 16))(v95, v93, v92);
            uint64_t v38 = (char *)*v3;
            unint64_t v40 = v3[1];
          }
          else
          {
            unint64_t v40 = 0;
            uint64_t v38 = 0;
          }
        }
LABEL_87:
        uint64_t *v3 = 0;
        v3[1] = 0;
        uint64_t v45 = v3[3];
        if (v45) {
          goto LABEL_120;
        }
        goto LABEL_88;
      }
      unsigned int v43 = *v42;
      if (v43 >= 2) {
        goto LABEL_87;
      }
      BOOL v44 = v43 != 0;
      uint64_t v45 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!(_BYTE)v38) {
        goto LABEL_88;
      }
      if (!v133 || !v135 || !v141) {
        goto LABEL_119;
      }
      uint64_t v46 = v45;
      uint64_t v47 = v129;
      int v129 = 0;
      uint64_t v111 = v35;
      v112[0] = v47;
      LOBYTE(v112[1]) = v130;
      long long v48 = v131;
      long long v131 = 0u;
      *(_OWORD *)uint64_t v113 = v48;
      *(_DWORD *)uint64_t v114 = v132;
      long long v49 = v134;
      long long v134 = 0u;
      *(_OWORD *)&v114[8] = v49;
      WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v115, (uint64_t)v136);
      uint64_t v50 = v138;
      uint64_t v138 = 0;
      v124[0] = v50;
      uint64_t v51 = v139;
      uint64_t v139 = 0;
      v124[1] = v51;
      char v125 = v140;
      BOOL v126 = v44;
      char v39 = 1;
      uint64_t v127 = v46;
      while (1)
      {
        char v128 = v39;
        std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v136, v38);
LABEL_91:
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v134, v37);
LABEL_92:
        std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v129, v36);
        if (!v128)
        {
LABEL_76:
          uint64_t v86 = *v3;
          uint64_t v87 = v3[1];
          uint64_t *v3 = 0;
          v3[1] = 0;
          uint64_t v88 = v3[3];
          if (!v88) {
            return;
          }
          if (!v87) {
            return;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v88 + 16))(v88, v86);
          if (!v128) {
            return;
          }
        }
        uint64_t v96 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (!(_BYTE)v97) {
          break;
        }
        *(void *)&v136[0] = v96;
        uint64_t v3 = (uint64_t *)v136 + 1;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v136 + 1, a2);
        char v98 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)char v98 = &unk_1EE9F9C78;
        *((void *)v98 + 1) = *(void *)&v136[0];
        uint64_t v99 = *((void *)&v136[0] + 1);
        *((void *)&v136[0] + 1) = 0;
        *((void *)v98 + 2) = v99;
        int v129 = v98;
        uint64_t v45 = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v136 + 1);
        if (v128)
        {
          WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints((uint64_t)this, v111, (uint64_t)v112, (uint64_t)&v114[8], (uint64_t)v115, v126, v127, (uint64_t *)&v129);
          uint64_t v100 = (uint64_t)v129;
          int v129 = 0;
          if (v100) {
            (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
          }
          break;
        }
LABEL_119:
        __break(1u);
LABEL_120:
        if (v40) {
          (*(void (**)(uint64_t, char *))(*(void *)v45 + 16))(v45, v38);
        }
LABEL_88:
        char v39 = 0;
LABEL_89:
        LOBYTE(v111) = 0;
      }
      if (v128)
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v124, v97);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v120, v101);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v119, v102);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v118, v103);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v117, v104);
        unsigned __int8 v106 = *(WTF::StringImpl **)&v114[16];
        *(void *)&v114[16] = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2) {
            WTF::StringImpl::destroy(v106, v105);
          }
          else {
            *(_DWORD *)v106 -= 2;
          }
        }
        char v107 = *(WTF::StringImpl **)&v114[8];
        *(void *)&v114[8] = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2) {
            WTF::StringImpl::destroy(v107, v105);
          }
          else {
            *(_DWORD *)v107 -= 2;
          }
        }
        uint64_t v108 = v113[1];
        v113[1] = 0;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2) {
            WTF::StringImpl::destroy(v108, v105);
          }
          else {
            *(_DWORD *)v108 -= 2;
          }
        }
        long long v109 = v113[0];
        v113[0] = 0;
        if (v109)
        {
          if (*(_DWORD *)v109 == 2) {
            WTF::StringImpl::destroy(v109, v105);
          }
          else {
            *(_DWORD *)v109 -= 2;
          }
        }
        uint64_t v110 = v112[0];
        v112[0] = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2) {
            WTF::StringImpl::destroy(v110, v105);
          }
          else {
            *(_DWORD *)v110 -= 2;
          }
        }
      }
      return;
    case 0x5DA:
      uint64_t v52 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v53)
      {
        WebKit::UserMediaCaptureManagerProxy::endProducingData((uint64_t)this, v52);
      }
      return;
    case 0x5DB:
      uint64_t v21 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v22)
      {
        uint64_t v23 = v21;
        uint64_t v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (v25)
        {
          uint64_t v111 = v24;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v112, a2);
          char v26 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v26 = &unk_1EE9F9CC8;
          v26[1] = v111;
          unint64_t v27 = v112[0];
          v112[0] = 0;
          v26[2] = v27;
          *(void *)&v136[0] = v26;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v112);
          WebKit::UserMediaCaptureManagerProxy::getPhotoCapabilities((uint64_t)this, v23, (uint64_t *)v136);
          uint64_t v20 = *(void *)&v136[0];
          *(void *)&v136[0] = 0;
          if (v20) {
            goto LABEL_53;
          }
        }
      }
      return;
    case 0x5DC:
      uint64_t v66 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v67)
      {
        uint64_t v68 = v66;
        uint64_t v69 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (v70)
        {
          uint64_t v111 = v69;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v112, a2);
          unsigned int v71 = (void *)WTF::fastMalloc((WTF *)0x18);
          *unsigned int v71 = &unk_1EE9F9CF0;
          v71[1] = v111;
          unsigned int v72 = v112[0];
          v112[0] = 0;
          void v71[2] = v72;
          *(void *)&v136[0] = v71;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v112);
          WebKit::UserMediaCaptureManagerProxy::getPhotoSettings((uint64_t)this, v68, (uint64_t *)v136);
          uint64_t v20 = *(void *)&v136[0];
          *(void *)&v136[0] = 0;
          if (v20) {
            goto LABEL_53;
          }
        }
      }
      return;
    case 0x5DD:
      uint64_t v73 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v74)
      {
        WebKit::UserMediaCaptureManagerProxy::removeSource((uint64_t)this, v73);
      }
      return;
    case 0x5DE:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v111);
      if (LOBYTE(v112[1])) {
        WebKit::UserMediaCaptureManagerProxy::setIsInBackground((uint64_t)this, v111, LOBYTE(v112[0]));
      }
      return;
    case 0x5DF:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v111);
      if (LOBYTE(v112[1])) {
        WebKit::UserMediaCaptureManagerProxy::setShouldApplyRotation((uint64_t)this, v111);
      }
      return;
    case 0x5E0:
      uint64_t v28 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v29
        && (uint64_t v30 = v28,
            uint64_t v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3),
            v32))
      {
        WebKit::UserMediaCaptureManagerProxy::startProducingData((uint64_t)this, v30, v31);
      }
      else
      {
LABEL_43:
        uint64_t v62 = v3[1];
        uint64_t *v3 = 0;
        v3[1] = 0;
        uint64_t v63 = v3[3];
        if (v63) {
          BOOL v64 = v62 == 0;
        }
        else {
          BOOL v64 = 1;
        }
        if (!v64)
        {
          long long v65 = *(void (**)(void))(*(void *)v63 + 16);
          v65();
        }
      }
      return;
    case 0x5E1:
      uint64_t v75 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v76)
      {
        WebKit::UserMediaCaptureManagerProxy::stopProducingData((uint64_t)this, v75);
      }
      return;
    case 0x5E2:
      uint64_t v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v14 && (uint64_t v15 = v13, IPC::Decoder::decode<WebCore::PhotoSettings>(v3, (uint64_t)v136), v137))
      {
        uint64_t v111 = v15;
        *(_OWORD *)uint64_t v112 = v136[0];
        *(_OWORD *)uint64_t v113 = v136[1];
        *(_OWORD *)uint64_t v114 = v136[2];
        v114[16] = 1;
        uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (v17)
        {
          *(void *)&v136[0] = v16;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)v136 + 1, a2);
          uint64_t v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)uint64_t v18 = &unk_1EE9F9CA0;
          *((void *)v18 + 1) = *(void *)&v136[0];
          uint64_t v19 = *((void *)&v136[0] + 1);
          *((void *)&v136[0] + 1) = 0;
          *((void *)v18 + 2) = v19;
          int v129 = v18;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v136 + 1);
          WebKit::UserMediaCaptureManagerProxy::takePhoto((uint64_t)this, v15, (long long *)v112, (uint64_t *)&v129);
          uint64_t v20 = (uint64_t)v129;
          int v129 = 0;
          if (v20) {
LABEL_53:
          }
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
      }
      else
      {
        uint64_t v77 = *v3;
        uint64_t v78 = v3[1];
        uint64_t *v3 = 0;
        v3[1] = 0;
        uint64_t v79 = v3[3];
        if (v79) {
          BOOL v80 = v78 == 0;
        }
        else {
          BOOL v80 = 1;
        }
        if (!v80) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v79 + 16))(v79, v77);
        }
      }
      return;
    default:
      return;
  }
}

uint64_t WebKit::UserMediaCaptureManagerProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  if (*(_WORD *)(a3 + 50) != 3738) {
    return 0;
  }
  uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v7;
  char v10 = *a4;
  *a4 = 0;
  uint64_t v15 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a2);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v11 = &unk_1EE9F9D18;
  v11[1] = v15;
  uint64_t v12 = v16[0];
  v16[0] = 0;
  v11[2] = v12;
  char v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  WebKit::UserMediaCaptureManagerProxy::isPowerEfficient(a1, v9, (uint64_t *)&v17);
  uint64_t v13 = (uint64_t)v17;
  char v17 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  return 1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNSA_13CaptureDeviceEONSA_20MediaDeviceHashSaltsEONSA_16MediaConstraintsEbNS9_INSA_18PageIdentifierTypeESD_yLSE_0EEEONS_17CompletionHandlerIFvRKNSA_18CaptureSourceErrorERKNSA_27RealtimeMediaSourceSettingsERKNSA_31RealtimeMediaSourceCapabilitiesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_SV_SY_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9C78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNSA_13CaptureDeviceEONSA_20MediaDeviceHashSaltsEONSA_16MediaConstraintsEbNS9_INSA_18PageIdentifierTypeESD_yLSE_0EEEONS_17CompletionHandlerIFvRKNSA_18CaptureSourceErrorERKNSA_27RealtimeMediaSourceSettingsERKNSA_31RealtimeMediaSourceCapabilitiesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_SV_SY_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9F9C78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy48CreateMediaSourceForCaptureDeviceWithConstraintsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKNSA_13CaptureDeviceEONSA_20MediaDeviceHashSaltsEONSA_16MediaConstraintsEbNS9_INSA_18PageIdentifierTypeESD_yLSE_0EEEONS_17CompletionHandlerIFvRKNSA_18CaptureSourceErrorERKNSA_27RealtimeMediaSourceSettingsERKNSA_31RealtimeMediaSourceCapabilitiesEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_SV_SY_EE4callESS_SV_SY_(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 3203;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  char v14 = v9;
  IPC::ArgumentCoder<WebCore::CaptureSourceError,void>::encode(v9, a2);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode(v9, a3);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::encode(v9, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  char v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy9TakePhotoEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_13PhotoSettingsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEESS_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9CA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy9TakePhotoEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_13PhotoSettingsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEESS_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9F9CA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy9TakePhotoEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONSA_13PhotoSettingsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEESS_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3206;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199220E40);
    }
    *uint64_t v6 = 0;
    if (*(_DWORD *)(a2 + 24) != 1)
    {
LABEL_13:
      uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy20GetPhotoCapabilitiesEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_17PhotoCapabilitiesENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(v12);
    }
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199220E60);
    }
    *uint64_t v6 = 1;
    if (*(_DWORD *)(a2 + 24)) {
      goto LABEL_13;
    }
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    a2 += 16;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy20GetPhotoCapabilitiesEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_17PhotoCapabilitiesENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9CC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy20GetPhotoCapabilitiesEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_17PhotoCapabilitiesENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9F9CC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy20GetPhotoCapabilitiesEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_17PhotoCapabilitiesENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3204;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 152);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x199221018);
    }
    *uint64_t v6 = 0;
    if (*(_DWORD *)(a2 + 152) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy16GetPhotoSettingsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_13PhotoSettingsENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(v12);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x199221038);
  }
  *uint64_t v6 = 1;
  if (*(_DWORD *)(a2 + 152)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::PhotoCapabilities,void>::encode(v5, a2 + 8);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy16GetPhotoSettingsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_13PhotoSettingsENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9CF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy16GetPhotoSettingsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_13PhotoSettingsENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9F9CF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28UserMediaCaptureManagerProxy16GetPhotoSettingsEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_13PhotoSettingsENS_6StringEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v5 = 3205;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1992211F0);
    }
    *uint64_t v6 = 0;
    if (*(_DWORD *)(a2 + 56) == 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v12);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x199221210);
  }
  *uint64_t v6 = 1;
  if (*(_DWORD *)(a2 + 56)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::PhotoSettings,void>::encode(v5, a2 + 8);
LABEL_8:
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9D18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9D18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages28UserMediaCaptureManagerProxy16IsPowerEfficientEN6WebKit28UserMediaCaptureManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  char v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    *char v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::VideoPresentationManager::didReceiveMessage(WebKit::VideoPresentationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  ++*((_DWORD *)this + 4);
  uint64_t v4 = (unint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5FA:
      char v5 = (WTF::String *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManager::didCleanupFullscreen((uint64_t)this, v5);
      }
      goto LABEL_70;
    case 0x5FB:
      uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v22) {
        goto LABEL_65;
      }
      uint64_t v23 = v21;
      unint64_t v24 = IPC::Decoder::decode<std::optional<WebCore::FloatSize>>(v4);
      if ((v25 & 0xFF00000000) == 0) {
        goto LABEL_65;
      }
      WebKit::VideoPresentationManager::didEnterFullscreen(this, v23, v24, v25);
      goto LABEL_70;
    case 0x5FC:
      uint64_t v9 = (WTF::String *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManager::didExitFullscreen((uint64_t)this, v9);
      }
      goto LABEL_70;
    case 0x5FD:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatSize>>((uint64_t *)a3, &v50);
      if (LOBYTE(v51.m_size.m_width)) {
        WebKit::VideoPresentationManager::ensureUpdatedVideoDimensions(this, (uint64_t)v50, *(float *)&v51.m_location.m_x, *(float *)&v51.m_location.m_y);
      }
      goto LABEL_70;
    case 0x5FE:
      uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManager::failedToEnterFullscreen((uint64_t)this, v7);
      }
      goto LABEL_70;
    case 0x5FF:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v50);
      if (LOBYTE(v51.m_size.m_width)) {
        WebKit::VideoPresentationManager::fullscreenMayReturnToInline((uint64_t)this, (uint64_t)v50, v51.m_location.m_x);
      }
      goto LABEL_70;
    case 0x600:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>((uint64_t *)a3, &v50);
      if (LOBYTE(v51.m_size.m_width)) {
        WebKit::VideoPresentationManager::fullscreenModeChanged(this, (uint64_t)v50, v51.m_location.m_x);
      }
      goto LABEL_70;
    case 0x601:
      uint64_t v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v14) {
        goto LABEL_65;
      }
      unint64_t v15 = v4[1];
      unint64_t v16 = *v4;
      unint64_t v17 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v4;
      if (v15 < v17 || v15 - v17 <= 3)
      {
        unint64_t v42 = 0;
        unint64_t v43 = 0;
        unint64_t *v4 = 0;
        v4[1] = 0;
        unint64_t v44 = v4[3];
        if (v44)
        {
          if (!v15) {
            goto LABEL_82;
          }
LABEL_80:
          (*(void (**)(unint64_t))(*(void *)v44 + 16))(v44);
          unint64_t v43 = *v4;
          unint64_t v42 = v4[1];
        }
LABEL_64:
        unint64_t *v4 = 0;
        v4[1] = 0;
        unint64_t v46 = v4[3];
        if (v46 && v42) {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v46 + 16))(v46, v43, v42);
        }
        goto LABEL_65;
      }
      unint64_t v19 = v16 + v17;
      uint64_t v20 = v16 + v17 + 4;
      v4[2] = v20;
      if (!v16) {
        goto LABEL_81;
      }
      if (v15 <= v20 - v16)
      {
        unint64_t v42 = 0;
        unint64_t v43 = 0;
        unint64_t *v4 = 0;
        v4[1] = 0;
        unint64_t v45 = v4[3];
        if (v45)
        {
          if (!v15)
          {
LABEL_82:
            unint64_t v42 = 0;
            unint64_t v43 = 0;
            goto LABEL_64;
          }
          (*(void (**)(unint64_t))(*(void *)v45 + 16))(v45);
          unint64_t v42 = 0;
          unint64_t v49 = v4[1];
          unint64_t v44 = v4[3];
          unint64_t *v4 = 0;
          v4[1] = 0;
          unint64_t v43 = 0;
          if (v44)
          {
            if (v49) {
              goto LABEL_80;
            }
          }
        }
        goto LABEL_64;
      }
      v4[2] = v19 + 5;
      if (*(unsigned __int8 *)(v19 + 4) >= 2u)
      {
LABEL_81:
        unint64_t v42 = v15;
        unint64_t v43 = v16;
        goto LABEL_64;
      }
      WebKit::VideoPresentationManager::requestFullscreenMode(this, v13);
LABEL_70:
      if (*((_DWORD *)this + 4) == 1) {
        (*(void (**)(WebKit::VideoPresentationManager *, IPC::Connection *, IPC::Decoder *))(*(void *)this + 8))(this, a2, a3);
      }
      else {
        --*((_DWORD *)this + 4);
      }
      return;
    case 0x602:
      uint64_t v31 = (atomic_uchar *volatile *)a2;
      uint64_t v32 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2)
      {
        uint64_t v33 = v32;
        char v34 = (WTF::String *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
        if ((_BYTE)a2)
        {
          uint64_t v50 = v34;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v51, v31);
          uint64_t v35 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v35 = &unk_1EE9F9D40;
          v35[1] = v50;
          IntPoint m_location = v51.m_location;
          v51.IntPoint m_location = 0;
          v35[2] = m_location;
          v56.IntPoint m_location = (IntPoint)v35;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v51);
          WebKit::VideoPresentationManager::requestRouteSharingPolicyAndContextUID(this, v33);
          IntPoint v37 = v56.m_location;
          v56.IntPoint m_location = 0;
          if (v37) {
            (*(void (**)(IntPoint))(**(void **)&v37 + 8))(v37);
          }
        }
      }
      goto LABEL_70;
    case 0x603:
      uint64_t v8 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManager::requestUpdateInlineRect((atomic_uchar *)this, v8);
      }
      goto LABEL_70;
    case 0x604:
      uint64_t v30 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManager::requestVideoContentLayer((uint64_t)this, v30);
      }
      goto LABEL_70;
    case 0x605:
      uint64_t v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManager::returnVideoContentLayer((uint64_t)this, v6);
      }
      goto LABEL_70;
    case 0x606:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v50);
      if (LOBYTE(v51.m_size.m_width)) {
        WebKit::VideoPresentationManager::setRequiresTextTrackRepresentation(this, (uint64_t)v50);
      }
      goto LABEL_70;
    case 0x607:
      uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v28 && (char v29 = (WTF::String *)v27, IPC::Decoder::decode<WebCore::IntRect>(v4, (uint64_t)&v56), v57))
      {
        uint64_t v50 = v29;
        IntRect v51 = v56;
        LOBYTE(v52) = 1;
        WebKit::VideoPresentationManager::setTextTrackRepresentationBounds(this, (uint64_t)v29, &v51);
      }
      else
      {
LABEL_65:
        a2 = (IPC::Connection *)*v4;
        a3 = (IPC::Decoder *)v4[1];
        unint64_t *v4 = 0;
        v4[1] = 0;
        unint64_t v47 = v4[3];
        if (v47) {
          BOOL v48 = a3 == 0;
        }
        else {
          BOOL v48 = 1;
        }
        if (!v48) {
          (*(void (**)(unint64_t, IPC::Connection *))(*(void *)v47 + 16))(v47, a2);
        }
      }
      goto LABEL_70;
    case 0x608:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>>((uint64_t *)a3, &v50);
      if ((_BYTE)v52) {
        WebKit::VideoPresentationManager::setVideoFullscreenFrame(this, v50, *(float *)&v51.m_location.m_x, *(float *)&v51.m_location.m_y, *(float *)&v51.m_size.m_width, *(float *)&v51.m_size.m_height);
      }
      goto LABEL_70;
    case 0x609:
      uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v11) {
        goto LABEL_56;
      }
      uint64_t v12 = (WTF::String *)v10;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(v4, (uint64_t)&v56);
      if (v57)
      {
        IPC::Decoder::takeLastAttachment((IPC::Decoder *)v4, v54);
        if (v55)
        {
          uint64_t v50 = v12;
          IntRect v51 = v56;
          WTF::MachSendRight::MachSendRight();
          char v53 = 1;
          if (v55) {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v54);
          }
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t v38 = *v4;
        unint64_t v39 = v4[1];
        unint64_t *v4 = 0;
        v4[1] = 0;
        unint64_t v40 = v4[3];
        if (v40 && v39) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v40 + 16))(v40, v38);
        }
      }
LABEL_56:
      LOBYTE(v50) = 0;
      char v53 = 0;
      a2 = (IPC::Connection *)*v4;
      a3 = (IPC::Decoder *)v4[1];
      unint64_t *v4 = 0;
      v4[1] = 0;
      unint64_t v41 = v4[3];
      if (!v41) {
        goto LABEL_70;
      }
      if (!a3) {
        goto LABEL_70;
      }
      (*(void (**)(unint64_t, IPC::Connection *))(*(void *)v41 + 16))(v41, a2);
      if (!v53) {
        goto LABEL_70;
      }
LABEL_23:
      WebKit::VideoPresentationManager::setVideoLayerFrameFenced(this, v50, &v52, *(float *)&v51.m_location.m_x, *(float *)&v51.m_location.m_y, *(float *)&v51.m_size.m_width, *(float *)&v51.m_size.m_height);
      if (v53) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v52);
      }
      goto LABEL_70;
    case 0x60A:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>((uint64_t *)a3, &v50);
      if (LOBYTE(v51.m_size.m_width)) {
        WebKit::VideoPresentationManager::setVideoLayerGravityEnum(this, (uint64_t)v50, v51.m_location.m_x);
      }
      goto LABEL_70;
    case 0x60B:
      uint64_t v26 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManager::willExitFullscreen((uint64_t)this, v26);
      }
      goto LABEL_70;
    default:
      goto LABEL_70;
  }
}

void *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    a3 = 0;
    a2 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v12 = result;
      uint64_t v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v4);
        uint64_t result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    void *result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_12:
      char v10 = 0;
      *(unsigned char *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      uint64_t v13 = a4;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  uint64_t v8 = (int *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  int v9 = *v8;
  *(void *)a4 = *(void *)a2;
  *(_DWORD *)(a4 + 8) = v9;
  char v10 = 1;
LABEL_9:
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (unint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((unint64_t *)a1, (uint64_t)v6, (uint64_t)a2);
  }
  *a2 = 0;
  a2[24] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)&v11);
  if (!v12)
  {
    unint64_t v7 = *a1;
    unint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
LABEL_12:
    uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v7);
LABEL_10:
    char v8 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_4;
  }
  *(void *)a3 = *(void *)a2;
  *(_OWORD *)(a3 + 8) = v11;
  char v8 = 1;
LABEL_4:
  *(unsigned char *)(a3 + 24) = v8;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24VideoPresentationManager38RequestRouteSharingPolicyAndContextUIDEN6WebKit24VideoPresentationManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSA_18RouteSharingPolicyENS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9D40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24VideoPresentationManager38RequestRouteSharingPolicyAndContextUIDEN6WebKit24VideoPresentationManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSA_18RouteSharingPolicyENS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9F9D40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages24VideoPresentationManager38RequestRouteSharingPolicyAndContextUIDEN6WebKit24VideoPresentationManagerES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSA_18RouteSharingPolicyENS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SI_EE4callESH_SI_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 3208;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v12 = v7;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatSize>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatSize>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatSize>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (unint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatSize>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((unint64_t *)a1, (uint64_t)v6, (uint64_t)a2);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatSize>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  if (!(_BYTE)v7)
  {
    unint64_t v7 = *a1;
    unint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    __break(1u);
LABEL_12:
    uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v7);
LABEL_10:
    char v8 = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_4;
  }
  *(void *)a3 = *(void *)a2;
  *(void *)(a3 + 8) = result;
  char v8 = 1;
LABEL_4:
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

void WebKit::VideoPresentationManagerProxy::didReceiveMessage(WebKit::VideoPresentationManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  ++*((_DWORD *)this + 4);
  unint64_t v4 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5E9:
      uint64_t v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManagerProxy::cleanupFullscreen(this, v5);
      }
      goto LABEL_110;
    case 0x5EA:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::clearVideoFullscreenMode((uint64_t)this, v76, *(unsigned int *)v77);
      }
      goto LABEL_110;
    case 0x5EB:
      unint64_t v19 = (atomic_uchar *volatile *)a2;
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>>((uint64_t *)a3, &v76);
      if (v77[16])
      {
        uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
        if ((_BYTE)a2)
        {
          *(void *)&long long v86 = v20;
          unint64_t v4 = (IPC::Decoder *)((char *)&v86 + 8);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v86 + 1, v19);
          uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v21 = &unk_1EE9F9D68;
          v21[1] = v86;
          uint64_t v22 = *((void *)&v86 + 1);
          *((void *)&v86 + 1) = 0;
          void v21[2] = v22;
          uint64_t v75 = v21;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v86 + 1);
          if (!v77[16])
          {
            __break(1u);
            goto LABEL_88;
          }
          WebKit::VideoPresentationManagerProxy::exitFullscreen(this, v76, (uint64_t *)&v75, *(float *)v77, *(float *)&v77[4], *(float *)&v77[8], *(float *)&v77[12]);
          uint64_t v24 = (uint64_t)v75;
          uint64_t v75 = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
        }
      }
      goto LABEL_110;
    case 0x5EC:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::exitFullscreenWithoutAnimationToMode((uint64_t)this, v76, *(unsigned int *)v77);
      }
      goto LABEL_110;
    case 0x5ED:
      uint64_t v10 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if ((_BYTE)a2) {
        WebKit::VideoPresentationManagerProxy::preparedToExitFullscreen((atomic_uchar *)this, v10);
      }
      goto LABEL_110;
    case 0x5EE:
      uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v26) {
        goto LABEL_105;
      }
      unint64_t v14 = *((void *)v4 + 1);
      unint64_t v15 = *(IPC::Connection **)v4;
      unint64_t v27 = *((void *)v4 + 2) - *(void *)v4;
      if (v14 <= v27) {
        goto LABEL_76;
      }
      char v28 = (unsigned __int8 *)v15 + v27;
      *((void *)v4 + 2) = v28 + 1;
      if (!v15) {
        goto LABEL_122;
      }
      unsigned int v29 = *v28;
      if (v29 >= 2) {
        goto LABEL_93;
      }
      uint64_t v30 = v25;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v4, (uint64_t)&v76);
      if (!v77[8]) {
        goto LABEL_92;
      }
      WebKit::VideoPresentationManagerProxy::preparedToReturnToInline((atomic_uchar *)this, v30, v29 != 0, *(float *)&v76, *((float *)&v76 + 1), *(float *)v77, *(float *)&v77[4]);
      goto LABEL_110;
    case 0x5EF:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::setDocumentVisibility((char *)this, v76);
      }
      goto LABEL_110;
    case 0x5F0:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::setHasVideo((char *)this, v76);
      }
      goto LABEL_110;
    case 0x5F1:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::setHasVideoContentLayer((uint64_t)this, v76, v77[0]);
      }
      goto LABEL_110;
    case 0x5F2:
      uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v12) {
        goto LABEL_105;
      }
      uint64_t v13 = v11;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v4, (uint64_t)&v86);
      if (!v87) {
        goto LABEL_92;
      }
      unint64_t v14 = *((void *)v4 + 1);
      unint64_t v15 = *(IPC::Connection **)v4;
      unint64_t v16 = *((void *)v4 + 2) - *(void *)v4;
      if (v14 <= v16)
      {
LABEL_76:
        unint64_t v59 = 0;
        *(void *)unint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v60 = *((void *)v4 + 3);
        if (v60)
        {
          if (v14)
          {
            (*(void (**)(uint64_t))(*(void *)v60 + 16))(v60);
            unint64_t v59 = *((void *)v4 + 1);
          }
          else
          {
            unint64_t v59 = 0;
          }
        }
      }
      else
      {
        unint64_t v17 = (unsigned __int8 *)v15 + v16;
        *((void *)v4 + 2) = v17 + 1;
        if (v15)
        {
          unsigned int v18 = *v17;
          if (v18 >= 2) {
            goto LABEL_93;
          }
          uint64_t v76 = v13;
          *(_OWORD *)uint64_t v77 = v86;
          v77[16] = v18 != 0;
          BYTE4(v78) = 1;
          WebKit::VideoPresentationManagerProxy::setInlineRect((atomic_uchar *)this, v13, (const FloatRect *)v77);
          goto LABEL_110;
        }
LABEL_122:
        unint64_t v59 = v14;
      }
      unint64_t v14 = 0;
      unint64_t v15 = 0;
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v61 = *((void *)v4 + 3);
      if (!v61) {
        goto LABEL_93;
      }
      if (v59)
      {
        uint64_t v62 = *(void (**)(void))(*(void *)v61 + 16);
        goto LABEL_91;
      }
      goto LABEL_124;
    case 0x5F3:
      uint64_t v55 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v56) {
        goto LABEL_105;
      }
      uint64_t v57 = v55;
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)v4, &v76);
      if (!v77[8]) {
        goto LABEL_105;
      }
      WebKit::VideoPresentationManagerProxy::setPlayerIdentifier((char *)this, v57);
      goto LABEL_110;
    case 0x5F4:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatSize>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::setVideoDimensions((uint64_t)this, v76, (float *)v77);
      }
      goto LABEL_110;
    case 0x5F5:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::setVideoFullscreenMode(this, v76, *(unsigned int *)v77);
      }
      goto LABEL_110;
    case 0x5F6:
      uint64_t v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v32) {
        goto LABEL_105;
      }
      unint64_t v23 = *((void *)v4 + 1);
      uint64_t v33 = *(IPC::Connection **)v4;
      unint64_t v34 = ((*((void *)v4 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v4;
      if (v23 < v34 || v23 - v34 <= 3)
      {
LABEL_88:
        unint64_t v14 = 0;
        unint64_t v15 = 0;
        *(void *)unint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v67 = *((void *)v4 + 3);
        if (!v67) {
          goto LABEL_93;
        }
        if (v23)
        {
          uint64_t v62 = *(void (**)(void))(*(void *)v67 + 16);
LABEL_91:
          v62();
          goto LABEL_92;
        }
LABEL_124:
        unint64_t v14 = 0;
        unint64_t v15 = 0;
LABEL_93:
        *(void *)unint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v68 = *((void *)v4 + 3);
        if (!v68) {
          goto LABEL_105;
        }
LABEL_94:
        if (v14) {
          (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v68 + 16))(v68, v15);
        }
        goto LABEL_105;
      }
      uint64_t v36 = (unsigned int *)((char *)v33 + v34);
      *((void *)v4 + 2) = v36 + 1;
      if (!v33)
      {
        unint64_t v14 = v23;
        unint64_t v15 = 0;
        goto LABEL_93;
      }
      uint64_t v37 = v31;
      unsigned int v38 = *v36;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v4, (uint64_t)&v86);
      if (!v87
        || (unint64_t v39 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v4), !v40)
        || (unint64_t v41 = v39,
            unint64_t v42 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v4),
            !v44))
      {
LABEL_92:
        unint64_t v15 = *(IPC::Connection **)v4;
        unint64_t v14 = *((void *)v4 + 1);
        goto LABEL_93;
      }
      unint64_t v45 = *((void *)v4 + 1);
      unint64_t v46 = *(IPC::Connection **)v4;
      unint64_t v47 = ((*((void *)v4 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v4;
      if (v45 < v47 || v45 - v47 <= 3)
      {
        unint64_t v63 = 0;
        BOOL v64 = 0;
        *(void *)unint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v69 = *((void *)v4 + 3);
        if (!v69) {
          goto LABEL_104;
        }
        if (v45) {
          goto LABEL_120;
        }
      }
      else
      {
        BOOL v48 = (unsigned __int32 *)((char *)v46 + v47);
        *((void *)v4 + 2) = v48 + 1;
        if (!v46) {
          goto LABEL_121;
        }
        unint64_t v49 = (((unint64_t)v48 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v46;
        if (v45 < v49 || v45 - v49 <= 3)
        {
          *(void *)unint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          uint64_t v70 = *((void *)v4 + 3);
          if (!v70) {
            goto LABEL_105;
          }
          if (!v45) {
            goto LABEL_105;
          }
          (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
          unint64_t v15 = *(IPC::Connection **)v4;
          unint64_t v14 = *((void *)v4 + 1);
          uint64_t v68 = *((void *)v4 + 3);
          *(void *)unint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          if (!v68) {
            goto LABEL_105;
          }
          goto LABEL_94;
        }
        v43.n128_u32[0] = *v48;
        unint64_t v50 = ((unint64_t)v48 + 7) & 0xFFFFFFFFFFFFFFFCLL;
        unsigned int v51 = *(_DWORD *)v50;
        *((void *)v4 + 2) = v50 + 4;
        if (v45 > v49 + 4)
        {
          *((void *)v4 + 2) = v50 + 5;
          unsigned int v52 = *(unsigned __int8 *)(v50 + 4);
          if (v52 < 2)
          {
            if (v45 <= v50 + 5 - (unint64_t)v46)
            {
LABEL_80:
              unint64_t v63 = 0;
              BOOL v64 = 0;
              *(void *)unint64_t v4 = 0;
              *((void *)v4 + 1) = 0;
              uint64_t v65 = *((void *)v4 + 3);
              if (!v65) {
                goto LABEL_104;
              }
              goto LABEL_118;
            }
            *((void *)v4 + 2) = v50 + 6;
            unsigned int v53 = *(unsigned __int8 *)(v50 + 5);
            if (v53 < 2)
            {
              if (v45 > v50 + 6 - (unint64_t)v46)
              {
                *((void *)v4 + 2) = v50 + 7;
                unsigned int v54 = *(unsigned __int8 *)(v50 + 6);
                if (v54 < 2)
                {
                  uint64_t v76 = v37;
                  *(_DWORD *)uint64_t v77 = v38;
                  *(_OWORD *)&v77[4] = v86;
                  *(void *)&long long v78 = v41;
                  *((void *)&v78 + 1) = v42;
                  unsigned __int32 v79 = v43.n128_u32[0];
                  unsigned int v80 = v51;
                  BOOL v81 = v52 != 0;
                  BOOL v82 = v53 != 0;
                  BOOL v83 = v54 != 0;
                  char v84 = 1;
                  WebKit::VideoPresentationManagerProxy::setupFullscreenWithID((uint64_t)this, v37, v38, (const FloatRect *)&v77[4], (float *)&v78, (float *)&v78 + 2, v51, v52 != 0, v53 != 0, v54 != 0);
                  goto LABEL_110;
                }
                goto LABEL_121;
              }
              goto LABEL_80;
            }
          }
LABEL_121:
          unint64_t v63 = v45;
          BOOL v64 = v46;
          goto LABEL_104;
        }
        unint64_t v63 = 0;
        BOOL v64 = 0;
        *(void *)unint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v65 = *((void *)v4 + 3);
        if (!v65) {
          goto LABEL_104;
        }
        if (v45)
        {
LABEL_118:
          (*(void (**)(uint64_t, __n128))(*(void *)v65 + 16))(v65, v43);
          unint64_t v63 = 0;
          uint64_t v74 = *((void *)v4 + 1);
          uint64_t v69 = *((void *)v4 + 3);
          *(void *)unint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          BOOL v64 = 0;
          if (!v69 || !v74) {
            goto LABEL_104;
          }
LABEL_120:
          (*(void (**)(uint64_t))(*(void *)v69 + 16))(v69);
          BOOL v64 = *(IPC::Connection **)v4;
          unint64_t v63 = *((void *)v4 + 1);
          goto LABEL_104;
        }
      }
      unint64_t v63 = 0;
      BOOL v64 = 0;
LABEL_104:
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v71 = *((void *)v4 + 3);
      if (v71 && v63) {
        (*(void (**)(uint64_t, IPC::Connection *, unint64_t, __n128))(*(void *)v71 + 16))(v71, v64, v63, v43);
      }
LABEL_105:
      a2 = *(IPC::Connection **)v4;
      a3 = (IPC::Decoder *)*((void *)v4 + 1);
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v72 = *((void *)v4 + 3);
      if (v72) {
        BOOL v73 = a3 == 0;
      }
      else {
        BOOL v73 = 1;
      }
      if (!v73) {
        (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v72 + 16))(v72, a2);
      }
LABEL_110:
      if (*((_DWORD *)this + 4) == 1) {
        (*(void (**)(WebKit::VideoPresentationManagerProxy *, IPC::Connection *, IPC::Decoder *))(*(void *)this + 8))(this, a2, a3);
      }
      else {
        --*((_DWORD *)this + 4);
      }
      return;
    case 0x5F7:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,float>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::textTrackRepresentationSetContentsScale(this, v76, *(float *)v77);
      }
      goto LABEL_110;
    case 0x5F8:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>>((uint64_t *)a3, &v76);
      if (v77[8]) {
        WebKit::VideoPresentationManagerProxy::textTrackRepresentationSetHidden(this, v76);
      }
      goto LABEL_110;
    case 0x5F9:
      uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v7)
      {
        uint64_t v8 = v6;
        IPC::Decoder::decode<WebCore::ShareableBitmapHandle>(v4, &v86);
        char v9 = v88;
        if (v88)
        {
          uint64_t v76 = v8;
          WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v77, (uint64_t)&v86);
          char v9 = 1;
        }
        else
        {
          LOBYTE(v76) = 0;
        }
        char v85 = v9;
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v86);
        if (v85) {
          goto LABEL_71;
        }
      }
      else
      {
        LOBYTE(v76) = 0;
        char v85 = 0;
      }
      a2 = *(IPC::Connection **)v4;
      a3 = (IPC::Decoder *)*((void *)v4 + 1);
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v66 = *((void *)v4 + 3);
      if (!v66) {
        goto LABEL_110;
      }
      if (!a3) {
        goto LABEL_110;
      }
      (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v66 + 16))(v66, a2);
      if (!v85) {
        goto LABEL_110;
      }
LABEL_71:
      WebKit::VideoPresentationManagerProxy::textTrackRepresentationUpdate(this, v76);
      if (v85)
      {
        if (BYTE12(v78))
        {
          char v58 = *(const void **)((char *)&v78 + 4);
          *(void *)((char *)&v78 + 4) = 0;
          if (v58) {
            CFRelease(v58);
          }
        }
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v77);
      }
      goto LABEL_110;
    default:
      goto LABEL_110;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29VideoPresentationManagerProxy14ExitFullscreenEN6WebKit29VideoPresentationManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSA_9FloatRectEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F9D68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29VideoPresentationManagerProxy14ExitFullscreenEN6WebKit29VideoPresentationManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSA_9FloatRectEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9F9D68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29VideoPresentationManagerProxy14ExitFullscreenEN6WebKit29VideoPresentationManagerProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSA_9FloatRectEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3207;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t *WebKit::ViewGestureGeometryCollector::didReceiveMessage(unint64_t *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1548)
  {
    uint64_t v3 = (WebKit::WebPage **)this;
    this = IPC::Decoder::decode<std::tuple<WebCore::FloatSize>>((unint64_t *)a3);
    if (v4)
    {
      return (unint64_t *)WebKit::ViewGestureGeometryCollector::collectGeometryForSmartMagnificationGesture(v3, *(float *)&this, *((float *)&this + 1));
    }
  }
  return this;
}

uint64_t WebKit::VirtualAuthenticatorManager::createAuthenticator@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::createVersion4UUIDString(a3, (WTF *)a1);
  uint64_t v6 = WTF::fastMalloc((WTF *)0x10);
  uint64_t v7 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v7 += 2;
  }
  *(void *)uint64_t v6 = v7;
  int v8 = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(v6 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(v6 + 8) = v8;
  v12[0] = (WTF *)v6;
  WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>(a1 + 107, (WTF::StringImpl **)a3, (const WTF::StringImpl *)v12, (uint64_t)v13);
  char v9 = (WTF::StringImpl **)v12[0];
  v12[0] = 0;
  if (v9) {
    std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v12, v9);
  }
  v12[0] = 0;
  v12[1] = 0;
  WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1 + 108, (WTF::StringImpl **)a3, (const WTF::StringImpl *)v12, (uint64_t)v13);
  return WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v10);
}

uint64_t WebKit::VirtualAuthenticatorManager::removeAuthenticator(WebKit::VirtualAuthenticatorManager *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  char v4 = (uint64_t *)((char *)this + 856);
  uint64_t v5 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 107, a2, a3);
  uint64_t v6 = *((void *)this + 107);
  if (v6)
  {
    uint64_t v7 = (WTF::StringImpl *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == v5) {
      return 0;
    }
  }
  else
  {
    if (!v5) {
      return 0;
    }
    uint64_t v7 = 0;
  }
  if (v7 != v5) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v4, v5);
  }
  return 1;
}

uint64_t WebKit::VirtualAuthenticatorManager::addCredential(uint64_t a1, WTF::StringImpl **a2, unint64_t a3)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 864), a2, (const WTF::StringImpl *)a3);
  unsigned int v5 = *(_DWORD *)(result + 20);
  if (v5 == *(_DWORD *)(result + 16))
  {
    uint64_t v6 = (unsigned int *)(result + 8);
    return WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::VirtualCredential>(v6, a3);
  }
  else
  {
    uint64_t v7 = *(void *)(result + 8);
    uint64_t v8 = v7 + 72 * v5;
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)uint64_t v8 = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(v8 + 8) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = 0;
    uint64_t v10 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = 0;
    *(void *)(v8 + 16) = v10;
    uint64_t v11 = *(void *)(a3 + 24);
    *(void *)(a3 + 24) = 0;
    *(unsigned char *)(v8 + 32) = 0;
    uint64_t v12 = v8 + 32;
    *(_DWORD *)(v12 - 20) = v9;
    *(void *)(v12 - 8) = v11;
    *(unsigned char *)(v12 + 16) = 0;
    uint64_t v13 = (unsigned char *)(v12 + 16);
    if (*(unsigned char *)(a3 + 48))
    {
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      uint64_t v14 = *(void *)(a3 + 32);
      *(void *)(a3 + 32) = 0;
      *(void *)uint64_t v12 = v14;
      int v15 = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = 0;
      uint64_t v16 = v7 + 72 * v5;
      *(_DWORD *)(v16 + 40) = v15;
      int v17 = *(_DWORD *)(a3 + 44);
      *(_DWORD *)(a3 + 44) = 0;
      *(_DWORD *)(v16 + 44) = v17;
      unsigned char *v13 = 1;
    }
    uint64_t v18 = v7 + 72 * v5;
    uint64_t v19 = *(void *)(a3 + 56);
    *(_WORD *)(v18 + 64) = *(_WORD *)(a3 + 64);
    *(void *)(v18 + 56) = v19;
    ++*(_DWORD *)(result + 20);
  }
  return result;
}

uint64_t WebKit::VirtualAuthenticatorManager::credentialsMatchingList@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 864), a2, a3);
  uint64_t v10 = *(unsigned int *)(result + 20);
  if (v10)
  {
    unint64_t v11 = *(void *)(result + 8);
    uint64_t v12 = 72 * v10;
    do
    {
      uint64_t result = WTF::equal(*(WTF **)(v11 + 16), *(const WTF::StringImpl **)a3, v9);
      if (result)
      {
        if (!*(_DWORD *)(a4 + 12) && *(unsigned char *)(v11 + 64)
          || (uint64_t v22 = (const void **)v11,
              uint64_t result = WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>((uint64_t *)a4, &v22), result != -1))
        {
          unsigned int v13 = *((_DWORD *)a5 + 3);
          if (v13 == *((_DWORD *)a5 + 2))
          {
            uint64_t result = WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::VirtualCredential&>((unsigned int *)a5, v11);
          }
          else
          {
            uint64_t v14 = *a5;
            int v15 = (WTF *)*(unsigned int *)(v11 + 12);
            uint64_t v16 = *a5 + 72 * v13;
            *(void *)uint64_t v16 = 0;
            *(void *)(v16 + 8) = 0;
            *(_DWORD *)(v16 + 12) = v15;
            if (v15)
            {
              int v17 = (void *)WTF::fastMalloc(v15);
              *(_DWORD *)(v16 + 8) = v15;
              *(void *)uint64_t v16 = v17;
              memcpy(v17, *(const void **)v11, *(unsigned int *)(v11 + 12));
            }
            uint64_t v18 = *(_DWORD **)(v11 + 16);
            if (v18) {
              *v18 += 2;
            }
            *(void *)(v14 + 72 * v13 + 16) = v18;
            uint64_t v19 = *(_DWORD **)(v11 + 24);
            if (v19) {
              *v19 += 2;
            }
            uint64_t v20 = v14 + 72 * v13;
            *(void *)(v20 + 24) = v19;
            uint64_t result = std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](v20 + 32, v11 + 32);
            uint64_t v21 = *(void *)(v11 + 56);
            *(_WORD *)(v20 + 64) = *(_WORD *)(v11 + 64);
            *(void *)(v20 + 56) = v21;
            ++*((_DWORD *)a5 + 3);
          }
        }
      }
      v11 += 72;
      v12 -= 72;
    }
    while (v12);
  }
  return result;
}

uint64_t WebKit::VirtualAuthenticatorManager::createService@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, void *a4@<X8>)
{
  int v39 = (int)a2;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v5 = *(void *)(a1 + 856);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = (WTF::StringImpl **)(v5 + 16 * v6);
    if (*(_DWORD *)(v5 - 12))
    {
      uint64_t v8 = *(WTF::StringImpl ***)(a1 + 856);
      if (v6)
      {
        uint64_t v9 = 16 * v6;
        uint64_t v8 = *(WTF::StringImpl ***)(a1 + 856);
        while ((unint64_t)*v8 + 1 <= 1)
        {
          v8 += 2;
          v9 -= 16;
          if (!v9)
          {
            uint64_t v8 = v7;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v8 = (WTF::StringImpl **)(v5 + 16 * v6);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = (WTF::StringImpl **)(v5 + 16 * v6);
  if (v5)
  {
LABEL_8:
    uint64_t v10 = (WTF::StringImpl **)(v5 + 16 * *(unsigned int *)(v5 - 4));
    goto LABEL_13;
  }
  uint64_t v10 = 0;
LABEL_13:
  if (v10 != v8)
  {
    uint64_t v38 = 0;
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(a1 + 856);
      if (v12)
      {
        int v13 = *(_DWORD *)(v12 - 8);
        unsigned int v14 = *((_DWORD *)*v8 + 4);
        if (v14 >= 0x100) {
          unsigned int v15 = v14 >> 8;
        }
        else {
          unsigned int v15 = WTF::StringImpl::hashSlowCase(*v8);
        }
        for (i = 0; ; unsigned int v15 = i + v17)
        {
          uint64_t v17 = v15 & v13;
          uint64_t v18 = *(WTF **)(v12 + 16 * v17);
          if (v18 != (WTF *)-1)
          {
            if (!v18) {
              goto LABEL_24;
            }
            if (WTF::equal(v18, *v8, a3)) {
              break;
            }
          }
          ++i;
        }
        uint64_t v19 = *(void *)(v12 + 16 * v17 + 8);
      }
      else
      {
LABEL_24:
        uint64_t v19 = 0;
      }
      uint64_t v20 = (int *)(v19 + 8);
      if (*(unsigned __int8 *)(v19 + 8) == v39)
      {
        uint64_t v21 = *v8;
        if (*v8) {
          *(_DWORD *)v21 += 2;
        }
        char v40 = v21;
        uint64_t v22 = *(WTF::StringImpl **)v19;
        if (v22) {
          *(_DWORD *)v22 += 2;
        }
        unint64_t v41 = v22;
        int v23 = *v20;
        char v43 = *((unsigned char *)v20 + 4);
        int v42 = v23;
        if (v11 == v45)
        {
          unint64_t v24 = WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v44, v11 + 1, (unint64_t)&v40);
          int v25 = HIDWORD(v45);
          uint64_t v38 = v44;
          uint64_t v26 = v44 + 24 * HIDWORD(v45);
          uint64_t v27 = *(void *)v24;
          *(void *)unint64_t v24 = 0;
          *(void *)uint64_t v26 = v27;
          uint64_t v28 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v26 + 8) = v28;
          LOBYTE(v28) = *(unsigned char *)(v24 + 20);
          *(_DWORD *)(v26 + 16) = *(_DWORD *)(v24 + 16);
          *(unsigned char *)(v26 + 20) = v28;
        }
        else
        {
          uint64_t v29 = v38 + 24 * v11;
          char v40 = 0;
          *(void *)uint64_t v29 = v21;
          uint64_t v30 = v41;
          unint64_t v41 = 0;
          *(void *)(v29 + 8) = v30;
          LODWORD(v30) = v42;
          *(unsigned char *)(v29 + 20) = v43;
          *(_DWORD *)(v29 + 16) = v30;
          int v25 = HIDWORD(v45);
        }
        unsigned int v11 = v25 + 1;
        HIDWORD(v45) = v25 + 1;
        uint64_t v31 = v41;
        unint64_t v41 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, a2);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
        char v32 = v40;
        char v40 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, a2);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
      }
      uint64_t v33 = v8 + 2;
      uint64_t v8 = v7;
      if (v33 != v7)
      {
        uint64_t v8 = v33;
        while ((unint64_t)*v8 + 1 <= 1)
        {
          v8 += 2;
          if (v8 == v7)
          {
            uint64_t v8 = v7;
            break;
          }
        }
      }
    }
    while (v8 != v10);
  }
  WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::VirtualService,WebKit::AuthenticatorTransportServiceObserver &,WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>((uint64_t)a3, (uint64_t)&v44, a4);
  return WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v34);
}

WTF::ASCIILiteral *WebKit::VirtualAuthenticatorManager::runPanel(WebKit::VirtualAuthenticatorManager *this)
{
  WebKit::AuthenticatorManager::getTransports(this, &v4);
  if (v4 && *(_DWORD *)(v4 - 12)) {
    uint64_t result = WebKit::AuthenticatorManager::startDiscovery((uint64_t)this, &v4);
  }
  else {
    uint64_t result = (WTF::ASCIILiteral *)WebKit::AuthenticatorManager::cancel(this);
  }
  if (v4) {
    return (WTF::ASCIILiteral *)WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return result;
}

void WebKit::VirtualAuthenticatorManager::selectAssertionResponse(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  if (*((_DWORD *)a2 + 3))
  {
    uint64_t v4 = **a2;
    uint64_t v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4);
    uint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 8);
    v6(v5);
  }
  else
  {
    __break(0xC471u);
  }
}

void non-virtual thunk to'WebKit::VirtualAuthenticatorManager::selectAssertionResponse(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
}

uint64_t WebKit::VirtualAuthenticatorManager::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t non-virtual thunk to'WebKit::VirtualAuthenticatorManager::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void WebKit::VirtualAuthenticatorManager::~VirtualAuthenticatorManager(WebKit::VirtualAuthenticatorManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 108);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 107);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl **)a2);
  }

  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 108);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 107);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl **)a2);
  }
  WebKit::AuthenticatorManager::~AuthenticatorManager(this);

  WTF::fastFree(v5, v6);
}

uint64_t WebKit::VirtualAuthenticatorManager::isVirtual(WebKit::VirtualAuthenticatorManager *this)
{
  return 1;
}

void non-virtual thunk to'WebKit::VirtualAuthenticatorManager::~VirtualAuthenticatorManager(WebKit::VirtualAuthenticatorManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 106);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 105);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl **)a2);
  }

  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::VirtualAuthenticatorManager *)((char *)this - 16));
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 106);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 105);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, (WTF::StringImpl **)a2);
  }
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::VirtualAuthenticatorManager *)((char *)this - 16));

  WTF::fastFree(v5, v6);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        uint64_t v5 = *(WTF::StringImpl **)(v4 - 8);
        *(void *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl ***)(a1 + 8);
    do
    {
      uint64_t v5 = (WTF::StringImpl *)*(v4 - 1);
      if (v5 != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        uint64_t *v4 = 0;
        if (a2)
        {
          std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v4, a2);
          uint64_t v5 = (WTF::StringImpl *)*(v4 - 1);
        }
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    unsigned int v15 = (uint64_t *)(v8 + 16 * v14);
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      uint64_t *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      unsigned int v15 = v12;
    }
    WTF::String::operator=(v15, a2);
    uint64_t v17 = *(void *)a3;
    *(void *)a3 = 0;
    uint64_t v18 = (WTF::StringImpl **)v15[1];
    v15[1] = v17;
    if (v18) {
      std::default_delete<WTF::URL>::operator()[abi:sn180100](v15 + 8, v18);
    }
    uint64_t v19 = *a1;
    if (*a1) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_28:
        unsigned int v15 = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        uint64_t v23 = *a1;
        if (*a1) {
          unint64_t v26 = *(unsigned int *)(v23 - 4);
        }
        else {
          unint64_t v26 = 0;
        }
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_28;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v23 + 16 * v26;
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  if (!WTF::equal(v16, *a2, a3)) {
    goto LABEL_13;
  }
  uint64_t v21 = *a1;
  if (*a1) {
    uint64_t v22 = *(unsigned int *)(v21 - 4);
  }
  else {
    uint64_t v22 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v21 + 16 * v22;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v27 = v8 + 16 * v14;
  uint64_t v28 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v31 = *(WTF::StringImpl ***)(v27 + 8);
  uint64_t v29 = (uint64_t *)(v27 + 8);
  uint64_t v30 = v31;
  uint64_t *v29 = v28;
  if (v31)
  {
    std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v29, v30);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      int v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unsigned int v20 = *((_DWORD *)v14 + 4);
          if (v20 >= 0x100) {
            unsigned int v21 = v20 >> 8;
          }
          else {
            unsigned int v21 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v19;
            unsigned int v21 = ++v22 + v23;
          }
          while (*(void *)(v18 + 16 * v23));
          uint64_t v24 = v18 + 16 * v23;
          unint64_t v26 = (void *)(v24 + 8);
          uint64_t v25 = *(WTF::StringImpl ***)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v25)
          {
            std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v26, v25);
            uint64_t v28 = *(WTF::StringImpl **)v24;
            *(void *)uint64_t v24 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2) {
                WTF::StringImpl::destroy(v28, v27);
              }
              else {
                *(_DWORD *)v28 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v24 = 0;
          }
          uint64_t v29 = *v13;
          unsigned char *v13 = 0;
          *(void *)uint64_t v24 = v29;
          uint64_t v30 = v6 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          uint64_t v31 = (WTF::StringImpl ***)(v30 + 8);
          WTF::StringImpl *v31 = 0;
          void *v26 = v32;
          unsigned int v10 = *v31;
          WTF::StringImpl *v31 = 0;
          if (v10) {
            std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v31, v10);
          }
          uint64_t v33 = *v13;
          unsigned char *v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v17 = *(WTF::StringImpl ***)(v15 + 8);
          uint64_t v16 = (void *)(v15 + 8);
          unsigned int v10 = v17;
          *uint64_t v16 = 0;
          if (v17)
          {
            std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v16, v10);
            uint64_t v14 = *v13;
          }
          unsigned char *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::VirtualCredential>::destruct(*(WTF **)a1, (WTF *)(*(void *)a1 + 72 * v3));
  }
  int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebKit::VirtualCredential>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      if (*((unsigned char *)v3 + 48))
      {
        uint64_t v6 = (WTF *)*((void *)v3 + 4);
        if (v6)
        {
          *((void *)v3 + 4) = 0;
          *((_DWORD *)v3 + 10) = 0;
          WTF::fastFree(v6, a2);
        }
      }
      int v4 = (WTF::StringImpl *)*((void *)v3 + 3);
      *((void *)v3 + 3) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      unsigned int v5 = (WTF::StringImpl *)*((void *)v3 + 2);
      *((void *)v3 + 2) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t result = *(WTF **)v3;
      if (*(void *)v3)
      {
        *(void *)unsigned int v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, a2);
      }
      unsigned int v3 = (WTF *)((char *)v3 + 72);
    }
    while (v3 != a2);
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  uint64_t v36 = a4;
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = (WTF *)(v8 + 24 * (v11 & v9));
    uint64_t v16 = *(WTF **)v15;
    if (*(void *)v15 != -1) {
      break;
    }
    uint64_t v12 = (WTF *)(v8 + 24 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = v12;
    }
    WTF::String::operator=((uint64_t *)v15, a2);
    uint64_t v19 = *(void *)a3;
    uint64_t v20 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    unsigned int v21 = *((_DWORD *)v15 + 5);
    if (v21) {
      WTF::VectorDestructor<true,WebKit::VirtualCredential>::destruct(*((WTF **)v15 + 1), (WTF *)(*((void *)v15 + 1) + 72 * v21));
    }
    int v22 = (WTF *)*((void *)v15 + 1);
    if (v22)
    {
      *((void *)v15 + 1) = 0;
      *((_DWORD *)v15 + 4) = 0;
      WTF::fastFree(v22, v18);
    }
    *((void *)v15 + 1) = v19;
    v37[0] = 0;
    v37[1] = 0;
    *((void *)v15 + 2) = v20;
    uint64_t result = (WTF *)WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v18);
    uint64_t v24 = *a1;
    if (*a1) {
      int v25 = *(_DWORD *)(v24 - 12) + 1;
    }
    else {
      int v25 = 1;
    }
    *(_DWORD *)(v24 - 12) = v25;
    uint64_t v28 = *a1;
    if (*a1) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30)
      {
LABEL_30:
        uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        uint64_t v15 = result;
        uint64_t v28 = *a1;
        if (*a1) {
          LODWORD(v31) = *(_DWORD *)(v28 - 4);
        }
        else {
          LODWORD(v31) = 0;
        }
      }
    }
    else if (3 * v31 <= 4 * v30)
    {
      goto LABEL_30;
    }
    *(void *)uint64_t v36 = v15;
    *(void *)(v36 + 8) = v28 + 24 * v31;
    *(unsigned char *)(v36 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3)) {
    goto LABEL_13;
  }
  uint64_t v26 = *a1;
  if (*a1) {
    unsigned int v27 = *(_DWORD *)(v26 - 4);
  }
  else {
    unsigned int v27 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v26 + 24 * v27;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v32 = v8 + 24 * v14;
  uint64_t v33 = v32 + 8;
  unsigned int v34 = *(_DWORD *)(v32 + 20);
  if (v34) {
    WTF::VectorDestructor<true,WebKit::VirtualCredential>::destruct(*(WTF **)v33, (WTF *)(*(void *)v33 + 72 * v34));
  }
  uint64_t result = *(WTF **)v33;
  if (*(void *)v33)
  {
    *(void *)uint64_t v33 = 0;
    *(_DWORD *)(v33 + 8) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v17);
  }
  uint64_t v35 = *(void *)a3;
  *(void *)a3 = 0;
  *(void *)uint64_t v33 = v35;
  LODWORD(v35) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v33 + 8) = v35;
  LODWORD(v35) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v33 + 12) = v35;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = v3;
    do
    {
      unsigned int v11 = (WTF::StringImpl **)(v2 + 24 * v8);
      uint64_t v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v16 = *((_DWORD *)v12 + 4);
          if (v16 >= 0x100) {
            int v17 = v16 >> 8;
          }
          else {
            int v17 = WTF::StringImpl::hashSlowCase(v12);
          }
          int v18 = 0;
          do
          {
            unsigned int v19 = v17 & v15;
            uint64_t v20 = (WTF::StringImpl **)(v14 + 24 * (v17 & v15));
            int v17 = ++v18 + (v17 & v15);
          }
          while (*v20);
          unsigned int v21 = (void *)(v14 + 24 * v19 + 8);
          WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v7);
          uint64_t v23 = *v20;
          *uint64_t v20 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v22);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          uint64_t v24 = *v11;
          *unsigned int v11 = 0;
          *uint64_t v20 = v24;
          uint64_t v25 = v2 + 24 * v8;
          void *v21 = 0;
          *(void *)(v14 + 24 * v19 + 16) = 0;
          uint64_t v26 = *(void *)(v25 + 8);
          v25 += 8;
          *(void *)uint64_t v25 = 0;
          void *v21 = v26;
          LODWORD(v24) = *(_DWORD *)(v25 + 8);
          *(_DWORD *)(v25 + 8) = 0;
          uint64_t v27 = v14 + 24 * v19;
          *(_DWORD *)(v27 + 16) = v24;
          LODWORD(v24) = *(_DWORD *)(v25 + 12);
          *(_DWORD *)(v25 + 12) = 0;
          *(_DWORD *)(v27 + 20) = v24;
          WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, v22);
          uint64_t v28 = *v11;
          *unsigned int v11 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          if (v11 == a2) {
            uint64_t v9 = v14 + 24 * v19;
          }
        }
        else
        {
          WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24 * v8 + 8, v7);
          int v13 = *v11;
          *unsigned int v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
      }
      ++v8;
    }
    while (v8 != v10);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v9;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v3 = *a1;
  if (*a1) {
    int v4 = *(_DWORD *)(v3 - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(v3 - 12) = v4;
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v7 >> 1, 0);
    }
  }
}

void WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  uint64_t v5 = *(WTF::StringImpl ***)(a1 + 8);
  int v4 = (void *)(a1 + 8);
  uint64_t v3 = v5;
  void *v4 = 0;
  if (v5)
  {
    std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v4, v3);
  }
}

uint64_t WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::VirtualCredential>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  unsigned int v4 = a1[3];
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 72 * v4;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  uint64_t v7 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v6 = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v6 + 8) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  uint64_t v8 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v6 + 16) = v8;
  uint64_t v9 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 0;
  uint64_t v10 = v6 + 32;
  *(_DWORD *)(v10 - 20) = v7;
  *(void *)(v10 - 8) = v9;
  *(unsigned char *)(v10 + 16) = 0;
  unsigned int v11 = (unsigned char *)(v10 + 16);
  if (*(unsigned char *)(v3 + 48))
  {
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    uint64_t v12 = *(void *)(v3 + 32);
    *(void *)(v3 + 32) = 0;
    *(void *)uint64_t v10 = v12;
    int v13 = *(_DWORD *)(v3 + 40);
    *(_DWORD *)(v3 + 40) = 0;
    uint64_t v14 = v5 + 72 * v4;
    *(_DWORD *)(v14 + 40) = v13;
    int v15 = *(_DWORD *)(v3 + 44);
    *(_DWORD *)(v3 + 44) = 0;
    *(_DWORD *)(v14 + 44) = v15;
    *unsigned int v11 = 1;
  }
  uint64_t v16 = v5 + 72 * v4;
  uint64_t v17 = *(void *)(v3 + 56);
  *(_WORD *)(v16 + 64) = *(_WORD *)(v3 + 64);
  *(void *)(v16 + 56) = v17;
  ++a1[3];
  return 1;
}

unint64_t WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 72 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = result[3];
      int v5 = 72 * a2;
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(72 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x48;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        unint64_t v7 = result;
        unint64_t v8 = 0;
        uint64_t v9 = 72 * v4;
        do
        {
          unint64_t v10 = &v7[v8 / 4];
          unsigned int v11 = (char *)v3 + v8;
          *(void *)unint64_t v10 = 0;
          *((void *)v10 + 1) = 0;
          uint64_t v12 = *(void *)((char *)v3 + v8);
          *(void *)unsigned int v11 = 0;
          *(void *)unint64_t v10 = v12;
          LODWORD(v12) = *(_DWORD *)((char *)v3 + v8 + 8);
          *((_DWORD *)v11 + 2) = 0;
          uint64_t v10[2] = v12;
          LODWORD(v12) = *(_DWORD *)((char *)v3 + v8 + 12);
          *((_DWORD *)v11 + 3) = 0;
          void v10[3] = v12;
          uint64_t v13 = *(void *)((char *)v3 + v8 + 16);
          *((void *)v11 + 2) = 0;
          *((void *)v10 + 2) = v13;
          uint64_t v14 = *(void *)((char *)v3 + v8 + 24);
          *((void *)v11 + 3) = 0;
          *((void *)v10 + 3) = v14;
          LOBYTE(v7[v8 / 4 + 8]) = 0;
          int v15 = &v7[v8 / 4 + 8];
          *((unsigned char *)v10 + 48) = 0;
          if (*((unsigned char *)v3 + v8 + 48))
          {
            *(void *)int v15 = 0;
            *(void *)&v7[v8 / 4 + 10] = 0;
            uint64_t v16 = *((void *)v11 + 4);
            *((void *)v11 + 4) = 0;
            *(void *)int v15 = v16;
            unsigned int v17 = *((_DWORD *)v11 + 10);
            *((_DWORD *)v11 + 10) = 0;
            v10[10] = v17;
            unsigned int v18 = *((_DWORD *)v11 + 11);
            *((_DWORD *)v11 + 11) = 0;
            v10[11] = v18;
            *((unsigned char *)v10 + 48) = 1;
          }
          uint64_t v19 = *((void *)v11 + 7);
          *((_WORD *)v10 + 32) = *((_WORD *)v11 + 32);
          *((void *)v10 + 7) = v19;
          if (v11[48])
          {
            int v22 = (WTF *)*((void *)v11 + 4);
            if (v22)
            {
              *((void *)v11 + 4) = 0;
              *(_DWORD *)((char *)v3 + v8 + 40) = 0;
              WTF::fastFree(v22, v6);
            }
          }
          uint64_t v20 = (WTF::StringImpl *)*((void *)v11 + 3);
          *((void *)v11 + 3) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v6);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          unsigned int v21 = (WTF::StringImpl *)*((void *)v11 + 2);
          *((void *)v11 + 2) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v6);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          uint64_t result = *(unsigned int **)((char *)v3 + v8);
          if (result)
          {
            *(void *)((char *)v3 + v8) = 0;
            *((_DWORD *)v11 + 2) = 0;
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v8 += 72;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>(uint64_t *a1, const void ***a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 3);
  if (!v2) {
    return -1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  int v5 = *a2;
  size_t v6 = *((unsigned int *)*a2 + 3);
  while (*(_DWORD *)(v4 + 12) != v6 || memcmp(*(const void **)v4, *v5, v6))
  {
    ++v3;
    v4 += 16;
    if (v2 == v3) {
      return -1;
    }
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::VirtualCredential&>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  unsigned int v4 = a1[3];
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 72 * v4;
  unint64_t v7 = (WTF *)*(unsigned int *)(v3 + 12);
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 12) = v7;
  if (v7)
  {
    unint64_t v8 = (void *)WTF::fastMalloc(v7);
    *(_DWORD *)(v6 + 8) = v7;
    *(void *)uint64_t v6 = v8;
    memcpy(v8, *(const void **)v3, *(unsigned int *)(v3 + 12));
  }
  uint64_t v9 = *(_DWORD **)(v3 + 16);
  if (v9) {
    *v9 += 2;
  }
  *(void *)(v5 + 72 * v4 + 16) = v9;
  unint64_t v10 = *(_DWORD **)(v3 + 24);
  if (v10) {
    *v10 += 2;
  }
  uint64_t v11 = v5 + 72 * v4;
  *(void *)(v11 + 24) = v10;
  std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](v11 + 32, v3 + 32);
  uint64_t v12 = *(void *)(v3 + 56);
  *(_WORD *)(v11 + 64) = *(_WORD *)(v3 + 64);
  *(void *)(v11 + 56) = v12;
  ++a1[3];
  return 1;
}

unint64_t WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      unsigned int v4 = result[3];
      int v5 = 24 * a2;
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        unint64_t v7 = result;
        unint64_t v8 = (WTF *)((char *)v3 + 24 * v4);
        unint64_t v9 = v3;
        do
        {
          unint64_t v10 = *(unsigned int **)v9;
          *(void *)unint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t v11 = *((void *)v9 + 1);
          *((void *)v9 + 1) = 0;
          *((void *)v7 + 1) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 4);
          *((unsigned char *)v7 + 20) = *((unsigned char *)v9 + 20);
          v7[4] = v11;
          uint64_t v12 = (WTF::StringImpl *)*((void *)v9 + 1);
          *((void *)v9 + 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v6);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
          uint64_t result = *(unsigned int **)v9;
          *(void *)unint64_t v9 = 0;
          if (result)
          {
            if (*result == 2) {
              uint64_t result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            }
            else {
              *result -= 2;
            }
          }
          unint64_t v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void WebKit::createPrivateKey(SecKeyRef *a1@<X8>)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *MEMORY[0x1E4F3B740];
  uint64_t v4 = *MEMORY[0x1E4F3B6D8];
  v8[0] = *MEMORY[0x1E4F3B718];
  v8[1] = v4;
  uint64_t v5 = *MEMORY[0x1E4F3B6E8];
  v9[0] = v3;
  v9[1] = v5;
  uint64_t v8[2] = *MEMORY[0x1E4F3B708];
  _OWORD v9[2] = &unk_1EEA52F00;
  CFErrorRef v7 = 0;
  SecKeyRef v6 = SecKeyCreateRandomKey((CFDictionaryRef)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:3], &v7);
  if (v7)
  {
    *a1 = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    *a1 = v6;
  }
}

void WebKit::credentialIdAndCosePubKeyForPrivateKey(SecKeyRef *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = SecKeyCopyPublicKey(*a1);
  CFErrorRef error = 0;
  CFDataRef v4 = SecKeyCopyExternalRepresentation(v3, &error);
  if (error) {
    CFRelease(error);
  }
  if (v3) {
    CFRelease(v3);
  }
  PAL::CryptoDigest::create();
  if (v4)
  {
    [(__CFData *)v4 bytes];
    [(__CFData *)v4 length];
  }
  PAL::CryptoDigest::addBytes();
  PAL::CryptoDigest::computeHash((uint64_t *)&error, v16);
  size_t v5 = v20;
  CFErrorRef v6 = error;
  if (v16)
  {
    PAL::CryptoDigest::~CryptoDigest(v16);
    WTF::fastFree(v7, v8);
  }
  unsigned int v20 = 32;
  unint64_t v9 = (__CFError *)WTF::fastMalloc((WTF *)0x20);
  int v19 = 32;
  CFErrorRef error = v9;
  -[__CFData getBytes:range:](v4, "getBytes:range:", v9, 1, 32);
  unsigned int v17 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  -[__CFData getBytes:range:](v4, "getBytes:range:", v17, 33, 32);
  WebCore::encodeES256PublicKeyAsCBOR();
  if (v17) {
    WTF::fastFree(v17, v10);
  }
  uint64_t v11 = error;
  if (error)
  {
    CFErrorRef error = 0;
    int v19 = 0;
    WTF::fastFree(v11, v10);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if (v5)
  {
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)v5);
    *(_DWORD *)(a2 + 8) = v5;
    *(void *)a2 = v12;
    memcpy(v12, v6, v5);
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v15;
  if (v15)
  {
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)v15);
    *(_DWORD *)(a2 + 24) = v15;
    *(void *)(a2 + 16) = v13;
    memcpy(v13, v14, v15);
  }
  if (v14) {
    WTF::fastFree((WTF *)v14, v10);
  }
  if (v6) {
    WTF::fastFree(v6, v10);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_199224D00(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PAL::CryptoDigest *a11, int a12, WTF *a13, int a14)
{
  if (v18)
  {
    *(void *)uint64_t v16 = 0;
    *(_DWORD *)(v16 + 8) = 0;
    WTF::fastFree(v18, a2);
  }
  if (v17) {
    WTF::fastFree(v17, a2);
  }
  if (v15) {
    WTF::fastFree(v15, a2);
  }
  if (v14) {
    CFRelease(v14);
  }
  _Unwind_Resume(a1);
}

void WebKit::base64PrivateKey(SecKeyRef *a1@<X0>, void *a2@<X8>)
{
  CFErrorRef error = 0;
  CFDataRef v3 = SecKeyCopyExternalRepresentation(*a1, &error);
  CFErrorRef v4 = error;
  if (error)
  {
    size_t v5 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v5 += 2;
    }
    *a2 = v5;
    CFRelease(v4);
  }
  else
  {
    MEMORY[0x19972EAD0](a2, [(__CFData *)v3 base64EncodedStringWithOptions:0]);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_199224E58(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::privateKeyFromBase64(WebKit *this@<X0>, SecKeyRef *a2@<X8>)
{
  v14[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F3B740];
  uint64_t v6 = *MEMORY[0x1E4F3B6D8];
  v13[0] = *MEMORY[0x1E4F3B718];
  v13[1] = v6;
  uint64_t v7 = *MEMORY[0x1E4F3B6E8];
  v14[0] = v5;
  v14[1] = v7;
  v13[2] = *MEMORY[0x1E4F3B708];
  uint64_t v14[2] = &unk_1EEA52F00;
  CFDictionaryRef v8 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:3];
  id v9 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  if (*(void *)this) {
    unint64_t v10 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v10 = &stru_1EEA10550;
  }
  CFDataRef v11 = (const __CFData *)[v9 initWithBase64EncodedString:v10 options:0];
  CFErrorRef v12 = 0;
  *a2 = SecKeyCreateWithData(v11, v8, &v12);
  if (v11) {
    CFRelease(v11);
  }
}

void sub_199224F9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::signatureForPrivateKey(SecKeyRef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = (void *)[MEMORY[0x1E4F1CA58] dataWithBytes:*(void *)a2 length:*(unsigned int *)(a2 + 12)];
  [v7 appendBytes:*(void *)a3 length:*(unsigned int *)(a3 + 12)];
  CFErrorRef error = 0;
  CFDataRef v8 = SecKeyCreateSignature(*a1, (SecKeyAlgorithm)*MEMORY[0x1E4F3BA70], (CFDataRef)v7, &error);
  if (error) {
    CFRelease(error);
  }
  if (v8)
  {
    id v9 = (char *)[(__CFData *)v8 bytes];
    unint64_t v10 = (WTF *)[(__CFData *)v8 length];
  }
  else
  {
    id v9 = 0;
    unint64_t v10 = 0;
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a4, v9, v10);
  if (v8) {
    CFRelease(v8);
  }
}

void sub_199225088(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *WebKit::VirtualHidConnection::VirtualHidConnection(uint64_t a1, _DWORD **a2, uint64_t a3, atomic_uint **a4)
{
  *(void *)(a1 + 80) = 0;
  uint64_t result = WebKit::HidConnection::HidConnection((CFTypeRef *)a1, 0);
  CFTypeRef *result = &unk_1EE9F9E98;
  CFDataRef v8 = *a4;
  if (*a4) {
    atomic_fetch_add(v8, 1u);
  }
  result[11] = v8;
  id v9 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v9 += 2;
  }
  result[12] = v9;
  int v10 = *(_DWORD *)(a3 + 8);
  *((unsigned char *)result + 108) = *(unsigned char *)(a3 + 12);
  *((_DWORD *)result + 26) = v10;
  *((unsigned char *)result + 112) = 0;
  *((unsigned char *)result + 160) = 0;
  result[21] = 0;
  result[22] = 0;
  *((_DWORD *)result + 46) = -1;
  CFDataRef v11 = *a2;
  if (*a2) {
    *v11 += 2;
  }
  result[24] = v11;
  return result;
}

uint64_t WebKit::VirtualHidConnection::initialize(uint64_t this)
{
  *(unsigned char *)(this + 72) = 1;
  return this;
}

uint64_t WebKit::VirtualHidConnection::terminate(uint64_t this)
{
  *(unsigned char *)(this + 72) = 0;
  return this;
}

uint64_t WebKit::VirtualHidConnection::sendSync()
{
  return 1;
}

void WebKit::VirtualHidConnection::send(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 80), a1);
  uint64_t v6 = *(atomic_uint **)(a1 + 80);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = a2[1];
  a2[1] = 0;
  int v10 = malloc_type_malloc(0x40uLL, 0x10F00407B933D54uLL);
  void *v10 = MEMORY[0x1E4F14398];
  v10[1] = 50331650;
  uint64_t v10[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  void v10[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::descriptor;
  v10[4] = v6;
  v10[5] = v7;
  v10[6] = v9;
  v10[7] = v8;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, v10);

  _Block_release(v10);
}

uint64_t WebKit::VirtualHidConnection::receiveHidMessage(uint64_t a1, fido::FidoHidMessage *this)
{
  for (uint64_t result = fido::FidoHidMessage::numPackets(this); result; uint64_t result = fido::FidoHidMessage::numPackets(this))
  {
    Packet = (WTF::RunLoop *)fido::FidoHidMessage::popNextPacket((uint64_t *)&v13, this);
    WTF::RunLoop::main(Packet);
    uint64_t v6 = v13;
    uint64_t v7 = v14;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 80), a1);
    uint64_t v8 = *(atomic_uint **)(a1 + 80);
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v9 = &unk_1EE9F9F28;
    v9[1] = v6;
    _OWORD v9[2] = v7;
    v9[3] = v8;
    CFErrorRef v12 = v9;
    WTF::RunLoop::dispatch();
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    CFDataRef v11 = v13;
    if (v13)
    {
      uint64_t v13 = 0;
      LODWORD(v14) = 0;
      WTF::fastFree(v11, v10);
    }
  }
  return result;
}

WTF *WebKit::VirtualHidConnection::recieveResponseCode(uint64_t a1, char a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v6[0] = a2;
  CFDataRef v3 = (unsigned char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v7, (WTF::FastMalloc *)1, (unint64_t)v6);
  *((unsigned char *)v7 + HIDWORD(vWebKit::UserMediaCaptureManager::~UserMediaCaptureManager((WebKit::UserMediaCaptureManager *)((char *)this - 8)) = *v3;
  ++HIDWORD(v8);
  uint64_t result = (WTF *)fido::FidoHidMessage::create();
  if (v6[48])
  {
    WebKit::VirtualHidConnection::receiveHidMessage(a1, (fido::FidoHidMessage *)v6);
    std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)v6);
    uint64_t result = v7;
    if (v7)
    {
      uint64_t v7 = 0;
      LODWORD(v8) = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebKit::VirtualHidConnection::~VirtualHidConnection(WebKit::VirtualHidConnection *this, WTF::StringImpl *a2)
{
  WebKit::VirtualHidConnection::~VirtualHidConnection(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  void *v8;

  CFDataRef v3 = (WTF::StringImpl *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  CFErrorRef v4 = (WTF *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v4, a2);
  }
  std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((WebKit::VirtualHidConnection *)((char *)this + 112));
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  WebKit::HidConnection::~HidConnection(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, v8);
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  CFErrorRef v4 = *(WTF **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = (atomic_uint *)*((void *)a1 + 4);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v4 = *((void *)a1 + 7);
  *((void *)a1 + 7) = 0;
  uint64_t v5 = *((void *)a1 + 6);
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v6 = &unk_1EE9F9F00;
  v6[1] = v2;
  void v6[2] = v3;
  v6[3] = v5;
  v6[4] = v4;
  uint64_t v8 = v6;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F9F00;
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F9F00;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 8)) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
    goto LABEL_232;
  }
  uint64_t v4 = (fido::FidoHidMessage *)(v3 + 112);
  if (*(unsigned char *)(v3 + 160))
  {
    fido::FidoHidMessage::addContinuationPacket();
  }
  else
  {
    fido::FidoHidMessage::createFromSerializedData();
    std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)(v3 + 112), (uint64_t)&v171);
    std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v171);
  }
  if (!*(unsigned char *)(v3 + 160)) {
    goto LABEL_237;
  }
  if (!fido::FidoHidMessage::messageComplete((fido::FidoHidMessage *)(v3 + 112))) {
    goto LABEL_231;
  }
  if (!*(unsigned char *)(v3 + 160)) {
    goto LABEL_231;
  }
  uint64_t v6 = *(void *)(v3 + 88);
  if (!v6) {
    goto LABEL_231;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    goto LABEL_231;
  }
  *(_DWORD *)(v3 + 184) = *(_DWORD *)(v3 + 112);
  int v8 = *(unsigned __int8 *)(v3 + 116);
  if (v8 == 16)
  {
    fido::FidoHidMessage::getMessagePayload((uint64_t *)&v181, (fido::FidoHidMessage *)(v3 + 112));
    if (v183)
    {
      int v15 = *v181;
      memmove(v181, v181 + 1, --v183);
      *(void *)&long long v171 = v181;
      *((void *)&v171 + 1) = v183;
      cbor::CBORReader::read();
      if (v15 != 2)
      {
        if (v15 != 1)
        {
LABEL_159:
          int v106 = 1;
          goto LABEL_225;
        }
        char v175 = 0;
        long long v171 = 0u;
        long long v172 = 0u;
        LOBYTE(v173) = 0;
        if (!v180) {
          goto LABEL_237;
        }
        uint64_t Map = cbor::CBORValue::getMap((cbor::CBORValue *)&v178);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v148);
        unsigned int v18 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)&v148);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
        if (!v180) {
          goto LABEL_237;
        }
        if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v178) + 8) != v18)
        {
          uint64_t v19 = cbor::CBORValue::getMap((cbor::CBORValue *)(v18 + 8));
          cbor::CBORValue::CBORValue();
          unsigned int v20 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v19, (cbor::CBORValue *)&v148);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
          unsigned int v21 = (void *)(v19 + 8);
          if ((void *)(v19 + 8) != v20 && cbor::CBORValue::getBool((cbor::CBORValue *)(v20 + 8)))
          {
            if (!*(unsigned char *)(v3 + 105))
            {
              uint64_t v71 = v3;
              char v72 = 43;
              goto LABEL_93;
            }
            char v176 = 1;
          }
          cbor::CBORValue::CBORValue();
          int v22 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v19, (cbor::CBORValue *)&v148);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
          if (v21 != v22)
          {
            int Bool = cbor::CBORValue::getBool((cbor::CBORValue *)(v22 + 8));
            if (Bool)
            {
              if (!*(unsigned char *)(v3 + 106))
              {
                uint64_t v71 = v3;
                char v72 = 44;
                goto LABEL_93;
              }
              if (!*(unsigned char *)(v3 + 108))
              {
                uint64_t v71 = v3;
                char v72 = 39;
                goto LABEL_93;
              }
            }
            char v177 = Bool;
          }
        }
        if (!v180) {
          goto LABEL_237;
        }
        uint64_t v24 = cbor::CBORValue::getMap((cbor::CBORValue *)&v178);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v148);
        uint64_t v25 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v24, (cbor::CBORValue *)&v148);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
        if (!v180) {
          goto LABEL_237;
        }
        if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v178) + 8) != v25)
        {
          uint64_t v26 = cbor::CBORValue::getMap((cbor::CBORValue *)(v25 + 8));
          cbor::CBORValue::CBORValue();
          uint64_t v27 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v26, (cbor::CBORValue *)&v148);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
          if ((void *)(v26 + 8) != v27)
          {
            char String = (WTF::StringImpl **)cbor::CBORValue::getString((cbor::CBORValue *)(v27 + 8));
            WTF::String::operator=((uint64_t *)&v172, String);
            WebKit::createPrivateKey((SecKeyRef *)&cf);
            CFTypeRef v29 = cf;
            SecKeyRef v184 = (SecKeyRef)cf;
            if (cf) {
              CFRetain(cf);
            }
            WebKit::base64PrivateKey(&v184, &v148);
            unint64_t v31 = v148;
            uint64_t v148 = 0;
            uint64_t v32 = (WTF::StringImpl *)*((void *)&v172 + 1);
            *((void *)&v172 + 1) = v31;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
              {
                WTF::StringImpl::destroy(v32, v30);
                unsigned __int32 v79 = v148;
                uint64_t v148 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2) {
                    WTF::StringImpl::destroy(v79, v78);
                  }
                  else {
                    *(_DWORD *)v79 -= 2;
                  }
                }
              }
              else
              {
                *(_DWORD *)v32 -= 2;
                uint64_t v148 = 0;
              }
            }
            SecKeyRef v184 = 0;
            if (v29) {
              CFRelease(v29);
            }
            if (v180)
            {
              uint64_t v107 = cbor::CBORValue::getMap((cbor::CBORValue *)&v178);
              cbor::CBORValue::CBORValue((cbor::CBORValue *)&v148);
              uint64_t v108 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v107, (cbor::CBORValue *)&v148);
              cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
              if (v180)
              {
                if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v178) + 8) == v108
                  || (uint64_t v109 = cbor::CBORValue::getMap((cbor::CBORValue *)(v108 + 8)),
                      cbor::CBORValue::CBORValue(),
                      uint64_t v110 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v109, (cbor::CBORValue *)&v148), cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148), (void *)(v109 + 8) == v110))
                {
                  WebKit::VirtualHidConnection::recieveResponseCode(v3, 20);
                  int v73 = 1;
LABEL_210:
                  CFTypeRef v133 = cf;
                  CFTypeRef cf = 0;
                  if (v133) {
                    CFRelease(v133);
                  }
LABEL_212:
                  if (v175)
                  {
                    char v140 = v173;
                    if (v173)
                    {
                      v173 = 0;
                      int v174 = 0;
                      WTF::fastFree(v140, v16);
                    }
                  }
                  long long v134 = (WTF::StringImpl *)*((void *)&v172 + 1);
                  *((void *)&v172 + 1) = 0;
                  if (v134)
                  {
                    if (*(_DWORD *)v134 == 2) {
                      WTF::StringImpl::destroy(v134, (WTF::StringImpl *)v16);
                    }
                    else {
                      *(_DWORD *)v134 -= 2;
                    }
                  }
                  char v135 = (WTF::StringImpl *)v172;
                  *(void *)&long long v172 = 0;
                  if (v135)
                  {
                    if (*(_DWORD *)v135 == 2) {
                      WTF::StringImpl::destroy(v135, (WTF::StringImpl *)v16);
                    }
                    else {
                      *(_DWORD *)v135 -= 2;
                    }
                  }
                  __int16 v136 = (WTF *)v171;
                  if ((void)v171)
                  {
                    *(void *)&long long v171 = 0;
                    DWORD2(v171) = 0;
                    WTF::fastFree(v136, v16);
                  }
                  if (!v73) {
                    goto LABEL_159;
                  }
                  goto LABEL_224;
                }
                Bytechar String = cbor::CBORValue::getByteString((cbor::CBORValue *)(v110 + 8));
                std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>((uint64_t)&v173, ByteString);
                CFTypeRef v166 = cf;
                if (cf) {
                  CFRetain(cf);
                }
                WebKit::credentialIdAndCosePubKeyForPrivateKey((SecKeyRef *)&v166, (uint64_t)&__src);
                CFTypeRef v112 = v166;
                CFTypeRef v166 = 0;
                if (v112) {
                  CFRelease(v112);
                }
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v171, (uint64_t)&__src);
                WebKit::VirtualAuthenticatorManager::addCredential(v7, (WTF::StringImpl **)(v3 + 192), (unint64_t)&v171);
                uint64_t v148 = 0;
                size_t v149 = 0x1000000000;
                uint64_t v113 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                LODWORD(v149) = 16;
                uint64_t v148 = v113;
                bzero(v113, HIDWORD(v149));
                WebCore::buildAttestedCredentialData();
                int v115 = v148;
                if (v148)
                {
                  uint64_t v148 = 0;
                  LODWORD(v149) = 0;
                  WTF::fastFree(v115, v114);
                }
                WebCore::buildAuthData();
                v161[0] = 0;
                v161[1] = 0;
                p_src = (WTF *)v161;
                cbor::CBORValue::CBORValue((cbor::CBORValue *)&v148, "none");
                cbor::CBORValue::CBORValue((cbor::CBORValue *)&v157);
                v155 = (WTF *)&v157;
                std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&p_src, (cbor::CBORValue *)&v157);
                cbor::CBORValue::operator=();
                cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v157);
                cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
                cbor::CBORValue::CBORValue();
                cbor::CBORValue::CBORValue((cbor::CBORValue *)&v157);
                v155 = (WTF *)&v157;
                std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&p_src, (cbor::CBORValue *)&v157);
                cbor::CBORValue::operator=();
                cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v157);
                cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
                uint64_t v116 = (WTF::StringImpl *)*MEMORY[0x1E4F30980];
                if (*MEMORY[0x1E4F30980]) {
                  *(_DWORD *)v116 += 2;
                }
                v157 = v116;
                size_t v149 = 0;
                uint64_t v150 = 0;
                uint64_t v148 = (WTF::StringImpl *)&v149;
                LOBYTE(v153) = 0;
                WebCore::buildAttestationMap();
                std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v148, (WTF *)v149);
                uint64_t v118 = v157;
                v157 = 0;
                if (v118)
                {
                  if (*(_DWORD *)v118 == 2) {
                    WTF::StringImpl::destroy(v118, v117);
                  }
                  else {
                    *(_DWORD *)v118 -= 2;
                  }
                }
                MEMORY[0x19972F0A0](&v148, &v155);
                cbor::CBORValue::CBORValue((cbor::CBORValue *)&v157);
                uint64_t v153 = (WTF *)&v157;
                std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&p_src, (cbor::CBORValue *)&v157);
                cbor::CBORValue::operator=();
                cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v157);
                cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
                MEMORY[0x19972F0A0](&v148, &p_src);
                cbor::CBORWriter::write();
                cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
                uint64_t v153 = 0;
                uint64_t v154 = 0;
                if ((_BYTE)v159)
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v153, (WTF::FastMalloc *)(HIDWORD(v158) + 1));
                  LOBYTE(v148) = 0;
                  if (HIDWORD(v154) == v154)
                  {
                    uint64_t v119 = (unsigned char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v153, (WTF::FastMalloc *)(HIDWORD(v154) + 1), (unint64_t)&v148);
                    *((unsigned char *)v153 + HIDWORD(v154)) = *v119;
                  }
                  else
                  {
                    *((unsigned char *)v153 + HIDWORD(v154)) = 0;
                  }
                  uint64_t v120 = ++HIDWORD(v154);
                  if ((_BYTE)v159)
                  {
                    size_t v121 = HIDWORD(v158);
                    if (HIDWORD(v158))
                    {
                      char v122 = v157;
                      unint64_t v123 = HIDWORD(v158) + (unint64_t)v120;
                      if (v123 > v154)
                      {
                        unint64_t v124 = v154 + ((unint64_t)v154 >> 2);
                        unint64_t v125 = v124 >= 0x10 ? v124 + 1 : 16;
                        BOOL v126 = (WTF::FastMalloc *)(v125 <= v123 ? v123 : v125);
                        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v153, v126);
                        uint64_t v120 = HIDWORD(v154);
                        if (v123 < HIDWORD(v154))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x199226C04);
                        }
                      }
                      memcpy((char *)v153 + v120, v122, v121);
                      HIDWORD(v154) = v123;
                    }
                    if (*(unsigned char *)(v3 + 160))
                    {
                      fido::FidoHidMessage::create();
                      if (v152)
                      {
                        WebKit::VirtualHidConnection::receiveHidMessage(v3, (fido::FidoHidMessage *)&v148);
                        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v148);
                        char v128 = v153;
                        if (v153)
                        {
                          uint64_t v153 = 0;
                          LODWORD(v154) = 0;
                          WTF::fastFree(v128, v127);
                        }
                        if ((_BYTE)v159)
                        {
                          char v141 = v157;
                          if (v157)
                          {
                            v157 = 0;
                            LODWORD(v158) = 0;
                            WTF::fastFree(v141, v127);
                          }
                        }
                        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v155, v156);
                        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&p_src, v161[0]);
                        int v129 = v162;
                        if (v162)
                        {
                          v162 = 0;
                          int v163 = 0;
                          WTF::fastFree(v129, v16);
                        }
                        char v130 = *(WTF **)&v164[1];
                        if (*(void *)&v164[1])
                        {
                          *(void *)&v164[1] = 0;
                          LODWORD(v165) = 0;
                          WTF::fastFree(v130, v16);
                        }
                        long long v131 = v169;
                        if (v169)
                        {
                          v169 = 0;
                          int v170 = 0;
                          WTF::fastFree(v131, v16);
                        }
                        int v132 = (WTF *)__src;
                        if (__src)
                        {
                          __src = 0;
                          LODWORD(__n) = 0;
                          WTF::fastFree(v132, v16);
                        }
                        int v73 = 0;
                        goto LABEL_210;
                      }
                    }
                  }
                }
              }
            }
LABEL_237:
            __break(1u);
            goto LABEL_238;
          }
        }
        uint64_t v71 = v3;
        char v72 = 20;
LABEL_93:
        WebKit::VirtualHidConnection::recieveResponseCode(v71, v72);
        int v73 = 1;
        goto LABEL_212;
      }
      if (!v180) {
        goto LABEL_237;
      }
      uint64_t v39 = cbor::CBORValue::getMap((cbor::CBORValue *)&v178);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&v171);
      char v40 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v39, (cbor::CBORValue *)&v171);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      if (!v180) {
        goto LABEL_237;
      }
      if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v178) + 8) == v40)
      {
        WebKit::VirtualHidConnection::recieveResponseCode(v3, 20);
        goto LABEL_224;
      }
      unint64_t v41 = *(_DWORD **)cbor::CBORValue::getString((cbor::CBORValue *)(v40 + 8));
      if (v41) {
        *v41 += 2;
      }
      CFTypeRef v166 = v41;
      if (!v180) {
        goto LABEL_237;
      }
      uint64_t v42 = cbor::CBORValue::getMap((cbor::CBORValue *)&v178);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&v171);
      char v43 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v42, (cbor::CBORValue *)&v171);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      if (!v180) {
        goto LABEL_237;
      }
      if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v178) + 8) == v43)
      {
        WebKit::VirtualHidConnection::recieveResponseCode(v3, 20);
        int v74 = 1;
        goto LABEL_154;
      }
      uint64_t v44 = cbor::CBORValue::getByteString((cbor::CBORValue *)(v43 + 8));
      uint64_t v45 = (WTF *)*(unsigned int *)(v44 + 12);
      v155 = 0;
      LODWORD(v156) = 0;
      HIDWORD(v156) = v45;
      if (v45)
      {
        uint64_t v46 = v44;
        LODWORD(v156) = v45;
        v155 = (WTF *)WTF::fastMalloc(v45);
        memcpy(v155, *(const void **)v46, *(unsigned int *)(v46 + 12));
      }
      *(void *)&v164[1] = 0;
      uint64_t v165 = 0;
      if (!v180) {
        goto LABEL_237;
      }
      uint64_t v47 = cbor::CBORValue::getMap((cbor::CBORValue *)&v178);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&v171);
      BOOL v48 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v47, (cbor::CBORValue *)&v171);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      if (!v180) {
        goto LABEL_237;
      }
      if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v178) + 8) != v48)
      {
        uint64_t Array = cbor::CBORValue::getArray((cbor::CBORValue *)(v48 + 8));
        uint64_t v50 = *(unsigned int *)(Array + 12);
        if (v50)
        {
          unsigned int v51 = *(cbor::CBORValue **)Array;
          uint64_t v52 = 32 * v50;
          while (1)
          {
            uint64_t v53 = cbor::CBORValue::getMap(v51);
            cbor::CBORValue::CBORValue();
            unsigned int v54 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v53, (cbor::CBORValue *)&v171);
            cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
            if ((void *)(v53 + 8) == v54) {
              break;
            }
            int v56 = *((_DWORD *)v54 + 16);
            uint64_t v55 = (cbor::CBORValue *)(v54 + 8);
            if (v56 != 2) {
              break;
            }
            unint64_t v57 = cbor::CBORValue::getByteString(v55);
            unint64_t v58 = v57;
            if (HIDWORD(v165) == v165)
            {
              unint64_t v59 = WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v164[1], HIDWORD(v165) + 1, v57);
              uint64_t v60 = *(void *)&v164[1] + 16 * HIDWORD(v165);
              uint64_t v61 = (WTF *)*(unsigned int *)(v59 + 12);
              *(void *)uint64_t v60 = 0;
              *(void *)(v60 + 8) = 0;
              *(_DWORD *)(v60 + 12) = v61;
              if (v61)
              {
                unint64_t v58 = v59;
LABEL_78:
                uint64_t v62 = (void *)WTF::fastMalloc(v61);
                *(_DWORD *)(v60 + 8) = v61;
                *(void *)uint64_t v60 = v62;
                memcpy(v62, *(const void **)v58, *(unsigned int *)(v58 + 12));
              }
            }
            else
            {
              uint64_t v61 = (WTF *)*(unsigned int *)(v57 + 12);
              uint64_t v60 = *(void *)&v164[1] + 16 * HIDWORD(v165);
              *(void *)uint64_t v60 = 0;
              *(void *)(v60 + 8) = 0;
              *(_DWORD *)(v60 + 12) = v61;
              if (v61) {
                goto LABEL_78;
              }
            }
            ++HIDWORD(v165);
            unsigned int v51 = (cbor::CBORValue *)((char *)v51 + 32);
            v52 -= 32;
            if (!v52) {
              goto LABEL_80;
            }
          }
        }
LABEL_96:
        uint64_t v75 = v3;
        char v76 = 44;
LABEL_97:
        WebKit::VirtualHidConnection::recieveResponseCode(v75, v76);
        int v74 = 1;
        goto LABEL_152;
      }
LABEL_80:
      if (!v180) {
        goto LABEL_237;
      }
      uint64_t v63 = cbor::CBORValue::getMap((cbor::CBORValue *)&v178);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&v171);
      BOOL v64 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v63, (cbor::CBORValue *)&v171);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      if (!v180) {
        goto LABEL_237;
      }
      if ((void *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v178) + 8) != v64)
      {
        uint64_t v65 = cbor::CBORValue::getMap((cbor::CBORValue *)(v64 + 8));
        cbor::CBORValue::CBORValue();
        uint64_t v66 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v65, (cbor::CBORValue *)&v171);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
        uint64_t v67 = (void *)(v65 + 8);
        if ((void *)(v65 + 8) != v66 && cbor::CBORValue::getBool((cbor::CBORValue *)(v66 + 8)))
        {
          if (!*(unsigned char *)(v3 + 106)) {
            goto LABEL_96;
          }
          if (!*(unsigned char *)(v3 + 108))
          {
LABEL_238:
            uint64_t v75 = v3;
            char v76 = 39;
            goto LABEL_97;
          }
        }
        cbor::CBORValue::CBORValue();
        uint64_t v68 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v65, (cbor::CBORValue *)&v171);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
        if (v67 != v68 && cbor::CBORValue::getBool((cbor::CBORValue *)(v68 + 8)) && !*(unsigned char *)(v3 + 107)) {
          goto LABEL_238;
        }
      }
      uint64_t v69 = *(void *)(v3 + 88);
      if (v69) {
        uint64_t v70 = *(void *)(v69 + 8);
      }
      else {
        uint64_t v70 = 0;
      }
      WebKit::VirtualAuthenticatorManager::credentialsMatchingList(v70, (WTF::StringImpl **)(v3 + 192), (const WTF::StringImpl *)&v166, (uint64_t)&v164[1], (uint64_t *)&v162);
      if (!v164[0])
      {
        WebKit::VirtualHidConnection::recieveResponseCode(v3, 46);
        int v74 = 1;
        goto LABEL_151;
      }
      unsigned int v80 = v162;
      size_t v158 = 0;
      uint64_t v159 = 0;
      v157 = (WTF::StringImpl *)&v158;
      WebCore::buildCredentialDescriptor();
      cbor::CBORValue::CBORValue();
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&v148);
      p_src = (WTF *)&v148;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v157, (cbor::CBORValue *)&v148);
      cbor::CBORValue::operator=();
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v148);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&__src, (WTF *)__n);
      WebKit::privateKeyFromBase64((WTF *)((char *)v80 + 24), (SecKeyRef *)&v147);
      CFTypeRef v146 = v147;
      if (v147) {
        CFRetain(v147);
      }
      WebKit::credentialIdAndCosePubKeyForPrivateKey((SecKeyRef *)&v146, (uint64_t)&v148);
      CFTypeRef v81 = v146;
      CFTypeRef v146 = 0;
      if (v81) {
        CFRelease(v81);
      }
      *(void *)&long long v171 = 0;
      *((void *)&v171 + 1) = 0x1000000000;
      BOOL v82 = (void *)WTF::fastMalloc((WTF *)0x10);
      DWORD2(v171) = 16;
      *(void *)&long long v171 = v82;
      bzero(v82, HIDWORD(v171));
      WebCore::buildAttestedCredentialData();
      char v84 = (WTF *)v171;
      if ((void)v171)
      {
        *(void *)&long long v171 = 0;
        DWORD2(v171) = 0;
        WTF::fastFree(v84, v83);
      }
      WebCore::buildAuthData();
      cbor::CBORValue::CBORValue();
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&__src);
      p_src = (WTF *)&__src;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v157, (cbor::CBORValue *)&__src);
      cbor::CBORValue::operator=();
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&__src);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      CFTypeRef v143 = v147;
      if (v147) {
        CFRetain(v147);
      }
      WebKit::signatureForPrivateKey((SecKeyRef *)&v143, (uint64_t)&cf, (uint64_t)&v155, (uint64_t)&p_src);
      cbor::CBORValue::CBORValue();
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&__src);
      SecKeyRef v184 = (SecKeyRef)&__src;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v157, (cbor::CBORValue *)&__src);
      cbor::CBORValue::operator=();
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&__src);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      long long v86 = p_src;
      if (p_src)
      {
        p_src = 0;
        LODWORD(v161[0]) = 0;
        WTF::fastFree(v86, v85);
      }
      CFTypeRef v87 = v143;
      CFTypeRef v143 = 0;
      if (v87) {
        CFRelease(v87);
      }
      if (*((unsigned char *)v80 + 48))
      {
        WebCore::buildUserEntityMap();
        cbor::CBORValue::CBORValue();
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&__src);
        SecKeyRef v184 = (SecKeyRef)&__src;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v157, (cbor::CBORValue *)&__src);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&__src);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&p_src, v161[0]);
      }
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&v171);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)&__src);
      p_src = (WTF *)&__src;
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v157, (cbor::CBORValue *)&__src);
      cbor::CBORValue::operator=();
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&__src);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      MEMORY[0x19972F0A0]();
      cbor::CBORWriter::write();
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v171);
      p_src = 0;
      v161[0] = 0;
      if (!(_BYTE)v169) {
        goto LABEL_237;
      }
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&p_src, (WTF::FastMalloc *)(HIDWORD(__n) + 1));
      LOBYTE(v171) = 0;
      if (HIDWORD(v161[0]) == LODWORD(v161[0]))
      {
        char v88 = (unsigned char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&p_src, (WTF::FastMalloc *)(HIDWORD(v161[0]) + 1), (unint64_t)&v171);
        *((unsigned char *)p_src + HIDWORD(v161[0])) = *v88;
      }
      else
      {
        *((unsigned char *)p_src + HIDWORD(v161[0])) = 0;
      }
      uint64_t v90 = ++HIDWORD(v161[0]);
      if (!(_BYTE)v169) {
        goto LABEL_237;
      }
      size_t v91 = HIDWORD(__n);
      if (!HIDWORD(__n))
      {
LABEL_135:
        if (!*(unsigned char *)(v3 + 160)) {
          goto LABEL_237;
        }
        fido::FidoHidMessage::create();
        if (!v175) {
          goto LABEL_237;
        }
        WebKit::VirtualHidConnection::receiveHidMessage(v3, (fido::FidoHidMessage *)&v171);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v171);
        char v98 = p_src;
        if (p_src)
        {
          p_src = 0;
          LODWORD(v161[0]) = 0;
          WTF::fastFree(v98, v97);
        }
        if ((_BYTE)v169)
        {
          char v142 = (WTF *)__src;
          if (__src)
          {
            __src = 0;
            LODWORD(__n) = 0;
            WTF::fastFree(v142, v97);
          }
        }
        uint64_t v99 = (WTF *)cf;
        if (cf)
        {
          CFTypeRef cf = 0;
          int v145 = 0;
          WTF::fastFree(v99, v97);
        }
        uint64_t v100 = v153;
        if (v153)
        {
          uint64_t v153 = 0;
          LODWORD(v154) = 0;
          WTF::fastFree(v100, v97);
        }
        long long v101 = v150;
        if (v150)
        {
          uint64_t v150 = 0;
          int v151 = 0;
          WTF::fastFree(v101, v97);
        }
        CFTypeRef v102 = v148;
        if (v148)
        {
          uint64_t v148 = 0;
          LODWORD(v149) = 0;
          WTF::fastFree(v102, v97);
        }
        CFTypeRef v103 = v147;
        CFTypeRef v147 = 0;
        if (v103) {
          CFRelease(v103);
        }
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v157, (WTF *)v158);
        int v74 = 0;
LABEL_151:
        WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v162, v89);
LABEL_152:
        WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v164[1], v77);
        CFTypeRef v104 = v155;
        if (v155)
        {
          v155 = 0;
          LODWORD(v156) = 0;
          WTF::fastFree(v104, v16);
        }
LABEL_154:
        char v105 = (WTF::StringImpl *)v166;
        CFTypeRef v166 = 0;
        if (v105)
        {
          if (*(_DWORD *)v105 == 2) {
            WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v16);
          }
          else {
            *(_DWORD *)v105 -= 2;
          }
        }
        if (!v74) {
          goto LABEL_159;
        }
LABEL_224:
        int v106 = 0;
LABEL_225:
        if (v180) {
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v178);
        }
        char v137 = (WTF *)v181;
        if (v181)
        {
          v181 = 0;
          int v182 = 0;
          WTF::fastFree(v137, v16);
        }
        if (!v106) {
          goto LABEL_231;
        }
        goto LABEL_230;
      }
      uint64_t v92 = __src;
      unint64_t v93 = HIDWORD(__n) + (unint64_t)v90;
      if (v93 <= LODWORD(v161[0])
        || ((unint64_t v94 = LODWORD(v161[0]) + ((unint64_t)LODWORD(v161[0]) >> 2), v94 >= 0x10)
          ? (unint64_t v95 = v94 + 1)
          : (unint64_t v95 = 16),
            v95 <= v93 ? (uint64_t v96 = (WTF::FastMalloc *)v93) : (uint64_t v96 = (WTF::FastMalloc *)v95),
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&p_src, v96), uint64_t v90 = HIDWORD(v161[0]), v93 >= HIDWORD(v161[0])))
      {
        memcpy((char *)p_src + v90, v92, v91);
        HIDWORD(v161[0]) = v93;
        goto LABEL_135;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x199226BF4);
  }
  if (v8 == 6)
  {
    fido::FidoHidMessage::getMessagePayload((uint64_t *)&v171, (fido::FidoHidMessage *)(v3 + 112));
    int v10 = *(WTF **)(v3 + 168);
    if (v10)
    {
      *(void *)(v3 + 168) = 0;
      *(_DWORD *)(v3 + 176) = 0;
      WTF::fastFree(v10, v9);
    }
    *(_OWORD *)(v3 + 168) = v171;
    size_t v149 = 17;
    CFDataRef v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x11);
    uint64_t v148 = v11;
    size_t v12 = *(unsigned int *)(v3 + 180);
    if (v12)
    {
      uint64_t v13 = *(const void **)(v3 + 168);
      if (v12 >= 0x12)
      {
        if (v12 <= 0x16) {
          uint64_t v33 = 22;
        }
        else {
          uint64_t v33 = *(unsigned int *)(v3 + 180);
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v148, (WTF::FastMalloc *)v33);
        uint64_t v14 = HIDWORD(v149);
        if (v12 < HIDWORD(v149))
        {
          __break(0xC471u);
          JUMPOUT(0x199226BFCLL);
        }
        CFDataRef v11 = v148;
      }
      else
      {
        uint64_t v14 = 0;
      }
      memcpy((char *)v11 + v14, v13, v12);
      HIDWORD(v149) = v12;
    }
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((unsigned int *)&v148, (WTF::FastMalloc *)0x11);
    if (HIDWORD(v149) >= v12 && HIDWORD(v149) - v12 > 3)
    {
      WTF::cryptographicallyRandomValues();
      inited = (fido::FidoHidInitPacket *)fido::FidoHidInitPacket::FidoHidInitPacket();
      fido::FidoHidInitPacket::getSerializedData((uint64_t *)&v178, inited);
      WebKit::HidConnection::receiveReport(v3, (uint64_t *)&v178);
      uint64_t v36 = v178;
      if (v178)
      {
        v178 = 0;
        int v179 = 0;
        WTF::fastFree(v36, v35);
      }
      *(void *)&long long v171 = &unk_1EE9E5960;
      uint64_t v37 = (WTF *)*((void *)&v171 + 1);
      if (*((void *)&v171 + 1))
      {
        *((void *)&v171 + 1) = 0;
        LODWORD(v172) = 0;
        WTF::fastFree(v37, v35);
      }
      uint64_t v38 = v148;
      if (v148)
      {
        uint64_t v148 = 0;
        LODWORD(v149) = 0;
        WTF::fastFree(v38, v35);
      }
      goto LABEL_230;
    }
    goto LABEL_237;
  }
LABEL_230:
  std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100](v4);
LABEL_231:
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
LABEL_232:
  uint64_t v138 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v138(v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::receiveHidMessage(fido::FidoHidMessage &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F9F28;
  uint64_t v3 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::receiveHidMessage(fido::FidoHidMessage &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F9F28;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (WTF *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::receiveHidMessage(fido::FidoHidMessage &&)::$_0,void>::call(BOOL result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      return WebKit::HidConnection::receiveReport(v2, (uint64_t *)(result + 8));
    }
  }
  return result;
}

uint64_t WebKit::VirtualLocalConnection::verifyUser(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 4, (uint64_t)a1);
  int v8 = (atomic_uint *)*((void *)a1 + 2);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  uint64_t v9 = *a6;
  *a6 = 0;
  int v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9F9F98;
  v10[1] = v8;
  uint64_t v10[2] = v9;
  size_t v12 = v10;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v12;
  if (v12) {
    return (*(uint64_t (**)(void *))(*v12 + 8))(v12);
  }
  return result;
}

void sub_199226EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VirtualLocalConnection::verifyUser(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 4, (uint64_t)a1);
  uint64_t v6 = (atomic_uint *)*((void *)a1 + 2);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = *a4;
  *a4 = 0;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v8 = &unk_1EE9F9FC0;
  v8[1] = v6;
  uint64_t v8[2] = v7;
  int v10 = v8;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v10;
  if (v10) {
    return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
  }
  return result;
}

void sub_199227024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::VirtualLocalConnection::~VirtualLocalConnection(WebKit::VirtualLocalConnection *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WebKit::LocalConnection::~LocalConnection((id *)this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v4);
}

{
  WTF::StringImpl *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WebKit::LocalConnection::~LocalConnection((id *)this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v4);

  WTF::fastFree(this, v5);
}

void *WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F9F98;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F9F98;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v2 = (const void *)[objc_alloc((Class)WebKit::getLAContextClass((WebKit *)a1)) init];
  WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)>::operator()(a1 + 2);
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_19922737C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F9FC0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F9FC0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)>::operator()((uint64_t *)(a1 + 16));
}

void *WebKit::VirtualService::VirtualService(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1EE9B5528;
  a1[1] = 0;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a2 + 8), a2);
  uint64_t v6 = *(atomic_uint **)(a2 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  a1[2] = v6;
  *a1 = &unk_1EE9F9FE8;
  WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 3), a3);
  return a1;
}

void sub_19922759C(_Unwind_Exception *a1)
{
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::VirtualService::startDiscoveryInternal(WTF::StringImpl *this, unsigned int **a2)
{
  uint64_t v2 = *((unsigned int *)this + 9);
  if (v2)
  {
    uint64_t v3 = (uint64_t)this;
    uint64_t v4 = 24 * v2;
    uint64_t v5 = *((void *)this + 3) + 16;
    do
    {
      uint64_t v6 = *(void *)(v3 + 16);
      if (!v6) {
        break;
      }
      uint64_t v7 = *(uint64_t **)(v6 + 8);
      if (!v7) {
        break;
      }
      int v8 = *(WTF::StringImpl **)(v5 - 8);
      if (v8) {
        *(_DWORD *)v8 += 2;
      }
      uint64_t v44 = v8;
      int v45 = *(_DWORD *)v5;
      char v46 = *(unsigned char *)(v5 + 4);
      uint64_t v9 = *(_DWORD **)(v5 - 16);
      if (v9) {
        *v9 += 2;
      }
      char v43 = v9;
      if (v45 >= 3u)
      {
        if (v45 == 3)
        {
          uint64_t v20 = WTF::fastMalloc((WTF *)0x28);
          *(void *)(v20 + 8) = 0;
          *(void *)(v20 + 16) = 0;
          *(void *)uint64_t v20 = &unk_1EE9F9F50;
          if (v8) {
            *(_DWORD *)v8 += 2;
          }
          *(void *)(v20 + 24) = v8;
          *(_DWORD *)(v20 + 32) = v45;
          *(unsigned char *)(v20 + 36) = v46;
          uint64_t v47 = (WTF *)v20;
          WebKit::LocalAuthenticator::create((uint64_t *)&v47, (uint64_t *)&v51);
          unsigned int v21 = (uint64_t *)v51;
          unsigned int v51 = 0;
          v29[0] = v21;
          (*(void (**)(uint64_t *, void *))(*v7 + 16))(v7, v29);
          int v22 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v22)
          {
            if (v22[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
            }
            else {
              --v22[2];
            }
          }
          uint64_t v27 = (uint64_t *)v51;
          unsigned int v51 = 0;
          if (v27)
          {
            if (*((_DWORD *)v27 + 2) == 1) {
              (*(void (**)(uint64_t *))(*v27 + 8))(v27);
            }
            else {
              --*((_DWORD *)v27 + 2);
            }
          }
          uint64_t v28 = (uint64_t)v47;
          uint64_t v47 = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
        }
      }
      else
      {
        WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 1, (uint64_t)v7);
        int v10 = (atomic_uint *)v7[1];
        if (v10) {
          atomic_fetch_add(v10, 1u);
        }
        uint64_t v39 = v10;
        uint64_t v11 = WTF::fastMalloc((WTF *)0xC8);
        WebKit::VirtualHidConnection::VirtualHidConnection(v11, &v43, (uint64_t)&v44, &v39);
        uint64_t v12 = WTF::fastMalloc((WTF *)0x50);
        v29[0] = v11;
        WebKit::CtapHidDriver::CtapHidDriver(v12, (uint64_t)v29);
        char v40 = (unsigned int **)v12;
        uint64_t v13 = v29[0];
        v29[0] = 0;
        if (v13)
        {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          uint64_t v12 = (uint64_t)v40;
        }
        char v40 = 0;
        uint64_t v41 = v12;
        int v50 = 0;
        v52[0] = 0;
        v52[1] = 0;
        unsigned int v51 = v52;
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__emplace_hint_unique_key_args<fido::ProtocolVersion,fido::ProtocolVersion const&>((uint64_t **)&v51, (uint64_t *)v52, &v50, &v50);
        int v49 = 16;
        uint64_t v14 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        int v48 = 16;
        uint64_t v47 = v14;
        *(void *)uint64_t v14 = 0;
        *((void *)v14 + 1) = 0;
        fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse();
        uint64_t v16 = v47;
        if (v47)
        {
          uint64_t v47 = 0;
          int v48 = 0;
          WTF::fastFree(v16, v15);
        }
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)&v51, v52[0]);
        LOWORD(v51) = 256;
        HIDWORD(v51) = 2;
        LOBYTE(v52[0]) = 1;
        HIDWORD(v52[0]) = 2;
        fido::AuthenticatorGetInfoResponse::setOptions();
        uint64_t v17 = WTF::fastMalloc((WTF *)0x3D0);
        WebKit::CtapAuthenticator::CtapAuthenticator(v17, &v41, v29);
        uint64_t v42 = (_DWORD *)v17;
        (*(void (**)(uint64_t *, _DWORD **))(*v7 + 16))(v7, &v42);
        uint64_t v19 = v42;
        uint64_t v42 = 0;
        if (v19)
        {
          if (v19[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
          }
          else {
            --v19[2];
          }
        }
        if (v38)
        {
          uint64_t v23 = v36;
          if (v36)
          {
            uint64_t v36 = 0;
            int v37 = 0;
            WTF::fastFree(v23, v18);
          }
        }
        if (v35[16]) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v18);
        }
        if (v34)
        {
          uint64_t v26 = v32;
          if (v32)
          {
            uint64_t v32 = 0;
            int v33 = 0;
            WTF::fastFree(v26, v18);
          }
        }
        uint64_t v24 = v30;
        if (v30)
        {
          uint64_t v30 = 0;
          int v31 = 0;
          WTF::fastFree(v24, v18);
        }
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)v29, (WTF *)v29[1]);
        uint64_t v25 = v41;
        uint64_t v41 = 0;
        if (v25) {
          (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
        }
        a2 = v40;
        char v40 = 0;
        if (a2) {
          std::default_delete<WebKit::CtapHidDriver>::operator()[abi:sn180100]((uint64_t)&v40, a2);
        }
        uint64_t v39 = 0;
        if (v10 && atomic_fetch_add(v10, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v10);
          WTF::fastFree((WTF *)v10, a2);
        }
        uint64_t v9 = v43;
      }
      if (v9)
      {
        if (*v9 == 2) {
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)a2);
        }
        else {
          *v9 -= 2;
        }
      }
      this = v44;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(v44, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
      v5 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return this;
}

void sub_199227AB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, uint64_t a16, WTF *a17, int a18, int a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a11)
  {
    if (a11[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a11 + 8))(a11);
    }
    else {
      --a11[2];
    }
  }
  uint64_t v36 = *(_DWORD **)(v34 - 112);
  *(void *)(v34 - 112) = 0;
  if (v36)
  {
    if (v36[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v36 + 8))(v36);
    }
    else {
      --v36[2];
    }
  }
  uint64_t v37 = *(void *)(v34 - 136);
  *(void *)(v34 - 136) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, a2);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  char v38 = *(WTF::StringImpl **)(v34 - 152);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, a2);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199227D98()
{
}

void WebKit::VirtualService::~VirtualService(WebKit::VirtualService *this, void *a2)
{
  *(void *)this = &unk_1EE9F9FE8;
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);

  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  WTF *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9F9FE8;
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);

  WTF::fastFree(v3, v4);
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (v3 < 0xAAAAAAB)
  {
    int v5 = 24 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    WTF::VectorCopier<false,std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>>::uninitializedCopy<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>>(*(void *)a2, *(void *)a2 + 24 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_199227EE8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>>::uninitializedCopy<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (result != a2)
  {
    uint64_t v3 = *(_DWORD **)result;
    if (*(void *)result) {
      *v3 += 2;
    }
    *(void *)a3 = v3;
    uint64_t v4 = *(_DWORD **)(result + 8);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(a3 + 8) = v4;
    int v5 = *(_DWORD *)(result + 16);
    *(unsigned char *)(a3 + 20) = *(unsigned char *)(result + 20);
    *(_DWORD *)(a3 + 16) = v5;
    result += 24;
    a3 += 24;
  }
  return result;
}

void *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::VirtualService,WebKit::AuthenticatorTransportServiceObserver &,WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::VirtualService::VirtualService(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_199227FAC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::VisitedLinkStore::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  CFRetain(this[1]);
  if (*((_WORD *)a3 + 25) == 1550)
  {
    IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>(a3, &v5);
    if (v7) {
      WebKit::VisitedLinkStore::addVisitedLinkHashFromPage((uint64_t)this, v5, v6);
    }
  }
  CFRelease(this[1]);
}

void non-virtual thunk to'WebKit::VisitedLinkStore::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

void *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (void *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[16] = 0;
  return result;
}

void WebKit::VisitedLinkTableController::didReceiveMessage(WebKit::VisitedLinkTableController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  ++*((_DWORD *)this + 2);
  int v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1554:
      IPC::Decoder::decode<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, (uint64_t)&v8);
      if (v10)
      {
        WebKit::VisitedLinkTableController::visitedLinkStateChanged(this, (uint64_t *)&v8);
        if (v10)
        {
          uint64_t v6 = v8;
          if (v8)
          {
            int v8 = 0;
            int v9 = 0;
            WTF::fastFree(v6, v5);
          }
        }
      }
      break;
    case 1553:
      IPC::handleMessage<Messages::VisitedLinkTableController::SetVisitedLinkTable,WebKit::VisitedLinkTableController,WebKit::VisitedLinkTableController,void ()(WebCore::SharedMemoryHandle &&)>(a3, this);
      break;
    case 1551:
      WebKit::VisitedLinkTableController::allVisitedLinkStateChanged(this);
      break;
    case 1552:
      WebKit::VisitedLinkTableController::removeAllVisitedLinks(this);
      break;
  }
  if (*((_DWORD *)this + 2) == 1)
  {
    char v7 = *(void (**)(WebKit::VisitedLinkTableController *))(*(void *)this + 8);
    v7(this);
  }
  else
  {
    --*((_DWORD *)this + 2);
  }
}

void IPC::handleMessage<Messages::VisitedLinkTableController::SetVisitedLinkTable,WebKit::VisitedLinkTableController,WebKit::VisitedLinkTableController,void ()(WebCore::SharedMemoryHandle &&)>(IPC::Decoder *a1, WebCore::VisitedLinkStore *a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v3);
  if (v4)
  {
    WebKit::VisitedLinkTableController::setVisitedLinkTable(a2);
    if (v4) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
    }
  }
}

void non-virtual thunk to'WebKit::VisitedLinkTableController::didReceiveMessage(WebKit::VisitedLinkTableController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

uint64_t WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(uint64_t *a1)
{
  return WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1);
}

uint64_t WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::operator=(const void **a1, uint64_t *a2)
{
  _Block_release(*a1);
  uint64_t result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a2);
  *a1 = (const void *)result;
  return result;
}

BOOL WTF::RetainPtr<WKWebView>::operator BOOL(void *a1)
{
  return *a1 != 0;
}

uint64_t WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::constructASController(CFTypeRef *this, const WebKit::WebAuthenticationRequestData *a2, uint64_t a3)
{
  unsigned int v21 = this;
  uint64_t v20 = a2;
  uint64_t v19 = a3;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v18);
  *(void *)&long long v16 = &v18;
  *((void *)&v16 + 1) = a2;
  uint64_t v17 = v19;
  *(void *)&long long v14 = &v18;
  *((void *)&v14 + 1) = a2;
  uint64_t v15 = v19;
  uint64_t v27 = v19 + 16;
  v26[7] = &v16;
  v26[6] = &v14;
  uint64_t v25 = v19;
  long long v24 = v16;
  uint64_t v23 = v19;
  long long v22 = v14;
  uint64_t v37 = &v24;
  uint64_t v36 = &v22;
  uint64_t v35 = v19;
  long long v34 = v16;
  uint64_t v33 = v19;
  long long v32 = v14;
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>::Visitor(v26, &v34, &v32);
  uint64_t v38 = v27;
  int v31 = v26;
  uint64_t v30 = v27;
  uint64_t v29 = 2;
  switch(std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](v27))
  {
    case 0:
      uint64_t v5 = (uint64_t)v31;
      std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v30);
      std::invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(v5, v6);
      goto LABEL_35;
    case 1:
      uint64_t v7 = (uint64_t)v31;
      std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v30);
      std::invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(v7, v8);
      goto LABEL_35;
    case 2:
      __break(1u);
      goto LABEL_5;
    case 3:
LABEL_5:
      __break(1u);
      goto LABEL_6;
    case 4:
LABEL_6:
      __break(1u);
      goto LABEL_7;
    case 5:
LABEL_7:
      __break(1u);
      goto LABEL_8;
    case 6:
LABEL_8:
      __break(1u);
      goto LABEL_9;
    case 7:
LABEL_9:
      __break(1u);
      goto LABEL_10;
    case 8:
LABEL_10:
      __break(1u);
      goto LABEL_11;
    case 9:
LABEL_11:
      __break(1u);
      goto LABEL_12;
    case 10:
LABEL_12:
      __break(1u);
      goto LABEL_13;
    case 11:
LABEL_13:
      __break(1u);
      goto LABEL_14;
    case 12:
LABEL_14:
      __break(1u);
      goto LABEL_15;
    case 13:
LABEL_15:
      __break(1u);
      goto LABEL_16;
    case 14:
LABEL_16:
      __break(1u);
      goto LABEL_17;
    case 15:
LABEL_17:
      __break(1u);
      goto LABEL_18;
    case 16:
LABEL_18:
      __break(1u);
      goto LABEL_19;
    case 17:
LABEL_19:
      __break(1u);
      goto LABEL_20;
    case 18:
LABEL_20:
      __break(1u);
      goto LABEL_21;
    case 19:
LABEL_21:
      __break(1u);
      goto LABEL_22;
    case 20:
LABEL_22:
      __break(1u);
      goto LABEL_23;
    case 21:
LABEL_23:
      __break(1u);
      goto LABEL_24;
    case 22:
LABEL_24:
      __break(1u);
      goto LABEL_25;
    case 23:
LABEL_25:
      __break(1u);
      goto LABEL_26;
    case 24:
LABEL_26:
      __break(1u);
      goto LABEL_27;
    case 25:
LABEL_27:
      __break(1u);
      goto LABEL_28;
    case 26:
LABEL_28:
      __break(1u);
      goto LABEL_29;
    case 27:
LABEL_29:
      __break(1u);
      goto LABEL_30;
    case 28:
LABEL_30:
      __break(1u);
      goto LABEL_31;
    case 29:
LABEL_31:
      __break(1u);
      goto LABEL_32;
    case 30:
LABEL_32:
      __break(1u);
      goto LABEL_33;
    case 31:
LABEL_33:
      __break(1u);
      break;
    default:
      break;
  }
  uint64_t v28 = 2;
  __break(1u);
LABEL_35:
  if (!WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v18)
    && (WTF::RetainPtr<__IOHIDDevice *>::get(), (char v10 = (WebKit *)[v9 count]) != 0))
  {
    id v11 = WebKit::allocASAuthorizationControllerInstance(v10);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v11 initWithAuthorizationRequests:v12];
    WTF::adoptCF<__IOHIDManager *>(this);
  }
  else
  {
    WTF::RetainPtr<ASAuthorizationController>::RetainPtr(this);
  }
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v18);
}

CFTypeRef *WTF::RetainPtr<ASAuthorizationController>::RetainPtr(CFTypeRef *a1)
{
  return a1;
}

id WebKit::allocASAuthorizationControllerInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationControllerClass[0](this));
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::requestsForRegistration(WebKit::WebAuthenticatorCoordinatorProxy *this, const WebCore::PublicKeyCredentialCreationOptions *a2, const WebCore::SecurityOriginData *a3, WebCore::SecurityOriginData *a4)
{
  char v180 = this;
  int v179 = a2;
  v178 = a3;
  char v177 = a4;
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  WTF::adoptCF<__IOHIDManager *>(&v175);
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v176, &v175);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v175);
  char v174 = 1;
  char v173 = 1;
  if (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100]((uint64_t)v178 + 128))
  {
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v178 + 128);
    v172[0] = *v7;
    v172[1] = v7[1];
    if (std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100]((uint64_t)v172))
    {
      std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100]((uint64_t)v172);
      if (*v8)
      {
        if (*v8 == 1) {
          char v174 = 0;
        }
      }
      else
      {
        char v173 = 0;
      }
    }
  }
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  WTF::adoptCF<__IOHIDManager *>(&v170);
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v171, &v170);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v170);
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  WTF::adoptCF<__IOHIDManager *>(&v168);
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v169, &v168);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v168);
  v167 = (unsigned int *)((char *)v178 + 112);
  CFTypeRef v166 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((const WebCore::SecurityOriginData *)((char *)v178 + 112));
  id v11 = (WebKit *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v167);
  uint64_t v165 = v11;
  while (v166 != v165)
  {
    WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v162, (const PublicKeyCredentialDescriptor *)v166);
    char v161 = 3;
    BOOL v12 = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WebCore::AuthenticatorTransport>(v164, &v161);
    BOOL isEmpty = 1;
    if (!v12) {
      BOOL isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)v164);
    }
    if (isEmpty)
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v15 = v14;
      id v16 = WebKit::allocASAuthorizationPlatformPublicKeyCredentialDescriptorInstance(v14);
      WebCore::toNSData((WebCore *)&v159, (const WebCore::BufferSource *)v163);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v16 initWithCredentialID:v17];
      WTF::adoptCF<__IOHIDManager *>(&v160);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [(WebKit *)v15 addObject:v18];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v160);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v159);
    }
    BOOL v19 = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)v164);
    BOOL v20 = 1;
    if (!v19)
    {
      char v158 = 3;
      BOOL v20 = !WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WebCore::AuthenticatorTransport>(v164, &v158);
    }
    if (v20)
    {
      id v21 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      WTF::adoptCF<__IOHIDManager *>(&v156);
      WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v157, &v156);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v156);
      v155 = (unsigned int *)v164;
      uint64_t v154 = (char *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)v164);
      uint64_t v153 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v155);
      while (v154 != (char *)v153)
      {
        char v152 = 0;
        char v152 = *v154;
        WebKit::toASAuthorizationSecurityKeyPublicKeyCredentialDescriptorTransport(&v151);
        if (WTF::RetainPtr<WKWebView>::operator BOOL(&v151))
        {
          WTF::RetainPtr<__IOHIDDevice *>::get();
          uint64_t v23 = v22;
          WTF::RetainPtr<__IOHIDDevice *>::get();
          [v23 addObject:v24];
        }
        WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v151);
        ++v154;
      }
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v26 = v25;
      id v27 = WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialDescriptorInstance(v25);
      WebCore::toNSData((WebCore *)&v149, (const WebCore::BufferSource *)v163);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v29 = v28;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v27 initWithCredentialID:v29 transports:v30];
      WTF::adoptCF<__IOHIDManager *>(&v150);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [(WebKit *)v26 addObject:v31];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v150);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v149);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v157);
    }
    WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v162);
    CFTypeRef v166 = (WebCore::PublicKeyCredentialDescriptor *)((char *)v166 + 40);
  }
  id v32 = WebKit::allocASPublicKeyCredentialClientDataInstance(v11);
  WebCore::toNSData((WebCore *)&v147, (const WebCore::SecurityOriginData *)((char *)v178 + 72));
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v34 = v33;
  WebCore::SecurityOriginData::toString(&v146, v177);
  [v32 initWithChallenge:v34 origin:WTF::String::operator NSString *(&v146)];
  WTF::adoptCF<__IOHIDManager *>(&v148);
  v181 = &v146;
  int v182 = &v146;
  unsigned int v183 = &v146;
  v184[1] = &v146;
  v184[0] = 0;
  v187 = &v146;
  v186 = v184;
  v185 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v146);
  if (v185) {
    WTF::StringImpl::deref(v185, v35);
  }
  uint64_t v36 = WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v147);
  if (v174)
  {
    id v37 = WebKit::allocASAuthorizationPlatformPublicKeyCredentialProviderInstance((WebKit *)v36);
    std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v178 + 16);
    uint64_t v39 = (void *)[v37 initWithRelyingPartyIdentifier:WTF::String::operator NSString *(v38)];
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v41 = v40;
    uint64_t v42 = WTF::String::operator NSString *((void *)v178 + 4);
    WebCore::toNSData((WebCore *)&v144, (const WebCore::SecurityOriginData *)((char *)v178 + 48));
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v39 createCredentialRegistrationRequestWithClientData:v41 name:v42 userID:v43];
    WTF::adoptCF<__IOHIDManager *>(&v145);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v144);
    if (*((unsigned char *)a2 + 49))
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      if (objc_opt_respondsToSelector())
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v44 setRequestStyle:1];
      }
    }
    if (std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v178 + 144))
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v178 + 144);
      if (std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator BOOL[abi:sn180100](v45 + 64))
      {
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v178 + 144);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](v143, v46 + 64);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v143);
        uint64_t v48 = std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](v47);
        if (v48)
        {
          id v49 = WebKit::allocASAuthorizationPublicKeyCredentialPRFRegistrationInputInstance((WebKit *)v48);
          std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v143);
          std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](v140, v50);
          WebKit::toASAssertionPRFInputValue(&v141, (uint64_t)v140);
          WTF::RetainPtr<__IOHIDDevice *>::get();
          [v49 initWithInputValues:v51];
          WTF::adoptCF<__IOHIDManager *>(&v142);
          WTF::RetainPtr<__IOHIDDevice *>::get();
          uint64_t v53 = v52;
          WTF::RetainPtr<__IOHIDDevice *>::get();
          [v54 setPrf:v53];
          WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v142);
          WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v141);
          std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v140);
        }
        else
        {
          uint64_t v55 = [(id)WebKit::getASAuthorizationPublicKeyCredentialPRFRegistrationInputClass[0]((WebKit *)v48) checkForSupport];
          WTF::RetainPtr<__IOHIDDevice *>::get();
          [v56 setPrf:v55];
        }
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v143);
      }
    }
    if (*((unsigned char *)v178 + 136) == 3)
    {
      WebKit::toAttestationConveyancePreference(&v139);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v58 = v57;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v59 setAttestationPreference:v58];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v139);
    }
    if (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100]((uint64_t)v178 + 128))
    {
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v178 + 128);
      WebKit::toASUserVerificationPreference(&v138);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v61 = v60;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v62 setUserVerificationPreference:v61];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v138);
    }
    if (std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v178 + 144))
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v178 + 144);
      uint64_t v64 = std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](v63 + 16);
      if (v64)
      {
        id v65 = WebKit::allocASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputInstance((WebKit *)v64);
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v178 + 144);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](v66 + 16);
        objc_msgSend(v65, "initWithSupportRequirement:", WebKit::toASAuthorizationPublicKeyCredentialLargeBlobSupportRequirement(v67, v68));
        WTF::adoptCF<__IOHIDManager *>(&v137);
        WTF::RetainPtr<__IOHIDDevice *>::get();
        uint64_t v70 = v69;
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v71 setLargeBlob:v70];
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v137);
      }
    }
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v73 = v72;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v74 setExcludedCredentials:v73];
    WTF::RetainPtr<__IOHIDDevice *>::get();
    char v76 = v75;
    WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(&v145);
    [v76 addObject:v77];
    uint64_t v36 = WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v145);
  }
  if (v173)
  {
    id v78 = WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialProviderInstance((WebKit *)v36);
    std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v178 + 16);
    [v78 initWithRelyingPartyIdentifier:WTF::String::operator NSString *(v79)];
    WTF::adoptCF<__IOHIDManager *>(&v136);
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v135);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if (objc_opt_respondsToSelector())
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      CFTypeRef v81 = v80;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v83 = v82;
      char v84 = WTF::String::operator NSString *((void *)v178 + 8);
      char v85 = WTF::String::operator NSString *((void *)v178 + 4);
      WebCore::toNSData((WebCore *)&v133, (const WebCore::SecurityOriginData *)((char *)v178 + 48));
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v81 createCredentialRegistrationRequestWithClientData:v83 displayName:v84 name:v85 userID:v86];
      WTF::adoptCF<__IOHIDManager *>(&v134);
      WTF::RetainPtr<__IOHIDManager *>::operator=(&v135, &v134);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v134);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v133);
    }
    else
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      char v88 = v87;
      WebCore::toNSData((WebCore *)&v131, (const WebCore::SecurityOriginData *)((char *)v178 + 72));
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v90 = v89;
      size_t v91 = WTF::String::operator NSString *((void *)v178 + 8);
      uint64_t v92 = WTF::String::operator NSString *((void *)v178 + 4);
      WebCore::toNSData((WebCore *)&v130, (const WebCore::SecurityOriginData *)((char *)v178 + 48));
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v88 createCredentialRegistrationRequestWithChallenge:v90 displayName:v91 name:v92 userID:v93];
      WTF::adoptCF<__IOHIDManager *>(&v132);
      WTF::RetainPtr<__IOHIDManager *>::operator=(&v135, &v132);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v132);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v130);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v131);
    }
    WebKit::toAttestationConveyancePreference(&v129);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v95 = v94;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v96 setAttestationPreference:v95];
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v129);
    id v97 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    WTF::adoptCF<__IOHIDManager *>(&v127);
    WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v128, &v127);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v127);
    BOOL v126 = (unsigned int *)((char *)v178 + 88);
    unint64_t v125 = (long long *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((const WebCore::SecurityOriginData *)((char *)v178 + 88));
    uint64_t v124 = WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v126);
    while (v125 != (long long *)v124)
    {
      long long v123 = *v125;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v99 = v98;
      id v100 = WebKit::allocASAuthorizationPublicKeyCredentialParametersInstance(v98);
      [v100 initWithAlgorithm:*((void *)&v123 + 1)];
      WTF::adoptCF<__IOHIDManager *>(&v122);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [(WebKit *)v99 addObject:v101];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v122);
      ++v125;
    }
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v103 = v102;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v104 setCredentialParameters:v103];
    if (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100]((uint64_t)v178 + 128))
    {
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v178 + 128);
      WebKit::toASUserVerificationPreference(&v121);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v106 = v105;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v107 setUserVerificationPreference:v106];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v121);
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v178 + 128);
      __int16 v119 = *(_WORD *)(v108 + 2);
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v178 + 128);
      WebKit::toASResidentKeyPreference(&v120, v119);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v110 = v109;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v111 setResidentKeyPreference:v110];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v120);
    }
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v113 = v112;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v114 setExcludedCredentials:v113];
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v116 = v115;
    WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(&v135);
    [v116 addObject:v117];
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v128);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v135);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v136);
  }
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(this, &v176);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v148);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v169);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v171);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v176);
}

void *WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  uint64_t v3;

  WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(a2);
  std::__to_address[abi:sn180100]<char const>();
  std::__to_address[abi:sn180100]<char const>();
  *a1 = v3;
  return a1;
}

WebCore::PublicKeyCredentialDescriptor *WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor(WebCore::PublicKeyCredentialDescriptor *this, const PublicKeyCredentialDescriptor *a2)
{
  return this;
}

{
  WTF::ASCIILiteral *v3;

  *(unsigned char *)this = *(unsigned char *)a2 & 1;
  uint64_t v3 = (WebCore::PublicKeyCredentialDescriptor *)((char *)this + 24);
  WebCore::BufferSource::BufferSource((WebCore::PublicKeyCredentialDescriptor *)((char *)this + 8), (const WebCore::BufferSource *)((char *)a2 + 8));
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3, (WTF::ASCIILiteral *)((char *)a2 + 24));
  return this;
}

BOOL WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WebCore::AuthenticatorTransport>(char *a1, char *a2)
{
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(a1, a2) != -1;
}

id WebKit::allocASAuthorizationPlatformPublicKeyCredentialDescriptorInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPlatformPublicKeyCredentialDescriptorClass[0](this));
}

void *WebCore::toNSData(WebCore *this, const WebCore::BufferSource *a2)
{
  unint64_t v3 = WebCore::BufferSource::span(a2);
  return WTF::toNSData(this, v3, v4);
}

CFTypeRef *WebKit::toASAuthorizationSecurityKeyPublicKeyCredentialDescriptorTransport(CFTypeRef *a1)
{
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
}

id WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialDescriptorInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialDescriptorClass[0](this));
}

id WebKit::allocASPublicKeyCredentialClientDataInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASPublicKeyCredentialClientDataClass[0](this));
}

__CFString *WTF::String::operator NSString *(void *a1)
{
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(a1)) {
    return &stru_1EEA10550;
  }
  WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a1);
  return (__CFString *)WTF::StringImpl::operator NSString *();
}

id WebKit::allocASAuthorizationPlatformPublicKeyCredentialProviderInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPlatformPublicKeyCredentialProviderClass[0](this));
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a1) & 1;
}

id WebKit::allocASAuthorizationPublicKeyCredentialPRFRegistrationInputInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialPRFRegistrationInputClass[0](this));
}

uint64_t *WebKit::toASAssertionPRFInputValue(CFTypeRef *a1, uint64_t a2)
{
  uint64_t v22[2] = (uint64_t)a1;
  v22[1] = a2;
  if ((std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](a2) & 1) == 0) {
    return (uint64_t *)WTF::RetainPtr<ASAuthorizationController>::RetainPtr(a1);
  }
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
  WebCore::toNSData((WebCore *)v22, v5);
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v21);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
  if (std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100](v6 + 16))
  {
    std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator*[abi:sn180100](v7 + 16);
    WebCore::toNSData((WebCore *)&v20, v8);
    WTF::RetainPtr<__IOHIDManager *>::operator=(&v21, &v20);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v20);
  }
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
  uint64_t v10 = std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100](v9 + 16);
  if (v10)
  {
    id v11 = WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputValuesInstance((WebKit *)v10);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v13 = v12;
    std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator*[abi:sn180100](v14 + 16);
    WebCore::toNSData((WebCore *)&v19, v15);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v11 initWithSaltInput1:v13 saltInput2:v16];
    WTF::adoptCF<__IOHIDManager *>(a1);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v19);
  }
  else
  {
    id v17 = WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputValuesInstance((WebKit *)v10);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v17 initWithSaltInput1:v18 saltInput2:0];
    WTF::adoptCF<__IOHIDManager *>(a1);
  }
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v21);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v22);
}

CFTypeRef *WebKit::toAttestationConveyancePreference(CFTypeRef *a1)
{
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
}

CFTypeRef *WebKit::toASUserVerificationPreference(CFTypeRef *a1)
{
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
}

id WebKit::allocASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputClass[0](this));
}

BOOL WebKit::toASAuthorizationPublicKeyCredentialLargeBlobSupportRequirement(WebKit *this, const WTF::String *a2)
{
  uint64_t v3 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"required", (const char *)8);
  return (WTF::operator==((uint64_t)this, v3, v4) & 1) == 0;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

id WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialProviderInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialProviderClass[0](this));
}

id WebKit::allocASAuthorizationPublicKeyCredentialParametersInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialParametersClass[0](this));
}

CFTypeRef *WebKit::toASResidentKeyPreference(CFTypeRef *a1, __int16 a2)
{
  uint64_t v5 = a1;
  __int16 v4 = a2;
  if (std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100]((uint64_t)&v4)) {
    std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100]((uint64_t)&v4);
  }
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::requestsForAssertion(void *a1, uint64_t a2, WebCore::BufferSource *a3, WebCore::SecurityOriginData *a4, uint64_t a5)
{
  char v174 = a1;
  uint64_t v173 = a2;
  long long v172 = a3;
  uint64_t v171 = a4;
  uint64_t v170 = a5;
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  WTF::adoptCF<__IOHIDManager *>(&v168);
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v169, &v168);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v168);
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  WTF::adoptCF<__IOHIDManager *>(&v166);
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v167, &v166);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v166);
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  WTF::adoptCF<__IOHIDManager *>(&v164);
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v165, &v164);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v164);
  BOOL isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)v172 + 32);
  v162 = (unsigned int *)((char *)v172 + 32);
  char v161 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WebCore::BufferSource *)((char *)v172 + 32));
  uint64_t v10 = (WebKit *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v162);
  uint64_t v160 = v10;
  while (v161 != v160)
  {
    WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v157, (const PublicKeyCredentialDescriptor *)v161);
    if (WebKit::isPlatformRequest((uint64_t)v159))
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v12 = v11;
      id v13 = WebKit::allocASAuthorizationPlatformPublicKeyCredentialDescriptorInstance(v11);
      WebCore::toNSData((WebCore *)&v155, (const WebCore::BufferSource *)v158);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v13 initWithCredentialID:v14];
      WTF::adoptCF<__IOHIDManager *>(&v156);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [(WebKit *)v12 addObject:v15];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v156);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v155);
    }
    if (WebKit::isCrossPlatformRequest((uint64_t)v159))
    {
      id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      WTF::adoptCF<__IOHIDManager *>(&v153);
      WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v154, &v153);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v153);
      char v152 = (unsigned int *)v159;
      CFTypeRef v151 = (char *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)v159);
      uint64_t v150 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v152);
      while (v151 != (char *)v150)
      {
        char v149 = 0;
        char v149 = *v151;
        WebKit::toASAuthorizationSecurityKeyPublicKeyCredentialDescriptorTransport(&v148);
        if (WTF::RetainPtr<WKWebView>::operator BOOL(&v148))
        {
          WTF::RetainPtr<__IOHIDDevice *>::get();
          uint64_t v18 = v17;
          WTF::RetainPtr<__IOHIDDevice *>::get();
          [v18 addObject:v19];
        }
        WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v148);
        ++v151;
      }
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v21 = v20;
      id v22 = WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialDescriptorInstance(v20);
      WebCore::toNSData((WebCore *)&v146, (const WebCore::BufferSource *)v158);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v24 = v23;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v22 initWithCredentialID:v24 transports:v25];
      WTF::adoptCF<__IOHIDManager *>(&v147);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [(WebKit *)v21 addObject:v26];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v147);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v146);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v154);
    }
    if (!isEmpty && WebKit::allowsHybrid((uint64_t)v159)) {
      BOOL isEmpty = 1;
    }
    WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v157);
    char v161 = (WebCore::PublicKeyCredentialDescriptor *)((char *)v161 + 40);
  }
  id v27 = WebKit::allocASPublicKeyCredentialClientDataInstance(v10);
  WebCore::toNSData((WebCore *)&v144, v172);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v29 = v28;
  WebCore::SecurityOriginData::toString(&v143, v171);
  [v27 initWithChallenge:v29 origin:WTF::String::operator NSString *(&v143)];
  WTF::adoptCF<__IOHIDManager *>(&v145);
  uint64_t v176 = &v143;
  char v177 = &v143;
  char v180 = &v143;
  v181[1] = &v143;
  v181[0] = 0;
  v188 = &v143;
  v187 = v181;
  SecKeyRef v184 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v143);
  if (v184) {
    WTF::StringImpl::deref(v184, v30);
  }
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v144);
  if (std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](v170))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v31 setCrossOrigin:1];
    std::optional<WebCore::SecurityOriginData>::operator->[abi:sn180100](v170);
    WebCore::SecurityOriginData::toString(&v142, v32);
    uint64_t v33 = WTF::String::operator NSString *(&v142);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v34 setTopOrigin:v33];
    uint64_t v175 = &v142;
    v178 = &v142;
    int v179 = &v142;
    v182[1] = &v142;
    v182[0] = 0;
    v186 = &v142;
    v185 = v182;
    unsigned int v183 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v142);
    if (v183) {
      WTF::StringImpl::deref(v183, v35);
    }
  }
  WTF::RetainPtr<__IOHIDDevice *>::get();
  id v37 = (WebKit *)[v36 count];
  if (v37 || (WTF::RetainPtr<__IOHIDDevice *>::get(), (id v37 = (WebKit *)[v38 count]) == 0))
  {
    id v39 = WebKit::allocASAuthorizationPlatformPublicKeyCredentialProviderInstance(v37);
    uint64_t v40 = (void *)[v39 initWithRelyingPartyIdentifier:WTF::String::operator NSString *((void *)v172 + 3)];
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v40 createCredentialAssertionRequestWithClientData:v41];
    WTF::adoptCF<__IOHIDManager *>(&v141);
    if (WTF::RetainPtr<WKWebView>::operator BOOL(&v167))
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v43 = v42;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v44 setAllowedCredentials:v43];
    }
    if (std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v172 + 56))
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v172 + 56);
      if (std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](v45 + 16))
      {
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v172 + 56);
        uint64_t v47 = (WebKit *)std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](v140, v46 + 16);
        id v48 = WebKit::allocASAuthorizationPublicKeyCredentialLargeBlobAssertionInputInstance(v47);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)v140);
        char v50 = std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v49 + 8);
        char v51 = 0;
        if (v50)
        {
          std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)v140);
          std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](v52 + 8);
          char v51 = *v53;
        }
        [v48 initWithOperation:(v51 & 1) == 0];
        WTF::adoptCF<__IOHIDManager *>(&v139);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)v140);
        if (std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100](v54 + 16))
        {
          std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)v140);
          std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator*[abi:sn180100](v55 + 16);
          WebCore::toNSData((WebCore *)&v138, v56);
          WTF::RetainPtr<__IOHIDDevice *>::get();
          uint64_t v58 = v57;
          WTF::RetainPtr<__IOHIDDevice *>::get();
          [v59 setDataToWrite:v58];
          WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v138);
        }
        WTF::RetainPtr<__IOHIDDevice *>::get();
        uint64_t v61 = v60;
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v62 setLargeBlob:v61];
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v139);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v140);
      }
    }
    WebKit::toASUserVerificationPreference(&v137);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v64 = v63;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v65 setUserVerificationPreference:v64];
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v137);
    if (!isEmpty)
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v66 setShouldShowHybridTransport:0];
    }
    if (std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v172 + 56))
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v172 + 56);
      if (std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator BOOL[abi:sn180100](v67 + 64))
      {
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v172 + 56);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](v136, v68 + 64);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v136);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](v134, v69);
        WebKit::toASAssertionPRFInputValue(&v135, (uint64_t)v134);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v134);
        WTF::RetainPtr<ASAuthorizationController>::RetainPtr(&v133);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v136);
        uint64_t v71 = std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100](v70 + 48);
        if (v71)
        {
          id v72 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          WTF::adoptCF<__IOHIDManager *>(&v132);
          WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)&v133, &v132);
          WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v132);
          std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v136);
          std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator*[abi:sn180100](v73 + 48);
          uint64_t v131 = v74;
          uint64_t v130 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)v74);
          uint64_t v71 = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v131);
          uint64_t v129 = v71;
          while (v130 != v129)
          {
            uint64_t v128 = v130;
            WTF::String::utf8();
            uint64_t v125 = WTF::CString::span(&v124);
            uint64_t v126 = v75;
            WTF::base64URLDecode((uint64_t)v127, v125, v75);
            WTF::CString::~CString((WTF::CString *)&v124);
            if (std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100]((uint64_t)v127))
            {
              WTF::RetainPtr<__IOHIDDevice *>::get();
              uint64_t v77 = v76;
              std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues&,0>((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v121, (const PRFValues *)(v128 + 8));
              WebKit::toASAssertionPRFInputValue(&v122, (uint64_t)v121);
              WTF::RetainPtr<__IOHIDDevice *>::get();
              uint64_t v79 = v78;
              std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator*[abi:sn180100]((uint64_t)v127);
              std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v119, v80);
              WTF::toNSData(&v120, v119[0], v119[1]);
              WTF::RetainPtr<__IOHIDDevice *>::get();
              [v77 setObject:v79 forKey:v81];
              WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v120);
              WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v122);
              std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v121);
              int v123 = 0;
            }
            else
            {
              int v123 = 7;
            }
            uint64_t v71 = (uint64_t)std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((WTF::ASCIILiteral *)v127);
            v130 += 48;
          }
        }
        id v82 = WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputInstance((WebKit *)v71);
        WTF::RetainPtr<__IOHIDDevice *>::get();
        uint64_t v84 = v83;
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v82 initWithInputValues:v84 perCredentialInputValues:v85];
        WTF::adoptCF<__IOHIDManager *>(&v118);
        WTF::RetainPtr<__IOHIDDevice *>::get();
        uint64_t v87 = v86;
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v88 setPrf:v87];
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v118);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v133);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v135);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v136);
      }
    }
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v90 = v89;
    WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(&v141);
    [v90 addObject:v91];
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v141);
  }
  if ((*(unsigned char *)(a2 + 49) & 1) == 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v93 = (WebKit *)[v92 count];
    if (v93 || (WTF::RetainPtr<__IOHIDDevice *>::get(), (uint64_t v93 = (WebKit *)[v94 count]) == 0))
    {
      id v95 = WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialProviderInstance(v93);
      [v95 initWithRelyingPartyIdentifier:WTF::String::operator NSString *((void *)v172 + 3)];
      WTF::adoptCF<__IOHIDManager *>(&v117);
      WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v116);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      if (objc_opt_respondsToSelector())
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        id v97 = v96;
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v97 createCredentialAssertionRequestWithClientData:v98];
        WTF::adoptCF<__IOHIDManager *>(&v115);
        WTF::RetainPtr<__IOHIDManager *>::operator=(&v116, &v115);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v115);
      }
      else
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        id v100 = v99;
        WebCore::toNSData((WebCore *)&v113, v172);
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v100 createCredentialAssertionRequestWithChallenge:v101];
        WTF::adoptCF<__IOHIDManager *>(&v114);
        WTF::RetainPtr<__IOHIDManager *>::operator=(&v116, &v114);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v114);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v113);
      }
      if (WTF::RetainPtr<WKWebView>::operator BOOL(&v165))
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        uint64_t v103 = v102;
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v104 setAllowedCredentials:v103];
      }
      if (std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v172 + 56))
      {
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v172 + 56);
        if (!WTF::String::isNull(v105))
        {
          std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v172 + 56);
          id v107 = WTF::String::operator NSString *(v106);
          WTF::RetainPtr<__IOHIDDevice *>::get();
          [v108 setAppID:v107];
        }
      }
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v110 = v109;
      WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(&v116);
      [v110 addObject:v111];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v116);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v117);
    }
  }
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(a1, &v169);
  int v123 = 1;
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v145);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v165);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v167);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v169);
}

BOOL WebKit::isPlatformRequest(uint64_t a1)
{
  uint64_t v5 = a1;
  BOOL isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(a1);
  BOOL v2 = 1;
  if (!isEmpty) {
    return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL17isPlatformRequestERKS5_EUlT_E_EEbRKSA_(v5, (uint64_t)&v4);
  }
  return v2;
}

BOOL WebKit::isCrossPlatformRequest(uint64_t a1)
{
  uint64_t v5 = a1;
  BOOL isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(a1);
  BOOL v2 = 1;
  if (!isEmpty) {
    return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL22isCrossPlatformRequestERKS5_EUlT_E_EEbRKSA_(v5, (uint64_t)&v4);
  }
  return v2;
}

BOOL WebKit::allowsHybrid(uint64_t a1)
{
  uint64_t v5 = a1;
  BOOL isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(a1);
  BOOL v2 = 1;
  if (!isEmpty) {
    return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL12allowsHybridERKS5_EUlT_E_EEbRKSA_(v5, (uint64_t)&v4);
  }
  return v2;
}

uint64_t std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::SecurityOriginData>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

id WebKit::allocASAuthorizationPublicKeyCredentialLargeBlobAssertionInputInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialLargeBlobAssertionInputClass[0](this));
}

uint64_t WTF::base64URLDecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a1;
  *((void *)&v10 + 1) = a3;
  *(void *)&long long v10 = a2;
  long long v9 = v10;
  int v5 = 1;
  uint64_t v6 = &v5;
  uint64_t v7 = 1;
  WTF::OptionSet<WTF::Base64DecodeOption>::OptionSet(&v8, (uint64_t)&v5, 1);
  return WTF::base64Decode(a1, v9, *((uint64_t *)&v9 + 1));
}

uint64_t WTF::CString::span(WTF::CStringBuffer **this)
{
  v5[1] = (uint64_t)this;
  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(this))
  {
    v6[3] = this;
    v6[4] = this;
    v5[0] = WTF::CStringBuffer::data(*this);
    uint64_t v2 = WTF::byteCast<unsigned char,char const*>(v5);
    void v6[2] = this;
    v6[5] = this;
    uint64_t v3 = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)*this);
    std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v6, v2, v3);
  }
  else
  {
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](v6);
  }
  return v6[0];
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues&,0>(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

void *WTF::toNSData(void *a1, uint64_t a2, uint64_t a3)
{
  void v7[2] = a1;
  v7[1] = a3;
  v7[0] = a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  uint64_t v5 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v7);
  [v4 initWithBytes:v5 length:std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v7)];
  return WTF::adoptCF<__IOHIDManager *>(a1);
}

id WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialPRFAssertionInputClass[0](this));
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::pauseConditionalAssertion(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(a1 + 48) & 1) != 0 || (*(unsigned char *)(a1 + 49) & 1) == 0) {
    return WTF::CompletionHandler<void ()(void)>::operator()(a2);
  }
  *(unsigned char *)(a1 + 48) = 1;
  WTF::CompletionHandler<void ()(void)>::operator=(a1 + 72);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  return [v2 cancel];
}

void WTF::CompletionHandler<void ()(void)>::operator=(uint64_t a1)
{
  WTF::Function<void ()(void)>::operator=(a1);
  WTF::ThreadLikeAssertion::operator=();
}

atomic_uint **WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(atomic_uint **a1, uint64_t a2)
{
  return a1;
}

{
  atomic_uint *v5;

  uint64_t v5 = (atomic_uint *)WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::WebAuthenticatorCoordinatorProxy>(a2);
  if (v5) {
    WTF::ThreadSafeRefCountedBase::ref(v5);
  }
  *a1 = v5;
  return a1;
}

BOOL WTF::operator==<WebKit::WebAuthenticatorCoordinatorProxy,WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  return WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1) == a2;
}

void *WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(void)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  id v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(void)>::~Function((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = a1;
  uint64_t v52 = a2;
  char v51 = (WTF::RefCountedBase *)a3;
  id v4 = (WebKit::WebPreferences *)WebKit::WebPageProxy::preferences(*(WebKit::WebPageProxy **)(a1 + 16));
  if (WebKit::WebPreferences::webAuthenticationASEnabled(v4, v5, v6))
  {
    char v39 = 3;
    *(unsigned char *)(a1 + 49) = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v52 + 696, &v39);
    WebKit::WebAuthenticatorCoordinatorProxy::constructASController(&v38, (const WebKit::WebAuthenticationRequestData *)a1, v52);
    if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v38))
    {
      uint64_t v14 = v51;
      memset(v37, 0, sizeof(v37));
      WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v37);
      v35[0] = 31;
      WTF::String::String((WTF::String *)&v36, &stru_1EEA10550.isa);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v14, (uint64_t)v37, 0, (uint64_t)v35);
      WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v35);
      WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v37, v15);
      int v41 = 1;
    }
    else
    {
      if (*(unsigned char *)(a1 + 49))
      {
        id v16 = WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v34, a1);
        id v17 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy((WebKit::WebAuthenticatorCoordinatorProxy *)v16);
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(v17, (uint64_t *)&v34);
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)&v34);
      }
      WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)(a1 + 40), (uint64_t *)&v38);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator=(a1 + 24);
      uint64_t v18 = [_WKASDelegate alloc];
      uint64_t v19 = v52 + 328;
      WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v30, a1);
      WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(&v31, (uint64_t *)&v30);
      uint64_t v20 = (const void *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v31);
      WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::BlockPtr(&v32, v20);
      [(_WKASDelegate *)v18 initWithPage:v19 completionHandler:&v32];
      WTF::adoptCF<__IOHIDManager *>(&v33);
      WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)(a1 + 32), &v33);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v33);
      WTF::BlockPtr<void ()(void)>::~BlockPtr((const void **)&v32);
      WTF::BlockPtr<void ()(void)>::~BlockPtr(&v31);
      WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0((uint64_t *)&v30);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v22 = v21;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v23 setPresentationContextProvider:v22];
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v25 = v24;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v26 setDelegate:v25];
      if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v52 + 696) & 1) != 0
        && (std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](v52 + 696), *v27 == 3)
        && std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v52 + 16))
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v28 performAutoFillAssistedRequests];
      }
      else
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        [v29 performRequests];
      }
      int v41 = 0;
    }
    return WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v38);
  }
  else
  {
    WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(&v50, a1, v52);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if (v7)
    {
      WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v40);
      WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(a1, (uint64_t)&v40, (uint64_t)v51);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v40);
      int v41 = 1;
    }
    else
    {
      int v8 = v51;
      memset(v49, 0, 160);
      WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v49);
      v47[0] = 31;
      uint64_t v45 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"The origin of the document is not the same as its ancestors.", (const char *)0x3C);
      uint64_t v46 = v9;
      WTF::String::String(&v48, v45, v9);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v8, (uint64_t)v49, 0, (uint64_t)v47);
      WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v47);
      WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v49, v10);
      os_log_t oslog = (os_log_t)qword_1EB3587D0;
      char v43 = 16;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = oslog;
        os_log_type_t v12 = v43;
        __os_log_helper_16_0_0(buf);
        _os_log_error_impl(&dword_1985F2000, v11, v12, "The origin of the document is not the same as its ancestors.", buf, 2u);
      }
      int v41 = 1;
    }
    return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v50);
  }
}

uint64_t WebKit::WebPageProxy::preferences(WebKit::WebPageProxy *this)
{
  return WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)this + 272);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  char v11 = 0;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *(void *)&long long v10 = a1;
  *((void *)&v10 + 1) = v12;
  *(void *)&long long v9 = a1;
  *((void *)&v9 + 1) = v12;
  uint64_t v18 = v12 + 16;
  v17[5] = &v10;
  v17[4] = &v9;
  long long v16 = v10;
  long long v15 = v9;
  long long v26 = v10;
  long long v25 = v9;
  long long v24 = v10;
  long long v23 = v9;
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>::Visitor(v17, (uint64_t)a1, v12, (uint64_t)a1, v12);
  uint64_t v27 = v18;
  uint64_t v22 = v17;
  uint64_t v21 = v18;
  uint64_t v20 = 2;
  uint64_t result = (uint64_t *)std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](v18);
  switch((unint64_t)result)
  {
    case 0uLL:
      uint64_t v5 = (uint64_t)v22;
      std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v21);
      return std::invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(v5, v6);
    case 1uLL:
      uint64_t v7 = (uint64_t)v22;
      std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v21);
      return std::invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(v7, v8);
    case 2uLL:
      __break(1u);
      goto LABEL_5;
    case 3uLL:
LABEL_5:
      __break(1u);
      goto LABEL_6;
    case 4uLL:
LABEL_6:
      __break(1u);
      goto LABEL_7;
    case 5uLL:
LABEL_7:
      __break(1u);
      goto LABEL_8;
    case 6uLL:
LABEL_8:
      __break(1u);
      goto LABEL_9;
    case 7uLL:
LABEL_9:
      __break(1u);
      goto LABEL_10;
    case 8uLL:
LABEL_10:
      __break(1u);
      goto LABEL_11;
    case 9uLL:
LABEL_11:
      __break(1u);
      goto LABEL_12;
    case 0xAuLL:
LABEL_12:
      __break(1u);
      goto LABEL_13;
    case 0xBuLL:
LABEL_13:
      __break(1u);
      goto LABEL_14;
    case 0xCuLL:
LABEL_14:
      __break(1u);
      goto LABEL_15;
    case 0xDuLL:
LABEL_15:
      __break(1u);
      goto LABEL_16;
    case 0xEuLL:
LABEL_16:
      __break(1u);
      goto LABEL_17;
    case 0xFuLL:
LABEL_17:
      __break(1u);
      goto LABEL_18;
    case 0x10uLL:
LABEL_18:
      __break(1u);
      goto LABEL_19;
    case 0x11uLL:
LABEL_19:
      __break(1u);
      goto LABEL_20;
    case 0x12uLL:
LABEL_20:
      __break(1u);
      goto LABEL_21;
    case 0x13uLL:
LABEL_21:
      __break(1u);
      goto LABEL_22;
    case 0x14uLL:
LABEL_22:
      __break(1u);
      goto LABEL_23;
    case 0x15uLL:
LABEL_23:
      __break(1u);
      goto LABEL_24;
    case 0x16uLL:
LABEL_24:
      __break(1u);
      goto LABEL_25;
    case 0x17uLL:
LABEL_25:
      __break(1u);
      goto LABEL_26;
    case 0x18uLL:
LABEL_26:
      __break(1u);
      goto LABEL_27;
    case 0x19uLL:
LABEL_27:
      __break(1u);
      goto LABEL_28;
    case 0x1AuLL:
LABEL_28:
      __break(1u);
      goto LABEL_29;
    case 0x1BuLL:
LABEL_29:
      __break(1u);
      goto LABEL_30;
    case 0x1CuLL:
LABEL_30:
      __break(1u);
      goto LABEL_31;
    case 0x1DuLL:
LABEL_31:
      __break(1u);
      goto LABEL_32;
    case 0x1EuLL:
LABEL_32:
      __break(1u);
      goto LABEL_33;
    case 0x1FuLL:
LABEL_33:
      __break(1u);
      break;
    default:
      break;
  }
  uint64_t v19 = 2;
  __break(1u);
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(WTF::RefCountedBase *a1, uint64_t a2, char a3, uint64_t a4)
{
  long long v9 = a1;
  uint64_t v8 = a2;
  char v7 = a3;
  v6[1] = a4;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>,decltype(nullptr)>(v6, (uint64_t)a1);
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()();
  return WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~Function((uint64_t)v6);
}

void sub_19922C3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, char a13)
{
}

WebCore::AuthenticatorResponseData *WebCore::AuthenticatorResponseData::AuthenticatorResponseData(WebCore::AuthenticatorResponseData *this)
{
  return this;
}

{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100]((unsigned char *)this + 16);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 144);
  return this;
}

void WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a1;
  uint64_t v41 = a2;
  CFTypeRef v40 = (WTF::RefCountedBase *)a3;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v5 = (WebKit *)[v4 requestTypes];
  if (v5)
  {
    [WebKit::allocASCAgentProxyInstance(v5) init];
    WTF::adoptCF<__IOHIDManager *>(&v31);
    WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)(a1 + 64), &v31);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v31);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if ([v11 requestStyle] == 2)
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v13 = v12;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v15 = v14;
      WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v28, a1);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(&v29, (uint64_t)v40);
      WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0>(&v30, (uint64_t *)&v28);
      [v13 performSilentAuthorizationRequestsForContext:v15 withCompletionHandler:std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v30)];
      WTF::BlockPtr<void ()(void)>::~BlockPtr(&v30);
      WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0((uint64_t *)&v28);
    }
    else
    {
      uint64_t v16 = WebKit::WebPageProxy::pageClient(*(WebKit::WebPageProxy **)(a1 + 16));
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v16 + 1160))(&v27);
      id v17 = WTF::String::operator NSString *(&v27);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v18 setWindowSceneIdentifier:v17];
      char v43 = &v27;
      id v44 = &v27;
      uint64_t v45 = &v27;
      v46[1] = &v27;
      v46[0] = 0;
      uint64_t v49 = &v27;
      uint64_t v48 = v46;
      uint64_t v47 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v27);
      if (v47) {
        WTF::StringImpl::deref(v47, v19);
      }
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v21 = v20;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v23 = v22;
      WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v24, a1);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(&v25, (uint64_t)v40);
      WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1>(&v26, (uint64_t *)&v24);
      [v21 performAuthorizationRequestsForContext:v23 withCompletionHandler:std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v26)];
      WTF::BlockPtr<void ()(void)>::~BlockPtr(&v26);
      WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0((uint64_t *)&v24);
    }
  }
  else
  {
    uint64_t v6 = v40;
    memset(v39, 0, sizeof(v39));
    WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v39);
    v37[0] = 31;
    uint64_t v35 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"This request has been cancelled by the user.", (const char *)0x2C);
    uint64_t v36 = v7;
    WTF::String::String(&v38, v35, v7);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v6, (uint64_t)v39, 0, (uint64_t)v37);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v37);
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v39, v8);
    os_log_t oslog = (os_log_t)qword_1EB3587D0;
    char v33 = 16;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
    {
      long long v9 = oslog;
      os_log_type_t v10 = v33;
      __os_log_helper_16_0_0(buf);
      _os_log_error_impl(&dword_1985F2000, v9, v10, "Request cancelled due to none requestTypes.", buf, 2u);
    }
  }
}

void sub_19922C820(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  a21 = a1;
  a20 = a2;
  *(void *)(v21 - 176) = &a12;
  *(void *)(v21 - 152) = *(void *)(v21 - 176);
  *(void *)(v21 - 144) = *(void *)(v21 - 152);
  *(void *)(v21 - 104) = *(void *)(v21 - 144);
  uint64_t v22 = *(void *)(v21 - 104);
  *(void *)(v21 - 112) = 0;
  *(void *)(v21 - 72) = v22;
  *(void *)(v21 - 80) = v21 - 112;
  *(void *)(v21 - 96) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v21 - 72));
  if (*(void *)(v21 - 96)) {
    WTF::StringImpl::deref(*(WTF::StringImpl **)(v21 - 96), v23);
  }
  _Unwind_Resume(v24);
}

void sub_19922C888(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  a21 = a1;
  a20 = a2;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(&a9);
  _Unwind_Resume(v21);
}

void sub_19922C89C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  a21 = a1;
  a20 = a2;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(&a9);
  JUMPOUT(0x19922C8C0);
}

WTF::String *WTF::String::String(WTF::String *this, NSString *a2)
{
  return this;
}

void WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator=(uint64_t a1)
{
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator=(a1);
  WTF::ThreadLikeAssertion::operator=();
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(void *a1, uint64_t *a2)
{
  return WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &,void,ASAuthorization *,NSError *>(a1, a2, (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator(), 0);
}

void **WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::BlockPtr(void **a1, const void *a2)
{
  return a1;
}

{
  *a1 = _Block_copy(a2);
  return a1;
}

BOOL std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  return std::__holds_alternative[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1);
}

BOOL WebKit::WebAuthenticatorCoordinatorProxy::isASCAvailable(WebKit::WebAuthenticatorCoordinatorProxy *this)
{
  return WebKit::isAuthenticationServicesCoreFrameworkAvailable(this);
}

BOOL WebKit::isAuthenticationServicesCoreFrameworkAvailable(WebKit *this)
{
  return WebKit::AuthenticationServicesCoreLibrary((WebKit *)1) != 0;
}

id WebKit::allocASCAgentProxyInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCAgentProxyClass[0](this));
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0>(void *a1, uint64_t *a2)
{
  return WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&,void,objc_object  {objcproto21ASCCredentialProtocol}*,NSError *>(a1, a2, (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator(), 0);
}

void *WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 1));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1>(void *a1, uint64_t *a2)
{
  return WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&,void,objc_object  {objcproto21ASCCredentialProtocol}*,NSError *>(a1, a2, (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator(), 0);
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3)
{
  void v7[3] = a1;
  void v7[2] = (uint64_t)a2;
  v7[1] = a3;
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v6, a3);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v5);
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(v7, (uint64_t)&v6);
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(a2, v7);
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)v7);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v5);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v6);
}

void sub_19922CC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t *WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData *a1, uint64_t *a2)
{
  uint64_t v12 = a1;
  id v11 = a2;
  WebKit::getASCWebKitSPISupportClass[0](a1);
  uint64_t v2 = objc_opt_respondsToSelector();
  if ((v2 & 1) == 0) {
    return (uint64_t *)WTF::CompletionHandler<void ()(BOOL)>::operator()(v11);
  }
  uint64_t v3 = (void *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v2);
  WebCore::SecurityOriginData::securityOrigin(&v10, v12);
  id v4 = (WebCore::SecurityOrigin *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v10);
  char v5 = (void *)WebCore::SecurityOrigin::domain(v4);
  uint64_t v6 = WTF::String::operator NSString *(v5);
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v8, (uint64_t)v11);
  WTF::makeBlockPtr<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(&v9, (uint64_t)&v8);
  [v3 getCanCurrentProcessAccessPasskeysForRelyingParty:v6 withCompletionHandler:std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v9)];
  WTF::BlockPtr<void ()(void)>::~BlockPtr(&v9);
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v8);
  return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v10);
}

void *WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void *WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  id v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(BOOL)>::~Function((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebKit *a1, WebCore::SecurityOriginData *a2, WTF::RefCountedBase *a3)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v14 = a3;
  WebKit::getASCWebKitSPISupportClass[0](a1);
  uint64_t v3 = objc_opt_respondsToSelector();
  if (v3)
  {
    uint64_t v6 = (void *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v3);
    WebCore::SecurityOriginData::securityOrigin(&v12, v15);
    uint64_t v7 = (WebCore::SecurityOrigin *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v12);
    uint64_t v8 = (void *)WebCore::SecurityOrigin::domain(v7);
    long long v9 = WTF::String::operator NSString *(v8);
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(&v10, (uint64_t)v14);
    WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(&v11, (uint64_t)&v10);
    [v6 getClientCapabilitiesForRelyingParty:v9 withCompletionHandler:std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v11)];
    WTF::BlockPtr<void ()(void)>::~BlockPtr(&v11);
    WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v10);
    return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v12);
  }
  else
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v13);
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v14, (uint64_t)v13);
    return (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v4);
  }
}

void sub_19922CF98(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  a14 = a1;
  a13 = a2;
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a11);
  JUMPOUT(0x19922CFD0);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(WTF::RefCountedBase *a1, uint64_t a2)
{
  v4[2] = a1;
  v4[1] = a2;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,decltype(nullptr)>(v4, (uint64_t)a1);
  WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()();
  return WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)v4);
}

void sub_19922D03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, char a13)
{
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t WebCore::SecurityOrigin::domain(WebCore::SecurityOrigin *this)
{
  return (uint64_t)this + 40;
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(void *a1, uint64_t a2)
{
  return WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &,void,NSDictionary<NSString *,NSNumber *> *>(a1, a2, (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator(), 0);
}

void *WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(a1);
  return a1;
}

uint64_t *WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(uint64_t *a1)
{
  return a1;
}

{
  WTF::StringImpl *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  char v5 = a1;
  uint64_t v6 = a1;
  id v4 = 0;
  uint64_t v3 = 0;
  uint64_t v8 = a1;
  uint64_t v7 = &v3;
  id v4 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
  {
    long long v9 = v4;
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, v1);
  }
  return v6;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  v6[1] = a3;
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v9, a3);
  WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v10, v7);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)v5);
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(v6, (uint64_t)&v9);
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(a2, v6);
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)v6);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)v5);
  return WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)&v9);
}

void sub_19922D270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, char a10, char a11, int a12, _Unwind_Exception *exception_object, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void *WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(uint64_t a1)
{
  return a1;
}

{
  WebCore::SecurityOriginData::~SecurityOriginData((WebCore::SecurityOriginData *)(a1 + 8));
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)a1);
  return a1;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::cancel(void *a1, uint64_t *a2)
{
  id v11 = a1;
  uint64_t v10 = a2;
  if (WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL()
    || WTF::RetainPtr<WKWebView>::operator BOOL(a1 + 4))
  {
    WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v7, (uint64_t)a1);
    WTF::CompletionHandler<void ()(void)>::CompletionHandler(&v8, (uint64_t)v10);
    WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v6);
    WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)>&&)::$_0,void>(&v9, (uint64_t *)&v7);
    WTF::CompletionHandler<void ()(void)>::operator=((uint64_t)(a1 + 9));
    WTF::CompletionHandler<void ()(void)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v9);
    WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v6);
    WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t *)&v7);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(v10);
  }
  if (WTF::RetainPtr<WKWebView>::operator BOOL(a1 + 8))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v3 cancelCurrentRequest];
    WTF::RetainPtr<ASCAgentProxy>::clear(a1 + 8);
  }
  uint64_t result = WTF::RetainPtr<WKWebView>::operator BOOL(a1 + 5);
  if (result)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    return [v5 cancel];
  }
  return result;
}

void *WTF::CompletionHandler<void ()(void)>::CompletionHandler(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void *WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)>&&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(void)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 1));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void WTF::RetainPtr<ASCAgentProxy>::clear(uint64_t *a1)
{
  CFTypeRef cf = (CFTypeRef)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_19922D654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WebCore::BufferSource::~BufferSource(v11);
  _Unwind_Resume(a1);
}

WebCore::BufferSource *WebCore::BufferSource::BufferSource(WebCore::BufferSource *this, const WebCore::BufferSource *a2)
{
  return this;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]((uint64_t)this, (uint64_t)a2);
  return this;
}

void *std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](void *a1)
{
  return a1;
}

void *std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](void *result)
{
  uint64_t *result = 0;
  result[1] = 0;
  return result;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(WebCore::AuthenticationExtensionsClientInputs::PRFValues *this, const PRFValues *a2)
{
  return this;
}

{
  WebCore::BufferSource::BufferSource(this, (const WebCore::BufferSource *)a2);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((unsigned char *)this + 16, (uint64_t)&a2->var1);
  return this;
}

void sub_19922DA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WebCore::BufferSource::~BufferSource(v11);
  _Unwind_Resume(a1);
}

id WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputValuesInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialPRFAssertionInputValuesClass[0](this));
}

uint64_t WTF::operator==(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v7 = a2;
  *((void *)&v7 + 1) = a3;
  long long v8 = v7;
  uint64_t v3 = WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(a1);
  uint64_t v4 = WTF::ASCIILiteral::span8((WTF::ASCIILiteral *)&v8);
  return MEMORY[0x19972E990](v3, v4, v5) & 1;
}

BOOL _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL17isPlatformRequestERKS5_EUlT_E_EEbRKSA_(uint64_t a1, uint64_t a2)
{
  return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL17isPlatformRequestERKS5_EUlT_E_EEmRKSA_(a1, a2) != -1;
}

uint64_t _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL17isPlatformRequestERKS5_EUlT_E_EEmRKSA_(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    uint64_t v3 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (_ZZN6WebKitL17isPlatformRequestERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(a2, *v3))
    {
      return i;
    }
  }
  return -1;
}

BOOL _ZZN6WebKitL17isPlatformRequestERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(uint64_t a1, char a2)
{
  BOOL v2 = 1;
  if (a2 != 3) {
    return a2 == 5;
  }
  return v2;
}

BOOL _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL22isCrossPlatformRequestERKS5_EUlT_E_EEbRKSA_(uint64_t a1, uint64_t a2)
{
  return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL22isCrossPlatformRequestERKS5_EUlT_E_EEmRKSA_(a1, a2) != -1;
}

uint64_t _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL22isCrossPlatformRequestERKS5_EUlT_E_EEmRKSA_(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    uint64_t v3 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (_ZZN6WebKitL22isCrossPlatformRequestERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(a2, *v3))
    {
      return i;
    }
  }
  return -1;
}

BOOL _ZZN6WebKitL22isCrossPlatformRequestERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(uint64_t a1, char a2)
{
  BOOL v2 = 0;
  if (a2 != 3) {
    return a2 != 5;
  }
  return v2;
}

BOOL _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL12allowsHybridERKS5_EUlT_E_EEbRKSA_(uint64_t a1, uint64_t a2)
{
  return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL12allowsHybridERKS5_EUlT_E_EEmRKSA_(a1, a2) != -1;
}

uint64_t _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL12allowsHybridERKS5_EUlT_E_EEmRKSA_(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    uint64_t v3 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (_ZZN6WebKitL12allowsHybridERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(a2, *v3))
    {
      return i;
    }
  }
  return -1;
}

BOOL _ZZN6WebKitL12allowsHybridERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(uint64_t a1, char a2)
{
  BOOL v2 = 1;
  if (a2 != 5) {
    return a2 == 4;
  }
  return v2;
}

uint64_t WTF::base64Decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::base64Decode();
}

_DWORD *WTF::OptionSet<WTF::Base64DecodeOption>::OptionSet(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return WTF::OptionSet<WTF::Base64DecodeOption>::OptionSet(a1, a2, a3);
}

{
  uint64_t v5;
  _DWORD *v6;
  void v7[2];
  _DWORD *v8;

  v7[0] = a2;
  v7[1] = a3;
  long long v8 = a1;
  *a1 = 0;
  char v6 = (_DWORD *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v7);
  uint64_t v5 = std::initializer_list<WTF::Base64DecodeOption>::end[abi:sn180100](v7);
  while (v6 != (_DWORD *)v5)
    *a1 |= *v6++;
  return v8;
}

uint64_t std::initializer_list<WTF::Base64DecodeOption>::end[abi:sn180100](void *a1)
{
  return *a1 + 4 * a1[1];
}

uint64_t WTF::byteCast<unsigned char,char const*>(uint64_t *a1)
{
  return WTF::ByteCastTraits<char const*>::cast<unsigned char>(*a1);
}

uint64_t WTF::ByteCastTraits<char const*>::cast<unsigned char>(uint64_t a1)
{
  return WTF::bitwise_cast<unsigned char const*,char const*>(a1);
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__127__optional_move_assign_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__127__optional_copy_assign_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__120__optional_move_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__120__optional_copy_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__123__optional_storage_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues&>(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  *((unsigned char *)a1 + 40) = 1;
  return a1;
}

void WTF::Function<void ()(void)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::operator=[abi:sn180100](a1);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::operator=[abi:sn180100](uint64_t a1)
{
  uint64_t v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
}

void sub_19922E70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  a21 = v37;
  a20 = 0;
  *(void *)(v31 + 168) = v37;
  *(void *)(v31 + 160) = &a20;
  *(void *)(v31 + 72) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 168));
  if (*(void *)(v31 + 72)) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 72));
  }
  a23 = v36;
  a22 = 0;
  *(void *)(v31 + 152) = v36;
  *(void *)(v31 + 144) = &a22;
  *(void *)(v31 + 64) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 152));
  if (*(void *)(v31 + 64)) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 64));
  }
  a25 = v35;
  a24 = 0;
  *(void *)(v31 + 136) = v35;
  *(void *)(v31 + 128) = &a24;
  *(void *)(v31 + 56) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 136));
  if (*(void *)(v31 + 56)) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 56));
  }
  a27 = v34;
  a26 = 0;
  *(void *)(v31 + 120) = v34;
  *(void *)(v31 + 112) = &a26;
  *(void *)(v31 + 48) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 120));
  if (*(void *)(v31 + 48)) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 48));
  }
  *(void *)(v31 + 8) = v33;
  uint64_t v38 = *(void *)(v31 + 8);
  *(void *)uint64_t v31 = 0;
  *(void *)(v31 + 104) = v38;
  *(void *)(v31 + 96) = &a28;
  *(void *)(v31 + 40) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 104));
  if (*(void *)(v31 + 40)) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 40));
  }
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional(v30);
  *(void *)(v31 + 24) = v32;
  uint64_t v39 = *(void *)(v31 + 24);
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 88) = v39;
  *(void *)(v31 + 80) = &a30;
  *(void *)(v31 + 32) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 88));
  if (*(void *)(v31 + 32)) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 32));
  }
  _Unwind_Resume(a1);
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional(uint64_t a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  uint64_t *result = 0;
  result[80] = 0;
  return result;
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_move_assign_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_copy_assign_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_move_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_copy_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_storage_base(uint64_t a1)
{
  return a1;
}

void WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::operator=[abi:sn180100](a1);
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::operator=[abi:sn180100](a1);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::operator=[abi:sn180100](uint64_t a1)
{
  uint64_t v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::reset[abi:sn180100](a1, 0);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  void *v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &,void,ASAuthorization *,NSError *>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void v6[6] = (uint64_t)a1;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = (uint64_t)a2;
  uint64_t v6[2] = a4;
  v6[1] = a3;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(v6, a2);
  WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(a1, v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0(v6);
}

void sub_19922EDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void v7[3] = a1;
  void v7[2] = a2;
  v7[1] = a3;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v4, a1);
  WTF::retainPtr<ASAuthorization *>(&v5);
  WTF::retainPtr<ASAuthorization *>(&v6);
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>(v7, &v4);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)v7);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::~NSError(&v4);
}

void sub_19922EE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  long long v8 = (char *)malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *(void *)long long v8 = MEMORY[0x1E4F14398];
  int v7 = 1;
  *((_DWORD *)v8 + 2) = 50331650;
  *((_DWORD *)v8 + 3) = 0;
  uint64_t v4 = (uint64_t *(**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v6);
  void *v4 = WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,ASAuthorization *,NSError *)#1}::__invoke;
  *((void *)v8 + 3) = &WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::descriptor;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0((uint64_t *)v8 + 4, a2);
  uint64_t result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v8;
  return result;
}

uint64_t *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  return WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

uint64_t *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0((uint64_t *)(a2 + 32));
}

uint64_t *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,ASAuthorization *,NSError *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  return WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,ASAuthorization *,NSError *)#1}::operator()((uint64_t)&v4, a1, a2, a3);
}

uint64_t *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,ASAuthorization *,NSError *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()((uint64_t *)(a2 + 32), a3, a4);
}

CFTypeRef *WTF::retainPtr<ASAuthorization *>(CFTypeRef *a1)
{
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
}

void *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>,NSError>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::~NSError(uint64_t *a1)
{
  return a1;
}

{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1 + 2);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1 + 1);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>,NSError>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19922F230(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA038;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::NSError(a1 + 1, a2);
  return a1;
}

void sub_19922F2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::NSError(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 1, a2 + 1);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 2, a2 + 2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA038;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::~NSError(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
}

void sub_19922F454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v165 = a1;
  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    long long v164 = 0u;
    long long v163 = 0u;
    long long v162 = 0u;
    long long v161 = 0u;
    memset(v160, 0, sizeof(v160));
    long long v159 = 0u;
    WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&v159);
    v157[0] = 31;
    WTF::String::String((WTF::String *)&v158, &stru_1EEA10550.isa);
    char v156 = 0;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if (objc_msgSend((id)objc_msgSend(v2, "domain"), "isEqualToString:", @"WKErrorDomain"))
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      v154[0] = WebKit::toExceptionCode((WebKit *)[v3 code]);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v5 = (void *)[v4 userInfo];
      WTF::String::String((WTF::String *)&v155, (NSString *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F28568]]);
      WebCore::ExceptionData::operator=((uint64_t)v157, (uint64_t)v154);
      WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v154);
    }
    else
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v7 = (void *)[v6 domain];
      if ([v7 isEqualToString:WebKit::get_AuthenticationServices_ASAuthorizationErrorDomain((WebKit *)v7)])
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        switch([v8 code])
        {
          case 1001:
            v144[0] = 31;
            WTF::String::String((WTF::String *)&v145, &stru_1EEA10550.isa);
            WebCore::ExceptionData::operator=((uint64_t)v157, (uint64_t)v144);
            WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v144);
            break;
          case 1004:
            WTF::RetainPtr<__IOHIDDevice *>::get();
            uint64_t v10 = (void *)[v9 userInfo];
            [v10 objectForKeyedSubscript:*MEMORY[0x1E4F28A50]];
            WTF::retainPtr<ASAuthorization *>(&v152);
            WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v153, (uint64_t *)&v152);
            WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v152);
            WTF::RetainPtr<__IOHIDDevice *>::get();
            uint64_t v12 = (void *)[v11 domain];
            if (([v12 isEqualToString:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v12)] & 1) != 0&& (WTF::RetainPtr<__IOHIDDevice *>::get(), objc_msgSend(v13, "code") == 17))
            {
              v150[0] = 14;
              WTF::RetainPtr<__IOHIDDevice *>::get();
              uint64_t v15 = (void *)[v14 userInfo];
              WTF::String::String((WTF::String *)&v151, (NSString *)[v15 objectForKeyedSubscript:*MEMORY[0x1E4F28588]]);
              WebCore::ExceptionData::operator=((uint64_t)v157, (uint64_t)v150);
              WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v150);
            }
            else
            {
              WTF::RetainPtr<__IOHIDDevice *>::get();
              if (objc_msgSend((id)objc_msgSend(v16, "domain"), "isEqualToString:", @"WKErrorDomain"))
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                v148[0] = WebKit::toExceptionCode((WebKit *)[v17 code]);
                WTF::RetainPtr<__IOHIDDevice *>::get();
                uint64_t v19 = (void *)[v18 userInfo];
                WTF::String::String((WTF::String *)&v149, (NSString *)[v19 objectForKeyedSubscript:*MEMORY[0x1E4F28568]]);
                WebCore::ExceptionData::operator=((uint64_t)v157, (uint64_t)v148);
                WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v148);
              }
            }
            WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v153);
            break;
          case 1006:
            v146[0] = 8;
            WTF::String::String((WTF::String *)&v147, &stru_1EEA10550.isa);
            WebCore::ExceptionData::operator=((uint64_t)v157, (uint64_t)v146);
            WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v146);
            break;
          default:
            break;
        }
      }
      else
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        uint64_t v21 = (WebKit *)[v20 credential];
        WebKit::getASAuthorizationPlatformPublicKeyCredentialRegistrationClass[0](v21);
        if (objc_opt_isKindOfClass())
        {
          LOBYTE(v159) = 1;
          WTF::RetainPtr<__IOHIDDevice *>::get();
          [v22 credential];
          WTF::retainPtr<ASAuthorization *>(&v143);
          WTF::RetainPtr<__IOHIDDevice *>::get();
          WebKit::toArrayBuffer((WebKit *)&v142, (NSData *)[v23 credentialID]);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v159 + 1, &v142);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v142);
          WTF::RetainPtr<__IOHIDDevice *>::get();
          WebKit::toArrayBuffer((WebKit *)&v141, (NSData *)[v24 rawAttestationObject]);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v162, &v141);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v141);
          v137[0] = 3;
          v137[1] = 5;
          uint64_t v138 = v137;
          uint64_t v139 = 2;
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((unsigned int *)v140, (uint64_t)v137, 2);
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v164, v140);
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v140);
          WTF::RetainPtr<__IOHIDDevice *>::get();
          WebKit::toArrayBuffer((WebKit *)&v136, (NSData *)[v25 rawClientDataJSON]);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v161 + 1, &v136);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v136);
          char v135 = 0;
          WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v132);
          WTF::RetainPtr<__IOHIDDevice *>::get();
          if ([v26 largeBlob])
          {
            char v135 = 1;
            WTF::RetainPtr<__IOHIDDevice *>::get();
            char v128 = objc_msgSend((id)objc_msgSend(v27, "largeBlob"), "isSupported") & 1;
            std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(v129, &v128);
            v240 = &v130;
            uint64_t v239 = 0;
            v242 = &v130;
            uint64_t v241 = 0;
            uint64_t v130 = 0;
            std::optional<BOOL>::optional[abi:sn180100](v131);
            std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,void>((uint64_t)&v133, (uint64_t)v129);
            WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs((WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *)v129);
          }
          WTF::RetainPtr<__IOHIDDevice *>::get();
          if (objc_opt_respondsToSelector())
          {
            WTF::RetainPtr<__IOHIDDevice *>::get();
            if ([v28 prf])
            {
              char v135 = 1;
              v238 = (uint64_t *)&v127;
              uint64_t v237 = 0;
              v244 = (uint64_t *)&v127;
              uint64_t v243 = 0;
              uint64_t v127 = 0;
              v236 = &v126;
              uint64_t v235 = 0;
              v246 = &v126;
              uint64_t v245 = 0;
              uint64_t v126 = 0;
              WTF::RetainPtr<__IOHIDDevice *>::get();
              if (objc_msgSend((id)objc_msgSend(v29, "prf"), "first"))
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBuffer((WebKit *)&v125, (NSData *)objc_msgSend((id)objc_msgSend(v30, "prf"), "first"));
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v127, &v125);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v125);
              }
              WTF::RetainPtr<__IOHIDDevice *>::get();
              if (objc_msgSend((id)objc_msgSend(v31, "prf"), "second"))
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBuffer((WebKit *)&v124, (NSData *)objc_msgSend((id)objc_msgSend(v32, "prf"), "second"));
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v126, &v124);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v124);
              }
              if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(&v127))
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                char v121 = objc_msgSend((id)objc_msgSend(v33, "prf"), "isSupported") & 1;
                std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(&v122, &v121);
                v210 = &v119;
                v209 = (uint64_t *)&v127;
                v212 = &v119;
                v211 = (uint64_t *)&v127;
                v230 = (uint64_t *)&v127;
                v225 = v127;
                if (v127) {
                  WTF::StringImpl::ref(v225);
                }
                __int16 v119 = v225;
                v208 = &v120;
                v207 = &v126;
                v214 = &v120;
                v213 = &v126;
                v229 = &v126;
                v224 = v126;
                if (v126) {
                  WTF::StringImpl::ref(v224);
                }
                uint64_t v120 = v224;
                std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,0>((uint64_t)&v123, (uint64_t *)&v119);
                std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,void>((uint64_t)v134, &v122);
                WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)&v122);
                WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v119);
              }
              else
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                char v116 = objc_msgSend((id)objc_msgSend(v34, "prf"), "isSupported") & 1;
                std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(&v117, &v116);
                std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100](v118);
                std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,void>((uint64_t)v134, &v117);
                WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)&v117);
              }
              long long v172 = &v126;
              v173[1] = &v126;
              v173[0] = 0;
              v200 = &v126;
              v199 = v173;
              v186 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v126);
              if (v186) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v186);
              }
              uint64_t v171 = (uint64_t *)&v127;
              v174[1] = &v127;
              v174[0] = 0;
              v198 = (uint64_t *)&v127;
              v197 = v174;
              v185 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v127);
              if (v185) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v185);
              }
            }
          }
          if (v135) {
            std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&,void>((WebCore::AuthenticationExtensionsClientOutputs *)v160, (const WebCore::AuthenticationExtensionsClientOutputs *)v132);
          }
          WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v132);
          WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v143);
        }
        else
        {
          WTF::RetainPtr<__IOHIDDevice *>::get();
          uint64_t v36 = (WebKit *)[v35 credential];
          WebKit::getASAuthorizationPlatformPublicKeyCredentialAssertionClass[0](v36);
          if (objc_opt_isKindOfClass())
          {
            WTF::RetainPtr<__IOHIDDevice *>::get();
            [v37 credential];
            WTF::retainPtr<ASAuthorization *>(&v115);
            WTF::RetainPtr<__IOHIDDevice *>::get();
            WebKit::toArrayBuffer((WebKit *)&v114, (NSData *)[v38 credentialID]);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v159 + 1, &v114);
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v114);
            WTF::RetainPtr<__IOHIDDevice *>::get();
            WebKit::toArrayBuffer((WebKit *)&v113, (NSData *)[v39 rawAuthenticatorData]);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v162 + 1, &v113);
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v113);
            WTF::RetainPtr<__IOHIDDevice *>::get();
            WebKit::toArrayBuffer((WebKit *)&v112, (NSData *)[v40 signature]);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v163, &v112);
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v112);
            WTF::RetainPtr<__IOHIDDevice *>::get();
            WebKit::toArrayBufferNilIfEmpty(&v111, (NSData *)[v41 userID]);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)&v163 + 1, &v111);
            uint64_t v170 = &v111;
            v175[1] = &v111;
            v175[0] = 0;
            v196 = &v111;
            v195 = v175;
            SecKeyRef v184 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v111);
            if (v184) {
              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v184);
            }
            WTF::RetainPtr<__IOHIDDevice *>::get();
            WebKit::toArrayBuffer((WebKit *)&v110, (NSData *)[v42 rawClientDataJSON]);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v161 + 1, &v110);
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v110);
            char v109 = 0;
            WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v106);
            WTF::RetainPtr<__IOHIDDevice *>::get();
            if ([v43 largeBlob])
            {
              char v109 = 1;
              v234 = &v105;
              uint64_t v233 = 0;
              v248 = &v105;
              uint64_t v247 = 0;
              uint64_t v105 = 0;
              WTF::RetainPtr<__IOHIDDevice *>::get();
              if (objc_msgSend((id)objc_msgSend(v44, "largeBlob"), "readData"))
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBuffer((WebKit *)&v104, (NSData *)objc_msgSend((id)objc_msgSend(v45, "largeBlob"), "readData"));
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v105, &v104);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v104);
              }
              std::optional<BOOL>::optional[abi:sn180100](v101);
              v206 = &v102;
              v205 = &v105;
              v216 = &v102;
              v215 = &v105;
              v228 = &v105;
              v223 = v105;
              if (v105) {
                WTF::StringImpl::ref(v223);
              }
              uint64_t v102 = v223;
              WTF::RetainPtr<__IOHIDDevice *>::get();
              v100[0] = objc_msgSend((id)objc_msgSend(v46, "largeBlob"), "didWrite") & 1;
              std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(v103, v100);
              std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,void>((uint64_t)&v107, (uint64_t)v101);
              WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs((WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *)v101);
              uint64_t v169 = &v105;
              v176[1] = &v105;
              v176[0] = 0;
              v194 = &v105;
              v193 = v176;
              unsigned int v183 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v105);
              if (v183) {
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v183);
              }
            }
            WTF::RetainPtr<__IOHIDDevice *>::get();
            if (objc_opt_respondsToSelector())
            {
              WTF::RetainPtr<__IOHIDDevice *>::get();
              if ([v47 prf])
              {
                char v109 = 1;
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBuffer((WebKit *)&v98, (NSData *)objc_msgSend((id)objc_msgSend(v48, "prf"), "first"));
                WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>((uint64_t *)&v99, &v98);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v98);
                v232 = &v97;
                uint64_t v231 = 0;
                v250 = &v97;
                uint64_t v249 = 0;
                id v97 = 0;
                WTF::RetainPtr<__IOHIDDevice *>::get();
                if (objc_msgSend((id)objc_msgSend(v49, "prf"), "second"))
                {
                  WTF::RetainPtr<__IOHIDDevice *>::get();
                  WebKit::toArrayBuffer((WebKit *)&v96, (NSData *)objc_msgSend((id)objc_msgSend(v50, "prf"), "second"));
                  WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v97, &v96);
                  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v96);
                }
                std::optional<BOOL>::optional[abi:sn180100](&v94);
                v204 = &v92;
                v203 = &v99;
                v218 = &v92;
                v217 = &v99;
                v227 = &v99;
                v222 = v99;
                if (v99) {
                  WTF::StringImpl::ref(v222);
                }
                id v92 = v222;
                v202 = v93;
                v201 = &v97;
                v220 = v93;
                v219 = &v97;
                v226 = &v97;
                v221 = v97;
                if (v97) {
                  WTF::StringImpl::ref(v221);
                }
                v93[0] = v221;
                std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,0>((uint64_t)&v95, (uint64_t *)&v92);
                std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,void>((uint64_t)&v108, &v94);
                WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)&v94);
                WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v92);
                uint64_t v168 = &v97;
                v177[1] = &v97;
                v177[0] = 0;
                v192 = &v97;
                v191 = v177;
                int v182 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v97);
                if (v182) {
                  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v182);
                }
                uint64_t v167 = &v99;
                v178[1] = &v99;
                v178[0] = 0;
                v190 = &v99;
                v189 = v178;
                v181 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v99);
                if (v181) {
                  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v181);
                }
              }
            }
            if (v109) {
              std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&,void>((WebCore::AuthenticationExtensionsClientOutputs *)v160, (const WebCore::AuthenticationExtensionsClientOutputs *)v106);
            }
            WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v106);
            WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v115);
          }
          else
          {
            WTF::RetainPtr<__IOHIDDevice *>::get();
            uint64_t v52 = (WebKit *)[v51 credential];
            WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialRegistrationClass[0](v52);
            if (objc_opt_isKindOfClass())
            {
              WTF::RetainPtr<__IOHIDDevice *>::get();
              [v53 credential];
              WTF::retainPtr<ASAuthorization *>(&v91);
              LOBYTE(v159) = 1;
              WTF::RetainPtr<__IOHIDDevice *>::get();
              WebKit::toArrayBuffer((WebKit *)&v90, (NSData *)[v54 credentialID]);
              WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v159 + 1, &v90);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v90);
              WTF::RetainPtr<__IOHIDDevice *>::get();
              WebKit::toArrayBuffer((WebKit *)&v89, (NSData *)[v55 rawAttestationObject]);
              WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v162, &v89);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v89);
              WTF::RetainPtr<__IOHIDDevice *>::get();
              if (objc_opt_respondsToSelector())
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toTransports((unsigned int *)v88, (void *)[v56 transports]);
                WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v164, v88);
                WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v88);
              }
              else
              {
                WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v87);
                WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v164, v87);
                WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v87);
              }
              WTF::RetainPtr<__IOHIDDevice *>::get();
              WebKit::toArrayBuffer((WebKit *)&v86, (NSData *)[v57 rawClientDataJSON]);
              WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v161 + 1, &v86);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v86);
              WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v91);
            }
            else
            {
              WTF::RetainPtr<__IOHIDDevice *>::get();
              id v59 = (WebKit *)[v58 credential];
              WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialAssertionClass[0](v59);
              if (objc_opt_isKindOfClass())
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                [v60 credential];
                WTF::retainPtr<ASAuthorization *>(&v85);
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBuffer((WebKit *)&v84, (NSData *)[v61 credentialID]);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v159 + 1, &v84);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v84);
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBuffer((WebKit *)&v83, (NSData *)[v62 rawAuthenticatorData]);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v162 + 1, &v83);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v83);
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBuffer((WebKit *)&v82, (NSData *)[v63 signature]);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v163, &v82);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v82);
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBufferNilIfEmpty(&v81, (NSData *)[v64 userID]);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)&v163 + 1, &v81);
                uint64_t v166 = &v81;
                v179[1] = &v81;
                v179[0] = 0;
                v188 = &v81;
                v187 = v179;
                char v180 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v81);
                if (v180) {
                  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v180);
                }
                WTF::RetainPtr<__IOHIDDevice *>::get();
                WebKit::toArrayBuffer((WebKit *)&v80, (NSData *)[v65 rawClientDataJSON]);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v161 + 1, &v80);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v80);
                WTF::RetainPtr<__IOHIDDevice *>::get();
                if (objc_opt_respondsToSelector())
                {
                  WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v79);
                  WTF::RetainPtr<__IOHIDDevice *>::get();
                  char v77 = [v66 appID] & 1;
                  std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(&v78, &v77);
                  v79[0] = v78;
                  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&,void>((WebCore::AuthenticationExtensionsClientOutputs *)v160, (const WebCore::AuthenticationExtensionsClientOutputs *)v79);
                  WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v79);
                }
                WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v85);
              }
            }
          }
        }
      }
    }
    BOOL v67 = WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(a1);
    if (v67)
    {
      uint64_t v68 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy((WebKit::WebAuthenticatorCoordinatorProxy *)v67);
      BOOL v69 = WTF::operator==<WebKit::WebAuthenticatorCoordinatorProxy,WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>(v68, a1);
      if (v69)
      {
        uint64_t v70 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy((WebKit::WebAuthenticatorCoordinatorProxy *)v69);
        WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(v70);
      }
      if ((*(unsigned char *)(WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1)
                     + 48) & 1) == 0)
      {
        uint64_t v71 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
        WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()((WTF::RefCountedBase *)(v71 + 24), (uint64_t)&v159, v156, (uint64_t)v157);
        uint64_t v72 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
        WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v72 + 32));
        uint64_t v73 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
        WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v73 + 40));
        *(unsigned char *)(WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1)
                 + 49) = 0;
      }
      uint64_t v74 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
      WTF::CompletionHandler<void ()(void)>::CompletionHandler(&v76, v74 + 72);
      if (WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL()) {
        WTF::CompletionHandler<void ()(void)>::operator()(&v76);
      }
      WTF::CompletionHandler<void ()(void)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v76);
    }
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v157);
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&v159, v75);
  }
}

uint64_t WebKit::toExceptionCode(WebKit *this)
{
  if (this > 0x25u) {
    return 31;
  }
  else {
    return this;
  }
}

uint64_t *WebCore::ExceptionData::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return WTF::String::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
}

uint64_t WebKit::toArrayBuffer(WebKit *this, NSData *a2)
{
  return JSC::ArrayBuffer::create();
}

WTF::DeferrableRefCountedBase *WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>(uint64_t *a1, uint64_t *a2)
{
  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v4, a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[4] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  id v8 = v4;
  uint64_t v7 = v5;
  uint64_t result = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  id v6 = result;
  if (result) {
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
  }
  return result;
}

void sub_1992312D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a16 = &a13;
  *(void *)(v20 - 72) = &a13;
  uint64_t v21 = *(void *)(v20 - 72);
  a20 = 0;
  *(void *)(v20 - 40) = v21;
  *(void *)(v20 - 48) = &a20;
  *(void *)(v20 - 64) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v20 - 40));
  if (*(void *)(v20 - 64)) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v20 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t *WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(uint64_t *a1)
{
  return a1;
}

{
  uint64_t v2;
  WTF::DeferrableRefCountedBase *v3;
  uint64_t *v4;
  uint64_t *v5;
  WTF::DeferrableRefCountedBase *v6;
  uint64_t *v7;
  uint64_t *v8;

  id v4 = a1;
  uint64_t v5 = a1;
  id v3 = 0;
  id v2 = 0;
  id v8 = a1;
  uint64_t v7 = &v2;
  id v3 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    id v6 = v3;
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  }
  return v5;
}

void WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

WebCore::AuthenticationExtensionsClientOutputs *WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(WebCore::AuthenticationExtensionsClientOutputs *this)
{
  return this;
}

{
  std::optional<BOOL>::optional[abi:sn180100](this);
  std::optional<BOOL>::optional[abi:sn180100]((unsigned char *)this + 2);
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100]((unsigned char *)this + 8);
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100]((unsigned char *)this + 40);
  return this;
}

unsigned char *std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(unsigned char *a1, unsigned char *a2)
{
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

unsigned char *std::optional<BOOL>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::optional<BOOL>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<BOOL,true>::__optional_move_assign_base(a1);
  return a1;
}

{
  std::__optional_move_assign_base<BOOL,true>::__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,0>(uint64_t a1, uint64_t *a2)
{
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,void>(uint64_t a1, _WORD *a2)
{
  if ((std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>(a1, (uint64_t)a2);
  }
  std::__to_address[abi:sn180100]<char const>();
  return WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::operator=(v3, a2);
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs *std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&,void>(WebCore::AuthenticationExtensionsClientOutputs *a1, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::has_value[abi:sn180100]((uint64_t)a1) & 1) == 0) {
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&>(a1, a2);
  }
  std::__to_address[abi:sn180100]<char const>();
  return (WebCore::AuthenticationExtensionsClientOutputs *)WebCore::AuthenticationExtensionsClientOutputs::operator=(v3, (uint64_t)a2);
}

uint64_t *WebKit::toArrayBufferNilIfEmpty(uint64_t *this, NSData *a2)
{
  id v2 = this;
  id v6 = this;
  uint64_t v5 = (WTF *)a2;
  if (a2 && (this = (uint64_t *)[(WTF *)v5 length]) != 0)
  {
    WTF::span(v5, v3);
    JSC::ArrayBuffer::create();
    WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v2, &v4);
    return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v4);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t *v2 = 0;
  }
  return this;
}

uint64_t WebKit::toTransports(unsigned int *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v23 = a1;
  id v22 = a2;
  char v21 = 0;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1);
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  id v3 = v22;
  uint64_t result = [v22 countByEnumeratingWithState:&v16 objects:v36 count:16];
  unint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = *(void *)v17;
    do
    {
      unint64_t v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v20 = 0;
        uint64_t v20 = *(NSString **)(*((void *)&v16 + 1) + 8 * v7);
        WTF::String::String((WTF::String *)&v14, v20);
        __int16 v15 = WebCore::convertStringToAuthenticatorTransport((WebCore *)&v14, v8);
        id v24 = &v14;
        id v25 = &v14;
        id v26 = &v14;
        v27[1] = &v14;
        v27[0] = 0;
        id v30 = &v14;
        id v29 = v27;
        id v28 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v14);
        if (v28) {
          WTF::StringImpl::deref(v28, v9);
        }
        if (std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100]((uint64_t)&v15))
        {
          std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100]((uint64_t)&v15);
          id v32 = a1;
          id v31 = v10;
          id v34 = a1;
          id v33 = v10;
          uint64_t v11 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
          if (v11 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
          {
            WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AuthenticatorTransport&>(a1, (unint64_t)v33);
          }
          else
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
            uint64_t v12 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
            id v13 = (unsigned char *)operator new(1, 0, v12);
            unsigned char *v13 = *v33;
            ++a1[3];
          }
          char v35 = 1;
        }
        ++v7;
      }
      while (v7 < v5);
      uint64_t result = [v3 countByEnumeratingWithState:&v16 objects:v36 count:16];
      unint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

BOOL WTF::operator==<WebKit::WebAuthenticatorCoordinatorProxy,WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1);
  return v2 == WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a2);
}

WTF::ThreadSafeRefCountedBase *WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(uint64_t *a1)
{
  return WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(a1);
}

uint64_t WTF::span(WTF *this, NSData *a2)
{
  if (this) {
    std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(&v3, [(WTF *)this bytes], [(WTF *)this length]);
  }
  else {
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](&v3);
  }
  return v3;
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

unsigned char *std::__optional_move_assign_base<BOOL,true>::__optional_move_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<BOOL,true>::__optional_copy_assign_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<BOOL,true>::__optional_move_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<BOOL,true>::__optional_copy_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *_ZNSt3__127__optional_move_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(unsigned char *a1, unsigned char *a2)
{
  return a1;
}

unsigned char *_ZNSt3__127__optional_copy_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(unsigned char *a1, unsigned char *a2)
{
  return a1;
}

unsigned char *_ZNSt3__120__optional_move_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(unsigned char *a1, unsigned char *a2)
{
  return a1;
}

unsigned char *_ZNSt3__120__optional_copy_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(unsigned char *a1, unsigned char *a2)
{
  return a1;
}

unsigned char *_ZNSt3__123__optional_storage_baseIbLb0EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(unsigned char *a1, unsigned char *a2)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<BOOL,true>::__optional_destruct_base[abi:sn180100]<BOOL>(unsigned char *result, unsigned char *a2)
{
  WTF::DeferrableRefCountedBase *result = *a2 & 1;
  result[1] = 1;
  return result;
}

uint64_t *WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::operator=(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t result = WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs*>(a1, a2);
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __break(1u);
  }
  return WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::LargeBlobOutputs(a1, a2);
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::LargeBlobOutputs(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef((uint64_t *)(a2 + 8));
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t _ZNSt3__127__optional_move_assign_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__127__optional_copy_assign_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__120__optional_move_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__120__optional_copy_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__123__optional_storage_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 16) = 1;
  return a1;
}

uint64_t *WebCore::AuthenticationExtensionsClientOutputs::PRFValues::PRFValues(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  a1[1] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2 + 1);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::operator=(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::operator=[abi:sn180100]((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>>(a1, a2);
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>>(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned char *)(a1 + 16) & 1;
  uint64_t result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if (v3 == (result & 1))
  {
    if (*(unsigned char *)(a1 + 16))
    {
      std::__to_address[abi:sn180100]<char const>();
      return (uint64_t)WebCore::AuthenticationExtensionsClientOutputs::PRFValues::operator=((uint64_t *)a1, v5);
    }
  }
  else if (*(unsigned char *)(a1 + 16))
  {
    return std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    return (uint64_t)std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>(a1, v6);
  }
  return result;
}

uint64_t *WebCore::AuthenticationExtensionsClientOutputs::PRFValues::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(a1, a2);
  return WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(a1 + 1, a2 + 1);
}

uint64_t *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues*>((uint64_t *)a1, a2);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues*>(uint64_t *a1, uint64_t *a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues*>(a1, a2);
}

uint64_t *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues*>(uint64_t *a1, uint64_t *a2)
{
  if (!a1) {
    __break(1u);
  }
  return WebCore::AuthenticationExtensionsClientOutputs::PRFValues::PRFValues(a1, a2);
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 80) & 1;
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::operator=(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]((uint64_t)(a1 + 2), a2 + 8);
  return std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]((uint64_t)(a1 + 10), (__int16 *)(a2 + 40));
}

WebCore::AuthenticationExtensionsClientOutputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&>(WebCore::AuthenticationExtensionsClientOutputs *a1, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs&,WebCore::AuthenticationExtensionsClientOutputs*>(a1, a2);
  *((unsigned char *)a1 + 80) = 1;
  return result;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100](uint64_t a1, __int16 *a2)
{
  return std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false> const&>(a1, a2);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  if (*((unsigned char *)a1 + 24))
  {
    WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs(a1);
    *((unsigned char *)a1 + 24) = 0;
  }
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](uint64_t a1, __int16 *a2)
{
  return std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](uint64_t a1, __int16 *a2)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false> const&>(a1, a2);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  if (*((unsigned char *)a1 + 32))
  {
    WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs(a1);
    *((unsigned char *)a1 + 32) = 0;
  }
}

WebCore::AuthenticationExtensionsClientOutputs *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs&,WebCore::AuthenticationExtensionsClientOutputs*>(WebCore::AuthenticationExtensionsClientOutputs *a1, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs&,WebCore::AuthenticationExtensionsClientOutputs*>(a1, a2);
}

WebCore::AuthenticationExtensionsClientOutputs *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs&,WebCore::AuthenticationExtensionsClientOutputs*>(WebCore::AuthenticationExtensionsClientOutputs *a1, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  if (!a1) {
    __break(1u);
  }
  return WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(a1, a2);
}

WebCore::AuthenticationExtensionsClientOutputs *WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(WebCore::AuthenticationExtensionsClientOutputs *this, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  return this;
}

{
  unsigned char *v3;

  *(_DWORD *)this = *(_DWORD *)a2;
  int v3 = (char *)this + 40;
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100]((uint64_t)this + 8, (uint64_t)a2 + 8);
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100](v3, (uint64_t)a2 + 40);
  return this;
}

void sub_199232C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::~optional(v11);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AuthenticatorTransport&>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
  unint64_t v7 = (unsigned char *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, (WTF *)(v3 + 1), a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  uint64_t v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
  uint64_t result = (unsigned char *)operator new(1, 0, v4);
  unsigned char *result = *v7;
  ++a1[3];
  return result;
}

WTF::ThreadSafeRefCountedBase *WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(uint64_t *a1)
{
  v2[2] = a1;
  v2[1] = 0;
  v2[0] = 0;
  v2[4] = a1;
  v2[3] = v2;
  uint64_t result = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  uint64_t v3 = result;
  if (result) {
    return (WTF::ThreadSafeRefCountedBase *)WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v3);
  }
  return result;
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&,void,objc_object  {objcproto21ASCCredentialProtocol}*,NSError *>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6[7] = (uint64_t)a1;
  void v6[6] = a4;
  v6[5] = a3;
  v6[4] = (uint64_t)a2;
  v6[3] = a4;
  uint64_t v6[2] = a3;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::$_0(v6, a2);
  WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(a1, v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(v6);
}

void sub_1992330B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(atomic_uint **a1, uint64_t a2, uint64_t a3)
{
  v9[3] = a1;
  _OWORD v9[2] = a2;
  v9[1] = a3;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v5, a1);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(&v6, (uint64_t)(a1 + 1));
  WTF::retainPtr<ASAuthorization *>(&v7);
  WTF::retainPtr<ASAuthorization *>(&v8);
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(v9, (uint64_t *)&v5);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)v9);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError((uint64_t *)&v5);
}

void sub_19923317C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v10 = a1;
  id v9 = a2;
  CFTypeRef v8 = (char *)malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  *(void *)CFTypeRef v8 = MEMORY[0x1E4F14398];
  int v7 = 1;
  *((_DWORD *)v8 + 2) = 50331650;
  *((_DWORD *)v8 + 3) = 0;
  uint64_t v4 = (uint64_t *(**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v6);
  void *v4 = WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke;
  *((void *)v8 + 3) = &WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::descriptor;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::$_0((uint64_t *)v8 + 4, a2);
  uint64_t result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v8;
  return result;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  return WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0((uint64_t *)(a2 + 32));
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  return WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::operator()((uint64_t)&v4, a1, a2, a3);
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()((atomic_uint **)(a2 + 32), a3, a4);
}

void sub_199233478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  char v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~Function((uint64_t)a1);
  return a1;
}

void *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>,NSError>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError(uint64_t *a1)
{
  return a1;
}

{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1 + 3);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1 + 2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 1));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void sub_1992335A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(v11);
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~Function((uint64_t)v11);
  _Unwind_Resume(a1);
}

uint64_t WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&>>::reset[abi:sn180100](a1, 0);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>,NSError>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_199233760(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA080;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(a1 + 1, a2);
  return a1;
}

void sub_199233820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 2, a2 + 2);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 3, a2 + 3);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA080;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
}

void sub_1992339A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  long long v18 = a1;
  if (WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    memset(v17, 0, sizeof(v17));
    WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v17);
    v15[0] = 31;
    uint64_t v13 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Operation failed.", (const char *)0x11);
    uint64_t v14 = v2;
    WTF::String::String(&v16, v13, v2);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()((WTF::RefCountedBase *)(a1 + 1), (uint64_t)v17, 0, (uint64_t)v15);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v15);
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v17, v3);
    os_log_t oslog = (os_log_t)qword_1EB3587D0;
    char v11 = 16;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
    {
      char v4 = oslog;
      os_log_type_t v5 = v11;
      __os_log_helper_16_0_0(buf);
      _os_log_error_impl(&dword_1985F2000, v4, v5, "Request cancelled after WebAuthenticatorCoordinatorProxy invalid after starting request.", buf, 2u);
    }
  }
  else
  {
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v9);
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v8);
    WebKit::continueAfterRequest((uint64_t)&v9, (uint64_t)&v8, (WTF::RefCountedBase *)(a1 + 1));
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v8);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v9);
    uint64_t v6 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    if (WTF::RetainPtr<WKWebView>::operator BOOL((void *)(v6 + 64)))
    {
      uint64_t v7 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
      WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v7 + 64));
    }
  }
}

void WebKit::continueAfterRequest(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v68 = a1;
  uint64_t v67 = a2;
  id v66 = a3;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  memset(v61, 0, sizeof(v61));
  long long v60 = 0u;
  WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&v60);
  v58[0] = 0;
  uint64_t v59 = 0;
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v59);
  id v57 = 0;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  WebKit::getASCPlatformPublicKeyCredentialRegistrationClass[0](v3);
  if (objc_opt_isKindOfClass())
  {
    LOBYTE(v60) = 1;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    id v56 = v4;
    WebKit::toArrayBuffer((WebKit *)&v55, (NSData *)[v4 credentialID]);
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v60 + 1, &v55);
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v55);
    WebKit::toArrayBuffer((WebKit *)&v54, (NSData *)[v56 attestationObject]);
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v63, &v54);
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v54);
    WebKit::toArrayBuffer((WebKit *)&v53, (NSData *)[v56 rawClientDataJSON]);
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v62 + 1, &v53);
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v53);
    id v57 = (id)[v56 attachment];
    if (objc_opt_respondsToSelector())
    {
      WebKit::toAuthenticatorTransports((unsigned int *)v52, (void *)[v56 transports]);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v65, v52);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v52);
    }
    if (objc_opt_respondsToSelector())
    {
      WebKit::toExtensionOutputs((WebKit *)v51, (NSData *)[v56 extensionOutputsCBOR]);
      std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]((uint64_t)v61, (uint64_t)v51);
      std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional((uint64_t)v51);
    }
  }
  else
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    WebKit::getASCSecurityKeyPublicKeyCredentialRegistrationClass[0](v5);
    if (objc_opt_isKindOfClass())
    {
      LOBYTE(v60) = 1;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      id v50 = v6;
      WebKit::toArrayBuffer((WebKit *)&v49, (NSData *)[v6 credentialID]);
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v60 + 1, &v49);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v49);
      WebKit::toArrayBuffer((WebKit *)&v48, (NSData *)[v50 attestationObject]);
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v63, &v48);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v48);
      WebKit::toArrayBuffer((WebKit *)&v47, (NSData *)[v50 rawClientDataJSON]);
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v62 + 1, &v47);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v47);
      id v57 = (id)[v50 attachment];
      if (objc_opt_respondsToSelector())
      {
        WebKit::toAuthenticatorTransports((unsigned int *)v46, (void *)[v50 transports]);
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v65, v46);
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v46);
      }
      if (objc_opt_respondsToSelector())
      {
        WebKit::toExtensionOutputs((WebKit *)v45, (NSData *)[v50 extensionOutputsCBOR]);
        std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]((uint64_t)v61, (uint64_t)v45);
        std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional((uint64_t)v45);
      }
    }
    else
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      WebKit::getASCPlatformPublicKeyCredentialAssertionClass[0](v7);
      if (objc_opt_isKindOfClass())
      {
        LOBYTE(v60) = 0;
        WTF::RetainPtr<__IOHIDDevice *>::get();
        id v44 = v8;
        WebKit::toArrayBuffer((WebKit *)&v43, (NSData *)[v8 credentialID]);
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v60 + 1, &v43);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v43);
        WebKit::toArrayBuffer((WebKit *)&v42, (NSData *)[v44 authenticatorData]);
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v63 + 1, &v42);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v42);
        WebKit::toArrayBuffer((WebKit *)&v41, (NSData *)[v44 signature]);
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v64, &v41);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v41);
        WebKit::toArrayBufferNilIfEmpty(&v40, (NSData *)[v44 userHandle]);
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)&v64 + 1, &v40);
        uint64_t v70 = &v40;
        v71[1] = &v40;
        v71[0] = 0;
        __int16 v78 = &v40;
        char v77 = v71;
        uint64_t v74 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v40);
        if (v74) {
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v74);
        }
        WebKit::toArrayBuffer((WebKit *)&v39, (NSData *)[v44 rawClientDataJSON]);
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v62 + 1, &v39);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v39);
        id v57 = (id)[v44 attachment];
        if (objc_opt_respondsToSelector())
        {
          WebKit::toExtensionOutputs((WebKit *)v38, (NSData *)[v44 extensionOutputsCBOR]);
          std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]((uint64_t)v61, (uint64_t)v38);
          std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional((uint64_t)v38);
        }
      }
      else
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        WebKit::getASCSecurityKeyPublicKeyCredentialAssertionClass[0](v9);
        if (objc_opt_isKindOfClass())
        {
          LOBYTE(v60) = 0;
          WTF::RetainPtr<__IOHIDDevice *>::get();
          id v37 = v10;
          WebKit::toArrayBuffer((WebKit *)&v36, (NSData *)[v10 credentialID]);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v60 + 1, &v36);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v36);
          WebKit::toArrayBuffer((WebKit *)&v35, (NSData *)[v37 authenticatorData]);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v63 + 1, &v35);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v35);
          WebKit::toArrayBuffer((WebKit *)&v34, (NSData *)[v37 signature]);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v64, &v34);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v34);
          WebKit::toArrayBufferNilIfEmpty(&v33, (NSData *)[v37 userHandle]);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)&v64 + 1, &v33);
          BOOL v69 = &v33;
          v72[1] = &v33;
          v72[0] = 0;
          uint64_t v76 = &v33;
          uint64_t v75 = v72;
          uint64_t v73 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v33);
          if (v73) {
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v73);
          }
          WebKit::toArrayBuffer((WebKit *)&v32, (NSData *)[v37 rawClientDataJSON]);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v62 + 1, &v32);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v32);
          id v57 = (id)[v37 attachment];
          if (objc_opt_respondsToSelector())
          {
            WebKit::toExtensionOutputs((WebKit *)v31, (NSData *)[v37 extensionOutputsCBOR]);
            std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]((uint64_t)v61, (uint64_t)v31);
            std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional((uint64_t)v31);
          }
        }
        else
        {
          char v30 = 0;
          id v29 = 0;
          WTF::RetainPtr<__IOHIDDevice *>::get();
          if (objc_msgSend((id)objc_msgSend(v11, "domain"), "isEqualToString:", @"WKErrorDomain"))
          {
            WTF::RetainPtr<__IOHIDDevice *>::get();
            char v30 = WebKit::toExceptionCode((WebKit *)[v12 code]);
            WTF::RetainPtr<__IOHIDDevice *>::get();
            uint64_t v14 = (void *)[v13 userInfo];
            id v29 = (NSString *)[v14 objectForKeyedSubscript:*MEMORY[0x1E4F28568]];
          }
          else
          {
            char v30 = 31;
            WTF::RetainPtr<__IOHIDDevice *>::get();
            uint64_t v16 = (void *)[v15 domain];
            if (([v16 isEqualToString:WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v16)] & 1) != 0&& (WTF::RetainPtr<__IOHIDDevice *>::get(), objc_msgSend(v17, "code") == 2))
            {
              id v29 = (NSString *)@"This request has been cancelled by the user.";
              os_log_t oslog = (os_log_t)qword_1EB3587D0;
              char v27 = 16;
              if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
              {
                long long v18 = oslog;
                os_log_type_t v19 = v27;
                __os_log_helper_16_0_0(buf);
                _os_log_error_impl(&dword_1985F2000, v18, v19, "Request cancelled after ASCAuthorizationErrorUserCanceled.", buf, 2u);
              }
            }
            else
            {
              id v29 = (NSString *)@"Operation failed.";
              os_log_t v25 = (os_log_t)qword_1EB3587D0;
              os_log_type_t v24 = OS_LOG_TYPE_ERROR;
              if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
              {
                WTF::RetainPtr<__IOHIDDevice *>::get();
                __os_log_helper_16_2_1_8_64((uint64_t)v79, [v20 localizedDescription]);
                _os_log_error_impl(&dword_1985F2000, v25, v24, "Request cancelled after error: %@.", v79, 0xCu);
              }
            }
          }
          v22[0] = v30;
          WTF::String::String((WTF::String *)&v23, v29);
          WebCore::ExceptionData::operator=((uint64_t)v58, (uint64_t)v22);
          WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v22);
        }
      }
    }
  }
  if ([v57 isEqualToString:@"platform"]) {
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v66, (uint64_t)&v60, 0, (uint64_t)v58);
  }
  else {
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v66, (uint64_t)&v60, 1, (uint64_t)v58);
  }
  WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v58);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&v60, v21);
}

uint64_t WebKit::toAuthenticatorTransports(unsigned int *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  os_log_type_t v19 = a1;
  id v18 = a2;
  char v17 = 0;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1);
  char v21 = a1;
  id v20 = (WTF::FastMalloc *)[v18 count];
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>((uint64_t)a1, v20);
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  id v3 = v18;
  uint64_t result = [v18 countByEnumeratingWithState:&v12 objects:v29 count:16];
  unint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = *(void *)v13;
    do
    {
      unint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        id v16 = 0;
        id v16 = *(id *)(*((void *)&v12 + 1) + 8 * v7);
        if (WTF::isValidEnum<WebCore::AuthenticatorTransport,void>([v16 intValue]))
        {
          char v11 = [v16 intValue];
          uint64_t v23 = a1;
          id v22 = &v11;
          os_log_t v25 = a1;
          os_log_type_t v24 = &v11;
          char v27 = a1;
          id v26 = &v11;
          uint64_t v8 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
          if (v8 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
          {
            WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AuthenticatorTransport&>(a1, (unint64_t)v26);
          }
          else
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
            uint64_t v9 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
            uint64_t v10 = (unsigned char *)operator new(1, 0, v9);
            unsigned char *v10 = *v26;
            ++a1[3];
          }
          char v28 = 1;
        }
        ++v7;
      }
      while (v7 < v5);
      uint64_t result = [v3 countByEnumeratingWithState:&v12 objects:v29 count:16];
      unint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

WTF::ASCIILiteral *WebKit::toExtensionOutputs(WebKit *this, NSData *a2)
{
  unint64_t v5 = this;
  char v4 = a2;
  if (!a2) {
    return (WTF::ASCIILiteral *)std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100](this);
  }
  WTF::makeVector((WTF *)v3, v4);
  WebCore::AuthenticationExtensionsClientOutputs::fromCBOR();
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v3);
}

void std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::operator=[abi:sn180100](a1, a2);
}

double __os_log_helper_16_2_1_8_64(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 138412290;
  *(_DWORD *)a1 = 138412290;
  *(void *)(a1 + 4) = a2;
  return result;
}

uint64_t WTF::makeVector(WTF *this, NSData *a2)
{
  id v3 = (char *)WTF::span((WTF *)a2, a2);
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)this, v3, v4);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(uint64_t a1, char *a2, WTF *a3)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a1, a2, a3);
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>>(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned char *)(a1 + 80) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientOutputs::operator=((_DWORD *)a1, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 80))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::reset[abi:sn180100]((unsigned char *)a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>(a1, v5);
  }
}

void WebCore::AuthenticationExtensionsClientOutputs::operator=(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *)(a1 + 2), (uint64_t)(a2 + 2));
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(a1, a2);
  *(unsigned char *)(a1 + 80) = 1;
  return result;
}

void std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](a1, a2);
}

void std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>>(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 24) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 24))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::operator=((uint64_t)a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 24))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>((uint64_t)a1, v5);
  }
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>>(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned char *)(a1 + 32) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::operator=((_WORD *)a1, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::reset[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>(a1, v5);
  }
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(a1, a2);
}

void sub_199235294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~Function(v11);
  _Unwind_Resume(a1);
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&,void,objc_object  {objcproto21ASCCredentialProtocol}*,NSError *>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6[7] = (uint64_t)a1;
  void v6[6] = a4;
  v6[5] = a3;
  v6[4] = (uint64_t)a2;
  v6[3] = a4;
  uint64_t v6[2] = a3;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::$_1(v6, a2);
  WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(a1, v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(v6);
}

void sub_199235358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(atomic_uint **a1, uint64_t a2, uint64_t a3)
{
  v9[3] = a1;
  _OWORD v9[2] = a2;
  v9[1] = a3;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v5, a1);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(&v6, (uint64_t)(a1 + 1));
  WTF::retainPtr<ASAuthorization *>(&v7);
  WTF::retainPtr<ASAuthorization *>(&v8);
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(v9, (uint64_t *)&v5);
  WTF::callOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)v9);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError((uint64_t *)&v5);
}

void sub_199235420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(void *a1, uint64_t *a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  CFTypeRef v8 = (char *)malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  *(void *)CFTypeRef v8 = MEMORY[0x1E4F14398];
  int v7 = 1;
  *((_DWORD *)v8 + 2) = 50331650;
  *((_DWORD *)v8 + 3) = 0;
  uint64_t v4 = (uint64_t *(**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v6);
  _WORD *v4 = WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke;
  *((void *)v8 + 3) = &WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::descriptor;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::$_1((uint64_t *)v8 + 4, a2);
  uint64_t result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v8;
  return result;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::$_1(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  return WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  return WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::operator()((uint64_t)&v4, a1, a2, a3);
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()((atomic_uint **)(a2 + 32), a3, a4);
}

void sub_1992356EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

void *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>,NSError>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>,NSError>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_199235800(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA0C8;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(a1 + 1, a2);
  return a1;
}

void sub_1992358C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 2, a2 + 2);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 3, a2 + 3);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA0C8;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
}

void sub_199235A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::operator()(uint64_t a1)
{
  v5[1] = (CFTypeRef)a1;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(v5);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v4);
  WebKit::continueAfterRequest((uint64_t)v5, (uint64_t)&v4, (WTF::RefCountedBase *)(a1 + 8));
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v4);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)v5);
  if (WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL((void *)a1))
  {
    uint64_t v2 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->((uint64_t *)a1);
    if (WTF::RetainPtr<WKWebView>::operator BOOL((void *)(v2 + 64)))
    {
      uint64_t v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->((uint64_t *)a1);
      WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v3 + 64));
    }
  }
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(void *a1, uint64_t a2)
{
  return WTF::makeBlockPtr<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1},WTF::CompletionHandler<void ()(BOOL)> &&,void,BOOL>(a1, a2, (uint64_t)WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator(), 0);
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1},WTF::CompletionHandler<void ()(BOOL)> &&,void,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v6[6] = a1;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = a2;
  uint64_t v6[2] = a4;
  v6[1] = a3;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(v6, a2);
  WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(a1, (uint64_t)v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)v6);
}

void sub_199235C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
}

WTF::ThreadLikeAssertion *WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(uint64_t a1, char a2)
{
  uint64_t v7 = a1;
  char v6 = a2 & 1;
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v3, a1);
  char v4 = v6 & 1;
  WTF::Function<void ()(void)>::Function<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(&v5, (uint64_t)&v3);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v5);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v3);
}

void sub_199235CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
}

void *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(void *a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  CFTypeRef v8 = (char *)malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *(void *)CFTypeRef v8 = MEMORY[0x1E4F14398];
  int v7 = 1;
  *((_DWORD *)v8 + 2) = 50331650;
  *((_DWORD *)v8 + 3) = 0;
  char v4 = (WTF::ThreadLikeAssertion *(**)(uint64_t, char))(v8 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v6);
  _WORD *v4 = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke;
  *((void *)v8 + 3) = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::descriptor;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler((void *)v8 + 4, a2);
  uint64_t result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v8;
  return result;
}

void *WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(a1, a2);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  return WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a2 + 32));
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t v4 = a1;
  v3[1] = a2;
  return WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::operator()((uint64_t)v3, a1, a2 & 1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::operator()(uint64_t a1, uint64_t a2, char a3)
{
  return WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(a2 + 32, a3 & 1);
}

void *WTF::Function<void ()(void)>::Function<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>,{lambda(BOOL)#1}>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>,{lambda(BOOL)#1}>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19923608C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA110;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_19923614C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

uint64_t WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler((void *)a1, a2);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA110;
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a1);
}

WTF::ThreadLikeAssertion *WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::~(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

void sub_1992363A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(BOOL)>::~Function(v11);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &,void,NSDictionary<NSString *,NSNumber *> *>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v6[6] = a1;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = a2;
  uint64_t v6[2] = a4;
  v6[1] = a3;
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(v6, a2);
  WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(a1, (uint64_t)v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)v6);
}

void sub_19923642C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a1;
  id v25 = a2;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v23);
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  id v3 = v25;
  unint64_t v4 = [v25 countByEnumeratingWithState:&v18 objects:v34 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v19;
    do
    {
      for (unint64_t i = 0; i < v4; ++i)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(v3);
        }
        id v22 = 0;
        id v22 = *(NSString **)(*((void *)&v18 + 1) + 8 * i);
        char v16 = objc_msgSend((id)objc_msgSend(v25, "objectForKeyedSubscript:", v22), "BOOLValue") & 1;
        WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair<NSString *&,BOOL>((WTF::String *)v17, &v22, &v16);
        char v28 = &v23;
        char v27 = v17;
        uint64_t v30 = &v23;
        id v29 = v17;
        uint64_t v32 = &v23;
        id v31 = v17;
        uint64_t v7 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)&v23);
        if (v7 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)&v23))
        {
          WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,BOOL>>((unsigned int *)&v23, (unint64_t)v31);
        }
        else
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
          WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)&v23);
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator new();
          WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair(v8, (uint64_t)v31);
          ++v24;
        }
        char v33 = 1;
        WebCore::RegistrableDomain::~RegistrableDomain(v17, v9);
      }
      unint64_t v4 = [v3 countByEnumeratingWithState:&v18 objects:v34 count:16];
    }
    while (v4);
  }
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(&v13, a1);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, &v23);
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>(&v15, (uint64_t)&v13);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v15);
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::~NSDictionary((WTF::ThreadLikeAssertion *)&v13, v10);
  return WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v11);
}

void sub_1992366D8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, int a17, int a18, _Unwind_Exception *exception_object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void *WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(void *a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = (char *)malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *(void *)uint64_t v8 = MEMORY[0x1E4F14398];
  int v7 = 1;
  *((_DWORD *)v8 + 2) = 50331650;
  *((_DWORD *)v8 + 3) = 0;
  unint64_t v4 = (uint64_t (**)(uint64_t, void *))(v8 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v6);
  _WORD *v4 = WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSNumber *> *)#1}::__invoke;
  *((void *)v8 + 3) = &WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::descriptor;
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0((void *)v8 + 4, a2);
  uint64_t result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v8;
  return result;
}

void *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(a1, a2);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  return WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a2 + 32));
}

uint64_t WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSNumber *> *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v5 = a1;
  unint64_t v4 = a2;
  return WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSNumber *> *)#1}::operator()((uint64_t)&v3, a1, a2);
}

uint64_t WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSNumber *> *)#1}::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(a2 + 32, a3);
}

WTF::String *WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair<NSString *&,BOOL>(WTF::String *a1, NSString **a2, unsigned char *a3)
{
  return a1;
}

{
  WTF::String::String(a1, *a2);
  *((unsigned char *)a1 + 8) = *a3 & 1;
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  unint64_t v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)a1);
  return a1;
}

void *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>,NSDictionary<NSString *,NSNumber *>>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::~NSDictionary(WTF::ThreadLikeAssertion *a1, void *a2)
{
  return a1;
}

{
  WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(a1);
  return a1;
}

uint64_t WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)a1, (uint64_t *)a2);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,BOOL>>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
  unint64_t v7 = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, v3 + 1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator new();
  uint64_t result = WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair(v4, v7);
  ++a1[3];
  return result;
}

void sub_199236C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(v11);
  WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)v11);
  _Unwind_Resume(a1);
}

uint64_t WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::reset[abi:sn180100]();
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>,NSDictionary<NSString *,NSNumber *>>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_199236F14(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA158;
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::NSDictionary(a1 + 1, a2);
  return a1;
}

void sub_199236FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

void *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::NSDictionary(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(a1, a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 1), (uint64_t *)(a2 + 8));
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA158;
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::~NSDictionary((WTF::ThreadLikeAssertion *)(a1 + 1), a2);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1, void *a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::FastMalloc::free(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::operator()((WTF::RefCountedBase *)(a1 + 8));
}

void sub_199237120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(v11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::operator()(WTF::RefCountedBase *a1)
{
  return WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a1, (uint64_t)a1 + 8);
}

void sub_199237250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function(v11);
  _Unwind_Resume(a1);
}

void sub_199237330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(void)>::~Function(v11);
  _Unwind_Resume(a1);
}

void sub_1992373E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(v11);
  WTF::Function<void ()(void)>::~Function((uint64_t)v11);
  _Unwind_Resume(a1);
}

uint64_t *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(uint64_t a1, const WebCore::SecurityOriginData *a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(a1, a2);
}

uint64_t *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, WebCore::BufferSource *a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(uint64_t a1, const WebCore::SecurityOriginData *a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0::operator()(a1, a2);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0::operator()(uint64_t a1, const WebCore::SecurityOriginData *a2)
{
  v4[2] = a1;
  v4[1] = (uint64_t)a2;
  WebKit::WebAuthenticatorCoordinatorProxy::requestsForRegistration((WebKit::WebAuthenticatorCoordinatorProxy *)v4, *(const WebCore::PublicKeyCredentialCreationOptions **)(a1 + 8), a2, (WebCore::SecurityOriginData *)(*(void *)(a1 + 16) + 592));
  WTF::RetainPtr<NSArray>::operator=(*(uint64_t **)a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

void sub_1992374F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
}

uint64_t *WTF::RetainPtr<NSArray>::operator=(uint64_t *a1, uint64_t *a2)
{
  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(v4, a2);
  WTF::RetainPtr<NSURLRequest>::swap(a1, v4);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
  return a1;
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, WebCore::BufferSource *a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1::operator()(a1 + 24, a2);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1::operator()(uint64_t a1, WebCore::BufferSource *a2)
{
  v4[2] = a1;
  v4[1] = (uint64_t)a2;
  WebKit::WebAuthenticatorCoordinatorProxy::requestsForAssertion(v4, *(void *)(a1 + 8), a2, (WebCore::SecurityOriginData *)(*(void *)(a1 + 16) + 592), *(void *)(a1 + 16) + 704);
  WTF::RetainPtr<NSArray>::operator=(*(uint64_t **)a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

void sub_1992375FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
}

void *WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>::Visitor(void *a1, void *a2, void *a3)
{
  return a1;
}

{
  void v6[3];
  void v7[6];

  v7[5] = a1;
  void v7[4] = a2;
  void v7[3] = a3;
  v7[0] = *a2;
  v7[1] = a2[1];
  void v7[2] = a2[2];
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0>::Visitor(a1, v7);
  v6[0] = *a3;
  v6[1] = a3[1];
  uint64_t v6[2] = a3[2];
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0>::Visitor(a1 + 3, v6);
  return a1;
}

void *WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0>::Visitor(void *result, void *a2)
{
  void *result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  return result;
}

uint64_t WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(char *a1, char *a2)
{
  unsigned char v3[2] = a1;
  v3[1] = a2;
  v3[0] = a2;
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(WebCore::AuthenticatorTransport const&)::{lambda(WebCore::AuthenticatorTransport&)#1}>((uint64_t)a1, v3);
}

uint64_t WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(WebCore::AuthenticatorTransport const&)::{lambda(WebCore::AuthenticatorTransport&)#1}>(uint64_t a1, char **a2)
{
  for (unint64_t i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    uint64_t v3 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(WebCore::AuthenticatorTransport const&)const::{lambda(WebCore::AuthenticatorTransport&)#1}::operator()<WebCore::AuthenticatorTransport const>(a2, v3))
    {
      return i;
    }
  }
  return -1;
}

BOOL WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(WebCore::AuthenticatorTransport const&)const::{lambda(WebCore::AuthenticatorTransport&)#1}::operator()<WebCore::AuthenticatorTransport const>(char **a1, char *a2)
{
  return *a2 == **a1;
}

uint64_t WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::WebAuthenticatorCoordinatorProxy>(uint64_t a1)
{
  std::__to_address[abi:sn180100]<char const>();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1, a1);
  std::__to_address[abi:sn180100]<char const>();
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(v2);
}

void sub_199237930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(void)>::~Function(v12);
  _Unwind_Resume(a1);
}

void *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>,WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>,WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_199237A44(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA180;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void sub_199237B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA180;
  WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::operator()(uint64_t *a1)
{
  uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    uint64_t v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::WebAuthenticatorCoordinatorProxy::unpauseConditionalAssertion(v3);
  }
  return result;
}

void std::exchange[abi:sn180100]<WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>,decltype(nullptr)>(void *a1, uint64_t a2)
{
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator=(a2);
}

uint64_t WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(uint64_t a1, uint64_t a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(a1, a2);
}

uint64_t *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(uint64_t a1, const void *a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0::operator()(a1, a2);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v8[2] = a1;
  v8[1] = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *(_OWORD *)(v3 + 352);
  v7[1] = *(_OWORD *)(v3 + 368);
  v7[0] = v4;
  LOWORD(v6) = *(_WORD *)(*(void *)(a1 + 8) + 696);
  WebKit::configureRegistrationRequestContext(v8, a2, v7, v6, (WebCore::SecurityOriginData *)(*(void *)(a1 + 8) + 592));
  WTF::RetainPtr<__IOHIDManager *>::operator=(*(uint64_t **)a1, v8);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v8);
}

void sub_199237F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)(v11 - 40));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::configureRegistrationRequestContext(uint64_t *a1, uint64_t a2, _OWORD *a3, uint64_t a4, WebCore::SecurityOriginData *a5)
{
  uint64_t v118 = a1;
  uint64_t v116 = a4;
  __int16 v117 = a4;
  uint64_t v115 = a2;
  uint64_t v114 = a3;
  uint64_t v113 = a5;
  uint64_t v112 = 20;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v111);
  char v110 = 0;
  std::optional<BOOL>::optional[abi:sn180100](&v109);
  memcpy(__dst, (const void *)(v115 + 128), sizeof(__dst));
  uint64_t v7 = std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100]((uint64_t)__dst);
  if (v7)
  {
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)__dst);
    v107[0] = *v8;
    v107[1] = v8[1];
    v106[0] = 0;
    if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)v107, v106))
    {
      uint64_t v112 = 4;
    }
    else
    {
      char v105 = 1;
      if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)v107, &v105))
      {
        uint64_t v112 = 16;
      }
    }
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)__dst);
    WebKit::toNSString(&v104);
    WTF::RetainPtr<__IOHIDManager *>::operator=(&v111, (uint64_t *)&v104);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v104);
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)__dst);
    char v110 = *(unsigned char *)(v9 + 4) & 1;
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)__dst);
    __int16 v109 = *(_WORD *)(v7 + 2);
  }
  isAvailable = (WebKit *)WebKit::LocalService::isAvailable((WebKit::LocalService *)v7);
  if ((isAvailable & 1) == 0) {
    v112 &= ~4uLL;
  }
  char v103 = 0;
  id v11 = WebKit::allocASCCredentialRequestContextInstance(isAvailable);
  [v11 initWithRequestTypes:v112];
  WTF::adoptCF<__IOHIDManager *>(a1);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v13 = v12;
  std::optional<WTF::String>::operator*[abi:sn180100](v115 + 16);
  [v13 setRelyingPartyIdentifier:WTF::String::operator NSString *(v14)];
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v102);
  long long v15 = *a3;
  v101[1] = a3[1];
  v101[0] = v15;
  WebKit::setGlobalFrameIDForContext((uint64_t)&v102, (uint64_t)v101);
  char v16 = WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v102);
  [WebKit::allocASCPublicKeyCredentialCreationOptionsInstance((WebKit *)v16) init];
  WTF::adoptCF<__IOHIDManager *>(&v100);
  WebCore::SecurityOriginData::securityOrigin(&v98, v113);
  WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v98);
  uint64_t v97 = 0;
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v97);
  WebCore::buildClientDataJson();
  __int16 v119 = &v97;
  uint64_t v120 = &v97;
  char v121 = &v97;
  v122[1] = &v97;
  v122[0] = 0;
  uint64_t v125 = &v97;
  uint64_t v124 = v122;
  uint64_t v123 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v97);
  if (v123) {
    WTF::StringImpl::deref(v123, v17);
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v98);
  long long v18 = (JSC::ArrayBuffer *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v99);
  uint64_t v94 = JSC::ArrayBuffer::span(v18);
  uint64_t v95 = v19;
  WTF::toNSData(&v96, v94, v19);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  long long v21 = v20;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v21 setClientDataJSON:v22];
  WTF::RetainPtr<__IOHIDDevice *>::get();
  int v24 = v23;
  std::optional<WTF::String>::operator*[abi:sn180100](v115 + 16);
  [v24 setRelyingPartyIdentifier:WTF::String::operator NSString *(v25)];
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v26 setUserName:WTF::String::operator NSString *((void *)(v115 + 32))];
  WTF::RetainPtr<__IOHIDDevice *>::get();
  char v28 = v27;
  WebCore::toNSData((WebCore *)&v93, (const WebCore::BufferSource *)(v115 + 48));
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v28 setUserIdentifier:v29];
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v93);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v30 setUserDisplayName:WTF::String::operator NSString *((void *)(v115 + 64))];
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v32 = v31;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v32 setUserVerificationPreference:v33];
  WTF::RetainPtr<__IOHIDDevice *>::get();
  if (objc_opt_respondsToSelector())
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    __int16 v92 = v109;
    __int16 v91 = v109;
    objc_msgSend(v34, "setResidentKeyPreference:", WebKit::toASCResidentKeyPreference(v109, v110 & 1));
  }
  else
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v35 setShouldRequireResidentKey:v110 & 1];
  }
  WTF::RetainPtr<__IOHIDDevice *>::get();
  id v37 = v36;
  WebKit::toNSString(&v90);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v37 setAttestationPreference:v38];
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v90);
  id v39 = objc_alloc(MEMORY[0x1E4F1CA48]);
  [v39 initWithCapacity:WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v115 + 88)];
  WTF::adoptCF<__IOHIDManager *>(&v88);
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v89, &v88);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v88);
  uint64_t v87 = (unsigned int *)(v115 + 88);
  uint64_t v86 = (long long *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(v115 + 88));
  uint64_t v85 = WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v87);
  while (v86 != (long long *)v85)
  {
    long long v84 = *v86;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    objc_msgSend(v40, "addObject:", objc_msgSend(NSNumber, "numberWithLongLong:", *((void *)&v84 + 1)));
    ++v86;
  }
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v42 = v41;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v42 setSupportedAlgorithmIdentifiers:v43];
  uint64_t v83 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v115 + 112);
  if (v83)
  {
    [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v83];
    WTF::adoptCF<__IOHIDManager *>(&v81);
    WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v82, &v81);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v81);
    uint64_t v80 = (unsigned int *)(v115 + 112);
    uint64_t v79 = (const PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(v115 + 112));
    __int16 v78 = (const PublicKeyCredentialDescriptor *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v80);
    while (v79 != v78)
    {
      WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v77, v79);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      id v45 = v44;
      WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v75, (const PublicKeyCredentialDescriptor *)v77);
      WebKit::toASCDescriptor(&v76, (uint64_t)v75);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v45 addObject:v46];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v76);
      WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v75);
      WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v77);
      uint64_t v79 = (const PublicKeyCredentialDescriptor *)((char *)v79 + 40);
    }
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t v48 = v47;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v48 setExcludedCredentials:v49];
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v82);
  }
  if (std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100](v115 + 144))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if (objc_opt_respondsToSelector())
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      id v51 = v50;
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v115 + 144);
      WebCore::AuthenticationExtensionsClientInputs::toCBOR(v72, v52);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v73, (WTF::ASCIILiteral *)v72);
      WTF::toNSData(&v74, v73[0], v73[1]);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v51 setExtensionsCBOR:v53];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v74);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v72);
    }
    else
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v55 = v54;
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v115 + 144);
      WebKit::toASCExtensions((WebKit *)&v71, v56);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v55 setExtensions:v57];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v71);
    }
  }
  if (std::optional<unsigned int>::operator BOOL[abi:sn180100](v115 + 104))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if (objc_opt_respondsToSelector())
    {
      id v58 = NSNumber;
      std::optional<unsigned int>::operator*[abi:sn180100](v115 + 104);
      uint64_t v60 = [v58 numberWithUnsignedInt:*v59];
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v61 setTimeout:v60];
    }
  }
  if ((v112 & 4) != 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    long long v63 = v62;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v63 setPlatformKeyCredentialCreationOptions:v64];
  }
  if ((v112 & 0x10) != 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    id v66 = v65;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v66 setSecurityKeyCredentialCreationOptions:v67];
  }
  char v70 = 3;
  if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)&v117, &v70))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v68 setRequestStyle:2];
  }
  char v103 = 1;
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v89);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v96);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v99);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v100);
  if ((v103 & 1) == 0) {
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1);
  }
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v111);
}

CFTypeRef *WebKit::toNSString(CFTypeRef *a1)
{
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
}

{
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
}

id WebKit::allocASCCredentialRequestContextInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCCredentialRequestContextClass[0](this));
}

uint64_t WebKit::setGlobalFrameIDForContext(uint64_t a1, uint64_t a2)
{
  v13[2] = a1;
  v13[1] = a2;
  uint64_t result = std::optional<WebCore::GlobalFrameIdentifier>::operator BOOL[abi:sn180100](a2);
  if (result)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    uint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      id v4 = WebKit::allocASGlobalFrameIdentifierInstance((WebKit *)result);
      uint64_t v5 = NSNumber;
      std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100](a2);
      uint64_t v7 = [v5 numberWithUnsignedLong:WTF::ASCIILiteral::characters(v6)];
      uint64_t v8 = NSNumber;
      std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100](a2);
      std::__to_address[abi:sn180100]<char const>();
      objc_msgSend(v4, "initWithPageID:frameID:", v7, objc_msgSend(v8, "numberWithUnsignedLong:", WTF::ASCIILiteral::characters(v9)));
      WTF::adoptCF<__IOHIDManager *>(v13);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v11 = v10;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v12 setGlobalFrameID:v11];
      return (uint64_t)WTF::RetainPtr<NSURLRequest>::~RetainPtr(v13);
    }
  }
  return result;
}

id WebKit::allocASCPublicKeyCredentialCreationOptionsInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCPublicKeyCredentialCreationOptionsClass[0](this));
}

uint64_t WebKit::toASCResidentKeyPreference(__int16 a1, char a2)
{
  __int16 v6 = a1;
  if (std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100]((uint64_t)&v6))
  {
    std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100]((uint64_t)&v6);
    if (*v3)
    {
      if (*v3 == 1) {
        return 2;
      }
      else {
        return *v3 == 2;
      }
    }
    else
    {
      return 3;
    }
  }
  else if (a2)
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

uint64_t *WebKit::toASCDescriptor(void *a1, uint64_t a2)
{
  uint64_t v19[2] = (uint64_t)a1;
  v19[1] = a2;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(v19);
  id v4 = (WebKit *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a2 + 24);
  long long v18 = v4;
  if (v4)
  {
    [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v18];
    WTF::adoptCF<__IOHIDManager *>(&v17);
    WTF::RetainPtr<NSMutableArray<NSString *>>::operator=<NSMutableArray>(v19, &v17);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v17);
    uint64_t v16 = a2 + 24;
    long long v15 = (WebKit *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(a2 + 24));
    id v4 = (WebKit *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)(a2 + 24));
    uint64_t v14 = v4;
    while (v15 != v14)
    {
      char v13 = 0;
      char v13 = *(unsigned char *)v15;
      id v12 = 0;
      switch(v13)
      {
        case 0:
          id v12 = @"usb";
          break;
        case 1:
          id v12 = @"nfc";
          break;
        case 2:
          id v12 = @"ble";
          break;
        case 3:
          id v12 = @"internal";
          break;
        case 4:
          id v12 = @"cable";
          break;
        case 5:
          id v12 = @"hybrid";
          break;
        case 6:
          id v12 = @"smart-card";
          break;
        default:
          break;
      }
      if (v12)
      {
        WTF::RetainPtr<__IOHIDDevice *>::get();
        id v4 = (WebKit *)[v5 addObject:v12];
      }
      long long v15 = (WebKit *)((char *)v15 + 1);
    }
  }
  id v6 = WebKit::allocASCPublicKeyCredentialDescriptorInstance(v4);
  WebCore::toNSData((WebCore *)&v11, (const WebCore::BufferSource *)(a2 + 8));
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v8 = v7;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v6 initWithCredentialID:v8 transports:v9];
  WTF::adoptCF<__IOHIDManager *>(a1);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v11);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v19);
}

void sub_199239180(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18)
{
  a18 = a1;
  a17 = a2;
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&a10);
  JUMPOUT(0x199239190);
}

CFTypeRef *WebKit::toASCExtensions(WebKit *this, const WebCore::AuthenticationExtensionsClientInputs *a2)
{
  WebKit::allocASCWebAuthenticationExtensionsClientInputsInstance(this);
  uint64_t v3 = objc_opt_respondsToSelector();
  if ((v3 & 1) == 0) {
    return WTF::RetainPtr<ASAuthorizationController>::RetainPtr((CFTypeRef *)this);
  }
  id v4 = WebKit::allocASCWebAuthenticationExtensionsClientInputsInstance((WebKit *)v3);
  [v4 initWithAppID:WTF::String::operator NSString *(a2)];
  return (CFTypeRef *)WTF::adoptCF<__IOHIDManager *>(this);
}

void std::optional<unsigned int>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<unsigned int,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

id WebKit::allocASGlobalFrameIdentifierInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASGlobalFrameIdentifierClass[0](this));
}

uint64_t *WTF::RetainPtr<NSMutableArray<NSString *>>::operator=<NSMutableArray>(uint64_t *a1, uint64_t *a2)
{
  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(v4, a2);
  WTF::RetainPtr<NSURLRequest>::swap(a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

id WebKit::allocASCPublicKeyCredentialDescriptorInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCPublicKeyCredentialDescriptorClass[0](this));
}

id WebKit::allocASCWebAuthenticationExtensionsClientInputsInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCWebAuthenticationExtensionsClientInputsClass[0](this));
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(uint64_t a1, const void *a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_1::operator()((uint64_t **)(a1 + 16), a2);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_1::operator()(uint64_t **a1, const void *a2)
{
  _OWORD v9[2] = a1;
  v9[1] = a2;
  __int16 v8 = *((_WORD *)a1[1] + 348);
  uint64_t v3 = a1[1];
  long long v4 = *((_OWORD *)v3 + 22);
  v7[1] = *((_OWORD *)v3 + 23);
  v7[0] = v4;
  LOWORD(v6) = v8;
  WebKit::configurationAssertionRequestContext(v9, (uint64_t)a2, v6, v7, (uint64_t)(a1[1] + 88), (WebCore::SecurityOriginData *)(a1[1] + 74));
  WTF::RetainPtr<__IOHIDManager *>::operator=(*a1, (uint64_t *)v9);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)v9);
}

void sub_19923940C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)(v12 - 40));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::configurationAssertionRequestContext(CFTypeRef *a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, WebCore::SecurityOriginData *a6)
{
  uint64_t v60 = a1;
  uint64_t v58 = a3;
  __int16 v59 = a3;
  uint64_t v57 = a2;
  id v56 = a4;
  uint64_t v55 = a5;
  uint64_t v54 = a6;
  uint64_t v53 = 40;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v52);
  v51[0] = *(unsigned char *)(v57 + 208);
  v51[1] = *(unsigned char *)(v57 + 209);
  char v50 = 0;
  if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)v51, &v50))
  {
    uint64_t v53 = 8;
  }
  else
  {
    char v49 = 1;
    if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)v51, &v49)) {
      uint64_t v53 = 32;
    }
  }
  WebKit::toNSString(&v48);
  WTF::RetainPtr<__IOHIDManager *>::operator=(&v52, (uint64_t *)&v48);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v48);
  uint64_t v47 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v57 + 32);
  __int16 v8 = (WebKit *)WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v46);
  if (v47)
  {
    id v9 = objc_alloc(MEMORY[0x1E4F1CA48]);
    [v9 initWithCapacity:v47];
    WTF::adoptCF<__IOHIDManager *>(&v45);
    WTF::RetainPtr<NSMutableArray<NSString *>>::operator=<NSMutableArray>(&v46, &v45);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v45);
    id v44 = (unsigned int *)(v57 + 32);
    uint64_t v43 = (const PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(v57 + 32));
    __int16 v8 = (WebKit *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v44);
    uint64_t v42 = (const PublicKeyCredentialDescriptor *)v8;
    while (v43 != v42)
    {
      WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v41, v43);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      uint64_t v11 = v10;
      WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v39, (const PublicKeyCredentialDescriptor *)v41);
      WebKit::toASCDescriptor(&v40, (uint64_t)v39);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v11 addObject:v12];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v40);
      WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v39);
      WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v41);
      uint64_t v43 = (const PublicKeyCredentialDescriptor *)((char *)v43 + 40);
    }
  }
  id v13 = WebKit::allocASCCredentialRequestContextInstance(v8);
  [v13 initWithRequestTypes:v53];
  WTF::adoptCF<__IOHIDManager *>(&v38);
  WTF::RetainPtr<__IOHIDDevice *>::get();
  [v14 setRelyingPartyIdentifier:WTF::String::operator NSString *((void *)(v57 + 24))];
  char v37 = 3;
  if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)&v59, &v37))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
      int v36 = 1;
      goto LABEL_24;
    }
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v15 setRequestStyle:1];
  }
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v35);
  long long v16 = *a4;
  v34[1] = a4[1];
  v34[0] = v16;
  WebKit::setGlobalFrameIDForContext((uint64_t)&v35, (uint64_t)v34);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v35);
  if ((v53 & 8) == 0) {
    goto LABEL_27;
  }
  uint64_t v17 = v57;
  uint64_t v18 = v55;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v32);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v31);
  WebKit::configureAssertionOptions(&v33, v17, 1, v18, (uint64_t)&v32, (uint64_t)&v31, v54);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v31);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v32);
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v33))
  {
    WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
    int v36 = 1;
  }
  else
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    long long v20 = v19;
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v20 setPlatformKeyCredentialAssertionOptions:v21];
    int v36 = 0;
  }
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v33);
  if (!v36)
  {
LABEL_27:
    if ((v53 & 0x20) == 0) {
      goto LABEL_23;
    }
    uint64_t v22 = v57;
    uint64_t v23 = v55;
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v29);
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v28);
    WebKit::configureAssertionOptions(&v30, v22, 2, v23, (uint64_t)&v29, (uint64_t)&v28, v54);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v28);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v29);
    if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v30))
    {
      WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
      int v36 = 1;
    }
    else
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      id v25 = v24;
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v25 setSecurityKeyCredentialAssertionOptions:v26];
      int v36 = 0;
    }
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v30);
    if (!v36)
    {
LABEL_23:
      WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1, &v38);
      int v36 = 1;
    }
  }
LABEL_24:
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v38);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v46);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v52);
}

WTF::StringImpl *WebKit::configureAssertionOptions(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WebCore::SecurityOriginData *a7)
{
  long long v62 = a1;
  uint64_t v61 = a2;
  uint64_t v60 = a3;
  uint64_t v59 = a4;
  uint64_t v58 = a5;
  uint64_t v57 = a6;
  id v56 = a7;
  BOOL v55 = (std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](a4) & 1) == 0;
  uint64_t v8 = std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](v59);
  if (v8)
  {
    std::optional<WebCore::SecurityOriginData>::operator->[abi:sn180100](v59);
    WebCore::SecurityOriginData::toString(&v54, v9);
  }
  else
  {
    WTF::isIntegralOrPointerType((WTF *)v8);
    WTF::String::String((WTF::String *)&v54, MEMORY[0x1E4F30978]);
  }
  WebCore::SecurityOriginData::securityOrigin(&v52, v56);
  WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v52);
  WebCore::buildClientDataJson();
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v52);
  uint64_t v10 = (JSC::ArrayBuffer *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v53);
  uint64_t v49 = JSC::ArrayBuffer::span(v10);
  uint64_t v50 = v11;
  uint64_t v12 = (WebKit *)WTF::toNSData(&v51, v49, v11);
  id v13 = WebKit::allocASCPublicKeyCredentialAssertionOptionsInstance(v12);
  uint64_t v14 = v60;
  id v15 = WTF::String::operator NSString *((void *)(v61 + 24));
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v17 = v16;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v19 = v18;
  WTF::RetainPtr<__IOHIDDevice *>::get();
  uint64_t v21 = v20;
  WebCore::SecurityOriginData::toString(&v47, v56);
  [v13 initWithKind:v14 relyingPartyIdentifier:v15 clientDataJSON:v17 userVerificationPreference:v19 allowedCredentials:v21 origin:WTF::String::operator NSString *(&v47)];
  WTF::adoptCF<__IOHIDManager *>(&v48);
  uint64_t v64 = &v47;
  long long v65 = &v47;
  id v68 = &v47;
  v69[1] = &v47;
  v69[0] = 0;
  uint64_t v76 = &v47;
  uint64_t v75 = v69;
  uint64_t v72 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v47);
  if (v72) {
    WTF::StringImpl::deref(v72, v22);
  }
  if (std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100](v61 + 56))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if (objc_opt_respondsToSelector())
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      int v24 = v23;
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v61 + 56);
      WebCore::AuthenticationExtensionsClientInputs::toCBOR(v44, v25);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v45, (WTF::ASCIILiteral *)v44);
      WTF::toNSData(&v46, v45[0], v45[1]);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v24 setExtensionsCBOR:v26];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v46);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v44);
    }
    else
    {
      WTF::RetainPtr<__IOHIDDevice *>::get();
      CFTypeRef v28 = v27;
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v61 + 56);
      WebKit::toASCExtensions((WebKit *)&v43, v29);
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v28 setExtensions:v30];
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v43);
    }
  }
  if ((std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](v59) & 1) != 0
    && (WTF::RetainPtr<__IOHIDDevice *>::get(), (objc_opt_respondsToSelector() & 1) != 0))
  {
    std::optional<WebCore::SecurityOriginData>::operator->[abi:sn180100](v59);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v42, v31);
    std::__to_address[abi:sn180100]<char const>();
    CFTypeRef v33 = WTF::String::operator NSString *(v32);
    WTF::RetainPtr<__IOHIDDevice *>::get();
    [v34 setDestinationSiteForCrossSiteAssertion:v33];
    WebCore::RegistrableDomain::~RegistrableDomain(&v42, v35);
  }
  else if (std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](v59))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      WTF::RetainPtr<ASAuthorizationController>::RetainPtr(a1);
      goto LABEL_20;
    }
  }
  if (std::optional<unsigned int>::operator BOOL[abi:sn180100](v61 + 16))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get();
    if (objc_opt_respondsToSelector())
    {
      int v36 = NSNumber;
      std::optional<unsigned int>::operator*[abi:sn180100](v61 + 16);
      uint64_t v38 = [v36 numberWithUnsignedInt:*v37];
      WTF::RetainPtr<__IOHIDDevice *>::get();
      [v39 setTimeout:v38];
    }
  }
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1, &v48);
LABEL_20:
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v48);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v51);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v53);
  long long v63 = &v54;
  id v66 = &v54;
  uint64_t v67 = &v54;
  v70[1] = &v54;
  v70[0] = 0;
  uint64_t v74 = &v54;
  uint64_t v73 = v70;
  uint64_t result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v54);
  uint64_t v71 = result;
  if (result) {
    return WTF::StringImpl::deref(v71, v41);
  }
  return result;
}

id WebKit::allocASCPublicKeyCredentialAssertionOptionsInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCPublicKeyCredentialAssertionOptionsClass[0](this));
}

void *WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>::Visitor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>::Visitor(a1, a2, a3, a4, a5);
}

{
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0>::Visitor(a1, a2, a3);
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0>::Visitor(a1 + 2, a4, a5);
  return a1;
}

void *WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0>::Visitor(void *result, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *result = a2;
  result[1] = a3;
  return result;
}

void sub_19923A24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(v11);
  WTF::Function<void ()(BOOL)>::~Function((uint64_t)v11);
  _Unwind_Resume(a1);
}

void sub_19923A2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(BOOL)>::~Function(v12);
  _Unwind_Resume(a1);
}

void *WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>,WTF::CompletionHandler<void ()(BOOL)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,BOOL>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>,WTF::CompletionHandler<void ()(BOOL)> &&>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19923A3D8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,BOOL>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA1A8;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(a1 + 1, a2);
  return a1;
}

void sub_19923A498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

void *WTF::Detail::CallableWrapperBase<void,BOOL>::CallableWrapperBase(void *result)
{
  WTF::StringImpl *result = &unk_1EE9FA1D0;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA1A8;
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()((WebKit *)(a1 + 8), a2 & 1);
}

void WTF::Detail::CallableWrapperBase<void,BOOL>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(WebKit *a1, char a2)
{
  if (a2) {
    [(id)WebKit::getASCWebKitSPISupportClass[0](a1) shouldUseAlternateCredentialStore];
  }
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)a1);
}

void std::exchange[abi:sn180100]<WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,decltype(nullptr)>(void *a1, uint64_t a2)
{
  WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=();
}

uint64_t WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=()
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100]();
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100]()
{
}

void sub_19923A7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(BOOL)>::~Function(v12);
  _Unwind_Resume(a1);
}

void *WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>,WTF::CompletionHandler<void ()(BOOL)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,BOOL>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>,WTF::CompletionHandler<void ()(BOOL)> &&>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x30);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19923A8FC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,BOOL>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA1F8;
  WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void sub_19923A9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

void *WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(a1, a2);
  WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)(a1 + 1), (const WebCore::SecurityOriginData *)(a2 + 8));
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA1F8;
  WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

WTF::ThreadLikeAssertion *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2 & 1);
}

void sub_19923AB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler(v11);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(uint64_t *a1, char a2)
{
  id v9 = a1;
  char v8 = a2;
  if ((a2 & 1) == 0) {
    return (WTF::ThreadLikeAssertion *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a1);
  }
  long long v4 = (WebKit::LocalService *)[(id)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)a1) shouldUseAlternateCredentialStore];
  if (v4)
  {
    WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v6, (uint64_t)a1);
    WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v5);
    WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(&v7, (uint64_t)&v6);
    WebKit::getArePasskeysDisallowedForRelyingParty((WebCore::SecurityOriginData *)(a1 + 1), &v7);
    WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v7);
    WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v5);
    return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v6);
  }
  else
  {
    WebKit::LocalService::isAvailable(v4);
    return (WTF::ThreadLikeAssertion *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a1);
  }
}

uint64_t *WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData *a1, uint64_t *a2)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  WebKit::getASCWebKitSPISupportClass[0](a1);
  uint64_t v2 = objc_opt_respondsToSelector();
  if ((v2 & 1) == 0) {
    return (uint64_t *)WTF::CompletionHandler<void ()(BOOL)>::operator()(v11);
  }
  uint64_t v3 = (void *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v2);
  WebCore::SecurityOriginData::securityOrigin(&v10, v12);
  long long v4 = (WebCore::SecurityOrigin *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v10);
  char v5 = (void *)WebCore::SecurityOrigin::domain(v4);
  uint64_t v6 = WTF::String::operator NSString *(v5);
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v8, (uint64_t)v11);
  WTF::makeBlockPtr<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(&v9, (uint64_t)&v8);
  [v3 getArePasskeysDisallowedForRelyingParty:v6 withCompletionHandler:std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v9)];
  WTF::BlockPtr<void ()(void)>::~BlockPtr(&v9);
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v8);
  return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v10);
}

void *WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(void *a1, uint64_t a2)
{
  return WTF::makeBlockPtr<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1},WTF::CompletionHandler<void ()(BOOL)> &&,void,BOOL>(a1, a2, (uint64_t)WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator(), 0);
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1},WTF::CompletionHandler<void ()(BOOL)> &&,void,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v6[6] = a1;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = a2;
  uint64_t v6[2] = a4;
  v6[1] = a3;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(v6, a2);
  WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(a1, (uint64_t)v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)v6);
}

void sub_19923AEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
}

WTF::ThreadLikeAssertion *WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(uint64_t a1, char a2)
{
  uint64_t v7 = a1;
  char v6 = a2 & 1;
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v3, a1);
  char v4 = v6 & 1;
  WTF::Function<void ()(void)>::Function<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(&v5, (uint64_t)&v3);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v5);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v3);
}

void sub_19923AF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
}

void *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(void *a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = (char *)malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *(void *)uint64_t v8 = MEMORY[0x1E4F14398];
  int v7 = 1;
  *((_DWORD *)v8 + 2) = 50331650;
  *((_DWORD *)v8 + 3) = 0;
  char v4 = (WTF::ThreadLikeAssertion *(**)(uint64_t, char))(v8 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v6);
  WebCore::SecurityOrigin *v4 = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke;
  *((void *)v8 + 3) = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::descriptor;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler((void *)v8 + 4, a2);
  uint64_t result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v8;
  return result;
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  return WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t v4 = a1;
  v3[1] = a2;
  return WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::operator()((uint64_t)v3, a1, a2 & 1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::operator()(uint64_t a1, uint64_t a2, char a3)
{
  return WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(a2 + 32, a3 & 1);
}

void *WTF::Function<void ()(void)>::Function<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>,{lambda(BOOL)#1}>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>,{lambda(BOOL)#1}>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19923B238(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA240;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_19923B2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

void *WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA240;
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

void sub_19923B464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(BOOL)>::~Function(v12);
  _Unwind_Resume(a1);
}

void *WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>,$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,BOOL>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>,$_0>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19923B578(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,BOOL>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA268;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(a1 + 1, a2);
  return a1;
}

void sub_19923B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA268;
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1}::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1}::operator()(uint64_t *a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a1);
}

void sub_19923B7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(void)>::~Function(v12);
  _Unwind_Resume(a1);
}

void *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>,WTF::CompletionHandler<void ()(void)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>,WTF::CompletionHandler<void ()(void)> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19923B8FC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9FA290;
  WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void sub_19923B9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(void)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9FA290;
  WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

void sub_19923BB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t *a1)
{
  v8[1] = a1;
  if (WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(a1))
  {
    uint64_t v2 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v2 + 40));
    uint64_t v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v3 + 32));
    uint64_t v7 = 0;
    WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v6);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler<decltype(nullptr),void>(v8);
    uint64_t v4 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator=(v4 + 24);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)v8);
    WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v6);
  }
  return WTF::CompletionHandler<void ()(void)>::operator()(a1 + 1);
}

void *WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler<decltype(nullptr),void>(void *a1)
{
  return a1;
}

{
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::Function(a1);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void sub_19923BCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~Function(v12);
  _Unwind_Resume(a1);
}

void *WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::Function(void *a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1);
  return a1;
}

void WebKit::WebAuthenticatorCoordinatorProxy::didReceiveMessage(WebKit::WebAuthenticatorCoordinatorProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(*((void *)this + 2) + 256) + 1114)) {
    return;
  }
  switch(*((_WORD *)a3 + 25))
  {
    case 0x613:
      uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v7)
      {
        *(void *)&long long v62 = v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v62 + 1, a2);
        uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v8 = &unk_1EE9FA3A0;
        v8[1] = v62;
        uint64_t v9 = *((void *)&v62 + 1);
        *((void *)&v62 + 1) = 0;
        void v8[2] = v9;
        uint64_t v96 = v8;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v62 + 1);
        WebKit::WebAuthenticatorCoordinatorProxy::cancel(this, (uint64_t *)&v96);
        uint64_t v10 = (uint64_t)v96;
        uint64_t v96 = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
      return;
    case 0x614:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, (uint64_t)&v59);
      if (!v60)
      {
        LOBYTE(v62) = 0;
        char v83 = 0;
LABEL_53:
        uint64_t v32 = *(void *)a3;
        uint64_t v33 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v34 = *((void *)a3 + 3);
        if (!v34) {
          return;
        }
        if (!v33) {
          return;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
        if (!v83) {
          return;
        }
        goto LABEL_72;
      }
      IPC::Decoder::decode<WebKit::FrameInfoData>(a3, (uint64_t)&v96);
      if (v100)
      {
        IPC::ArgumentCoder<WebCore::PublicKeyCredentialRequestOptions,void>::decode((uint64_t *)a3, (uint64_t)&v86);
        if (!v94)
        {
          uint64_t v11 = *(WTF::StringImpl **)a3;
          uint64_t v38 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v39 = *((void *)a3 + 3);
          if (!v39) {
            goto LABEL_63;
          }
          if (!v38) {
            goto LABEL_63;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v11);
          if (!v94) {
            goto LABEL_63;
          }
        }
        unsigned __int16 v12 = IPC::Decoder::decode<WebCore::VideoCodecType>(a3);
        if (v12 > 0xFFu
          && (char v13 = v12,
              IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v101),
              v105))
        {
          if (!v60 || !v100 || !v94) {
            goto LABEL_112;
          }
          long long v62 = v59;
          std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v63, (uint64_t)&v96);
          v70[0] = 0;
          int v71 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v70, (uint64_t)&v86);
          uint64_t v72 = v88;
          long long v14 = v89;
          long long v89 = 0uLL;
          *(_OWORD *)uint64_t v73 = v14;
          *(void *)&long long v14 = v90;
          uint64_t v90 = 0;
          uint64_t v74 = v14;
          char v75 = v91;
          v76[0] = 0;
          char v77 = 0;
          if (v92[144])
          {
            std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>((uint64_t)v76, (uint64_t)v92);
            char v77 = 1;
          }
          __int16 v78 = v93;
          char v79 = v13;
          v80[0] = 0;
          char v82 = 0;
          if (v104)
          {
            int v81 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v80, (uint64_t)&v101);
            char v82 = 1;
            char v83 = 1;
            if (v105 && v104 && v103 != -1) {
              ((void (*)(char *, long long *))off_1EE9FA2A8[v103])(&v61, &v101);
            }
          }
          else
          {
            char v83 = 1;
          }
        }
        else
        {
LABEL_63:
          LOBYTE(v62) = 0;
          char v83 = 0;
        }
        if (v94)
        {
          std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v92);
          WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)((char *)&v89 + 8));
          uint64_t v40 = (WTF::StringImpl *)v89;
          *(void *)&long long v89 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v11);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
          if (v87 != -1) {
            ((void (*)(long long *, void **))off_1EE9FA2B8[v87])(&v101, &v86);
          }
        }
      }
      else
      {
        LOBYTE(v62) = 0;
        char v83 = 0;
      }
      std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v96, v11);
      if (!v83) {
        goto LABEL_53;
      }
LABEL_72:
      uint64_t v41 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v42)
      {
        uint64_t v96 = (void *)v41;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
        uint64_t v43 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v43 = &unk_1EE9FA300;
        v43[1] = v96;
        id v44 = v97[0];
        v97[0] = 0;
        uint64_t v43[2] = v44;
        uint64_t v86 = v43;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
        if (v83)
        {
          long long v45 = v62;
          char v46 = v79;
          LOBYTE(v96) = 0;
          char v99 = 0;
          if (v82)
          {
            int v98 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)v80);
            char v99 = 1;
          }
          WebKit::WebAuthenticatorCoordinatorProxy::getAssertion((uint64_t)this, v45, *((uint64_t *)&v45 + 1), &v63, (uint64_t)v70, v46, (uint64_t)&v96, (uint64_t *)&v86);
          if (v99 && v98 != -1) {
            ((void (*)(long long *, void **))off_1EE9FA2A8[v98])(&v101, &v96);
          }
          uint64_t v47 = (uint64_t)v86;
          uint64_t v86 = 0;
          if (v47) {
            (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
          }
          goto LABEL_81;
        }
LABEL_112:
        __break(1u);
      }
LABEL_81:
      if (!v83) {
        return;
      }
      if (v82)
      {
        if (v81 != -1) {
          ((void (*)(void **, unsigned char *))off_1EE9FA2A8[v81])(&v96, v80);
        }
        int v81 = -1;
      }
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v76);
      WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v73[1]);
      uint64_t v49 = v73[0];
      v73[0] = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2) {
          WTF::StringImpl::destroy(v49, v48);
        }
        else {
          *(_DWORD *)v49 -= 2;
        }
      }
      if (v71 != -1) {
        ((void (*)(void **, char *))off_1EE9FA2B8[v71])(&v96, v70);
      }
      int v71 = -1;
LABEL_102:
      uint64_t v57 = v69;
      BOOL v69 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2) {
          WTF::StringImpl::destroy(v57, v48);
        }
        else {
          *(_DWORD *)v57 -= 2;
        }
      }
      if (v68 != -1) {
        ((void (*)(void **, uint64_t *))off_1EE9FA2A8[v68])(&v96, &v67);
      }
      int v68 = -1;
      CFTypeRef v58 = cf;
      CFTypeRef cf = 0;
      if (v58) {
        CFRelease(v58);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v64);
      return;
    case 0x615:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v62);
      if (!v65) {
        return;
      }
      uint64_t v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v16) {
        goto LABEL_38;
      }
      uint64_t v96 = (void *)v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v17 = &unk_1EE9FA378;
      v17[1] = v96;
      uint64_t v18 = v97[0];
      v97[0] = 0;
      v17[2] = v18;
      uint64_t v86 = v17;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
      if (!v65) {
        goto LABEL_112;
      }
      WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(this, (WebCore::SecurityOriginData *)&v62, (WTF::RefCountedBase *)&v86);
      uint64_t v19 = (uint64_t)v86;
      uint64_t v86 = 0;
      if (v19) {
        goto LABEL_37;
      }
      goto LABEL_38;
    case 0x616:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v62);
      if (!v65) {
        return;
      }
      uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v21) {
        goto LABEL_38;
      }
      uint64_t v96 = (void *)v20;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
      uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v22 = &unk_1EE9FA350;
      v22[1] = v96;
      uint64_t v23 = v97[0];
      v97[0] = 0;
      uint64_t v22[2] = v23;
      uint64_t v86 = v22;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
      if (!v65) {
        goto LABEL_112;
      }
      WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable((uint64_t)this, (WebCore::SecurityOriginData *)&v62, (uint64_t)&v86);
      goto LABEL_36;
    case 0x617:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, (uint64_t)&v101);
      if (v102)
      {
        IPC::Decoder::decode<WebKit::FrameInfoData>(a3, (uint64_t)&v86);
        if (v95
          && ((IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions,void>::decode(a3, &v96), v100)
           || (int v24 = *(WTF::StringImpl **)a3,
               uint64_t v50 = *((void *)a3 + 1),
               *(void *)a3 = 0,
               *((void *)a3 + 1) = 0,
               (uint64_t v51 = *((void *)a3 + 3)) != 0)
           && v50
           && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v51 + 16))(v51, v24), v100)))
        {
          unsigned __int16 v25 = IPC::Decoder::decode<WebCore::VideoCodecType>(a3);
          if (v25 > 0xFFu)
          {
            if (!v102 || !v95 || !v100) {
              goto LABEL_112;
            }
            char v31 = v25;
            long long v62 = v101;
            std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v63, (uint64_t)&v86);
            WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((uint64_t)v70, (uint64_t)&v96);
            char v84 = v31;
            char v26 = 1;
          }
          else
          {
            char v26 = 0;
            LOBYTE(v62) = 0;
          }
          char v85 = v26;
          if (v100) {
            WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&v96);
          }
        }
        else
        {
          LOBYTE(v62) = 0;
          char v85 = 0;
        }
        std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v24);
        if (v85)
        {
LABEL_96:
          uint64_t v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (v53)
          {
            uint64_t v96 = (void *)v52;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
            uint64_t v54 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v54 = &unk_1EE9FA2D8;
            v54[1] = v96;
            BOOL v55 = v97[0];
            v97[0] = 0;
            v54[2] = v55;
            uint64_t v86 = v54;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
            if (!v85) {
              goto LABEL_112;
            }
            WebKit::WebAuthenticatorCoordinatorProxy::makeCredential((uint64_t)this, v62, *((uint64_t *)&v62 + 1), &v63, (uint64_t)v70, v84, (uint64_t *)&v86);
            uint64_t v56 = (uint64_t)v86;
            uint64_t v86 = 0;
            if (v56) {
              (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
            }
          }
          if (!v85) {
            return;
          }
          WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)v70);
          goto LABEL_102;
        }
      }
      else
      {
        LOBYTE(v62) = 0;
        char v85 = 0;
      }
      uint64_t v35 = *(void *)a3;
      uint64_t v36 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v37 = *((void *)a3 + 3);
      if (!v37) {
        return;
      }
      if (!v36) {
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
      if (!v85) {
        return;
      }
      goto LABEL_96;
    case 0x618:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v62);
      if (!v65) {
        return;
      }
      uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v28) {
        goto LABEL_38;
      }
      uint64_t v96 = (void *)v27;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
      CFTypeRef v29 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v29 = &unk_1EE9FA328;
      v29[1] = v96;
      uint64_t v30 = v97[0];
      v97[0] = 0;
      float v29[2] = v30;
      uint64_t v86 = v29;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
      if (!v65) {
        goto LABEL_112;
      }
      WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable((uint64_t)this, (WebCore::SecurityOriginData *)&v62, (uint64_t)&v86);
LABEL_36:
      uint64_t v19 = (uint64_t)v86;
      uint64_t v86 = 0;
      if (v19) {
LABEL_37:
      }
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
LABEL_38:
      if (v65 && v64 != -1) {
        ((void (*)(void **, long long *))off_1EE9FA2A8[v64])(&v96, &v62);
      }
      return;
    default:
      return;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy14MakeCredentialEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_34PublicKeyCredentialCreationOptionsENS9_20MediationRequirementEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_SU_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FA2D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy14MakeCredentialEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_34PublicKeyCredentialCreationOptionsENS9_20MediationRequirementEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_SU_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FA2D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy14MakeCredentialEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_34PublicKeyCredentialCreationOptionsENS9_20MediationRequirementEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SR_SU_EE4callESQ_SR_SU_(uint64_t a1, WebCore::AuthenticatorResponseData *a2, char a3, char *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 3213;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  long long v14 = v9;
  IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::encode(v9, a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v9, a3);
  IPC::ArgumentCoder<WebCore::Exception,void>::encode(v9, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy12GetAssertionEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_33PublicKeyCredentialRequestOptionsENS9_20MediationRequirementENSt3__18optionalINS9_18SecurityOriginDataEEEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SV_SY_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FA300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy12GetAssertionEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_33PublicKeyCredentialRequestOptionsENS9_20MediationRequirementENSt3__18optionalINS9_18SecurityOriginDataEEEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SV_SY_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FA300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy12GetAssertionEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_33PublicKeyCredentialRequestOptionsENS9_20MediationRequirementENSt3__18optionalINS9_18SecurityOriginDataEEEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SV_SY_EE4callESU_SV_SY_(uint64_t a1, WebCore::AuthenticatorResponseData *a2, char a3, char *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 3210;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  long long v14 = v9;
  IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::encode(v9, a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v9, a3);
  IPC::ArgumentCoder<WebCore::Exception,void>::encode(v9, a4);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy31isConditionalMediationAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FA328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy31isConditionalMediationAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FA328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy31isConditionalMediationAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3214;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned __int16 v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned __int16 v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy45IsUserVerifyingPlatformAuthenticatorAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FA350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy45IsUserVerifyingPlatformAuthenticatorAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FA350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy45IsUserVerifyingPlatformAuthenticatorAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3212;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned __int16 v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    *uint64_t v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unsigned __int16 v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy21GetClientCapabilitiesEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONS_6VectorINS_12KeyValuePairINS_6StringEbEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FA378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy21GetClientCapabilitiesEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONS_6VectorINS_12KeyValuePairINS_6StringEbEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FA378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy21GetClientCapabilitiesEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONS_6VectorINS_12KeyValuePairINS_6StringEbEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3211;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 16 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::ContentType,void>::encode(v5, v7);
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  char v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy6CancelEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9FA3A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy6CancelEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9FA3A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy6CancelEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3209;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void *WebKit::WebAutocorrectionData::WebAutocorrectionData(void *a1, _DWORD *a2, uint64_t a3, double a4, double a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  uint64_t v9 = (void *)MEMORY[0x1E4F42A30];
  if (*(unsigned char *)(a3 + 8))
  {
    if (*(void *)a3) {
      uint64_t v10 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v10 = &stru_1EEA10550;
    }
    uint64_t v11 = (const void *)[v9 fontWithName:v10 size:a4];
    unsigned __int16 v12 = v11;
    if (!v11) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v11 = (const void *)[MEMORY[0x1E4F42A30] systemFontOfSize:a4 weight:a5];
    unsigned __int16 v12 = v11;
    if (!v11) {
      goto LABEL_8;
    }
  }
  CFRetain(v11);
LABEL_8:
  char v13 = (const void *)a1[2];
  a1[2] = v12;
  if (v13) {
    CFRelease(v13);
  }
  return a1;
}

void sub_19923D1B0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(const void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebAutocorrectionData::WebAutocorrectionData(void *a1, uint64_t a2, const void **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)a1, a2);
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = (const void *)a1[2];
  a1[2] = v5;
  if (v6) {
    CFRelease(v6);
  }
  return a1;
}

void sub_19923D234(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(const void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebAutocorrectionData::fontName@<X0>(id *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = [this[2] isSystemFont];
  if (result)
  {
    char v5 = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t result = MEMORY[0x19972EAD0](&v6, [this[2] fontName]);
    *(void *)a2 = v6;
    char v5 = 1;
  }
  a2[8] = v5;
  return result;
}

WTF::StringImpl *WebKit::AutomationCommandError::toProtocolString(WebKit::AutomationCommandError *this, unsigned int *a2)
{
  uint64_t result = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::getEnumConstantValue(*a2, &v11);
  char v5 = v11;
  if (!*((unsigned char *)a2 + 16))
  {
    *(void *)this = v11;
    return result;
  }
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  uint64_t v10 = v5;
  uint64_t v6 = (WTF::StringImpl *)*((void *)a2 + 1);
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v9 = v6;
  WTF::makeString<WTF::String,char,WTF::String>((uint64_t *)&v10, 59, (uint64_t *)&v9, this);
  uint64_t v8 = v9;
  uint64_t v9 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (!result)
  {
LABEL_14:
    if (!v5) {
      return result;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_14;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (!v5) {
    return result;
  }
LABEL_17:
  if (*(_DWORD *)v5 == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v7);
  }
  *(_DWORD *)v5 -= 2;
  return result;
}

uint64_t WTF::makeString<WTF::String,char,WTF::String>@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a1;
  char v7 = a2;
  uint64_t v6 = *a3;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v8, &v7, &v6, a4);
  if (!*a4) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebAutomationSession::Debuggable::name@<X0>(atomic_uchar *volatile *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9FA878;
  v4[1] = this;
  v4[2] = this;
  uint64_t v4[3] = a2;
  uint64_t v6 = (uint64_t)v4;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::WebAutomationSession::Debuggable::dispatchMessageFromRemote(uint64_t a1)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  WTF::String::isolatedCopy();
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v2 = &unk_1EE9FA8A0;
  v2[1] = a1;
  v2[2] = a1;
  v2[3] = v5;
  uint64_t v6 = v2;
  WTF::callOnMainRunLoopAndWait();
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  return 0;
}

uint64_t WebKit::WebAutomationSession::Debuggable::connect(uint64_t a1, uint64_t a2, char a3, char a4)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v8 = &unk_1EE9FA8C8;
  *(void *)(v8 + 8) = a1;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(unsigned char *)(v8 + 32) = a3;
  *(unsigned char *)(v8 + 33) = a4;
  uint64_t v10 = v8;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return result;
}

uint64_t WebKit::WebAutomationSession::Debuggable::disconnect(uint64_t a1, uint64_t a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9FA8F0;
  v4[1] = a1;
  v4[2] = a1;
  uint64_t v4[3] = a2;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

WebKit::WebAutomationSession *WebKit::WebAutomationSession::WebAutomationSession(WebKit::WebAutomationSession *this)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9FA420;
  *((void *)this + 2) = &unk_1EE9FA5E0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &unk_1EE9FA618;
  *((void *)this + 5) = &unk_1EE9FA7B0;
  *((void *)this + 6) = 0;
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)8);
  void *v2 = &unk_1EE9FA7E8;
  *((void *)this + 7) = v2;
  uint64_t v3 = (Inspector::FrontendRouter *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)this + 8) = v14;
  Inspector::FrontendRouter::create(v3);
  uint64_t v4 = (WTF *)*((void *)this + 9);
  ++*(_DWORD *)v4;
  uint64_t v15 = v4;
  Inspector::BackendDispatcher::create();
  if (v15) {
    WTF::RefCounted<Inspector::FrontendRouter>::deref((uint64_t)v15, v5);
  }
  uint64_t v6 = (Inspector::BackendDispatcher *)*((void *)this + 10);
  char v7 = (Inspector::SupplementalBackendDispatcher *)WTF::fastMalloc((WTF *)0x20);
  *((void *)this + 11) = Inspector::AutomationBackendDispatcher::AutomationBackendDispatcher(v7, v6, (uint64_t)this + 32);
  uint64_t v8 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)8);
  *(void *)uint64_t v8 = *((void *)this + 9);
  *((void *)this + 12) = v8;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 1;
  *((void *)this + 24) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 1;
  uint64_t v9 = (WTF::RunLoop *)WTF::RunLoop::main(v8);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9FA918;
  v10[1] = WebKit::WebAutomationSession::loadTimerFired;
  uint64_t v10[2] = 0;
  void v10[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::WebAutomationSession *)((char *)this + 224), v9);
  *((void *)this + 28) = &unk_1EE9B3390;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 31) = v10;
  *((unsigned char *)this + 272) = 1;
  *((void *)this + 38) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *(void *)((char *)this + 293) = 0;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_1994F5F10;
  *(void *)(v12 + 24) = v11;
  *(_DWORD *)(v11 + 16) = 0;
  *(_WORD *)(v11 + 20) = 0;
  *(void *)uint64_t v11 = &unk_1EE9FA3C8;
  *(void *)(v11 + 8) = v12;
  *(void *)(v11 + 24) = this;
  *((void *)this + 39) = v11;
  return this;
}

WTF::StringImpl *WebKit::WebAutomationSession::loadTimerFired(WebKit::WebAutomationSession *this)
{
  WebKit::WebAutomationSession::respondToPendingFrameNavigationCallbacksWithTimeout((uint64_t)this, (uint64_t *)this + 19);
  WebKit::WebAutomationSession::respondToPendingFrameNavigationCallbacksWithTimeout((uint64_t)this, (uint64_t *)this + 20);
  WebKit::WebAutomationSession::respondToPendingPageNavigationCallbacksWithTimeout((uint64_t)this, (uint64_t *)this + 17);

  return WebKit::WebAutomationSession::respondToPendingPageNavigationCallbacksWithTimeout((uint64_t)this, (uint64_t *)this + 18);
}

void WebKit::WebAutomationSession::~WebAutomationSession(WebKit::WebAutomationSession *this, void *a2)
{
  *(void *)(*((void *)this + 39) + 24) = 0;
  uint64_t v3 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  uint64_t v4 = *((void *)this + 36);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = (WebKit::SimulatedInputDispatcher **)(v4 + 8);
      do
      {
        if (*(v6 - 1) != (WebKit::SimulatedInputDispatcher *)-1)
        {
          char v7 = *v6;
          *uint64_t v6 = 0;
          if (v7) {
            WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v7, a2);
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 35);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)a2);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 256, a2);
  *((void *)this + 28) = &unk_1EE9B3390;
  uint64_t v9 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebAutomationSession *)((char *)this + 224));
  uint64_t v11 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 26);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    if (v13)
    {
      long long v14 = (_DWORD **)(v12 + 8);
      do
      {
        if (*(v14 - 1) != (_DWORD *)-1)
        {
          uint64_t v15 = *v14;
          *long long v14 = 0;
          if (v15)
          {
            if (v15[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
            }
            else {
              --v15[2];
            }
          }
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), v10);
  }
  uint64_t v16 = *((void *)this + 24);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    if (v17)
    {
      uint64_t v18 = (_DWORD **)(v16 + 8);
      do
      {
        if (*(v18 - 1) != (_DWORD *)-1)
        {
          uint64_t v19 = *v18;
          atomic_uchar *volatile *v18 = 0;
          if (v19)
          {
            if (v19[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
            }
            else {
              --v19[2];
            }
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v10);
  }
  uint64_t v20 = *((void *)this + 22);
  if (v20)
  {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
    if (v21)
    {
      uint64_t v22 = (uint64_t *)(v20 + 8);
      do
      {
        if (*(v22 - 1) != -1)
        {
          uint64_t v23 = *v22;
          *uint64_t v22 = 0;
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          }
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 16), v10);
  }
  uint64_t v24 = *((void *)this + 21);
  if (v24) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v24, v10);
  }
  uint64_t v25 = *((void *)this + 20);
  if (v25) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v25, v10);
  }
  uint64_t v26 = *((void *)this + 19);
  if (v26) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v26, v10);
  }
  uint64_t v27 = *((void *)this + 18);
  if (v27) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v27, v10);
  }
  uint64_t v28 = *((void *)this + 17);
  if (v28) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v28, v10);
  }
  uint64_t v29 = *((void *)this + 16);
  if (v29)
  {
    uint64_t v30 = *(unsigned int *)(v29 - 4);
    if (v30)
    {
      char v31 = (WTF::StringImpl **)*((void *)this + 16);
      do
      {
        uint64_t v32 = *v31;
        if (*v31 != (WTF::StringImpl *)-1)
        {
          const WebCore::SecurityOriginData *v31 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
        }
        v31 += 3;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree((WTF *)(v29 - 16), v10);
  }
  uint64_t v33 = *((void *)this + 15);
  if (v33) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v33, (WTF::StringImpl *)v10);
  }
  uint64_t v34 = *((void *)this + 14);
  if (v34)
  {
    uint64_t v35 = *(unsigned int *)(v34 - 4);
    if (v35)
    {
      uint64_t v36 = (WTF::StringImpl **)*((void *)this + 14);
      do
      {
        uint64_t v37 = *v36;
        if (*v36 != (WTF::StringImpl *)-1)
        {
          *uint64_t v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2) {
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v37 -= 2;
            }
          }
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v34 - 16), v10);
  }
  uint64_t v38 = *((void *)this + 13);
  if (v38) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v38, (WTF::StringImpl *)v10);
  }
  uint64_t v39 = (WTF *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v39) {
    WTF::fastFree(v39, v10);
  }
  uint64_t v40 = (_DWORD *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v40)
  {
    if (v40[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v40 + 8))(v40);
    }
    else {
      --v40[2];
    }
  }
  uint64_t v41 = (WTF *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v41) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v41, v10);
  }
  uint64_t v42 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v42) {
    WTF::RefCounted<Inspector::FrontendRouter>::deref(v42, v10);
  }
  uint64_t v43 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v10);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  uint64_t v44 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  long long v45 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v45 && atomic_fetch_add((atomic_uint *volatile)v45, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v45);
    WTF::fastFree((WTF *)v45, v10);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v10);
}

{
  uint64_t vars8;

  WebKit::WebAutomationSession::~WebAutomationSession(this, a2);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::WebAutomationSession::~WebAutomationSession(WebKit::WebAutomationSession *this, void *a2)
{
}

{
  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 32), a2);
}

{
  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 40), a2);
}

{
  uint64_t vars8;

  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 16), a2);

  JUMPOUT(0x199740C10);
}

{
  uint64_t vars8;

  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 32), a2);

  JUMPOUT(0x199740C10);
}

{
  uint64_t vars8;

  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 40), a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebAutomationSession::setProcessPool(WebKit::WebAutomationSession *this, WebKit::WebProcessPool *a2)
{
  uint64_t v4 = *((void *)this + 6);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v5 - 8));
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v5 + 40), 0x9Fu);
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
  }
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    uint64_t v6 = *((void *)a2 + 3);
    if (v6) {
      atomic_fetch_add((atomic_uint *volatile)v6, 1u);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  char v7 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = v6;
  if (v7)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
    uint64_t v6 = *((void *)this + 6);
  }
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    if (v8)
    {
      CFRetain(*(CFTypeRef *)(v8 - 8));
      char v11 = -97;
      WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v8 + 40), &v11, (uint64_t)this + 16, &v10);
      uint64_t v9 = *(const void **)(v8 - 8);
      CFRelease(v9);
    }
  }
}

uint64_t WebKit::WebAutomationSession::terminate(WebKit::WebAutomationSession *this)
{
  uint64_t v3 = (uint64_t *)((char *)this + 176);
  uint64_t v2 = *((void *)this + 22);
  if (!v2)
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
LABEL_10:
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    goto LABEL_11;
  }
  uint64_t v4 = *(unsigned int *)(v2 - 4);
  uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    uint64_t v6 = (uint64_t *)(v2 + 16 * v4);
    goto LABEL_10;
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 22);
  if (v4)
  {
    uint64_t v7 = 16 * v4;
    uint64_t v6 = (uint64_t *)*((void *)this + 22);
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        uint64_t v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
  {
    uint64_t v8 = *(unsigned int *)(v2 - 4);
    uint64_t v9 = (uint64_t *)(v2 + 16 * v8);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  v23[0] = (uint64_t *)((char *)this + 176);
  v23[1] = v6;
  _OWORD v23[2] = v5;
  v23[3] = v9;
  v23[4] = (uint64_t *)(v2 + 16 * v8);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  WTF::Mapper<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&)::{lambda(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&&)#1},WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&,void>::map((uint64_t)&v24, v23);
  char v11 = v24;
  if (HIDWORD(v25))
  {
    uint64_t v12 = 8 * HIDWORD(v25);
    uint64_t v13 = v24;
    do
    {
      long long v14 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3, v13);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take(v3, v14, v23);
      int v19 = 5;
      LOBYTE(v20) = 0;
      char v21 = 0;
      char v22 = 1;
      WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)v23, &v19);
      if (v22) {
        BOOL v15 = v21 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15)
      {
        uint64_t v16 = v20;
        uint64_t v20 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v10);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
      }
      uint64_t v17 = v23[0];
      v23[0] = 0;
      if (v17) {
        (*(void (**)(uint64_t *))(*v17 + 8))(v17);
      }
      uint64_t v13 = (WTF *)((char *)v13 + 8);
      v12 -= 8;
    }
    while (v12);
  }
  if (v11) {
    WTF::fastFree(v11, v10);
  }
  if (*((void *)this + 38))
  {
    *((void *)this + 38) = 0;
    Inspector::FrontendRouter::disconnectFrontend();
  }
  Inspector::RemoteAutomationTarget::setIsPaired(*((Inspector::RemoteAutomationTarget **)this + 39));
  uint64_t result = *((void *)this + 7);
  if (result) {
    return (*(uint64_t (**)(uint64_t, WebKit::WebAutomationSession *))(*(void *)result + 24))(result, this);
  }
  return result;
}

uint64_t WebKit::WebAutomationSession::webPageProxyForHandle(uint64_t this, const WTF::String *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (uint64_t *)this;
  uint64_t v4 = *((void *)a2 + 14);
  if (!v4) {
    goto LABEL_18;
  }
  unsigned int v7 = *(_DWORD *)(v4 - 8);
  unsigned int v8 = *((_DWORD *)*a3 + 4);
  int v9 = v8 >= 0x100 ? v8 >> 8 : WTF::StringImpl::hashSlowCase(*a3);
  for (i = 0; ; int v9 = ++i + v11)
  {
    uint64_t v11 = v9 & v7;
    this = *(void *)(v4 + 16 * v11);
    if (this != -1)
    {
      if (!this)
      {
        uint64_t v12 = *((void *)a2 + 14);
        if (!v12) {
          goto LABEL_18;
        }
        uint64_t v13 = v12 + 16 * *(unsigned int *)(v12 - 4);
        goto LABEL_13;
      }
      this = WTF::equal((WTF *)this, *a3, (const WTF::StringImpl *)a3);
      if (this) {
        break;
      }
    }
  }
  uint64_t v13 = v4 + 16 * v11;
  uint64_t v12 = *((void *)a2 + 14);
  if (!v12) {
    goto LABEL_14;
  }
LABEL_13:
  v12 += 16 * *(unsigned int *)(v12 - 4);
LABEL_14:
  if (v12 == v13)
  {
LABEL_18:
    uint64_t *v3 = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(v13 + 8);
    return WebKit::WebProcessProxy::webPage(v14, v3);
  }
  return this;
}

WTF *WebKit::WebAutomationSession::handleForWebPageProxy@<X0>(WebKit::WebAutomationSession *this@<X0>, const WebKit::WebPageProxy *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v6 = (uint64_t *)((char *)this + 104);
  uint64_t v57 = *(WTF::StringImpl **)(*((void *)a2 + 4) + 760);
  uint64_t result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 13, &v57);
  unsigned int v8 = (WTF *)*((void *)this + 13);
  if (v8) {
    unsigned int v8 = (WTF *)((char *)v8 + 16 * *((unsigned int *)v8 - 1));
  }
  if (v8 != result)
  {
    int v9 = (WTF::StringImpl *)*((void *)result + 1);
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    *a3 = v9;
    return result;
  }
  WTF::createVersion4UUIDString((uint64_t *)&v57, result);
  if (v57)
  {
    uint64_t v10 = *((void *)v57 + 1);
    unint64_t v11 = *((unsigned int *)v57 + 1) | ((unint64_t)((*((_DWORD *)v57 + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0x100000000;
  }
  int v53 = 0;
  uint64_t v54 = v10;
  int v55 = v11;
  char v56 = BYTE4(v11);
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIICaseConverter>((uint64_t)a3, "page-", 6, (uint64_t)&v53);
  if (!*a3)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x19923E788);
  }
  uint64_t v14 = v57;
  uint64_t v57 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = *(void *)(*((void *)a2 + 4) + 760);
  uint64_t v16 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, 0), (uint64_t v16 = *v6) != 0))
  {
    int v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
  unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
  char v22 = (void *)(v16 + 16 * v21);
  uint64_t v23 = *v22;
  if (*v22)
  {
    uint64_t v24 = 0;
    int v25 = 1;
    do
    {
      if (v23 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x19923E7A8);
      }
      if (v23 == -1) {
        uint64_t v24 = v22;
      }
      unsigned int v21 = (v21 + v25) & v17;
      char v22 = (void *)(v16 + 16 * v21);
      uint64_t v23 = *v22;
      ++v25;
    }
    while (*v22);
    if (v24)
    {
      void *v24 = 0;
      v24[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      char v22 = v24;
    }
  }
  *char v22 = v15;
  uint64_t v26 = *a3;
  if (*a3) {
    *(_DWORD *)v26 += 2;
  }
  uint64_t v27 = (WTF::StringImpl *)v22[1];
  v22[1] = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v12);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t v28 = *v6;
  if (*v6) {
    int v29 = *(_DWORD *)(v28 - 12) + 1;
  }
  else {
    int v29 = 1;
  }
  *(_DWORD *)(v28 - 12) = v29;
  uint64_t v30 = *v6;
  if (*v6) {
    int v31 = *(_DWORD *)(v30 - 12);
  }
  else {
    int v31 = 0;
  }
  uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
  unint64_t v33 = *(unsigned int *)(v30 - 4);
  if (v33 <= 0x400)
  {
    if (3 * v33 > 4 * v32) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (v33 <= 2 * v32) {
LABEL_39:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v22);
LABEL_40:
  uint64_t v36 = *((void *)this + 14);
  uint64_t v34 = (uint64_t *)((char *)this + 112);
  uint64_t v35 = v36;
  uint64_t v37 = *(void *)(*((void *)a2 + 4) + 760);
  if (v36
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v34),
        (uint64_t v35 = *v34) != 0))
  {
    int v38 = *(_DWORD *)(v35 - 8);
  }
  else
  {
    int v38 = 0;
  }
  uint64_t v39 = *a3;
  unsigned int v40 = *((_DWORD *)*a3 + 4);
  if (v40 >= 0x100) {
    unsigned int v41 = v40 >> 8;
  }
  else {
    unsigned int v41 = WTF::StringImpl::hashSlowCase(*a3);
  }
  uint64_t v42 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v44 = v41 & v38;
    long long v45 = (uint64_t *)(v35 + 16 * (v41 & v38));
    char v46 = (WTF *)*v45;
    if (*v45 == -1)
    {
      uint64_t v42 = (uint64_t *)(v35 + 16 * v44);
      goto LABEL_52;
    }
    if (!v46) {
      break;
    }
    if (WTF::equal(v46, v39, v13)) {
      goto LABEL_73;
    }
LABEL_52:
    unsigned int v41 = i + v44;
  }
  if (v42)
  {
    *uint64_t v42 = 0;
    v42[1] = 0;
    --*(_DWORD *)(*v34 - 16);
    long long v45 = v42;
  }
  uint64_t result = (WTF *)WTF::String::operator=(v45, a3);
  v45[1] = v37;
  uint64_t v47 = *v34;
  if (*v34) {
    int v48 = *(_DWORD *)(v47 - 12) + 1;
  }
  else {
    int v48 = 1;
  }
  *(_DWORD *)(v47 - 12) = v48;
  uint64_t v49 = *v34;
  if (*v34) {
    int v50 = *(_DWORD *)(v49 - 12);
  }
  else {
    int v50 = 0;
  }
  uint64_t v51 = (*(_DWORD *)(v49 - 16) + v50);
  unint64_t v52 = *(unsigned int *)(v49 - 4);
  if (v52 > 0x400)
  {
    if (v52 <= 2 * v51) {
      return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v34);
    }
  }
  else if (3 * v52 <= 4 * v51)
  {
    return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v34);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::didDestroyFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v4 = (uint64_t *)(a1 + 120);
  uint64_t v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a1 + 120), v13);
  uint64_t result = (WTF::StringImpl *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take(v4, (WTF::StringImpl *)v5, &v12);
  if (!v12) {
    return result;
  }
  if (*((_DWORD *)v12 + 1))
  {
    int v9 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 128), &v12, v8);
    unsigned int v7 = (WTF::StringImpl *)v9;
    uint64_t v10 = *(void *)(a1 + 128);
    if (v10)
    {
      unint64_t v11 = (WTF::StringImpl **)(v10 + 24 * *(unsigned int *)(v10 - 4));
      if (v11 == v9) {
        goto LABEL_10;
      }
    }
    else
    {
      if (!v9) {
        goto LABEL_10;
      }
      unint64_t v11 = 0;
    }
    if (v11 != v9) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 128), v9);
    }
  }
LABEL_10:
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebAutomationSession::webFrameIDForHandle(uint64_t this, const WTF::String *a2, WTF::StringImpl **a3, unsigned char *a4)
{
  uint64_t v4 = this;
  if (*a3 && *((_DWORD *)*a3 + 1))
  {
    this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2 + 16, a3, (const WTF::StringImpl *)a3);
    uint64_t v7 = *((void *)a2 + 16);
    if (v7) {
      v7 += 24 * *(unsigned int *)(v7 - 4);
    }
    if (v7 != this)
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)(this + 8);
      *(unsigned char *)(v4 + 16) = 1;
      return this;
    }
    *a4 = 1;
  }
  *(unsigned char *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 16) = 0;
  return this;
}

uint64_t *WebKit::WebAutomationSession::handleForWebFrameID(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (!*(unsigned char *)(a3 + 16)
    || (uint64_t result = *(uint64_t **)a3) == 0
    || (uint64_t result = (uint64_t *)WebKit::WebFrameProxy::webFrame((uint64_t)result, *(void *)(a3 + 8))) != 0
    && *((unsigned char *)result + 441))
  {
    uint64_t v6 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (!*MEMORY[0x1E4F30980])
    {
LABEL_7:
      uint64_t *v3 = (uint64_t)v6;
      return result;
    }
LABEL_6:
    *v6 += 2;
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a3 + 16)) {
    goto LABEL_53;
  }
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a2 + 120), (void *)a3);
  uint64_t v7 = *(uint64_t **)(a2 + 120);
  if (v7) {
    v7 += 3 * *((unsigned int *)v7 - 1);
  }
  if (v7 != result)
  {
    uint64_t v6 = (_DWORD *)result[2];
    if (!v6) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  WTF::createVersion4UUIDString((uint64_t *)v30, (WTF *)result);
  if (v30[0])
  {
    uint64_t v8 = *((void *)v30[0] + 1);
    unint64_t v9 = *((unsigned int *)v30[0] + 1) | ((unint64_t)((*((_DWORD *)v30[0] + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0x100000000;
  }
  int v32 = 0;
  uint64_t v33 = v8;
  int v34 = v9;
  char v35 = BYTE4(v9);
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIICaseConverter>((uint64_t)v3, "frame-", 7, (uint64_t)&v32);
  if (!*v3) {
    goto LABEL_54;
  }
  unint64_t v11 = v30[0];
  v30[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (!*(unsigned char *)(a3 + 16)) {
    goto LABEL_53;
  }
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t *)(a2 + 120), (WTF::StringImpl *)a3, v3, (uint64_t)v30);
  if (!v31)
  {
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x19923EBE8);
  }
  if (!*(unsigned char *)(a3 + 16))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v15 = *(void *)(a2 + 128);
  uint64_t v13 = (uint64_t *)(a2 + 128);
  uint64_t v14 = v15;
  if (v15
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13, 0), (uint64_t v14 = *v13) != 0))
  {
    int v16 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v16 = 0;
  }
  unsigned int v17 = *(_DWORD *)(*v3 + 16);
  if (v17 >= 0x100) {
    unsigned int v18 = v17 >> 8;
  }
  else {
    unsigned int v18 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v3);
  }
  unint64_t v19 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v21 = v18 & v16;
    char v22 = (void *)(v14 + 24 * (v18 & v16));
    uint64_t v23 = (WTF *)*v22;
    if (*v22 == -1)
    {
      unint64_t v19 = (void *)(v14 + 24 * v21);
      goto LABEL_37;
    }
    if (!v23) {
      break;
    }
    if (WTF::equal(v23, (const WTF::StringImpl *)*v3, v12))
    {
      __break(0xC471u);
      JUMPOUT(0x19923EC08);
    }
LABEL_37:
    unsigned int v18 = i + v21;
  }
  if (v19)
  {
    *unint64_t v19 = 0;
    v19[1] = 0;
    uint64_t v19[2] = 0;
    --*(_DWORD *)(*v13 - 16);
    char v22 = v19;
  }
  uint64_t result = WTF::String::operator=(v22, (WTF::StringImpl **)v3);
  *(_OWORD *)(v22 + 1) = *(_OWORD *)a3;
  uint64_t v24 = *v13;
  if (*v13) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v26 = *v13;
  if (*v13) {
    int v27 = *(_DWORD *)(v26 - 12);
  }
  else {
    int v27 = 0;
  }
  uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
  unint64_t v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28) {
      return (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13, (WTF::StringImpl **)v22);
    }
  }
  else if (3 * v29 <= 4 * v28)
  {
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13, (WTF::StringImpl **)v22);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::buildBrowsingContextForPage(WTF::JSONImpl::Object *a1, WebKit::WebAutomationSession *a2, const WebKit::WebPageProxy *a3, float a4, float a5, float a6, float a7)
{
  WTF::JSONImpl::Object::create(v71, a1);
  Inspector::Protocol::Automation::Point::Builder<0>::setX(v71, a4);
  uint64_t v14 = Inspector::Protocol::Automation::Point::Builder<1>::setY(v71, a5);
  uint64_t v15 = (WTF::StringImpl *)v71[0];
  WTF::JSONImpl::Object::create(v71, (WTF::JSONImpl::Object *)v14);
  Inspector::Protocol::Automation::Size::Builder<0>::setWidth(v71, a6);
  Inspector::Protocol::Automation::Size::Builder<1>::setHeight(v71, a7);
  int v16 = (WTF::StringImpl *)v71[0];
  __int16 v17 = *(_WORD *)(*((void *)a3 + 4) + 64);
  unsigned int v18 = WebKit::WebAutomationSession::handleForWebPageProxy(a2, a3, &v68);
  WTF::JSONImpl::Object::create((uint64_t *)&v67, v18);
  uint64_t v19 = (uint64_t)v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v70, (WTF::JSONImpl::Value *)&v68, v20);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v19 + 16), &v69, (uint64_t *)&v70, (uint64_t)v71);
  if (v72)
  {
    char v22 = (uint64_t *)(v19 + 24);
    uint64_t v23 = *(unsigned int *)(v19 + 36);
    if (v23 == *(_DWORD *)(v19 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v22, (unint64_t)&v69);
    }
    else
    {
      uint64_t v24 = *v22;
      int v25 = v69;
      if (v69) {
        *(_DWORD *)v69 += 2;
      }
      *(void *)(v24 + 8 * v23) = v25;
      *(_DWORD *)(v19 + 36) = v23 + 1;
    }
  }
  uint64_t v26 = v70;
  char v70 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v26;
    }
  }
  int v27 = v17 & 7;
  uint64_t v28 = v69;
  BOOL v69 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v21);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = (uint64_t)v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v27 == 7));
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v29 + 16), &v69, (uint64_t *)&v70, (uint64_t)v71);
  if (v72)
  {
    char v31 = (uint64_t *)(v29 + 24);
    uint64_t v32 = *(unsigned int *)(v29 + 36);
    if (v32 == *(_DWORD *)(v29 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v31, (unint64_t)&v69);
    }
    else
    {
      uint64_t v33 = *v31;
      int v34 = v69;
      if (v69) {
        *(_DWORD *)v69 += 2;
      }
      *(void *)(v33 + 8 * v32) = v34;
      *(_DWORD *)(v29 + 36) = v32 + 1;
    }
  }
  char v35 = v70;
  char v70 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v35;
    }
  }
  uint64_t v36 = v69;
  BOOL v69 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v30);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*((void *)a3 + 4) + 1000), &v66);
  uint64_t v37 = (uint64_t)v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v70, (WTF::JSONImpl::Value *)&v66, v38);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v37 + 16), &v69, (uint64_t *)&v70, (uint64_t)v71);
  if (v72)
  {
    unsigned int v40 = (uint64_t *)(v37 + 24);
    uint64_t v41 = *(unsigned int *)(v37 + 36);
    if (v41 == *(_DWORD *)(v37 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v40, (unint64_t)&v69);
    }
    else
    {
      uint64_t v42 = *v40;
      uint64_t v43 = v69;
      if (v69) {
        *(_DWORD *)v69 += 2;
      }
      *(void *)(v42 + 8 * v41) = v43;
      *(_DWORD *)(v37 + 36) = v41 + 1;
    }
  }
  unsigned int v44 = v70;
  char v70 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v44;
    }
  }
  long long v45 = v69;
  BOOL v69 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2) {
      WTF::StringImpl::destroy(v45, v39);
    }
    else {
      *(_DWORD *)v45 -= 2;
    }
  }
  uint64_t v46 = (uint64_t)v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  BOOL v69 = v15;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v46 + 16), &v70, (uint64_t *)&v69, (uint64_t)v71);
  if (v72)
  {
    int v48 = (uint64_t *)(v46 + 24);
    uint64_t v49 = *(unsigned int *)(v46 + 36);
    if (v49 == *(_DWORD *)(v46 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v48, (unint64_t)&v70);
    }
    else
    {
      uint64_t v50 = *v48;
      uint64_t v51 = v70;
      if (v70) {
        *(_DWORD *)v70 += 2;
      }
      *(void *)(v50 + 8 * v49) = v51;
      *(_DWORD *)(v46 + 36) = v49 + 1;
    }
  }
  unint64_t v52 = v69;
  BOOL v69 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v52;
    }
  }
  int v53 = v70;
  char v70 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, v47);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  uint64_t v54 = (uint64_t)v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  BOOL v69 = v16;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v54 + 16), &v70, (uint64_t *)&v69, (uint64_t)v71);
  if (v72)
  {
    char v56 = (uint64_t *)(v54 + 24);
    uint64_t v57 = *(unsigned int *)(v54 + 36);
    if (v57 == *(_DWORD *)(v54 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v56, (unint64_t)&v70);
    }
    else
    {
      uint64_t v58 = *v56;
      long long v59 = v70;
      if (v70) {
        *(_DWORD *)v70 += 2;
      }
      *(void *)(v58 + 8 * v57) = v59;
      *(_DWORD *)(v54 + 36) = v57 + 1;
    }
  }
  char v60 = v69;
  BOOL v69 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v60;
    }
  }
  char v61 = v70;
  char v70 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2) {
      WTF::StringImpl::destroy(v61, v55);
    }
    else {
      *(_DWORD *)v61 -= 2;
    }
  }
  long long v62 = v66;
  uint64_t v63 = (uint64_t)v67;
  id v66 = 0;
  uint64_t v67 = 0;
  *(void *)a1 = v63;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2) {
      WTF::StringImpl::destroy(v62, v55);
    }
    else {
      *(_DWORD *)v62 -= 2;
    }
    int v64 = v67;
    uint64_t v67 = 0;
    if (v64)
    {
      if (*v64 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v64;
      }
    }
  }
  uint64_t result = v68;
  int v68 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *Inspector::Protocol::Automation::Point::Builder<0>::setX(uint64_t *a1, double a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v15, v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (uint64_t *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    uint64_t v7 = (uint64_t *)(v4 + 24);
    uint64_t v8 = *(unsigned int *)(v4 + 36);
    if (v8 == *(_DWORD *)(v4 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v14);
    }
    else
    {
      uint64_t v9 = *v7;
      uint64_t v10 = v14;
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      *(void *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 36) = v8 + 1;
    }
  }
  unint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    if (*v11 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v11;
    }
  }
  uint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v6);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Automation::Point::Builder<1>::setY(uint64_t *a1, double a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v15, v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (uint64_t *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    uint64_t v7 = (uint64_t *)(v4 + 24);
    uint64_t v8 = *(unsigned int *)(v4 + 36);
    if (v8 == *(_DWORD *)(v4 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v14);
    }
    else
    {
      uint64_t v9 = *v7;
      uint64_t v10 = v14;
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      *(void *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 36) = v8 + 1;
    }
  }
  unint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    if (*v11 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v11;
    }
  }
  uint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v6);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Automation::Size::Builder<0>::setWidth(uint64_t *a1, double a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v15, v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (uint64_t *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    uint64_t v7 = (uint64_t *)(v4 + 24);
    uint64_t v8 = *(unsigned int *)(v4 + 36);
    if (v8 == *(_DWORD *)(v4 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v14);
    }
    else
    {
      uint64_t v9 = *v7;
      uint64_t v10 = v14;
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      *(void *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 36) = v8 + 1;
    }
  }
  unint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    if (*v11 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v11;
    }
  }
  uint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v6);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return a1;
}

uint64_t *Inspector::Protocol::Automation::Size::Builder<1>::setHeight(uint64_t *a1, double a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v15, v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (uint64_t *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    uint64_t v7 = (uint64_t *)(v4 + 24);
    uint64_t v8 = *(unsigned int *)(v4 + 36);
    if (v8 == *(_DWORD *)(v4 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v14);
    }
    else
    {
      uint64_t v9 = *v7;
      uint64_t v10 = v14;
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      *(void *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 36) = v8 + 1;
    }
  }
  unint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11)
  {
    if (*v11 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v11;
    }
  }
  uint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v6);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return a1;
}

void WebKit::WebAutomationSession::getNextContext(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, WTF::JSONImpl::Object **a5)
{
  uint64_t v7 = *((unsigned int *)a3 + 3);
  if (v7)
  {
    uint64_t v11 = v7 - 1;
    uint64_t v12 = *(void *)(*a3 + 8 * (v7 - 1));
    *(void *)(*a3 + 8 * (v7 - 1)) = 0;
    uint64_t v13 = *(void *)(*a3 + 8 * (v7 - 1));
    *(void *)(*a3 + 8 * v11) = 0;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
    *((_DWORD *)a3 + 3) = v11;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    uint64_t v14 = *a2;
    *a2 = 0;
    uint64_t v15 = *a5;
    *a5 = 0;
    uint64_t v16 = *a3;
    *a3 = 0;
    uint64_t v17 = *a4;
    *a4 = 0;
    uint64_t v23 = v17;
    uint64_t v24 = v12;
    uint64_t v18 = a3[1];
    a3[1] = 0;
    uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x40);
    *uint64_t v19 = &unk_1EE9FA940;
    v19[1] = a1;
    uint64_t v19[2] = v14;
    uint64_t v19[3] = v15;
    v22[0] = 0;
    v19[4] = v16;
    v22[1] = 0;
    v19[5] = v18;
    v19[6] = v17;
    v19[7] = v12;
    int v25 = v19;
    WebKit::WebPageProxy::getWindowFrameWithCallback(v12, (uint64_t *)&v25);
    if (v25) {
      (*(void (**)(void *))(*v25 + 8))(v25);
    }
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v20);
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    unsigned int v21 = *a5;
    Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback::sendSuccess(v21, a4);
  }
}

uint64_t WebKit::WebAutomationSession::getBrowsingContexts(uint64_t a1, WTF::JSONImpl::Object **a2)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v6 = v5 + 56;
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  else
  {
    uint64_t v6 = 72;
  }
  uint64_t v7 = *(unsigned int *)(v6 + 12);
  if (v7)
  {
    uint64_t v8 = *(WebKit::WebProcessProxy ***)v6;
    uint64_t v9 = *(void *)v6 + 8 * v7;
    while (1)
    {
      uint64_t v10 = *v8;
      uint64_t v11 = (atomic_uint *)((char *)*v8 + 16);
      atomic_fetch_add(v11, 1u);
      WebKit::WebProcessProxy::pages(v10, (uint64_t)&v25);
      if (v26) {
        break;
      }
LABEL_17:
      WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v12);
      if (v10) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
      }
      if (++v8 == (WebKit::WebProcessProxy **)v9) {
        goto LABEL_20;
      }
    }
    uint64_t v13 = v25;
    uint64_t v14 = 8 * v26;
    while (1)
    {
      uint64_t v15 = *(void *)v13;
      CFRetain(*(CFTypeRef *)(*(void *)v13 + 8));
      uint64_t v24 = v15;
      if (*(unsigned char *)(v15 + 898))
      {
        LODWORD(v16) = HIDWORD(v28);
        if (HIDWORD(v28) == v28)
        {
          uint64_t v17 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v27, HIDWORD(v28) + 1, (unint64_t)&v24);
          uint64_t v16 = HIDWORD(v28);
          uint64_t v18 = v27;
          uint64_t v19 = *v17;
          uint64_t *v17 = 0;
          *(void *)(v18 + 8 * v16) = v19;
        }
        else
        {
          uint64_t v24 = 0;
          *(void *)(v27 + 8 * HIDWORD(v2WebKit::UserMediaCaptureManager::~UserMediaCaptureManager((WebKit::UserMediaCaptureManager *)((char *)this - 8)) = v15;
        }
        HIDWORD(v28) = v16 + 1;
        uint64_t v15 = v24;
        uint64_t v24 = 0;
        if (!v15) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      CFRelease(*(CFTypeRef *)(v15 + 8));
LABEL_16:
      v13 += 8;
      v14 -= 8;
      if (!v14) {
        goto LABEL_17;
      }
    }
  }
LABEL_20:
  CFRetain(*(CFTypeRef *)(a1 + 8));
  uint64_t v25 = a1;
  unint64_t v20 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  uint64_t v23 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase(v20);
  WebKit::WebAutomationSession::getNextContext(a1, &v25, &v27, (uint64_t *)&v23, a2);
  if (v23)
  {
    if (*v23 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v23;
    }
  }
  if (v25) {
    CFRelease(*(CFTypeRef *)(v25 + 8));
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v21);
}

uint64_t non-virtual thunk to'WebKit::WebAutomationSession::getBrowsingContexts(uint64_t a1, WTF::JSONImpl::Object **a2)
{
  return WebKit::WebAutomationSession::getBrowsingContexts(a1 - 32, a2);
}

void WebKit::WebAutomationSession::getBrowsingContext(CFTypeRef *a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v13, (const WTF::String *)a1, a2);
  uint64_t v5 = v13;
  if (v13)
  {
    CFRetain(a1[1]);
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v7 = &unk_1EE9FA968;
    *((void *)v7 + 1) = a1;
    *((void *)v7 + 2) = v5;
    *((void *)v7 + 3) = v6;
    uint64_t v12 = v7;
    WebKit::WebPageProxy::getWindowFrameWithCallback(v5, (uint64_t *)&v12);
    if (v12) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v12 + 8))(v12);
    }
    uint64_t v8 = *(const void **)(v5 + 8);
    CFRelease(v8);
  }
  else
  {
    uint64_t v9 = *a3;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v12);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)&v12);
    uint64_t v11 = v12;
    uint64_t v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::getBrowsingContext(uint64_t a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
}

WTF::StringImpl *WebKit::WebAutomationSession::createBrowsingContext(uint64_t a1, uint64_t a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    if (*(unsigned char *)(a2 + 4)) {
      BOOL v6 = *(_DWORD *)a2 == 4;
    }
    else {
      BOOL v6 = 0;
    }
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v9 = &unk_1EE9FA990;
    v9[1] = a1;
    _OWORD v9[2] = v8;
    v17[0] = (uint64_t)v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 32))(v4, a1, v7, v17);
    uint64_t result = (WTF::StringImpl *)v17[0];
    v17[0] = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v11 = *a3;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v14);
    v17[0] = (uint64_t)"The remote session could not request a new browsing context.";
    v17[1] = 61;
    char v16 = 59;
    uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v14, &v16, v17, &v15);
    if (v15)
    {
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v11, (const WTF::String *)&v15);
      uint64_t v13 = v15;
      uint64_t v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebAutomationSession::createBrowsingContext(uint64_t a1, uint64_t a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  return WebKit::WebAutomationSession::createBrowsingContext(a1 - 32, a2, a3);
}

void WebKit::WebAutomationSession::closeBrowsingContext(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v6, this, a2);
  uint64_t v4 = v6;
  if (v6)
  {
    WebKit::WebPageProxy::closePage((uint64_t)v6);
    *(unsigned char *)a3 = 0;
    CFRelease(*((CFTypeRef *)v4 + 1));
    char v5 = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (void *)a3);
    char v5 = 1;
  }
  *(unsigned char *)(a3 + 8) = v5;
}

void non-virtual thunk to'WebKit::WebAutomationSession::closeBrowsingContext(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t WebKit::WebAutomationSession::deleteSession@<X0>(WebKit::WebAutomationSession *this@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(*((void *)this + 39) + 20))
  {
    uint64_t result = WebKit::WebAutomationSession::terminate(this);
    char v4 = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    uint64_t result = Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, (void *)a2);
    char v4 = 1;
  }
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebAutomationSession::deleteSession@<X0>(WebKit::WebAutomationSession *this@<X0>, uint64_t a2@<X8>)
{
  return WebKit::WebAutomationSession::deleteSession((WebKit::WebAutomationSession *)((char *)this - 32), a2);
}

void WebKit::WebAutomationSession::switchToBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v20, a1, a2);
  uint64_t v7 = v20;
  if (v20)
  {
    char v19 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)v18, a1, a3, &v19);
    if (v19)
    {
      uint64_t v8 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, v18);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)v18);
      uint64_t v10 = v18[0];
      v18[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    else
    {
      uint64_t v14 = *((void *)a1 + 7);
      CFRetain(*(CFTypeRef *)(v7 + 8));
      uint64_t v15 = *a4;
      *a4 = 0;
      char v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)char v16 = &unk_1EE9FA9B8;
      *((void *)v16 + 1) = v7;
      *((void *)v16 + 2) = v15;
      v18[0] = v16;
      (*(void (**)(uint64_t, WTF::String *, uint64_t, WTF::StringImpl **))(*(void *)v14 + 64))(v14, a1, v7, v18);
      uint64_t v17 = v18[0];
      v18[0] = 0;
      if (v17) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v17 + 8))(v17);
      }
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    uint64_t v11 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v18);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v11, (const WTF::String *)v18);
    uint64_t v13 = v18[0];
    v18[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::switchToBrowsingContext(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
}

void WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(CFTypeRef *a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, WTF::JSONImpl::ObjectBase **a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  uint64_t v9 = *a3;
  if (*a3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v58 = (WTF::StringImpl *)v60;
    uint64_t Double = WTF::JSONImpl::ObjectBase::getDouble(v9, (const WTF::String *)&v58);
    LOBYTE(v9) = (_BYTE)v11;
    uint64_t v13 = v58;
    uint64_t v58 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    if (!(_BYTE)v9)
    {
      char v19 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v57);
      char v60 = "The 'x' parameter was not found or invalid.";
      uint64_t v61 = 44;
      char v59 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v57, &v59, (uint64_t *)&v60, &v58);
      if (v58)
      {
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v19, (const WTF::String *)&v58);
        unsigned int v21 = v58;
        uint64_t v58 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
        uint64_t v42 = v57;
        uint64_t v57 = 0;
        if (v42) {
          goto LABEL_76;
        }
        return;
      }
      __break(0xC471u);
LABEL_86:
      JUMPOUT(0x1992404F4);
    }
    char v16 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v58 = (WTF::StringImpl *)v60;
    uint64_t v15 = WTF::JSONImpl::ObjectBase::getDouble(v16, (const WTF::String *)&v58);
    char v14 = (char)v17;
    uint64_t v18 = v58;
    uint64_t v58 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (!v14)
    {
      uint64_t v33 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v56);
      char v60 = "The 'y' parameter was not found or invalid.";
      uint64_t v61 = 44;
      char v59 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v56, &v59, (uint64_t *)&v60, &v58);
      if (!v58)
      {
        __break(0xC471u);
        JUMPOUT(0x1992404FCLL);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v33, (const WTF::String *)&v58);
      int v34 = v58;
      uint64_t v58 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v20);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
      uint64_t v42 = v56;
      char v56 = 0;
      if (v42) {
        goto LABEL_76;
      }
      return;
    }
    unint64_t v50 = Double & 0xFFFFFFFFFFFFFF00;
    unint64_t v51 = v15 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    char v14 = 0;
    LOBYTE(v15) = 0;
    unint64_t v50 = 0;
    unint64_t v51 = 0;
    LOBYTE(Double) = 0;
  }
  char v22 = *a4;
  if (!*a4)
  {
    char v25 = 0;
    char v27 = 0;
    double v28 = 0.0;
    double v29 = 0.0;
LABEL_23:
    WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v60, (const WTF::String *)a1, a2);
    uint64_t v30 = (uint64_t)v60;
    if (!v60)
    {
      uint64_t v41 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v58);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v41, (const WTF::String *)&v58);
      uint64_t v42 = v58;
      uint64_t v58 = 0;
      if (!v42) {
        return;
      }
      goto LABEL_76;
    }
    CFRetain(a1[1]);
    char v31 = *a5;
    *a5 = 0;
    CFRetain(*(CFTypeRef *)(v30 + 8));
    uint64_t v32 = WTF::fastMalloc((WTF *)0x68);
    *(void *)uint64_t v32 = &unk_1EE9FA9E0;
    *(void *)(v32 + 8) = a1;
    *(void *)(v32 + 16) = a1;
    *(void *)(v32 + 24) = v31;
    *(void *)(v32 + 32) = v30;
    *(double *)(v32 + 40) = v28;
    *(unsigned char *)(v32 + 48) = v25;
    *(double *)(v32 + 56) = v29;
    *(unsigned char *)(v32 + 64) = v27;
    *(void *)(v32 + 72) = v50 | Double;
    *(unsigned char *)(v32 + 80) = (_BYTE)v9;
    *(void *)(v32 + 88) = v51 | v15;
    *(unsigned char *)(v32 + 96) = v14;
    uint64_t v58 = (WTF::StringImpl *)v32;
    WebKit::WebAutomationSession::exitFullscreenWindowForPage((uint64_t)a1, v30, (uint64_t *)&v58);
    if (v58) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v58 + 8))(v58);
    }
    CFRelease(*(CFTypeRef *)(v30 + 8));
    return;
  }
  uint64_t v49 = a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v58 = (WTF::StringImpl *)v60;
  double v24 = COERCE_DOUBLE(WTF::JSONImpl::ObjectBase::getDouble(v22, (const WTF::String *)&v58));
  char v25 = (char)v23;
  unsigned int v26 = v58;
  uint64_t v58 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v23);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (!v25)
  {
    uint64_t v39 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v55);
    char v60 = "The 'width' parameter was not found or invalid.";
    uint64_t v61 = 48;
    char v59 = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v55, &v59, (uint64_t *)&v60, &v58);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x199240504);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v39, (const WTF::String *)&v58);
    unsigned int v40 = v58;
    uint64_t v58 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v20);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    uint64_t v42 = v55;
    int v55 = 0;
    if (v42) {
      goto LABEL_76;
    }
    return;
  }
  char v35 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v58 = (WTF::StringImpl *)v60;
  double v37 = COERCE_DOUBLE(WTF::JSONImpl::ObjectBase::getDouble(v35, (const WTF::String *)&v58));
  char v27 = (char)v36;
  int v38 = v58;
  uint64_t v58 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v36);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (!v27)
  {
    long long v45 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v54);
    char v60 = "The 'height' parameter was not found or invalid.";
    uint64_t v61 = 49;
    char v59 = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v54, &v59, (uint64_t *)&v60, &v58);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x19924050CLL);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v45, (const WTF::String *)&v58);
    uint64_t v46 = v58;
    uint64_t v58 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v20);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
    uint64_t v42 = v54;
    uint64_t v54 = 0;
    if (v42) {
      goto LABEL_76;
    }
    return;
  }
  double v28 = v24;
  if (v24 < 0.0)
  {
    uint64_t v43 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v53);
    char v60 = "The 'width' parameter had an invalid value.";
    uint64_t v61 = 44;
    char v59 = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v53, &v59, (uint64_t *)&v60, &v58);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x199240514);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v43, (const WTF::String *)&v58);
    unsigned int v44 = v58;
    uint64_t v58 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v20);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    uint64_t v42 = v53;
    int v53 = 0;
    if (!v42) {
      return;
    }
LABEL_76:
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v20);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
    return;
  }
  double v29 = v37;
  if (v37 >= 0.0)
  {
    a2 = v49;
    goto LABEL_23;
  }
  uint64_t v47 = *a5;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v52);
  char v60 = "The 'height' parameter had an invalid value.";
  uint64_t v61 = 45;
  char v59 = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v52, &v59, (uint64_t *)&v60, &v58);
  if (!v58)
  {
    __break(0xC471u);
    goto LABEL_86;
  }
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v47, (const WTF::String *)&v58);
  int v48 = v58;
  uint64_t v58 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, v20);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
  uint64_t v42 = v52;
  unint64_t v52 = 0;
  if (v42) {
    goto LABEL_76;
  }
}

uint64_t WebKit::WebAutomationSession::exitFullscreenWindowForPage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a2 + 408);
  if (v4 && ((*(uint64_t (**)(void))(**(void **)(v4 + 32) + 24))(*(void *)(v4 + 32)) & 1) != 0)
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v7 = *a3;
    *a3 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v8 = &unk_1EE9FAB20;
    v8[1] = a1;
    void v8[2] = a1;
    uint64_t v8[3] = v7;
    uint64_t v9 = *(void *)(a1 + 216);
    *(void *)(a1 + 216) = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *(WebKit::WebFullScreenManagerProxy **)(a2 + 408);
    return WebKit::WebFullScreenManagerProxy::requestExitFullScreen(v10);
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return v13(v12);
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(uint64_t a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, WTF::JSONImpl::ObjectBase **a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
}

void WebKit::WebAutomationSession::waitForNavigationToComplete(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **a6)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v35, a1, a2);
  uint64_t v10 = v35;
  if (v35)
  {
    if (*(unsigned char *)(a4 + 4)) {
      int v11 = *(_DWORD *)a4;
    }
    else {
      int v11 = 26;
    }
    if (v11 == 26 && ((uint64_t v15 = *(void *)(v35 + 32), *(void *)(v15 + 1016)) || *(unsigned __int8 *)(v15 + 1000) <= 1u)) {
      char v16 = (*(uint64_t (**)(void, WTF::String *, uint64_t))(**((void **)a1 + 7) + 72))(*((void *)a1 + 7), a1, v35);
    }
    else {
      char v16 = 0;
    }
    if (!*a3 || !*((_DWORD *)*a3 + 1))
    {
      if ((v16 & 1) == 0)
      {
        uint64_t v20 = *a6;
        *a6 = 0;
        v36[0] = v20;
        WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, v10, v11, (uint64_t *)v36);
        if (v36[0])
        {
          if (*((_DWORD *)v36[0] + 2) == 1) {
            (*(void (**)(void))(*(void *)v36[0] + 8))();
          }
          else {
            --*((_DWORD *)v36[0] + 2);
          }
        }
        goto LABEL_47;
      }
      goto LABEL_27;
    }
    char v34 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)v32, a1, a3, &v34);
    if (v34) {
      goto LABEL_16;
    }
    if (!v33)
    {
      char v27 = (WTF::JSONImpl::Object *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(v27, v28, v29, v30);
      return;
    }
    uint64_t v21 = WebKit::WebFrameProxy::webFrame(v32[0], v32[1]);
    if (!v21)
    {
LABEL_16:
      uint64_t v17 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, v36);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)v36);
      char v19 = v36[0];
      v36[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      goto LABEL_47;
    }
    uint64_t v22 = v21;
    uint64_t v23 = (WTF::JSONImpl::Object *)CFRetain(*(CFTypeRef *)(v21 + 8));
    if (v16)
    {
      CFRelease(*(CFTypeRef *)(v22 + 8));
LABEL_27:
      Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*a6);
LABEL_47:
      CFRelease(*(CFTypeRef *)(v10 + 8));
      return;
    }
    double v24 = *a6;
    *a6 = 0;
    char v31 = v24;
    if (v11 == 24 || *(_DWORD *)(v22 + 40) == 2)
    {
      WTF::JSONImpl::Object::create((uint64_t *)v36, v23);
      Inspector::BackendDispatcher::CallbackBase::sendSuccess();
      unsigned int v26 = v36[0];
      v36[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      goto LABEL_42;
    }
    WTF::RunLoop::TimerBase::start();
    if (v11 == 25)
    {
      char v25 = (uint64_t *)((char *)a1 + 160);
    }
    else
    {
      if (v11 != 26)
      {
LABEL_42:
        if (v31)
        {
          if (*((_DWORD *)v31 + 2) == 1) {
            (*(void (**)(void))(*(void *)v31 + 8))();
          }
          else {
            --*((_DWORD *)v31 + 2);
          }
        }
        CFRelease(*(CFTypeRef *)(v22 + 8));
        goto LABEL_47;
      }
      char v25 = (uint64_t *)((char *)a1 + 152);
    }
    long long v37 = *(_OWORD *)(v22 + 272);
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>((uint64_t)v36, v25, &v37, (uint64_t *)&v31);
    goto LABEL_42;
  }
  uint64_t v12 = *a6;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v36);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)v36);
  char v14 = v36[0];
  v36[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
}

uint64_t *WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(WTF::JSONImpl::Object *a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (a3 != 24
    && ((uint64_t v9 = *(void *)(a2 + 32), *(void *)(v9 + 1016))
     || *(unsigned __int8 *)(v9 + 1000) < 2u
     || *(void *)(v9 + 1184)
     || *(unsigned __int8 *)(v9 + 1168) < 2u))
  {
    uint64_t result = (uint64_t *)WTF::RunLoop::TimerBase::start();
    if (a3 == 25)
    {
      uint64_t v10 = (uint64_t *)((char *)a1 + 144);
    }
    else
    {
      if (a3 != 26) {
        return result;
      }
      uint64_t v10 = (uint64_t *)((char *)a1 + 136);
    }
    uint64_t v12 = *(void *)(*(void *)(a2 + 32) + 760);
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>((uint64_t)v11, v10, &v12, a4);
  }
  else
  {
    WTF::JSONImpl::Object::create(v11, a1);
    Inspector::BackendDispatcher::CallbackBase::sendSuccess();
    uint64_t result = (uint64_t *)v11[0];
    v11[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1) {
        return (uint64_t *)WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::WebAutomationSession::waitForNavigationToComplete(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **a6)
{
}

WTF::StringImpl *WebKit::WebAutomationSession::respondToPendingPageNavigationCallbacksWithTimeout(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::getEnumConstantValue(6, &v29);
  uint64_t v6 = *a2;
  if (!*a2)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  uint64_t v7 = *(unsigned int *)(v6 - 4);
  uint64_t v8 = (void *)(v6 + 16 * v7);
  if (!*(_DWORD *)(v6 - 12))
  {
    uint64_t v9 = (void *)(v6 + 16 * v7);
LABEL_14:
    uint64_t v8 = (void *)(v6 + 16 * v7);
    if (v6) {
      goto LABEL_9;
    }
LABEL_15:
    int v11 = 0;
    goto LABEL_16;
  }
  uint64_t v9 = (void *)*a2;
  if (v7)
  {
    uint64_t v10 = 16 * v7;
    uint64_t v9 = (void *)*a2;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        uint64_t v9 = v8;
        break;
      }
    }
  }
  if (!v6) {
    goto LABEL_15;
  }
LABEL_9:
  int v11 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  uint64_t v12 = *(unsigned int *)(v6 - 12);
  if (!v12)
  {
LABEL_16:
    uint64_t v13 = 0;
    goto LABEL_17;
  }
  if (v12 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
LABEL_17:
  if (v11 != v9)
  {
    unsigned int v14 = 0;
    int v15 = 1;
    do
    {
      unsigned int v16 = v15;
      uint64_t v17 = v9 + 2;
      *((void *)v13 + v14) = *v9;
      uint64_t v9 = v8;
      if (v17 != v8)
      {
        uint64_t v9 = v17;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          if (v9 == v8)
          {
            uint64_t v9 = v8;
            break;
          }
        }
      }
      ++v14;
      int v15 = v16 + 1;
    }
    while (v9 != v11);
    if (v14)
    {
      uint64_t v18 = 8 * v16;
      char v19 = (uint64_t *)v13;
      do
      {
        uint64_t v28 = *v19;
        WebKit::WebProcessProxy::webPage(v28, &v27);
        uint64_t v20 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2, &v28);
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(a2, v20, &v26);
        uint64_t v21 = v27;
        if (v27
          && (uint64_t v22 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56)
                                                                                                 + 72))(*(void *)(a1 + 56), a1, v27), v22))
        {
          WTF::JSONImpl::Object::create((uint64_t *)&v25, v22);
          Inspector::BackendDispatcher::CallbackBase::sendSuccess();
          uint64_t v23 = v25;
          char v25 = 0;
          if (v23)
          {
            if (*v23 == 1) {
              WTF::JSONImpl::Value::operator delete();
            }
            else {
              --*v23;
            }
          }
        }
        else
        {
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v26, (const WTF::String *)&v29);
        }
        double v24 = v26;
        unsigned int v26 = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 2) == 1)
          {
            (*(void (**)(Inspector::BackendDispatcher::CallbackBase *))(*(void *)v24 + 8))(v24);
            if (!v21) {
              goto LABEL_38;
            }
LABEL_37:
            CFRelease(*(CFTypeRef *)(v21 + 8));
            goto LABEL_38;
          }
          --*((_DWORD *)v24 + 2);
        }
        if (v21) {
          goto LABEL_37;
        }
LABEL_38:
        ++v19;
        v18 -= 8;
      }
      while (v18);
    }
  }
  if (v13) {
    WTF::fastFree(v13, v5);
  }
  uint64_t result = v29;
  int v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::respondToPendingFrameNavigationCallbacksWithTimeout(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::getEnumConstantValue(6, &v37);
  uint64_t v6 = *a2;
  if (!*a2)
  {
    uint64_t v9 = 0;
    LODWORD(v7) = 0;
    goto LABEL_18;
  }
  uint64_t v7 = *(unsigned int *)(v6 - 4);
  uint64_t v8 = v6 + 24 * v7;
  if (!*(_DWORD *)(v6 - 12))
  {
    uint64_t v9 = v6 + 24 * v7;
LABEL_18:
    uint64_t v8 = v6 + 24 * v7;
    if (v6) {
      goto LABEL_13;
    }
LABEL_19:
    uint64_t v12 = 0;
    goto LABEL_20;
  }
  uint64_t v9 = *a2;
  if (v7)
  {
    uint64_t v10 = 24 * v7;
    uint64_t v9 = *a2;
    while (*(_OWORD *)v9 == 0 || *(void *)(v9 + 8) == -1)
    {
      v9 += 24;
      v10 -= 24;
      if (!v10)
      {
        uint64_t v9 = v8;
        break;
      }
    }
  }
  if (!v6) {
    goto LABEL_19;
  }
LABEL_13:
  uint64_t v12 = v6 + 24 * *(unsigned int *)(v6 - 4);
  uint64_t v13 = *(unsigned int *)(v6 - 12);
  if (!v13)
  {
LABEL_20:
    unsigned int v14 = 0;
    goto LABEL_21;
  }
  if (v13 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  unsigned int v14 = (WTF *)WTF::fastMalloc((WTF *)(16 * v13));
LABEL_21:
  if (v12 != v9)
  {
    unsigned int v15 = 0;
    int v16 = 1;
    do
    {
      unsigned int v17 = v16;
      uint64_t v18 = v9 + 24;
      *((_OWORD *)v14 + v15) = *(_OWORD *)v9;
      uint64_t v9 = v8;
      if (v18 != v8)
      {
        uint64_t v9 = v18;
        while (*(_OWORD *)v9 == 0 || *(void *)(v9 + 8) == -1)
        {
          v9 += 24;
          if (v9 == v8)
          {
            uint64_t v9 = v8;
            break;
          }
        }
      }
      ++v15;
      int v16 = v17 + 1;
    }
    while (v9 != v12);
    if (v15)
    {
      uint64_t v20 = 16 * v17;
      uint64_t v21 = v14;
      while (1)
      {
        long long v36 = *(_OWORD *)v21;
        uint64_t v22 = *(void *)(a1 + 48);
        if (v22 && (uint64_t v23 = *(void *)(v22 + 8)) != 0)
        {
          uint64_t v24 = v23 - 16;
          CFRetain(*(CFTypeRef *)(v23 - 8));
        }
        else
        {
          uint64_t v24 = 0;
        }
        uint64_t v25 = WebKit::WebFrameProxy::webFrame(v36, *((uint64_t *)&v36 + 1));
        if (v25 && (v26 = *(void *)(v25 + 24)) != 0 && (uint64_t v27 = *(void *)(v26 + 8)) != 0)
        {
          uint64_t v28 = v27 - 16;
          CFRetain(*(CFTypeRef *)(v27 - 8));
          char v29 = 0;
        }
        else
        {
          uint64_t v28 = 0;
          char v29 = 1;
        }
        if (v24) {
          CFRelease(*(CFTypeRef *)(v24 + 8));
        }
        uint64_t v30 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, &v36);
        WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(&v35, a2, v30);
        if (!v28) {
          break;
        }
        char v31 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56)
                                                                                           + 72))(*(void *)(a1 + 56), a1, v28);
        if (!v31) {
          break;
        }
        uint64_t v32 = v35;
        WTF::JSONImpl::Object::create((uint64_t *)&v34, v31);
        Inspector::BackendDispatcher::CallbackBase::sendSuccess();
        char v33 = v34;
        char v34 = 0;
        if (!v33) {
          goto LABEL_53;
        }
        if (*v33 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          if (v32)
          {
LABEL_54:
            if (*((_DWORD *)v32 + 2) == 1) {
              (*(void (**)(Inspector::BackendDispatcher::CallbackBase *))(*(void *)v32 + 8))(v32);
            }
            else {
              --*((_DWORD *)v32 + 2);
            }
          }
        }
        else
        {
          --*v33;
          if (v32) {
            goto LABEL_54;
          }
        }
LABEL_57:
        if ((v29 & 1) == 0) {
          CFRelease(*(CFTypeRef *)(v28 + 8));
        }
        uint64_t v21 = (WTF *)((char *)v21 + 16);
        v20 -= 16;
        if (!v20) {
          goto LABEL_63;
        }
      }
      uint64_t v32 = v35;
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v35, (const WTF::String *)&v37);
LABEL_53:
      if (v32) {
        goto LABEL_54;
      }
      goto LABEL_57;
    }
  }
LABEL_63:
  if (v14) {
    WTF::fastFree(v14, v5);
  }
  uint64_t result = v37;
  long long v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(CFTypeRef *a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v13, (const WTF::String *)a1, a2);
  uint64_t v5 = v13;
  if (v13)
  {
    CFRetain(a1[1]);
    uint64_t v6 = *a3;
    *a3 = 0;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v7 = &unk_1EE9FAA58;
    *((void *)v7 + 1) = a1;
    *((void *)v7 + 2) = a1;
    *((void *)v7 + 3) = v6;
    *((void *)v7 + 4) = v5;
    uint64_t v12 = v7;
    WebKit::WebAutomationSession::exitFullscreenWindowForPage((uint64_t)a1, v5, (uint64_t *)&v12);
    if (v12) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v12 + 8))(v12);
    }
    uint64_t v8 = *(const void **)(v5 + 8);
    CFRelease(v8);
  }
  else
  {
    uint64_t v9 = *a3;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v12);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)&v12);
    int v11 = v12;
    uint64_t v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(uint64_t a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
}

void WebKit::WebAutomationSession::hideWindowOfBrowsingContext(CFTypeRef *a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v13, (const WTF::String *)a1, a2);
  uint64_t v5 = v13;
  if (v13)
  {
    CFRetain(a1[1]);
    uint64_t v6 = *a3;
    *a3 = 0;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    uint64_t v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v7 = &unk_1EE9FAAD0;
    *((void *)v7 + 1) = a1;
    *((void *)v7 + 2) = v6;
    *((void *)v7 + 3) = v5;
    uint64_t v12 = v7;
    WebKit::WebAutomationSession::exitFullscreenWindowForPage((uint64_t)a1, v5, (uint64_t *)&v12);
    if (v12) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v12 + 8))(v12);
    }
    uint64_t v8 = *(const void **)(v5 + 8);
    CFRelease(v8);
  }
  else
  {
    uint64_t v9 = *a3;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v12);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)&v12);
    int v11 = v12;
    uint64_t v12 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::hideWindowOfBrowsingContext(uint64_t a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
}

uint64_t WebKit::WebAutomationSession::willShowJavaScriptDialog(CFTypeRef *this, CFTypeRef *a2)
{
  WTF::RunLoop::main((WTF::RunLoop *)this);
  CFRetain(this[1]);
  CFRetain(a2[1]);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9FAB48;
  v4[1] = this;
  v4[2] = this;
  uint64_t v4[3] = a2;
  uint64_t v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

void WebKit::WebAutomationSession::navigateBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v23, a1, a2);
  uint64_t v10 = v23;
  if (v23)
  {
    if (*(unsigned char *)(a4 + 4)) {
      int v11 = *(_DWORD *)a4;
    }
    else {
      int v11 = 26;
    }
    WTF::URL::URL((uint64_t)v19, a3);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v20, (const String *)v19, 0);
    CFTypeRef cf = 0;
    WebKit::WebPageProxy::loadRequest(v10, (WebCore::ResourceRequestBase *)v20, 1, 0, 0, &v22);
    if (v22) {
      CFRelease(*(CFTypeRef *)(v22 + 8));
    }
    CFTypeRef v15 = cf;
    CFTypeRef cf = 0;
    if (v15) {
      CFRelease(v15);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v20);
    unsigned int v17 = v19[0];
    v19[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = *a6;
    *a6 = 0;
    v20[0] = v18;
    WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, v10, v11, (uint64_t *)v20);
    if (v20[0])
    {
      if (*((_DWORD *)v20[0] + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v20[0] + 8))(v20[0]);
      }
      else {
        --*((_DWORD *)v20[0] + 2);
      }
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  else
  {
    uint64_t v12 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v20);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)v20);
    unsigned int v14 = v20[0];
    v20[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::navigateBrowsingContext(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6)
{
}

void WebKit::WebAutomationSession::goBackInBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v17, a1, a2);
  uint64_t v8 = v17;
  if (v17)
  {
    if (*(unsigned char *)(a3 + 4)) {
      int v9 = *(_DWORD *)a3;
    }
    else {
      int v9 = 26;
    }
    WebKit::WebPageProxy::goBack(v17, &v15);
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
    unsigned int v14 = *a5;
    *a5 = 0;
    int v16 = v14;
    WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, (uint64_t)v8, v9, (uint64_t *)&v16);
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1) {
        (*(void (**)(void))(*(void *)v16 + 8))();
      }
      else {
        --*((_DWORD *)v16 + 2);
      }
    }
    CFRelease(*((CFTypeRef *)v8 + 1));
  }
  else
  {
    uint64_t v10 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v16);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v16);
    uint64_t v12 = v16;
    int v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::goBackInBrowsingContext(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
}

void WebKit::WebAutomationSession::goForwardInBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v17, a1, a2);
  uint64_t v8 = v17;
  if (v17)
  {
    if (*(unsigned char *)(a3 + 4)) {
      int v9 = *(_DWORD *)a3;
    }
    else {
      int v9 = 26;
    }
    WebKit::WebPageProxy::goForward(v17, &v15);
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
    unsigned int v14 = *a5;
    *a5 = 0;
    int v16 = v14;
    WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, (uint64_t)v8, v9, (uint64_t *)&v16);
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1) {
        (*(void (**)(void))(*(void *)v16 + 8))();
      }
      else {
        --*((_DWORD *)v16 + 2);
      }
    }
    CFRelease(*((CFTypeRef *)v8 + 1));
  }
  else
  {
    uint64_t v10 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v16);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v16);
    uint64_t v12 = v16;
    int v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::goForwardInBrowsingContext(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
}

void WebKit::WebAutomationSession::reloadBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v17, a1, a2);
  uint64_t v8 = v17;
  if (v17)
  {
    if (*(unsigned char *)(a3 + 4)) {
      int v9 = *(_DWORD *)a3;
    }
    else {
      int v9 = 26;
    }
    WebKit::WebPageProxy::reload(v17, 0, &v15);
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
    unsigned int v14 = *a5;
    *a5 = 0;
    int v16 = v14;
    WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, v8, v9, (uint64_t *)&v16);
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1) {
        (*(void (**)(void))(*(void *)v16 + 8))();
      }
      else {
        --*((_DWORD *)v16 + 2);
      }
    }
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    uint64_t v10 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v16);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v16);
    uint64_t v12 = v16;
    int v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::reloadBrowsingContext(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
}

WTF::StringImpl *WebKit::WebAutomationSession::navigationOccurredForFrame(WebKit::WebAutomationSession *this, const WebKit::WebFrameProxy *a2, const WTF::StringImpl *a3)
{
  if (!*((unsigned char *)a2 + 441))
  {
    *(_OWORD *)int v68 = *((_OWORD *)a2 + 17);
    uint64_t v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)this + 19, v68);
    uint64_t result = (WTF::StringImpl *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(&v69, (uint64_t *)this + 19, v12);
    unsigned int v14 = (_DWORD *)v69;
    if ((void)v69)
    {
      uint64_t v15 = (WTF::JSONImpl::Object *)WTF::RunLoop::TimerBase::stop((WebKit::WebAutomationSession *)((char *)this + 224));
      WTF::JSONImpl::Object::create((uint64_t *)v68, v15);
      Inspector::BackendDispatcher::CallbackBase::sendSuccess();
      uint64_t result = v68[0];
      v68[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1) {
          uint64_t result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*(_DWORD *)result;
        }
      }
      if (v14[2] == 1) {
        return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(void *)v14 + 8))(v14);
      }
      else {
        --v14[2];
      }
    }
    return result;
  }
  *(void *)&long long v69 = 0;
  uint64_t v5 = (uint64_t *)((char *)this + 128);
  uint64_t v6 = *((void *)this + 16);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = v6 + 24 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      uint64_t v9 = *((void *)this + 16);
      if (v7)
      {
        uint64_t v10 = 24 * v7;
        uint64_t v9 = *((void *)this + 16);
        while ((unint64_t)(*(void *)v9 + 1) <= 1)
        {
          v9 += 24;
          v10 -= 24;
          if (!v10)
          {
            uint64_t v9 = v8;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    uint64_t v9 = v6 + 24 * v7;
  }
  else
  {
    uint64_t v9 = 0;
    LODWORD(v7) = 0;
  }
  uint64_t v8 = v6 + 24 * v7;
  if (!v6)
  {
    uint64_t v11 = 0;
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v11 = v6 + 24 * *(unsigned int *)(v6 - 4);
LABEL_18:
  if (v11 == v9) {
    goto LABEL_45;
  }
  int v16 = (void *)((char *)this + 120);
  do
  {
    uint64_t v17 = WebKit::WebFrameProxy::webFrame(*(void *)(v9 + 8), *(void *)(v9 + 16));
    if (!v17) {
      goto LABEL_31;
    }
    uint64_t v18 = v17;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    uint64_t v20 = *(void *)(v18 + 24);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 8);
      if (v21) {
        uint64_t v20 = v21 - 16;
      }
      else {
        uint64_t v20 = 0;
      }
    }
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 8);
      if (v23) {
        uint64_t v22 = v23 - 16;
      }
      else {
        uint64_t v22 = 0;
      }
    }
    if (v20 == v22)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v69, (WTF::StringImpl **)v9, v19, (uint64_t)v68);
      uint64_t v25 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)this + 15, (void *)(v9 + 8));
      if (*v16)
      {
        uint64_t v26 = *v16 + 24 * *(unsigned int *)(*v16 - 4);
        if ((uint64_t *)v26 != v25) {
          goto LABEL_43;
        }
      }
      else if (v25)
      {
        uint64_t v26 = 0;
LABEL_43:
        if ((uint64_t *)v26 != v25) {
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove((uint64_t *)this + 15, (WTF::StringImpl *)v25);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_31:
    uint64_t v24 = v9 + 24;
    uint64_t v9 = v8;
    if (v24 != v8)
    {
      uint64_t v9 = v24;
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        v9 += 24;
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
  uint64_t v6 = *v5;
LABEL_45:
  if (v6)
  {
    unsigned int v27 = *(_DWORD *)(v6 - 4);
    if (v27)
    {
      int v28 = 0;
      do
      {
        char v29 = (const WTF::StringImpl **)(v6 + 24 * --v27);
        uint64_t v30 = *v29;
        if ((unint64_t)*v29 + 1 >= 2)
        {
          uint64_t v31 = v69;
          if ((void)v69)
          {
            int v32 = *(_DWORD *)(v69 - 8);
            unsigned int v33 = *((_DWORD *)v30 + 4);
            int v66 = v32;
            char v65 = v5;
            int v64 = v28;
            if (v33 >= 0x100)
            {
              unsigned int v34 = v33 >> 8;
            }
            else
            {
              unsigned int v34 = WTF::StringImpl::hashSlowCase(v30);
              int v32 = v66;
            }
            for (i = 0; ; unsigned int v34 = i + v36)
            {
              int v36 = v34 & v32;
              long long v37 = *(WTF **)(v31 + 8 * (v34 & v32));
              if (v37 != (WTF *)-1)
              {
                if (!v37)
                {
                  uint64_t v5 = v65;
                  int v28 = v64;
                  goto LABEL_50;
                }
                char v38 = WTF::equal(v37, *v29, a3);
                int v32 = v66;
                if (v38) {
                  break;
                }
              }
              ++i;
            }
            WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)(v6 + 24 * v27), v39);
            int v28 = v64 + 1;
            uint64_t v5 = v65;
          }
        }
LABEL_50:
        ;
      }
      while (v27);
      uint64_t v40 = *v5;
      if (v28)
      {
        *(_DWORD *)(v40 - 16) += v28;
        uint64_t v41 = *v5;
        if (*v5) {
          int v42 = *(_DWORD *)(v41 - 12);
        }
        else {
          int v42 = 0;
        }
        *(_DWORD *)(v41 - 12) = v42 - v28;
        uint64_t v40 = *v5;
      }
      if (v40)
      {
        unsigned int v43 = *(_DWORD *)(v40 - 4);
        uint64_t v44 = *(unsigned int *)(v40 - 12);
        if (v43 >= 9 && 6 * (int)v44 < v43)
        {
          unsigned int v46 = (v44 - 1) | ((v44 - 1) >> 1) | (((v44 - 1) | ((v44 - 1) >> 1)) >> 2);
          unsigned int v47 = v46 | (v46 >> 4) | ((v46 | (v46 >> 4)) >> 8);
          unint64_t v48 = (v47 | HIWORD(v47)) + 1;
          if (v48 > 0x400)
          {
            if (v48 <= 2 * v44)
            {
LABEL_74:
              LODWORD(v48) = 2 * v48;
              if (v48 <= 0x400) {
                goto LABEL_75;
              }
            }
            double v49 = (double)v44;
            double v50 = (double)v48;
            double v51 = 0.416666667;
          }
          else
          {
            if (3 * v48 <= 4 * v44) {
              goto LABEL_74;
            }
LABEL_75:
            double v49 = (double)v44;
            double v50 = (double)v48;
            double v51 = 0.604166667;
          }
          if (v50 * v51 <= v49) {
            LODWORD(v48) = 2 * v48;
          }
          if (v48 <= 8) {
            unsigned int v52 = 8;
          }
          else {
            unsigned int v52 = v48;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v52, 0);
        }
      }
    }
  }
  uint64_t v53 = *(void *)(*((void *)a2 + 3) + 8);
  if (v53) {
    uint64_t v54 = v53 - 16;
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v67 = *(_DWORD **)(*(void *)(v54 + 32) + 760);
  int v55 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 17, &v67);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take((uint64_t *)this + 17, v55, v68);
  if (v68[0])
  {
    char v56 = (WTF::JSONImpl::Object *)WTF::RunLoop::TimerBase::stop((WebKit::WebAutomationSession *)((char *)this + 224));
    WTF::JSONImpl::Object::create((uint64_t *)&v67, v56);
    Inspector::BackendDispatcher::CallbackBase::sendSuccess();
    uint64_t v57 = v67;
    uint64_t v67 = 0;
    if (v57)
    {
      if (*v57 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v57;
      }
    }
    uint64_t v58 = v68[0];
    v68[0] = 0;
    if (v58)
    {
      if (*((_DWORD *)v58 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v58 + 8))(v58);
      }
      else {
        --*((_DWORD *)v58 + 2);
      }
    }
  }
  char v59 = (Inspector::AutomationFrontendDispatcher *)*((void *)this + 12);
  uint64_t v60 = *(void *)(*((void *)a2 + 3) + 8);
  if (v60) {
    uint64_t v61 = (const WebKit::WebPageProxy *)(v60 - 16);
  }
  else {
    uint64_t v61 = 0;
  }
  WebKit::WebAutomationSession::handleForWebPageProxy(this, v61, v68);
  Inspector::AutomationFrontendDispatcher::browsingContextCleared(v59, (const WTF::String *)v68);
  uint64_t v63 = v68[0];
  v68[0] = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2) {
      WTF::StringImpl::destroy(v63, v62);
    }
    else {
      *(_DWORD *)v63 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)v69;
  if ((void)v69) {
    return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v69, v62);
  }
  return result;
}

_DWORD *WebKit::WebAutomationSession::documentLoadedForFrame(WebKit::WebAutomationSession *this, const WebKit::WebFrameProxy *a2)
{
  if (*((unsigned char *)a2 + 441))
  {
    uint64_t v3 = *(void *)(*((void *)a2 + 3) + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    *(void *)&long long v13 = *(void *)(*(void *)(v4 + 32) + 760);
    uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 18, &v13);
    uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take((uint64_t *)this + 18, v5, v12);
    if (v12[0])
    {
      uint64_t v7 = (WTF::JSONImpl::Object *)WTF::RunLoop::TimerBase::stop((WebKit::WebAutomationSession *)((char *)this + 224));
      WTF::JSONImpl::Object::create((uint64_t *)&v13, v7);
      Inspector::BackendDispatcher::CallbackBase::sendSuccess();
      uint64_t v8 = (_DWORD *)v13;
      *(void *)&long long v13 = 0;
      if (v8)
      {
        if (*v8 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v8;
        }
      }
      uint64_t result = (_DWORD *)v12[0];
      v12[0] = 0;
      if (result)
      {
        if (result[2] == 1) {
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
        }
        else {
          --result[2];
        }
      }
    }
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *((_OWORD *)a2 + 17);
    uint64_t v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)this + 20, v12);
    uint64_t result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(&v13, (uint64_t *)this + 20, v9);
    uint64_t v10 = (_DWORD *)v13;
    if ((void)v13)
    {
      uint64_t v11 = (WTF::JSONImpl::Object *)WTF::RunLoop::TimerBase::stop((WebKit::WebAutomationSession *)((char *)this + 224));
      WTF::JSONImpl::Object::create(v12, v11);
      Inspector::BackendDispatcher::CallbackBase::sendSuccess();
      uint64_t result = (_DWORD *)v12[0];
      v12[0] = 0;
      if (result)
      {
        if (*result == 1) {
          uint64_t result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*result;
        }
      }
      if (v10[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v10 + 8))(v10);
      }
      else {
        --v10[2];
      }
    }
  }
  return result;
}

uint64_t *WebKit::WebAutomationSession::inspectorFrontendLoaded(WebKit::WebAutomationSession *this, const WebKit::WebPageProxy *a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 168);
  uint64_t v6 = *(_DWORD **)(*((void *)a2 + 4) + 760);
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 21, &v6);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(v2, v3, &v7);
  if (v7)
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v6, (WTF::JSONImpl::Object *)result);
    Inspector::BackendDispatcher::CallbackBase::sendSuccess();
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    if (v5)
    {
      if (*v5 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v5;
      }
    }
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
  }
  return result;
}

uint64_t *WebKit::WebAutomationSession::keyboardEventsFlushedForPage(WebKit::WebAutomationSession *this, const WebKit::WebPageProxy *a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 176);
  uint64_t v11 = *(void *)(*((void *)a2 + 4) + 760);
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 22, &v11);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take(v2, v3, &v12);
  if (v12)
  {
    LOBYTE(v7) = 0;
    char v10 = 0;
    WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v12, &v7);
    if (v10)
    {
      if (v9)
      {
        uint64_t v6 = v8;
        uint64_t v8 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, v5);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
    }
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::willClosePage(WebKit::WebAutomationSession *this, const WebKit::WebPageProxy *a2)
{
  WebKit::WebAutomationSession::handleForWebPageProxy(this, a2, &v18);
  Inspector::AutomationFrontendDispatcher::browsingContextCleared(*((Inspector::AutomationFrontendDispatcher **)this + 12), (const WTF::String *)&v18);
  uint64_t v17 = *(WebKit::SimulatedInputDispatcher **)(*((void *)a2 + 4) + 760);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 22, &v17);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take((uint64_t *)this + 22, v4, &v19);
  if (v19)
  {
    int v13 = 9;
    LOBYTE(v14) = 0;
    char v15 = 0;
    char v16 = 1;
    WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(&v19, &v13);
    if (v16)
    {
      if (v15)
      {
        uint64_t v6 = v14;
        unsigned int v14 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, v5);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
    }
    uint64_t v7 = v19;
    uint64_t v19 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  uint64_t v8 = (uint64_t *)((char *)this + 288);
  uint64_t v19 = *(void *)(*((void *)a2 + 4) + 760);
  char v9 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8, &v19);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::take(v8, v9, &v17);
  uint64_t v11 = v17;
  if (v17)
  {
    if (*((void *)v17 + 6))
    {
      LODWORD(v19) = 5;
      char v20 = 0;
      char v21 = 0;
      char v22 = 1;
      WebKit::SimulatedInputDispatcher::finishDispatching((uint64_t)v17, (int *)&v19);
      uint64_t v11 = v17;
      uint64_t v17 = 0;
      if (!v11) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v11, v10);
  }
LABEL_16:
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::handleRunOpenPanel(WTF::JSONImpl::Object **this, const WebKit::WebPageProxy *a2, const WebKit::WebFrameProxy *a3, const API::OpenPanelParameters *a4, WebKit::WebOpenPanelResultListenerProxy *a5)
{
  WebKit::WebAutomationSession::handleForWebPageProxy((WebKit::WebAutomationSession *)this, a2, &v96);
  int v9 = *((_DWORD *)this + 67);
  if (!v9 || (v9 != 1 ? (BOOL v10 = *((unsigned char *)a4 + 17) == 0) : (BOOL v10 = 0), v10))
  {
    int v71 = (WebKit::WebPageProxy *)*((void *)a5 + 2);
    if (v71) {
      WebKit::WebPageProxy::didCancelForOpenPanel(v71, v8);
    }
    char v72 = this[12];
    long long v89 = 0;
    Inspector::AutomationFrontendDispatcher::fileChooserDismissed(v72, (WTF::JSONImpl::Value *)&v96, (WTF::JSONImpl::Value *)1, &v89);
    uint64_t v74 = v89;
    long long v89 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v74;
      }
    }
  }
  else
  {
    char v95 = 0;
    API::Array::createStringArray((uint64_t)a4 + 24, &v94);
    API::Array::elementsOfType<API::String>(v94, &v89);
    uint64_t v11 = v91;
    uint64_t v12 = v93;
    if (v91 != v93)
    {
      int v13 = v92;
      do
      {
        WTF::String::isolatedCopy();
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v95, v100, v14, (uint64_t)&v87);
        char v16 = v100[0];
        v100[0] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v15);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        uint64_t v17 = v11 + 1;
        while (v17 - 1 != v13 && v17 != v13)
        {
          uint64_t v19 = *v17++;
          if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 16))(v19) == 21)
          {
            uint64_t v11 = v17 - 1;
            goto LABEL_20;
          }
        }
        uint64_t v11 = v13;
LABEL_20:
        ;
      }
      while (v11 != v12);
    }
    uint64_t v86 = 0;
    API::Array::createStringArray((uint64_t)a4 + 40, &v85);
    API::Array::elementsOfType<API::String>(v85, &v89);
    char v21 = v91;
    char v22 = v93;
    if (v91 != v93)
    {
      uint64_t v23 = v92;
      do
      {
        WTF::String::isolatedCopy();
        if (v100[0])
        {
          WTF::StringImpl::substring(v100[0]);
          uint64_t v25 = v87;
        }
        else
        {
          uint64_t v25 = 0;
        }
        char v99 = v25;
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v86, &v99, v24, (uint64_t)&v87);
        uint64_t v26 = v99;
        char v99 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v20);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
        unsigned int v27 = v100[0];
        v100[0] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v20);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        int v28 = v21 + 1;
        while (v28 - 1 != v23 && v28 != v23)
        {
          uint64_t v30 = *v28++;
          if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 16))(v30) == 21)
          {
            char v21 = v28 - 1;
            goto LABEL_42;
          }
        }
        char v21 = v23;
LABEL_42:
        ;
      }
      while (v21 != v22);
    }
    uint64_t v31 = *((unsigned int *)this + 67);
    if (v31)
    {
      int v32 = this[32];
      unsigned int v33 = (WTF::FileSystemImpl *)((char *)v32 + 8 * v31);
      do
      {
        if (!WTF::FileSystemImpl::fileExists(v32, v20))
        {
LABEL_149:
          char v83 = (WebKit::WebPageProxy *)*((void *)a5 + 2);
          if (v83) {
            WebKit::WebPageProxy::didCancelForOpenPanel(v83, v20);
          }
          int v81 = this[12];
          long long v89 = 0;
          uint64_t v82 = 1;
          goto LABEL_152;
        }
        if (v95 && *((_DWORD *)v95 - 3) || v86 && *((_DWORD *)v86 - 3))
        {
          if (!*(void *)v32) {
            goto LABEL_149;
          }
          uint64_t v34 = WTF::StringImpl::reverseFind();
          if (v34 == -1) {
            goto LABEL_149;
          }
          int v35 = v34;
          int v36 = *(WTF::StringImpl **)v32;
          if (*(void *)v32)
          {
            if (v35 != -1 || (*((_DWORD *)v36 + 1) & 0x80000000) != 0)
            {
              WTF::StringImpl::substring(v36);
              int v87 = v89;
            }
            else
            {
              *(_DWORD *)v36 += 2;
              int v87 = v36;
            }
          }
          else
          {
            int v87 = 0;
          }
          WTF::String::convertToASCIILowercase((uint64_t *)v100, (WTF::String *)&v87);
          char v38 = v87;
          int v87 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2) {
              WTF::StringImpl::destroy(v38, v20);
            }
            else {
              *(_DWORD *)v38 -= 2;
            }
          }
          uint64_t v39 = v100[0];
          if (!v100[0]) {
            goto LABEL_149;
          }
          if (!*((_DWORD *)v100[0] + 1))
          {
            v100[0] = 0;
LABEL_146:
            if (*(_DWORD *)v39 == 2) {
              WTF::StringImpl::destroy(v39, v20);
            }
            else {
              *(_DWORD *)v39 -= 2;
            }
            goto LABEL_149;
          }
          uint64_t v40 = v86;
          if (v86)
          {
            int v52 = *((_DWORD *)v86 - 2);
            unsigned int v53 = *((_DWORD *)v100[0] + 4);
            if (v53 >= 0x100) {
              unsigned int v54 = v53 >> 8;
            }
            else {
              unsigned int v54 = WTF::StringImpl::hashSlowCase(v100[0]);
            }
            for (i = 0; ; unsigned int v54 = i + v59)
            {
              int v59 = v54 & v52;
              uint64_t v60 = v40[v54 & v52];
              if (v60 != (WTF *)-1)
              {
                if (!v60) {
                  goto LABEL_64;
                }
                if (WTF::equal(v60, v100[0], v37)) {
                  break;
                }
              }
              ++i;
            }
            uint64_t v61 = v100[0];
            v100[0] = 0;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2) {
                WTF::StringImpl::destroy(v61, v20);
              }
              else {
                *(_DWORD *)v61 -= 2;
              }
            }
            goto LABEL_98;
          }
LABEL_64:
          WebCore::MIMETypeRegistry::mimeTypeForExtension();
          WTF::String::convertToASCIILowercase((uint64_t *)&v99, (WTF::String *)&v89);
          int v42 = v89;
          long long v89 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2) {
              WTF::StringImpl::destroy(v42, v20);
            }
            else {
              *(_DWORD *)v42 -= 2;
            }
          }
          if (!v99)
          {
            uint64_t v39 = v100[0];
            v100[0] = 0;
            if (!v39) {
              goto LABEL_149;
            }
            goto LABEL_146;
          }
          if (*((_DWORD *)v99 + 1))
          {
            unsigned int v43 = v95;
            if (v95)
            {
              int v55 = *((_DWORD *)v95 - 2);
              unsigned int v56 = *((_DWORD *)v99 + 4);
              if (v56 >= 0x100) {
                unsigned int v57 = v56 >> 8;
              }
              else {
                unsigned int v57 = WTF::StringImpl::hashSlowCase(v99);
              }
              for (j = 0; ; unsigned int v57 = j + v66)
              {
                int v66 = v57 & v55;
                uint64_t v67 = v43[v57 & v55];
                if (v67 != (WTF *)-1)
                {
                  if (!v67) {
                    goto LABEL_71;
                  }
                  if (WTF::equal(v67, v99, v41)) {
                    break;
                  }
                }
                ++j;
              }
              LOBYTE(v49) = 1;
            }
            else
            {
LABEL_71:
              WTF::String::split();
              if (v88 == 2)
              {
                long long v45 = *(WTF::StringImpl **)v87;
                if (*(void *)v87) {
                  *(_DWORD *)v45 += 2;
                }
                uint64_t v97 = v45;
                long long v89 = (WTF::StringImpl *)"/*";
                uint64_t v90 = 3;
                WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v97, (uint64_t *)&v89, &v98);
                uint64_t result = v98;
                if (!v98)
                {
                  __break(0xC471u);
                  return result;
                }
                unint64_t v48 = v97;
                uint64_t v97 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                  {
                    WTF::StringImpl::destroy(v48, v44);
                    uint64_t result = v98;
                  }
                  else
                  {
                    *(_DWORD *)v48 -= 2;
                  }
                }
                double v49 = v95;
                if (v95)
                {
                  int v62 = *((_DWORD *)v95 - 2);
                  unsigned int v63 = *((_DWORD *)result + 4);
                  if (v63 >= 0x100) {
                    unsigned int v64 = v63 >> 8;
                  }
                  else {
                    unsigned int v64 = WTF::StringImpl::hashSlowCase(result);
                  }
                  for (k = 0; ; unsigned int v64 = k + v69)
                  {
                    int v69 = v64 & v62;
                    char v70 = v49[v64 & v62];
                    if (v70 != (WTF *)-1)
                    {
                      if (!v70)
                      {
                        LOBYTE(v49) = 0;
                        goto LABEL_132;
                      }
                      if (WTF::equal(v70, v98, v46)) {
                        break;
                      }
                    }
                    ++k;
                  }
                  LOBYTE(v49) = 1;
LABEL_132:
                  uint64_t result = v98;
                }
                int v98 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2) {
                    WTF::StringImpl::destroy(result, v44);
                  }
                  else {
                    *(_DWORD *)result -= 2;
                  }
                }
              }
              else
              {
                LOBYTE(v49) = 0;
              }
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v44);
            }
          }
          else
          {
            LOBYTE(v49) = 0;
          }
          double v50 = v99;
          char v99 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2) {
              WTF::StringImpl::destroy(v50, v20);
            }
            else {
              *(_DWORD *)v50 -= 2;
            }
          }
          double v51 = v100[0];
          v100[0] = 0;
          if (!v51) {
            goto LABEL_95;
          }
          if (*(_DWORD *)v51 != 2)
          {
            *(_DWORD *)v51 -= 2;
LABEL_95:
            if ((v49 & 1) == 0) {
              goto LABEL_149;
            }
            goto LABEL_98;
          }
          WTF::StringImpl::destroy(v51, v20);
          if ((v49 & 1) == 0) {
            goto LABEL_149;
          }
        }
LABEL_98:
        int v32 = (WTF::FileSystemImpl *)((char *)v32 + 8);
      }
      while (v32 != v33);
    }
    char v75 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase(v75);
    uint64_t v77 = *((unsigned int *)this + 67);
    if (v77)
    {
      __int16 v78 = this[32];
      uint64_t v79 = 8 * v77;
      do
      {
        WTF::JSONImpl::ArrayOf<WTF::String>::addItem<WTF::String>((uint64_t)v75, v78);
        __int16 v78 = (WTF::JSONImpl::Value *)((char *)v78 + 8);
        v79 -= 8;
      }
      while (v79);
    }
    long long v89 = 0;
    uint64_t v90 = 0;
    uint64_t v80 = (WTF *)*((void *)a5 + 2);
    if (v80) {
      WebKit::WebPageProxy::didChooseFilesForOpenPanel(v80, (uint64_t)(this + 32), (uint64_t)&v89);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v76);
    int v81 = this[12];
    long long v89 = v75;
    uint64_t v82 = 0;
LABEL_152:
    Inspector::AutomationFrontendDispatcher::fileChooserDismissed(v81, (WTF::JSONImpl::Value *)&v96, (WTF::JSONImpl::Value *)v82, &v89);
    char v84 = v89;
    long long v89 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v84;
      }
    }
    if (v85) {
      CFRelease(*(CFTypeRef *)(v85 + 8));
    }
    if (v86) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v86, v73);
    }
    if (v94) {
      CFRelease(*(CFTypeRef *)(v94 + 8));
    }
    if (v95) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v95, v73);
    }
  }
  uint64_t result = v96;
  uint64_t v96 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v73);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebAutomationSession::evaluateJavaScriptFunction(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl *a4, uint64_t *a5, unsigned char *a6, unsigned char *a7, uint64_t a8, Inspector::BackendDispatcher::CallbackBase **a9)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v75, a1, a2);
  uint64_t v16 = v75;
  if (v75)
  {
    char v74 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v72, a1, a3, &v74);
    if (v74)
    {
      uint64_t v17 = *a9;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, v65);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)v65);
      uint64_t v19 = v65[0];
      v65[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
LABEL_59:
      CFRelease(*(CFTypeRef *)(v16 + 8));
      return;
    }
    uint64_t v23 = *a5;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v24 = *(unsigned int *)(v23 + 28);
    if (v24)
    {
      if (v24 >> 29)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v25 = WTF::fastMalloc((WTF *)(8 * v24));
      LODWORD(v71) = v24;
      uint64_t v70 = v25;
      uint64_t v26 = *(unsigned int *)(v23 + 28);
      if (v26)
      {
        uint64_t v27 = v25;
        unsigned int v63 = a6;
        int v28 = a7;
        char v29 = a4;
        uint64_t v30 = a8;
        uint64_t v31 = 0;
        uint64_t v32 = *(void *)(v23 + 16);
        uint64_t v33 = 8 * v26;
        do
        {
          uint64_t v34 = v31;
          WTF::JSONImpl::Value::asString((uint64_t *)v65, *(WTF::JSONImpl::Value **)(v32 + 8 * v31));
          uint64_t v31 = v34 + 1;
          *(WTF::StringImpl **)(v27 + 8 * v34) = v65[0];
          v33 -= 8;
        }
        while (v33);
        HIDWORD(v71) = v34 + 1;
        a8 = v30;
        a4 = v29;
        a7 = v28;
        a6 = v63;
      }
    }
    uint64_t v37 = *((void *)a1 + 24);
    int v36 = (uint64_t *)((char *)a1 + 192);
    uint64_t v35 = v37;
    uint64_t v38 = *(v36 - 1);
    *(v36 - 1) = v38 + 1;
    if (v37
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v36),
          (uint64_t v35 = *v36) != 0))
    {
      int v39 = *(_DWORD *)(v35 - 8);
    }
    else
    {
      int v39 = 0;
    }
    unint64_t v40 = (v38 + ~(v38 << 32)) ^ ((unint64_t)(v38 + ~(v38 << 32)) >> 22);
    unint64_t v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
    unint64_t v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
    unsigned int v43 = v39 & ((v42 >> 31) ^ v42);
    uint64_t v44 = (void *)(v35 + 16 * v43);
    uint64_t v45 = *v44;
    if (*v44)
    {
      unsigned int v46 = 0;
      int v47 = 1;
      while (v45 != v38)
      {
        if (v45 == -1) {
          unsigned int v46 = v44;
        }
        unsigned int v43 = (v43 + v47) & v39;
        uint64_t v44 = (void *)(v35 + 16 * v43);
        uint64_t v45 = *v44;
        ++v47;
        if (!*v44)
        {
          if (v46)
          {
            *unsigned int v46 = 0;
            v46[1] = 0;
            --*(_DWORD *)(*v36 - 16);
            uint64_t v44 = v46;
          }
          goto LABEL_26;
        }
      }
      double v50 = *a9;
      *a9 = 0;
      double v51 = (_DWORD *)v44[1];
      v44[1] = v50;
      if (v51)
      {
        if (v51[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v51 + 8))(v51);
        }
        else {
          --v51[2];
        }
      }
      goto LABEL_46;
    }
LABEL_26:
    *uint64_t v44 = v38;
    unint64_t v48 = *a9;
    *a9 = 0;
    double v49 = (_DWORD *)v44[1];
    v44[1] = v48;
    if (v49)
    {
      if (v49[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v49 + 8))(v49);
      }
      else {
        --v49[2];
      }
    }
    uint64_t v52 = *v36;
    if (*v36) {
      int v53 = *(_DWORD *)(v52 - 12) + 1;
    }
    else {
      int v53 = 1;
    }
    *(_DWORD *)(v52 - 12) = v53;
    uint64_t v54 = *v36;
    if (*v36) {
      int v55 = *(_DWORD *)(v54 - 12);
    }
    else {
      int v55 = 0;
    }
    uint64_t v56 = (*(_DWORD *)(v54 - 16) + v55);
    unint64_t v57 = *(unsigned int *)(v54 - 4);
    if (v57 > 0x400)
    {
      if (v57 > 2 * v56) {
        goto LABEL_46;
      }
    }
    else if (3 * v57 > 4 * v56)
    {
LABEL_46:
      long long v78 = v72;
      uint64_t v79 = v73;
      uint64_t v64 = *(void *)(*(void *)(v16 + 32) + 1928);
      if (a6[1]) {
        BOOL v58 = *a6 == 0;
      }
      else {
        BOOL v58 = 1;
      }
      char v59 = !v58;
      if (a7[1]) {
        BOOL v60 = *a7 == 0;
      }
      else {
        BOOL v60 = 1;
      }
      char v61 = !v60;
      v65[0] = (WTF::StringImpl *)&v64;
      v65[1] = (WTF::StringImpl *)&v72;
      v65[2] = a4;
      v65[3] = (WTF::StringImpl *)&v70;
      char v66 = v59;
      char v67 = v61;
      uint64_t v68 = a8;
      uint64_t v69 = v38;
      uint64_t v76 = v65;
      char v77 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction&)#1}>(v16, (uint64_t)&v78, (uint64_t)&v76);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v62);
      goto LABEL_59;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v36);
    uint64_t v16 = v75;
    goto LABEL_46;
  }
  char v20 = *a9;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v65);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v20, (const WTF::String *)v65);
  char v22 = v65[0];
  v65[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::evaluateJavaScriptFunction(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl *a4, uint64_t *a5, unsigned char *a6, unsigned char *a7, uint64_t a8, Inspector::BackendDispatcher::CallbackBase **a9)
{
}

WTF::StringImpl *WebKit::WebAutomationSession::didEvaluateJavaScriptFunction(WebKit::WebAutomationSession *this, uint64_t a2, WTF::StringImpl **a3, const WTF::String *a4)
{
  uint64_t v6 = (uint64_t *)((char *)this + 192);
  uint64_t v7 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)this + 24), a2);
  uint64_t result = (WTF::StringImpl *)WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::take(&v18, v6, v7);
  int v9 = v18;
  if (v18)
  {
    if (*(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
    {
      uint64_t v10 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(a4);
      if ((v10 & 0xFF00000000) != 0) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = 5;
      }
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v10, &v16);
      uint64_t v11 = *a3;
      if (*a3) {
        *(_DWORD *)v11 += 2;
      }
      char v15 = v11;
      WTF::makeString<WTF::String,char,WTF::String>((uint64_t *)&v16, 59, (uint64_t *)&v15, &v17);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)&v17);
      int v13 = v17;
      uint64_t v17 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      unsigned int v14 = v15;
      char v15 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t result = v16;
      uint64_t v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      uint64_t result = (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(v18, (const WTF::String *)a3);
    }
    if (*((_DWORD *)v9 + 2) == 1) {
      return (WTF::StringImpl *)(*(uint64_t (**)(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *))(*(void *)v9 + 8))(v9);
    }
    else {
      --*((_DWORD *)v9 + 2);
    }
  }
  return result;
}

void WebKit::WebAutomationSession::resolveChildFrameHandle(CFTypeRef *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, int *a4, void *a5, void *a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
  if (*((unsigned char *)a4 + 4)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *a5 == 0;
  }
  if (!v8 || *a6 != 0)
  {
    WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v36, (const WTF::String *)a1, a2);
    uint64_t v15 = v36;
    if (v36)
    {
      char v35 = 0;
      WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v33, (const WTF::String *)a1, a3, &v35);
      if (v35)
      {
        uint64_t v16 = *a7;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v41);
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v16, (const WTF::String *)&v41);
        uint64_t v18 = (WTF::StringImpl *)v41;
        *(void *)&long long v41 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v17);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      else
      {
        CFRetain(a1[1]);
        uint64_t v24 = *a7;
        ++*((_DWORD *)v24 + 2);
        uint64_t v25 = (void *)WTF::fastMalloc((WTF *)0x20);
        *uint64_t v25 = &unk_1EE9FAB70;
        v25[1] = a1;
        v25[2] = a1;
        uint64_t v25[3] = v24;
        uint64_t v32 = v25;
        if (*a6)
        {
          long long v41 = v33;
          uint64_t v42 = v34;
          uint64_t v28 = *(void *)(*(void *)(v15 + 32) + 1928);
          char v29 = &v28;
          uint64_t v30 = &v33;
          uint64_t v31 = a6;
          uint64_t v38 = (WTF::StringImpl *)&v29;
          int v39 = &v32;
          char v40 = 0;
          WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(v15, (uint64_t)&v41, (uint64_t)&v38);
        }
        else if (*a5)
        {
          long long v41 = v33;
          uint64_t v42 = v34;
          uint64_t v28 = *(void *)(*(void *)(v15 + 32) + 1928);
          char v29 = &v28;
          uint64_t v30 = &v33;
          uint64_t v31 = a5;
          uint64_t v38 = (WTF::StringImpl *)&v29;
          int v39 = &v32;
          char v40 = 0;
          WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithName &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(v15, (uint64_t)&v41, (uint64_t)&v38);
        }
        else if (*((unsigned char *)a4 + 4))
        {
          long long v41 = v33;
          uint64_t v42 = v34;
          int v26 = *a4;
          uint64_t v28 = *(void *)(*(void *)(v15 + 32) + 1928);
          char v29 = &v28;
          uint64_t v30 = &v33;
          LODWORD(v31) = v26;
          uint64_t v38 = (WTF::StringImpl *)&v29;
          int v39 = &v32;
          char v40 = 0;
          WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(v15, (uint64_t)&v41, (uint64_t)&v38);
        }
        uint64_t v27 = v32;
        uint64_t v32 = 0;
        if (v27) {
          (*(void (**)(void *))(*v27 + 8))(v27);
        }
      }
      CFRelease(*(CFTypeRef *)(v15 + 8));
      return;
    }
    char v22 = *a7;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v41);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v22, (const WTF::String *)&v41);
    uint64_t v23 = (WTF::StringImpl *)v41;
    *(void *)&long long v41 = 0;
    if (!v23) {
      return;
    }
LABEL_21:
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v20);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
    return;
  }
  uint64_t v19 = *a7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v37);
  *(void *)&long long v41 = "Command must specify a child frame by ordinal, name, or element handle.";
  *((void *)&v41 + 1) = 72;
  LOBYTE(v33) = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v37, (char *)&v33, (uint64_t *)&v41, &v38);
  if (!v38)
  {
    __break(0xC471u);
    return;
  }
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v19, (const WTF::String *)&v38);
  char v21 = v38;
  uint64_t v38 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v23 = v37;
  uint64_t v37 = 0;
  if (v23) {
    goto LABEL_21;
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::resolveChildFrameHandle(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, int *a4, void *a5, void *a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
}

void WebKit::WebAutomationSession::resolveParentFrameHandle(CFTypeRef *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v23, (const WTF::String *)a1, a2);
  uint64_t v7 = v23;
  if (v23)
  {
    char v22 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v20, (const WTF::String *)a1, a3, &v22);
    if (v22)
    {
      BOOL v8 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v26);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v26);
      uint64_t v10 = (WTF::StringImpl *)v26;
      *(void *)&long long v26 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    else
    {
      CFRetain(a1[1]);
      unsigned int v14 = *a4;
      ++*((_DWORD *)v14 + 2);
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v15 = &unk_1EE9FAB98;
      v15[1] = a1;
      _OWORD v15[2] = a1;
      v15[3] = v14;
      v18[1] = &v20;
      uint64_t v19 = v15;
      long long v26 = v20;
      uint64_t v27 = v21;
      uint64_t v17 = *(void *)(*(void *)(v7 + 32) + 1928);
      v18[0] = &v17;
      v24[0] = v18;
      v24[1] = &v19;
      char v25 = 0;
      WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,Messages::WebAutomationSessionProxy::ResolveParentFrame &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(v7, (uint64_t)&v26, (uint64_t)v24);
      uint64_t v16 = v19;
      uint64_t v19 = 0;
      if (v16) {
        (*(void (**)(void *))(*v16 + 8))(v16);
      }
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    uint64_t v11 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v26);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v11, (const WTF::String *)&v26);
    int v13 = (WTF::StringImpl *)v26;
    *(void *)&long long v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::resolveParentFrameHandle(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
}

void WebKit::WebAutomationSession::computeElementLayout(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, unsigned char *a5, unsigned int a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v39, a1, a2);
  uint64_t v13 = v39;
  if (v39)
  {
    char v38 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v36, a1, a3, &v38);
    if (v38)
    {
      unsigned int v14 = *a7;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v29);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v14, (const WTF::String *)&v29);
      uint64_t v16 = v29;
      char v29 = 0;
      if (!v16)
      {
LABEL_27:
        CFRelease(*(CFTypeRef *)(v13 + 8));
        return;
      }
    }
    else
    {
      if (a6 < 3)
      {
        unsigned int v20 = 0x10100u >> (8 * a6);
        uint64_t v21 = *a7;
        ++*((_DWORD *)v21 + 2);
        char v22 = (void *)WTF::fastMalloc((WTF *)0x10);
        *char v22 = &unk_1EE9FABC0;
        v22[1] = v21;
        uint64_t v34 = v22;
        if (a5[1]) {
          BOOL v23 = *a5 == 0;
        }
        else {
          BOOL v23 = 1;
        }
        char v24 = !v23;
        long long v42 = v36;
        uint64_t v43 = v37;
        uint64_t v28 = *(void *)(*(void *)(v13 + 32) + 1928);
        char v29 = (WTF::StringImpl *)&v28;
        uint64_t v30 = (uint64_t)&v36;
        uint64_t v31 = a4;
        char v32 = v24;
        char v33 = v20;
        v40[0] = &v29;
        v40[1] = &v34;
        char v41 = 0;
        WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(IPC::AsyncReplyIDType)1>>>,Messages::WebAutomationSessionProxy::ComputeElementLayout &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)::SendOption>)::{lambda(std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(IPC::AsyncReplyIDType)1>&)#1}>(v13, (uint64_t)&v42, (uint64_t)v40);
        char v25 = v34;
        uint64_t v34 = 0;
        if (v25) {
          (*(void (**)(void *))(*v25 + 8))(v25);
        }
        goto LABEL_27;
      }
      long long v26 = *a7;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v35);
      char v29 = (WTF::StringImpl *)"The parameter 'coordinateSystem' is invalid.";
      uint64_t v30 = 45;
      LOBYTE(v40[0]) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v35, (char *)v40, (uint64_t *)&v29, &v42);
      if (!(void)v42)
      {
        __break(0xC471u);
        return;
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v26, (const WTF::String *)&v42);
      uint64_t v27 = (WTF::StringImpl *)v42;
      *(void *)&long long v42 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v15);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      uint64_t v16 = v35;
      char v35 = 0;
      if (!v16) {
        goto LABEL_27;
      }
    }
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
    goto LABEL_27;
  }
  uint64_t v17 = *a7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v29);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)&v29);
  uint64_t v19 = v29;
  char v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::computeElementLayout(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, unsigned char *a5, unsigned int a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
}

void WebKit::WebAutomationSession::getComputedRole(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v25, a1, a2);
  uint64_t v9 = v25;
  if (v25)
  {
    char v24 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v22, a1, a3, &v24);
    if (v24)
    {
      uint64_t v10 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v28);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v28);
      uint64_t v12 = (WTF::StringImpl *)v28;
      *(void *)&long long v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    else
    {
      uint64_t v16 = *a5;
      ++*((_DWORD *)v16 + 2);
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v17 = &unk_1EE9FABE8;
      v17[1] = v16;
      void v20[2] = a4;
      uint64_t v21 = v17;
      long long v28 = v22;
      uint64_t v29 = v23;
      uint64_t v19 = *(void *)(*(void *)(v9 + 32) + 1928);
      v20[0] = &v19;
      v20[1] = &v22;
      v26[0] = v20;
      v26[1] = &v21;
      char v27 = 0;
      WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebAutomationSessionProxy::GetComputedRole &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(v9, (uint64_t)&v28, (uint64_t)v26);
      uint64_t v18 = v21;
      uint64_t v21 = 0;
      if (v18) {
        (*(void (**)(void *))(*v18 + 8))(v18);
      }
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    uint64_t v13 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v28);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v13, (const WTF::String *)&v28);
    uint64_t v15 = (WTF::StringImpl *)v28;
    *(void *)&long long v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::getComputedRole(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
}

void WebKit::WebAutomationSession::getComputedLabel(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v25, a1, a2);
  uint64_t v9 = v25;
  if (v25)
  {
    char v24 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v22, a1, a3, &v24);
    if (v24)
    {
      uint64_t v10 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v28);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v28);
      uint64_t v12 = (WTF::StringImpl *)v28;
      *(void *)&long long v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    else
    {
      uint64_t v16 = *a5;
      ++*((_DWORD *)v16 + 2);
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v17 = &unk_1EE9FAC10;
      v17[1] = v16;
      void v20[2] = a4;
      uint64_t v21 = v17;
      long long v28 = v22;
      uint64_t v29 = v23;
      uint64_t v19 = *(void *)(*(void *)(v9 + 32) + 1928);
      v20[0] = &v19;
      v20[1] = &v22;
      v26[0] = v20;
      v26[1] = &v21;
      char v27 = 0;
      WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebAutomationSessionProxy::GetComputedLabel &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(v9, (uint64_t)&v28, (uint64_t)v26);
      uint64_t v18 = v21;
      uint64_t v21 = 0;
      if (v18) {
        (*(void (**)(void *))(*v18 + 8))(v18);
      }
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    uint64_t v13 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v28);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v13, (const WTF::String *)&v28);
    uint64_t v15 = (WTF::StringImpl *)v28;
    *(void *)&long long v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::getComputedLabel(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
}

void WebKit::WebAutomationSession::selectOptionElement(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v25, a1, a2);
  uint64_t v9 = v25;
  if (v25)
  {
    char v24 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v22, a1, a3, &v24);
    if (v24)
    {
      uint64_t v10 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v28);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v28);
      uint64_t v12 = (WTF::StringImpl *)v28;
      *(void *)&long long v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v11);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    else
    {
      uint64_t v16 = *a5;
      ++*((_DWORD *)v16 + 2);
      uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v17 = &unk_1EE9FAC38;
      v17[1] = v16;
      void v20[2] = a4;
      uint64_t v21 = v17;
      long long v28 = v22;
      uint64_t v29 = v23;
      uint64_t v19 = *(void *)(*(void *)(v9 + 32) + 1928);
      v20[0] = &v19;
      v20[1] = &v22;
      v26[0] = v20;
      v26[1] = &v21;
      char v27 = 0;
      WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebAutomationSessionProxy::SelectOptionElement &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(v9, (uint64_t)&v28, (uint64_t)v26);
      uint64_t v18 = v21;
      uint64_t v21 = 0;
      if (v18) {
        (*(void (**)(void *))(*v18 + 8))(v18);
      }
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    uint64_t v13 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v28);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v13, (const WTF::String *)&v28);
    uint64_t v15 = (WTF::StringImpl *)v28;
    *(void *)&long long v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::selectOptionElement(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
}

void WebKit::WebAutomationSession::isShowingJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a3;
  if (!*((void *)this + 7))
  {
    uint64_t v7 = 5;
LABEL_6:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v7, a3);
    int v6 = 1;
    goto LABEL_7;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v8, this, a2);
  uint64_t v5 = v8;
  if (!v8)
  {
    a3 = v3;
    uint64_t v7 = 9;
    goto LABEL_6;
  }
  *(unsigned char *)uint64_t v3 = (*(uint64_t (**)(void, WebKit::WebAutomationSession *, uint64_t))(**((void **)this + 7)
                                                                                            + 72))(*((void *)this + 7), this, v8);
  CFRelease(*(CFTypeRef *)(v5 + 8));
  int v6 = 0;
LABEL_7:
  *((_DWORD *)v3 + 2) = v6;
}

void non-virtual thunk to'WebKit::WebAutomationSession::isShowingJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
}

void WebKit::WebAutomationSession::dismissCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a3;
  if (!*((void *)this + 7))
  {
    uint64_t v7 = 5;
LABEL_7:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v7, a3);
    *((unsigned char *)v3 + 8) = 1;
    return;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v8, this, a2);
  uint64_t v5 = v8;
  if (!v8)
  {
    a3 = v3;
    uint64_t v7 = 9;
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void, WebKit::WebAutomationSession *, uint64_t))(**((void **)this + 7) + 72))(*((void *)this + 7), this, v8))
  {
    (*(void (**)(void, WebKit::WebAutomationSession *, uint64_t))(**((void **)this + 7) + 80))(*((void *)this + 7), this, v5);
    char v6 = 0;
    *(unsigned char *)uint64_t v3 = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(14, v3);
    char v6 = 1;
  }
  *((unsigned char *)v3 + 8) = v6;
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void non-virtual thunk to'WebKit::WebAutomationSession::dismissCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
}

void WebKit::WebAutomationSession::acceptCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a3;
  if (!*((void *)this + 7))
  {
    uint64_t v7 = 5;
LABEL_7:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v7, a3);
    *((unsigned char *)v3 + 8) = 1;
    return;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v8, this, a2);
  uint64_t v5 = v8;
  if (!v8)
  {
    a3 = v3;
    uint64_t v7 = 9;
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void, WebKit::WebAutomationSession *, uint64_t))(**((void **)this + 7) + 72))(*((void *)this + 7), this, v8))
  {
    (*(void (**)(void, WebKit::WebAutomationSession *, uint64_t))(**((void **)this + 7) + 88))(*((void *)this + 7), this, v5);
    char v6 = 0;
    *(unsigned char *)uint64_t v3 = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(14, v3);
    char v6 = 1;
  }
  *((unsigned char *)v3 + 8) = v6;
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void non-virtual thunk to'WebKit::WebAutomationSession::acceptCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
}

void WebKit::WebAutomationSession::messageOfCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a3;
  if (!*((void *)this + 7))
  {
    uint64_t v8 = 5;
LABEL_7:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v8, a3);
    *((_DWORD *)v3 + 2) = 1;
    return;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v10, this, a2);
  uint64_t v5 = v10;
  if (!v10)
  {
    a3 = v3;
    uint64_t v8 = 9;
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(void, WebKit::WebAutomationSession *, uint64_t))(**((void **)this + 7) + 72))(*((void *)this + 7), this, v10))
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 7) + 96))(&v9);
    int v6 = 0;
    uint64_t v7 = v9;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(14, &v9);
    uint64_t v7 = v9;
    int v6 = 1;
  }
  void *v3 = v7;
  *((_DWORD *)v3 + 2) = v6;
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void non-virtual thunk to'WebKit::WebAutomationSession::messageOfCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
}

void WebKit::WebAutomationSession::setUserInputForCurrentJavaScriptPrompt(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a4;
  if (!*((void *)this + 7))
  {
    uint64_t v11 = 5;
LABEL_9:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v11, a4);
    unsigned char v4[8] = 1;
    return;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v16, this, a2);
  uint64_t v7 = v16;
  if (!v16)
  {
    a4 = v4;
    uint64_t v11 = 9;
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(void, WebKit::WebAutomationSession *, uint64_t))(**((void **)this + 7) + 72))(*((void *)this + 7), this, v16))
  {
    uint64_t v8 = (*(uint64_t (**)(void, WebKit::WebAutomationSession *, uint64_t))(**((void **)this + 7) + 112))(*((void *)this + 7), this, v7);
    if ((v8 & 0xFF00000000) == 0)
    {
      uint64_t v13 = (WebKit::WebAutomationSession *)std::__throw_bad_optional_access[abi:sn180100]();
      return;
    }
    if (v8 >= 2)
    {
      if (v8 != 3)
      {
        (*(void (**)(void, WebKit::WebAutomationSession *, uint64_t, const WTF::String *))(**((void **)this + 7) + 104))(*((void *)this + 7), this, v7, a3);
        char v12 = 0;
        unsigned char *v4 = 0;
        goto LABEL_12;
      }
      uint64_t v9 = v4;
      uint64_t v10 = 15;
    }
    else
    {
      uint64_t v9 = v4;
      uint64_t v10 = 19;
    }
  }
  else
  {
    uint64_t v9 = v4;
    uint64_t v10 = 14;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v10, v9);
  char v12 = 1;
LABEL_12:
  unsigned char v4[8] = v12;
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

void non-virtual thunk to'WebKit::WebAutomationSession::setUserInputForCurrentJavaScriptPrompt(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, void *a4@<X8>)
{
}

uint64_t WebKit::WebAutomationSession::setFilesToSelectForFileUpload@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::JSONImpl::ArrayBase **a3@<X2>, WTF::JSONImpl::ArrayBase **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v9 = *a3;
  uint64_t v10 = *((unsigned int *)*a3 + 7);
  if (v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19924491CLL);
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)(8 * v10));
    LODWORD(v44) = v10;
    uint64_t v43 = v11;
    uint64_t v9 = *a3;
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (*a4)
  {
    int v12 = *((_DWORD *)*a4 + 7);
    if (v12 != *((_DWORD *)v9 + 7))
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v42);
      unsigned int v46 = (WTF::JSONImpl::Value *)"The parameters 'filenames' and 'fileContents' must have equal length.";
      uint64_t v47 = 70;
      LOBYTE(v41) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v42, (char *)&v41, (uint64_t *)&v46, &v36);
      if (!v36)
      {
        __break(0xC471u);
LABEL_79:
        JUMPOUT(0x19924490CLL);
      }
      *(void *)a5 = v36;
      *(unsigned char *)(a5 + 8) = 1;
      long long v36 = 0;
      uint64_t v13 = v42;
      long long v42 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, a2);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
    }
  }
  else
  {
    int v12 = *((_DWORD *)v9 + 7);
  }
  if (v12)
  {
    unint64_t v14 = 0;
    while (1)
    {
      WTF::JSONImpl::ArrayBase::get(v9);
      WTF::JSONImpl::Value::asString((uint64_t *)&v41, v46);
      uint64_t v15 = v46;
      unsigned int v46 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*(_DWORD *)v15;
        }
      }
      uint64_t v16 = v41;
      if (v41)
      {
        if (*a4)
        {
          WTF::JSONImpl::ArrayBase::get(*a4);
          WTF::JSONImpl::Value::asString((uint64_t *)&v39, v46);
          uint64_t v17 = v46;
          unsigned int v46 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1) {
              WTF::JSONImpl::Value::operator delete();
            }
            else {
              --*(_DWORD *)v17;
            }
          }
          if (v39)
          {
            WebKit::WebAutomationSession::platformGenerateLocalFilePathForRemoteFile((const WTF::String *)&v41, (const WTF::String *)&v39, &v36);
            if (v37)
            {
              uint64_t v22 = HIDWORD(v44);
              if (HIDWORD(v44) == v44)
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v43, (unint64_t)&v36);
                int v21 = 0;
              }
              else
              {
                uint64_t v23 = v43;
                char v24 = v36;
                if (v36) {
                  *(_DWORD *)v36 += 2;
                }
                int v21 = 0;
                *(void *)(v23 + 8 * v22) = v24;
                HIDWORD(v44) = v22 + 1;
              }
            }
            else
            {
              Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v34);
              unsigned int v46 = (WTF::JSONImpl::Value *)"The remote file could not be saved to a local temporary directory.";
              uint64_t v47 = 67;
              char v45 = 59;
              WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v34, &v45, (uint64_t *)&v46, &v35);
              if (!v35)
              {
                __break(0xC471u);
                JUMPOUT(0x199244924);
              }
              *(void *)a5 = v35;
              *(unsigned char *)(a5 + 8) = 1;
              long long v26 = v34;
              uint64_t v34 = 0;
              uint64_t v35 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2) {
                  WTF::StringImpl::destroy(v26, a2);
                }
                else {
                  *(_DWORD *)v26 -= 2;
                }
              }
              int v21 = 1;
            }
            if (v37)
            {
              char v27 = v36;
              long long v36 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2) {
                  WTF::StringImpl::destroy(v27, a2);
                }
                else {
                  *(_DWORD *)v27 -= 2;
                }
              }
            }
          }
          else
          {
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v38);
            unsigned int v46 = (WTF::JSONImpl::Value *)"The parameter 'fileContents' contains a non-string value.";
            uint64_t v47 = 58;
            LOBYTE(v35) = 59;
            WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v38, (char *)&v35, (uint64_t *)&v46, &v36);
            if (!v36)
            {
              __break(0xC471u);
              JUMPOUT(0x199244914);
            }
            *(void *)a5 = v36;
            *(unsigned char *)(a5 + 8) = 1;
            long long v36 = 0;
            uint64_t v25 = v38;
            char v38 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, a2);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
            int v21 = 1;
          }
          long long v28 = v39;
          uint64_t v39 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, a2);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
        }
        else
        {
          uint64_t v19 = HIDWORD(v44);
          if (HIDWORD(v44) == v44)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v43, (unint64_t)&v41);
          }
          else
          {
            uint64_t v20 = v43;
            *(_DWORD *)v41 += 2;
            *(void *)(v20 + 8 * v19) = v16;
            HIDWORD(v44) = v19 + 1;
          }
          int v21 = 6;
        }
      }
      else
      {
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v40);
        unsigned int v46 = (WTF::JSONImpl::Value *)"The parameter 'filenames' contains a non-string value.";
        uint64_t v47 = 55;
        LOBYTE(v39) = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v40, (char *)&v39, (uint64_t *)&v46, &v36);
        if (!v36)
        {
          __break(0xC471u);
          goto LABEL_79;
        }
        *(void *)a5 = v36;
        *(unsigned char *)(a5 + 8) = 1;
        long long v36 = 0;
        uint64_t v18 = v40;
        char v40 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, a2);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        int v21 = 1;
      }
      uint64_t v29 = v41;
      char v41 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, a2);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      if (v21 != 6 && v21) {
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
      }
      ++v14;
      uint64_t v9 = *a3;
      if (v14 >= *((unsigned int *)*a3 + 7))
      {
        uint64_t v11 = v43;
        uint64_t v30 = v44;
        goto LABEL_70;
      }
    }
  }
  uint64_t v30 = v10;
LABEL_70:
  uint64_t v31 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v11;
  uint64_t v43 = v31;
  uint64_t v32 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = v30;
  uint64_t v44 = v32;
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 8) = 0;
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
}

uint64_t non-virtual thunk to'WebKit::WebAutomationSession::setFilesToSelectForFileUpload@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::JSONImpl::ArrayBase **a3@<X2>, WTF::JSONImpl::ArrayBase **a4@<X3>, uint64_t a5@<X8>)
{
  return WebKit::WebAutomationSession::setFilesToSelectForFileUpload(a1 - 32, a2, a3, a4, a5);
}

void WebKit::WebAutomationSession::setFilesForInputFileUpload(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, WTF::JSONImpl::ArrayBase **a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v45, a1, a2);
  uint64_t v11 = v45;
  if (v45)
  {
    char v44 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v42, a1, a3, &v44);
    if (v44)
    {
      int v12 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v34);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)&v34);
      unint64_t v14 = v34;
      uint64_t v34 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v18 = *((unsigned int *)*a5 + 7);
      if (v18)
      {
        if (v18 >> 29)
        {
          __break(0xC471u);
LABEL_45:
          JUMPOUT(0x199244CA4);
        }
        LODWORD(v41) = *((_DWORD *)*a5 + 7);
        uint64_t v40 = WTF::fastMalloc((WTF *)(8 * v18));
        uint64_t v19 = *a5;
        if (*((_DWORD *)*a5 + 7))
        {
          for (unint64_t i = 0; i < *((unsigned int *)*a5 + 7); ++i)
          {
            WTF::JSONImpl::ArrayBase::get(v19);
            WTF::JSONImpl::Value::asString((uint64_t *)&v48, v34);
            uint64_t v22 = v34;
            uint64_t v34 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 1) {
                WTF::JSONImpl::Value::operator delete();
              }
              else {
                --*(_DWORD *)v22;
              }
            }
            uint64_t v23 = v48;
            if ((void)v48)
            {
              uint64_t v24 = HIDWORD(v41);
              if (HIDWORD(v41) == v41)
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v40, (unint64_t)&v48);
              }
              else
              {
                uint64_t v25 = v40;
                *(_DWORD *)v48 += 2;
                *(void *)(v25 + 8 * v24) = v23;
                HIDWORD(v41) = v24 + 1;
              }
            }
            else
            {
              long long v26 = *a6;
              Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v39);
              uint64_t v34 = (WTF::StringImpl *)"The parameter 'filenames' contains a non-string value.";
              uint64_t v35 = 55;
              LOBYTE(v38) = 59;
              WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v39, (char *)&v38, (uint64_t *)&v34, v46);
              if (!v46[0])
              {
                __break(0xC471u);
                goto LABEL_45;
              }
              Inspector::BackendDispatcher::CallbackBase::sendFailure(v26, (const WTF::String *)v46);
              char v27 = v46[0];
              v46[0] = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2) {
                  WTF::StringImpl::destroy(v27, v21);
                }
                else {
                  *(_DWORD *)v27 -= 2;
                }
              }
              long long v28 = v39;
              uint64_t v39 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2) {
                  WTF::StringImpl::destroy(v28, v21);
                }
                else {
                  *(_DWORD *)v28 -= 2;
                }
              }
            }
            uint64_t v29 = (WTF::StringImpl *)v48;
            *(void *)&long long v48 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v21);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
            if (!v23) {
              goto LABEL_38;
            }
            uint64_t v19 = *a5;
          }
        }
      }
      uint64_t v30 = *a6;
      ++*((_DWORD *)v30 + 2);
      uint64_t v31 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v31 = &unk_1EE9FAC60;
      v31[1] = v30;
      long long v48 = v42;
      uint64_t v49 = v43;
      uint64_t v33 = *(void *)(*(void *)(v11 + 32) + 1928);
      uint64_t v34 = (WTF::StringImpl *)&v33;
      uint64_t v35 = (uint64_t)&v42;
      uint64_t v36 = a4;
      char v37 = &v40;
      char v38 = v31;
      v46[0] = (WTF::StringImpl *)&v34;
      v46[1] = (WTF::StringImpl *)&v38;
      char v47 = 0;
      WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(v11, (uint64_t)&v48, (uint64_t)v46);
      uint64_t v32 = v38;
      char v38 = 0;
      if (v32) {
        (*(void (**)(void *))(*v32 + 8))(v32);
      }
LABEL_38:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v21);
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    uint64_t v15 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v34);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v15, (const WTF::String *)&v34);
    uint64_t v17 = v34;
    uint64_t v34 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::setFilesForInputFileUpload(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, WTF::JSONImpl::ArrayBase **a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
}

void WebKit::WebAutomationSession::getAllCookies(WTF::String *a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v20, a1, a2);
  uint64_t v4 = v20;
  uint64_t v5 = *a3;
  if (v20)
  {
    ++*((_DWORD *)v5 + 2);
    int v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *int v6 = &unk_1EE9FAC88;
    v6[1] = v5;
    uint64_t v7 = *(void *)(v4 + 256);
    uint64_t v19 = *(void *)(*(void *)(v4 + 32) + 1928);
    v18[0] = 0;
    v18[16] = 0;
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 1566;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v23 = v8;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, &v19);
    IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v8, (uint64_t)v18);
    uint64_t v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v9 = &unk_1EE9FACB0;
    *((void *)v9 + 1) = v6;
    uint64_t v10 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v21[0] = v9;
    v21[1] = v10;
    char v22 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v23, 0, (uint64_t)v21, 1);
    if (v22)
    {
      int v12 = v21[0];
      v21[0] = 0;
      if (v12) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v12 + 8))(v12);
      }
    }
    uint64_t v13 = v23;
    uint64_t v23 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v11);
      WTF::fastFree(v16, v17);
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v21);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v5, (const WTF::String *)v21);
    uint64_t v15 = v21[0];
    v21[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::getAllCookies(uint64_t a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
}

void WebKit::WebAutomationSession::deleteSingleCookie(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v24, a1, a2);
  uint64_t v6 = v24;
  uint64_t v7 = *a4;
  if (v24)
  {
    ++*((_DWORD *)v7 + 2);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v8 = &unk_1EE9FACD8;
    v8[1] = v7;
    uint64_t v9 = *(void *)(v6 + 256);
    uint64_t v10 = *(void *)(*(void *)(v6 + 32) + 1928);
    v21[0] = 0;
    v21[16] = 0;
    uint64_t v22 = v10;
    v23[0] = &v22;
    v23[1] = v21;
    _OWORD v23[2] = a3;
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 1562;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    char v27 = v11;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&,WTF::String const&>,0ul,1ul,2ul>(v11, (uint64_t)v23);
    int v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v12 = &unk_1EE9FAD00;
    *((void *)v12 + 1) = v8;
    uint64_t v13 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v25[0] = v12;
    v25[1] = v13;
    char v26 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v27, 0, (uint64_t)v25, 1);
    if (v26)
    {
      uint64_t v15 = v25[0];
      v25[0] = 0;
      if (v15) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v15 + 8))(v15);
      }
    }
    uint64_t v16 = v27;
    char v27 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v19, v20);
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v25);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)v25);
    uint64_t v18 = v25[0];
    v25[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::deleteSingleCookie(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
}

void WebKit::WebAutomationSession::addSingleCookie(WTF::String *a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v129, a1, a2);
  uint64_t v6 = v129;
  if (v129)
  {
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v129 + 32) + 1000), v119);
    MEMORY[0x19972E890](v128, v119, 0);
    uint64_t v8 = v119[0];
    v119[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    LOBYTE(v120[4]) = 0;
    LOWORD(v120[5]) = 0;
    BYTE2(v120[5]) = 0;
    *(_OWORD *)__int16 v119 = 0u;
    memset(v120, 0, 25);
    char v121 = 0;
    __int16 v122 = 0;
    WTF::URL::invalidate((WTF::URL *)&v122);
    __src = 0;
    uint64_t v126 = 0;
    char v127 = 0;
    int v12 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v105[0] = (WTF::StringImpl *)v130;
    WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v130, v12, (const WTF::String *)v105);
    unint64_t v14 = (WTF::StringImpl *)v130;
    uint64_t v130 = 0;
    uint64_t v15 = v119[0];
    v119[0] = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v13);
        uint64_t v16 = (WTF::StringImpl *)v130;
        uint64_t v130 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v13);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v15 -= 2;
        uint64_t v130 = 0;
      }
    }
    uint64_t v17 = v105[0];
    v105[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (!v119[0])
    {
      uint64_t v22 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v118);
      uint64_t v130 = "The parameter 'name' was not found.";
      uint64_t v131 = 36;
      LOBYTE(v116) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v118, (char *)&v116, (uint64_t *)&v130, v105);
      if (!v105[0])
      {
        __break(0xC471u);
        JUMPOUT(0x199245EE0);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v22, (const WTF::String *)v105);
      uint64_t v24 = v105[0];
      v105[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v23);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      char v26 = v118;
      uint64_t v118 = 0;
      if (!v26) {
        goto LABEL_199;
      }
      goto LABEL_196;
    }
    uint64_t v18 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v105[0] = (WTF::StringImpl *)v130;
    WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v130, v18, (const WTF::String *)v105);
    uint64_t v20 = (WTF::StringImpl *)v130;
    uint64_t v130 = 0;
    int v21 = v119[1];
    v119[1] = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v19);
        uint64_t v25 = (WTF::StringImpl *)v130;
        uint64_t v130 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v19);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v21 -= 2;
        uint64_t v130 = 0;
      }
    }
    char v27 = v105[0];
    v105[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v19);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    if (!v119[1])
    {
      uint64_t v31 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v117);
      uint64_t v130 = "The parameter 'value' was not found.";
      uint64_t v131 = 37;
      LOBYTE(v116) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v117, (char *)&v116, (uint64_t *)&v130, v105);
      if (!v105[0])
      {
        __break(0xC471u);
        JUMPOUT(0x199245EE8);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v31, (const WTF::String *)v105);
      uint64_t v32 = v105[0];
      v105[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v23);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      char v26 = v117;
      __int16 v117 = 0;
      if (!v26) {
        goto LABEL_199;
      }
      goto LABEL_196;
    }
    long long v28 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v105[0] = (WTF::StringImpl *)v130;
    WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v116, v28, (const WTF::String *)v105);
    uint64_t v30 = v105[0];
    v105[0] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    uint64_t v33 = v116;
    if (!v116)
    {
      char v37 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v115);
      uint64_t v130 = "The parameter 'domain' was not found.";
      uint64_t v131 = 38;
      LOBYTE(v108) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v115, (char *)&v108, (uint64_t *)&v130, v105);
      if (!v105[0])
      {
        __break(0xC471u);
        JUMPOUT(0x199245EF0);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v37, (const WTF::String *)v105);
      char v38 = v105[0];
      v105[0] = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, v23);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
      uint64_t v45 = v115;
      uint64_t v115 = 0;
      if (v45) {
        goto LABEL_192;
      }
      goto LABEL_195;
    }
    if (*((_DWORD *)v116 + 1))
    {
      *(_DWORD *)v116 += 2;
      uint64_t v114 = v33;
      WebKit::domainByAddingDotPrefixIfNeeded((uint64_t *)&v130, (uint64_t *)&v114);
      uint64_t v35 = (WTF::StringImpl *)v130;
      uint64_t v130 = 0;
      uint64_t v36 = v120[0];
      v120[0] = v35;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v34);
          char v44 = (WTF::StringImpl *)v130;
          uint64_t v130 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v34);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
        }
        else
        {
          *(_DWORD *)v36 -= 2;
          uint64_t v130 = 0;
        }
      }
      long long v42 = v114;
      uint64_t v114 = 0;
      if (!v42) {
        goto LABEL_77;
      }
    }
    else
    {
      WTF::URL::host((WTF::URL *)v128);
      if ((v39 & 0xFF00000000) != 0) {
        WTF::String::String();
      }
      else {
        WTF::String::String();
      }
      uint64_t v41 = (WTF::StringImpl *)v130;
      uint64_t v130 = 0;
      long long v42 = v120[0];
      v120[0] = v41;
      if (!v42) {
        goto LABEL_77;
      }
      int v43 = *(_DWORD *)v42 - 2;
      if (*(_DWORD *)v42 != 2)
      {
LABEL_76:
        *(_DWORD *)long long v42 = v43;
        goto LABEL_77;
      }
      WTF::StringImpl::destroy(v42, v40);
      long long v42 = (WTF::StringImpl *)v130;
      uint64_t v130 = 0;
      if (!v42)
      {
LABEL_77:
        unsigned int v46 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v130, v46, (const WTF::String *)v105);
        long long v48 = (WTF::StringImpl *)v130;
        uint64_t v130 = 0;
        uint64_t v49 = v120[1];
        v120[1] = v48;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
          {
            WTF::StringImpl::destroy(v49, v47);
            double v50 = (WTF::StringImpl *)v130;
            uint64_t v130 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2) {
                WTF::StringImpl::destroy(v50, v47);
              }
              else {
                *(_DWORD *)v50 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v49 -= 2;
            uint64_t v130 = 0;
          }
        }
        double v51 = v105[0];
        v105[0] = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2) {
            WTF::StringImpl::destroy(v51, v47);
          }
          else {
            *(_DWORD *)v51 -= 2;
          }
        }
        if (!v120[1])
        {
          unint64_t v57 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v113);
          uint64_t v130 = "The parameter 'path' was not found.";
          uint64_t v131 = 36;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v113, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x199245EF8);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v57, (const WTF::String *)v105);
          BOOL v58 = v105[0];
          v105[0] = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2) {
              WTF::StringImpl::destroy(v58, v23);
            }
            else {
              *(_DWORD *)v58 -= 2;
            }
          }
          uint64_t v45 = v113;
          uint64_t v113 = 0;
          if (v45) {
            goto LABEL_192;
          }
          goto LABEL_195;
        }
        uint64_t v52 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        double v54 = COERCE_DOUBLE(WTF::JSONImpl::ObjectBase::getDouble(v52, (const WTF::String *)v105));
        char v55 = (char)v53;
        uint64_t v56 = v105[0];
        v105[0] = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2) {
            WTF::StringImpl::destroy(v56, v53);
          }
          else {
            *(_DWORD *)v56 -= 2;
          }
        }
        if (!v55)
        {
          unsigned int v63 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v112);
          uint64_t v130 = "The parameter 'expires' was not found.";
          uint64_t v131 = 39;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v112, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x199245F00);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v63, (const WTF::String *)v105);
          uint64_t v64 = v105[0];
          v105[0] = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2) {
              WTF::StringImpl::destroy(v64, v23);
            }
            else {
              *(_DWORD *)v64 -= 2;
            }
          }
          uint64_t v45 = v112;
          uint64_t v112 = 0;
          if (v45) {
            goto LABEL_192;
          }
          goto LABEL_195;
        }
        *(double *)&v120[3] = v54 * 1000.0;
        LOBYTE(v120[4]) = 1;
        char v59 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        unsigned __int16 Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v59, (const WTF::String *)v105);
        int v62 = v105[0];
        v105[0] = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2) {
            WTF::StringImpl::destroy(v62, v60);
          }
          else {
            *(_DWORD *)v62 -= 2;
          }
        }
        if (Boolean <= 0xFFu)
        {
          char v65 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v111);
          uint64_t v130 = "The parameter 'secure' was not found.";
          uint64_t v131 = 38;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v111, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x199245F08);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v65, (const WTF::String *)v105);
          char v66 = v105[0];
          v105[0] = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2) {
              WTF::StringImpl::destroy(v66, v23);
            }
            else {
              *(_DWORD *)v66 -= 2;
            }
          }
          uint64_t v45 = v111;
          uint64_t v111 = 0;
          if (!v45) {
            goto LABEL_195;
          }
LABEL_192:
          if (*(_DWORD *)v45 == 2) {
            WTF::StringImpl::destroy(v45, v23);
          }
          else {
            *(_DWORD *)v45 -= 2;
          }
          goto LABEL_195;
        }
        BYTE1(v120[5]) = Boolean;
        char v67 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        unsigned __int16 v69 = WTF::JSONImpl::ObjectBase::getBoolean(v67, (const WTF::String *)v105);
        uint64_t v70 = v105[0];
        v105[0] = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2) {
            WTF::StringImpl::destroy(v70, v68);
          }
          else {
            *(_DWORD *)v70 -= 2;
          }
        }
        if (v69 <= 0xFFu)
        {
          uint64_t v71 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v110);
          uint64_t v130 = "The parameter 'session' was not found.";
          uint64_t v131 = 39;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v110, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x199245F10);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v71, (const WTF::String *)v105);
          long long v72 = v105[0];
          v105[0] = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2) {
              WTF::StringImpl::destroy(v72, v23);
            }
            else {
              *(_DWORD *)v72 -= 2;
            }
          }
          uint64_t v45 = v110;
          char v110 = 0;
          if (v45) {
            goto LABEL_192;
          }
LABEL_195:
          char v26 = v116;
          uint64_t v116 = 0;
          if (!v26)
          {
LABEL_199:
            WebCore::Cookie::~Cookie((WebCore::Cookie *)v119, v23);
            int v103 = (WTF::StringImpl *)v128[0];
            v128[0] = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2) {
                WTF::StringImpl::destroy(v103, v102);
              }
              else {
                *(_DWORD *)v103 -= 2;
              }
            }
            if (v129) {
              CFRelease(*(CFTypeRef *)(v129 + 8));
            }
            return;
          }
LABEL_196:
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v23);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
          goto LABEL_199;
        }
        BYTE2(v120[5]) = v69;
        uint64_t v73 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        unsigned __int16 v75 = WTF::JSONImpl::ObjectBase::getBoolean(v73, (const WTF::String *)v105);
        uint64_t v76 = v105[0];
        v105[0] = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2) {
            WTF::StringImpl::destroy(v76, v74);
          }
          else {
            *(_DWORD *)v76 -= 2;
          }
        }
        if (v75 <= 0xFFu)
        {
          char v77 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v109);
          uint64_t v130 = "The parameter 'httpOnly' was not found.";
          uint64_t v131 = 40;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v109, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x199245F18);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v77, (const WTF::String *)v105);
          long long v78 = v105[0];
          v105[0] = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2) {
              WTF::StringImpl::destroy(v78, v23);
            }
            else {
              *(_DWORD *)v78 -= 2;
            }
          }
          uint64_t v45 = v109;
          __int16 v109 = 0;
          if (v45) {
            goto LABEL_192;
          }
          goto LABEL_195;
        }
        LOBYTE(v120[5]) = v75;
        uint64_t v79 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v108, v79, (const WTF::String *)v105);
        int v81 = v105[0];
        v105[0] = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2) {
            WTF::StringImpl::destroy(v81, v80);
          }
          else {
            *(_DWORD *)v81 -= 2;
          }
        }
        if (v108)
        {
          uint64_t v82 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CookieSameSitePolicy>(&v108);
          if ((v82 & 0xFF00000000) != 0)
          {
            switch(v82)
            {
              case 0x18:
                char v83 = 0;
                goto LABEL_165;
              case 0x6E:
                char v83 = 2;
                goto LABEL_165;
              case 0x6D:
                char v83 = 1;
LABEL_165:
                char v127 = v83;
                int v88 = WebKit::WebsiteDataStore::cookieStore(*(WebKit::WebsiteDataStore **)(v6 + 312));
                long long v89 = v119[0];
                if (v119[0]) {
                  *(_DWORD *)v119[0] += 2;
                }
                uint64_t v130 = (const char *)v89;
                uint64_t v90 = v119[1];
                if (v119[1]) {
                  *(_DWORD *)v119[1] += 2;
                }
                uint64_t v131 = (uint64_t)v90;
                char v91 = v120[0];
                if (v120[0]) {
                  *(_DWORD *)v120[0] += 2;
                }
                uint64_t v132 = v91;
                __int16 v92 = v120[1];
                if (v120[1]) {
                  *(_DWORD *)v120[1] += 2;
                }
                uint64_t v133 = v92;
                v134[0] = *(_OWORD *)&v120[2];
                *(_OWORD *)((char *)v134 + 11) = *(_OWORD *)((char *)&v120[3] + 3);
                __int16 v93 = v121;
                if (v121) {
                  *v121 += 2;
                }
                char v135 = v93;
                uint64_t v94 = v122;
                if (v122) {
                  *v122 += 2;
                }
                uint64_t v136 = v94;
                long long v137 = v123;
                long long v138 = v124;
                int v95 = HIDWORD(v126);
                uint64_t v139 = 0;
                int v140 = 0;
                int v141 = HIDWORD(v126);
                if (HIDWORD(v126))
                {
                  if (v126 < 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x199245F20);
                  }
                  uint64_t v96 = (void *)WTF::fastMalloc((WTF *)(2 * HIDWORD(v126)));
                  int v140 = v95;
                  uint64_t v139 = v96;
                  memcpy(v96, __src, 2 * HIDWORD(v126));
                }
                char v142 = v127;
                WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v105, (const WebCore::Cookie *)&v130, 1uLL);
                uint64_t v97 = *a4;
                ++*((_DWORD *)v97 + 2);
                int v98 = (void *)WTF::fastMalloc((WTF *)0x10);
                *int v98 = &unk_1EE9FAD28;
                v98[1] = v97;
                char v104 = v98;
                API::HTTPCookieStore::setCookies((uint64_t)v88, (uint64_t *)v105, (uint64_t *)&v104);
                if (v104) {
                  (*(void (**)(void *))(*v104 + 8))(v104);
                }
                WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v105, v99);
                WebCore::Cookie::~Cookie((WebCore::Cookie *)&v130, v100);
                goto LABEL_191;
            }
            __break(0xC471u);
LABEL_219:
            JUMPOUT(0x199245ED8);
          }
          uint64_t v86 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v106);
          uint64_t v130 = "The parameter 'sameSite' has an unknown value.";
          uint64_t v131 = 47;
          LOBYTE(v104) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v106, (char *)&v104, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            goto LABEL_219;
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v86, (const WTF::String *)v105);
          int v87 = v105[0];
          v105[0] = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2) {
              WTF::StringImpl::destroy(v87, v23);
            }
            else {
              *(_DWORD *)v87 -= 2;
            }
          }
          long long v101 = v106;
          uint64_t v106 = 0;
          if (v101)
          {
LABEL_188:
            if (*(_DWORD *)v101 == 2) {
              WTF::StringImpl::destroy(v101, v23);
            }
            else {
              *(_DWORD *)v101 -= 2;
            }
          }
        }
        else
        {
          char v84 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v107);
          uint64_t v130 = "The parameter 'sameSite' was not found.";
          uint64_t v131 = 40;
          LOBYTE(v104) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v107, (char *)&v104, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x199245F28);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v84, (const WTF::String *)v105);
          uint64_t v85 = v105[0];
          v105[0] = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2) {
              WTF::StringImpl::destroy(v85, v23);
            }
            else {
              *(_DWORD *)v85 -= 2;
            }
          }
          long long v101 = v107;
          uint64_t v107 = 0;
          if (v101) {
            goto LABEL_188;
          }
        }
LABEL_191:
        uint64_t v45 = v108;
        uint64_t v108 = 0;
        if (!v45) {
          goto LABEL_195;
        }
        goto LABEL_192;
      }
    }
    int v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 != 2) {
      goto LABEL_76;
    }
    WTF::StringImpl::destroy(v42, v34);
    goto LABEL_77;
  }
  uint64_t v9 = *a4;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v119);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)v119);
  uint64_t v11 = v119[0];
  v119[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
}

uint64_t WebKit::domainByAddingDotPrefixIfNeeded(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2
    && *(_DWORD *)(v4 + 4)
    && ((uint64_t result = *(void *)(v4 + 8), (*(_DWORD *)(v4 + 16) & 4) == 0)
      ? (int v6 = *(unsigned __int16 *)result)
      : (int v6 = *(unsigned __int8 *)result),
        v6 == 46)
    || (result = WTF::URL::hostIsIPAddress(), uint64_t v4 = *a2, (result & 1) != 0))
  {
    *a2 = 0;
    *a1 = v4;
  }
  else
  {
    if (v4) {
      *(_DWORD *)v4 += 2;
    }
    char v9 = 46;
    uint64_t v8 = v4;
    uint64_t result = (uint64_t)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v9, &v8, a1);
    if (*a1)
    {
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)v4, v7);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::WebAutomationSession::addSingleCookie(uint64_t a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
}

void WebKit::WebAutomationSession::deleteAllCookies(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v23, this, a2);
  uint64_t v4 = v23;
  if (v23)
  {
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v23 + 32) + 1000), v20);
    MEMORY[0x19972E890](v22, v20, 0);
    int v6 = v20[0];
    v20[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    WTF::URL::host((WTF::URL *)v22);
    if ((v7 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    uint64_t v8 = WebKit::WebsiteDataStore::cookieStore(*(WebKit::WebsiteDataStore **)(v4 + 312));
    char v9 = v21;
    if (v21) {
      *(_DWORD *)v21 += 4;
    }
    uint64_t v24 = v9;
    uint64_t v19 = v9;
    WebKit::domainByAddingDotPrefixIfNeeded(v25, (uint64_t *)&v19);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v20, (_DWORD **)&v24, 2uLL);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EE9FAD50;
    uint64_t v18 = v10;
    API::HTTPCookieStore::deleteCookiesForHostnames((uint64_t)v8, (uint64_t)v20, (uint64_t *)&v18);
    uint64_t v12 = (uint64_t)v18;
    uint64_t v18 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v11);
    for (uint64_t i = 1; i != -1; --i)
    {
      uint64_t v15 = (WTF::StringImpl *)v25[i - 1];
      v25[i - 1] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v13);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v13);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
    uint64_t v16 = v21;
    int v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v13);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v13);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (void *)a3);
    *(unsigned char *)(a3 + 8) = 1;
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::deleteAllCookies(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
}

void *WebKit::WebAutomationSession::getSessionPermissions@<X0>(WebKit::WebAutomationSession *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v5 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  WTF::JSONImpl::Object::create(&v32, v5);
  uint64_t v6 = v32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(111, &v33);
  WTF::JSONImpl::Value::create((uint64_t *)&v35, (WTF::JSONImpl::Value *)&v33, v7);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v6 + 16), &v34, (uint64_t *)&v35, (uint64_t)v36);
  if (v37)
  {
    char v9 = (uint64_t *)(v6 + 24);
    uint64_t v10 = *(unsigned int *)(v6 + 36);
    if (v10 == *(_DWORD *)(v6 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v9, (unint64_t)&v34);
    }
    else
    {
      uint64_t v11 = *v9;
      uint64_t v12 = v34;
      if (v34) {
        *(_DWORD *)v34 += 2;
      }
      *(void *)(v11 + 8 * v10) = v12;
      *(_DWORD *)(v6 + 36) = v10 + 1;
    }
  }
  uint64_t v13 = v35;
  uint64_t v35 = 0;
  if (v13)
  {
    if (*v13 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v13;
    }
  }
  unint64_t v14 = v33;
  uint64_t v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v8);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = v34;
  uint64_t v34 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v8);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = (WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 272);
  uint64_t v17 = v32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v17 + 16), &v34, (uint64_t *)&v35, (uint64_t)v36);
  if (v37)
  {
    uint64_t v19 = (uint64_t *)(v17 + 24);
    uint64_t v20 = *(unsigned int *)(v17 + 36);
    if (v20 == *(_DWORD *)(v17 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v19, (unint64_t)&v34);
    }
    else
    {
      uint64_t v21 = *v19;
      uint64_t v22 = v34;
      if (v34) {
        *(_DWORD *)v34 += 2;
      }
      *(void *)(v21 + 8 * v20) = v22;
      *(_DWORD *)(v17 + 36) = v20 + 1;
    }
  }
  uint64_t v23 = v35;
  uint64_t v35 = 0;
  if (v23)
  {
    if (*v23 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v23;
    }
  }
  uint64_t v24 = v34;
  uint64_t v34 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v18);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = v32;
  uint64_t result = (void *)(v4 + 16);
  unint64_t v27 = *(unsigned int *)(v4 + 28);
  if (v27 == *(_DWORD *)(v4 + 24))
  {
    unint64_t v28 = v27 + (v27 >> 2);
    if (v28 >= 0x10) {
      unint64_t v29 = v28 + 1;
    }
    else {
      unint64_t v29 = 16;
    }
    if (v29 <= v27 + 1) {
      unint64_t v30 = v27 + 1;
    }
    else {
      unint64_t v30 = v29;
    }
    uint64_t result = (void *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)result, v30);
    unint64_t v27 = *(unsigned int *)(v4 + 28);
    uint64_t v31 = (uint64_t *)(*(void *)(v4 + 16) + 8 * v27);
  }
  else
  {
    uint64_t v31 = (uint64_t *)(*result + 8 * v27);
  }
  uint64_t *v31 = v25;
  *(_DWORD *)(v4 + 28) = v27 + 1;
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

void *non-virtual thunk to'WebKit::WebAutomationSession::getSessionPermissions@<X0>(WebKit::WebAutomationSession *this@<X0>, uint64_t a2@<X8>)
{
  return WebKit::WebAutomationSession::getSessionPermissions((WebKit::WebAutomationSession *)((char *)this - 32), a2);
}

WTF::StringImpl *WebKit::WebAutomationSession::setSessionPermissions@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (!*(_DWORD *)(*(void *)a2 + 28))
  {
LABEL_46:
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(WTF::JSONImpl::ObjectBase ***)(*(void *)a2 + 16);
  while (1)
  {
    uint64_t v7 = *v6;
    unsigned int v8 = *((_DWORD *)*v6 + 1);
    if (v8 != 5) {
      break;
    }
    ++*(_DWORD *)v7;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v21 = (WTF::StringImpl *)v25;
    WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v23, v7, (const WTF::String *)&v21);
    uint64_t v10 = v21;
    uint64_t v21 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    if (!v23)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v20);
      uint64_t v25 = "The parameter 'permission' is missing or invalid.";
      uint64_t v26 = 50;
      char v24 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v20, &v24, (uint64_t *)&v25, &v21);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1992468B4);
      }
      *(void *)a3 = v21;
      a3[8] = 1;
      unint64_t v14 = v20;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      if (!v14) {
        goto LABEL_26;
      }
LABEL_23:
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v11);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
LABEL_26:
      char v15 = 0;
      goto LABEL_27;
    }
    if ((MEMORY[0x19972E990](v23, "GetUserMedia", 12) & 1) == 0)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v19);
      uint64_t v25 = "The parameter 'permission' has an unknown value.";
      uint64_t v26 = 49;
      char v24 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v19, &v24, (uint64_t *)&v25, &v21);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1992468BCLL);
      }
      *(void *)a3 = v21;
      a3[8] = 1;
      uint64_t v21 = 0;
      unint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v21 = (WTF::StringImpl *)v25;
    unsigned __int16 Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v7, (const WTF::String *)&v21);
    uint64_t v13 = v21;
    uint64_t v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v11);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    if (Boolean <= 0xFFu)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v18);
      uint64_t v25 = "The parameter 'value' is missing or invalid.";
      uint64_t v26 = 45;
      char v24 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v18, &v24, (uint64_t *)&v25, &v21);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x1992468C4);
      }
      *(void *)a3 = v21;
      a3[8] = 1;
      uint64_t v21 = 0;
      unint64_t v14 = v18;
      uint64_t v18 = 0;
      if (v14) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }
    *((unsigned char *)v5 + 272) = Boolean;
    char v15 = 1;
LABEL_27:
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (*(_DWORD *)v7 == 1) {
      uint64_t result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v7;
    }
    if ((v15 & 1) == 0) {
      return result;
    }
    if (++v6 == (WTF::JSONImpl::ObjectBase **)(*(void *)(*(void *)a2 + 16)
                                              + 8 * *(unsigned int *)(*(void *)a2 + 28)))
      goto LABEL_46;
  }
  BOOL v16 = v8 > 6 || v8 == 5;
  if (v16
    || (Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v22),
        uint64_t v25 = "The parameter 'permissions' is invalid.",
        uint64_t v26 = 40,
        LOBYTE(v21) = 59,
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v22, (char *)&v21, (uint64_t *)&v25, &v23),
        !v23))
  {
    __break(0xC471u);
    JUMPOUT(0x1992468ACLL);
  }
  *(void *)a3 = v23;
  a3[8] = 1;
  uint64_t result = v22;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebAutomationSession::setSessionPermissions@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return WebKit::WebAutomationSession::setSessionPermissions((WTF::StringImpl *)(a1 - 32), a2, a3);
}

WTF::StringImpl *WebKit::WebAutomationSession::addVirtualAuthenticator@<X0>(const WTF::String *a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v51, v8, (const WTF::String *)&v52);
  uint64_t v10 = (WTF::StringImpl *)v52;
  uint64_t v52 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (!v51)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v49);
    uint64_t v52 = "The parameter 'protocol' is missing or invalid.";
    uint64_t v53 = 48;
    LOBYTE(v48) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v49, (char *)&v48, (uint64_t *)&v52, &v50);
    if (v50)
    {
      *(void *)a4 = v50;
      *(_DWORD *)(a4 + 8) = 1;
      char v15 = v49;
      uint64_t v49 = 0;
      double v50 = 0;
      if (!v15) {
        goto LABEL_59;
      }
      goto LABEL_56;
    }
    __break(0xC471u);
    goto LABEL_82;
  }
  uint64_t v11 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v48 = (WTF::StringImpl *)v52;
  WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v50, v11, (const WTF::String *)&v48);
  uint64_t v13 = v48;
  long long v48 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (!v50)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v47);
    uint64_t v52 = "The parameter 'transport' is missing or invalid.";
    uint64_t v53 = 49;
    LOBYTE(v41) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v47, (char *)&v41, (uint64_t *)&v52, &v48);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x199246F20);
    }
    *(void *)a4 = v48;
    *(_DWORD *)(a4 + 8) = 1;
    uint64_t v22 = v47;
    char v47 = 0;
    long long v48 = 0;
    if (v22) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  uint64_t v16 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::AuthenticatorTransport>(&v50);
  if ((v16 & 0xFF00000000) == 0)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v46);
    uint64_t v52 = "The parameter 'transport' has an unknown value.";
    uint64_t v53 = 48;
    LOBYTE(v41) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v46, (char *)&v41, (uint64_t *)&v52, &v48);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x199246F28);
    }
    *(void *)a4 = v48;
    *(_DWORD *)(a4 + 8) = 1;
    long long v48 = 0;
    uint64_t v22 = v46;
    unsigned int v46 = 0;
    if (v22) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  int v17 = v16;
  uint64_t v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v48 = (WTF::StringImpl *)v52;
  unsigned __int16 Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v18, (const WTF::String *)&v48);
  uint64_t v21 = v48;
  long long v48 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v19);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  if (Boolean <= 0xFFu)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v45);
    uint64_t v52 = "The parameter 'hasResidentKey' is missing or invalid.";
    uint64_t v53 = 54;
    LOBYTE(v41) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v45, (char *)&v41, (uint64_t *)&v52, &v48);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x199246F30);
    }
    *(void *)a4 = v48;
    *(_DWORD *)(a4 + 8) = 1;
    long long v48 = 0;
    uint64_t v22 = v45;
    uint64_t v45 = 0;
    if (!v22) {
      goto LABEL_55;
    }
LABEL_52:
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v14);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
    goto LABEL_55;
  }
  uint64_t v23 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v48 = (WTF::StringImpl *)v52;
  unsigned __int16 v25 = WTF::JSONImpl::ObjectBase::getBoolean(v23, (const WTF::String *)&v48);
  uint64_t v26 = v48;
  long long v48 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v24);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (v25 > 0xFFu)
  {
    unint64_t v27 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    long long v48 = (WTF::StringImpl *)v52;
    unsigned __int16 v29 = WTF::JSONImpl::ObjectBase::getBoolean(v27, (const WTF::String *)&v48);
    unint64_t v30 = v48;
    long long v48 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    if (v29 <= 0xFFu)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v43);
      uint64_t v52 = "The parameter 'isUserConsenting' is missing or invalid.";
      uint64_t v53 = 56;
      LOBYTE(v41) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v43, (char *)&v41, (uint64_t *)&v52, &v48);
      if (!v48)
      {
        __break(0xC471u);
        JUMPOUT(0x199246F40);
      }
      *(void *)a4 = v48;
      *(_DWORD *)(a4 + 8) = 1;
      long long v48 = 0;
      uint64_t v22 = v43;
      int v43 = 0;
      if (v22) {
        goto LABEL_52;
      }
      goto LABEL_55;
    }
    uint64_t v31 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    long long v48 = (WTF::StringImpl *)v52;
    unsigned __int16 v33 = WTF::JSONImpl::ObjectBase::getBoolean(v31, (const WTF::String *)&v48);
    uint64_t v34 = v48;
    long long v48 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v32);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    if (v33 > 0xFFu)
    {
      WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v48, a1, a2);
      uint64_t v36 = v48;
      if (v48)
      {
        char v37 = (uint64_t *)WebKit::WebsiteDataStore::virtualAuthenticatorManager(*((WebKit::WebsiteDataStore **)v48 + 39));
        char v38 = v51;
        if (v51) {
          *(_DWORD *)v51 += 2;
        }
        uint64_t v52 = (char *)v38;
        char v39 = v17 - 123;
        if ((v17 - 123) >= 4) {
          char v39 = 3;
        }
        LOBYTE(v53) = v39;
        BYTE1(v53) = Boolean;
        BYTE2(v53) = v25;
        BYTE3(v53) = v29;
        BYTE4(v53) = v33;
        WebKit::VirtualAuthenticatorManager::createAuthenticator(v37, (uint64_t)&v52, &v41);
        *(void *)a4 = v41;
        *(_DWORD *)(a4 + 8) = 0;
        uint64_t v41 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2) {
            WTF::StringImpl::destroy(v38, v40);
          }
          else {
            *(_DWORD *)v38 -= 2;
          }
        }
        CFRelease(*((CFTypeRef *)v36 + 1));
      }
      else
      {
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (void *)a4);
        *(_DWORD *)(a4 + 8) = 1;
      }
      goto LABEL_55;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v42);
    uint64_t v52 = "The parameter 'isUserVerified' is missing or invalid.";
    uint64_t v53 = 54;
    LOBYTE(v41) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v42, (char *)&v41, (uint64_t *)&v52, &v48);
    if (v48)
    {
      *(void *)a4 = v48;
      *(_DWORD *)(a4 + 8) = 1;
      long long v48 = 0;
      uint64_t v22 = v42;
      long long v42 = 0;
      if (!v22) {
        goto LABEL_55;
      }
      goto LABEL_52;
    }
    __break(0xC471u);
LABEL_82:
    JUMPOUT(0x199246F18);
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v44);
  uint64_t v52 = "The parameter 'hasUserVerification' is missing or invalid.";
  uint64_t v53 = 59;
  LOBYTE(v41) = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v44, (char *)&v41, (uint64_t *)&v52, &v48);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x199246F38);
  }
  *(void *)a4 = v48;
  *(_DWORD *)(a4 + 8) = 1;
  long long v48 = 0;
  uint64_t v22 = v44;
  char v44 = 0;
  if (v22) {
    goto LABEL_52;
  }
LABEL_55:
  char v15 = v50;
  double v50 = 0;
  if (!v15) {
    goto LABEL_59;
  }
LABEL_56:
  if (*(_DWORD *)v15 == 2) {
    WTF::StringImpl::destroy(v15, v14);
  }
  else {
    *(_DWORD *)v15 -= 2;
  }
LABEL_59:
  uint64_t result = v51;
  double v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebAutomationSession::addVirtualAuthenticator@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X8>)
{
  return WebKit::WebAutomationSession::addVirtualAuthenticator((const WTF::String *)(a1 - 32), a2, a3, a4);
}

void WebKit::WebAutomationSession::removeVirtualAuthenticator(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v13, this, a2);
  uint64_t v6 = v13;
  if (!v13)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (void *)a4);
    *(unsigned char *)(a4 + 8) = 1;
    return;
  }
  uint64_t v7 = (WebKit::VirtualAuthenticatorManager *)WebKit::WebsiteDataStore::virtualAuthenticatorManager(*(WebKit::WebsiteDataStore **)(v13 + 312));
  if (WebKit::VirtualAuthenticatorManager::removeAuthenticator(v7, a3, v8))
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v11);
    v15[0] = (uint64_t)"No such authenticator exists.";
    v15[1] = 30;
    char v14 = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v11, &v14, v15, &v12);
    if (!v12)
    {
      __break(0xC471u);
      return;
    }
    *(void *)a4 = v12;
    *(unsigned char *)(a4 + 8) = 1;
    uint64_t v10 = v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
}

void non-virtual thunk to'WebKit::WebAutomationSession::removeVirtualAuthenticator(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
}

WTF::StringImpl *WebKit::WebAutomationSession::addVirtualAuthenticatorCredential@<X0>(uint64_t a1@<X8>)
{
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v4);
  v7[0] = (uint64_t)"This method is not yet implemented.";
  v7[1] = 36;
  char v6 = 59;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v4, &v6, v7, &v5);
  if (v5)
  {
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t result = v4;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::getVirtualAuthenticatorCredentials@<X0>(uint64_t a1@<X8>)
{
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v7);
  v10[0] = (uint64_t)"This method is not yet implemented.";
  v10[1] = 36;
  char v9 = 59;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v7, &v9, v10, &v8);
  if (v8)
  {
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 1;
    uint64_t result = v7;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::removeVirtualAuthenticatorCredential@<X0>(uint64_t a1@<X8>)
{
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v8);
  v11[0] = (uint64_t)"This method is not yet implemented.";
  v11[1] = 36;
  char v10 = 59;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v8, &v10, v11, &v9);
  if (v9)
  {
    *(void *)a1 = v9;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t result = v8;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::removeAllVirtualAuthenticatorCredentials@<X0>(uint64_t a1@<X8>)
{
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v7);
  v10[0] = (uint64_t)"This method is not yet implemented.";
  v10[1] = 36;
  char v9 = 59;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v7, &v9, v10, &v8);
  if (v8)
  {
    *(void *)a1 = v8;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t result = v7;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::setVirtualAuthenticatorUserVerified@<X0>(uint64_t a1@<X8>)
{
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v7);
  v10[0] = (uint64_t)"This method is not yet implemented.";
  v10[1] = 36;
  char v9 = 59;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v7, &v9, v10, &v8);
  if (v8)
  {
    *(void *)a1 = v8;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t result = v7;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebAutomationSession::setVirtualAuthenticatorUserVerified@<X0>(uint64_t a1@<X8>)
{
  return WebKit::WebAutomationSession::setVirtualAuthenticatorUserVerified(a1);
}

void WebKit::WebAutomationSession::generateTestReport(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, uint64_t a5@<X8>)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v10, this, a2);
  uint64_t v8 = v10;
  if (v10)
  {
    v11[0] = (uint64_t *)a3;
    v11[1] = (uint64_t *)a4;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GenerateTestReport>(*(void *)(v10 + 256), v11, *(void *)(*(void *)(v10 + 32) + 1928), 0);
    *(unsigned char *)a5 = 0;
    CFRelease(*(CFTypeRef *)(v8 + 8));
    char v9 = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (void *)a5);
    char v9 = 1;
  }
  *(unsigned char *)(a5 + 8) = v9;
}

void non-virtual thunk to'WebKit::WebAutomationSession::generateTestReport(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t WebKit::WebAutomationSession::inputDispatcherForPage(WebKit::WebAutomationSession *this, WebKit::WebPageProxy *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 288);
  uint64_t v5 = *(void *)(*((void *)a2 + 4) + 760);
  uint64_t v6 = *((void *)this + 36);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)this + 36, 0), (uint64_t v6 = *v4) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
  uint64_t v12 = (uint64_t *)(v6 + 16 * v11);
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    uint64_t *v12 = v5;
    uint64_t v16 = WTF::fastMalloc((WTF *)0x78);
    WebKit::SimulatedInputDispatcher::SimulatedInputDispatcher(v16, (uint64_t)a2, (uint64_t)this + 40);
    uint64_t v18 = (WebKit::SimulatedInputDispatcher *)v12[1];
    v12[1] = v16;
    if (v18) {
      WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v18, v17);
    }
    uint64_t v19 = *v4;
    if (*v4) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v21 = *v4;
    if (*v4) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23) {
        return v12[1];
      }
    }
    else if (3 * v24 > 4 * v23)
    {
      return v12[1];
    }
    uint64_t v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v4, v12);
    return v12[1];
  }
  char v14 = 0;
  int v15 = 1;
  while (v13 != v5)
  {
    if (v13 == -1) {
      char v14 = v12;
    }
    unsigned int v11 = (v11 + v15) & v7;
    uint64_t v12 = (uint64_t *)(v6 + 16 * v11);
    uint64_t v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *char v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v12 = v14;
      }
      goto LABEL_12;
    }
  }
  return v12[1];
}

uint64_t WebKit::WebAutomationSession::viewportInViewCenterPointOfElement(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *a5;
  *a5 = 0;
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v9 = &unk_1EE9FAD78;
  v9[1] = v8;
  long long v17 = *a3;
  uint64_t v18 = *((void *)a3 + 2);
  uint64_t v11 = *(void *)(*(void *)(a2 + 32) + 1928);
  v12[0] = &v11;
  v12[1] = a3;
  uint64_t v12[2] = a4;
  __int16 v13 = 256;
  char v14 = v9;
  v15[0] = v12;
  v15[1] = &v14;
  char v16 = 0;
  WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(IPC::AsyncReplyIDType)1>>>,Messages::WebAutomationSessionProxy::ComputeElementLayout &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)::SendOption>)::{lambda(std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(IPC::AsyncReplyIDType)1>&)#1}>(a2, (uint64_t)&v17, (uint64_t)v15);
  uint64_t result = (uint64_t)v14;
  char v14 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::simulateTouchInteraction(uint64_t a1, WebKit::WebPageProxy *a2, int a3, IntPoint *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14 = *((void *)a2 + 4);
  v23[1] = 0;
  _OWORD v23[2] = *(void *)(v14 + 2304);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v23, a4);
  if (WebCore::FloatRect::contains())
  {
    *(unsigned char *)(a1 + 300) = 1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v15 = *a7;
    *a7 = 0;
    char v16 = (void *)WTF::fastMalloc((WTF *)0x20);
    *char v16 = &unk_1EE9FADA0;
    v16[1] = a1;
    void v16[2] = a1;
    uint64_t v16[3] = v15;
    v23[0] = (uint64_t)v16;
    WebKit::WebAutomationSession::platformSimulateTouchInteraction(a1, a2, a3, a4, a5, a6, v23);
    uint64_t result = (WTF::StringImpl *)v23[0];
    v23[0] = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    int v19 = 23;
    LOBYTE(v20) = 0;
    char v21 = 0;
    char v22 = 1;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a7, (uint64_t)&v19);
    if (v22)
    {
      if (v21)
      {
        uint64_t result = v20;
        int v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebAutomationSession::simulateTouchInteraction(uint64_t a1, WebKit::WebPageProxy *a2, int a3, IntPoint *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return WebKit::WebAutomationSession::simulateTouchInteraction(a1 - 40, a2, a3, a4, a5, a6, a7);
}

void WebKit::WebAutomationSession::simulateKeyboardInteraction(uint64_t a1, WebKit::WebAutomationSession *a2, int a3, int *a4, uint64_t *a5)
{
  uint64_t v9 = *a5;
  *a5 = 0;
  unint64_t v10 = (uint64_t *)(a1 + 176);
  uint64_t v29 = *(void *)(*((void *)a2 + 4) + 760);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v30, (uint64_t *)(a1 + 176), &v29);
  uint64_t v11 = (uint64_t *)(v30[0] + 8);
  if (*(void *)(v30[0] + 8))
  {
    int v25 = 6;
    LOBYTE(v26) = 0;
    char v27 = 0;
    char v28 = 1;
    WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(v30[0] + 8), &v25);
    if (v28)
    {
      if (v27)
      {
        __int16 v13 = v26;
        uint64_t v26 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v12);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9FADC8;
  v14[1] = v9;
  uint64_t v15 = *v11;
  *uint64_t v11 = (uint64_t)v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  WebKit::WebAutomationSession::platformSimulateKeyboardInteraction((unsigned int *)a1, a2, a3, a4);
  if (*v11)
  {
    char v16 = (void *)*((void *)a2 + 4);
    if (v16[96] == v16[97])
    {
      uint64_t v29 = v16[95];
      long long v17 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10, &v29);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take(v10, v17, v30);
      LOBYTE(v21) = 0;
      char v24 = 0;
      WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(v30, &v21);
      if (v24)
      {
        if (v23)
        {
          int v19 = v22;
          char v22 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v18);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
      }
      uint64_t v20 = v30[0];
      v30[0] = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a3;
  unint64_t v10 = *a3 + ~(*a3 << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 16 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    char v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v26 = v6 + 16 * v20;
        goto LABEL_31;
      }
      if (v15 == -1) {
        char v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *char v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v9 = *a3;
      uint64_t v14 = v16;
    }
  }
  uint64_t result = (uint64_t *)v14[1];
  *uint64_t v14 = v9;
  v14[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v18 = *a2;
  if (*a2) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v14);
      uint64_t v14 = result;
      uint64_t v21 = *a2;
      if (*a2) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  uint64_t v26 = v21 + 16 * v24;
  char v25 = 1;
LABEL_31:
  *uint64_t v5 = (uint64_t)v14;
  v5[1] = v26;
  *((unsigned char *)v5 + 16) = v25;
  return result;
}

void non-virtual thunk to'WebKit::WebAutomationSession::simulateKeyboardInteraction(uint64_t a1, WebKit::WebAutomationSession *a2, int a3, int *a4, uint64_t *a5)
{
}

WTF::StringImpl *WebKit::WebAutomationSession::performMouseInteraction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
  char v7 = *a7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v10);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)&v10);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v107, a1, a2);
  uint64_t v7 = v107;
  if (v107)
  {
    unint64_t v8 = *(unsigned int *)(*(void *)a3 + 28);
    if (v8)
    {
      char v104 = 0;
      uint64_t v105 = 0;
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v8);
      uint64_t v9 = *(unsigned int *)(*(void *)a3 + 28);
      if (!v9)
      {
LABEL_112:
        if (HIDWORD(v105))
        {
          CFRetain(*((CFTypeRef *)a1 + 1));
          int v62 = *a4;
          *a4 = 0;
          CFRetain(*(CFTypeRef *)(v7 + 8));
          int v103 = *(WTF::StringImpl **)(*(void *)(v7 + 32) + 760);
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)&v91, (uint64_t *)a1 + 22, (uint64_t *)&v103);
          unsigned int v63 = (uint64_t *)((char *)v91 + 8);
          if (*((void *)v91 + 1))
          {
            int v87 = 6;
            LOBYTE(v88) = 0;
            char v89 = 0;
            char v90 = 1;
            WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)v91 + 1, &v87);
            if (v90)
            {
              if (v89)
              {
                char v65 = v88;
                int v88 = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2) {
                    WTF::StringImpl::destroy(v65, v64);
                  }
                  else {
                    *(_DWORD *)v65 -= 2;
                  }
                }
              }
            }
          }
          uint64_t v79 = (void *)WTF::fastMalloc((WTF *)0x20);
          void *v79 = &unk_1EE9FAE50;
          v79[1] = a1;
          v79[2] = v62;
          v79[3] = v7;
          uint64_t v80 = *v63;
          *unsigned int v63 = (uint64_t)v79;
          if (v80) {
            (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
          }
          if (HIDWORD(v105))
          {
            int v81 = v104;
            uint64_t v82 = 8 * HIDWORD(v105);
            do
            {
              uint64_t v83 = *v81++;
              (*(void (**)(uint64_t))(*(void *)v83 + 16))(v83);
              v82 -= 8;
            }
            while (v82);
          }
          goto LABEL_158;
        }
        unsigned __int16 v75 = *a4;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v93);
        char v91 = (WTF::StringImpl *)"No actions to perform.";
        uint64_t v92 = 23;
        LOBYTE(v101) = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v93, (char *)&v101, (uint64_t *)&v91, &v103);
        if (v103)
        {
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v75, (const WTF::String *)&v103);
          uint64_t v76 = v103;
          int v103 = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2) {
              WTF::StringImpl::destroy(v76, v22);
            }
            else {
              *(_DWORD *)v76 -= 2;
            }
          }
          long long v78 = v93;
          __int16 v93 = 0;
          if (!v78) {
            goto LABEL_158;
          }
          goto LABEL_149;
        }
LABEL_169:
        __break(0xC471u);
        JUMPOUT(0x199248764);
      }
      unint64_t v10 = "type";
      unint64_t v11 = *(WTF::JSONImpl::ObjectBase ***)(*(void *)a3 + 16);
      uint64_t v12 = 8 * v9;
      while (1)
      {
        unsigned int v13 = *v11;
        unsigned int v14 = *((_DWORD *)*v11 + 1);
        if (v14 != 5)
        {
          if (v14 <= 6 && v14 != 5)
          {
            uint64_t v73 = *a4;
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v102);
            char v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter was invalid.";
            uint64_t v92 = 60;
            LOBYTE(v101) = 59;
            WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v102, (char *)&v101, (uint64_t *)&v91, &v103);
            if (!v103)
            {
              __break(0xC471u);
              JUMPOUT(0x19924879CLL);
            }
            Inspector::BackendDispatcher::CallbackBase::sendFailure(v73, (const WTF::String *)&v103);
            char v74 = v103;
            int v103 = 0;
            if (v74)
            {
              if (*(_DWORD *)v74 == 2) {
                WTF::StringImpl::destroy(v74, v22);
              }
              else {
                *(_DWORD *)v74 -= 2;
              }
            }
            long long v78 = v102;
            char v102 = 0;
            if (!v78)
            {
LABEL_158:
              WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v104, v22);
              goto LABEL_159;
            }
LABEL_149:
            if (*(_DWORD *)v78 == 2) {
              WTF::StringImpl::destroy(v78, v22);
            }
            else {
              *(_DWORD *)v78 -= 2;
            }
            goto LABEL_158;
          }
          goto LABEL_169;
        }
        ++*(_DWORD *)v13;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        long long v101 = v91;
        WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v103, v13, (const WTF::String *)&v101);
        char v16 = v101;
        long long v101 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v15);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        if (!v103)
        {
          uint64_t v21 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v100);
          char v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter is missing the 'type' key.";
          uint64_t v92 = 74;
          LOBYTE(v98) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v100, (char *)&v98, (uint64_t *)&v91, &v101);
          if (!v101)
          {
            __break(0xC471u);
            JUMPOUT(0x19924876CLL);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v21, (const WTF::String *)&v101);
          uint64_t v23 = v101;
          long long v101 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v22);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          uint64_t v36 = v100;
          char v100 = 0;
          if (v36)
          {
LABEL_66:
            if (*(_DWORD *)v36 == 2) {
              WTF::StringImpl::destroy(v36, v22);
            }
            else {
              *(_DWORD *)v36 -= 2;
            }
          }
LABEL_69:
          int v52 = 1;
          goto LABEL_103;
        }
        uint64_t v17 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::KeyboardInteractionType>(&v103);
        if ((v17 & 0xFF00000000) == 0)
        {
          unint64_t v24 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v99);
          char v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter has an invalid 'type' key.";
          uint64_t v92 = 74;
          LOBYTE(v98) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v99, (char *)&v98, (uint64_t *)&v91, &v101);
          if (!v101)
          {
            __break(0xC471u);
            JUMPOUT(0x199248774);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v24, (const WTF::String *)&v101);
          char v25 = v101;
          long long v101 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v22);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          uint64_t v36 = v99;
          char v99 = 0;
          if (v36) {
            goto LABEL_66;
          }
          goto LABEL_69;
        }
        uint64_t v18 = v17;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        int v98 = v91;
        WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v101, v13, (const WTF::String *)&v98);
        uint64_t v20 = v98;
        int v98 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v19);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        if (v101)
        {
          uint64_t v26 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(&v101);
          if (!BYTE4(v26))
          {
            char v37 = *a4;
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v97);
            char v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter has an invalid 'key' value.";
            uint64_t v92 = 75;
            LOBYTE(v96) = 59;
            WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v97, (char *)&v96, (uint64_t *)&v91, &v98);
            if (!v98)
            {
              __break(0xC471u);
              JUMPOUT(0x19924877CLL);
            }
            Inspector::BackendDispatcher::CallbackBase::sendFailure(v37, (const WTF::String *)&v98);
            char v38 = v98;
            int v98 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2) {
                WTF::StringImpl::destroy(v38, v22);
              }
              else {
                *(_DWORD *)v38 -= 2;
              }
            }
            double v54 = v97;
            uint64_t v97 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2) {
                WTF::StringImpl::destroy(v54, v22);
              }
              else {
                *(_DWORD *)v54 -= 2;
              }
            }
            int v52 = 1;
            goto LABEL_99;
          }
          uint64_t v27 = v26;
          CFRetain(*(CFTypeRef *)(v7 + 8));
          unint64_t v28 = v86 & 0xFFFFFF0000000000 | v18 & 0xFFFFFFFFFFLL;
          uint64_t v29 = HIDWORD(v105);
          if (HIDWORD(v105) == v105)
          {
            unint64_t v30 = HIDWORD(v105) + ((unint64_t)HIDWORD(v105) >> 2);
            if (v30 >= 0x10) {
              unint64_t v31 = v30 + 1;
            }
            else {
              unint64_t v31 = 16;
            }
            if (v31 <= (unint64_t)HIDWORD(v105) + 1) {
              unint64_t v32 = HIDWORD(v105) + 1;
            }
            else {
              unint64_t v32 = v31;
            }
            WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v32);
            uint64_t v84 = HIDWORD(v105);
            unsigned __int16 v33 = v104;
            uint64_t v34 = WTF::fastMalloc((WTF *)0x28);
            *(void *)uint64_t v34 = &unk_1EE9FADF0;
            *(void *)(v34 + 8) = a1;
            uint64_t v35 = v7;
            *(void *)(v34 + 16) = v7;
            *(void *)(v34 + 24) = v28;
            *(_DWORD *)(v34 + 32) = v27;
            *(unsigned char *)(v34 + 36) = BYTE4(v27);
            v33[v84] = v34;
          }
          else
          {
            uint64_t v85 = v104;
            uint64_t v39 = WTF::fastMalloc((WTF *)0x28);
            *(void *)uint64_t v39 = &unk_1EE9FADF0;
            *(void *)(v39 + 8) = a1;
            uint64_t v35 = v7;
            *(void *)(v39 + 16) = v7;
            *(void *)(v39 + 24) = v28;
            *(_DWORD *)(v39 + 32) = v27;
            *(unsigned char *)(v39 + 36) = BYTE4(v27);
            v85[v29] = v39;
          }
          unint64_t v86 = v86 & 0xFFFFFF0000000000 | v18 & 0xFFFFFFFFFFLL;
          ++HIDWORD(v105);
          uint64_t v7 = v35;
          unint64_t v10 = "type";
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v96 = v91;
        WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v98, v13, (const WTF::String *)&v96);
        uint64_t v40 = v96;
        uint64_t v96 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2) {
            WTF::StringImpl::destroy(v40, v22);
          }
          else {
            *(_DWORD *)v40 -= 2;
          }
        }
        if (v98)
        {
          if ((v18 - 106) < 2)
          {
            uint64_t v41 = *a4;
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v95);
            char v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter has an invalid 'key' value.";
            uint64_t v92 = 75;
            v108[0] = 59;
            WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v95, v108, (uint64_t *)&v91, &v96);
            if (!v96)
            {
              __break(0xC471u);
              JUMPOUT(0x199248784);
            }
            Inspector::BackendDispatcher::CallbackBase::sendFailure(v41, (const WTF::String *)&v96);
            long long v42 = v96;
            uint64_t v96 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2) {
                WTF::StringImpl::destroy(v42, v22);
              }
              else {
                *(_DWORD *)v42 -= 2;
              }
            }
            uint64_t v53 = v95;
            int v95 = 0;
            if (v53) {
              goto LABEL_91;
            }
            goto LABEL_94;
          }
          if (v18 == 108)
          {
            CFRetain(*(CFTypeRef *)(v7 + 8));
            int v43 = v98;
            if (v98) {
              *(_DWORD *)v98 += 2;
            }
            char v44 = v10;
            uint64_t v45 = HIDWORD(v105);
            if (HIDWORD(v105) == v105)
            {
              unint64_t v46 = HIDWORD(v105) + ((unint64_t)HIDWORD(v105) >> 2);
              if (v46 >= 0x10) {
                unint64_t v47 = v46 + 1;
              }
              else {
                unint64_t v47 = 16;
              }
              if (v47 <= (unint64_t)HIDWORD(v105) + 1) {
                unint64_t v48 = HIDWORD(v105) + 1;
              }
              else {
                unint64_t v48 = v47;
              }
              WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v48);
              uint64_t v49 = HIDWORD(v105);
              double v50 = v104;
              double v51 = (void *)WTF::fastMalloc((WTF *)0x20);
              void *v51 = &unk_1EE9FAE28;
              v51[1] = a1;
              unsigned char v51[2] = v7;
              v51[3] = v43;
              v50[v49] = (uint64_t)v51;
            }
            else
            {
              char v55 = v104;
              uint64_t v56 = (void *)WTF::fastMalloc((WTF *)0x20);
              void *v56 = &unk_1EE9FAE28;
              v56[1] = a1;
              _OWORD v56[2] = v7;
              v56[3] = v43;
              v55[v45] = (uint64_t)v56;
            }
            ++HIDWORD(v105);
            unint64_t v10 = v44;
          }
        }
        if (v101) {
          break;
        }
        unint64_t v57 = v98;
        if (!v98)
        {
          BOOL v58 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v94);
          char v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter is missing both 'key' and 'text'. One "
                                   "must be provided.";
          uint64_t v92 = 103;
          v108[0] = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v94, v108, (uint64_t *)&v91, &v96);
          if (!v96)
          {
            __break(0xC471u);
            JUMPOUT(0x19924878CLL);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v58, (const WTF::String *)&v96);
          char v59 = v96;
          uint64_t v96 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2) {
              WTF::StringImpl::destroy(v59, v22);
            }
            else {
              *(_DWORD *)v59 -= 2;
            }
          }
          uint64_t v53 = v94;
          uint64_t v94 = 0;
          if (v53)
          {
LABEL_91:
            if (*(_DWORD *)v53 == 2) {
              WTF::StringImpl::destroy(v53, v22);
            }
            else {
              *(_DWORD *)v53 -= 2;
            }
          }
LABEL_94:
          int v52 = 1;
LABEL_95:
          unint64_t v57 = v98;
          int v98 = 0;
          if (!v57) {
            goto LABEL_99;
          }
          goto LABEL_96;
        }
        int v52 = 0;
        int v98 = 0;
LABEL_96:
        if (*(_DWORD *)v57 == 2) {
          WTF::StringImpl::destroy(v57, v22);
        }
        else {
          *(_DWORD *)v57 -= 2;
        }
LABEL_99:
        BOOL v60 = v101;
        long long v101 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2) {
            WTF::StringImpl::destroy(v60, v22);
          }
          else {
            *(_DWORD *)v60 -= 2;
          }
        }
LABEL_103:
        char v61 = v103;
        int v103 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2) {
            WTF::StringImpl::destroy(v61, v22);
          }
          else {
            *(_DWORD *)v61 -= 2;
          }
        }
        if (*(_DWORD *)v13 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*(_DWORD *)v13;
        }
        if (v52) {
          goto LABEL_158;
        }
        ++v11;
        v12 -= 8;
        if (!v12) {
          goto LABEL_112;
        }
      }
      int v52 = 0;
      goto LABEL_95;
    }
    unsigned __int16 v69 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v106);
    char v91 = (WTF::StringImpl *)"The parameter 'interactions' was not found or empty.";
    uint64_t v92 = 53;
    LOBYTE(v103) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v106, (char *)&v103, (uint64_t *)&v91, &v104);
    if (!v104)
    {
      __break(0xC471u);
      JUMPOUT(0x199248794);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v69, (const WTF::String *)&v104);
    uint64_t v71 = (WTF::StringImpl *)v104;
    char v104 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2) {
        WTF::StringImpl::destroy(v71, v70);
      }
      else {
        *(_DWORD *)v71 -= 2;
      }
    }
    char v77 = v106;
    uint64_t v106 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2) {
        WTF::StringImpl::destroy(v77, v70);
      }
      else {
        *(_DWORD *)v77 -= 2;
      }
    }
LABEL_159:
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    char v66 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v91);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v66, (const WTF::String *)&v91);
    uint64_t v68 = v91;
    char v91 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2) {
        WTF::StringImpl::destroy(v68, v67);
      }
      else {
        *(_DWORD *)v68 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::performKeyboardInteractions(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
}

void WebKit::WebAutomationSession::performInteractionSequence(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
  unint64_t v10 = a1;
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v311, a1, a2);
  unint64_t v11 = v311;
  if (!v311)
  {
    uint64_t v15 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v261);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v15, (const WTF::String *)&v261);
    uint64_t v17 = v261;
    v261 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    return;
  }
  char v310 = 0;
  WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v308, v10, a3, &v310);
  if (v310)
  {
    uint64_t v12 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v261);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)&v261);
    unsigned int v14 = v261;
    v261 = 0;
    if (!v14) {
      goto LABEL_523;
    }
    goto LABEL_4;
  }
  uint64_t v18 = *(unsigned int *)(*(void *)a4 + 28);
  if (!v18)
  {
    char v77 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v307);
    v261 = (WTF::StringImpl *)"The parameter 'inputSources' was not found or empty.";
    uint64_t v262 = 53;
    LOBYTE(v313[0]) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v307, (char *)v313, (uint64_t *)&v261, v281);
    if (!v281[0])
    {
      __break(0xC471u);
      JUMPOUT(0x19924A818);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v77, (const WTF::String *)v281);
    long long v78 = v281[0];
    v281[0] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2) {
        WTF::StringImpl::destroy(v78, v13);
      }
      else {
        *(_DWORD *)v78 -= 2;
      }
    }
    unsigned int v14 = v307;
    v307 = 0;
    if (!v14) {
      goto LABEL_523;
    }
LABEL_4:
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
    goto LABEL_523;
  }
  int v19 = *(WTF::JSONImpl::ObjectBase ***)(*(void *)a4 + 16);
  uint64_t v20 = &v19[v18];
  v306 = 0;
  v257 = (uint64_t *)((char *)v10 + 280);
LABEL_11:
  uint64_t v21 = *v19;
  unsigned int v22 = *((_DWORD *)*v19 + 1);
  if (v22 == 5)
  {
    ++*(_DWORD *)v21;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v313[0] = v261;
    WTF::JSONImpl::ObjectBase::getString((uint64_t *)v281, v21, (const WTF::String *)v313);
    unint64_t v24 = v313[0];
    v313[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    if (!v281[0])
    {
      uint64_t v27 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v304);
      v261 = (WTF::StringImpl *)"An input source in the 'inputSources' parameter is missing a 'sourceId'.";
      uint64_t v262 = 73;
      LOBYTE(v298) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v304, (char *)&v298, (uint64_t *)&v261, v313);
      if (!v313[0])
      {
        __break(0xC471u);
        JUMPOUT(0x19924A7E8);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v27, (const WTF::String *)v313);
      uint64_t v29 = v313[0];
      v313[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v28);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      char v38 = v304;
      v304 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, v28);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
      int v39 = 1;
      goto LABEL_95;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v298 = v261;
    WTF::JSONImpl::ObjectBase::getString((uint64_t *)v313, v21, (const WTF::String *)&v298);
    uint64_t v26 = v298;
    v298 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (!v313[0])
    {
      uint64_t v34 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v303);
      v261 = (WTF::StringImpl *)"An input source in the 'inputSources' parameter is missing a 'sourceType'.";
      uint64_t v262 = 75;
      LOBYTE(v292) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v303, (char *)&v292, (uint64_t *)&v261, &v298);
      if (!v298)
      {
        __break(0xC471u);
        JUMPOUT(0x19924A7F0);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v34, (const WTF::String *)&v298);
      uint64_t v35 = v298;
      v298 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v28);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      uint64_t v40 = v303;
      v303 = 0;
      if (!v40) {
        goto LABEL_90;
      }
LABEL_87:
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v28);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
LABEL_90:
      int v39 = 1;
      goto LABEL_91;
    }
    uint64_t v30 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::InputSourceType>(v313);
    if ((v30 & 0xFF00000000) == 0)
    {
      uint64_t v36 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v302);
      v261 = (WTF::StringImpl *)"An input source in the 'inputSources' parameter has an invalid 'sourceType'.";
      uint64_t v262 = 77;
      LOBYTE(v292) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v302, (char *)&v292, (uint64_t *)&v261, &v298);
      if (!v298)
      {
        __break(0xC471u);
        JUMPOUT(0x19924A7F8);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v36, (const WTF::String *)&v298);
      char v37 = v298;
      v298 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v28);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
      uint64_t v40 = v302;
      v302 = 0;
      if (v40) {
        goto LABEL_87;
      }
      goto LABEL_90;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 3;
    switch((int)v30)
    {
      case 'p':
        goto LABEL_51;
      case 'q':
      case 'u':
        goto LABEL_52;
      case 'r':
        uint64_t v32 = 1;
        goto LABEL_51;
      case 's':
        uint64_t v32 = 3;
LABEL_51:
        uint64_t v33 = v32;
LABEL_52:
        v253 = v20;
        v255 = a6;
        int v43 = v306;
        if (!v306) {
          goto LABEL_53;
        }
        int v65 = *((_DWORD *)v306 - 2);
        unsigned int v66 = *((_DWORD *)v281[0] + 4);
        if (v66 >= 0x100) {
          unsigned int v67 = v66 >> 8;
        }
        else {
          unsigned int v67 = WTF::StringImpl::hashSlowCase(v281[0]);
        }
        int v68 = 0;
        break;
      case 't':
        uint64_t v41 = *a6;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v301);
        v261 = (WTF::StringImpl *)"Wheel input sources are not yet supported.";
        uint64_t v262 = 43;
        LOBYTE(v292) = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v301, (char *)&v292, (uint64_t *)&v261, &v298);
        if (!v298)
        {
          __break(0xC471u);
          JUMPOUT(0x19924A800);
        }
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v41, (const WTF::String *)&v298);
        long long v42 = v298;
        v298 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2) {
            WTF::StringImpl::destroy(v42, v28);
          }
          else {
            *(_DWORD *)v42 -= 2;
          }
        }
        uint64_t v40 = v301;
        v301 = 0;
        if (v40) {
          goto LABEL_87;
        }
        goto LABEL_90;
      default:
        __break(0xC471u);
        JUMPOUT(0x19924A7E0);
    }
    while (1)
    {
      int v69 = v67 & v65;
      uint64_t v70 = v43[v67 & v65];
      if (v70 != (WTF *)-1)
      {
        if (!v70)
        {
LABEL_53:
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v306, v281, v31, (uint64_t)&v261);
          uint64_t v45 = *v257;
          uint64_t v251 = a5;
          if (*v257
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v257),
                (uint64_t v45 = *v257) != 0))
          {
            int v46 = *(_DWORD *)(v45 - 8);
          }
          else
          {
            int v46 = 0;
          }
          unint64_t v47 = v10;
          unsigned int v48 = *((_DWORD *)v281[0] + 4);
          if (v48 >= 0x100) {
            unsigned int v49 = v48 >> 8;
          }
          else {
            unsigned int v49 = WTF::StringImpl::hashSlowCase(v281[0]);
          }
          double v50 = 0;
          int v51 = 1;
          while (2)
          {
            unsigned int v52 = v49 & v46;
            uint64_t v53 = (uint64_t *)(v45 + 16 * (v49 & v46));
            double v54 = (WTF *)*v53;
            if (*v53 == -1)
            {
              double v50 = (uint64_t *)(v45 + 16 * v52);
LABEL_65:
              unsigned int v49 = v51 + v52;
              ++v51;
              continue;
            }
            break;
          }
          if (v54)
          {
            if (WTF::equal(v54, v281[0], v44))
            {
              int v39 = 0;
              a6 = v255;
              unint64_t v10 = v47;
              a5 = v251;
              goto LABEL_72;
            }
            goto LABEL_65;
          }
          if (v50)
          {
            *double v50 = 0;
            v50[1] = 0;
            --*(_DWORD *)(*v257 - 16);
            uint64_t v53 = v50;
          }
          WTF::String::operator=(v53, v281);
          char v55 = (_DWORD *)WTF::fastMalloc((WTF *)0x78);
          *char v55 = 1;
          v55[1] = v33;
          WebKit::SimulatedInputSourceState::emptyStateForSourceType(v33, (uint64_t)(v55 + 2));
          uint64_t v56 = (_DWORD *)v53[1];
          v53[1] = (uint64_t)v55;
          a6 = v255;
          if (v56) {
            WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v56);
          }
          uint64_t v57 = *v257;
          uint64_t v20 = v253;
          if (*v257) {
            int v58 = *(_DWORD *)(v57 - 12) + 1;
          }
          else {
            int v58 = 1;
          }
          *(_DWORD *)(v57 - 12) = v58;
          uint64_t v59 = *v257;
          if (*v257) {
            int v60 = *(_DWORD *)(v59 - 12);
          }
          else {
            int v60 = 0;
          }
          uint64_t v61 = (*(_DWORD *)(v59 - 16) + v60);
          unint64_t v62 = *(unsigned int *)(v59 - 4);
          if (v62 > 0x400)
          {
            if (v62 <= 2 * v61) {
LABEL_82:
            }
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v257);
          }
          else if (3 * v62 <= 4 * v61)
          {
            goto LABEL_82;
          }
          int v39 = 0;
          unint64_t v10 = v47;
          a5 = v251;
LABEL_91:
          unsigned int v63 = v313[0];
          v313[0] = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2) {
              WTF::StringImpl::destroy(v63, v28);
            }
            else {
              *(_DWORD *)v63 -= 2;
            }
          }
LABEL_95:
          uint64_t v64 = v281[0];
          v281[0] = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2) {
              WTF::StringImpl::destroy(v64, v28);
            }
            else {
              *(_DWORD *)v64 -= 2;
            }
          }
          if (*(_DWORD *)v21 == 1) {
            WTF::JSONImpl::Value::operator delete();
          }
          else {
            --*(_DWORD *)v21;
          }
          if (v39) {
            goto LABEL_520;
          }
          if (++v19 == v20)
          {
            v298 = 0;
            uint64_t v299 = 0;
            uint64_t v80 = *(unsigned int *)(*(void *)a5 + 28);
            if (v80)
            {
              v250 = (CFTypeRef *)v10;
              int v81 = *(WTF::JSONImpl::ObjectBase ***)(*(void *)a5 + 16);
              v254 = &v81[v80];
              uint64_t v82 = &v262;
              while (1)
              {
                uint64_t v83 = *v81;
                unsigned int v84 = *((_DWORD *)*v81 + 1);
                if (v84 != 5) {
                  break;
                }
                ++*(_DWORD *)v83;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v281[0] = v261;
                WTF::JSONImpl::ObjectBase::getArray(&v295, v83, (const WTF::String *)v281);
                unint64_t v86 = v281[0];
                v281[0] = 0;
                if (v86)
                {
                  if (*(_DWORD *)v86 == 2) {
                    WTF::StringImpl::destroy(v86, v85);
                  }
                  else {
                    *(_DWORD *)v86 -= 2;
                  }
                }
                if (!v295)
                {
                  v222 = *a6;
                  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v294);
                  v261 = (WTF::StringImpl *)"A step is missing the 'states' property.";
                  uint64_t v262 = 41;
                  LOBYTE(v313[0]) = 59;
                  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v294, (char *)v313, (uint64_t *)&v261, v281);
                  if (!v281[0])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19924A850);
                  }
                  Inspector::BackendDispatcher::CallbackBase::sendFailure(v222, (const WTF::String *)v281);
                  v224 = v281[0];
                  v281[0] = 0;
                  if (v224)
                  {
                    if (*(_DWORD *)v224 == 2) {
                      WTF::StringImpl::destroy(v224, v223);
                    }
                    else {
                      *(_DWORD *)v224 -= 2;
                    }
                  }
                  v232 = v294;
                  v294 = 0;
                  if (v232)
                  {
                    if (*(_DWORD *)v232 == 2) {
                      WTF::StringImpl::destroy(v232, v223);
                    }
                    else {
                      *(_DWORD *)v232 -= 2;
                    }
                  }
                  int v231 = 1;
                  goto LABEL_475;
                }
                v292 = 0;
                uint64_t v293 = 0;
                WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v292, *(unsigned int *)(v295 + 28));
                uint64_t v88 = *(unsigned int *)(v295 + 28);
                if (!v88) {
                  goto LABEL_458;
                }
                char v89 = *(WTF::JSONImpl::ObjectBase ***)(v295 + 16);
                v256 = &v89[v88];
                while (2)
                {
                  char v90 = *v89;
                  unsigned int v91 = *((_DWORD *)*v89 + 1);
                  if (v91 == 5)
                  {
                    ++*(_DWORD *)v90;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v281[0] = v261;
                    WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v290, v90, (const WTF::String *)v281);
                    uint64_t v94 = v281[0];
                    v281[0] = 0;
                    if (v94)
                    {
                      if (*(_DWORD *)v94 == 2) {
                        WTF::StringImpl::destroy(v94, v92);
                      }
                      else {
                        *(_DWORD *)v94 -= 2;
                      }
                    }
                    if (!v290)
                    {
                      long long v101 = *a6;
                      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v289);
                      v261 = (WTF::StringImpl *)"Step state lacks required 'sourceId' property.";
                      uint64_t v262 = 47;
                      LOBYTE(v313[0]) = 59;
                      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v289, (char *)v313, (uint64_t *)&v261, v281);
                      if (!v281[0])
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19924A820);
                      }
                      Inspector::BackendDispatcher::CallbackBase::sendFailure(v101, (const WTF::String *)v281);
                      char v102 = v281[0];
                      v281[0] = 0;
                      if (v102)
                      {
                        if (*(_DWORD *)v102 == 2) {
                          WTF::StringImpl::destroy(v102, v87);
                        }
                        else {
                          *(_DWORD *)v102 -= 2;
                        }
                      }
                      uint64_t v112 = v289;
                      v289 = 0;
                      if (v112)
                      {
LABEL_188:
                        if (*(_DWORD *)v112 == 2) {
                          WTF::StringImpl::destroy(v112, v87);
                        }
                        else {
                          *(_DWORD *)v112 -= 2;
                        }
                      }
LABEL_191:
                      int v113 = 1;
                      goto LABEL_192;
                    }
                    int v95 = v82;
                    uint64_t v96 = a6;
                    uint64_t v97 = *v257;
                    if (!*v257)
                    {
LABEL_176:
                      a6 = v96;
                      uint64_t v106 = *v96;
                      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v288);
                      v261 = (WTF::StringImpl *)"Unknown 'sourceId' specified.";
                      uint64_t v262 = 30;
                      LOBYTE(v313[0]) = 59;
                      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v288, (char *)v313, (uint64_t *)&v261, v281);
                      if (!v281[0])
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19924A828);
                      }
                      Inspector::BackendDispatcher::CallbackBase::sendFailure(v106, (const WTF::String *)v281);
                      uint64_t v107 = v281[0];
                      v281[0] = 0;
                      uint64_t v82 = v95;
                      if (v107)
                      {
                        if (*(_DWORD *)v107 == 2) {
                          WTF::StringImpl::destroy(v107, v87);
                        }
                        else {
                          *(_DWORD *)v107 -= 2;
                        }
                      }
                      uint64_t v112 = v288;
                      v288 = 0;
                      if (v112) {
                        goto LABEL_188;
                      }
                      goto LABEL_191;
                    }
                    int v98 = *(_DWORD *)(v97 - 8);
                    unsigned int v99 = *((_DWORD *)v290 + 4);
                    if (v99 >= 0x100) {
                      unsigned int v100 = v99 >> 8;
                    }
                    else {
                      unsigned int v100 = WTF::StringImpl::hashSlowCase(v290);
                    }
                    for (i = 0; ; unsigned int v100 = i + v104)
                    {
                      int v104 = v100 & v98;
                      uint64_t v105 = *(WTF **)(v97 + 16 * (v100 & v98));
                      if (v105 != (WTF *)-1)
                      {
                        if (!v105) {
                          goto LABEL_176;
                        }
                        if (WTF::equal(v105, v290, v93)) {
                          break;
                        }
                      }
                      ++i;
                    }
                    uint64_t v108 = *v257;
                    if (*v257)
                    {
                      int v109 = *(_DWORD *)(v108 - 8);
                      unsigned int v110 = *((_DWORD *)v290 + 4);
                      a6 = v96;
                      if (v110 >= 0x100) {
                        unsigned int v111 = v110 >> 8;
                      }
                      else {
                        unsigned int v111 = WTF::StringImpl::hashSlowCase(v290);
                      }
                      for (j = 0; ; unsigned int v111 = j + v117)
                      {
                        uint64_t v117 = v111 & v109;
                        uint64_t v118 = *(WTF **)(v108 + 16 * v117);
                        if (v118 != (WTF *)-1)
                        {
                          if (!v118)
                          {
                            uint64_t v115 = 0;
                            goto LABEL_211;
                          }
                          if (WTF::equal(v118, v290, v93)) {
                            break;
                          }
                        }
                        ++j;
                      }
                      uint64_t v115 = *(WTF::StringImpl **)(v108 + 16 * v117 + 8);
                    }
                    else
                    {
                      uint64_t v115 = 0;
                      a6 = v96;
                    }
LABEL_211:
                    ++*(_DWORD *)v115;
                    v283[4] = 0;
                    v283[8] = 0;
                    v283[12] = 0;
                    v283[16] = 0;
                    v283[20] = 0;
                    LOBYTE(v284) = 0;
                    char v285 = 0;
                    v286[0] = 0;
                    v286[8] = 0;
                    v286[12] = 0;
                    v286[20] = 0;
                    v286[24] = 0;
                    char v287 = 0;
                    *(_OWORD *)v281 = 0u;
                    long long v282 = 0u;
                    v283[0] = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v313[0] = v261;
                    WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v280, v90, (const WTF::String *)v313);
                    uint64_t v120 = v313[0];
                    v313[0] = 0;
                    uint64_t v82 = v95;
                    if (v120)
                    {
                      if (*(_DWORD *)v120 == 2) {
                        WTF::StringImpl::destroy(v120, v119);
                      }
                      else {
                        *(_DWORD *)v120 -= 2;
                      }
                    }
                    if (v280)
                    {
                      if (WTF::numGraphemeClusters() != 1)
                      {
                        long long v124 = *a6;
                        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v279);
                        v261 = (WTF::StringImpl *)"Invalid 'pressedCharKey'.";
                        uint64_t v262 = 26;
                        LOBYTE(v278) = 59;
                        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v279, (char *)&v278, (uint64_t *)&v261, v313);
                        if (!v313[0])
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19924A830);
                        }
                        Inspector::BackendDispatcher::CallbackBase::sendFailure(v124, (const WTF::String *)v313);
                        uint64_t v125 = v313[0];
                        v313[0] = 0;
                        if (v125)
                        {
                          if (*(_DWORD *)v125 == 2) {
                            WTF::StringImpl::destroy(v125, v122);
                          }
                          else {
                            *(_DWORD *)v125 -= 2;
                          }
                        }
                        uint64_t v165 = v279;
                        v279 = 0;
                        if (v165)
                        {
                          if (*(_DWORD *)v165 == 2) {
                            WTF::StringImpl::destroy(v165, v122);
                          }
                          else {
                            *(_DWORD *)v165 -= 2;
                          }
                        }
                        int v113 = 1;
                        goto LABEL_432;
                      }
                      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)v281, &v280, v121, (uint64_t)&v261);
                    }
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v278 = v261;
                    WTF::JSONImpl::ObjectBase::getArray((uint64_t *)v313, v90, (const WTF::String *)&v278);
                    long long v123 = v278;
                    v278 = 0;
                    if (v123)
                    {
                      if (*(_DWORD *)v123 == 2) {
                        WTF::StringImpl::destroy(v123, v122);
                      }
                      else {
                        *(_DWORD *)v123 -= 2;
                      }
                    }
                    v252 = v115;
                    if (!v313[0]) {
                      goto LABEL_289;
                    }
                    v278 = 0;
                    if (!*((_DWORD *)v313[0] + 7))
                    {
LABEL_284:
                      WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::operator=((uint64_t *)&v282 + 1, (int **)&v278);
                      int v150 = 1;
                      goto LABEL_286;
                    }
                    uint64_t v126 = (WTF::JSONImpl::Value **)*((void *)v313[0] + 2);
LABEL_229:
                    WTF::JSONImpl::Value::asString((uint64_t *)&v277, *v126);
                    if (v277)
                    {
                      uint64_t v127 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(&v277);
                      if ((v127 & 0xFF00000000) != 0)
                      {
                        int v128 = v127;
                        int v129 = v127 - 40;
                        int v130 = v127;
                        if ((v127 - 40) <= 0x21)
                        {
                          int v130 = v127;
                          if ((0x2AAAA805BuLL >> v129)) {
                            int v130 = dword_1994F78D0[v129];
                          }
                        }
                        uint64_t v131 = v278;
                        if (v278
                          || (WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::expand((uint64_t *)&v278),
                              (uint64_t v131 = v278) != 0))
                        {
                          int v132 = *((_DWORD *)v131 - 2);
                        }
                        else
                        {
                          int v132 = 0;
                        }
                        unsigned int v133 = 9 * ((v130 + ~(v130 << 15)) ^ ((v130 + ~(v130 << 15)) >> 10));
                        unsigned int v134 = (v133 ^ (v133 >> 6)) + ~((v133 ^ (v133 >> 6)) << 11);
                        unsigned int v135 = v132 & (v134 ^ HIWORD(v134));
                        __int16 v122 = (WTF::StringImpl *)((char *)v131 + 8 * v135);
                        int v136 = *(_DWORD *)v122;
                        if (*(_DWORD *)v122 != 0x7FFFFFFF)
                        {
                          long long v137 = 0;
                          int v138 = 1;
                          do
                          {
                            if (v136 == v130)
                            {
                              char v147 = 1;
                              uint64_t v82 = v95;
                              goto LABEL_273;
                            }
                            if (v136 == 2147483646) {
                              long long v137 = v122;
                            }
                            unsigned int v135 = (v135 + v138) & v132;
                            __int16 v122 = (WTF::StringImpl *)((char *)v131 + 8 * v135);
                            int v136 = *(_DWORD *)v122;
                            ++v138;
                          }
                          while (*(_DWORD *)v122 != 0x7FFFFFFF);
                          if (v137)
                          {
                            *(void *)long long v137 = 0x7FFFFFFFLL;
                            --*((_DWORD *)v278 - 4);
                            __int16 v122 = v137;
                          }
                        }
                        *(_DWORD *)__int16 v122 = v130;
                        *((_DWORD *)v122 + 1) = v128;
                        if (v278) {
                          int v139 = *((_DWORD *)v278 - 3) + 1;
                        }
                        else {
                          int v139 = 1;
                        }
                        uint64_t v82 = v95;
                        *((_DWORD *)v278 - 3) = v139;
                        if (v278) {
                          int v144 = *((_DWORD *)v278 - 3);
                        }
                        else {
                          int v144 = 0;
                        }
                        uint64_t v145 = (*((_DWORD *)v278 - 4) + v144);
                        unint64_t v146 = *((unsigned int *)v278 - 1);
                        if (v146 > 0x400)
                        {
                          if (v146 <= 2 * v145) {
LABEL_261:
                          }
                            WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::expand((uint64_t *)&v278);
                        }
                        else if (3 * v146 <= 4 * v145)
                        {
                          goto LABEL_261;
                        }
                        char v147 = 1;
LABEL_273:
                        uint64_t v149 = v277;
                        v277 = 0;
                        if (v149)
                        {
                          if (*(_DWORD *)v149 != 2)
                          {
                            *(_DWORD *)v149 -= 2;
                            goto LABEL_276;
                          }
                          WTF::StringImpl::destroy(v149, v122);
                          if ((v147 & 1) == 0)
                          {
LABEL_285:
                            int v150 = 0;
LABEL_286:
                            if (v278) {
                              WTF::fastFree((WTF::StringImpl *)((char *)v278 - 16), v122);
                            }
                            if (v150) {
LABEL_289:
                            }
                              int v150 = 1;
                            uint64_t v151 = v313[0];
                            v313[0] = 0;
                            if (v151)
                            {
                              if (*(_DWORD *)v151 == 1) {
                                WTF::JSONImpl::Value::operator delete();
                              }
                              else {
                                --*(_DWORD *)v151;
                              }
                            }
                            if (v150)
                            {
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v313[0] = v261;
                              WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v278, v90, (const WTF::String *)v313);
                              uint64_t v153 = v313[0];
                              v313[0] = 0;
                              if (v153)
                              {
                                if (*(_DWORD *)v153 == 2) {
                                  WTF::StringImpl::destroy(v153, v152);
                                }
                                else {
                                  *(_DWORD *)v153 -= 2;
                                }
                              }
                              if (v278)
                              {
                                uint64_t v154 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(&v278);
                                if ((v154 & 0xFF00000000) != 0) {
                                  int v155 = v154;
                                }
                                else {
                                  int v155 = 24;
                                }
                                *(_DWORD *)v283 = v155;
                                v283[4] = 1;
                              }
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v313[0] = v261;
                              WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v277, v90, (const WTF::String *)v313);
                              uint64_t v157 = v313[0];
                              v313[0] = 0;
                              uint64_t v115 = v252;
                              if (v157)
                              {
                                if (*(_DWORD *)v157 == 2) {
                                  WTF::StringImpl::destroy(v157, v156);
                                }
                                else {
                                  *(_DWORD *)v157 -= 2;
                                }
                              }
                              if (v277)
                              {
                                uint64_t v158 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseInteraction>(&v277);
                                *(_DWORD *)&v283[8] = v158;
                                v283[12] = BYTE4(v158);
                              }
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v313[0] = v261;
                              WTF::JSONImpl::ObjectBase::getString((uint64_t *)&v276, v90, (const WTF::String *)v313);
                              uint64_t v160 = v313[0];
                              v313[0] = 0;
                              if (v160)
                              {
                                if (*(_DWORD *)v160 == 2) {
                                  WTF::StringImpl::destroy(v160, v159);
                                }
                                else {
                                  *(_DWORD *)v160 -= 2;
                                }
                              }
                              if (v276)
                              {
                                uint64_t v161 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseMoveOrigin>(&v276);
                                *(_DWORD *)&v283[16] = v161;
                                v283[20] = BYTE4(v161);
                                int v162 = BYTE4(v161);
                              }
                              else
                              {
                                int v162 = v283[20];
                                LODWORD(v161) = *(_DWORD *)&v283[16];
                              }
                              if (!v162 || v161 != 119) {
                                goto LABEL_346;
                              }
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v273 = v261;
                              WTF::JSONImpl::ObjectBase::getString((uint64_t *)v313, v90, (const WTF::String *)&v273);
                              long long v164 = v273;
                              v273 = 0;
                              if (v164)
                              {
                                if (*(_DWORD *)v164 == 2) {
                                  WTF::StringImpl::destroy(v164, v163);
                                }
                                else {
                                  *(_DWORD *)v164 -= 2;
                                }
                              }
                              uint64_t v166 = v313[0];
                              if (v313[0])
                              {
                                std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)&v284, v313);
                              }
                              else
                              {
                                uint64_t v167 = *a6;
                                Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v272);
                                v261 = (WTF::StringImpl *)"Node handle not provided for 'Element' origin";
                                uint64_t v262 = 46;
                                char v312 = 59;
                                WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v272, &v312, (uint64_t *)&v261, &v273);
                                if (!v273)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19924A848);
                                }
                                Inspector::BackendDispatcher::CallbackBase::sendFailure(v167, (const WTF::String *)&v273);
                                uint64_t v168 = v273;
                                v273 = 0;
                                if (v168)
                                {
                                  if (*(_DWORD *)v168 == 2) {
                                    WTF::StringImpl::destroy(v168, v122);
                                  }
                                  else {
                                    *(_DWORD *)v168 -= 2;
                                  }
                                }
                                uint64_t v169 = v272;
                                v272 = 0;
                                if (v169)
                                {
                                  if (*(_DWORD *)v169 == 2) {
                                    WTF::StringImpl::destroy(v169, v122);
                                  }
                                  else {
                                    *(_DWORD *)v169 -= 2;
                                  }
                                }
                              }
                              uint64_t v170 = v313[0];
                              v313[0] = 0;
                              if (v170)
                              {
                                if (*(_DWORD *)v170 == 2) {
                                  WTF::StringImpl::destroy(v170, v122);
                                }
                                else {
                                  *(_DWORD *)v170 -= 2;
                                }
                              }
                              if (!v166)
                              {
                                int v113 = 1;
                              }
                              else
                              {
LABEL_346:
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v273 = v261;
                                WTF::JSONImpl::ObjectBase::getObject((uint64_t *)v313, v90, (const WTF::String *)&v273);
                                long long v172 = v273;
                                v273 = 0;
                                if (v172)
                                {
                                  if (*(_DWORD *)v172 == 2) {
                                    WTF::StringImpl::destroy(v172, v171);
                                  }
                                  else {
                                    *(_DWORD *)v172 -= 2;
                                  }
                                }
                                uint64_t v173 = v313[0];
                                if (v313[0])
                                {
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v273 = v261;
                                  uint64_t Integer = WTF::JSONImpl::ObjectBase::getInteger(v173, (const WTF::String *)&v273);
                                  uint64_t v176 = v273;
                                  v273 = 0;
                                  if (v176)
                                  {
                                    if (*(_DWORD *)v176 == 2) {
                                      WTF::StringImpl::destroy(v176, v174);
                                    }
                                    else {
                                      *(_DWORD *)v176 -= 2;
                                    }
                                  }
                                  char v177 = v313[0];
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v273 = v261;
                                  uint64_t v179 = WTF::JSONImpl::ObjectBase::getInteger(v177, (const WTF::String *)&v273);
                                  char v180 = v273;
                                  v273 = 0;
                                  if (v180)
                                  {
                                    if (*(_DWORD *)v180 == 2) {
                                      WTF::StringImpl::destroy(v180, v178);
                                    }
                                    else {
                                      *(_DWORD *)v180 -= 2;
                                    }
                                  }
                                  if ((Integer & 0xFF00000000) != 0 && (v179 & 0xFF00000000) != 0)
                                  {
                                    if (!v286[8]) {
                                      v286[8] = 1;
                                    }
                                    *(void *)v286 = Integer | ((unint64_t)v179 << 32);
                                  }
                                  v181 = v313[0];
                                  v313[0] = 0;
                                  uint64_t v82 = v95;
                                  if (v181)
                                  {
                                    if (*(_DWORD *)v181 == 1) {
                                      WTF::JSONImpl::Value::operator delete();
                                    }
                                    else {
                                      --*(_DWORD *)v181;
                                    }
                                  }
                                }
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v273 = v261;
                                WTF::JSONImpl::ObjectBase::getObject((uint64_t *)v313, v90, (const WTF::String *)&v273);
                                unsigned int v183 = v273;
                                v273 = 0;
                                if (v183)
                                {
                                  if (*(_DWORD *)v183 == 2) {
                                    WTF::StringImpl::destroy(v183, v182);
                                  }
                                  else {
                                    *(_DWORD *)v183 -= 2;
                                  }
                                }
                                SecKeyRef v184 = v313[0];
                                if (v313[0])
                                {
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v273 = v261;
                                  uint64_t v186 = WTF::JSONImpl::ObjectBase::getInteger(v184, (const WTF::String *)&v273);
                                  v187 = v273;
                                  v273 = 0;
                                  if (v187)
                                  {
                                    if (*(_DWORD *)v187 == 2) {
                                      WTF::StringImpl::destroy(v187, v185);
                                    }
                                    else {
                                      *(_DWORD *)v187 -= 2;
                                    }
                                  }
                                  v188 = v313[0];
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v273 = v261;
                                  uint64_t v190 = WTF::JSONImpl::ObjectBase::getInteger(v188, (const WTF::String *)&v273);
                                  v191 = v273;
                                  v273 = 0;
                                  if (v191)
                                  {
                                    if (*(_DWORD *)v191 == 2) {
                                      WTF::StringImpl::destroy(v191, v189);
                                    }
                                    else {
                                      *(_DWORD *)v191 -= 2;
                                    }
                                  }
                                  if ((v186 & 0xFF00000000) != 0 && (v190 & 0xFF00000000) != 0)
                                  {
                                    if (!v286[20]) {
                                      v286[20] = 1;
                                    }
                                    *(void *)&v286[12] = v186 | ((unint64_t)v190 << 32);
                                  }
                                  v192 = v313[0];
                                  v313[0] = 0;
                                  uint64_t v82 = v95;
                                  if (v192)
                                  {
                                    if (*(_DWORD *)v192 == 1) {
                                      WTF::JSONImpl::Value::operator delete();
                                    }
                                    else {
                                      --*(_DWORD *)v192;
                                    }
                                  }
                                }
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v313[0] = v261;
                                uint64_t v195 = WTF::JSONImpl::ObjectBase::getInteger(v90, (const WTF::String *)v313);
                                v196 = v313[0];
                                v313[0] = 0;
                                if (v196)
                                {
                                  if (*(_DWORD *)v196 == 2) {
                                    WTF::StringImpl::destroy(v196, v193);
                                  }
                                  else {
                                    *(_DWORD *)v196 -= 2;
                                  }
                                }
                                if ((v195 & 0xFF00000000) != 0)
                                {
                                  if (!v287) {
                                    char v287 = 1;
                                  }
                                  *(double *)&v286[24] = (double)(int)v195 / 1000.0;
                                }
                                v261 = v252;
                                v82[1] = 0;
                                v82[2] = 0;
                                *uint64_t v82 = 0;
                                for (int k = v281[1]; k; int k = (WTF::StringImpl *)*((void *)k + 2))
                                  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(v82, (WTF::StringImpl **)k, v194, (uint64_t)v313);
                                WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable(&v265, (int **)&v282 + 1);
                                *(_OWORD *)v266 = *(_OWORD *)v283;
                                *(void *)&v266[13] = *(void *)&v283[13];
                                LOBYTE(v267) = 0;
                                char v268 = 0;
                                if (v285)
                                {
                                  v199 = v284;
                                  if (v284) {
                                    *(_DWORD *)v284 += 2;
                                  }
                                  v267 = v199;
                                  char v268 = 1;
                                }
                                long long v269 = *(_OWORD *)v286;
                                long long v270 = *(_OWORD *)&v286[16];
                                char v271 = v287;
                                unsigned int v200 = HIDWORD(v293);
                                if (HIDWORD(v293) == v293)
                                {
                                  unint64_t v201 = WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v292, HIDWORD(v293) + 1, (unint64_t)&v261);
                                  std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>::pair[abi:sn180100]((uint64_t)v292 + 120 * HIDWORD(v293), v201);
                                }
                                else
                                {
                                  v202 = v292;
                                  v203 = (char *)v292 + 120 * HIDWORD(v293);
                                  *(void *)v203 = v261;
                                  *((void *)v203 + 1) = 0;
                                  uint64_t v204 = v262;
                                  uint64_t v262 = 0;
                                  *((void *)v203 + 1) = v204;
                                  uint64_t v205 = v263;
                                  uint64_t v263 = 0;
                                  *((void *)v203 + 2) = v205;
                                  uint64_t v206 = v264;
                                  uint64_t v264 = 0;
                                  *((void *)v203 + 3) = v206;
                                  *((void *)v203 + 4) = 0;
                                  uint64_t v207 = v265;
                                  uint64_t v265 = 0;
                                  *((void *)v203 + 4) = v207;
                                  long long v208 = *(_OWORD *)v266;
                                  uint64_t v209 = *(void *)&v266[13];
                                  v203[64] = 0;
                                  v210 = v203 + 64;
                                  *(void *)(v210 - 11) = v209;
                                  *(_OWORD *)(v210 - 24) = v208;
                                  v210[8] = 0;
                                  if (v268)
                                  {
                                    v211 = v267;
                                    v267 = 0;
                                    *(void *)v210 = v211;
                                    v210[8] = 1;
                                  }
                                  v212 = (char *)v202 + 120 * v200;
                                  long long v213 = v269;
                                  long long v214 = v270;
                                  v212[112] = v271;
                                  *((_OWORD *)v212 + 5) = v213;
                                  *((_OWORD *)v212 + 6) = v214;
                                }
                                ++HIDWORD(v293);
                                uint64_t v115 = v252;
                                if (v268)
                                {
                                  v215 = v267;
                                  v267 = 0;
                                  if (v215)
                                  {
                                    if (*(_DWORD *)v215 == 2) {
                                      WTF::StringImpl::destroy(v215, v198);
                                    }
                                    else {
                                      *(_DWORD *)v215 -= 2;
                                    }
                                  }
                                }
                                if (v265) {
                                  WTF::fastFree((WTF *)(v265 - 16), v198);
                                }
                                WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v82, v198);
                                if (v262) {
                                  WTF::fastFree((WTF *)(v262 - 16), v122);
                                }
                                int v113 = 0;
                              }
                              v216 = v276;
                              v276 = 0;
                              if (v216)
                              {
                                if (*(_DWORD *)v216 == 2) {
                                  WTF::StringImpl::destroy(v216, v122);
                                }
                                else {
                                  *(_DWORD *)v216 -= 2;
                                }
                              }
                              v217 = v277;
                              v277 = 0;
                              if (v217)
                              {
                                if (*(_DWORD *)v217 == 2) {
                                  WTF::StringImpl::destroy(v217, v122);
                                }
                                else {
                                  *(_DWORD *)v217 -= 2;
                                }
                              }
                              v218 = v278;
                              v278 = 0;
                              if (v218)
                              {
                                if (*(_DWORD *)v218 == 2) {
                                  WTF::StringImpl::destroy(v218, v122);
                                }
                                else {
                                  *(_DWORD *)v218 -= 2;
                                }
                              }
                            }
                            else
                            {
                              int v113 = 1;
                              uint64_t v115 = v252;
                            }
LABEL_432:
                            v219 = v280;
                            v280 = 0;
                            if (v219)
                            {
                              if (*(_DWORD *)v219 == 2) {
                                WTF::StringImpl::destroy(v219, v122);
                              }
                              else {
                                *(_DWORD *)v219 -= 2;
                              }
                            }
                            if (v285)
                            {
                              v220 = v284;
                              v284 = 0;
                              if (v220)
                              {
                                if (*(_DWORD *)v220 == 2) {
                                  WTF::StringImpl::destroy(v220, v122);
                                }
                                else {
                                  *(_DWORD *)v220 -= 2;
                                }
                              }
                            }
                            if (*((void *)&v282 + 1)) {
                              WTF::fastFree((WTF *)(*((void *)&v282 + 1) - 16), v122);
                            }
                            WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v281, v122);
                            if (v281[0]) {
                              WTF::fastFree((WTF::StringImpl *)((char *)v281[0] - 16), v221);
                            }
                            WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v115);
LABEL_192:
                            uint64_t v114 = v290;
                            v290 = 0;
                            if (v114)
                            {
                              if (*(_DWORD *)v114 == 2) {
                                WTF::StringImpl::destroy(v114, v87);
                              }
                              else {
                                *(_DWORD *)v114 -= 2;
                              }
                            }
                            if (*(_DWORD *)v90 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              if (v113) {
                                goto LABEL_485;
                              }
                            }
                            else
                            {
                              --*(_DWORD *)v90;
                              if (v113)
                              {
LABEL_485:
                                int v231 = 1;
                                goto LABEL_474;
                              }
                            }
                            if (++v89 == v256)
                            {
LABEL_458:
                              v261 = v292;
                              uint64_t v228 = v293;
                              v292 = 0;
                              uint64_t v293 = 0;
                              uint64_t v262 = v228;
                              if (HIDWORD(v299) == v299)
                              {
                                WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SimulatedInputKeyFrame>((uint64_t)&v298, (unint64_t)&v261);
                              }
                              else
                              {
                                v229 = (uint64_t *)((char *)v298 + 16 * HIDWORD(v299));
                                uint64_t *v229 = 0;
                                v229[1] = 0;
                                v230 = v261;
                                v261 = 0;
                                uint64_t *v229 = (uint64_t)v230;
                                LODWORD(v230) = v262;
                                LODWORD(v262) = 0;
                                *((_DWORD *)v229 + 2) = v230;
                                LODWORD(v230) = HIDWORD(v262);
                                HIDWORD(v262) = 0;
                                *((_DWORD *)v229 + 3) = v230;
                                ++HIDWORD(v299);
                              }
                              WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v261, v87);
                              int v231 = 0;
                              goto LABEL_474;
                            }
                            continue;
                          }
                        }
                        else
                        {
LABEL_276:
                          if ((v147 & 1) == 0) {
                            goto LABEL_285;
                          }
                        }
                        if (++v126 == (WTF::JSONImpl::Value **)(*((void *)v313[0] + 2)
                                                               + 8 * *((unsigned int *)v313[0] + 7)))
                          goto LABEL_284;
                        goto LABEL_229;
                      }
                      char v142 = *a6;
                      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v274);
                      v261 = (WTF::StringImpl *)"Encountered an unknown virtual key value.";
                      uint64_t v262 = 42;
                      LOBYTE(v273) = 59;
                      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v274, (char *)&v273, (uint64_t *)&v261, &v276);
                      if (!v276)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19924A840);
                      }
                      Inspector::BackendDispatcher::CallbackBase::sendFailure(v142, (const WTF::String *)&v276);
                      uint64_t v143 = v276;
                      v276 = 0;
                      if (v143)
                      {
                        if (*(_DWORD *)v143 == 2) {
                          WTF::StringImpl::destroy(v143, v122);
                        }
                        else {
                          *(_DWORD *)v143 -= 2;
                        }
                      }
                      CFTypeRef v148 = v274;
                      v274 = 0;
                      if (v148)
                      {
LABEL_269:
                        if (*(_DWORD *)v148 == 2) {
                          WTF::StringImpl::destroy(v148, v122);
                        }
                        else {
                          *(_DWORD *)v148 -= 2;
                        }
                      }
                    }
                    else
                    {
                      int v140 = *a6;
                      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v275);
                      v261 = (WTF::StringImpl *)"Encountered a non-string virtual key value.";
                      uint64_t v262 = 44;
                      LOBYTE(v273) = 59;
                      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v275, (char *)&v273, (uint64_t *)&v261, &v276);
                      if (!v276)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19924A838);
                      }
                      Inspector::BackendDispatcher::CallbackBase::sendFailure(v140, (const WTF::String *)&v276);
                      int v141 = v276;
                      v276 = 0;
                      if (v141)
                      {
                        if (*(_DWORD *)v141 == 2) {
                          WTF::StringImpl::destroy(v141, v122);
                        }
                        else {
                          *(_DWORD *)v141 -= 2;
                        }
                      }
                      CFTypeRef v148 = v275;
                      v275 = 0;
                      if (v148) {
                        goto LABEL_269;
                      }
                    }
                    char v147 = 0;
                    goto LABEL_273;
                  }
                  break;
                }
                if (v91 > 6 || v91 == 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19924A7A0);
                }
                v226 = *a6;
                Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v291);
                v261 = (WTF::StringImpl *)"Encountered a non-object step state.";
                uint64_t v262 = 37;
                LOBYTE(v313[0]) = 59;
                WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v291, (char *)v313, (uint64_t *)&v261, v281);
                if (!v281[0])
                {
                  __break(0xC471u);
                  JUMPOUT(0x19924A858);
                }
                Inspector::BackendDispatcher::CallbackBase::sendFailure(v226, (const WTF::String *)v281);
                v227 = v281[0];
                v281[0] = 0;
                if (v227)
                {
                  if (*(_DWORD *)v227 == 2) {
                    WTF::StringImpl::destroy(v227, v87);
                  }
                  else {
                    *(_DWORD *)v227 -= 2;
                  }
                }
                uint64_t v233 = v291;
                v291 = 0;
                if (v233)
                {
                  if (*(_DWORD *)v233 == 2) {
                    WTF::StringImpl::destroy(v233, v87);
                  }
                  else {
                    *(_DWORD *)v233 -= 2;
                  }
                }
                int v231 = 1;
LABEL_474:
                WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v292, v87);
LABEL_475:
                v234 = (_DWORD *)v295;
                uint64_t v295 = 0;
                if (v234)
                {
                  if (*v234 == 1) {
                    WTF::JSONImpl::Value::operator delete();
                  }
                  else {
                    --*v234;
                  }
                }
                if (*(_DWORD *)v83 == 1) {
                  WTF::JSONImpl::Value::operator delete();
                }
                else {
                  --*(_DWORD *)v83;
                }
                if (v231) {
                  goto LABEL_519;
                }
                if (++v81 == v254)
                {
                  uint64_t v241 = WebKit::WebAutomationSession::inputDispatcherForPage((WebKit::WebAutomationSession *)v250, v311);
                  v242 = (WebKit::SimulatedInputDispatcher *)v241;
                  ++*(_DWORD *)v241;
                  if (*(void *)(v241 + 48))
                  {
                    uint64_t v243 = *a6;
                    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v260);
                    v261 = (WTF::StringImpl *)"A previous interaction is still underway.";
                    uint64_t v262 = 42;
                    LOBYTE(v313[0]) = 59;
                    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v260, (char *)v313, (uint64_t *)&v261, v281);
                    if (!v281[0])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19924A870);
                    }
                    Inspector::BackendDispatcher::CallbackBase::sendFailure(v243, (const WTF::String *)v281);
                    uint64_t v245 = v281[0];
                    v281[0] = 0;
                    if (v245)
                    {
                      if (*(_DWORD *)v245 == 2) {
                        WTF::StringImpl::destroy(v245, v244);
                      }
                      else {
                        *(_DWORD *)v245 -= 2;
                      }
                    }
                    uint64_t v249 = v260;
                    v260 = 0;
                    if (v249)
                    {
                      if (*(_DWORD *)v249 == 2) {
                        WTF::StringImpl::destroy(v249, v244);
                      }
                      else {
                        *(_DWORD *)v249 -= 2;
                      }
                    }
                  }
                  else
                  {
                    long long v258 = v308;
                    uint64_t v259 = v309;
                    CFRetain(v250[1]);
                    v246 = *a6;
                    *a6 = 0;
                    uint64_t v247 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                    *(void *)uint64_t v247 = &unk_1EE9FAE78;
                    *((void *)v247 + 1) = v250;
                    *((void *)v247 + 2) = v246;
                    v261 = v247;
                    WebKit::SimulatedInputDispatcher::run((uint64_t)v242, &v258, (uint64_t **)&v298, (void **)v257, (uint64_t *)&v261);
                    v248 = v261;
                    v261 = 0;
                    if (v248) {
                      (*(void (**)(WTF::StringImpl *))(*(void *)v248 + 8))(v248);
                    }
                  }
                  WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v242, v244);
                  goto LABEL_519;
                }
              }
              if (v84 > 6 || v84 == 5)
              {
                __break(0xC471u);
                JUMPOUT(0x19924A7C0);
              }
              v236 = *a6;
              Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v296);
              v261 = (WTF::StringImpl *)"A step in the 'steps' parameter was not an object.";
              uint64_t v262 = 51;
              LOBYTE(v313[0]) = 59;
              WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v296, (char *)v313, (uint64_t *)&v261, v281);
              if (!v281[0])
              {
                __break(0xC471u);
                JUMPOUT(0x19924A860);
              }
              Inspector::BackendDispatcher::CallbackBase::sendFailure(v236, (const WTF::String *)v281);
              uint64_t v237 = v281[0];
              v281[0] = 0;
              if (v237)
              {
                if (*(_DWORD *)v237 == 2) {
                  WTF::StringImpl::destroy(v237, v223);
                }
                else {
                  *(_DWORD *)v237 -= 2;
                }
              }
              v240 = v296;
              v296 = 0;
              if (!v240)
              {
LABEL_519:
                WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v298, v223);
                goto LABEL_520;
              }
            }
            else
            {
              v238 = *a6;
              Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v297);
              v261 = (WTF::StringImpl *)"The parameter 'steps' was not found or empty.";
              uint64_t v262 = 46;
              LOBYTE(v313[0]) = 59;
              WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v297, (char *)v313, (uint64_t *)&v261, v281);
              if (!v281[0])
              {
                __break(0xC471u);
                JUMPOUT(0x19924A868);
              }
              Inspector::BackendDispatcher::CallbackBase::sendFailure(v238, (const WTF::String *)v281);
              uint64_t v239 = v281[0];
              v281[0] = 0;
              if (v239)
              {
                if (*(_DWORD *)v239 == 2) {
                  WTF::StringImpl::destroy(v239, v223);
                }
                else {
                  *(_DWORD *)v239 -= 2;
                }
              }
              v240 = v297;
              v297 = 0;
              if (!v240) {
                goto LABEL_519;
              }
            }
            if (*(_DWORD *)v240 == 2) {
              WTF::StringImpl::destroy(v240, v223);
            }
            else {
              *(_DWORD *)v240 -= 2;
            }
            goto LABEL_519;
          }
          goto LABEL_11;
        }
        if (WTF::equal(v70, v281[0], v31))
        {
          uint64_t v71 = *v255;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v300);
          v261 = (WTF::StringImpl *)"Two input sources with the same sourceId were specified.";
          uint64_t v262 = 57;
          LOBYTE(v292) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v300, (char *)&v292, (uint64_t *)&v261, &v298);
          if (!v298)
          {
            __break(0xC471u);
            JUMPOUT(0x19924A808);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v71, (const WTF::String *)&v298);
          long long v72 = v298;
          v298 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2) {
              WTF::StringImpl::destroy(v72, v28);
            }
            else {
              *(_DWORD *)v72 -= 2;
            }
          }
          uint64_t v73 = v300;
          v300 = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 2) {
              WTF::StringImpl::destroy(v73, v28);
            }
            else {
              *(_DWORD *)v73 -= 2;
            }
          }
          int v39 = 1;
          a6 = v255;
LABEL_72:
          uint64_t v20 = v253;
          goto LABEL_91;
        }
      }
      unsigned int v67 = ++v68 + v69;
    }
  }
  if (v22 > 6 || v22 == 5)
  {
    __break(0xC471u);
    JUMPOUT(0x19924A780);
  }
  unsigned __int16 v75 = *a6;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v305);
  v261 = (WTF::StringImpl *)"An input source in the 'inputSources' parameter was invalid.";
  uint64_t v262 = 61;
  LOBYTE(v313[0]) = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v305, (char *)v313, (uint64_t *)&v261, v281);
  if (!v281[0])
  {
    __break(0xC471u);
    JUMPOUT(0x19924A810);
  }
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v75, (const WTF::String *)v281);
  uint64_t v76 = v281[0];
  v281[0] = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2) {
      WTF::StringImpl::destroy(v76, v28);
    }
    else {
      *(_DWORD *)v76 -= 2;
    }
  }
  uint64_t v79 = v305;
  v305 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2) {
      WTF::StringImpl::destroy(v79, v28);
    }
    else {
      *(_DWORD *)v79 -= 2;
    }
  }
LABEL_520:
  if (v306) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v306, v28);
  }
  unint64_t v11 = v311;
  if (v311) {
LABEL_523:
  }
    CFRelease(*((CFTypeRef *)v11 + 1));
}

void non-virtual thunk to'WebKit::WebAutomationSession::performInteractionSequence(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
}

void WebKit::WebAutomationSession::cancelInteractionSequence(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v44, a1, a2);
  uint64_t v7 = v44;
  if (v44)
  {
    char v43 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v41, a1, a3, &v43);
    if (v43)
    {
      unint64_t v8 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v45);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v45);
      unint64_t v10 = v45;
      uint64_t v45 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v9);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
    else
    {
      WebKit::SimulatedInputKeyFrame::keyFrameToResetInputSources((uint64_t *)a1 + 35, (uint64_t)&v49);
      uint64_t v14 = WTF::fastMalloc((WTF *)0x10);
      int v16 = 1;
      uint64_t v40 = 1;
      int v39 = (uint64_t *)v14;
      uint64_t v17 = v50;
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 12) = v17;
      if (v17)
      {
        if (v17 >= 0x2222223)
        {
          __break(0xC471u);
          return;
        }
        uint64_t v18 = v14;
        int v19 = 120 * v17;
        uint64_t v20 = WTF::fastMalloc((WTF *)(120 * v17));
        *(_DWORD *)(v18 + 8) = (v19 & 0xFFFFFFF8) / 0x78;
        *(void *)uint64_t v18 = v20;
        int v16 = 1;
        if (v50)
        {
          uint64_t v22 = v20;
          uint64_t v23 = v49;
          uint64_t v24 = v49 + 120 * v50;
          do
          {
            *(void *)uint64_t v22 = *(void *)v23;
            *(void *)(v22 + 8) = 0;
            *(void *)(v22 + 16) = 0;
            *(void *)(v22 + 24) = 0;
            for (uint64_t i = *(void *)(v23 + 16); i; uint64_t i = *(void *)(i + 16))
              WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)(v22 + 8), (WTF::StringImpl **)i, v21, (uint64_t)&v45);
            WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable((uint64_t *)(v22 + 32), (int **)(v23 + 32));
            long long v26 = *(_OWORD *)(v23 + 40);
            *(void *)(v22 + 53) = *(void *)(v23 + 53);
            *(_OWORD *)(v22 + 40) = v26;
            *(unsigned char *)(v22 + 64) = 0;
            *(unsigned char *)(v22 + 72) = 0;
            if (*(unsigned char *)(v23 + 72))
            {
              uint64_t v27 = *(_DWORD **)(v23 + 64);
              if (v27) {
                *v27 += 2;
              }
              *(void *)(v22 + 64) = v27;
              *(unsigned char *)(v22 + 72) = 1;
            }
            long long v28 = *(_OWORD *)(v23 + 80);
            long long v29 = *(_OWORD *)(v23 + 96);
            *(unsigned char *)(v22 + 112) = *(unsigned char *)(v23 + 112);
            *(_OWORD *)(v22 + 80) = v28;
            *(_OWORD *)(v22 + 96) = v29;
            v22 += 120;
            v23 += 120;
          }
          while (v23 != v24);
          uint64_t v7 = v44;
          int v16 = HIDWORD(v40) + 1;
        }
      }
      HIDWORD(v40) = v16;
      WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v15);
      uint64_t v30 = WebKit::WebAutomationSession::inputDispatcherForPage(a1, (WebKit::WebPageProxy *)v7);
      unint64_t v31 = (WebKit::SimulatedInputDispatcher *)v30;
      ++*(_DWORD *)v30;
      if (*(void *)(v30 + 48))
      {
        LODWORD(v45) = 5;
        char v46 = 0;
        char v47 = 0;
        char v48 = 1;
        WebKit::SimulatedInputDispatcher::finishDispatching(v30, (int *)&v45);
      }
      long long v37 = v41;
      uint64_t v38 = v42;
      CFRetain(*((CFTypeRef *)a1 + 1));
      uint64_t v32 = *a4;
      *a4 = 0;
      uint64_t v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v33 = &unk_1EE9FAEA0;
      *((void *)v33 + 1) = a1;
      *((void *)v33 + 2) = a1;
      *((void *)v33 + 3) = v32;
      uint64_t v45 = v33;
      WebKit::SimulatedInputDispatcher::run((uint64_t)v31, &v37, &v39, (void **)a1 + 35, (uint64_t *)&v45);
      uint64_t v35 = v45;
      uint64_t v45 = 0;
      if (v35) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v35 + 8))(v35);
      }
      WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v31, v34);
      WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v36);
    }
    CFRelease(v7[1]);
  }
  else
  {
    unint64_t v11 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v45);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v11, (const WTF::String *)&v45);
    unsigned int v13 = v45;
    uint64_t v45 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::cancelInteractionSequence(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
}

void WebKit::WebAutomationSession::takeScreenshot(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, unsigned char *a5, unsigned char *a6, uint64_t *a7)
{
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v62, a1, a2);
  uint64_t v13 = v62;
  if (v62)
  {
    char v61 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v59, a1, a3, &v61);
    if (v61)
    {
      uint64_t v14 = (Inspector::BackendDispatcher::CallbackBase *)*a7;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v54);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v14, (const WTF::String *)&v54);
      int v16 = (WTF::StringImpl *)v54;
      *(void *)&long long v54 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      goto LABEL_60;
    }
    if (a5[1]) {
      BOOL v20 = *a5 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    char v21 = !v20;
    if (a6[1]) {
      BOOL v22 = *a6 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    char v23 = !v22;
    if (!*(void *)a4 || !*(_DWORD *)(*(void *)a4 + 4))
    {
      int v39 = (void *)WTF::fastMalloc((WTF *)0x10);
      uint64_t v40 = v39;
      *int v39 = &unk_1EE9FAEC8;
      if (*(void *)a4 && *(_DWORD *)(*(void *)a4 + 4))
      {
        CFRetain(*(CFTypeRef *)(v13 + 8));
        uint64_t v41 = *a7;
        ++*(_DWORD *)(v41 + 8);
        uint64_t v42 = (void *)WTF::fastMalloc((WTF *)0x20);
        *uint64_t v42 = &unk_1EE9FAF18;
        v42[1] = v13;
        _OWORD v42[2] = v41;
        v42[3] = v40;
        long long v66 = v59;
        uint64_t v67 = v60;
        uint64_t v52 = *(void *)(*(void *)(v13 + 32) + 1928);
        uint64_t v53 = v42;
        *(void *)&long long v54 = &v52;
        *((void *)&v54 + 1) = &v59;
        uint64_t v55 = a4;
        char v56 = v21;
        char v57 = v23;
        unsigned int v63 = &v54;
        uint64_t v64 = &v53;
        char v65 = 0;
        WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1>>>,Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::OptionSet<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>::SendOption>)::{lambda(std::optional<WTF::String> &&::ProcessQualified<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits)1>>&)#1}>(v13, (uint64_t)&v66, (uint64_t)&v63);
        char v43 = v53;
        uint64_t v53 = 0;
        if (v43) {
          (*(void (**)(void *))(*v43 + 8))(v43);
        }
      }
      else
      {
        LOBYTE(v54) = 0;
        LOBYTE(v55) = 0;
        WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>>::call((uint64_t)v39, v13, &v54, a7);
        (*(void (**)(void *))(*v40 + 8))(v40);
      }
      goto LABEL_60;
    }
    uint64_t v26 = *((void *)a1 + 26);
    char v25 = (uint64_t *)((char *)a1 + 208);
    uint64_t v24 = v26;
    uint64_t v27 = *(v25 - 1);
    *(v25 - 1) = v27 + 1;
    if (v26
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v25),
          (uint64_t v24 = *v25) != 0))
    {
      int v28 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      int v28 = 0;
    }
    unint64_t v29 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
    unint64_t v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    unint64_t v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    unsigned int v32 = v28 & ((v31 >> 31) ^ v31);
    uint64_t v33 = (void *)(v24 + 16 * v32);
    uint64_t v34 = *v33;
    if (*v33)
    {
      uint64_t v35 = 0;
      int v36 = 1;
      while (v34 != v27)
      {
        if (v34 == -1) {
          uint64_t v35 = v33;
        }
        unsigned int v32 = (v32 + v36) & v28;
        uint64_t v33 = (void *)(v24 + 16 * v32);
        uint64_t v34 = *v33;
        ++v36;
        if (!*v33)
        {
          if (v35)
          {
            void *v35 = 0;
            v35[1] = 0;
            --*(_DWORD *)(*v25 - 16);
            uint64_t v33 = v35;
          }
          goto LABEL_34;
        }
      }
      uint64_t v44 = *a7;
      *a7 = 0;
      uint64_t v45 = (_DWORD *)v33[1];
      v33[1] = v44;
      if (v45)
      {
        if (v45[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v45 + 8))(v45);
        }
        else {
          --v45[2];
        }
      }
      goto LABEL_59;
    }
LABEL_34:
    *uint64_t v33 = v27;
    uint64_t v37 = *a7;
    *a7 = 0;
    uint64_t v38 = (_DWORD *)v33[1];
    v33[1] = v37;
    if (v38)
    {
      if (v38[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v38 + 8))(v38);
      }
      else {
        --v38[2];
      }
    }
    uint64_t v46 = *v25;
    if (*v25) {
      int v47 = *(_DWORD *)(v46 - 12) + 1;
    }
    else {
      int v47 = 1;
    }
    *(_DWORD *)(v46 - 12) = v47;
    uint64_t v48 = *v25;
    if (*v25) {
      int v49 = *(_DWORD *)(v48 - 12);
    }
    else {
      int v49 = 0;
    }
    uint64_t v50 = (*(_DWORD *)(v48 - 16) + v49);
    unint64_t v51 = *(unsigned int *)(v48 - 4);
    if (v51 > 0x400)
    {
      if (v51 > 2 * v50) {
        goto LABEL_59;
      }
    }
    else if (3 * v51 > 4 * v50)
    {
LABEL_59:
      long long v66 = v59;
      uint64_t v67 = v60;
      uint64_t v53 = *(void **)(*(void *)(v13 + 32) + 1928);
      *(void *)&long long v54 = &v53;
      *((void *)&v54 + 1) = &v59;
      uint64_t v55 = a4;
      char v56 = v21;
      char v57 = v23;
      uint64_t v58 = v27;
      unsigned int v63 = &v54;
      LOBYTE(v64) = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebAutomationSessionProxy::TakeScreenshot>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebAutomationSessionProxy::TakeScreenshot &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebAutomationSessionProxy::TakeScreenshot&)#1}>(v13, (uint64_t)&v66, (uint64_t)&v63);
LABEL_60:
      CFRelease(*(CFTypeRef *)(v13 + 8));
      return;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v25);
    goto LABEL_59;
  }
  uint64_t v17 = (Inspector::BackendDispatcher::CallbackBase *)*a7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v54);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)&v54);
  int v19 = (WTF::StringImpl *)v54;
  *(void *)&long long v54 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
}

void non-virtual thunk to'WebKit::WebAutomationSession::takeScreenshot(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, unsigned char *a5, unsigned char *a6, uint64_t *a7)
{
}

uint64_t *WebKit::WebAutomationSession::didTakeScreenshot(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 208);
  uint64_t result = (uint64_t *)(a1 + 208);
  uint64_t v5 = v6;
  if (v6)
  {
    unsigned int v9 = *(_DWORD *)(v5 - 8);
    unint64_t v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
    uint64_t v14 = *(void *)(v5 + 16 * v13);
    if (v14 != a2)
    {
      int v15 = 1;
      while (v14)
      {
        uint64_t v13 = (v13 + v15) & v9;
        uint64_t v14 = *(void *)(v5 + 16 * v13);
        ++v15;
        if (v14 == a2) {
          goto LABEL_8;
        }
      }
      uint64_t v13 = *(unsigned int *)(v5 - 4);
    }
LABEL_8:
    if (v13 != *(_DWORD *)(v5 - 4))
    {
      int v16 = (void *)(v5 + 16 * v13);
      uint64_t v17 = (Inspector::BackendDispatcher::CallbackBase *)v16[1];
      v16[1] = 0;
      uint64_t v18 = *result;
      if (!*result || (v18 += 16 * *(unsigned int *)(v18 - 4), (void *)v18 != v16))
      {
        if ((void *)v18 != v16)
        {
          *int v16 = -1;
          v16[1] = 0;
          ++*(_DWORD *)(*result - 16);
          uint64_t v19 = *result;
          int v20 = *result ? *(_DWORD *)(v19 - 12) - 1 : -1;
          *(_DWORD *)(v19 - 12) = v20;
          uint64_t v21 = *result;
          if (*result)
          {
            unsigned int v22 = 6 * *(_DWORD *)(v21 - 12);
            unsigned int v23 = *(_DWORD *)(v21 - 4);
            if (v22 < v23 && v23 >= 9) {
              uint64_t result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(result, v23 >> 1);
            }
          }
        }
      }
      if (v17)
      {
        if (*a4 && *(_DWORD *)(*a4 + 4))
        {
          uint64_t v25 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(a4);
          if ((v25 & 0xFF00000000) != 0) {
            uint64_t v25 = v25;
          }
          else {
            uint64_t v25 = 5;
          }
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v25, &v28);
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)&v28);
        }
        else
        {
          if (!*(unsigned char *)(a3 + 64)) {
            goto LABEL_36;
          }
          WebKit::WebAutomationSession::platformGetBase64EncodedPNGData(&v28);
          if (!v29)
          {
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v27);
            Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)&v27);
            uint64_t result = v27;
            uint64_t v27 = 0;
            if (result)
            {
LABEL_33:
              if (*(_DWORD *)result == 2) {
                uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
LABEL_36:
            if (*((_DWORD *)v17 + 2) == 1) {
              return (uint64_t *)(*(uint64_t (**)(Inspector::BackendDispatcher::CallbackBase *))(*(void *)v17 + 8))(v17);
            }
            --*((_DWORD *)v17 + 2);
            return result;
          }
          uint64_t result = (uint64_t *)Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback::sendSuccess(v17, (const WTF::String *)&v28);
          if (!v29) {
            goto LABEL_36;
          }
        }
        uint64_t result = (uint64_t *)v28;
        int v28 = 0;
        if (result) {
          goto LABEL_33;
        }
        goto LABEL_36;
      }
    }
  }
  return result;
}

void WebKit::WebAutomationSession::Debuggable::~Debuggable(WebKit::WebAutomationSession::Debuggable *this)
{
  Inspector::RemoteAutomationTarget::~RemoteAutomationTarget(this);

  WTF::fastFree(v1, v2);
}

uint64_t Inspector::RemoteAutomationTarget::type(Inspector::RemoteAutomationTarget *this)
{
  return 0;
}

BOOL Inspector::RemoteAutomationTarget::remoteControlAllowed(Inspector::RemoteAutomationTarget *this)
{
  return *((unsigned char *)this + 20) == 0;
}

uint64_t Inspector::RemoteControllableTarget::targetRunLoop(Inspector::RemoteControllableTarget *this)
{
  return 0;
}

uint64_t API::ObjectImpl<(API::Object::Type)42>::type()
{
  return 42;
}

uint64_t API::AutomationSessionClient::requestNewPageWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::AutomationSessionClient::requestMaximizeWindowOfPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::AutomationSessionClient::requestHideWindowOfPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::AutomationSessionClient::requestRestoreWindowOfPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::AutomationSessionClient::requestSwitchToPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t API::AutomationSessionClient::isShowingJavaScriptDialogOnPage()
{
  return 0;
}

void API::AutomationSessionClient::messageOfCurrentJavaScriptDialogOnPage(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t API::AutomationSessionClient::typeOfCurrentJavaScriptDialogOnPage()
{
  return 0;
}

uint64_t API::AutomationSessionClient::currentPresentationOfPage()
{
  return 1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *(WTF::StringImpl **)v4;
      if (*(void *)v4 != -1)
      {
        uint64_t v6 = *(_DWORD **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v6);
          uint64_t v5 = *(WTF::StringImpl **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[2];
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[2];
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)result) {
    int v6 = *(_DWORD *)(v5 + 4);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *a3;
  if (*a3)
  {
    int v8 = *(_DWORD *)(v7 + 4);
    if (v8 < 0) {
      goto LABEL_16;
    }
  }
  else
  {
    int v8 = 0;
  }
  BOOL v9 = __OFADD__(v8, 1);
  int v10 = v8 + 1;
  char v11 = v9;
  if ((v6 & 0x80000000) == 0 && (v11 & 1) == 0)
  {
    uint64_t result = (v6 + v10);
    if (!__OFADD__(v6, v10))
    {
      if (v5)
      {
        unsigned int v12 = *(_DWORD *)(v5 + 16);
        int v13 = (v12 >> 2) & 1;
        if (!v7 || (v12 & 4) == 0) {
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v5, *a2, (_DWORD *)v7, a4);
        }
      }
      else if (!v7)
      {
        int v13 = 1;
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v5, *a2, (_DWORD *)v7, a4);
      }
      int v13 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v5, *a2, (_DWORD *)v7, a4);
    }
  }
LABEL_16:
  *a4 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, _DWORD *a5@<X4>, void *a6@<X8>)
{
  int v9 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        char v11 = v17;
        if (v17)
        {
          unsigned int v12 = v17 + 5;
          _DWORD *v17 = 2;
          v11[1] = v9;
          *((void *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          uint64_t v16 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v16, (char *)v11 + 20);
          uint64_t v13 = v16;
          if (v16) {
            uint64_t v13 = *(unsigned int *)(v16 + 4);
          }
          *((unsigned char *)v12 + v13) = a4;
          uint64_t v17 = a5;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v17, (char *)v12 + v13 + 1);
        }
        goto LABEL_16;
      }
LABEL_10:
      char v11 = 0;
      goto LABEL_16;
    }
LABEL_11:
    char v11 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_16;
  }
  if (!result) {
    goto LABEL_11;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_10;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  char v11 = v17;
  if (v17)
  {
    _DWORD *v17 = 2;
    v11[1] = v9;
    *((void *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    uint64_t v16 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v16, (char *)v11 + 20);
    uint64_t v14 = v16;
    if (v16) {
      uint64_t v14 = *(unsigned int *)(v16 + 4);
    }
    uint64_t v15 = (uint64_t)v11 + 2 * v14 + 20;
    *(_WORD *)uint64_t v15 = a4;
    uint64_t v17 = a5;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v17, (char *)(v15 + 2));
  }
LABEL_16:
  *a6 = v11;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::name(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FA878;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::name(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FA878;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::name(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 8) + 24);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF::StringImpl **)(v1 + 64);
    if (v3) {
      *(_DWORD *)v3 += 2;
    }
    uint64_t v7 = v3;
    WTF::String::isolatedCopy();
    uint64_t v5 = *(WTF::StringImpl ***)(v2 + 24);
    int v6 = *v5;
    *uint64_t v5 = v8;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        return WTF::StringImpl::destroy(v7, v4);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FA8A0;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FA8A0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 8) + 24);
  if (v1) {
    return Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(v1 + 80), (const WTF::String *)(result + 24));
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FA8C8;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FA8C8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 8) + 24);
  if (v1)
  {
    *(void *)(v1 + 304) = *(void *)(result + 24);
    Inspector::FrontendRouter::connectFrontend();
    uint64_t v2 = *(Inspector::RemoteAutomationTarget **)(v1 + 312);
    return Inspector::RemoteAutomationTarget::setIsPaired(v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FA8F0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FA8F0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<Inspector::RemoteControllableTarget,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::WebAutomationSession *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = *(WebKit::WebAutomationSession **)(*(void *)(a1 + 8) + 24);
  if (result) {
    return (WebKit::WebAutomationSession *)WebKit::WebAutomationSession::terminate(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebAutomationSession::*&)(void),WebKit::WebAutomationSession*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Mapper<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&)::{lambda(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&&)#1},WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3 = result;
  uint64_t v4 = **a2;
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 12);
    if (v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(v3 + 8) = v5;
      *(void *)uint64_t v3 = result;
    }
  }
  int v6 = a2[1];
  uint64_t v7 = a2[3];
  if (v6 != v7)
  {
    int v8 = a2[2];
    unsigned int v9 = *(_DWORD *)(v3 + 12);
    do
    {
      uint64_t v10 = *v6;
      v6 += 2;
      *(void *)(*(void *)v3 + 8 * v9) = v10;
      unsigned int v9 = *(_DWORD *)(v3 + 12) + 1;
      *(_DWORD *)(v3 + 12) = v9;
      while (v6 != v8)
      {
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_12;
        }
        v6 += 2;
      }
      int v6 = v8;
LABEL_12:
      ;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    uint64_t v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      uint64_t v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
          int v26 = 1;
          do
          {
            unsigned int v27 = v25;
            uint64_t v28 = *(void *)(v20 + 16 * v25);
            unsigned int v25 = (v25 + v26++) & v21;
          }
          while (v28);
          char v29 = (uint64_t *)(v20 + 16 * v27);
          uint64_t v30 = v29[1];
          v29[1] = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          uint64_t *v29 = *v16;
          uint64_t v31 = v6 + 16 * v13;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          v29[1] = v32;
          uint64_t v33 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          }
          if (v16 == a3) {
            uint64_t v14 = v29;
          }
        }
        else
        {
          uint64_t v18 = v6 + 16 * v13;
          uint64_t v19 = *(void *)(v18 + 8);
          *(void *)(v18 + 8) = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIICaseConverter>(uint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    size_t v4 = a3 - 1;
  }
  else {
    size_t v4 = 0;
  }
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19924C4A8);
  }
  int v5 = (void *)result;
  int v6 = *(_DWORD *)(a4 + 16);
  if (((v6 | v4) & 0x80000000) != 0) {
    goto LABEL_18;
  }
  uint64_t v7 = (v4 + v6);
  if (__OFADD__(v4, v6)) {
    goto LABEL_18;
  }
  if (*(unsigned char *)(a4 + 20))
  {
    if (v7)
    {
      if ((v7 & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
        uint64_t v9 = v20;
        if (v20)
        {
          *(_DWORD *)uint64_t v20 = 2;
          *(_DWORD *)(v20 + 4) = v7;
          *(void *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 4;
          if (v4)
          {
            if (v4 == 1) {
              *(unsigned char *)(v20 + 20) = *(unsigned char *)a2;
            }
            else {
              memcpy((void *)(v20 + 20), a2, v4);
            }
          }
          uint64_t result = WTF::StringView::getCharactersWithASCIICase();
        }
        goto LABEL_15;
      }
LABEL_18:
      uint64_t v9 = 0;
      goto LABEL_15;
    }
LABEL_19:
    uint64_t v9 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_15;
  }
  if (!v7) {
    goto LABEL_19;
  }
  if (v7 > 0x7FFFFFEF) {
    goto LABEL_18;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * v7 + 20));
  uint64_t v9 = v20;
  if (v20)
  {
    uint64_t v10 = (char *)(v20 + 20);
    *(_DWORD *)uint64_t v20 = 2;
    *(_DWORD *)(v20 + 4) = v7;
    *(void *)(v20 + 8) = v20 + 20;
    *(_DWORD *)(v20 + 16) = 0;
    if ((v4 & 0xFFFFFFC0) != 0)
    {
      uint64_t v11 = &v10[2 * (v4 & 0xFFFFFFC0)];
      long long v12 = 0uLL;
      do
      {
        v21.val[0] = (int8x16_t)*a2;
        int8x16_t v13 = *((int8x16_t *)a2 + 1);
        v22.val[0] = (int8x16_t)a2[2];
        long long v14 = a2[3];
        a2 += 4;
        long long v15 = v14;
        v22.val[1] = 0uLL;
        v23.val[0] = v13;
        v21.val[1] = 0uLL;
        uint64_t v16 = v10;
        vst2q_s8(v16, v21);
        v16 += 32;
        v23.val[1] = 0uLL;
        vst2q_s8(v16, v23);
        uint64_t v17 = v10 + 64;
        vst2q_s8(v17, v22);
        uint64_t v18 = v10 + 96;
        vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
        v10 += 128;
      }
      while (v10 != v11);
      uint64_t v10 = v11;
    }
    while (v10 != (char *)(v20 + 20 + 2 * v4))
    {
      __int16 v19 = *(unsigned __int8 *)a2;
      a2 = (_OWORD *)((char *)a2 + 1);
      *(_WORD *)uint64_t v10 = v19;
      v10 += 2;
    }
    uint64_t result = WTF::StringView::getCharactersWithASCIICase();
  }
LABEL_15:
  *int v5 = v9;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v9 = (WTF::StringImpl **)(v2 + 16 * i);
      uint64_t v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            int v12 = 0;
          }
          unsigned int v13 = *((_DWORD *)v10 + 4);
          if (v13 >= 0x100) {
            unsigned int v14 = v13 >> 8;
          }
          else {
            unsigned int v14 = WTF::StringImpl::hashSlowCase(v10);
          }
          int v15 = 0;
          do
          {
            uint64_t v16 = v14 & v12;
            unsigned int v14 = ++v15 + v16;
          }
          while (*(void *)(v11 + 16 * v16));
          uint64_t v17 = (WTF::StringImpl **)(v11 + 16 * v16);
          char *v17 = 0;
          uint64_t v18 = *v9;
          *uint64_t v9 = 0;
          char *v17 = v18;
          v17[1] = *(WTF::StringImpl **)(v2 + 16 * i + 8);
          __int16 v19 = *v9;
          *uint64_t v9 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v7);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        else
        {
          *uint64_t v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, void *a3@<X8>)
{
  int v3 = (WTF::StringImpl *)*a1;
  if (*a1) {
    int v3 = (WTF::StringImpl *)((char *)v3 + 24 * *((unsigned int *)v3 - 1));
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = *((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  *a3 = v4;
  if (*a1)
  {
    unsigned int v5 = (WTF::StringImpl *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    unsigned int v5 = 0;
  }
  if (v5 != a2) {
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(a1, a2);
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    do
    {
      unsigned int v13 = (WTF::StringImpl **)(v5 + 24 * v10);
      unsigned int v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          unsigned int v17 = *((_DWORD *)v14 + 4);
          if (v17 >= 0x100) {
            int v18 = v17 >> 8;
          }
          else {
            int v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v16;
            int8x16x2_t v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            int v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          const WTF::StringImpl *v21 = 0;
          int8x16x2_t v22 = *v13;
          WTF::StringImpl *v13 = 0;
          const WTF::StringImpl *v21 = v22;
          *(_OWORD *)(v15 + 24 * v20 + 8) = *(_OWORD *)(v5 + 24 * v10 + 8);
          int8x16x2_t v23 = *v13;
          WTF::StringImpl *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v9);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v21;
          }
        }
        else
        {
          WTF::StringImpl *v13 = 0;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getNextContext(WTF::Ref<WebKit::WebAutomationSession,WTF::RawPtrTraits<WebKit::WebAutomationSession>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationSession>> &&,WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WTF::Vector>,WTF::DefaultRefDerefTraits<WTF::Vector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>,WTF::Ref<WTF::JSONImpl::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback,WTF::RawPtrTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9FA940;
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  int v4 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*v4 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v4;
    }
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  unsigned int v5 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getNextContext(WTF::Ref<WebKit::WebAutomationSession,WTF::RawPtrTraits<WebKit::WebAutomationSession>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationSession>> &&,WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WTF::Vector>,WTF::DefaultRefDerefTraits<WTF::Vector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>,WTF::Ref<WTF::JSONImpl::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback,WTF::RawPtrTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9FA940;
  uint64_t v3 = *((void *)a1 + 7);
  *((void *)a1 + 7) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  int v4 = (_DWORD *)*((void *)a1 + 6);
  *((void *)a1 + 6) = 0;
  if (v4)
  {
    if (*v4 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v4;
    }
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  uint64_t v6 = (_DWORD *)*((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  uint64_t v7 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }

  return WTF::fastFree(a1, v5);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getNextContext(WTF::Ref<WebKit::WebAutomationSession,WTF::RawPtrTraits<WebKit::WebAutomationSession>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationSession>> &&,WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WTF::Vector>,WTF::DefaultRefDerefTraits<WTF::Vector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>,WTF::Ref<WTF::JSONImpl::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback,WTF::RawPtrTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>> &&)::$_0,void,WebCore::FloatRect>::call(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = (uint64_t *)(a1 + 16);
  WebKit::WebAutomationSession::buildBrowsingContextForPage((WTF::JSONImpl::Object *)&v16, *(WebKit::WebAutomationSession **)(a1 + 16), *(const WebKit::WebPageProxy **)(a1 + 56), a2, a3, a4, a5);
  uint64_t v9 = (void *)(v7 + 16);
  unint64_t v10 = *(unsigned int *)(v7 + 28);
  if (v10 == *(_DWORD *)(v7 + 24))
  {
    unint64_t v11 = v10 + (v10 >> 2);
    if (v11 >= 0x10) {
      unint64_t v12 = v11 + 1;
    }
    else {
      unint64_t v12 = 16;
    }
    if (v12 <= v10 + 1) {
      unint64_t v13 = v10 + 1;
    }
    else {
      unint64_t v13 = v12;
    }
    WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v9, v13);
    unint64_t v10 = *(unsigned int *)(v7 + 28);
    *(void *)(*(void *)(v7 + 16) + 8 * v10) = v16;
  }
  else
  {
    *(void *)(*v9 + 8 * v10) = v16;
  }
  *(_DWORD *)(v7 + 28) = v10 + 1;
  unsigned int v14 = *(_DWORD **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  unsigned int v16 = v14;
  WebKit::WebAutomationSession::getNextContext(v6, v8, (uint64_t *)(a1 + 32), (uint64_t *)&v16, (WTF::JSONImpl::Object **)(a1 + 24));
  uint64_t result = v16;
  if (v16)
  {
    if (*v16 == 1)
    {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else
    {
      --*v16;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FA968;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FA968;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>> &&)::$_0,void,WebCore::FloatRect>::call(WebKit::WebAutomationSession **a1, float a2, float a3, float a4, float a5)
{
  uint64_t v5 = a1[3];
  WebKit::WebAutomationSession::buildBrowsingContextForPage((WTF::JSONImpl::Object *)&v7, a1[1], a1[2], a2, a3, a4, a5);
  Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback::sendSuccess(v5, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7)
  {
    if (*v7 == 1)
    {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else
    {
      --*v7;
    }
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v11 = *a1;
  char v10 = *a2;
  uint64_t v4 = a3[1];
  BOOL v5 = v4 != 0;
  unint64_t v6 = v4 - 1;
  if (!v5) {
    unint64_t v6 = 0;
  }
  uint64_t v8 = *a3;
  if (v6 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v9 = v6;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v11, &v10, (uint64_t)&v8, a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)result) {
    int v6 = *(_DWORD *)(v5 + 4);
  }
  else {
    int v6 = 0;
  }
  int v7 = *(_DWORD *)(a3 + 8);
  if (v7 < 0
    || ((BOOL v8 = __OFADD__(v7, 1), v9 = v7 + 1, !v8) ? (v10 = 0) : (v10 = 1),
        v6 < 0 || (v10 & 1) != 0 || (uint64_t result = (v6 + v9), __OFADD__(v6, v9))))
  {
    *a4 = 0;
  }
  else
  {
    BOOL v11 = !v5 || (*(unsigned char *)(v5 + 16) & 4) != 0;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v11, (_DWORD *)v5, *a2, *(_OWORD **)a3, *(void *)(a3 + 8), a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, char a4@<W3>, _OWORD *a5@<X4>, unsigned int a6@<W5>, void *a7@<X8>)
{
  int v11 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        unint64_t v13 = v29;
        if (v29)
        {
          unsigned int v14 = v29 + 5;
          _DWORD *v29 = 2;
          v13[1] = v11;
          *((void *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          char v29 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v29, (char *)v13 + 20);
          int64_t v15 = (int64_t)v29;
          if (v29) {
            int64_t v15 = v29[1];
          }
          *((unsigned char *)v14 + v15) = a4;
          uint64_t result = (uint64_t)v14 + v15 + 1;
          if (a6)
          {
            if (a6 == 1) {
              *(unsigned char *)uint64_t result = *(unsigned char *)a5;
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)result, a5, a6);
            }
          }
        }
        goto LABEL_23;
      }
LABEL_12:
      unint64_t v13 = 0;
      goto LABEL_23;
    }
LABEL_13:
    unint64_t v13 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_23;
  }
  if (!result) {
    goto LABEL_13;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_12;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  unint64_t v13 = v29;
  if (v29)
  {
    _DWORD *v29 = 2;
    v13[1] = v11;
    *((void *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    char v29 = a3;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v29, (char *)v13 + 20);
    unint64_t v16 = (unint64_t)v29;
    if (v29) {
      unint64_t v16 = v29[1];
    }
    unsigned int v17 = (_WORD *)v13 + v16 + 10;
    _WORD *v17 = a4;
    int v18 = (char *)(v17 + 1);
    int v19 = &v18[2 * a6];
    if ((a6 & 0xFFFFFFC0) != 0)
    {
      unsigned int v20 = &v18[2 * (a6 & 0xFFFFFFC0)];
      long long v21 = 0uLL;
      do
      {
        v30.val[0] = (int8x16_t)*a5;
        int8x16_t v22 = *((int8x16_t *)a5 + 1);
        v31.val[0] = (int8x16_t)a5[2];
        long long v23 = a5[3];
        a5 += 4;
        long long v24 = v23;
        v31.val[1] = 0uLL;
        v32.val[0] = v22;
        v30.val[1] = 0uLL;
        unsigned int v25 = v18;
        vst2q_s8(v25, v30);
        v25 += 32;
        v32.val[1] = 0uLL;
        vst2q_s8(v25, v32);
        int v26 = v18 + 64;
        vst2q_s8(v26, v31);
        unsigned int v27 = v18 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      int v18 = v20;
    }
    while (v18 != v19)
    {
      __int16 v28 = *(unsigned __int8 *)a5;
      a5 = (_OWORD *)((char *)a5 + 1);
      *(_WORD *)int v18 = v28;
      v18 += 2;
    }
  }
LABEL_23:
  *a7 = v13;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::createBrowsingContext(std::optional<Inspector::Protocol::Automation::BrowsingContextPresentation> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FA990;
  uint64_t v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::createBrowsingContext(std::optional<Inspector::Protocol::Automation::BrowsingContextPresentation> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FA990;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::createBrowsingContext(std::optional<Inspector::Protocol::Automation::BrowsingContextPresentation> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy *>::call(uint64_t a1, WebKit::WebProcessProxy **this)
{
  if (this)
  {
    WebKit::WebPageProxy::launchInitialProcessIfNecessary(this);
    uint64_t v4 = *(WTF::JSONImpl::Object **)(a1 + 16);
    WebKit::WebAutomationSession::handleForWebPageProxy(*(WebKit::WebAutomationSession **)(a1 + 8), (const WebKit::WebPageProxy *)this, v14);
    int v5 = (*(uint64_t (**)(void, void, WebKit::WebProcessProxy **))(**(void **)(*(void *)(a1 + 8) + 56)
                                                                               + 120))(*(void *)(*(void *)(a1 + 8) + 56), *(void *)(a1 + 8), this);
    if (!v5)
    {
      uint64_t v6 = 4;
LABEL_10:
      Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback::sendSuccess(v4, (WTF::JSONImpl::Value *)v14, v6);
      uint64_t result = v14[0];
      v14[0] = 0;
      if (!result) {
        return result;
      }
      goto LABEL_14;
    }
    if (v5 == 1)
    {
      uint64_t v6 = 3;
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x19924D33CLL);
  }
  int v7 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 16);
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v11);
  v14[0] = (WTF::StringImpl *)"The remote session failed to create a new browsing context.";
  v14[1] = (WTF::StringImpl *)60;
  char v13 = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v11, &v13, (uint64_t *)v14, &v12);
  if (!v12)
  {
    __break(0xC471u);
    goto LABEL_20;
  }
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)&v12);
  int v9 = v12;
  unint64_t v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t result = v11;
  int v11 = 0;
  if (result)
  {
LABEL_14:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::switchToBrowsingContext(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FA9B8;
  uint64_t v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::switchToBrowsingContext(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FA9B8;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::switchToBrowsingContext(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>> &&)::$_0,void>::call(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 8) + 104) + 80))(*(void *)(*(void *)(a1 + 8)
                                                                                                 + 104));
  uint64_t v2 = *(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 16);

  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FA9E0;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FA9E0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  *(void *)&long long v9 = *(void *)(a1 + 40);
  BYTE8(v9) = *(unsigned char *)(a1 + 48);
  *(void *)&long long v10 = *(void *)(a1 + 56);
  BYTE8(v10) = *(unsigned char *)(a1 + 64);
  *(void *)int v11 = *(void *)(a1 + 72);
  unsigned char v11[8] = *(unsigned char *)(a1 + 80);
  v11[24] = *(unsigned char *)(a1 + 96);
  *(void *)&v11[16] = *(void *)(a1 + 88);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x58);
  *(_OWORD *)(v5 + 65) = *(_OWORD *)&v11[9];
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v11;
  long long v6 = v9;
  *(_OWORD *)(v5 + 40) = v10;
  *(void *)uint64_t v5 = &unk_1EE9FAA08;
  *(void *)(v5 + 8) = v4;
  *(void *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v6;
  uint64_t v8 = v5;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(v2 + 56) + 56))(*(void *)(v2 + 56), v2, v3, &v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAA08;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAA08;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    CFRetain(*(CFTypeRef *)(v2 + 8));
  }
  *(void *)&long long v9 = *(void *)(a1 + 24);
  BYTE8(v9) = *(unsigned char *)(a1 + 32);
  *(void *)&long long v10 = *(void *)(a1 + 40);
  BYTE8(v10) = *(unsigned char *)(a1 + 48);
  *(void *)int v11 = *(void *)(a1 + 56);
  unsigned char v11[8] = *(unsigned char *)(a1 + 64);
  v11[24] = *(unsigned char *)(a1 + 80);
  *(void *)&v11[16] = *(void *)(a1 + 72);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x58);
  long long v5 = v10;
  *(_OWORD *)(v4 + 24) = v9;
  *(void *)uint64_t v4 = &unk_1EE9FAA30;
  *(void *)(v4 + 8) = v3;
  *(void *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 40) = v5;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)v11;
  *(_OWORD *)(v4 + 65) = *(_OWORD *)&v11[9];
  uint64_t v8 = v4;
  WebKit::WebPageProxy::getWindowFrameWithCallback(v2, &v8);
  uint64_t result = v8;
  if (v8)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)v8 + 8);
    return v7();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(WebCore::FloatRect)#1},void,{lambda(void)#1}>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAA30;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(WebCore::FloatRect)#1},void,{lambda(void)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAA30;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(WebCore::FloatRect)#1},void,{lambda(void)#1}>::call(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (*(unsigned char *)(a1 + 64)) {
    float v6 = *(double *)(a1 + 56);
  }
  else {
    float v6 = a2;
  }
  if (*(unsigned char *)(a1 + 80)) {
    float v7 = *(double *)(a1 + 72);
  }
  else {
    float v7 = a3;
  }
  if (*(unsigned char *)(a1 + 32)) {
    float v8 = *(double *)(a1 + 24);
  }
  else {
    float v8 = a4;
  }
  if (*(unsigned char *)(a1 + 48)) {
    float v9 = *(double *)(a1 + 40);
  }
  else {
    float v9 = a5;
  }
  v11.m_location.m_x = v6;
  v11.m_location.m_y = v7;
  v11.m_size.m_width = v8;
  v11.m_size.m_height = v9;
  if (v6 != a2 || v7 != a3 || v8 != a4 || v9 != a5) {
    WebKit::WebPageProxy::setWindowFrame(*(WebKit::WebPageProxy **)(a1 + 16), &v11);
  }
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *unint64_t v16 = v11;
    uint64_t v20 = *a4;
    *a4 = 0;
    uint64_t result = (uint64_t *)v16[1];
    v16[1] = v20;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
    uint64_t v23 = *a2;
    if (*a2) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v25 = *a2;
    if (*a2) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_26:
        uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v16);
        unint64_t v16 = result;
        uint64_t v25 = *a2;
        if (*a2) {
          unint64_t v28 = *(unsigned int *)(v25 - 4);
        }
        else {
          unint64_t v28 = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_26;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v25 + 16 * v28;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
  int v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      int v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    unint64_t v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        uint64_t *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = *a3;
        unint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v8 + 16 * v22;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v29 = *a4;
  *a4 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v29;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      int8x16x2_t v30 = *(uint64_t (**)(void))(*result + 8);
      return (uint64_t *)v30();
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
            }
            else {
              --v27[2];
            }
          }
          uint64_t *v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          int8x16x2_t v30 = *(_DWORD **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
            }
            else {
              --v30[2];
            }
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          unint64_t v16 = *(_DWORD **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
            }
            else {
              --v16[2];
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_DWORD *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, a3);
  unsigned int v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v9;
  uint64_t v11 = (void *)(v8 + 24 * v10);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (*(_OWORD *)v11 == 0)
  {
LABEL_13:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
    uint64_t v16 = *a4;
    *a4 = 0;
    uint64_t result = (_DWORD *)v11[2];
    uint64_t v11[2] = v16;
    if (result)
    {
      if (result[2] == 1) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
    uint64_t v18 = *a2;
    if (*a2) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v20 = *a2;
    if (*a2) {
      int v21 = *(_DWORD *)(v20 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
      {
LABEL_25:
        uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, (uint64_t)v11);
        uint64_t v11 = result;
        uint64_t v20 = *a2;
        if (*a2) {
          LODWORD(v23) = *(_DWORD *)(v20 - 4);
        }
        else {
          LODWORD(v23) = 0;
        }
      }
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_25;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v20 + 24 * v23;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
  uint64_t v14 = 0;
  int v15 = 1;
  while (v13 != *a3 || v12 != a3[1])
  {
    if (v12 == -1) {
      uint64_t v14 = v11;
    }
    unsigned int v10 = (v10 + v15) & v9;
    uint64_t v11 = (void *)(v8 + 24 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    ++v15;
    if (*(_OWORD *)v11 == 0)
    {
      if (v14)
      {
        *uint64_t v14 = 0;
        v14[1] = 0;
        uint64_t v14[2] = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = v14;
      }
      goto LABEL_13;
    }
  }
  uint64_t v24 = *a2;
  if (*a2) {
    unsigned int v25 = *(_DWORD *)(v24 - 4);
  }
  else {
    unsigned int v25 = 0;
  }
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v24 + 24 * v25;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v26 = *a4;
  *a4 = 0;
  uint64_t result = (_DWORD *)v11[2];
  uint64_t v11[2] = v26;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    do
    {
      uint64_t v13 = v5 + 24 * v10;
      if (*(void *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          uint64_t v16 = v5 + 24 * v10;
          uint64_t v17 = *(_DWORD **)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          if (v17)
          {
            if (v17[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
            }
            else {
              --v17[2];
            }
          }
        }
        else
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v31 = -1640531527;
          __int16 v32 = 0;
          char v33 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v31, (void *)(v5 + 24 * v10));
          int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v15;
            int v21 = (_OWORD *)(v14 + 24 * (v18 & v15));
            int v18 = ++v19 + (v18 & v15);
          }
          while (*v21 != 0);
          uint64_t v22 = v14 + 24 * v20;
          unsigned int v25 = *(_DWORD **)(v22 + 16);
          uint64_t v24 = (void *)(v22 + 16);
          unint64_t v23 = v25;
          void *v24 = 0;
          if (v25)
          {
            if (v23[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
            }
            else {
              --v23[2];
            }
          }
          _OWORD *v21 = *(_OWORD *)v13;
          uint64_t v26 = v5 + 24 * v10;
          uint64_t v27 = *(void *)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          void *v24 = v27;
          __int16 v28 = *(_DWORD **)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          if (v28)
          {
            if (v28[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
            }
            else {
              --v28[2];
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v21;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    uint64_t v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

_DWORD *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>::customDeleteBucket(void *a1)
{
  uint64_t result = (_DWORD *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

_OWORD *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(_OWORD *result, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    v3 += 24 * *(unsigned int *)(v3 - 4);
  }
  if ((void *)v3 == a3)
  {
    *(void *)uint64_t result = 0;
    return result;
  }
  uint64_t v4 = a3[2];
  a3[2] = 0;
  *(void *)uint64_t result = v4;
  if (*a2)
  {
    uint64_t v5 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
    if ((void *)v5 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    uint64_t v5 = 0;
  }
  if ((void *)v5 != a3)
  {
    *a3 = -1;
    a3[1] = -1;
    a3[2] = 0;
    ++*(_DWORD *)(*a2 - 16);
    uint64_t v6 = *a2;
    int v7 = *a2 ? *(_DWORD *)(v6 - 12) - 1 : -1;
    *(_DWORD *)(v6 - 12) = v7;
    uint64_t v8 = *a2;
    if (*a2)
    {
      unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
      unsigned int v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9) {
        return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a2, v10 >> 1, 0);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAA58;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAA58;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  a1[3] = 0;
  if (v2) {
    CFRetain(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v4 = &unk_1EE9FAA80;
  v4[1] = v1;
  v4[2] = v3;
  uint64_t v4[3] = v2;
  uint64_t v6 = v4;
  (*(void (**)(void, uint64_t, uint64_t, void **))(**(void **)(v1 + 56) + 56))(*(void *)(v1 + 56), v1, v2, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAA80;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAA80;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v1 = a1[3];
  uint64_t v3 = a1[1];
  a1[2] = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9FAAA8;
  v4[1] = v2;
  uint64_t v6 = v4;
  (*(void (**)(void, uint64_t, uint64_t, void **))(**(void **)(v3 + 56) + 40))(*(void *)(v3 + 56), v3, v1, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FAAA8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FAAA8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAAD0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAAD0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v1 = a1[3];
  uint64_t v3 = a1[1];
  a1[2] = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9FAAF8;
  v4[1] = v2;
  uint64_t v6 = v4;
  (*(void (**)(void, uint64_t, uint64_t, void **))(**(void **)(v3 + 56) + 48))(*(void *)(v3 + 56), v3, v1, &v6);
  uint64_t result = (uint64_t)v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FAAF8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FAAF8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::exitFullscreenWindowForPage(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebAutomationSession::WindowTransitionedToState>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAB20;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::exitFullscreenWindowForPage(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebAutomationSession::WindowTransitionedToState>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAB20;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::exitFullscreenWindowForPage(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebAutomationSession::WindowTransitionedToState>::call(uint64_t result, int a2)
{
  if (a2 == 1)
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v3 = *(void *)(v2 + 216);
    *(void *)(v2 + 216) = 0;
    uint64_t v4 = *(void *)(result + 24);
    *(void *)(result + 24) = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    if (v3)
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
      return v5(v3);
    }
  }
  return result;
}

void *WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::take(void *result, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    v3 += 16 * *(unsigned int *)(v3 - 4);
  }
  if ((void *)v3 == a3)
  {
    _DWORD *result = 0;
    return result;
  }
  uint64_t v4 = a3[1];
  a3[1] = 0;
  _DWORD *result = v4;
  if (*a2)
  {
    uint64_t v5 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
    if ((void *)v5 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    uint64_t v5 = 0;
  }
  if ((void *)v5 != a3)
  {
    *a3 = -1;
    a3[1] = 0;
    ++*(_DWORD *)(*a2 - 16);
    uint64_t v6 = *a2;
    int v7 = *a2 ? *(_DWORD *)(v6 - 12) - 1 : -1;
    *(_DWORD *)(v6 - 12) = v7;
    uint64_t v8 = *a2;
    if (*a2)
    {
      unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
      unsigned int v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9) {
        return (void *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a2, v10 >> 1);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unsigned int v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          unint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = (_DWORD *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (v24[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
            }
            else {
              --v24[2];
            }
          }
          *unint64_t v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(_DWORD **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (v13[2] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
            goto LABEL_25;
          }
          --v13[2];
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          uint64_t v13 = *(_DWORD **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[2] == 1) {
              goto LABEL_24;
            }
            --v13[2];
          }
        }
      }
LABEL_25:
      if (++v9 == v5) {
        goto LABEL_28;
      }
    }
  }
  if (v4)
  {
LABEL_28:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::willShowJavaScriptDialog(WebKit::WebPageProxy &)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAB48;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::willShowJavaScriptDialog(WebKit::WebPageProxy &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAB48;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::willShowJavaScriptDialog(WebKit::WebPageProxy &)::$_0,void>::call(void *result)
{
  uint64_t v1 = result[3];
  if (!*(unsigned char *)(v1 + 801))
  {
    if (*(unsigned char *)(v1 + 800))
    {
      uint64_t v2 = result;
      uint64_t v3 = (uint64_t *)result[1];
      uint64_t result = (void *)v3[7];
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t *))(*result + 72))(result, v3);
        if (result)
        {
          uint64_t v4 = *(void *)(v2[3] + 32);
          if (*(void *)(v4 + 1016) || *(unsigned __int8 *)(v4 + 1000) <= 1u)
          {
            WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 28));
            WebKit::WebAutomationSession::respondToPendingFrameNavigationCallbacksWithTimeout((uint64_t)v3, v3 + 19);
            uint64_t result = WebKit::WebAutomationSession::respondToPendingPageNavigationCallbacksWithTimeout((uint64_t)v3, v3 + 17);
          }
          int v5 = (uint64_t *)v3[24];
          if (v5)
          {
            uint64_t v6 = *((unsigned int *)v5 - 3);
            if (v6)
            {
              uint64_t v7 = *((unsigned int *)v5 - 1);
              uint64_t v8 = &v5[2 * v7];
              if (v7)
              {
                uint64_t v9 = 16 * v7;
                while ((unint64_t)(*v5 + 1) <= 1)
                {
                  v5 += 2;
                  v9 -= 16;
                  if (!v9)
                  {
                    int v5 = v8;
                    break;
                  }
                }
              }
              if (v6 >> 29)
              {
                __break(0xC471u);
                return result;
              }
              uint64_t v10 = WTF::fastMalloc((WTF *)(8 * v6));
              uint64_t v12 = (WTF *)v10;
              if (v5 != v8)
              {
                unsigned int v13 = 0;
                int v14 = 1;
LABEL_19:
                unsigned int v15 = v14;
                uint64_t v16 = *v5;
                v5 += 2;
                *(void *)(v10 + 8 * v13++) = v16;
                while (v5 != v8)
                {
                  if ((unint64_t)(*v5 + 1) > 1)
                  {
                    ++v14;
                    if (v5 != v8) {
                      goto LABEL_19;
                    }
                    break;
                  }
                  v5 += 2;
                }
                if (v13)
                {
                  uint64_t v17 = 8 * v15;
                  unint64_t v18 = (uint64_t *)v10;
                  while (1)
                  {
                    unsigned int v19 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3[24], *v18);
                    WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::take(&v41, v3 + 24, v19);
                    int v20 = v41;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    char v43 = v36;
                    Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(v20, (const WTF::String *)&v43);
                    unsigned int v21 = v43;
                    char v43 = 0;
                    if (!v21) {
                      goto LABEL_29;
                    }
                    if (*(_DWORD *)v21 != 2) {
                      break;
                    }
                    WTF::StringImpl::destroy(v21, v11);
                    if (v20)
                    {
LABEL_32:
                      if (*((_DWORD *)v20 + 2) == 1) {
                        (*(void (**)(WTF *))(*(void *)v20 + 8))(v20);
                      }
                      else {
                        --*((_DWORD *)v20 + 2);
                      }
                    }
LABEL_35:
                    ++v18;
                    v17 -= 8;
                    if (!v17) {
                      goto LABEL_36;
                    }
                  }
                  *(_DWORD *)v21 -= 2;
LABEL_29:
                  if (v20) {
                    goto LABEL_32;
                  }
                  goto LABEL_35;
                }
              }
LABEL_36:
              uint64_t result = (void *)WTF::fastFree(v12, v11);
            }
          }
          uint64_t v24 = (WTF::StringImpl *)v3[22];
          unint64_t v23 = v3 + 22;
          uint64_t v22 = v24;
          if (v24 && *((_DWORD *)v22 - 3))
          {
            uint64_t v25 = *((unsigned int *)v22 - 1);
            uint64_t v26 = (WTF::StringImpl *)((char *)v22 + 16 * v25);
            if (v25)
            {
              uint64_t v27 = 16 * v25;
              while ((unint64_t)(*(void *)v22 + 1) <= 1)
              {
                uint64_t v22 = (WTF::StringImpl *)((char *)v22 + 16);
                v27 -= 16;
                if (!v27)
                {
                  uint64_t v22 = v26;
                  break;
                }
              }
            }
            int v36 = (WTF::StringImpl *)v23;
            uint64_t v37 = v22;
            uint64_t v38 = v26;
            int v39 = v26;
            uint64_t v40 = v26;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t result = (void *)WTF::Mapper<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&)::{lambda(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>&&)#1},WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&,void>::map((uint64_t)&v41, (uint64_t **)&v36);
            char v29 = v41;
            if (HIDWORD(v42))
            {
              uint64_t v30 = 8 * HIDWORD(v42);
              unsigned int v31 = (WTF::StringImpl **)v41;
              do
              {
                char v43 = *v31;
                __int16 v32 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v23, &v43);
                WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take(v23, v32, &v35);
                LOBYTE(v36) = 0;
                LOBYTE(v39) = 0;
                WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v35, (int *)&v36);
                if ((_BYTE)v39) {
                  BOOL v33 = v38 == 0;
                }
                else {
                  BOOL v33 = 1;
                }
                if (!v33)
                {
                  uint64_t v34 = v37;
                  uint64_t v37 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2) {
                      WTF::StringImpl::destroy(v34, v28);
                    }
                    else {
                      *(_DWORD *)v34 -= 2;
                    }
                  }
                }
                uint64_t result = v35;
                uint64_t v35 = 0;
                if (result) {
                  uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
                }
                ++v31;
                v30 -= 8;
              }
              while (v30);
            }
            if (v29) {
              return (void *)WTF::fastFree(v29, v28);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v5 = a2[1];
  if (v5)
  {
    a2[1] = 0;
    uint64_t v3 = *a1;
  }
  *a3 = v5;
  if (v3)
  {
    uint64_t v6 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v6 = 0;
  }
  if (v6 != a2) {
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

WebKit::SimulatedInputDispatcher *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (WebKit::SimulatedInputDispatcher *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WebKit::SimulatedInputDispatcher *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unsigned int v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = (WebKit::SimulatedInputDispatcher *)v26[1];
          v26[1] = 0;
          if (v27) {
            WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v27, v10);
          }
          uint64_t *v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(WebKit::SimulatedInputDispatcher **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v30, v10);
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(WebKit::SimulatedInputDispatcher **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveChildFrameHandle(WTF::String const&,WTF::String const&,std::optional<int> &&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAB70;
  int v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveChildFrameHandle(WTF::String const&,WTF::String const&,std::optional<int> &&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAB70;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveChildFrameHandle(WTF::String const&,WTF::String const&,std::optional<int> &&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&>::call(uint64_t a1, uint64_t a2, long long *a3)
{
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = *(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback **)(a1 + 24);
    long long v9 = *a3;
    uint64_t v10 = *((void *)a3 + 2);
    WebKit::WebAutomationSession::handleForWebFrameID((uint64_t *)&v11, v7, (uint64_t)&v9);
    Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(v8, (const WTF::String *)&v11);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  uint64_t v3 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 24);
  uint64_t v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((void *)a2);
  if ((v4 & 0xFF00000000) != 0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 5;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v9);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v9);
  uint64_t result = (WTF::StringImpl *)v9;
  *(void *)&long long v9 = 0;
  if (result)
  {
LABEL_8:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveParentFrameHandle(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::__1<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAB98;
  int v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveParentFrameHandle(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::__1<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAB98;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveParentFrameHandle(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::__1<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &&>::call(uint64_t a1, uint64_t a2, long long *a3)
{
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = *(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback **)(a1 + 24);
    long long v9 = *a3;
    uint64_t v10 = *((void *)a3 + 2);
    WebKit::WebAutomationSession::handleForWebFrameID((uint64_t *)&v11, v7, (uint64_t)&v9);
    Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(v8, (const WTF::String *)&v11);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  uint64_t v3 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 24);
  uint64_t v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((void *)a2);
  if ((v4 & 0xFF00000000) != 0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 5;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v9);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v9);
  uint64_t result = (WTF::StringImpl *)v9;
  *(void *)&long long v9 = 0;
  if (result)
  {
LABEL_8:
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::computeElementLayout(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,Inspector::Protocol::Automation::CoordinateSystem,WTF::Ref<std::optional<BOOL> &&::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback,WTF::RawPtrTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String>::IntPoint> &&,BOOL>::~CallableWrapper(void *a1)
{
  int v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FABC0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::computeElementLayout(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,Inspector::Protocol::Automation::CoordinateSystem,WTF::Ref<std::optional<BOOL> &&::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback,WTF::RawPtrTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String>::IntPoint> &&,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FABC0;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::computeElementLayout(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,Inspector::Protocol::Automation::CoordinateSystem,WTF::Ref<std::optional<BOOL> &&::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback,WTF::RawPtrTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String>::IntPoint> &&,BOOL>::call(WTF::JSONImpl::Object *a1, uint64_t a2, float *a3, uint64_t a4, WTF::JSONImpl::Value *a5)
{
  if (*(unsigned char *)(a2 + 8))
  {
    unsigned int v22 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    uint64_t v40 = v22;
    char v41 = 1;
    int v23 = (Inspector::BackendDispatcher::CallbackBase *)*((void *)a1 + 1);
    uint64_t v24 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(&v40);
    if ((v24 & 0xFF00000000) != 0) {
      uint64_t v24 = v24;
    }
    else {
      uint64_t v24 = 5;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v24, v44);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v23, (const WTF::String *)v44);
    uint64_t result = v44[0];
    v44[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
        if (!v22) {
          return result;
        }
LABEL_50:
        if (*(_DWORD *)v22 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v22, v25);
        }
        *(_DWORD *)v22 -= 2;
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v22) {
      return result;
    }
    goto LABEL_50;
  }
  float v7 = a3[2];
  float v8 = a3[3];
  int v10 = *(_DWORD *)a4;
  int v9 = *(_DWORD *)(a4 + 4);
  int v11 = *(unsigned __int8 *)(a4 + 8);
  float v13 = *a3;
  float v12 = a3[1];
  WTF::JSONImpl::Object::create((uint64_t *)v44, a1);
  char v43 = v44[0];
  Inspector::Protocol::Automation::Point::Builder<0>::setX((uint64_t *)&v43, v13);
  uint64_t v14 = Inspector::Protocol::Automation::Point::Builder<1>::setY((uint64_t *)&v43, v12);
  uint64_t v15 = v43;
  WTF::JSONImpl::Object::create((uint64_t *)v44, (WTF::JSONImpl::Object *)v14);
  char v43 = v44[0];
  Inspector::Protocol::Automation::Size::Builder<0>::setWidth((uint64_t *)&v43, v7);
  uint64_t v16 = Inspector::Protocol::Automation::Size::Builder<1>::setHeight((uint64_t *)&v43, v8);
  uint64_t v17 = v43;
  WTF::JSONImpl::Object::create((uint64_t *)v44, (WTF::JSONImpl::Object *)v16);
  int v18 = v44[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v42 = v15;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v18 + 2, &v43, (uint64_t *)&v42, (uint64_t)v44);
  if (v45)
  {
    unint64_t v20 = (uint64_t *)((char *)v18 + 24);
    uint64_t v21 = *((unsigned int *)v18 + 9);
    if (v21 == *((_DWORD *)v18 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v20, (unint64_t)&v43);
    }
    else
    {
      uint64_t v27 = *v20;
      uint64_t v28 = v43;
      if (v43) {
        *(_DWORD *)v43 += 2;
      }
      *(void *)(v27 + 8 * v21) = v28;
      *((_DWORD *)v18 + 9) = v21 + 1;
    }
  }
  uint64_t v29 = v42;
  uint64_t v42 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v29;
    }
  }
  uint64_t v30 = v43;
  char v43 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v19);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v42 = v17;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v18 + 2, &v43, (uint64_t *)&v42, (uint64_t)v44);
  if (v45)
  {
    __int16 v32 = (uint64_t *)((char *)v18 + 24);
    uint64_t v33 = *((unsigned int *)v18 + 9);
    if (v33 == *((_DWORD *)v18 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v32, (unint64_t)&v43);
    }
    else
    {
      uint64_t v34 = *v32;
      uint64_t v35 = v43;
      if (v43) {
        *(_DWORD *)v43 += 2;
      }
      *(void *)(v34 + 8 * v33) = v35;
      *((_DWORD *)v18 + 9) = v33 + 1;
    }
  }
  int v36 = v42;
  uint64_t v42 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v36;
    }
  }
  uint64_t v37 = v43;
  char v43 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      uint64_t v37 = (WTF::StringImpl *)WTF::StringImpl::destroy(v37, v31);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  v44[0] = v18;
  if (v11)
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v43, v37);
    Inspector::Protocol::Automation::Point::Builder<0>::setX((uint64_t *)&v43, (double)v10);
    Inspector::Protocol::Automation::Point::Builder<1>::setY((uint64_t *)&v43, (double)v9);
    uint64_t v38 = (WTF::JSONImpl::Object *)*((void *)a1 + 1);
  }
  else
  {
    uint64_t v38 = (WTF::JSONImpl::Object *)*((void *)a1 + 1);
    char v43 = 0;
  }
  Inspector::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback::sendSuccess(v38, v44, &v43, a5);
  int v39 = v43;
  char v43 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v39;
    }
  }
  uint64_t result = v44[0];
  v44[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedRole(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::~CallableWrapper(void *a1)
{
  int v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FABE8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedRole(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FABE8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedRole(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::call(WTF::StringImpl *result, uint64_t a2, WTF::String *a3)
{
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = (Inspector::BackendDispatcher::CallbackBase *)*((void *)result + 1);
    uint64_t v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((void *)a2);
    if ((v4 & 0xFF00000000) != 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = 5;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v7);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v7);
    uint64_t result = v7;
    float v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*((unsigned char *)a3 + 8))
  {
    uint64_t v6 = (Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback *)*((void *)result + 1);
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback::sendSuccess(v6, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedLabel(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::~CallableWrapper(void *a1)
{
  int v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FAC10;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedLabel(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FAC10;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedLabel(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::call(WTF::StringImpl *result, uint64_t a2, WTF::String *a3)
{
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = (Inspector::BackendDispatcher::CallbackBase *)*((void *)result + 1);
    uint64_t v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((void *)a2);
    if ((v4 & 0xFF00000000) != 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = 5;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v7);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v7);
    uint64_t result = v7;
    float v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*((unsigned char *)a3 + 8))
  {
    uint64_t v6 = (Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback *)*((void *)result + 1);
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback::sendSuccess(v6, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::selectOptionElement(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>> &&)::$_0,void,std::optional<WTF::String> &&>::~CallableWrapper(void *a1)
{
  int v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FAC38;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::selectOptionElement(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>> &&)::$_0,void,std::optional<WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FAC38;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::selectOptionElement(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>> &&)::$_0,void,std::optional<WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  int v2 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((void *)a2);
    if ((v3 & 0xFF00000000) != 0) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = 5;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v3, &v7);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v2, (const WTF::String *)&v7);
    uint64_t result = v7;
    float v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v6 = *(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8);
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setFilesForInputFileUpload(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&>::~CallableWrapper(void *a1)
{
  int v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FAC60;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setFilesForInputFileUpload(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FAC60;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setFilesForInputFileUpload(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  int v2 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((void *)a2);
    if ((v3 & 0xFF00000000) != 0) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = 5;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v3, &v7);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v2, (const WTF::String *)&v7);
    uint64_t result = v7;
    float v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v6 = *(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8);
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getAllCookies(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>> &&)::$_0,void,std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(void *a1)
{
  int v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FAC88;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getAllCookies(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>> &&)::$_0,void,std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FAC88;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getAllCookies(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>> &&)::$_0,void,std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3 = 0;
  LOBYTE(v124) = 0;
  unsigned __int8 v125 = 0;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    int v5 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    long long v124 = v5;
    int v3 = 1;
    unsigned __int8 v125 = 1;
  }
  uint64_t v6 = *a3;
  uint64_t v121 = *a3;
  int v7 = *((_DWORD *)a3 + 2);
  unsigned int v8 = *((_DWORD *)a3 + 3);
  *a3 = 0;
  a3[1] = 0;
  int v122 = v7;
  unsigned int v123 = v8;
  int v9 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  if (v4)
  {
    uint64_t v10 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(&v124);
    if ((v10 & 0xFF00000000) != 0) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = 5;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v10, v131);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)v131);
    float v12 = v131[0];
    v131[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
LABEL_180:
    uint64_t result = WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v121, v11);
    if (v3)
    {
      uint64_t result = (uint64_t)v124;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2) {
          return WTF::StringImpl::destroy(v124, v119);
        }
        else {
          *(_DWORD *)v124 -= 2;
        }
      }
    }
    return result;
  }
  uint64_t v120 = *(WTF::JSONImpl::Object **)(a1 + 8);
  uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v14 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v13);
  uint64_t v126 = v14;
  if (!v8)
  {
LABEL_174:
    Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback::sendSuccess(v120, (uint64_t *)&v126);
    if (v126)
    {
      if (*(_DWORD *)v126 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v126;
      }
    }
    int v3 = v125;
    goto LABEL_180;
  }
  uint64_t v15 = v6 + 136 * v8;
  while (1)
  {
    WTF::JSONImpl::Object::create(&v127, v14);
    uint64_t v16 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((uint64_t *)&v130, (WTF::JSONImpl::Value *)v6, v17);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v16 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      unint64_t v19 = (uint64_t *)(v16 + 24);
      uint64_t v20 = *(unsigned int *)(v16 + 36);
      if (v20 == *(_DWORD *)(v16 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v19, (unint64_t)&v129);
      }
      else
      {
        uint64_t v21 = *v19;
        unsigned int v22 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v21 + 8 * v20) = v22;
        *(_DWORD *)(v16 + 36) = v20 + 1;
      }
    }
    int v23 = v130;
    int v130 = 0;
    if (v23)
    {
      if (*v23 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v23;
      }
    }
    uint64_t v24 = v129;
    int v129 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v18);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((uint64_t *)&v130, (WTF::JSONImpl::Value *)(v6 + 8), v26);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v25 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      uint64_t v28 = (uint64_t *)(v25 + 24);
      uint64_t v29 = *(unsigned int *)(v25 + 36);
      if (v29 == *(_DWORD *)(v25 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v28, (unint64_t)&v129);
      }
      else
      {
        uint64_t v30 = *v28;
        unsigned int v31 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v30 + 8 * v29) = v31;
        *(_DWORD *)(v25 + 36) = v29 + 1;
      }
    }
    __int16 v32 = v130;
    int v130 = 0;
    if (v32)
    {
      if (*v32 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v32;
      }
    }
    uint64_t v33 = v129;
    int v129 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v27);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t v34 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((uint64_t *)&v130, (WTF::JSONImpl::Value *)(v6 + 16), v35);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v34 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      uint64_t v37 = (uint64_t *)(v34 + 24);
      uint64_t v38 = *(unsigned int *)(v34 + 36);
      if (v38 == *(_DWORD *)(v34 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v37, (unint64_t)&v129);
      }
      else
      {
        uint64_t v39 = *v37;
        uint64_t v40 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v39 + 8 * v38) = v40;
        *(_DWORD *)(v34 + 36) = v38 + 1;
      }
    }
    char v41 = v130;
    int v130 = 0;
    if (v41)
    {
      if (*v41 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v41;
      }
    }
    uint64_t v42 = v129;
    int v129 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, v36);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
    uint64_t v43 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v44 = v6 + 24;
    WTF::JSONImpl::Value::create((uint64_t *)&v130, (WTF::JSONImpl::Value *)(v6 + 24), v45);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v43 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      int v47 = (uint64_t *)(v43 + 24);
      uint64_t v48 = *(unsigned int *)(v43 + 36);
      if (v48 == *(_DWORD *)(v43 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v47, (unint64_t)&v129);
      }
      else
      {
        uint64_t v49 = *v47;
        uint64_t v50 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v49 + 8 * v48) = v50;
        *(_DWORD *)(v43 + 36) = v48 + 1;
      }
    }
    unint64_t v51 = v130;
    int v130 = 0;
    if (v51)
    {
      if (*v51 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v51;
      }
    }
    uint64_t v52 = v129;
    int v129 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2) {
        WTF::StringImpl::destroy(v52, v46);
      }
      else {
        *(_DWORD *)v52 -= 2;
      }
    }
    if (*(unsigned char *)(v6 + 48)) {
      double v53 = *(double *)(v6 + 40) / 1000.0;
    }
    else {
      double v53 = 0.0;
    }
    uint64_t v54 = v127;
    uint64_t v55 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((uint64_t *)&v130, v55, v53);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v54 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      char v57 = (uint64_t *)(v54 + 24);
      uint64_t v58 = *(unsigned int *)(v54 + 36);
      if (v58 == *(_DWORD *)(v54 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v57, (unint64_t)&v129);
      }
      else
      {
        uint64_t v59 = *v57;
        uint64_t v60 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v59 + 8 * v58) = v60;
        *(_DWORD *)(v54 + 36) = v58 + 1;
      }
    }
    char v61 = v130;
    int v130 = 0;
    if (v61)
    {
      if (*v61 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v61;
      }
    }
    uint64_t v62 = v129;
    int v129 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, v56);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }
    uint64_t v63 = *(void *)(v44 - 24);
    if (v63) {
      LODWORD(v63) = *(_DWORD *)(v63 + 4);
    }
    uint64_t v64 = *(void *)(v44 - 16);
    if (v64) {
      LODWORD(v64) = *(_DWORD *)(v64 + 4);
    }
    char v65 = (WTF::JSONImpl::Value *)(v64 + v63);
    uint64_t v66 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v65);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v66 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      int v68 = (uint64_t *)(v66 + 24);
      uint64_t v69 = *(unsigned int *)(v66 + 36);
      if (v69 == *(_DWORD *)(v66 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v68, (unint64_t)&v129);
      }
      else
      {
        uint64_t v70 = *v68;
        uint64_t v71 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v70 + 8 * v69) = v71;
        *(_DWORD *)(v66 + 36) = v69 + 1;
      }
    }
    long long v72 = v130;
    int v130 = 0;
    if (v72)
    {
      if (*v72 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v72;
      }
    }
    uint64_t v73 = v129;
    int v129 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2) {
        WTF::StringImpl::destroy(v73, v67);
      }
      else {
        *(_DWORD *)v73 -= 2;
      }
    }
    char v74 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v44 + 32);
    uint64_t v75 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v74);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v75 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      char v77 = (uint64_t *)(v75 + 24);
      uint64_t v78 = *(unsigned int *)(v75 + 36);
      if (v78 == *(_DWORD *)(v75 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v77, (unint64_t)&v129);
      }
      else
      {
        uint64_t v79 = *v77;
        uint64_t v80 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v79 + 8 * v78) = v80;
        *(_DWORD *)(v75 + 36) = v78 + 1;
      }
    }
    int v81 = v130;
    int v130 = 0;
    if (v81)
    {
      if (*v81 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v81;
      }
    }
    uint64_t v82 = v129;
    int v129 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2) {
        WTF::StringImpl::destroy(v82, v76);
      }
      else {
        *(_DWORD *)v82 -= 2;
      }
    }
    uint64_t v83 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v44 + 33);
    uint64_t v84 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v83);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v84 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      unint64_t v86 = (uint64_t *)(v84 + 24);
      uint64_t v87 = *(unsigned int *)(v84 + 36);
      if (v87 == *(_DWORD *)(v84 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v86, (unint64_t)&v129);
      }
      else
      {
        uint64_t v88 = *v86;
        char v89 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v88 + 8 * v87) = v89;
        *(_DWORD *)(v84 + 36) = v87 + 1;
      }
    }
    char v90 = v130;
    int v130 = 0;
    if (v90)
    {
      if (*v90 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v90;
      }
    }
    unsigned int v91 = v129;
    int v129 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2) {
        WTF::StringImpl::destroy(v91, v85);
      }
      else {
        *(_DWORD *)v91 -= 2;
      }
    }
    uint64_t v92 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v44 + 34);
    uint64_t v93 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v92);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v93 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      int v95 = (uint64_t *)(v93 + 24);
      uint64_t v96 = *(unsigned int *)(v93 + 36);
      if (v96 == *(_DWORD *)(v93 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v95, (unint64_t)&v129);
      }
      else
      {
        uint64_t v97 = *v95;
        int v98 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v97 + 8 * v96) = v98;
        *(_DWORD *)(v93 + 36) = v96 + 1;
      }
    }
    unsigned int v99 = v130;
    int v130 = 0;
    if (v99)
    {
      if (*v99 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v99;
      }
    }
    unsigned int v100 = v129;
    int v129 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2) {
        WTF::StringImpl::destroy(v100, v94);
      }
      else {
        *(_DWORD *)v100 -= 2;
      }
    }
    unint64_t v101 = *(char *)(v44 + 104);
    if (v101 >= 3) {
      break;
    }
    uint64_t v102 = dword_1994F7958[v101];
    uint64_t v103 = v127;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v102, &v128);
    WTF::JSONImpl::Value::create((uint64_t *)&v130, (WTF::JSONImpl::Value *)&v128, v104);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v103 + 16), &v129, (uint64_t *)&v130, (uint64_t)v131);
    if (v132)
    {
      uint64_t v106 = (uint64_t *)(v103 + 24);
      uint64_t v107 = *(unsigned int *)(v103 + 36);
      if (v107 == *(_DWORD *)(v103 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v106, (unint64_t)&v129);
      }
      else
      {
        uint64_t v108 = *v106;
        int v109 = v129;
        if (v129) {
          *(_DWORD *)v129 += 2;
        }
        *(void *)(v108 + 8 * v107) = v109;
        *(_DWORD *)(v103 + 36) = v107 + 1;
      }
    }
    unsigned int v110 = v130;
    int v130 = 0;
    if (v110)
    {
      if (*v110 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v110;
      }
    }
    unsigned int v111 = v128;
    int v128 = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2) {
        WTF::StringImpl::destroy(v111, v105);
      }
      else {
        *(_DWORD *)v111 -= 2;
      }
    }
    uint64_t v14 = v129;
    int v129 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        uint64_t v14 = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v14, v105);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v112 = v127;
    unint64_t v113 = *(unsigned int *)(v13 + 28);
    if (v113 == *(_DWORD *)(v13 + 24))
    {
      unint64_t v114 = v113 + (v113 >> 2);
      if (v114 >= 0x10) {
        unint64_t v115 = v114 + 1;
      }
      else {
        unint64_t v115 = 16;
      }
      if (v115 <= v113 + 1) {
        unint64_t v116 = v113 + 1;
      }
      else {
        unint64_t v116 = v115;
      }
      uint64_t v14 = (WTF::JSONImpl::Object *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v13 + 16, v116);
      unint64_t v113 = *(unsigned int *)(v13 + 28);
      uint64_t v117 = (uint64_t *)(*(void *)(v13 + 16) + 8 * v113);
    }
    else
    {
      uint64_t v117 = (uint64_t *)(*(void *)(v13 + 16) + 8 * v113);
    }
    uint64_t *v117 = v112;
    *(_DWORD *)(v13 + 28) = v113 + 1;
    uint64_t v6 = v44 + 112;
    if (v44 + 112 == v15) {
      goto LABEL_174;
    }
  }
  uint64_t result = 1452;
  __break(0xC471u);
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FACB0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FACB0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  int v5 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v27);
    if (!v30)
    {
      int v11 = 0;
      int v13 = 0;
      LOBYTE(v22) = 0;
      char v26 = 0;
      goto LABEL_13;
    }
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v7, (uint64_t)&v31);
    int v10 = v33;
    if (v33)
    {
      if (!v30)
      {
        __break(1u);
        return result;
      }
      int v11 = 0;
      LOBYTE(v22) = 0;
      char v23 = 0;
      if ((_BYTE)v28)
      {
        float v12 = v27;
        uint64_t v27 = 0;
        unsigned int v22 = v12;
        int v11 = 1;
        char v23 = 1;
      }
      int v4 = v31;
      uint64_t v24 = v31;
      unsigned int v2 = v32;
      unsigned int v3 = HIDWORD(v32);
      unsigned int v31 = 0;
      uint64_t v32 = 0;
      unint64_t v25 = __PAIR64__(v3, v2);
      int v13 = 1;
      char v26 = 1;
      WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v9);
    }
    else
    {
      int v11 = 0;
      int v13 = 0;
      LOBYTE(v22) = 0;
      char v26 = 0;
    }
    if (v30)
    {
      if ((_BYTE)v28)
      {
        uint64_t v17 = v27;
        uint64_t v27 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v9);
            if (v10)
            {
LABEL_23:
              if (v13)
              {
                LOBYTE(v31) = 0;
                LOBYTE(v32) = 0;
                if (v11)
                {
                  int v18 = v22;
                  unsigned int v22 = 0;
                  unsigned int v31 = v18;
                  LOBYTE(v32) = 1;
                }
                uint64_t v24 = 0;
                unint64_t v25 = 0;
                uint64_t v27 = v4;
                unsigned int v28 = v2;
                unsigned int v29 = v3;
                WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(v5, (uint64_t)&v31, &v27);
                WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v19);
                if ((_BYTE)v32)
                {
                  uint64_t v21 = v31;
                  unsigned int v31 = 0;
                  if (v21)
                  {
                    if (*(_DWORD *)v21 == 2) {
                      WTF::StringImpl::destroy(v21, v20);
                    }
                    else {
                      *(_DWORD *)v21 -= 2;
                    }
                  }
                }
                return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v20);
              }
              else
              {
                std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v9);
                return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(v5);
              }
            }
LABEL_13:
            int v9 = *(void **)a2;
            uint64_t v15 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v16 = *((void *)a2 + 3);
            if (v16 && v15) {
              (*(void (**)(uint64_t, void *))(*(void *)v16 + 16))(v16, v9);
            }
            goto LABEL_23;
          }
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    if (v10) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v14 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(v14);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(uint64_t *a1)
{
  LOBYTE(v5) = 0;
  char v6 = 0;
  v4[0] = 0;
  v4[1] = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a1, (uint64_t)&v5, v4);
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  if (v6)
  {
    uint64_t result = v5;
    int v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *a1;
  *a1 = 0;
  LOBYTE(v10) = 0;
  char v11 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    unsigned int v3 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    int v10 = v3;
    char v11 = 1;
  }
  v9[0] = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v9[1] = v4;
  WTF::Function<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(&v12, (uint64_t)&v10, v9);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  if (v11)
  {
    int v7 = v10;
    int v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WTF::Function<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *a1;
  LOBYTE(v10) = 0;
  char v11 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    int v10 = v4;
    char v11 = 1;
  }
  v9[0] = *a3;
  uint64_t v5 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v9[1] = v5;
  (*(void (**)(uint64_t, WTF::StringImpl **, void *))(*(void *)v3 + 16))(v3, &v10, v9);
  uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  if (v11)
  {
    uint64_t result = v10;
    int v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::deleteSingleCookie(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>> &&)::$_0,void,std::optional<WTF::String>>::~CallableWrapper(void *a1)
{
  unsigned int v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FACD8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::deleteSingleCookie(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>> &&)::$_0,void,std::optional<WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FACD8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::deleteSingleCookie(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>> &&)::$_0,void,std::optional<WTF::String>>::call(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    unsigned int v8 = v4;
    char v9 = 1;
    uint64_t v5 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
    uint64_t v6 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(&v8);
    if ((v6 & 0xFF00000000) != 0) {
      uint64_t v6 = v6;
    }
    else {
      uint64_t v6 = 5;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v6, &v10);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v5, (const WTF::String *)&v10);
    uint64_t result = v10;
    int v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if (!v4) {
          return result;
        }
LABEL_14:
        if (*(_DWORD *)v4 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v7);
        }
        *(_DWORD *)v4 -= 2;
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v4) {
      return result;
    }
    goto LABEL_14;
  }
  unsigned int v2 = *(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8);

  return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FAD00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FAD00;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WTF::String>>>(a2, &v7);
    if (v9)
    {
      LOBYTE(v10) = 0;
      char v11 = 0;
      if (v8)
      {
        uint64_t v3 = v7;
        int v7 = 0;
        int v10 = v3;
        char v11 = 1;
      }
      uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(v2, (uint64_t)&v10);
      if (v11)
      {
        uint64_t result = v10;
        int v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (v9)
      {
        if (v8)
        {
          uint64_t result = v7;
          int v7 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(v6);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(uint64_t *a1)
{
  LOBYTE(v3) = 0;
  char v4 = 0;
  uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a1, (uint64_t)&v3);
  if (v4)
  {
    uint64_t result = v3;
    uint64_t v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = *a1;
  *a1 = 0;
  LOBYTE(v6) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v2 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    uint64_t v6 = v2;
    char v7 = 1;
  }
  WTF::Function<void ()(std::optional<WTF::String>)>::operator()(&v8, (uint64_t)&v6);
  if (v7)
  {
    char v4 = v6;
    uint64_t v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WTF::Function<void ()(std::optional<WTF::String>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  LOBYTE(v6) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    uint64_t v6 = v3;
    char v7 = 1;
  }
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, &v6);
  if (v7)
  {
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::addSingleCookie(WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9FAD28;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::addSingleCookie(WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9FAD28;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::addSingleCookie(WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::call(uint64_t a1)
{
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::viewportInViewCenterPointOfElement(WebKit::WebPageProxy &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String const&,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<WebCore::IntPoint>&&,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FAD78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::viewportInViewCenterPointOfElement(WebKit::WebPageProxy &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String const&,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<WebCore::IntPoint>&&,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FAD78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::viewportInViewCenterPointOfElement(WebKit::WebPageProxy &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::String const&,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<WebCore::IntPoint>&&,BOOL>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = (uint64_t *)(a1 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v5 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((void *)a2);
    if ((v5 & 0xFF00000000) != 0) {
      int v6 = v5;
    }
    else {
      int v6 = 5;
    }
    int v13 = v6;
    LOBYTE(v14) = 0;
    char v15 = 0;
    char v16 = 1;
    uint64_t result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()(v4, 0, 0, &v13);
    if (v16) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
LABEL_15:
      uint64_t result = v14;
      uint64_t v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a4 + 8))
    {
      uint64_t v10 = *(void *)a4;
      unsigned int v11 = *(_DWORD *)(a4 + 8);
      LOBYTE(v13) = 0;
      char v16 = 0;
      uint64_t v12 = (uint64_t *)(a1 + 8);
    }
    else
    {
      int v13 = 23;
      LOBYTE(v14) = 0;
      char v15 = 0;
      char v16 = 1;
      uint64_t v12 = (uint64_t *)(a1 + 8);
      uint64_t v10 = 0;
      unsigned int v11 = 0;
    }
    uint64_t result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()(v12, v10, v11, &v13);
    if (v16 && v15) {
      goto LABEL_15;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FADA0;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FADA0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, int *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24))
  {
    int v4 = *a2;
    if (*((unsigned char *)a2 + 16))
    {
      uint64_t v2 = (WTF::StringImpl *)*((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
      *(unsigned char *)(*(void *)(a1 + 8) + 300) = 0;
      int v9 = v4;
      if (v2) {
        *(_DWORD *)v2 += 2;
      }
      uint64_t v10 = v2;
      int v5 = 1;
      char v11 = 1;
    }
    else
    {
      uint64_t v2 = 0;
      int v5 = 0;
      *(unsigned char *)(*(void *)(a1 + 8) + 300) = 0;
      int v9 = v4;
      LOBYTE(v10) = 0;
      char v11 = 0;
    }
    char v12 = 1;
  }
  else
  {
    int v5 = 0;
    *(unsigned char *)(*(void *)(a1 + 8) + 300) = 0;
    LOBYTE(v9) = 0;
    char v12 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 24), (uint64_t)&v9);
  if (v12) {
    BOOL v8 = v11 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if (!v3) {
          return result;
        }
        goto LABEL_17;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v3) {
    return result;
  }
LABEL_17:
  if (v2 && v5)
  {
    if (*(_DWORD *)v2 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v7);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &&,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,WebKit::AutomationCommandError>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9FADC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &&,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,WebKit::AutomationCommandError>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9FADC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &&,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,WebKit::AutomationCommandError>::call(uint64_t a1, int *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24))
  {
    int v5 = *a2;
    if (*((unsigned char *)a2 + 16))
    {
      uint64_t v2 = (WTF::StringImpl *)*((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
      int v10 = v5;
      if (v2) {
        *(_DWORD *)v2 += 2;
      }
      char v11 = v2;
      int v6 = 1;
      char v12 = 1;
    }
    else
    {
      uint64_t v2 = 0;
      int v6 = 0;
      int v10 = *a2;
      LOBYTE(v11) = 0;
      char v12 = 0;
    }
    char v13 = 1;
  }
  else
  {
    int v6 = 0;
    LOBYTE(v10) = 0;
    char v13 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(v3, (uint64_t)&v10);
  if (v13) {
    BOOL v9 = v12 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t result = v11;
    char v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        if (!v4) {
          return result;
        }
        goto LABEL_17;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v4) {
    return result;
  }
LABEL_17:
  if (v2 && v6)
  {
    if (*(_DWORD *)v2 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v8);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FADF0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FADF0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::call(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28) && *(unsigned char *)(a1 + 36))
  {
    uint64_t v2 = *(unsigned int **)(a1 + 8);
    uint64_t v1 = *(WebKit::WebAutomationSession **)(a1 + 16);
    int v3 = *(_DWORD *)(a1 + 24);
    int v5 = *(_DWORD *)(a1 + 32);
    int v6 = 0;
    WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(v2, v1, v3, &v5);
    if (v6 != -1) {
      ((void (*)(char *, int *))off_1EE9FAE08[v6])(&v7, &v5);
    }
  }
  else
  {
    uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
    WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void>::~CallableWrapper(v4);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9FAE28;
  int v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9FAE28;
  int v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void>::call(WebKit::WebAutomationSession **a1)
{
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_2,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAE50;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  int v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_2,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAE50;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_2,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    unsigned int v8 = *(_DWORD *)a2;
    LOBYTE(v9) = 0;
    char v10 = 0;
    int v2 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v3 = *(WTF::StringImpl **)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      BOOL v9 = v3;
      char v10 = 1;
    }
    char v11 = 1;
    uint64_t v4 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 16);
    WebKit::AutomationCommandError::toProtocolString((WebKit::AutomationCommandError *)&v12, &v8);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v4, (const WTF::String *)&v12);
    uint64_t result = v12;
    char v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v2) {
          return result;
        }
LABEL_13:
        uint64_t result = v9;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v5);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v2) {
      return result;
    }
    goto LABEL_13;
  }
  char v7 = *(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 16);

  return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(v7);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    while (1)
    {
      BOOL v9 = (WTF::StringImpl **)(v2 + 16 * v8);
      char v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unsigned int v15 = *((_DWORD *)v10 + 4);
          if (v15 >= 0x100) {
            unsigned int v16 = v15 >> 8;
          }
          else {
            unsigned int v16 = WTF::StringImpl::hashSlowCase(v10);
          }
          int v17 = 0;
          do
          {
            uint64_t v18 = v16 & v14;
            unsigned int v16 = ++v17 + v18;
          }
          while (*(void *)(v13 + 16 * v18));
          uint64_t v19 = v13 + 16 * v18;
          uint64_t v20 = *(_DWORD **)(v19 + 8);
          *(void *)(v19 + 8) = 0;
          if (v20)
          {
            WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v20);
            uint64_t v21 = *(WTF::StringImpl **)v19;
            *(void *)uint64_t v19 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2) {
                WTF::StringImpl::destroy(v21, v7);
              }
              else {
                *(_DWORD *)v21 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v19 = 0;
          }
          unsigned int v22 = *v9;
          *BOOL v9 = 0;
          *(void *)uint64_t v19 = v22;
          uint64_t v23 = v2 + 16 * v8;
          uint64_t v24 = *(void *)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          *(void *)(v19 + 8) = v24;
          unint64_t v25 = *(_DWORD **)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v25) {
            WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v25);
          }
          char v10 = *v9;
          *BOOL v9 = 0;
          if (!v10) {
            goto LABEL_36;
          }
          if (*(_DWORD *)v10 == 2) {
            goto LABEL_35;
          }
          *(_DWORD *)v10 -= 2;
        }
        else
        {
          uint64_t v11 = v2 + 16 * v8;
          char v12 = *(_DWORD **)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          if (v12)
          {
            WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v12);
            char v10 = *v9;
          }
          *BOOL v9 = 0;
          if (!v10) {
            goto LABEL_36;
          }
          if (*(_DWORD *)v10 == 2)
          {
LABEL_35:
            WTF::StringImpl::destroy(v10, v7);
            goto LABEL_36;
          }
          *(_DWORD *)v10 -= 2;
        }
      }
LABEL_36:
      if (++v8 == v3) {
        goto LABEL_39;
      }
    }
  }
  if (v2)
  {
LABEL_39:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      int v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      int v5 = 120 * a2;
      uint64_t result = WTF::fastMalloc((WTF *)(120 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        uint64_t v8 = 120 * v4;
        uint64_t v9 = (uint64_t)v3;
        do
        {
          std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>::pair[abi:sn180100](v7, v9);
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v9 + 64);
          uint64_t v11 = *(void *)(v9 + 32);
          if (v11) {
            WTF::fastFree((WTF *)(v11 - 16), v10);
          }
          uint64_t result = WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes(v9 + 8, v10);
          uint64_t v12 = *(void *)(v9 + 8);
          if (v12) {
            uint64_t result = WTF::fastFree((WTF *)(v12 - 16), v6);
          }
          v7 += 120;
          v9 += 120;
          v8 -= 120;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

__n128 std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 8) = v2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 53) = *(void *)(a2 + 53);
  *(_OWORD *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v7 = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
    *(void *)(a1 + 64) = v7;
    *(unsigned char *)(a1 + 72) = 1;
  }
  __n128 result = *(__n128 *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v9;
  return result;
}

uint64_t WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      long long v9 = (_DWORD *)(v2 + 8 * i);
      if ((int)*v9 <= 2147483645)
      {
        uint64_t v10 = *a1;
        if (*a1) {
          int v11 = *(_DWORD *)(v10 - 8);
        }
        else {
          int v11 = 0;
        }
        int v12 = 0;
        unsigned int v13 = 9 * ((*v9 + ~(*v9 << 15)) ^ ((*v9 + ~(*v9 << 15)) >> 10));
        unsigned int v14 = ((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) ^ (((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) >> 16);
        do
        {
          unint64_t v7 = v14 & v11;
          unsigned int v14 = ++v12 + v7;
        }
        while (*(_DWORD *)(v10 + 8 * v7) != 0x7FFFFFFF);
        *(void *)(v10 + 8 * v7) = *(void *)v9;
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), (void *)v7);
}

unint64_t WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAE78;
  uint64_t v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAE78;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    unsigned int v8 = *(_DWORD *)a2;
    LOBYTE(v9) = 0;
    char v10 = 0;
    int v2 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v3 = *(WTF::StringImpl **)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      unint64_t v9 = v3;
      char v10 = 1;
    }
    char v11 = 1;
    uint64_t v4 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 16);
    WebKit::AutomationCommandError::toProtocolString((WebKit::AutomationCommandError *)&v12, &v8);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v4, (const WTF::String *)&v12);
    uint64_t result = v12;
    int v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v2) {
          return result;
        }
LABEL_13:
        uint64_t result = v9;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v5);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v2) {
      return result;
    }
    goto LABEL_13;
  }
  unint64_t v7 = *(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 16);

  return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(v7);
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::cancelInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAEA0;
  int v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::cancelInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAEA0;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::cancelInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a2 + 24))
  {
    int v3 = 0;
    unsigned int v10 = *(_DWORD *)a2;
    LOBYTE(v11) = 0;
    char v12 = 0;
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v4 = *(WTF::StringImpl **)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      char v11 = v4;
      int v3 = 1;
      char v12 = 1;
    }
    char v13 = 1;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 24);
    WebKit::AutomationCommandError::toProtocolString((WebKit::AutomationCommandError *)&v14, &v10);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v6, (const WTF::String *)&v14);
    unsigned int v8 = v14;
    unsigned int v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 24));
    int v3 = 0;
  }
  uint64_t result = *(void *)(v5 + 280);
  if (result)
  {
    *(void *)(v5 + 280) = 0;
    uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v7);
  }
  if (v2)
  {
    if (v3)
    {
      uint64_t result = (uint64_t)v11;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          return WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>>::call(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4)
{
  CFRetain(*(CFTypeRef *)(a2 + 8));
  long long v11 = *a3;
  LOBYTE(v12) = *((unsigned char *)a3 + 16);
  uint64_t v7 = *a4;
  *a4 = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v8 = &unk_1EE9FAEF0;
  *(void *)(v8 + 8) = a2;
  *(_OWORD *)(v8 + 16) = v11;
  *(_DWORD *)(v8 + 32) = v12;
  *(void *)(v8 + 40) = v7;
  uint64_t v13 = v8;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate(a2, &v13);
  uint64_t result = v13;
  if (v13)
  {
    unsigned int v10 = *(uint64_t (**)(void))(*(void *)v13 + 8);
    return v10();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator() const(WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAEF0;
  int v2 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator() const(WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAEF0;
  uint64_t v3 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebKit::WebAutomationSession *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator() const(WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::WebPageProxy::takeViewSnapshot(*(void *)(a1 + 8), a1 + 16);
  if (v10)
  {
    WebKit::WebAutomationSession::platformGetBase64EncodedPNGData(v10, &v8);
    int v2 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 40);
    if (!v9)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v7);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v2, (const WTF::String *)&v7);
      uint64_t v5 = v7;
      uint64_t v7 = 0;
      if (!v5) {
        goto LABEL_12;
      }
LABEL_9:
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
      goto LABEL_12;
    }
    Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback::sendSuccess(v2, (const WTF::String *)&v8);
    if (!v9) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 40);
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v8);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v4, (const WTF::String *)&v8);
  }
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  if (v5) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t result = v10;
  unsigned int v10 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::ViewSnapshot>::deref(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WTF::String> &&,WebCore::IntRect &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9FAF18;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WTF::String> &&,WebCore::IntRect &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9FAF18;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WTF::String> &&,WebCore::IntRect &&>::call(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 16);
    uint64_t v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((void *)a2);
    if ((v4 & 0xFF00000000) != 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = 5;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, v8);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)v8);
    uint64_t result = v8[0];
    v8[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
    *(_OWORD *)uint64_t v8 = *a3;
    char v9 = 1;
    return (WTF::StringImpl *)(*(uint64_t (**)(void, uint64_t, WTF::StringImpl **, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v7, v8, a1 + 16);
  }
  return result;
}

void WebKit::WebAutomationSession::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  CFRetain(this[1]);
  int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 != 1576)
  {
    if (v6 != 1575) {
      goto LABEL_60;
    }
    unint64_t v7 = *((void *)a3 + 1);
    uint64_t v8 = *(void *)a3;
    unint64_t v9 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
    if (v7 < v9 || v7 - v9 <= 7)
    {
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v32 = *((void *)a3 + 3);
      if (v32)
      {
        if (v7)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v32 + 16))(v32, v8, v7);
          uint64_t v31 = *(void *)a3;
          unint64_t v30 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v30 = 0;
          uint64_t v31 = 0;
        }
      }
      goto LABEL_53;
    }
    long long v11 = (uint64_t *)(v8 + v9);
    *((void *)a3 + 2) = v11 + 1;
    if (!v8)
    {
      unint64_t v30 = v7;
      uint64_t v31 = 0;
LABEL_53:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v33 = *((void *)a3 + 3);
      if (v33 && v30) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
      }
      goto LABEL_47;
    }
    uint64_t v12 = *v11;
    IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v53);
    if (!v54)
    {
LABEL_47:
      uint64_t v27 = *(void *)a3;
      uint64_t v28 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v29 = *((void *)a3 + 3);
      if (v29 && v28) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
      }
      goto LABEL_60;
    }
    IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v49);
    if (!v50)
    {
      if (v54)
      {
        uint64_t v23 = v53;
        double v53 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2) {
            WTF::StringImpl::destroy(v23, v13);
          }
          else {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
      goto LABEL_47;
    }
    int v14 = v54;
    if (v54)
    {
      uint64_t v43 = v53;
      uint64_t v44 = v49;
      char v45 = 1;
      WebKit::WebAutomationSession::didEvaluateJavaScriptFunction((WebKit::WebAutomationSession *)this, v12, &v43, (const WTF::String *)&v44);
      if (v45)
      {
        unsigned int v16 = v44;
        uint64_t v44 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v15);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        char v26 = v43;
        uint64_t v43 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v15);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
      }
      goto LABEL_60;
    }
    goto LABEL_50;
  }
  unint64_t v17 = *((void *)a3 + 1);
  uint64_t v18 = *(void *)a3;
  unint64_t v19 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
  if (v17 < v19 || v17 - v19 <= 7)
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v36 = *((void *)a3 + 3);
    if (v36)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v36 + 16))(v36, v18, v17);
        uint64_t v35 = *(void *)a3;
        unint64_t v34 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
      }
    }
    goto LABEL_57;
  }
  uint64_t v21 = (uint64_t *)(v18 + v19);
  *((void *)a3 + 2) = v21 + 1;
  if (!v18)
  {
    unint64_t v34 = v17;
    uint64_t v35 = 0;
LABEL_57:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v37 = *((void *)a3 + 3);
    if (v37 && v34) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
    }
    goto LABEL_58;
  }
  uint64_t v22 = *v21;
  IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>((uint64_t *)a3, &v49);
  if (!v52)
  {
LABEL_58:
    LOBYTE(v42) = 0;
    unsigned __int8 v48 = 0;
    goto LABEL_59;
  }
  IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v53);
  int v14 = v54;
  if (!v54)
  {
LABEL_51:
    LOBYTE(v42) = 0;
    goto LABEL_32;
  }
  int v14 = v52;
  if (!v52)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v42 = v22;
  LOBYTE(v43) = 0;
  char v46 = 0;
  if (v51)
  {
    v5.n128_f64[0] = WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v43, (uint64_t)&v49);
    int v14 = 1;
    char v46 = 1;
    int v47 = v53;
  }
  else
  {
    int v47 = v53;
    int v14 = 1;
  }
LABEL_32:
  unsigned __int8 v48 = v14;
  if (v52)
  {
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v49);
    int v14 = v48;
  }
  if (!v14)
  {
LABEL_59:
    uint64_t v38 = *(void *)a3;
    uint64_t v39 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v40 = *((void *)a3 + 3);
    if (!v40) {
      goto LABEL_60;
    }
    if (!v39) {
      goto LABEL_60;
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v40 + 16))(v40, v38, v5);
    if (!v48) {
      goto LABEL_60;
    }
  }
  WebKit::WebAutomationSession::didTakeScreenshot((uint64_t)this, v42, (uint64_t)&v43, &v47);
  if (v48)
  {
    unint64_t v25 = v47;
    int v47 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v24);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v43);
  }
LABEL_60:
  CFTypeRef v41 = this[1];

  CFRelease(v41);
}

void non-virtual thunk to'WebKit::WebAutomationSession::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

WebKit::WebAutomationSessionProxy *WebKit::WebAutomationSessionProxy::WebAutomationSessionProxy(WebKit::WebAutomationSessionProxy *this, const WTF::String *a2)
{
  *(void *)this = &unk_1EE9FAF40;
  *((void *)this + 1) = 0;
  uint64_t v3 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v3 += 2;
  }
  *((void *)this + 2) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::SymbolImpl::create(v8, v4);
  if (*(_DWORD *)v8 == 2) {
    WTF::StringImpl::destroy(v8, v5);
  }
  else {
    *(_DWORD *)v8 -= 2;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  {
    unint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  char v9 = -96;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 48), &v9, (uint64_t)this, (unsigned int **)&v8);
  return this;
}

void WebKit::WebAutomationSessionProxy::~WebAutomationSessionProxy(WebKit::WebAutomationSessionProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9FAF40;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    *((void *)this + 5) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v3, a2);
  }
  {
    uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 48), 0xA0u);
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v5, v4);
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    if (v7)
    {
      uint64_t v8 = v6 + 16;
      do
      {
        if (*(void *)(v8 - 8) != -1)
        {
          char v9 = *(WTF **)v8;
          if (*(void *)v8)
          {
            *(void *)uint64_t v8 = 0;
            *(_DWORD *)(v8 + 8) = 0;
            WTF::fastFree(v9, v4);
          }
        }
        v8 += 32;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), v4);
  }
  unsigned int v10 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v4);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  long long v11 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v4);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebAutomationSessionProxy::~WebAutomationSessionProxy(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebAutomationSessionProxy::scriptObject(WebKit::WebAutomationSessionProxy *this, OpaqueJSContext *a2)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19972D160](v124, *((void *)a2 + 7));
  unint64_t v4 = *((void *)this + 3);
  *(_DWORD *)v4 += 2;
  if (!JSC::JSObject::hasProperty())
  {
    uint64_t v40 = 0;
    goto LABEL_126;
  }
  uint64_t v6 = (JSC::VM *)*((void *)a2 + 7);
  unint64_t v127 = 0xFFFFFFFF00000000;
  LOBYTE(v131) = 0;
  char v132 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  uint64_t v8 = (char *)a2 + 6;
  char v7 = *((unsigned char *)a2 + 6);
  int v129 = 0;
  memset(v130, 0, 13);
  int v128 = a2;
  unint64_t v9 = v4 >> 4;
  uint64_t v10 = (uint64_t)a2;
  if ((v7 & 8) != 0)
  {
LABEL_34:
    int v32 = *(_DWORD *)(v4 + 16);
    if ((v32 & 0x20) == 0)
    {
      uint64_t v33 = *(unsigned char **)(v4 + 8);
      uint64_t v34 = *(unsigned int *)(v4 + 4);
      if ((v32 & 4) != 0)
      {
        if (!v34) {
          goto LABEL_139;
        }
        unsigned int v35 = *v33 - 48;
        if (v35 > 9 || v34 >= 2 && *v33 == 48) {
          goto LABEL_139;
        }
        uint64_t v106 = v34 - 1;
        uint64_t v107 = v33 + 1;
        while (v106)
        {
          if (v35 <= 0x19999999)
          {
            unsigned int v108 = *v107 - 48;
            if (v108 <= 9)
            {
              BOOL v39 = __CFADD__(v108, 10 * v35);
              unsigned int v35 = v108 + 10 * v35;
              --v106;
              ++v107;
              if (!v39) {
                continue;
              }
            }
          }
          goto LABEL_139;
        }
      }
      else
      {
        if (!v34) {
          goto LABEL_139;
        }
        unsigned int v35 = *(unsigned __int16 *)v33 - 48;
        if (v35 > 9 || v34 >= 2 && *(_WORD *)v33 == 48) {
          goto LABEL_139;
        }
        uint64_t v36 = (unsigned __int16 *)(v33 + 2);
        uint64_t v37 = v34 - 1;
        while (v37)
        {
          if (v35 <= 0x19999999)
          {
            unsigned int v38 = *v36 - 48;
            if (v38 <= 9)
            {
              BOOL v39 = __CFADD__(v38, 10 * v35);
              unsigned int v35 = v38 + 10 * v35;
              ++v36;
              --v37;
              if (!v39) {
                continue;
              }
            }
          }
          goto LABEL_139;
        }
      }
      if (v35 != -1)
      {
        unint64_t v111 = v35;
        uint64_t v112 = (JSC::VM *)*((void *)a2 + 7);
        unint64_t v113 = a2;
        while (1)
        {
          uint64_t v114 = 16 * (*(_DWORD *)v113 & 0xFFFFFFFE);
          int v115 = (*(uint64_t (**)(OpaqueJSContext *, OpaqueJSContext *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v114 + 0x4C) + 0x70))(v113, a2, v111, &v125);
          int v116 = v115;
          if (*((_DWORD *)v112 + 20))
          {
            int hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v112);
            if ((hasExceptionsAfterHandlingTraps | v116)) {
              goto LABEL_275;
            }
          }
          else if (v115)
          {
            goto LABEL_113;
          }
          int v117 = BYTE2(v130[1]);
          if (BYTE2(v130[1]) == 3)
          {
            if (BYTE4(v130[1])) {
              goto LABEL_66;
            }
            int v118 = *((unsigned __int8 *)v113 + 5);
            if (v118 == 62)
            {
LABEL_252:
              uint64_t v119 = *(void *)(16 * (*(_DWORD *)v113 & 0xFFFFFFFE) + 0x30);
              if (!v119) {
                uint64_t v119 = *((void *)v113 + 2);
              }
              goto LABEL_254;
            }
          }
          else
          {
            int v118 = *((unsigned __int8 *)v113 + 5);
            if (v118 == 62)
            {
              if (BYTE2(v130[1]) == 1) {
                goto LABEL_66;
              }
              goto LABEL_250;
            }
          }
          if ((v118 - 39) <= 0xB)
          {
            if (JSC::JSArrayBufferView::length(v113) <= v111) {
              goto LABEL_66;
            }
            int v117 = BYTE2(v130[1]);
          }
LABEL_250:
          if ((*(_WORD *)(v114 + 12) & 0x800) == 0 || v117 == 3) {
            goto LABEL_252;
          }
          if ((*(_WORD *)(16 * (*(_DWORD *)v113 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            uint64_t v119 = (*(uint64_t (**)(OpaqueJSContext *, OpaqueJSContext *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v113 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v113, a2);
          }
          else
          {
            uint64_t v119 = *(void *)(16 * (*(_DWORD *)v113 & 0xFFFFFFFE) + 0x30);
            if (!v119) {
              uint64_t v119 = *((void *)v113 + 2);
            }
          }
          if (*((_DWORD *)v112 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v112) & 1) != 0) {
            goto LABEL_66;
          }
LABEL_254:
          if ((v119 & 0xFFFE000000000002) != 0) {
            goto LABEL_66;
          }
          int v48 = 0;
          unint64_t v113 = (OpaqueJSContext *)v119;
          if (*(unsigned __int8 *)(v119 + 5) <= 0x16u) {
            goto LABEL_114;
          }
        }
      }
    }
LABEL_139:
    char v70 = 0;
    goto LABEL_140;
  }
  long long v11 = a2;
  do
  {
    uint64_t v12 = *(_DWORD *)v11 & 0xFFFFFFFE;
    uint64_t v13 = 16 * v12;
    if (!v9) {
      goto LABEL_26;
    }
    if ((v9 & ~*(_DWORD *)(16 * v12 + 0x20)) != 0) {
      goto LABEL_26;
    }
    uint64_t v14 = JSC::Structure::ensurePropertyTableIfNotEmpty(v13);
    if (!v14 || !*(_DWORD *)(v14 + 24)) {
      goto LABEL_26;
    }
    uint64_t v15 = *(void *)(v14 + 16);
    unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v17 = *(unsigned int *)(v14 + 8);
    unsigned int v18 = *(_DWORD *)(v4 + 16);
    if (v15)
    {
      if ((v18 & 0x20) != 0) {
        unsigned int v18 = *(_DWORD *)(v4 + 32);
      }
      unsigned int v25 = *(_DWORD *)(v14 + 12);
      uint64_t v26 = (v18 >> 8) & *(void *)&v25;
      int v27 = *(unsigned __int8 *)(v16 + v26);
      if (!*(unsigned char *)(v16 + v26)) {
        goto LABEL_26;
      }
      uint64_t v28 = v16 + v17;
      int v29 = 1;
      while (1)
      {
        unint64_t v30 = *(void *)(v28 + 8 * (v27 - 1));
        if (v4 == (v30 & 0xFFFFFFFFFFFFLL)) {
          break;
        }
        uint64_t v26 = (v26 + v29) & v25;
        int v27 = *(unsigned __int8 *)(v16 + v26);
        ++v29;
        if (!*(unsigned char *)(v16 + v26)) {
          goto LABEL_26;
        }
      }
      unint64_t v31 = (v30 >> 16) & 0xFF00000000 | HIBYTE(v30);
    }
    else
    {
      if ((v18 & 0x20) != 0) {
        unsigned int v18 = *(_DWORD *)(v4 + 32);
      }
      int v19 = *(_DWORD *)(v14 + 12);
      unsigned int v20 = v19 & (v18 >> 8);
      int v21 = *(_DWORD *)(v16 + 4 * v20);
      if (!v21) {
        goto LABEL_26;
      }
      unint64_t v22 = v16 + 4 * v17;
      int v23 = 1;
      while (1)
      {
        uint64_t v24 = (v21 - 1);
        if (*(void *)(v22 + 16 * v24) == v4) {
          break;
        }
        unsigned int v20 = (v20 + v23) & v19;
        int v21 = *(_DWORD *)(v16 + 4 * v20);
        ++v23;
        if (!v21) {
          goto LABEL_26;
        }
      }
      unint64_t v31 = *(unsigned int *)(v22 + 16 * v24 + 8) | ((unint64_t)*(unsigned __int8 *)(v22 + 16 * v24 + 12) << 32);
    }
    if (v31 != -1)
    {
      unint64_t v52 = HIDWORD(v31);
      if ((int)v31 > 63)
      {
        uint64_t v53 = *((void *)v11 + 1) - 8;
        uint64_t v54 = 0x3F00000000 - (v31 << 32);
      }
      else
      {
        uint64_t v53 = (uint64_t)v11 + 16;
        uint64_t v54 = v31 << 32;
      }
      uint64_t v65 = *(void *)(v53 + (v54 >> 29));
      if ((v65 & 0xFFFE000000000002) == 0)
      {
        int v66 = *(unsigned __int8 *)(v65 + 5);
        if (v66 == 6)
        {
          int v71 = *(_DWORD *)(v13 + 16) & 3;
          uint64_t v72 = *(void *)(v65 + 16);
          if (MEMORY[0x1E4F30950] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C))
          {
            uint64_t v125 = *(void *)(v65 + 8);
            uint64_t v126 = v72;
            LODWORD(v127) = HIDWORD(v31);
            int v129 = v11;
            goto LABEL_133;
          }
          uint64_t v104 = *(void *)(v65 + 24);
          uint64_t v103 = *(void *)(v65 + 32);
          uint64_t v125 = *(void *)(v65 + 8);
          uint64_t v126 = v72;
          LODWORD(v127) = HIDWORD(v31);
          int v129 = v11;
LABEL_220:
          BYTE1(v130[1]) = 3;
          int v48 = 1;
          if (v71 != 2) {
            LOBYTE(v130[1]) = 1;
          }
          BYTE3(v130[1]) = 1;
          uint64_t v133 = v104;
          uint64_t v134 = v103;
          goto LABEL_114;
        }
        if (v66 == 5)
        {
LABEL_112:
          JSC::JSObject::fillGetterPropertySlot();
LABEL_113:
          int v48 = 1;
          goto LABEL_114;
        }
      }
      uint64_t v125 = v65;
      int v129 = v11;
      goto LABEL_109;
    }
LABEL_26:
    if (*v8 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot()) {
      goto LABEL_113;
    }
    uint64_t v10 = *(void *)(v13 + 48);
    if (!v10) {
      uint64_t v10 = *((void *)v11 + 2);
    }
    if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) < 0x17u)
    {
      if (!v4) {
        goto LABEL_66;
      }
      int v41 = *(_DWORD *)(v4 + 16);
      if ((v41 & 0x20) != 0) {
        goto LABEL_66;
      }
      uint64_t v42 = *(_WORD **)(v4 + 8);
      uint64_t v43 = *(unsigned int *)(v4 + 4);
      if ((v41 & 4) == 0)
      {
        if (v43)
        {
          unsigned int v44 = (unsigned __int16)*v42 - 48;
          if (v44 <= 9 && (v43 < 2 || *v42 != 48))
          {
            char v45 = v42 + 1;
            uint64_t v46 = v43 - 1;
            while (v46)
            {
              if (v44 > 0x19999999) {
                goto LABEL_66;
              }
              unsigned int v47 = *v45 - 48;
              if (v47 > 9) {
                goto LABEL_66;
              }
              int v48 = 0;
              BOOL v39 = __CFADD__(v47, 10 * v44);
              unsigned int v44 = v47 + 10 * v44;
              ++v45;
              --v46;
              if (v39) {
                goto LABEL_114;
              }
            }
            goto LABEL_76;
          }
        }
        goto LABEL_66;
      }
      if (!v43) {
        goto LABEL_66;
      }
      unsigned int v44 = *(unsigned __int8 *)v42 - 48;
      if (v44 > 9 || v43 >= 2 && *(unsigned char *)v42 == 48) {
        goto LABEL_66;
      }
      uint64_t v49 = (unsigned __int8 *)v42 + 1;
      uint64_t v50 = v43 - 1;
      while (v50)
      {
        if (v44 > 0x19999999) {
          goto LABEL_66;
        }
        unsigned int v51 = *v49 - 48;
        if (v51 > 9) {
          goto LABEL_66;
        }
        int v48 = 0;
        BOOL v39 = __CFADD__(v51, 10 * v44);
        unsigned int v44 = v51 + 10 * v44;
        ++v49;
        --v50;
        if (v39) {
          goto LABEL_114;
        }
      }
LABEL_76:
      if (v44 == -1)
      {
LABEL_66:
        int v48 = 0;
        goto LABEL_114;
      }
      unint64_t v55 = v44;
      char v56 = (JSC::VM *)*((void *)a2 + 7);
      char v57 = a2;
      while (2)
      {
        uint64_t v58 = 16 * (*(_DWORD *)v57 & 0xFFFFFFFE);
        int v59 = (*(uint64_t (**)(OpaqueJSContext *, OpaqueJSContext *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v58 + 0x4C) + 0x70))(v57, a2, v55, &v125);
        int v60 = v59;
        if (*((_DWORD *)v56 + 20))
        {
          int hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v56);
          if ((hasExceptionsAfterHandlingTraps | v60))
          {
LABEL_275:
            int v48 = hasExceptionsAfterHandlingTraps ^ 1;
            goto LABEL_114;
          }
        }
        else if (v59)
        {
          goto LABEL_113;
        }
        int v61 = BYTE2(v130[1]);
        if (BYTE2(v130[1]) == 3)
        {
          if (BYTE4(v130[1])) {
            goto LABEL_66;
          }
          int v62 = *((unsigned __int8 *)v57 + 5);
          if (v62 == 62)
          {
LABEL_92:
            uint64_t v63 = *(void *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
            if (!v63) {
              uint64_t v63 = *((void *)v57 + 2);
            }
            goto LABEL_94;
          }
LABEL_87:
          if ((v62 - 39) <= 0xB)
          {
            if (JSC::JSArrayBufferView::length(v57) <= v55) {
              goto LABEL_66;
            }
            int v61 = BYTE2(v130[1]);
          }
        }
        else
        {
          int v62 = *((unsigned __int8 *)v57 + 5);
          if (v62 != 62) {
            goto LABEL_87;
          }
          if (BYTE2(v130[1]) == 1) {
            goto LABEL_66;
          }
        }
        if ((*(_WORD *)(v58 + 12) & 0x800) == 0 || v61 == 3) {
          goto LABEL_92;
        }
        if ((*(_WORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          uint64_t v63 = (*(uint64_t (**)(OpaqueJSContext *, OpaqueJSContext *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v57, a2);
        }
        else
        {
          uint64_t v63 = *(void *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
          if (!v63) {
            uint64_t v63 = *((void *)v57 + 2);
          }
        }
        if (*((_DWORD *)v56 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) != 0) {
          goto LABEL_66;
        }
LABEL_94:
        if ((v63 & 0xFFFE000000000002) != 0) {
          goto LABEL_66;
        }
        int v48 = 0;
        char v57 = (OpaqueJSContext *)v63;
        if (*(unsigned __int8 *)(v63 + 5) <= 0x16u) {
          goto LABEL_114;
        }
        continue;
      }
    }
    uint64_t v8 = (unsigned char *)(v10 + 6);
    long long v11 = (OpaqueJSContext *)v10;
  }
  while ((*(unsigned char *)(v10 + 6) & 8) == 0);
  if (v4) {
    goto LABEL_34;
  }
  char v70 = 1;
LABEL_140:
  uint64_t v73 = (JSC::VM *)*((void *)a2 + 7);
  while (2)
  {
    uint64_t v74 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    if ((*(unsigned char *)(v10 + 6) & 8) != 0)
    {
      int v93 = (*(uint64_t (**)(uint64_t, OpaqueJSContext *, unint64_t, uint64_t *))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x68))(v10, a2, v4, &v125);
      int v94 = v93;
      if (*((_DWORD *)v73 + 20))
      {
        int hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v73);
        if ((hasExceptionsAfterHandlingTraps | v94)) {
          goto LABEL_275;
        }
      }
      else if (v93)
      {
        goto LABEL_113;
      }
      if (BYTE2(v130[1]) == 3)
      {
        if (BYTE4(v130[1])) {
          goto LABEL_66;
        }
        int v95 = *(unsigned __int8 *)(v10 + 5);
        if (v95 == 62) {
          goto LABEL_166;
        }
      }
      else
      {
        int v95 = *(unsigned __int8 *)(v10 + 5);
        if (v95 == 62)
        {
          if (BYTE2(v130[1]) == 1) {
            goto LABEL_66;
          }
          goto LABEL_166;
        }
      }
      if ((v95 - 51) < 0xFFFFFFF4) {
        char v96 = 1;
      }
      else {
        char v96 = v70;
      }
      if (v96) {
        goto LABEL_166;
      }
      unsigned int v97 = *(_DWORD *)(v4 + 16);
      if ((v97 & 0x20) != 0) {
        goto LABEL_166;
      }
      uint64_t v98 = *(unsigned int *)(v4 + 4);
      if (!v98) {
        goto LABEL_166;
      }
      unsigned int v99 = *(unsigned __int8 **)(v4 + 8);
      if ((v97 & 4) != 0)
      {
        int v100 = *v99;
        if (v98 != 1)
        {
          if (v100 == 45)
          {
            int v101 = v99[1];
LABEL_203:
            if ((v101 - 48) >= 0xA)
            {
              if (v98 != 9 || v101 != 73) {
                goto LABEL_166;
              }
            }
            else if (v98 == 2)
            {
              goto LABEL_66;
            }
LABEL_214:
            unint64_t v123 = v123 & 0xFFFFFF0000000000 | v98 | ((unint64_t)((v97 >> 2) & 1) << 32);
            JSC::jsToNumber();
            uint64_t v102 = WTF::numberToStringAndSize();
            if (MEMORY[0x19972E990](v4, v135, v102)) {
              goto LABEL_66;
            }
            goto LABEL_166;
          }
LABEL_206:
          if ((v100 - 48) >= 0xA && (v98 != 8 || v100 != 73) && (v98 != 3 || v100 != 78)) {
            goto LABEL_166;
          }
          goto LABEL_214;
        }
      }
      else
      {
        int v100 = *(unsigned __int16 *)v99;
        if (v98 != 1)
        {
          if (v100 == 45)
          {
            int v101 = *((unsigned __int16 *)v99 + 1);
            goto LABEL_203;
          }
          goto LABEL_206;
        }
      }
      if ((v100 - 48) < 0xA) {
        goto LABEL_66;
      }
      goto LABEL_166;
    }
    if (!v9) {
      goto LABEL_164;
    }
    if ((v9 & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) != 0) {
      goto LABEL_164;
    }
    uint64_t v75 = JSC::Structure::ensurePropertyTableIfNotEmpty(16 * (*(_DWORD *)v10 & 0xFFFFFFFE));
    if (!v75 || !*(_DWORD *)(v75 + 24)) {
      goto LABEL_164;
    }
    uint64_t v76 = *(void *)(v75 + 16);
    unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v78 = *(unsigned int *)(v75 + 8);
    unsigned int v79 = *(_DWORD *)(v4 + 16);
    if ((v76 & 1) == 0)
    {
      if ((v79 & 0x20) != 0) {
        unsigned int v79 = *(_DWORD *)(v4 + 32);
      }
      int v80 = *(_DWORD *)(v75 + 12);
      unsigned int v81 = v80 & (v79 >> 8);
      int v82 = *(_DWORD *)(v77 + 4 * v81);
      if (v82)
      {
        unint64_t v83 = v77 + 4 * v78;
        int v84 = 1;
        while (1)
        {
          uint64_t v85 = (v82 - 1);
          if (*(void *)(v83 + 16 * v85) == v4) {
            break;
          }
          unsigned int v81 = (v81 + v84) & v80;
          int v82 = *(_DWORD *)(v77 + 4 * v81);
          ++v84;
          if (!v82) {
            goto LABEL_164;
          }
        }
        unint64_t v31 = *(unsigned int *)(v83 + 16 * v85 + 8) | ((unint64_t)*(unsigned __int8 *)(v83 + 16 * v85 + 12) << 32);
        goto LABEL_163;
      }
      goto LABEL_164;
    }
    if ((v79 & 0x20) != 0) {
      unsigned int v79 = *(_DWORD *)(v4 + 32);
    }
    unsigned int v86 = *(_DWORD *)(v75 + 12);
    uint64_t v87 = (v79 >> 8) & *(void *)&v86;
    int v88 = *(unsigned __int8 *)(v77 + v87);
    if (!*(unsigned char *)(v77 + v87)) {
      goto LABEL_164;
    }
    uint64_t v89 = v77 + v78;
    int v90 = 1;
    while (1)
    {
      unint64_t v91 = *(void *)(v89 + 8 * (v88 - 1));
      if (v4 == (v91 & 0xFFFFFFFFFFFFLL)) {
        break;
      }
      uint64_t v87 = (v87 + v90) & v86;
      int v88 = *(unsigned __int8 *)(v77 + v87);
      ++v90;
      if (!*(unsigned char *)(v77 + v87)) {
        goto LABEL_164;
      }
    }
    unint64_t v31 = (v91 >> 16) & 0xFF00000000 | HIBYTE(v91);
LABEL_163:
    if (v31 == -1)
    {
LABEL_164:
      if (*(unsigned char *)(v10 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot()) {
        goto LABEL_113;
      }
LABEL_166:
      if ((*(_WORD *)(v74 + 12) & 0x800) != 0 && BYTE2(v130[1]) != 3)
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          uint64_t v92 = (*(uint64_t (**)(uint64_t, OpaqueJSContext *))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0xB0))(v10, a2);
        }
        else
        {
          uint64_t v92 = *(void *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
          if (!v92) {
            uint64_t v92 = *(void *)(v10 + 16);
          }
        }
        if (*((_DWORD *)v73 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v73) & 1) != 0) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v92 = *(void *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
        if (!v92) {
          uint64_t v92 = *(void *)(v10 + 16);
        }
      }
      if ((v92 & 0xFFFE000000000002) != 0) {
        goto LABEL_66;
      }
      int v48 = 0;
      uint64_t v10 = v92;
      if (*(unsigned __int8 *)(v92 + 5) <= 0x16u) {
        goto LABEL_114;
      }
      continue;
    }
    break;
  }
  unint64_t v52 = HIDWORD(v31);
  if ((int)v31 > 63)
  {
    uint64_t v109 = *(void *)(v10 + 8) - 8;
    uint64_t v110 = 0x3F00000000 - (v31 << 32);
  }
  else
  {
    uint64_t v109 = v10 + 16;
    uint64_t v110 = v31 << 32;
  }
  uint64_t v120 = *(void *)(v109 + (v110 >> 29));
  if ((v120 & 0xFFFE000000000002) == 0)
  {
    int v121 = *(unsigned __int8 *)(v120 + 5);
    if (v121 != 6)
    {
      if (v121 != 5) {
        goto LABEL_268;
      }
      goto LABEL_112;
    }
    int v71 = *(_DWORD *)(v74 + 16) & 3;
    uint64_t v122 = *(void *)(v120 + 16);
    if (MEMORY[0x1E4F30950] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v120 & 0xFFFFFFFE) + 0x4C))
    {
      uint64_t v125 = *(void *)(v120 + 8);
      uint64_t v126 = v122;
      LODWORD(v127) = HIDWORD(v31);
      int v129 = (OpaqueJSContext *)v10;
LABEL_133:
      int v48 = 1;
      BYTE1(v130[1]) = 3;
      if (v71 != 2) {
        LOBYTE(v130[1]) = 1;
      }
      goto LABEL_114;
    }
    uint64_t v104 = *(void *)(v120 + 24);
    uint64_t v103 = *(void *)(v120 + 32);
    uint64_t v125 = *(void *)(v120 + 8);
    uint64_t v126 = v122;
    LODWORD(v127) = HIDWORD(v31);
    int v129 = (OpaqueJSContext *)v10;
    goto LABEL_220;
  }
LABEL_268:
  uint64_t v125 = v120;
  int v129 = (OpaqueJSContext *)v10;
LABEL_109:
  unint64_t v127 = __PAIR64__(v31, v52);
  int v48 = 1;
  LOWORD(v130[1]) = 257;
LABEL_114:
  if (*((_DWORD *)v6 + 20))
  {
    char v105 = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    uint64_t v40 = 10;
    if (v105 & 1) != 0 || ((v48 ^ 1)) {
      goto LABEL_123;
    }
LABEL_116:
    if (BYTE1(v130[1]) == 2)
    {
      uint64_t v67 = JSC::PropertySlot::functionGetter();
    }
    else
    {
      if (BYTE1(v130[1]) == 1)
      {
        uint64_t v40 = v125;
        goto LABEL_123;
      }
      uint64_t v67 = JSC::PropertySlot::customGetter();
    }
    uint64_t v40 = v67;
    goto LABEL_123;
  }
  if (v48) {
    goto LABEL_116;
  }
  uint64_t v40 = 10;
LABEL_123:
  if (v132)
  {
    int v68 = *(_DWORD *)(v131 + 4);
    if (!v68)
    {
      __break(0xC471u);
      JUMPOUT(0x1992550C8);
    }
    *(_DWORD *)(v131 + 4) = v68 - 1;
  }
LABEL_126:
  if (*(_DWORD *)v4 == 2) {
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v5);
  }
  else {
    *(_DWORD *)v4 -= 2;
  }
  MEMORY[0x19972D170](v124);
  return v40;
}

JSValueRef WebKit::evaluate(JSContextRef ctx, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSValueRef *exception, const OpaqueJSValue **a7)
{
  if (a4 == (OpaqueJSValue *)1)
  {
    unint64_t v9 = JSValueToStringCopy(ctx, *a5, exception);
    JSValueRef v10 = JSEvaluateScript(ctx, v9, 0, 0, 0, exception);
    if (v9) {
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v9);
    }
    return v10;
  }
  else
  {
    return JSValueMakeUndefined(ctx);
  }
}

JSValueRef WebKit::createUUID(WebKit *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  WTF::createVersion4UUIDString((uint64_t *)&v15, this);
  WTF::String::convertToASCIIUppercase((uint64_t *)&v16, (WTF::String *)&v15);
  OpaqueJSString::tryCreate((uint64_t *)&string, (OpaqueJSString *)&v16, v8);
  JSValueRef v10 = JSValueMakeString(this, string);
  long long v11 = (unsigned int *)string;
  JSStringRef string = 0;
  if (v11) {
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v11);
  }
  uint64_t v12 = v16;
  unint64_t v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v10;
}

JSValueRef WebKit::isValidNodeIdentifier(JSContextRef ctx, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSValueRef *exception, const OpaqueJSValue **a7)
{
  if (a4 == (OpaqueJSValue *)1)
  {
    uint64_t v8 = JSValueToStringCopy(ctx, *a5, exception);
    OpaqueJSString::string((uint64_t *)&v15, v8);
    BOOL isValidNodeHandle = WebKit::isValidNodeHandle(v15, v9);
    JSValueRef Boolean = JSValueMakeBoolean(ctx, isValidNodeHandle);
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        if (!v8) {
          return Boolean;
        }
        goto LABEL_6;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v8) {
      return Boolean;
    }
LABEL_6:
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v8);
    return Boolean;
  }

  return JSValueMakeUndefined(ctx);
}

JSObjectRef WebKit::WebAutomationSessionProxy::elementForNodeHandle(WebKit::WebAutomationSessionProxy *this, WebKit::WebFrame *a2, const WTF::String *a3)
{
  arguments[1] = *(JSValueRef *)MEMORY[0x1E4F143B8];
  uint64_t v5 = (OpaqueJSContext *)WebKit::WebFrame::jsContext(a2);
  JSObjectRef result = (JSObjectRef)WebKit::WebAutomationSessionProxy::scriptObject(this, v5);
  if (result)
  {
    uint64_t v8 = result;
    OpaqueJSString::tryCreate((uint64_t *)&string, a3, v7);
    unint64_t v9 = JSValueMakeString(v5, string);
    JSValueRef v10 = (unsigned int *)string;
    JSStringRef string = 0;
    if (v10) {
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v10);
    }
    arguments[0] = v9;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    OpaqueJSString::tryCreate((uint64_t *)&string, (OpaqueJSString *)&v17, v11);
    Property = JSObjectGetProperty(v5, v8, string, 0);
    uint64_t v13 = (unsigned int *)string;
    JSStringRef string = 0;
    if (v13) {
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v13);
    }
    uint64_t v15 = JSObjectCallAsFunction(v5, Property, v8, 1uLL, arguments, 0);
    unint64_t v16 = v17;
    uint64_t v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    JSObjectRef result = JSValueToObject(v5, v15, 0);
    if (result)
    {
      if (*((unsigned __int8 *)result + 5) == 241) {
        return (JSObjectRef)*((void *)result + 3);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WebKit::WebAutomationSessionProxy::getAccessibilityObjectForNode(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, const WTF::String *a4, WTF::StringImpl **a5)
{
  {
    unint64_t v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v31);
  }
  unsigned int v35 = a2;
  uint64_t v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v35);
  if (!v9)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v35);
    uint64_t v15 = *a5;
    *a5 = v35;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    return 0;
  }
  if (*(unsigned char *)(a3 + 16))
  {
    {
      int v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v32);
    }
    uint64_t v10 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
    if (!v10) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 88);
    if (!v10)
    {
LABEL_6:
      LOBYTE(v11) = 1;
      goto LABEL_7;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v10 + 16), v10);
  uint64_t v10 = *(void *)(v10 + 16);
  LOBYTE(v11) = 1;
  if (v10)
  {
    atomic_fetch_add((atomic_uint *volatile)v10, 1u);
    long long v11 = *(WebKit::WebFrame **)(v10 + 8);
    if (v11)
    {
      uint64_t v17 = *((void *)v11 + 3);
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 8);
        if (v18)
        {
          if (!*(unsigned char *)(v18 + 144) && *(void *)(v18 + 288))
          {
            if (WebKit::isValidNodeHandle(*(WebKit **)a4, v16))
            {
              JSObjectRef v21 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v11, a4);
              if (v21)
              {
                JSObjectRef v22 = v21;
                *((_DWORD *)v21 + 7) += 2;
                unsigned __int8 v23 = atomic_load(MEMORY[0x1E4FB64B0]);
                if ((v23 & 1) == 0) {
                  atomic_store(1u, MEMORY[0x1E4FB64B0]);
                }
                uint64_t v24 = WebCore::Document::axObjectCache(*(WebCore::Document **)(*((void *)v21 + 6) + 8));
                if (v24)
                {
                  uint64_t v25 = v24;
                  ++*(_DWORD *)(v24 + 8);
                  WebCore::AXObjectCache::performDeferredCacheUpdate();
                  uint64_t v26 = WebCore::AXObjectCache::getOrCreate();
                  if (v26)
                  {
                    uint64_t v19 = v26;
                    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v26 + 8));
                    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::AXCoreObject,(WTF::DestructionThread)0>(*(atomic_uchar **)(v19 + 8), v27);
                    int v28 = *(_DWORD *)(v25 + 8);
                    if (v28)
                    {
                      *(_DWORD *)(v25 + 8) = v28 - 1;
LABEL_36:
                      if (*((_DWORD *)v22 + 7) == 2)
                      {
                        if ((*((_WORD *)v22 + 17) & 0x400) == 0) {
                          WebCore::Node::removedLastRef(v22);
                        }
                      }
                      else
                      {
                        *((_DWORD *)v22 + 7) -= 2;
                      }
                      goto LABEL_22;
                    }
LABEL_54:
                    __break(0xC471u);
                    JUMPOUT(0x199255A04);
                  }
                  int v33 = *(_DWORD *)(v25 + 8);
                  if (!v33) {
                    goto LABEL_54;
                  }
                  *(_DWORD *)(v25 + 8) = v33 - 1;
                }
                Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v35);
                uint64_t v34 = *a5;
                *a5 = v35;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2) {
                    WTF::StringImpl::destroy(v34, v12);
                  }
                  else {
                    *(_DWORD *)v34 -= 2;
                  }
                }
                uint64_t v19 = 0;
                goto LABEL_36;
              }
              uint64_t v29 = 11;
            }
            else
            {
              uint64_t v29 = 12;
            }
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v29, &v35);
            unint64_t v30 = *a5;
            *a5 = v35;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2) {
                WTF::StringImpl::destroy(v30, v12);
              }
              else {
                *(_DWORD *)v30 -= 2;
              }
            }
            uint64_t v19 = 0;
            goto LABEL_22;
          }
        }
      }
      LOBYTE(v11) = 0;
    }
  }
LABEL_7:
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v35);
  uint64_t v13 = *a5;
  *a5 = v35;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v19 = 0;
  if ((v11 & 1) == 0)
  {
LABEL_22:
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v10);
      WTF::fastFree((WTF *)v10, v12);
    }
  }
  return v19;
}

BOOL WebKit::isValidNodeHandle(WebKit *this, const WTF::String *a2)
{
  if (!this || *((_DWORD *)this + 1) != 41) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 4);
  uint64_t v3 = *((void *)this + 1);
  if ((v2 & 4) != 0)
  {
    if (*(unsigned char *)v3 != 110 || *(unsigned char *)(v3 + 1) != 111 || *(unsigned char *)(v3 + 2) != 100) {
      return 0;
    }
    int v4 = *(unsigned __int8 *)(v3 + 3);
  }
  else
  {
    if (*(_WORD *)v3 != 110 || *(_WORD *)(v3 + 2) != 111 || *(_WORD *)(v3 + 4) != 100) {
      return 0;
    }
    int v4 = *(unsigned __int16 *)(v3 + 6);
  }
  if (v4 == 101)
  {
    BOOL v5 = 0;
    unint64_t v6 = 4;
    while (1)
    {
      if (v6 <= 0x1C && ((1 << v6) & 0x10842010) != 0)
      {
        if ((v2 & 4) != 0) {
          int v7 = *(unsigned __int8 *)(v3 + v6);
        }
        else {
          int v7 = *(unsigned __int16 *)(v3 + 2 * v6);
        }
        if (v7 != 45) {
          return v5;
        }
      }
      else
      {
        if ((v2 & 4) != 0)
        {
          unsigned int v8 = *(unsigned __int8 *)(v3 + v6);
          if (v8 < 0x30) {
            return v5;
          }
          if (v8 < 0x3A) {
            goto LABEL_15;
          }
          if (v8 < 0x41) {
            return v5;
          }
        }
        else
        {
          unsigned int v8 = *(unsigned __int16 *)(v3 + 2 * v6);
          if (v8 - 48 < 0xA) {
            goto LABEL_15;
          }
          if (v8 <= 0x40) {
            return v5;
          }
        }
        if (v8 > 0x46) {
          return v5;
        }
      }
LABEL_15:
      BOOL v5 = v6++ > 0x27;
      if (v6 == 41) {
        return v5;
      }
    }
  }
  return 0;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::didClearWindowObjectForFrame(WebKit::WebAutomationSessionProxy *this, WebKit::WebFrame *a2)
{
  return WebKit::WebAutomationSessionProxy::willDestroyGlobalObjectForFrame((uint64_t)this, *((void *)a2 + 10), *((void *)a2 + 11));
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::willDestroyGlobalObjectForFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  int v4 = (uint64_t *)(a1 + 40);
  if (!WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(*(void *)(a1 + 40), &v39))goto LABEL_32; {
  uint64_t v5 = *v4;
  }
  if (!*v4) {
    goto LABEL_32;
  }
  int v6 = *(_DWORD *)(v5 - 8);
  LODWORD(v36[0]) = -1640531527;
  WORD2(v36[0]) = 0;
  BYTE6(v36[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)v36, &v39);
  unsigned int v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v36) & v6;
  uint64_t v9 = (uint64_t *)(v5 + 24 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (*v9 == v39 && v11 == v40)
  {
LABEL_14:
    uint64_t v15 = *v4;
    if (!*v4)
    {
LABEL_19:
      if ((uint64_t *)v15 != v9)
      {
        *uint64_t v9 = -1;
        v9[1] = -1;
        uint64_t v16 = v9[2];
        void v9[2] = 0;
        if (v16) {
          WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)(v16 + 16), v7);
        }
        ++*(_DWORD *)(*v4 - 16);
        uint64_t v17 = *v4;
        if (*v4) {
          int v18 = *(_DWORD *)(v17 - 12) - 1;
        }
        else {
          int v18 = -1;
        }
        *(_DWORD *)(v17 - 12) = v18;
        uint64_t v19 = *v4;
        if (*v4)
        {
          unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
          unsigned int v21 = *(_DWORD *)(v19 - 4);
          if (v20 < v21 && v21 >= 9) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(v4, v21 >> 1);
          }
        }
      }
      goto LABEL_32;
    }
LABEL_18:
    v15 += 24 * *(unsigned int *)(v15 - 4);
    if ((uint64_t *)v15 == v9) {
      goto LABEL_32;
    }
    goto LABEL_19;
  }
  int v13 = 1;
  while (v10 | v11)
  {
    unsigned int v8 = (v8 + v13) & v6;
    uint64_t v9 = (uint64_t *)(v5 + 24 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    ++v13;
    if (*v9 == v39 && v11 == v40) {
      goto LABEL_14;
    }
  }
  uint64_t v15 = *v4;
  if (*v4)
  {
    uint64_t v9 = (uint64_t *)(v15 + 24 * *(unsigned int *)(v15 - 4));
    goto LABEL_18;
  }
LABEL_32:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v37);
  unsigned __int8 v23 = (uint64_t *)(a1 + 32);
  uint64_t v24 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a1 + 32), &v39);
  uint64_t v25 = v24;
  uint64_t v26 = *(uint64_t **)(a1 + 32);
  if (v26) {
    v26 += 4 * *((unsigned int *)v26 - 1);
  }
  if (v26 != v24)
  {
    int v27 = (WTF *)v24[2];
    uint64_t v28 = *((unsigned int *)v24 + 7);
    void v24[2] = 0;
    v24[3] = 0;
    if (*v23)
    {
      uint64_t v29 = *v23 + 32 * *(unsigned int *)(*v23 - 4);
      if ((uint64_t *)v29 == v24) {
        goto LABEL_42;
      }
    }
    else
    {
      if (!v24)
      {
LABEL_42:
        if (v28)
        {
          uint64_t v30 = 8 * v28;
          unint64_t v31 = (uint64_t *)v27;
          do
          {
            {
              int v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              WebKit::WebProcess::WebProcess(v33);
            }
            uint64_t v32 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
            v36[0] = *v31;
            v36[1] = (uint64_t)&v38;
            v36[2] = (uint64_t)&v37;
            IPC::Connection::send<Messages::WebAutomationSession::DidEvaluateJavaScriptFunction>(v32, v36);
            ++v31;
            v30 -= 8;
          }
          while (v30);
        }
        if (v27) {
          WTF::fastFree(v27, v25);
        }
        goto LABEL_50;
      }
      uint64_t v29 = 0;
    }
    if ((uint64_t *)v29 != v24) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v23, v24);
    }
    goto LABEL_42;
  }
LABEL_50:
  uint64_t v34 = v37;
  uint64_t v37 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v25);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  JSObjectRef result = v38;
  unsigned int v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebAutomationSession::DidEvaluateJavaScriptFunction>(uint64_t a1, uint64_t *a2)
{
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 1575;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  uint64_t v5 = *a2;
  int v6 = (void *)IPC::Encoder::grow(v4, 8uLL, 8);
  if (v7 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *int v6 = v5;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)a2[1]);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)a2[2]);
    IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::evaluateJavaScriptFunction(uint64_t *a1, OpaqueJSString *a2, uint64_t a3, OpaqueJSString *a4, uint64_t a5, BOOL a6, BOOL a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, OpaqueJSString *a19)
{
  uint64_t v17 = a19;
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  {
    int v138 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v138);
  }
  script[0] = a2;
  uint64_t v18 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), script);
  if (!v18)
  {
    {
      int v141 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v141);
    }
    uint64_t v20 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    arguments[0] = 0;
    uint64_t v21 = 9;
    goto LABEL_58;
  }
  if (*(unsigned char *)(a3 + 16))
  {
    {
      int v140 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v140);
    }
    uint64_t v19 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
    if (!v19) {
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v19 = *(void *)(v18 + 88);
    if (!v19)
    {
LABEL_56:
      {
        int v139 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v139);
      }
      uint64_t v20 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      arguments[0] = 0;
      uint64_t v21 = 10;
LABEL_58:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v21, v146);
      script[0] = v17;
      script[1] = (JSStringRef)arguments;
      v148[0] = v146;
      IPC::Connection::send<Messages::WebAutomationSession::DidEvaluateJavaScriptFunction>(v20, (uint64_t *)script);
      uint64_t v58 = v146[0];
      v146[0] = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v57);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
      uint64_t result = arguments[0];
      arguments[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v57);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      return result;
    }
  }
  uint64_t v22 = *(void *)(v19 + 24);
  if (v22 && (unsigned __int8 v23 = *(WebCore::LocalFrame **)(v22 + 8)) != 0)
  {
    if (*((unsigned char *)v23 + 144)) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v23;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  if (!WebCore::LocalFrame::window(v24)) {
    goto LABEL_56;
  }
  uint64_t v25 = *(void *)(v19 + 24);
  if (v25 && (uint64_t v26 = *(void *)(v25 + 8)) != 0) {
    int v27 = *(unsigned char *)(v26 + 144) ? 0 : (WebCore::LocalFrame *)v26;
  }
  else {
    int v27 = 0;
  }
  uint64_t v28 = (WebCore::LocalDOMWindow *)WebCore::LocalFrame::window(v27);
  if (!WebCore::LocalDOMWindow::frame(v28)) {
    goto LABEL_56;
  }
  uint64_t v29 = *(void *)(v19 + 24);
  BOOL v143 = a6;
  if (v29)
  {
    uint64_t v30 = *(WebCore::LocalFrame **)(v29 + 8);
    if (*((unsigned char *)v30 + 144)) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *(void *)(v29 + 8);
    }
    if (*(void *)(*(void *)(v31 + 128) + 8) == v31) {
      goto LABEL_78;
    }
  }
  else
  {
    if (!*(void *)(MEMORY[0x80] + 8)) {
      goto LABEL_78;
    }
    uint64_t v30 = 0;
  }
  if (WebCore::LocalFrame::window(v30))
  {
    uint64_t v32 = *(void *)(v19 + 24);
    if (v32 && (uint64_t v33 = *(void *)(v32 + 8)) != 0) {
      uint64_t v34 = *(unsigned char *)(v33 + 144) ? 0 : (WebCore::LocalFrame *)v33;
    }
    else {
      uint64_t v34 = 0;
    }
    unsigned int v35 = (WebCore::LocalDOMWindow *)WebCore::LocalFrame::window(v34);
    if (WebCore::LocalDOMWindow::frame(v35))
    {
      uint64_t v37 = a1 + 5;
      uint64_t v36 = a1[5];
      *(_OWORD *)script = *(_OWORD *)(v19 + 80);
      if ((WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v36, script) & 1) == 0)
      {
        *(_OWORD *)script = *(_OWORD *)(v19 + 80);
        uint64_t v38 = *(void *)(v19 + 24);
        if (v38 && (uint64_t v39 = *(WebCore::LocalFrame **)(v38 + 8)) != 0)
        {
          if (*((unsigned char *)v39 + 144)) {
            uint64_t v40 = 0;
          }
          else {
            uint64_t v40 = v39;
          }
        }
        else
        {
          uint64_t v40 = 0;
        }
        uint64_t v41 = WebCore::LocalFrame::window(v40);
        *(_OWORD *)arguments = *(_OWORD *)script;
        uint64_t v42 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v42 = &unk_1EE9FAF78;
        *(void *)(v42 + 8) = a1;
        *(_OWORD *)(v42 + 16) = *(_OWORD *)arguments;
        JSValueRef exception = (JSValueRef)v42;
        uint64_t v43 = WTF::fastMalloc((WTF *)0x30);
        WebKit::WebAutomationDOMWindowObserver::WebAutomationDOMWindowObserver(v43, v41, (uint64_t *)&exception);
        unsigned int v44 = a1;
        uint64_t v45 = a1[5];
        if (v45
          || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1 + 5),
              (uint64_t v45 = *v37) != 0))
        {
          int v46 = *(_DWORD *)(v45 - 8);
        }
        else
        {
          int v46 = 0;
        }
        LODWORD(v146[0]) = -1640531527;
        WORD2(v146[0]) = 0;
        BYTE6(v146[0]) = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)v146, script);
        unsigned int v48 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v146) & v46;
        uint64_t v49 = (OpaqueJSString **)(v45 + 24 * v48);
        unsigned int v51 = *v49;
        uint64_t v50 = v49[1];
        if (*(_OWORD *)v49 != 0)
        {
          unint64_t v52 = 0;
          int v53 = 1;
          while (v51 != script[0] || v50 != script[1])
          {
            if (v50 == (OpaqueJSString *)-1) {
              unint64_t v52 = v49;
            }
            unsigned int v48 = (v48 + v53) & v46;
            uint64_t v49 = (OpaqueJSString **)(v45 + 24 * v48);
            unsigned int v51 = *v49;
            uint64_t v50 = v49[1];
            ++v53;
            if (*(_OWORD *)v49 == 0)
            {
              if (v52)
              {
                WTF::StringImpl *v52 = 0;
                v52[1] = 0;
                uint64_t v52[2] = 0;
                --*(_DWORD *)(*v37 - 16);
                uint64_t v49 = v52;
              }
              goto LABEL_52;
            }
          }
          uint64_t v64 = v49[2];
          uint64_t v49[2] = (OpaqueJSString *)v43;
          a1 = v44;
          if (v64) {
            WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)v64 + 4, v47);
          }
          goto LABEL_75;
        }
LABEL_52:
        *(_OWORD *)uint64_t v49 = *(_OWORD *)script;
        uint64_t v54 = v49[2];
        uint64_t v49[2] = (OpaqueJSString *)v43;
        a1 = v44;
        if (v54) {
          WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)v54 + 4, v47);
        }
        uint64_t v55 = *v37;
        if (*v37) {
          int v56 = *(_DWORD *)(v55 - 12) + 1;
        }
        else {
          int v56 = 1;
        }
        *(_DWORD *)(v55 - 12) = v56;
        uint64_t v60 = *v37;
        if (*v37) {
          int v61 = *(_DWORD *)(v60 - 12);
        }
        else {
          int v61 = 0;
        }
        uint64_t v62 = (*(_DWORD *)(v60 - 16) + v61);
        unint64_t v63 = *(unsigned int *)(v60 - 4);
        if (v63 > 0x400)
        {
          if (v63 > 2 * v62) {
            goto LABEL_75;
          }
        }
        else if (3 * v63 > 4 * v62)
        {
LABEL_75:
          if (exception) {
            (*(void (**)(JSValueRef))(*(void *)exception + 8))(exception);
          }
          a6 = v143;
          goto LABEL_78;
        }
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v37);
        goto LABEL_75;
      }
    }
  }
LABEL_78:
  uint64_t v65 = (OpaqueJSContext *)WebKit::WebFrame::jsContext((WebKit::WebFrame *)v19);
  int v66 = (OpaqueJSValue *)WebKit::WebAutomationSessionProxy::scriptObject((WebKit::WebAutomationSessionProxy *)a1, v65);
  if (!v66)
  {
    JSValueRef exception = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    OpaqueJSString::tryCreate((uint64_t *)script, (OpaqueJSString *)&value, v67);
    uint64_t v69 = JSEvaluateScript(v65, script[0], 0, 0, 0, &exception);
    char v70 = (unsigned int *)script[0];
    script[0] = 0;
    if (v70) {
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v70);
    }
    int v71 = a1;
    OpaqueJSString::tryCreate((uint64_t *)script, (OpaqueJSString *)(a1 + 2), v68);
    char String = JSValueMakeString(v65, script[0]);
    uint64_t v73 = (unsigned int *)script[0];
    script[0] = 0;
    if (v73) {
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v73);
    }
    FunctionWithCallbacint k = JSObjectMakeFunctionWithCallback(v65, 0, (JSObjectCallAsFunctionCallback)WebKit::evaluate);
    JSObjectRef v75 = JSObjectMakeFunctionWithCallback(v65, 0, (JSObjectCallAsFunctionCallback)WebKit::createUUID);
    JSObjectRef v76 = JSObjectMakeFunctionWithCallback(v65, 0, (JSObjectCallAsFunctionCallback)WebKit::isValidNodeIdentifier);
    arguments[0] = String;
    arguments[1] = FunctionWithCallback;
    JSValueRef Boolean = v75;
    JSValueRef v155 = v76;
    int v66 = JSObjectCallAsFunction(v65, v69, 0, 4uLL, arguments, &exception);
    MEMORY[0x19972D160](v146, *((void *)v65 + 7));
    a1 = v71;
    unint64_t v77 = (WTF::StringImpl *)v71[3];
    *(_DWORD *)v77 += 2;
    script[0] = 0;
    script[1] = v65;
    v148[0] = 0x1000000FFFFFFFFLL;
    v148[1] = 0;
    if (v66) {
      uint64_t v78 = (uint64_t)v66;
    }
    else {
      uint64_t v78 = 2;
    }
    (*(void (**)(OpaqueJSContext *, OpaqueJSContext *, WTF::StringImpl *, uint64_t, JSStringRef *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C) + 0x48))(v65, v65, v77, v78, script);
    if (*(_DWORD *)v77 == 2) {
      WTF::StringImpl::destroy(v77, v79);
    }
    else {
      *(_DWORD *)v77 -= 2;
    }
    MEMORY[0x19972D170](v146);
    unsigned int v81 = value;
    JSValueRef value = 0;
    a6 = v143;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2) {
        WTF::StringImpl::destroy(v81, v80);
      }
      else {
        *(_DWORD *)v81 -= 2;
      }
    }
  }
  *(_OWORD *)unint64_t v146 = *(_OWORD *)(v19 + 80);
  JSValueRef value = 0;
  unint64_t v83 = (const OpaqueJSContext *)WebKit::WebFrame::jsContext((WebKit::WebFrame *)v19);
  if (a6)
  {
    uint64_t v85 = a1 + 4;
    uint64_t v84 = a1[4];
    char v142 = a1;
    if (v84
      || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1 + 4, 0), (uint64_t v84 = *v85) != 0))
    {
      unsigned int v86 = *(_DWORD *)(v84 - 8);
    }
    else
    {
      unsigned int v86 = 0;
    }
    LODWORD(script[0]) = -1640531527;
    WORD2(script[0]) = 0;
    BYTE6(script[0]) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)script, v146);
    uint64_t v87 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)script) & v86;
    uint64_t v88 = v84 + 32 * v87;
    int v90 = *(WTF::StringImpl **)v88;
    uint64_t v89 = *(WTF::StringImpl **)(v88 + 8);
    if (*(_OWORD *)v88 != 0)
    {
      unint64_t v91 = 0;
      int v92 = 1;
      while (v90 != v146[0] || v89 != v146[1])
      {
        if (v89 == (WTF::StringImpl *)-1) {
          unint64_t v91 = (_OWORD *)v88;
        }
        uint64_t v87 = (v87 + v92) & v86;
        uint64_t v88 = v84 + 32 * v87;
        int v90 = *(WTF::StringImpl **)v88;
        uint64_t v89 = *(WTF::StringImpl **)(v88 + 8);
        ++v92;
        if (*(_OWORD *)v88 == 0)
        {
          if (v91)
          {
            *unint64_t v91 = 0u;
            v91[1] = 0u;
            --*(_DWORD *)(*v85 - 16);
            uint64_t v88 = (uint64_t)v91;
          }
          goto LABEL_106;
        }
      }
      goto LABEL_117;
    }
LABEL_106:
    *(_OWORD *)uint64_t v88 = *(_OWORD *)v146;
    int v93 = *(WTF **)(v88 + 16);
    if (v93)
    {
      *(void *)(v88 + 16) = 0;
      *(_DWORD *)(v88 + 24) = 0;
      WTF::fastFree(v93, v82);
    }
    *(void *)(v88 + 16) = 0;
    *(void *)(v88 + 24) = 0;
    uint64_t v94 = *v85;
    if (*v85) {
      int v95 = *(_DWORD *)(v94 - 12) + 1;
    }
    else {
      int v95 = 1;
    }
    *(_DWORD *)(v94 - 12) = v95;
    uint64_t v96 = *v85;
    if (*v85) {
      int v97 = *(_DWORD *)(v96 - 12);
    }
    else {
      int v97 = 0;
    }
    uint64_t v98 = (*(_DWORD *)(v96 - 16) + v97);
    unint64_t v99 = *(unsigned int *)(v96 - 4);
    if (v99 > 0x400)
    {
      if (v99 > 2 * v98) {
        goto LABEL_117;
      }
    }
    else if (3 * v99 > 4 * v98)
    {
LABEL_117:
      int v100 = (void *)(v88 + 16);
      uint64_t v101 = *(unsigned int *)(v88 + 28);
      LOBYTE(a6) = v143;
      if (v101 == *(_DWORD *)(v88 + 24))
      {
        uint64_t v102 = (void *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)&a19);
        uint64_t v101 = *(unsigned int *)(v88 + 28);
        *(void *)(*(void *)(v88 + 16) + 8 * v101) = *v102;
      }
      else
      {
        *(void *)(*v100 + 8 * v101) = a19;
      }
      *(_DWORD *)(v88 + 28) = v101 + 1;
      a1 = v142;
      goto LABEL_121;
    }
    uint64_t v88 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v85, v88);
    goto LABEL_117;
  }
LABEL_121:
  OpaqueJSString::tryCreate((uint64_t *)script, a4, (const WTF::String *)v82);
  uint64_t v104 = JSValueMakeString(v83, script[0]);
  uint64_t result = script[0];
  script[0] = 0;
  if (result) {
    uint64_t result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)result);
  }
  arguments[0] = v104;
  uint64_t v105 = *(unsigned int *)(a5 + 12);
  if (v105)
  {
    script[0] = (JSStringRef)v148;
    script[1] = (JSStringRef)8;
    if (v105 > 8)
    {
      if (v105 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v109 = (OpaqueJSString *)WTF::fastMalloc((WTF *)(8 * v105));
      LODWORD(script[1]) = v105;
      script[0] = v109;
      uint64_t v110 = *(unsigned int *)(a5 + 12);
      if (!v110)
      {
        uint64_t v114 = (const JSValueRef *)v109;
        unsigned int v113 = HIDWORD(script[1]);
LABEL_134:
        uint64_t Array = JSObjectMakeArray(v83, v113, v114, &value);
        JSStringRef v116 = script[0];
        if (HIDWORD(script[1]))
        {
          uint64_t v117 = 8 * HIDWORD(script[1]);
          do
          {
            int v118 = *(const OpaqueJSValue **)v116;
            JSStringRef v116 = (JSStringRef)((char *)v116 + 8);
            JSValueUnprotect(v83, v118);
            v117 -= 8;
          }
          while (v117);
          JSStringRef v116 = script[0];
        }
        if (v148 != (void *)v116 && v116 != 0)
        {
          script[0] = 0;
          LODWORD(script[1]) = 0;
          WTF::fastFree(v116, v115);
        }
        goto LABEL_143;
      }
      uint64_t v106 = *(OpaqueJSString **)a5;
      uint64_t v107 = (OpaqueJSString *)((char *)v106 + 8 * v110);
    }
    else
    {
      uint64_t v106 = *(OpaqueJSString **)a5;
      uint64_t v107 = (OpaqueJSString *)((char *)v106 + 8 * v105);
    }
    do
    {
      OpaqueJSString::tryCreate((uint64_t *)&exception, v106, v103);
      unint64_t v111 = JSValueMakeString(v83, exception);
      uint64_t v112 = (unsigned int *)exception;
      JSValueRef exception = 0;
      if (v112) {
        WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v112);
      }
      JSValueProtect(v83, v111);
      unsigned int v113 = HIDWORD(script[1]) + 1;
      *((void *)script[0] + HIDWORD(script[1])) = v111;
      HIDWORD(script[1]) = v113;
      uint64_t v106 = (OpaqueJSString *)((char *)v106 + 8);
    }
    while (v106 != v107);
    uint64_t v114 = (const JSValueRef *)script[0];
    goto LABEL_134;
  }
  uint64_t Array = JSObjectMakeArray(v83, 0, 0, &value);
LABEL_143:
  arguments[1] = Array;
  JSValueRef Boolean = JSValueMakeBoolean(v83, a6);
  JSValueRef v155 = JSValueMakeBoolean(v83, a7);
  JSValueRef Number = JSValueMakeNumber(v83, (double)(unint64_t)v146[0]);
  JSValueRef v157 = JSValueMakeNumber(v83, (double)(unint64_t)v146[1]);
  JSValueRef v158 = JSValueMakeNumber(v83, (double)(unint64_t)a19);
  JSObjectRef v159 = JSObjectMakeFunctionWithCallback(v83, 0, (JSObjectCallAsFunctionCallback)WebKit::evaluateJavaScriptCallback);
  double v120 = -1.0;
  if (a18) {
    double v120 = a17;
  }
  JSValueRef v160 = JSValueMakeNumber(v83, v120);
  char v151 = 0;
  char v152 = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  OpaqueJSString::tryCreate((uint64_t *)script, (OpaqueJSString *)&propertyName, v121);
  Property = JSObjectGetProperty(v83, v66, script[0], &value);
  unint64_t v123 = (unsigned int *)script[0];
  script[0] = 0;
  if (v123) {
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v123);
  }
  JSObjectCallAsFunction(v83, Property, v66, 9uLL, arguments, &value);
  uint64_t v125 = propertyName;
  JSStringRef propertyName = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2) {
      WTF::StringImpl::destroy(v125, v124);
    }
    else {
      *(_DWORD *)v125 -= 2;
    }
  }
  if (value)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, script);
    if (JSValueIsObject(v83, value))
    {
      uint64_t v126 = value;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      OpaqueJSString::tryCreate();
      JSValueRef v128 = JSObjectGetProperty(v83, v126, propertyName, 0);
      int v129 = (unsigned int *)propertyName;
      JSStringRef propertyName = 0;
      if (v129) {
        WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v129);
      }
      int v130 = v144;
      int v144 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2) {
          WTF::StringImpl::destroy(v130, v127);
        }
        else {
          *(_DWORD *)v130 -= 2;
        }
      }
      char v132 = v83;
      uint64_t v131 = v128;
    }
    else
    {
      uint64_t v131 = value;
      char v132 = v83;
    }
    uint64_t v133 = JSValueToStringCopy(v132, v131, 0);
    OpaqueJSString::string((uint64_t *)&v144, v133);
    uint64_t v134 = v144;
    int v144 = 0;
    JSStringRef propertyName = v134;
    if (v133) {
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v133);
    }
    WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction((uint64_t)a1, (uint64_t)v146[0], (uint64_t)v146[1], (uint64_t)a19, (uint64_t)&propertyName, (uint64_t)script);
    uint64_t v136 = propertyName;
    JSStringRef propertyName = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2) {
        WTF::StringImpl::destroy(v136, v135);
      }
      else {
        *(_DWORD *)v136 -= 2;
      }
    }
    long long v137 = script[0];
    script[0] = 0;
    if (v137)
    {
      if (*(_DWORD *)v137 == 2) {
        WTF::StringImpl::destroy(v137, v135);
      }
      else {
        *(_DWORD *)v137 -= 2;
      }
    }
  }
  return (WTF::StringImpl *)MEMORY[0x1997355E0](&exception);
}

JSValueRef WebKit::evaluateJavaScriptCallback(JSContextRef ctx, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSValueRef *exception, const OpaqueJSValue **a7)
{
  {
    uint64_t v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v38);
  }
  uint64_t v10 = *(void *)(WebKit::WebProcess::singleton(void)::process + 496);
  if (v10)
  {
    uint64_t v11 = (unint64_t)JSValueToNumber(ctx, *a5, exception);
    if (v11 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19925712CLL);
    }
    uint64_t v12 = (unint64_t)JSValueToNumber(ctx, a5[1], exception);
    if (v12 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19925714CLL);
    }
    uint64_t v13 = (unint64_t)JSValueToNumber(ctx, a5[2], exception);
    Ischar String = JSValueIsString(ctx, a5[3]);
    uint64_t v15 = a5[3];
    if (IsString)
    {
      uint64_t v16 = JSValueToStringCopy(ctx, v15, exception);
      OpaqueJSString::string((uint64_t *)&propertyName, v16);
      uint64_t v41 = 0;
      WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction(v10, v11, v12, v13, (uint64_t)&propertyName, (uint64_t)&v41);
      uint64_t v18 = v41;
      uint64_t v41 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v17);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      uint64_t v26 = propertyName;
      JSStringRef propertyName = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::destroy(v26, v17);
          if (!v16) {
            return JSValueMakeUndefined(ctx);
          }
LABEL_26:
          WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v16);
          return JSValueMakeUndefined(ctx);
        }
        *(_DWORD *)v26 -= 2;
      }
      if (!v16) {
        return JSValueMakeUndefined(ctx);
      }
      goto LABEL_26;
    }
    if (!JSValueIsObject(ctx, v15))
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &propertyName);
      uint64_t v41 = 0;
      WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction(v10, v11, v12, v13, (uint64_t)&v41, (uint64_t)&propertyName);
LABEL_60:
      uint64_t v36 = v41;
      uint64_t v41 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v25);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
      uint64_t v37 = propertyName;
      JSStringRef propertyName = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, v25);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
      return JSValueMakeUndefined(ctx);
    }
    uint64_t v20 = JSValueToObject(ctx, a5[3], exception);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v41 = propertyName;
    OpaqueJSString::tryCreate();
    Property = JSObjectGetProperty(ctx, v20, propertyName, exception);
    unsigned __int8 v23 = (unsigned int *)propertyName;
    JSStringRef propertyName = 0;
    if (v23) {
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v23);
    }
    uint64_t v24 = v41;
    uint64_t v41 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v21);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    int v27 = JSValueToStringCopy(ctx, Property, 0);
    OpaqueJSString::string((uint64_t *)&propertyName, v27);
    if (v27) {
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v27);
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(7, &v41);
    if (MEMORY[0x19972E990](propertyName, "JavaScriptTimeout", 17))
    {
      uint64_t v28 = 8;
    }
    else if (MEMORY[0x19972E990](propertyName, "NodeNotFound", 12))
    {
      uint64_t v28 = 11;
    }
    else if (MEMORY[0x19972E990](propertyName, "InvalidNodeIdentifier", 21))
    {
      uint64_t v28 = 12;
    }
    else if (MEMORY[0x19972E990](propertyName, "InvalidElementState", 19))
    {
      uint64_t v28 = 13;
    }
    else if (MEMORY[0x19972E990](propertyName, "InvalidParameter", 16))
    {
      uint64_t v28 = 17;
    }
    else if (MEMORY[0x19972E990](propertyName, "InvalidSelector", 15))
    {
      uint64_t v28 = 18;
    }
    else
    {
      if (!MEMORY[0x19972E990](propertyName, "ElementNotInteractable", 22))
      {
LABEL_48:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        OpaqueJSString::tryCreate();
        uint64_t v32 = JSObjectGetProperty(ctx, v20, v40, exception);
        uint64_t v33 = (unsigned int *)v40;
        JSStringRef v40 = 0;
        if (v33) {
          WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v33);
        }
        if (v39)
        {
          if (*(_DWORD *)v39 == 2) {
            WTF::StringImpl::destroy(v39, v31);
          }
          else {
            *(_DWORD *)v39 -= 2;
          }
        }
        uint64_t v34 = JSValueToStringCopy(ctx, v32, exception);
        OpaqueJSString::string((uint64_t *)&v40, v34);
        if (v34) {
          WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v34);
        }
        WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction(v10, v11, v12, v13, (uint64_t)&v40, (uint64_t)&v41);
        unsigned int v35 = v40;
        JSStringRef v40 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2) {
            WTF::StringImpl::destroy(v35, v25);
          }
          else {
            *(_DWORD *)v35 -= 2;
          }
        }
        goto LABEL_60;
      }
      uint64_t v28 = 19;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v28, &v40);
    uint64_t v30 = v41;
    uint64_t v41 = v40;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    goto LABEL_48;
  }

  return JSValueMakeUndefined(ctx);
}

uint64_t WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v25[0] = a2;
  v25[1] = a3;
  uint64_t v10 = (uint64_t *)(a1 + 32);
  uint64_t v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a1 + 32), v25);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    uint64_t v14 = (uint64_t *)(v13 + 32 * *(unsigned int *)(v13 - 4));
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 == v11) {
    goto LABEL_20;
  }
  uint64_t v15 = *((unsigned int *)v11 + 7);
  if (v15)
  {
    uint64_t v16 = (void *)v11[2];
    if (*v16 != a4)
    {
      uint64_t v17 = 0;
      while (v15 - 1 != v17)
      {
        uint64_t v18 = v16[++v17];
        if (v18 == a4) {
          goto LABEL_11;
        }
      }
      goto LABEL_20;
    }
    uint64_t v17 = 0;
LABEL_11:
    memmove(&v16[v17], &v16[v17 + 1], 8 * v15 - (8 * v17 + 8));
    int v19 = *((_DWORD *)v12 + 7) - 1;
    *((_DWORD *)v12 + 7) = v19;
    if (v19) {
      goto LABEL_20;
    }
    uint64_t v13 = *v10;
  }
  if (v13)
  {
    uint64_t v20 = (uint64_t *)(v13 + 32 * *(unsigned int *)(v13 - 4));
    if (v20 == v12) {
      goto LABEL_20;
    }
  }
  else
  {
    if (!v12) {
      goto LABEL_20;
    }
    uint64_t v20 = 0;
  }
  if (v20 != v12) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v10, v12);
  }
LABEL_20:
  {
    unsigned __int8 v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v21 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v24[0] = a4;
  v24[1] = a5;
  void v24[2] = a6;
  return IPC::Connection::send<Messages::WebAutomationSession::DidEvaluateJavaScriptFunction>(v21, v24);
}

void WebKit::WebAutomationSessionProxy::resolveChildFrameWithOrdinal(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  {
    int v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  int v46 = a2;
  uint64_t v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v46);
  if (v7)
  {
    uint64_t v8 = v7;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v46);
    if (*(unsigned char *)(a3 + 16))
    {
      {
        uint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v20);
      }
      uint64_t v9 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
      if (v9)
      {
LABEL_6:
        uint64_t v10 = *(void *)(v9 + 24);
        if (v10 && (uint64_t v11 = *(void *)(v10 + 8)) != 0 && !*(unsigned char *)(v11 + 144))
        {
          uint64_t v15 = WebCore::FrameTree::scopedChild((WebCore::FrameTree *)(v11 + 48));
          if (v15)
          {
            WebKit::WebFrame::fromCoreFrame(v15, &v29);
            uint64_t v16 = v29;
            if (v29)
            {
              LOBYTE(v23) = 0;
              char v24 = 0;
              long long v21 = *(_OWORD *)(v29 + 80);
              char v22 = 1;
              WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v23, &v21);
              if (v24)
              {
                uint64_t v18 = v23;
                unsigned __int8 v23 = 0;
                if (v18)
                {
                  if (*(_DWORD *)v18 == 2) {
                    WTF::StringImpl::destroy(v18, v17);
                  }
                  else {
                    *(_DWORD *)v18 -= 2;
                  }
                }
              }
              CFRelease(*(CFTypeRef *)(v16 + 8));
              uint64_t v12 = v46;
              goto LABEL_47;
            }
            uint64_t v12 = v46;
            if (v46) {
              *(_DWORD *)v46 += 2;
            }
            int v27 = v12;
            char v28 = 1;
            LOBYTE(v25) = 0;
            char v26 = 0;
            WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v27, &v25);
            if (!v28) {
              goto LABEL_47;
            }
            uint64_t v14 = v27;
            int v27 = 0;
            if (!v14) {
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v12 = v46;
            if (v46) {
              *(_DWORD *)v46 += 2;
            }
            uint64_t v32 = v12;
            char v33 = 1;
            LOBYTE(v30) = 0;
            char v31 = 0;
            WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v32, &v30);
            if (!v33) {
              goto LABEL_47;
            }
            uint64_t v14 = v32;
            uint64_t v32 = 0;
            if (!v14) {
              goto LABEL_47;
            }
          }
        }
        else
        {
          uint64_t v12 = v46;
          if (v46) {
            *(_DWORD *)v46 += 2;
          }
          uint64_t v36 = v12;
          char v37 = 1;
          LOBYTE(v34) = 0;
          char v35 = 0;
          WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v36, &v34);
          if (!v37) {
            goto LABEL_47;
          }
          uint64_t v14 = v36;
          uint64_t v36 = 0;
          if (!v14) {
            goto LABEL_47;
          }
        }
LABEL_25:
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
LABEL_47:
        int v46 = 0;
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(v8 + 88);
      if (v9) {
        goto LABEL_6;
      }
    }
    uint64_t v12 = v46;
    if (v46) {
      *(_DWORD *)v46 += 2;
    }
    JSStringRef v40 = v12;
    char v41 = 1;
    LOBYTE(v38) = 0;
    char v39 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v40, &v38);
    if (!v41) {
      goto LABEL_47;
    }
    uint64_t v14 = v40;
    JSStringRef v40 = 0;
    if (!v14) {
      goto LABEL_47;
    }
    goto LABEL_25;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v46);
  uint64_t v12 = v46;
  if (v46) {
    *(_DWORD *)v46 += 2;
  }
  unsigned int v44 = v12;
  char v45 = 1;
  LOBYTE(v42) = 0;
  char v43 = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v44, &v42);
  if (v45 && v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, v13);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
LABEL_48:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v13);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    int v4 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    long long v8 = *a3;
    uint64_t v9 = *((void *)a3 + 2);
    uint64_t v12 = v4;
    char v13 = 1;
  }
  else
  {
    long long v8 = *a3;
    uint64_t v9 = *((void *)a3 + 2);
    LOBYTE(v12) = 0;
    char v13 = 0;
  }
  uint64_t v11 = v9;
  long long v10 = v8;
  (*(void (**)(uint64_t, WTF::StringImpl **, long long *))(*(void *)v3 + 16))(v3, &v12, &v10);
  if (v13)
  {
    int v6 = v12;
    uint64_t v12 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::resolveChildFrameWithNodeHandle(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, WebKit **a4, uint64_t *a5)
{
  {
    uint64_t v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v29);
  }
  uint64_t v64 = a2;
  uint64_t v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v64);
  if (!v9)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v64);
    int v19 = v64;
    if (v64) {
      *(_DWORD *)v64 += 2;
    }
    uint64_t v62 = v19;
    char v63 = 1;
    LOBYTE(v60) = 0;
    char v61 = 0;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v62, &v60);
    if (v63)
    {
      uint64_t result = v62;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v62, v21);
          if (!v19) {
            return result;
          }
          goto LABEL_38;
        }
        *(_DWORD *)v62 -= 2;
      }
    }
    if (!v19) {
      return result;
    }
LABEL_38:
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
      return result;
    }
    uint64_t result = v19;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
  }
  uint64_t v10 = v9;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v64);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v12 = *(WebKit::WebFrame **)(v10 + 88);
    if (v12) {
      goto LABEL_6;
    }
LABEL_27:
    char v22 = v64;
    if (v64) {
      *(_DWORD *)v64 += 2;
    }
    uint64_t v58 = v22;
    char v59 = 1;
    LOBYTE(v56) = 0;
    char v57 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v58, &v56);
    if (!v59) {
      goto LABEL_60;
    }
    unsigned __int8 v23 = v58;
    if (!v58) {
      goto LABEL_60;
    }
    goto LABEL_45;
  }
  {
    long long v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v30);
  }
  uint64_t v12 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
  if (!v12) {
    goto LABEL_27;
  }
LABEL_6:
  if (!WebKit::isValidNodeHandle(*a4, v11))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(12, &v55);
    char v24 = v55;
    if (v55) {
      *(_DWORD *)v55 += 2;
    }
    int v53 = v24;
    char v54 = 1;
    LOBYTE(v51) = 0;
    char v52 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v53, &v51);
    if (!v54) {
      goto LABEL_53;
    }
    long long v25 = v53;
    if (!v53) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  JSObjectRef v13 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v12, (const WTF::String *)a4);
  if (!v13)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v55);
    char v24 = v55;
    if (v55) {
      *(_DWORD *)v55 += 2;
    }
    uint64_t v49 = v24;
    char v50 = 1;
    LOBYTE(v47) = 0;
    char v48 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v49, &v47);
    if (!v50) {
      goto LABEL_53;
    }
    long long v25 = v49;
    if (!v49) {
      goto LABEL_53;
    }
LABEL_51:
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, v21);
      if (!v24) {
        goto LABEL_60;
      }
      goto LABEL_56;
    }
    *(_DWORD *)v25 -= 2;
LABEL_53:
    if (!v24) {
      goto LABEL_60;
    }
LABEL_56:
    if (*(_DWORD *)v24 != 2)
    {
      *(_DWORD *)v24 -= 2;
      goto LABEL_60;
    }
    unsigned __int8 v23 = v24;
LABEL_59:
    WTF::StringImpl::destroy(v23, v21);
    goto LABEL_60;
  }
  if ((*((_WORD *)v13 + 16) & 0x10) != 0
    && ((uint64_t v14 = *(void *)(*((void *)v13 + 13) + 24), v14 == *(void *)(*MEMORY[0x1E4FB6998] + 24))
     || v14 == *(void *)(*MEMORY[0x1E4FB6AB0] + 24)))
  {
    uint64_t v15 = *((void *)v13 + 15);
    if (v15 && (uint64_t v16 = *(void *)(v15 + 8)) != 0)
    {
      WebKit::WebFrame::fromCoreFrame(v16, &v55);
      uint64_t v17 = v55;
      if (v55)
      {
        LOBYTE(v33) = 0;
        char v34 = 0;
        long long v31 = *((_OWORD *)v55 + 5);
        char v32 = 1;
        WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v33, &v31);
        if (v34 && v33)
        {
          if (*(_DWORD *)v33 == 2) {
            WTF::StringImpl::destroy(v33, v18);
          }
          else {
            *(_DWORD *)v33 -= 2;
          }
        }
        CFRelease(*((CFTypeRef *)v17 + 1));
        goto LABEL_60;
      }
      char v28 = v64;
      if (v64) {
        *(_DWORD *)v64 += 2;
      }
      char v37 = v28;
      char v38 = 1;
      LOBYTE(v35) = 0;
      char v36 = 0;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v37, &v35);
      if (!v38) {
        goto LABEL_60;
      }
      unsigned __int8 v23 = v37;
      if (!v37) {
        goto LABEL_60;
      }
    }
    else
    {
      int v27 = v64;
      if (v64) {
        *(_DWORD *)v64 += 2;
      }
      char v41 = v27;
      char v42 = 1;
      LOBYTE(v39) = 0;
      char v40 = 0;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v41, &v39);
      if (!v42) {
        goto LABEL_60;
      }
      unsigned __int8 v23 = v41;
      if (!v41) {
        goto LABEL_60;
      }
    }
  }
  else
  {
    char v26 = v64;
    if (v64) {
      *(_DWORD *)v64 += 2;
    }
    char v45 = v26;
    char v46 = 1;
    LOBYTE(v43) = 0;
    char v44 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v45, &v43);
    if (!v46) {
      goto LABEL_60;
    }
    unsigned __int8 v23 = v45;
    if (!v45) {
      goto LABEL_60;
    }
  }
LABEL_45:
  if (*(_DWORD *)v23 == 2) {
    goto LABEL_59;
  }
  *(_DWORD *)v23 -= 2;
LABEL_60:
  uint64_t result = v64;
  if (!v64) {
    return result;
  }
  if (*(_DWORD *)v64 != 2)
  {
    *(_DWORD *)v64 -= 2;
    return result;
  }
  return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
}

void WebKit::WebAutomationSessionProxy::resolveChildFrameWithName(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::AtomStringImpl **a4, uint64_t *a5)
{
  {
    unsigned __int8 v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  char v50 = a2;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v50);
  if (v8)
  {
    uint64_t v9 = v8;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v50);
    if (*(unsigned char *)(a3 + 16))
    {
      {
        char v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v24);
      }
      uint64_t v10 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
      if (v10)
      {
LABEL_6:
        uint64_t v11 = *(void *)(v10 + 24);
        if (!v11 || (uint64_t v12 = *(void *)(v11 + 8)) == 0 || *(unsigned char *)(v12 + 144))
        {
          JSObjectRef v13 = v50;
          if (v50) {
            *(_DWORD *)v50 += 2;
          }
          char v40 = v13;
          char v41 = 1;
          LOBYTE(v38) = 0;
          char v39 = 0;
          WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v40, &v38);
          if (!v41) {
            goto LABEL_51;
          }
          uint64_t v15 = v40;
          char v40 = 0;
          if (!v15) {
            goto LABEL_51;
          }
          goto LABEL_25;
        }
        uint64_t v16 = (WebCore::FrameTree *)(v12 + 48);
        WTF::AtomString::AtomString((WTF::AtomString *)&v37, a4);
        uint64_t v18 = WebCore::FrameTree::scopedChildByUniqueName(v16, &v37);
        uint64_t m_ptr = v37.var0.m_impl.m_ptr;
        v37.var0.m_impl.uint64_t m_ptr = 0;
        if (m_ptr)
        {
          if (*(_DWORD *)m_ptr == 2)
          {
            WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v17);
            if (v18) {
              goto LABEL_32;
            }
LABEL_39:
            JSObjectRef v13 = v50;
            if (v50) {
              *(_DWORD *)v50 += 2;
            }
            long long v35 = v13;
            char v36 = 1;
            LOBYTE(v33) = 0;
            char v34 = 0;
            WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v35, &v33);
            if (!v36) {
              goto LABEL_51;
            }
            uint64_t v15 = v35;
            long long v35 = 0;
            if (!v15) {
              goto LABEL_51;
            }
            goto LABEL_25;
          }
          *(_DWORD *)m_ptr -= 2;
        }
        if (v18)
        {
LABEL_32:
          WebKit::WebFrame::fromCoreFrame(v18, &v37);
          uint64_t v20 = v37.var0.m_impl.m_ptr;
          if (v37.var0.m_impl.m_ptr)
          {
            LOBYTE(v27) = 0;
            char v28 = 0;
            long long v25 = *((_OWORD *)v37.var0.m_impl.m_ptr + 5);
            char v26 = 1;
            WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v27, &v25);
            if (v28)
            {
              char v22 = v27;
              int v27 = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2) {
                  WTF::StringImpl::destroy(v22, v21);
                }
                else {
                  *(_DWORD *)v22 -= 2;
                }
              }
            }
            CFRelease(*((CFTypeRef *)v20 + 1));
            JSObjectRef v13 = v50;
            goto LABEL_51;
          }
          JSObjectRef v13 = v50;
          if (v50) {
            *(_DWORD *)v50 += 2;
          }
          long long v31 = v13;
          char v32 = 1;
          LOBYTE(v29) = 0;
          char v30 = 0;
          WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v31, &v29);
          if (!v32) {
            goto LABEL_51;
          }
          uint64_t v15 = v31;
          long long v31 = 0;
          if (!v15) {
            goto LABEL_51;
          }
          goto LABEL_25;
        }
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(v9 + 88);
      if (v10) {
        goto LABEL_6;
      }
    }
    JSObjectRef v13 = v50;
    if (v50) {
      *(_DWORD *)v50 += 2;
    }
    char v44 = v13;
    char v45 = 1;
    LOBYTE(v42) = 0;
    char v43 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v44, &v42);
    if (!v45) {
      goto LABEL_51;
    }
    uint64_t v15 = v44;
    char v44 = 0;
    if (!v15) {
      goto LABEL_51;
    }
LABEL_25:
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
LABEL_51:
    char v50 = 0;
    goto LABEL_52;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v50);
  JSObjectRef v13 = v50;
  if (v50) {
    *(_DWORD *)v50 += 2;
  }
  char v48 = v13;
  char v49 = 1;
  LOBYTE(v46) = 0;
  char v47 = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a5, (uint64_t)&v48, &v46);
  if (v49 && v48)
  {
    if (*(_DWORD *)v48 == 2) {
      WTF::StringImpl::destroy(v48, v14);
    }
    else {
      *(_DWORD *)v48 -= 2;
    }
  }
LABEL_52:
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v14);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
}

void WebKit::WebAutomationSessionProxy::resolveParentFrame(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  char v34 = a2;
  uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v34);
  if (v6)
  {
    uint64_t v7 = v6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v34);
    if (*(unsigned char *)(a3 + 16))
    {
      {
        uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v16);
      }
      uint64_t v8 = (unsigned int *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)a3, *(void *)(a3 + 8));
      if (v8) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v8 = *(unsigned int **)(v7 + 88);
      if (v8)
      {
LABEL_6:
        WebKit::WebFrame::parentFrame(v8, &v25);
        uint64_t v9 = v25;
        if (v25)
        {
          LOBYTE(v19) = 0;
          char v20 = 0;
          long long v17 = *(_OWORD *)(v25 + 80);
          char v18 = 1;
          WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a4, (uint64_t)&v19, &v17);
          if (v20)
          {
            uint64_t v11 = v19;
            int v19 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2) {
                WTF::StringImpl::destroy(v11, v10);
              }
              else {
                *(_DWORD *)v11 -= 2;
              }
            }
          }
          CFRelease(*(CFTypeRef *)(v9 + 8));
          uint64_t v12 = v34;
          goto LABEL_33;
        }
        uint64_t v12 = v34;
        if (v34) {
          *(_DWORD *)v34 += 2;
        }
        unsigned __int8 v23 = v12;
        char v24 = 1;
        LOBYTE(v21) = 0;
        char v22 = 0;
        WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a4, (uint64_t)&v23, &v21);
        if (!v24) {
          goto LABEL_33;
        }
        uint64_t v14 = v23;
        unsigned __int8 v23 = 0;
        if (!v14) {
          goto LABEL_33;
        }
LABEL_27:
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
LABEL_33:
        char v34 = 0;
        goto LABEL_34;
      }
    }
    uint64_t v12 = v34;
    if (v34) {
      *(_DWORD *)v34 += 2;
    }
    char v28 = v12;
    char v29 = 1;
    LOBYTE(v26) = 0;
    char v27 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a4, (uint64_t)&v28, &v26);
    if (!v29) {
      goto LABEL_33;
    }
    uint64_t v14 = v28;
    char v28 = 0;
    if (!v14) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v34);
  uint64_t v12 = v34;
  if (v34) {
    *(_DWORD *)v34 += 2;
  }
  char v32 = v12;
  char v33 = 1;
  LOBYTE(v30) = 0;
  char v31 = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>)>::operator()(a4, (uint64_t)&v32, &v30);
  if (v33 && v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v13);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
LABEL_34:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v13);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
}