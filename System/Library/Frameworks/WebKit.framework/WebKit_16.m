void *WebKit::AuthenticationManager::Challenge::Challenge(void *a1, uint64_t a2, WebCore::AuthenticationChallengeBase *a3, uint64_t *a4)
{
  const void *v7;
  const void *v8;
  uint64_t v9;

  *a1 = a2;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a1 + 1), a3);
  v7 = (const void *)*((void *)a3 + 52);
  a1[53] = v7;
  if (v7) {
    CFRetain(v7);
  }
  v8 = (const void *)*((void *)a3 + 53);
  a1[54] = v8;
  if (v8) {
    CFRetain(v8);
  }
  v9 = *a4;
  *a4 = 0;
  a1[55] = v9;
  return a1;
}

IPC::Encoder *IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  result = (IPC::Encoder *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *(unsigned char *)result = 0;
      return result;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198D873B0);
  }
  if (!v6) {
    goto LABEL_10;
  }
  *(unsigned char *)result = 1;
  if (!*(unsigned char *)(a2 + 32))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_10;
  }

  return IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, a2);
}

id *WebKit::CompactContextMenuPresenter::CompactContextMenuPresenter(id *a1, void *a2, uint64_t a3)
{
  objc_initWeak(a1, a2);
  v5 = +[WKCompactContextMenuPresenterButton buttonWithType:1];
  a1[1] = v5;
  if (v5)
  {
    CFRetain(v5);
    v5 = (WKCompactContextMenuPresenterButton *)a1[1];
  }
  [(WKCompactContextMenuPresenterButton *)v5 setExternalDelegate:a3];
  objc_msgSend((id)objc_msgSend(a1[1], "layer"), "setZPosition:", 2.22507386e-308);
  [a1[1] setHidden:1];
  [a1[1] setUserInteractionEnabled:0];
  [a1[1] setContextMenuInteractionEnabled:1];
  [a1[1] setShowsMenuAsPrimaryAction:1];
  return a1;
}

void sub_198D87770(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void WebKit::CompactContextMenuPresenter::~CompactContextMenuPresenter(id *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN6WebKit27CompactContextMenuPresenterD2Ev_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = this;
  [MEMORY[0x1E4F42FF0] performWithoutAnimation:v3];
  [this[1] removeFromSuperview];
  id v2 = this[1];
  this[1] = 0;
  if (v2) {
    CFRelease(v2);
  }
  objc_destroyWeak(this);
}

void sub_198D87840(_Unwind_Exception *a1)
{
  v3 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  objc_destroyWeak((id *)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27CompactContextMenuPresenterD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = (void *)[*(id *)(*(void *)(a1 + 32) + 8) contextMenuInteraction];

  return [v1 dismissMenu];
}

uint64_t WebKit::CompactContextMenuPresenter::present(id *this, CGRect a2)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  uint64_t result = [objc_loadWeak(this) window];
  if (result)
  {
    objc_msgSend(this[1], "setFrame:", x, y, width, height);
    if (![this[1] superview]) {
      [objc_loadWeak(this) addSubview:this[1]];
    }
    if (byte_1EB359BB9)
    {
      int v8 = _MergedGlobals_89;
    }
    else
    {
      int v8 = [MEMORY[0x1E4F427E0] instancesRespondToSelector:sel_performPrimaryAction];
      _MergedGlobals_89 = v8;
      byte_1EB359BB9 = 1;
    }
    if (v8)
    {
      id v9 = this[1];
      return [v9 performPrimaryAction];
    }
    else
    {
      v10 = (void *)[this[1] contextMenuInteraction];
      v14.origin.double x = x;
      v14.origin.double y = y;
      v14.size.double width = width;
      v14.size.double height = height;
      double MidX = CGRectGetMidX(v14);
      v15.origin.double x = x;
      v15.origin.double y = y;
      v15.size.double width = width;
      v15.size.double height = height;
      double MidY = CGRectGetMidY(v15);
      return objc_msgSend(v10, "_presentMenuAtLocation:", MidX, MidY);
    }
  }
  return result;
}

void WebKit::DragDropInteractionState::prepareForDragSession(uint64_t a1, CFTypeRef cf, void *aBlock)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = cf;
  if (v6) {
    CFRelease(v6);
  }
  v7 = _Block_copy(aBlock);
  _Block_release(*(const void **)(a1 + 56));
  *(void *)(a1 + 56) = v7;

  _Block_release(0);
}

void sub_198D87A74(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::updatePreviewsForActiveDragSources(WebKit::DragDropInteractionState *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *((_DWORD *)this + 103);
  if (!v1) {
    return;
  }
  uint64_t v2 = *((void *)this + 50);
  uint64_t v3 = v2 + 312 * v1;
  v21 = &v29;
  do
  {
    if (!*(unsigned char *)(v2 + 296) || (*(unsigned char *)v2 & 0x20) == 0 && (*(unsigned char *)v2 & 6) != 4) {
      goto LABEL_45;
    }
    int v4 = (void *)*((void *)this + 5);
    uint64_t v5 = *(void *)(v2 + 304);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v6 = objc_msgSend(v4, "items", v21);
    uint64_t v7 = [v6 countByEnumeratingWithState:&v23 objects:&v27 count:16];
    if (!v7) {
      goto LABEL_45;
    }
    uint64_t v8 = *(void *)v24;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v6);
        }
        v10 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        v11 = (void *)[v10 _privateLocalContext];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && [v11 integerValue] == v5)
        {
          if (!v10) {
            goto LABEL_45;
          }
          if ((*(unsigned char *)v2 & 4) == 0)
          {
            if ((*(unsigned char *)v2 & 0x20) == 0) {
              goto LABEL_44;
            }
            v12 = *(__CFString **)(v2 + 40);
            if (v12) {
              CFRetain(*(CFTypeRef *)(v2 + 40));
            }
            uint64_t v27 = MEMORY[0x1E4F143A8];
            uint64_t v28 = 3321888768;
            v29 = ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__1cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke;
            v30 = &__block_descriptor_40_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__1_e20___UIDragPreview_8__0l;
            CFTypeRef cf = v12;
            if (v12) {
              CFRetain(v12);
            }
            uint64_t v13 = objc_msgSend((id)objc_msgSend(&v27, "copy"), "autorelease");
            CFTypeRef v14 = cf;
            CFTypeRef cf = 0;
            if (v14) {
              CFRelease(v14);
            }
            [v10 setPreviewProvider:v13];
            if (!v12) {
              goto LABEL_44;
            }
            goto LABEL_43;
          }
          if (*(void *)(v2 + 248))
          {
            v12 = (__CFString *)WTF::StringImpl::operator NSString *();
            if (!v12)
            {
              char v15 = 1;
LABEL_30:
              v16 = (const void *)WTF::URL::operator NSURL *();
              v17 = v16;
              if (v16) {
                CFRetain(v16);
              }
              uint64_t v27 = MEMORY[0x1E4F143A8];
              uint64_t v28 = 3321888768;
              v29 = ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__0cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke;
              v30 = &__block_descriptor_48_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__0_e20___UIDragPreview_8__0l;
              CFTypeRef cf = v12;
              if ((v15 & 1) == 0) {
                CFRetain(v12);
              }
              CFTypeRef v32 = v17;
              if (v17) {
                CFRetain(v17);
              }
              uint64_t v18 = objc_msgSend((id)objc_msgSend(&v27, "copy"), "autorelease");
              CFTypeRef v19 = v32;
              CFTypeRef v32 = 0;
              if (v19) {
                CFRelease(v19);
              }
              CFTypeRef v20 = cf;
              CFTypeRef cf = 0;
              if (v20) {
                CFRelease(v20);
              }
              [v10 setPreviewProvider:v18];
              if (v17) {
                CFRelease(v17);
              }
              if (v15) {
                goto LABEL_44;
              }
LABEL_43:
              CFRelease(v12);
LABEL_44:
              *(unsigned char *)(v2 + 296) = 0;
              goto LABEL_45;
            }
          }
          else
          {
            v12 = &stru_1EEA10550;
          }
          CFRetain(v12);
          char v15 = 0;
          goto LABEL_30;
        }
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v23 objects:&v27 count:16];
      if (v7) {
        continue;
      }
      break;
    }
LABEL_45:
    v2 += 312;
  }
  while (v2 != v3);
}

void sub_198D87DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf,CFTypeRef a24)
{
  CFRelease(v24);
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::addDefaultDropPreview(WebKit::DragDropInteractionState *this, CFTypeRef cf, UITargetedDragPreview *a3)
{
  uint64_t v7 = a3;
  uint64_t v3 = (uint64_t *)((char *)this + 416);
  CFTypeRef cfa = cf;
  if (cf) {
    CFRetain(cf);
  }
  WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::add<UITargetedDragPreview*&>(v3, &cfa, &v7, (uint64_t)v5);
  CFTypeRef v4 = cfa;
  CFTypeRef cfa = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_198D87EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::add<UITargetedDragPreview*&>(uint64_t *a1@<X0>, void *a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  v11 = (const void *)*a2;
  unint64_t v12 = ~(*a2 << 32) + *a2;
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = v8 + 16 * v15;
  v17 = *(const void **)v16;
  if (*(void *)v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = *(unsigned int *)(v8 - 4);
        }
        char v30 = 0;
        uint64_t v31 = v8 + 16 * v25;
        goto LABEL_35;
      }
      if (v17 == (const void *)-1) {
        uint64_t v18 = (void *)v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = v8 + 16 * v15;
      v17 = *(const void **)v16;
      ++v19;
    }
    while (*(void *)v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = (const void *)*a2;
      uint64_t v16 = (uint64_t)v18;
    }
  }
  *a2 = 0;
  CFTypeRef v20 = *(const void **)v16;
  *(void *)uint64_t v16 = v11;
  if (v20) {
    CFRelease(v20);
  }
  v21 = *a3;
  if (v21) {
    CFRetain(v21);
  }
  v22 = *(const void **)(v16 + 8);
  *(void *)(v16 + 8) = v21;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = *a1;
  if (*a1) {
    int v24 = *(_DWORD *)(v23 - 12) + 1;
  }
  else {
    int v24 = 1;
  }
  *(_DWORD *)(v23 - 12) = v24;
  uint64_t v26 = *a1;
  if (*a1) {
    int v27 = *(_DWORD *)(v26 - 12);
  }
  else {
    int v27 = 0;
  }
  uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
  unint64_t v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
    {
LABEL_28:
      uint64_t v16 = WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(a1, (const void **)v16);
      uint64_t v26 = *a1;
      if (*a1) {
        unint64_t v29 = *(unsigned int *)(v26 - 4);
      }
      else {
        unint64_t v29 = 0;
      }
    }
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_28;
  }
  uint64_t v31 = v26 + 16 * v29;
  char v30 = 1;
LABEL_35:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v31;
  *(unsigned char *)(a4 + 16) = v30;
}

uint64_t *WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::get<WTF::RetainPtr<UIDragItem>>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3 = *result;
  if (!*result)
  {
LABEL_8:
    *a3 = 0;
    return result;
  }
  unsigned int v4 = *(_DWORD *)(v3 - 8);
  unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
  uint64_t v9 = *(void *)(v3 + 16 * v8);
  if (v9 != a2)
  {
    int v10 = 1;
    while (v9)
    {
      uint64_t v8 = (v8 + v10) & v4;
      uint64_t v9 = *(void *)(v3 + 16 * v8);
      ++v10;
      if (v9 == a2) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  uint64_t result = *(uint64_t **)(v3 + 16 * v8 + 8);
  *a3 = result;
  if (result) {
    return (uint64_t *)CFRetain(result);
  }
  return result;
}

CFTypeRef WebKit::DragDropInteractionState::finalDropPreview(WebKit::DragDropInteractionState *this, UIDragItem *a2)
{
  WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::get<WTF::RetainPtr<UIDragItem>>((uint64_t *)this + 53, (uint64_t)a2, (uint64_t **)&cf);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
  return v2;
}

void WebKit::DragDropInteractionState::deliverDelayedDropPreview(WebKit::DragDropInteractionState *this, UIView *a2, UIView *a3, WebCore::Image **a4)
{
  WebKit::uiImageForImage((WebCore::DestinationColorSpace *)&v42, a4[11]);
  uint64_t v8 = v42;
  WebCore::cocoaColor((uint64_t *)&cf, (WebCore *)(a4 + 12), v9);
  WebKit::createTargetedDragPreview(&v41, (uint64_t)v8, a2, a3, (uint64_t)(a4 + 2), (uint64_t)(a4 + 6), (uint64_t)cf, 0, 0);
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
  CFTypeRef v11 = v41;
  if (!v41) {
    goto LABEL_65;
  }
  uint64_t v12 = *((void *)this + 52);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    unint64_t v14 = (CFTypeRef *)(v12 + 16 * v13);
    if (*(_DWORD *)(v12 - 12))
    {
      unsigned int v15 = (CFTypeRef *)*((void *)this + 52);
      if (v13)
      {
        uint64_t v16 = 16 * v13;
        unsigned int v15 = (CFTypeRef *)*((void *)this + 52);
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          v16 -= 16;
          if (!v16)
          {
            unsigned int v15 = v14;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    unsigned int v15 = (CFTypeRef *)(v12 + 16 * v13);
  }
  else
  {
    unsigned int v15 = 0;
    uint64_t v13 = 0;
  }
  unint64_t v14 = (CFTypeRef *)(v12 + 16 * v13);
LABEL_14:
  if (v12) {
    v17 = (CFTypeRef *)(v12 + 16 * *(unsigned int *)(v12 - 4));
  }
  else {
    v17 = 0;
  }
  if (v17 != v15)
  {
    uint64_t v18 = (uint64_t *)((char *)this + 424);
    do
    {
      int v19 = (void *)*v15;
      if (*v15) {
        CFRetain(*v15);
      }
      uint64_t v20 = *v18;
      if (*v18
        || (WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v18, 0), (uint64_t v20 = *v18) != 0))
      {
        int v21 = *(_DWORD *)(v20 - 8);
      }
      else
      {
        int v21 = 0;
      }
      unint64_t v22 = ((unint64_t)v19 + ~((void)v19 << 32)) ^ (((unint64_t)v19 + ~((void)v19 << 32)) >> 22);
      unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
      uint64_t v26 = (void *)(v20 + 16 * v25);
      int v27 = (const void *)*v26;
      if (*v26)
      {
        uint64_t v28 = 0;
        int v29 = 1;
        while (v27 != v19)
        {
          if (v27 == (const void *)-1) {
            uint64_t v28 = v26;
          }
          unsigned int v25 = (v25 + v29) & v21;
          uint64_t v26 = (void *)(v20 + 16 * v25);
          int v27 = (const void *)*v26;
          ++v29;
          if (!*v26)
          {
            if (v28)
            {
              *uint64_t v28 = 0;
              v28[1] = 0;
              --*(_DWORD *)(*v18 - 16);
              uint64_t v26 = v28;
            }
            goto LABEL_32;
          }
        }
      }
      else
      {
LABEL_32:
        if (v19)
        {
          CFRetain(v19);
          char v30 = (const void *)*v26;
          *uint64_t v26 = v19;
          if (v30) {
            CFRelease(v30);
          }
        }
        else
        {
          *uint64_t v26 = 0;
        }
        CFRetain(v11);
        uint64_t v31 = (const void *)v26[1];
        v26[1] = v11;
        if (v31) {
          CFRelease(v31);
        }
        uint64_t v32 = *v18;
        if (*v18) {
          int v33 = *(_DWORD *)(v32 - 12) + 1;
        }
        else {
          int v33 = 1;
        }
        *(_DWORD *)(v32 - 12) = v33;
        uint64_t v34 = *v18;
        if (*v18) {
          int v35 = *(_DWORD *)(v34 - 12);
        }
        else {
          int v35 = 0;
        }
        uint64_t v36 = (*(_DWORD *)(v34 - 16) + v35);
        unint64_t v37 = *(unsigned int *)(v34 - 4);
        if (v37 <= 0x400)
        {
          if (3 * v37 > 4 * v36) {
            goto LABEL_47;
          }
LABEL_46:
          WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v18, (const void **)v26);
          goto LABEL_47;
        }
        if (v37 <= 2 * v36) {
          goto LABEL_46;
        }
      }
LABEL_47:
      if (byte_1EB359BBB != 1)
      {
        int v39 = [MEMORY[0x1E4F429A0] instancesRespondToSelector:sel__setNeedsDropPreviewUpdate];
        byte_1EB359BBA = v39;
        byte_1EB359BBB = 1;
        if (!v39) {
          goto LABEL_50;
        }
LABEL_49:
        [v19 _setNeedsDropPreviewUpdate];
        goto LABEL_50;
      }
      if (byte_1EB359BBA) {
        goto LABEL_49;
      }
LABEL_50:
      if (v19) {
        CFRelease(v19);
      }
      v38 = v15 + 2;
      unsigned int v15 = v14;
      if (v38 != v14)
      {
        unsigned int v15 = v38;
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == v14)
          {
            unsigned int v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v17);
  }
  CFRelease(v11);
LABEL_65:
  if (v8) {
    CFRelease(v8);
  }
}

void sub_198D88500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

WebCore::DestinationColorSpace *WebKit::uiImageForImage(WebCore::DestinationColorSpace *this, WebCore::Image *a2)
{
  CFTypeRef v2 = this;
  if (!a2
    || (uint64_t v4 = WebCore::DestinationColorSpace::SRGB(this),
        this = (WebCore::DestinationColorSpace *)(*(void *(**)(WebCore::NativeImage **__return_ptr, WebCore::Image *, uint64_t))(*(void *)a2 + 288))(&v16, a2, v4), !v16))
  {
    *(void *)CFTypeRef v2 = 0;
    return this;
  }
  id v5 = objc_alloc(MEMORY[0x1E4F42A80]);
  this = (WebCore::DestinationColorSpace *)[v5 initWithCGImage:*(void *)WebCore::NativeImage::platformImage(v16)];
  *(void *)CFTypeRef v2 = this;
  unint64_t v7 = v16;
  uint64_t v16 = 0;
  if (!v7) {
    return this;
  }
  char v8 = 0;
  uint64_t v9 = *((void *)v7 + 1);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    this = (WebCore::DestinationColorSpace *)MEMORY[0x19972E8D0](v9);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  int v11 = 1;
  uint64_t v12 = v10 - 1;
  *(void *)(v9 + 8) = v10 - 1;
  if (v10 == 1)
  {
    uint64_t v15 = *(void *)(v9 + 16);
    uint64_t v13 = *(void *)(v9 + 24);
    *(void *)(v9 + 24) = 0;
    BOOL v14 = v15 != 0;
  }
  else
  {
    uint64_t v13 = 0;
    BOOL v14 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 == 1)
  {
    if (v12) {
      return this;
    }
  }
  else
  {
    this = (WebCore::DestinationColorSpace *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12) {
      return this;
    }
  }
  if (v13) {
    this = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (!v14) {
    return (WebCore::DestinationColorSpace *)WTF::fastFree((WTF *)v9, v6);
  }
  return this;
}

void sub_198D886D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    char v11 = 0;
    uint64_t v12 = *(void *)(a10 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11) {
      MEMORY[0x19972E8D0](v12);
    }
    uint64_t v13 = *(void *)(v12 + 8);
    int v14 = 1;
    uint64_t v15 = v13 - 1;
    *(void *)(v12 + 8) = v13 - 1;
    if (v13 == 1)
    {
      uint64_t v18 = *(void *)(v12 + 16);
      uint64_t v16 = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = 0;
      BOOL v17 = v18 != 0;
    }
    else
    {
      uint64_t v16 = 0;
      BOOL v17 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      if (v15) {
        goto LABEL_12;
      }
    }
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    if (!v17) {
      WTF::fastFree((WTF *)v12, a2);
    }
  }
LABEL_12:
  _Unwind_Resume(exception_object);
}

void WebKit::createTargetedDragPreview(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(float *)(a5 + 8) <= 0.0) {
    goto LABEL_14;
  }
  if (!a2) {
    goto LABEL_14;
  }
  if (*(float *)(a5 + 12) <= 0.0) {
    goto LABEL_14;
  }
  if (![a4 window]) {
    goto LABEL_14;
  }
  WebCore::FloatRect::operator CGRect();
  objc_msgSend(a3, "convertRect:toView:", a4);
  v38.origin.double x = v17;
  v38.origin.double y = v18;
  v38.size.double width = v19;
  v38.size.double height = v20;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v39, &v38);
  float v21 = v40;
  if (v40 <= 0.0) {
    goto LABEL_14;
  }
  float v22 = v41;
  if (v41 > 0.0)
  {
    float v24 = *(float *)(a5 + 8);
    float v23 = *(float *)(a5 + 12);
    unsigned int v25 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a6 + 12)];
    uint64_t v26 = *(unsigned int *)(a6 + 12);
    if (v26)
    {
      float v27 = v21 / v24;
      uint64_t v28 = *(CGPoint **)a6;
      uint64_t v29 = 16 * v26;
      float v30 = v22 / v23;
      do
      {
        v38.origin = *v28;
        WebCore::FloatRect::scale((WebCore::FloatRect *)&v38, v27, v30);
        uint64_t v31 = (void *)MEMORY[0x1E4F29238];
        WebCore::FloatRect::operator CGRect();
        uint64_t v32 = objc_msgSend(v31, "valueWithCGRect:");
        if (v32) {
          [v25 addObject:v32];
        }
        ++v28;
        v29 -= 16;
      }
      while (v29);
    }
    int v33 = (void *)[objc_alloc(MEMORY[0x1E4F42AA0]) initWithImage:a2];
    WebCore::FloatRect::operator CGRect();
    objc_msgSend(v33, "setFrame:");
    if ([v25 count]) {
      id v34 = (id)[objc_alloc(MEMORY[0x1E4F429B0]) initWithTextLineRects:v25];
    }
    else {
      id v34 = objc_alloc_init(MEMORY[0x1E4F429B0]);
    }
    int v35 = v34;
    if (a7) {
      [v34 setBackgroundColor:a7];
    }
    if (a8) {
      [v35 setVisiblePath:a8];
    }
    if (a9) {
      [a4 addSubview:v33];
    }
    WebCore::FloatRect::operator CGRect();
    double MidX = CGRectGetMidX(v42);
    WebCore::FloatRect::operator CGRect();
    unint64_t v37 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F429B8]), "initWithContainer:center:", a4, MidX, CGRectGetMidY(v43));
    *a1 = [objc_alloc(MEMORY[0x1E4F42ED0]) initWithView:v33 parameters:v35 target:v37];
    if (v37) {
      CFRelease(v37);
    }
    if (v35) {
      CFRelease(v35);
    }
    if (v33) {
      CFRelease(v33);
    }
    if (v25) {
      CFRelease(v25);
    }
  }
  else
  {
LABEL_14:
    *a1 = 0;
  }
}

void sub_198D88A18(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DragDropInteractionState::deliverDelayedDropPreview(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, double a5, double a6, double a7, double a8)
{
  *(double *)&v99[16] = a7;
  *(double *)&v99[24] = a8;
  *(double *)v99 = a5;
  *(double *)&v99[8] = a6;
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = [a3 count];
  uint64_t v11 = *((unsigned int *)a4 + 3);
  if (v10 == v11)
  {
    if (v11)
    {
      unint64_t v12 = 0;
      v94 = sel__setNeedsDropPreviewUpdate;
      v100 = (uint64_t *)(a1 + 424);
      v101 = (uint64_t *)(a1 + 416);
      do
      {
        uint64_t v13 = objc_msgSend(a3, "objectAtIndex:", v12, v94);
        if (v12 >= *((unsigned int *)a4 + 3))
        {
          __break(0xC471u);
          return;
        }
        uint64_t v14 = v13;
        uint64_t v15 = *a4;
        WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::get<WTF::RetainPtr<UIDragItem>>(v101, v13, (uint64_t **)&cf);
        CGFloat a = cf.a;
        cf.CGFloat a = 0.0;
        if (a != 0.0) {
          CFRelease(*(CFTypeRef *)&a);
        }
        [*(id *)&a size];
        double v19 = v18;
        if (v18 <= 0.0 || *(void *)&a == 0) {
          goto LABEL_83;
        }
        double v21 = v17;
        if (v17 <= 0.0) {
          goto LABEL_83;
        }
        uint64_t v22 = v15 + 16 * v12;
        float v23 = (int *)(v22 + 8);
        if (*(int *)(v22 + 8) < 1) {
          goto LABEL_83;
        }
        int v25 = *(_DWORD *)(v22 + 12);
        float v24 = (int *)(v22 + 12);
        if (v25 < 1) {
          goto LABEL_83;
        }
        uint64_t v26 = (int *)(v15 + 16 * v12);
        WebCore::IntRect::operator CGRect();
        v110.origin.double x = v27;
        v110.origin.double y = v28;
        v110.size.double width = v29;
        v110.size.double height = v30;
        CGRect v109 = CGRectIntersection(*(CGRect *)v99, v110);
        cf.CGFloat a = v109.origin.x;
        cf.b = v109.origin.y;
        cf.c = v109.size.width;
        cf.d = v109.size.height;
        v104[0] = WebCore::enclosingIntRect((WebCore *)&cf, v31);
        v104[1] = v32;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v105, (const WebCore::IntRect *)v104);
        if (v106.f32[0] > 0.0)
        {
          LODWORD(v33) = v106.i32[1];
          if (v106.f32[1] > 0.0)
          {
            objc_msgSend((id)objc_msgSend(*(id *)&a, "view", v33), "bounds");
            double v96 = v35;
            double v97 = v34;
            double v37 = v36;
            double v39 = v38;
            int v40 = *v24;
            float32x2_t v41 = v105;
            int v42 = v26[1];
            int v95 = *v26;
            int v43 = *v23;
            memset(&cf, 0, sizeof(cf));
            float32x2_t v44 = v106;
            CGAffineTransformMakeScale(&cf, (double)*v23 / v19, (double)*v24 / v21);
            id v45 = objc_alloc(MEMORY[0x1E4F429B8]);
            v104[0] = vadd_f32(v105, vmul_f32(v106, (float32x2_t)0x3F0000003F000000));
            WebCore::FloatPoint::operator CGPoint();
            CGAffineTransform v103 = cf;
            uint64_t v46 = objc_msgSend(v45, "initWithContainer:center:transform:", a2, &v103);
            double v47 = v39 * (float)((float)(v41.f32[1] - (float)v42) / (float)v40);
            double v48 = v37 * (float)((float)(v41.f32[0] - (float)v95) / (float)v43);
            objc_msgSend((id)objc_msgSend(*(id *)&a, "parameters"), "setVisiblePath:", objc_msgSend(MEMORY[0x1E4F427D0], "bezierPathWithRect:", v97 + v48, v96 + v47, v37 - (v48 + v37 * (float)((float)((float)(v43 + v95) - (float)(v41.f32[0] + v44.f32[0])) / (float)v43)), v39 - (v47 + v39 * (float)((float)((float)(v40 + v42) - (float)(v41.f32[1] + v44.f32[1])) / (float)v40))));
            if (v14) {
              CFRetain((CFTypeRef)v14);
            }
            v49 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F42ED0]), "initWithView:parameters:target:", objc_msgSend(*(id *)&a, "view"), objc_msgSend(*(id *)&a, "parameters"), v46);
            uint64_t v50 = *v100;
            if (*v100
              || (WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v100, 0), (uint64_t v50 = *v100) != 0))
            {
              int v51 = *(_DWORD *)(v50 - 8);
            }
            else
            {
              int v51 = 0;
            }
            unint64_t v52 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
            unint64_t v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            unint64_t v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            unsigned int v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = (const void **)(v50 + 16 * v55);
            v57 = *v56;
            if (!*v56)
            {
LABEL_29:
              v60 = v56[1];
              *v56 = (const void *)v14;
              v56[1] = v49;
              if (v60) {
                CFRelease(v60);
              }
              uint64_t v61 = *v100;
              if (*v100) {
                int v62 = *(_DWORD *)(v61 - 12) + 1;
              }
              else {
                int v62 = 1;
              }
              *(_DWORD *)(v61 - 12) = v62;
              uint64_t v85 = *v100;
              if (*v100) {
                int v86 = *(_DWORD *)(v85 - 12);
              }
              else {
                int v86 = 0;
              }
              uint64_t v87 = (*(_DWORD *)(v85 - 16) + v86);
              unint64_t v88 = *(unsigned int *)(v85 - 4);
              if (v88 > 0x400)
              {
                if (v88 > 2 * v87) {
                  goto LABEL_77;
                }
              }
              else if (3 * v88 > 4 * v87)
              {
                goto LABEL_77;
              }
              WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v100, v56);
              goto LABEL_77;
            }
            v58 = 0;
            int v59 = 1;
            while (v57 != (const void *)v14)
            {
              if (v57 == (const void *)-1) {
                v58 = v56;
              }
              unsigned int v55 = (v55 + v59) & v51;
              v56 = (const void **)(v50 + 16 * v55);
              v57 = *v56;
              ++v59;
              if (!*v56)
              {
                if (v58)
                {
                  *v58 = 0;
                  v58[1] = 0;
                  --*(_DWORD *)(*v100 - 16);
                  v56 = v58;
                }
                goto LABEL_29;
              }
            }
            if (v49) {
              CFRelease(v49);
            }
            if (v14) {
              CFRelease((CFTypeRef)v14);
            }
LABEL_77:
            if (byte_1EB359BBB == 1)
            {
              if (byte_1EB359BBA) {
                goto LABEL_79;
              }
            }
            else
            {
              int v90 = [MEMORY[0x1E4F429A0] instancesRespondToSelector:v94];
              byte_1EB359BBA = v90;
              byte_1EB359BBB = 1;
              if (v90) {
LABEL_79:
              }
                [(id)v14 _setNeedsDropPreviewUpdate];
            }
            if (v46)
            {
              v84 = (const void *)v46;
              goto LABEL_82;
            }
            goto LABEL_83;
          }
        }
        id v63 = objc_alloc(MEMORY[0x1E4F429B8]);
        LODWORD(cf.a) = *(_DWORD *)(v15 + 16 * v12) + *v23 / 2;
        HIDWORD(cf.a) = *(_DWORD *)(v15 + 16 * v12 + 4) + *v24 / 2;
        WebCore::IntPoint::operator CGPoint();
        uint64_t v64 = objc_msgSend(v63, "initWithContainer:center:", a2);
        if (v14) {
          CFRetain((CFTypeRef)v14);
        }
        v65 = (const void *)[*(id *)&a retargetedPreviewWithTarget:v64];
        v66 = v100;
        uint64_t v67 = *v100;
        if (*v100
          || (WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v100, 0), v66 = v100, (uint64_t v67 = *v100) != 0))
        {
          int v68 = *(_DWORD *)(v67 - 8);
        }
        else
        {
          int v68 = 0;
        }
        unint64_t v69 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        unint64_t v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
        unint64_t v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
        unsigned int v72 = v68 & ((v71 >> 31) ^ v71);
        v73 = (uint64_t *)(v67 + 16 * v72);
        v74 = (const void *)*v73;
        if (*v73)
        {
          v75 = 0;
          int v76 = 1;
          while (v74 != (const void *)v14)
          {
            if (v74 == (const void *)-1) {
              v75 = v73;
            }
            unsigned int v72 = (v72 + v76) & v68;
            v73 = (uint64_t *)(v67 + 16 * v72);
            v74 = (const void *)*v73;
            ++v76;
            if (!*v73)
            {
              if (v75)
              {
                uint64_t *v75 = 0;
                v75[1] = 0;
                --*(_DWORD *)(*v66 - 16);
                v73 = v75;
              }
              goto LABEL_46;
            }
          }
          if (v14) {
            CFRelease((CFTypeRef)v14);
          }
        }
        else
        {
LABEL_46:
          uint64_t *v73 = v14;
          if (v65) {
            CFRetain(v65);
          }
          v77 = (const void *)v73[1];
          v73[1] = (uint64_t)v65;
          if (v77) {
            CFRelease(v77);
          }
          uint64_t v78 = *v100;
          if (*v100) {
            int v79 = *(_DWORD *)(v78 - 12) + 1;
          }
          else {
            int v79 = 1;
          }
          *(_DWORD *)(v78 - 12) = v79;
          uint64_t v80 = *v100;
          if (*v100) {
            int v81 = *(_DWORD *)(v80 - 12);
          }
          else {
            int v81 = 0;
          }
          uint64_t v82 = (*(_DWORD *)(v80 - 16) + v81);
          unint64_t v83 = *(unsigned int *)(v80 - 4);
          if (v83 <= 0x400)
          {
            if (3 * v83 > 4 * v82) {
              goto LABEL_65;
            }
LABEL_64:
            WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(v100, (const void **)v73);
            goto LABEL_65;
          }
          if (v83 <= 2 * v82) {
            goto LABEL_64;
          }
        }
LABEL_65:
        if (byte_1EB359BBB == 1)
        {
          if (!byte_1EB359BBA) {
            goto LABEL_68;
          }
LABEL_67:
          [(id)v14 _setNeedsDropPreviewUpdate];
          goto LABEL_68;
        }
        int v89 = [MEMORY[0x1E4F429A0] instancesRespondToSelector:v94];
        byte_1EB359BBA = v89;
        byte_1EB359BBB = 1;
        if (v89) {
          goto LABEL_67;
        }
LABEL_68:
        if (v64)
        {
          v84 = (const void *)v64;
LABEL_82:
          CFRelease(v84);
        }
LABEL_83:
        ++v12;
      }
      while (v12 < *((unsigned int *)a4 + 3));
    }
  }
  else
  {
    v91 = qword_1EB357DA8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DA8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = [a3 count];
      uint64_t v93 = *((unsigned int *)a4 + 3);
      LODWORD(cf.a) = 134218240;
      *(void *)((char *)&cf.a + 4) = v92;
      WORD2(cf.b) = 2048;
      *(void *)((char *)&cf.b + 6) = v93;
      _os_log_error_impl(&dword_1985F2000, v91, OS_LOG_TYPE_ERROR, "Failed to animate image placeholders: number of drag items (%tu) does not match number of placeholders (%tu)", (uint8_t *)&cf, 0x16u);
    }
  }
}

void sub_198D89264(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

id WebKit::DragDropInteractionState::previewForLifting(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  WebKit::DragDropInteractionState::createDragPreviewInternal(a1, a2, a3, a4, 0, a5, &cf);
  id v5 = (void *)CFMakeCollectable(cf);

  return v5;
}

uint64_t WebKit::DragDropInteractionState::createDragPreviewInternal@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  [a2 _privateLocalContext];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || (uint64_t v15 = objc_msgSend((id)objc_msgSend(a2, "_privateLocalContext"), "integerValue"),
        (unsigned int v16 = *(_DWORD *)(a1 + 412)) == 0))
  {
LABEL_6:
    LOBYTE(v57[0]) = 0;
    char v67 = 0;
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)(a1 + 400) + 168;
  uint64_t v18 = 312 * v16;
  while (*(void *)(v17 + 136) != v15)
  {
    v17 += 312;
    v18 -= 312;
    if (!v18) {
      goto LABEL_6;
    }
  }
  long long v20 = *(_OWORD *)(v17 - 168);
  long long v21 = *(_OWORD *)(v17 - 152);
  uint64_t v58 = *(void *)(v17 - 136);
  v57[0] = v20;
  v57[1] = v21;
  uint64_t v22 = *(const void **)(v17 - 128);
  uint64_t v59 = (uint64_t)v22;
  if (v22) {
    CFRetain(v22);
  }
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v60, (const WebCore::TextIndicatorData *)(v17 - 120));
  std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)v61, (const WebCore::Path *)v17);
  float v23 = *(_DWORD **)(v17 + 80);
  if (v23) {
    *v23 += 2;
  }
  int v62 = v23;
  float v24 = *(_DWORD **)(v17 + 88);
  if (v24) {
    *v24 += 2;
  }
  id v63 = v24;
  long long v25 = *(_OWORD *)(v17 + 96);
  long long v65 = *(_OWORD *)(v17 + 112);
  long long v64 = v25;
  long long v66 = *(_OWORD *)(v17 + 128);
  char v67 = 1;
  if (*(unsigned char *)(a6 + 112))
  {
    WebKit::uiImageForImage((WebCore::DestinationColorSpace *)&v47, *(WebCore::Image **)(a6 + 88));
    uint64_t v26 = *(unsigned __int8 *)(a6 + 112);
    if (*(unsigned char *)(a6 + 112))
    {
      CGFloat v27 = v47;
      WebCore::cocoaColor((uint64_t *)v44, (WebCore *)(a6 + 96), v14);
      WebKit::createTargetedDragPreview(cf, (uint64_t)v27, a3, a4, a6 + 16, a6 + 48, (uint64_t)v44[0], 0, a5);
      CFTypeRef v28 = (id)CFMakeCollectable(cf[0]);
      *a7 = v28;
      if (v28) {
        CFRetain(v28);
      }
      CFTypeRef v29 = v44[0];
      v44[0] = 0;
      if (v29) {
        CFRelease(v29);
      }
      if (v27) {
        CFRelease(v27);
      }
      return std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, (WTF::StringImpl *)v14);
    }
    __break(1u);
LABEL_57:
    int v43 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, v14);
    }
LABEL_40:
    double v38 = v55;
    unsigned int v55 = 0;
    if (v38)
    {
      if (*((_DWORD *)v38 + 2) == 1) {
        (*(void (**)(WebCore::Image *))(*(void *)v38 + 8))(v38);
      }
      else {
        --*((_DWORD *)v38 + 2);
      }
    }
    int v40 = v54;
    unint64_t v54 = 0;
    if (v40)
    {
      if (v40[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v40 + 8))(v40);
      }
      else {
        --v40[2];
      }
    }
    float32x2_t v41 = v53;
    unint64_t v53 = 0;
    if (v41)
    {
      if (v41[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v41 + 8))(v41);
      }
      else {
        --v41[2];
      }
    }
    int v42 = v50;
    if (v50)
    {
      uint64_t v50 = 0;
      int v51 = 0;
      WTF::fastFree(v42, v14);
    }
    return std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, (WTF::StringImpl *)v14);
  }
  uint64_t v30 = v59;
  if (!v59 || (v57[0] & 0x63) == 0)
  {
    if (v60[112] && (v57[0] & 0x1C) != 0)
    {
      WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)&v47, (const WebCore::TextIndicatorData *)v60);
      WebKit::uiImageForImage((WebCore::DestinationColorSpace *)cf, v55);
      CFTypeRef v34 = cf[0];
      WebCore::cocoaColor((uint64_t *)&v46, (WebCore *)&v56, v35);
      WebKit::createTargetedDragPreview(v44, (uint64_t)v34, a3, a4, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)v46, 0, a5);
      CFTypeRef v36 = (id)CFMakeCollectable(v44[0]);
      *a7 = v36;
      if (v36) {
        CFRetain(v36);
      }
      CFTypeRef v37 = v46;
      CFTypeRef v46 = 0;
      if (v37) {
        CFRelease(v37);
      }
      if (v34) {
        CFRelease(v34);
      }
      uint64_t v26 = v56;
      if ((v56 & 0x8000000000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_57;
    }
LABEL_7:
    *a7 = 0;
    return std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, (WTF::StringImpl *)v14);
  }
  if ((v57[0] & 0x20) != 0 && v61[72])
  {
    WebCore::Path::Path((WebCore::Path *)&v47, (const WebCore::Path *)v61);
    uint64_t v31 = [MEMORY[0x1E4F427D0] bezierPathWithCGPath:WebCore::Path::platformPath((WebCore::Path *)&v47)];
    uint64_t v32 = v59;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)cf, (const CGRect *)((char *)v57 + 8));
    v44[0] = 0;
    v44[1] = 0;
    WebKit::createTargetedDragPreview(&v46, v32, a3, a4, (uint64_t)cf, (uint64_t)v44, 0, v31, a5);
    CFTypeRef v33 = (id)CFMakeCollectable(v46);
    *a7 = v33;
    if (v33) {
      CFRetain(v33);
    }
    if (v52 != -1) {
      ((void (*)(CFTypeRef *, uint64_t *))off_1EE9D3C90[v52])(cf, &v48);
    }
  }
  else
  {
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v47, (const CGRect *)((char *)v57 + 8));
    cf[0] = 0;
    cf[1] = 0;
    WebKit::createTargetedDragPreview(v44, v30, a3, a4, (uint64_t)&v47, (uint64_t)cf, 0, 0, a5);
    CFTypeRef v39 = (id)CFMakeCollectable(v44[0]);
    *a7 = v39;
    if (v39) {
      CFRetain(v39);
    }
  }
  return std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57, (WTF::StringImpl *)v14);
}

void sub_198D8984C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, char a12, uint64_t a13, CFTypeRef cf, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,int a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CFTypeRef a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,WTF *a42,int a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a24 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9D3C90[a24])(&a12, &a16);
  }
  std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a30, a2);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::DragDropInteractionState::previewForCancelling(WebKit::DragDropInteractionState *this, UIDragItem *a2, UIView *a3, UIView *a4)
{
  v16[0] = 0;
  char v23 = 0;
  WebKit::DragDropInteractionState::createDragPreviewInternal((uint64_t)this, a2, a3, a4, 1, (uint64_t)v16, &v24);
  if (v23)
  {
    if ((v22 & 0x8000000000000) != 0)
    {
      uint64_t v15 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v5);
      }
    }
    unint64_t v6 = v21;
    long long v21 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    unint64_t v7 = v20;
    long long v20 = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
    char v8 = v19;
    double v19 = 0;
    if (v8)
    {
      if (v8[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      }
      else {
        --v8[2];
      }
    }
    uint64_t v9 = v17;
    if (v17)
    {
      uint64_t v17 = 0;
      int v18 = 0;
      WTF::fastFree(v9, v5);
    }
  }
  id v10 = v24;
  uint64_t v11 = (const void *)[v24 view];
  unint64_t v12 = v11;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v13 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = v12;
  if (v13) {
    CFRelease(v13);
  }
  return (id)CFMakeCollectable(v10);
}

void sub_198D89CE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      id v24 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DragDropInteractionState::dragSessionWillRequestAdditionalItem(uint64_t a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebKit::DragSourceState,false>::reset[abi:sn180100](a1 + 80, a2);
  uint64_t v4 = _Block_copy(a2);
  _Block_release(*(const void **)(a1 + 64));
  *(void *)(a1 + 64) = v4;

  _Block_release(0);
}

void sub_198D89E68(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::clearStagedDragSource(uint64_t a1, WTF::StringImpl *a2)
{
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 392))
    {
      double v19 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      if (*(unsigned char *)(v4 + 312 * v3 + 160)) {
        WebCore::TextIndicatorData::~TextIndicatorData(v2, v18);
      }
      long long v20 = *v5;
      void *v5 = 0;
      if (v20) {
        CFRelease(v20);
      }
      _Unwind_Resume(v19);
    }
    unint64_t v7 = (long long *)(a1 + 80);
    unsigned int v8 = *(_DWORD *)(a1 + 412);
    if (v8 == *(_DWORD *)(a1 + 408))
    {
      WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::DragSourceState const&>(a1 + 400, (unint64_t)v7);
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 400);
      uint64_t v10 = v9 + 312 * v8;
      long long v11 = *v7;
      long long v12 = *(_OWORD *)(a1 + 96);
      *(void *)(v10 + 32) = *(void *)(a1 + 112);
      *(_OWORD *)uint64_t v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      uint64_t v13 = *(const void **)(a1 + 120);
      *(void *)(v10 + 40) = v13;
      if (v13) {
        CFRetain(v13);
      }
      std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)(v9 + 312 * v8 + 48), (const WebCore::TextIndicatorData *)(a1 + 128));
      std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)(v9 + 312 * v8 + 168), (const WebCore::Path *)(a1 + 248));
      uint64_t v14 = *(_DWORD **)(a1 + 328);
      if (v14) {
        *v14 += 2;
      }
      *(void *)(v9 + 312 * v8 + 248) = v14;
      uint64_t v15 = *(_DWORD **)(a1 + 336);
      if (v15) {
        *v15 += 2;
      }
      uint64_t v16 = v9 + 312 * v8;
      *(void *)(v16 + 256) = v15;
      long long v17 = *(_OWORD *)(a1 + 344);
      *(_OWORD *)(v16 + 280) = *(_OWORD *)(a1 + 360);
      *(_OWORD *)(v16 + 264) = v17;
      *(_OWORD *)(v16 + 296) = *(_OWORD *)(a1 + 376);
      ++*(_DWORD *)(a1 + 412);
    }
  }

  std::__optional_destruct_base<WebKit::DragSourceState,false>::reset[abi:sn180100](a1 + 80, a2);
}

uint64_t WebKit::DragDropInteractionState::dropSessionDidEnterOrUpdate(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = (const void *)a1[6];
  a1[6] = cf;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t result = WebCore::IntPoint::operator CGPoint();
  *a1 = v6;
  a1[1] = v7;
  return result;
}

void WebKit::DragDropInteractionState::stageDragItem(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  WebCore::IntPoint::operator CGPoint();
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unsigned int v8 = *(unsigned __int16 *)(a2 + 216);
  if (v8 <= 0x100) {
    LOBYTE(v8) = 0;
  }
  LOBYTE(v28) = v8;
  WebCore::IntRect::operator CGRect();
  *((void *)&v28 + 1) = v9;
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  uint64_t v31 = v12;
  CFTypeRef cf = a3;
  if (a3) {
    CFRetain(a3);
  }
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)&v33, (const WebCore::TextIndicatorData *)(a2 + 8));
  std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)&v41, (const WebCore::Path *)(a2 + 128));
  uint64_t v13 = *(void *)(a2 + 248);
  if (v13 && *(_DWORD *)(v13 + 4)) {
    uint64_t v14 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v14 = 0;
  }
  MEMORY[0x19972EAD0](&v45, v14);
  uint64_t v15 = *(void *)(a2 + 256);
  if (v15 && *(_DWORD *)(v15 + 4)) {
    uint64_t v16 = WTF::URL::operator NSURL *();
  }
  else {
    uint64_t v16 = 0;
  }
  MEMORY[0x19972E8A0](&v46, v16);
  char v47 = 1;
  char v48 = *(unsigned char *)(a2 + 312);
  uint64_t v49 = ++WebKit::DragDropInteractionState::stageDragItem(WebCore::DragItem const&,UIImage *)::currentDragSourceItemIdentifier;
  WebKit::DragSourceState::DragSourceState((uint64_t)v50, &v28);
  char v51 = 1;
  std::__optional_storage_base<WebKit::DragSourceState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::DragSourceState,false>>(a1 + 80, v50);
  std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50, v17);
  double v19 = v46;
  CFTypeRef v46 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v18);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  long long v20 = v45;
  id v45 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (v44)
  {
    if (v43 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9D3C90[v43])(&v27, &v42);
    }
    int v43 = -1;
  }
  if (v40)
  {
    if ((v39 & 0x8000000000000) != 0)
    {
      uint64_t v26 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v18);
      }
    }
    long long v21 = v38;
    double v38 = 0;
    if (v21)
    {
      if (v21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v21 + 8))(v21);
      }
      else {
        --v21[2];
      }
    }
    uint64_t v22 = v37;
    CFTypeRef v37 = 0;
    if (v22)
    {
      if (v22[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
      }
      else {
        --v22[2];
      }
    }
    char v23 = v36;
    CFTypeRef v36 = 0;
    if (v23)
    {
      if (v23[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
      }
      else {
        --v23[2];
      }
    }
    id v24 = v34;
    if (v34)
    {
      CFTypeRef v34 = 0;
      int v35 = 0;
      WTF::fastFree(v24, v18);
    }
  }
  CFTypeRef v25 = cf;
  CFTypeRef cf = 0;
  if (v25) {
    CFRelease(v25);
  }
}

void sub_198D8A360(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,uint64_t a28,_DWORD *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a53, a2);
  uint64_t v56 = *(WTF::StringImpl **)(v53 + 256);
  *(void *)(v53 + 256) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2) {
      WTF::StringImpl::destroy(v56, v55);
    }
    else {
      *(_DWORD *)v56 -= 2;
    }
  }
  v57 = *(WTF::StringImpl **)(v53 + 248);
  *(void *)(v53 + 248) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2) {
      WTF::StringImpl::destroy(v57, v55);
    }
    else {
      *(_DWORD *)v57 -= 2;
    }
  }
  if (a44)
  {
    uint64_t v58 = *(unsigned int *)(v53 + 232);
    if (v58 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9D3C90[v58])(&a13, &a36);
    }
    *(_DWORD *)(v53 + 232) = -1;
  }
  if (a34)
  {
    uint64_t v59 = *(void *)(v53 + 144);
    if ((v59 & 0x8000000000000) != 0)
    {
      long long v65 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v65);
        WTF::fastFree((WTF *)v65, v55);
      }
    }
    v60 = *(_DWORD **)(v53 + 136);
    *(void *)(v53 + 136) = 0;
    if (v60)
    {
      if (v60[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v60 + 8))(v60);
      }
      else {
        --v60[2];
      }
    }
    uint64_t v61 = *(_DWORD **)(v53 + 128);
    *(void *)(v53 + 128) = 0;
    if (v61)
    {
      if (v61[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v61 + 8))(v61);
      }
      else {
        --v61[2];
      }
    }
    int v62 = a29;
    a29 = 0;
    if (v62)
    {
      if (v62[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v62 + 8))(v62);
      }
      else {
        --v62[2];
      }
    }
    id v63 = a26;
    if (a26)
    {
      a26 = 0;
      a27 = 0;
      WTF::fastFree(v63, v55);
    }
  }
  CFTypeRef v64 = cf;
  CFTypeRef cf = 0;
  if (v64) {
    CFRelease(v64);
  }
  _Unwind_Resume(a1);
}

void WebKit::DragDropInteractionState::dragAndDropSessionsDidBecomeInactive(WebKit::DragDropInteractionState *this)
{
  CFTypeRef v2 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2)
  {
    [v2 removeFromSuperview];
    CFRelease(v2);
  }
  unsigned int v3 = (void (**)(void, void))*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    v3[2](v3, MEMORY[0x1E4F1CBF0]);
  }
  _Block_release(v3);
  uint64_t v4 = (void (**)(void))*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    v4[2](v4);
  }

  _Block_release(v4);
}

void sub_198D8A5D4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

id *WebKit::GestureRecognizerConsistencyEnforcer::GestureRecognizerConsistencyEnforcer(id *this, WKContentView *a2)
{
  *this = 0;
  inited = (WTF::RunLoop *)objc_initWeak(this, a2);
  uint64_t v4 = (WTF::RunLoop *)WTF::RunLoop::main(inited);
  id v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v5 = &unk_1EE9D3DB0;
  v5[1] = WebKit::GestureRecognizerConsistencyEnforcer::timerFired;
  v5[2] = 0;
  v5[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(this + 1), v4);
  this[1] = &unk_1EE9B3390;
  this[4] = v5;
  this[5] = 0;
  return this;
}

void sub_198D8A6A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void WebKit::GestureRecognizerConsistencyEnforcer::timerFired(id *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained(this);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    id v3 = objc_loadWeakRetained(this);
    uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v5 = (void *)[v3 deferringGestures];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          if (![v9 state] && objc_msgSend(v9, "isEnabled")) {
            [v4 addObject:v9];
          }
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }
      while (v6);
    }
    if (![v4 count]
      || (unint64_t)objc_msgSend((id)objc_msgSend(v3, "touchEventGestureRecognizer"), "state") < 3)
    {
      goto LABEL_22;
    }
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v10 = [v4 countByEnumeratingWithState:&v14 objects:v24 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v15;
      do
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v4);
          }
          [*(id *)(*((void *)&v14 + 1) + 8 * j) setState:3];
        }
        uint64_t v10 = [v4 countByEnumeratingWithState:&v14 objects:v24 count:16];
      }
      while (v10);
    }
    uint64_t v13 = qword_1EB358708;
    if (os_log_type_enabled((os_log_t)qword_1EB358708, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      char v23 = v4;
      _os_log_fault_impl(&dword_1985F2000, v13, OS_LOG_TYPE_FAULT, "Touch event gesture recognizer failed to reset after ending gesture deferral: %@", buf, 0xCu);
      if (!v3) {
        return;
      }
    }
    else
    {
LABEL_22:
      if (!v3) {
        return;
      }
    }
    CFRelease(v3);
  }
}

void sub_198D8A928(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::GestureRecognizerConsistencyEnforcer::~GestureRecognizerConsistencyEnforcer(WebKit::GestureRecognizerConsistencyEnforcer *this, void *a2)
{
  id v3 = (const void **)*((void *)this + 5);
  if (v3) {
    WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::deallocateTable(v3, a2);
  }
  *((void *)this + 1) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::GestureRecognizerConsistencyEnforcer *)((char *)this + 8));
  objc_destroyWeak((id *)this);
}

void WebKit::GestureRecognizerConsistencyEnforcer::beginTracking(WebKit::GestureRecognizerConsistencyEnforcer *this, WKDeferringGestureRecognizer *a2)
{
  WTF::RunLoop::TimerBase::stop((WebKit::GestureRecognizerConsistencyEnforcer *)((char *)this + 8));
  uint64_t v4 = (uint64_t *)((char *)this + 40);
  CFTypeRef cf = a2;
  if (a2) {
    CFRetain(a2);
  }
  WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::add(v4, &cf, (uint64_t)&v6);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_198D8AA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::GestureRecognizerConsistencyEnforcer::endTracking(WebKit::GestureRecognizerConsistencyEnforcer *this, WKDeferringGestureRecognizer *a2)
{
  id v3 = (uint64_t *)((char *)this + 40);
  uint64_t v7 = a2;
  uint64_t v4 = (const void **)WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>>,WKDeferringGestureRecognizer const*>((uint64_t *)this + 5, &v7);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = (const void **)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      return;
    }
  }
  else
  {
    if (!v4) {
      return;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4)
  {
    WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::remove(v3, v4);
    uint64_t v5 = *v3;
  }
  if (!v5 || !*(_DWORD *)(v5 - 12)) {
    WTF::RunLoop::TimerBase::start();
  }
}

const void **WebKit::GestureRecognizerConsistencyEnforcer::reset(WebKit::GestureRecognizerConsistencyEnforcer *this)
{
  WTF::RunLoop::TimerBase::stop((WebKit::GestureRecognizerConsistencyEnforcer *)((char *)this + 8));
  uint64_t result = (const void **)*((void *)this + 5);
  if (result)
  {
    *((void *)this + 5) = 0;
    return (const void **)WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::deallocateTable(result, v2);
  }
  return result;
}

void WebKit::PageClientImpl::~PageClientImpl(WebKit::PageClientImpl *this)
{
  uint64_t v2 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    CFRelease(v2);
  }
  objc_destroyWeak((id *)this + 5);

  WebKit::PageClientImplCocoa::~PageClientImplCocoa(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PageClientImpl::~PageClientImpl(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::PageClientImpl::~PageClientImpl(WebKit::PageClientImpl *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PageClientImpl::~PageClientImpl((WebKit::PageClientImpl *)((char *)this - 32));

  WTF::fastFree(v1, v2);
}

void WebKit::PageClientImpl::requestScroll(uint64_t a1, _DWORD *a2, void *a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  LODWORD(v8) = *a2;
  LODWORD(v9) = a2[1];
  objc_msgSend(WeakRetained, "_scrollToContentScrollPosition:scrollOrigin:animated:", *a3, a4, v8, v9);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8AC7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

double WebKit::PageClientImpl::viewScrollPosition(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  uint64_t v2 = (void *)[WeakRetained _scroller];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  if (!v2) {
    return 0.0;
  }
  [v2 contentOffset];
  v6.double x = v3;
  v6.double y = v4;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v7, &v6);
  LODWORD(result) = v7;
  return result;
}

void sub_198D8AD04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::PageClientImpl::canTakeForegroundAssertions(WebKit::PageClientImpl *this)
{
  {
    WebKit::EndowmentStateTracker::singleton(void)::tracker = 0u;
    unk_1EB35A4A0 = 0u;
  }
  if (*((unsigned char *)WebKit::EndowmentStateTracker::ensureState((WebKit::EndowmentStateTracker *)&WebKit::EndowmentStateTracker::singleton(void)::tracker)
       + 1))
    return 1;
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F963E8], "currentProcess"), "activeLimitations"), "runTime");
  return v2 == *MEMORY[0x1E4F964B8];
}

void WebKit::PageClientImpl::processDidExit(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _processDidExit];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  id v3 = objc_loadWeakRetained(this + 2);
  [v3 _processDidExit];
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198D8AE0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::processWillSwap(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _processWillSwap];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  id v3 = objc_loadWeakRetained(this + 2);
  [v3 _processWillSwap];
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198D8AE98(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didRelaunchProcess(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didRelaunchProcess];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  id v3 = objc_loadWeakRetained(this + 2);
  [v3 _didRelaunchProcess];
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198D8AF24(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCreateContextInWebProcessForVisibilityPropagation(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _webProcessDidCreateContextForVisibilityPropagation];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8AF90(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::createVisibilityPropagationView(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  uint64_t v2 = [WeakRetained _createVisibilityPropagationView];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v2;
}

void sub_198D8AFE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::gpuProcessDidExit(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _gpuProcessDidExit];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }

  return WebKit::PageClientImplCocoa::gpuProcessDidExit(this);
}

void sub_198D8B050(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didNotHandleTapAsClick(id *this, const WebCore::IntPoint *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didNotHandleTapAsClick:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B0C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didHandleTapAsHover(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didHandleTapAsHover];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B130(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCompleteSyntheticClick(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didCompleteSyntheticClick];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B198(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::decidePolicyForGeolocationPermissionRequest(uint64_t a1, uint64_t a2, const String *a3, uint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    int v7 = WeakRetained;
    double v8 = (void *)[*(id *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(*((void *)WeakRetained + 52) + 48) + 24))+ 8) _geolocationProvider];
    WebKit::FrameInfoData::FrameInfoData(&v14, a3);
    uint64_t v13 = *a4;
    *a4 = 0;
    [v8 decidePolicyForGeolocationRequestFromOrigin:&v14 completionHandler:&v13 view:v7];
    uint64_t v10 = v13;
    uint64_t v13 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = v19;
    long long v19 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (v18 != -1) {
      ((void (*)(uint64_t *, uint64_t *))off_1EE9D3D08[v18])(&v13, &v17);
    }
    int v18 = -1;
    CFTypeRef v12 = cf;
    CFTypeRef cf = 0;
    if (v12) {
      CFRelease(v12);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v15);
    CFRelease(v7);
  }
}

void sub_198D8B328(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef cf,uint64_t a37,uint64_t a38,uint64_t a39,int a40,WTF::StringImpl *a41)
{
  uint64_t v43 = a10;
  a10 = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  char v44 = a41;
  a41 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, a2);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  if (a40 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EE9D3D08[a40])(&a10, &a37);
  }
  a40 = -1;
  CFTypeRef v45 = cf;
  CFTypeRef cf = 0;
  if (v45) {
    CFRelease(v45);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a12);
  CFRelease(v41);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didStartProvisionalLoadForMainFrame(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _didStartProvisionalLoadForMainFrame];
  id v3 = objc_loadWeakRetained(this + 5);
  [v3 _didStartProvisionalLoadForMainFrame];
  if (v3) {
    CFRelease(v3);
  }
  [WeakRetained _hidePasswordView];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B468(_Unwind_Exception *exception_object)
{
  id v3 = v2;
  if (v3) {
    CFRelease(v3);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didFailProvisionalLoadForMainFrame(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _hidePasswordView];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B4EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCommitLoadForMainFrame(id *this, const WTF::String *a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _hidePasswordView];
  [WeakRetained _setHasCustomContentView:a3 loadedMIMEType:a2];
  id v7 = objc_loadWeakRetained(this + 5);
  [v7 _didCommitLoadForMainFrame];
  if (v7) {
    CFRelease(v7);
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B598(_Unwind_Exception *exception_object)
{
  id v3 = v2;
  if (v3) {
    CFRelease(v3);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::disableDoubleTapGesturesDuringTapIfNecessary(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _disableDoubleTapGesturesDuringTapIfNecessary:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B624(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::handleSmartMagnificationInformationForPotentialTap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleSmartMagnificationInformationForPotentialTap:a2 renderRect:a3 fitEntireRect:a4 viewportMinimumScale:a5 viewportMaximumScale:a6 nodeIsRootLevel:a7];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B6E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::setCursor(id *this, const WebCore::Cursor *a2)
{
  uint64_t result = WebKit::PageClientImpl::isViewWindowActive(this);
  if (result)
  {
    return MEMORY[0x1F4175F10](a2);
  }
  return result;
}

void WebKit::PageClientImpl::registerEditCommand(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(WTF::StringImpl **)(*(void *)a2 + 32);
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  CGPoint v6 = [[WKEditCommand alloc] initWithWebEditCommandProxy:a2];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  double v8 = (void *)[WeakRetained undoManagerForWebView];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  double v9 = &selRef_undoEditing_;
  if (a3) {
    double v9 = &selRef_redoEditing_;
  }
  [v8 registerUndoWithTarget:*(void *)(a1 + 48) selector:*v9 object:v6];
  if (v5 && *((_DWORD *)v5 + 1)) {
    [v8 setActionName:WTF::StringImpl::operator NSString *()];
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v10);
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
}

void sub_198D8B864(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (v4)
  {
    CFRelease(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  CFRelease(v3);
  if (!v2) {
    goto LABEL_10;
  }
LABEL_7:
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
LABEL_10:
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::clearAllEditCommands(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "removeAllActionsWithTarget:", this[6]);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8B92C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::canUndoRedo(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  CGFloat v4 = WeakRetained;
  if (a2) {
    uint64_t v5 = objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "canRedo");
  }
  else {
    uint64_t v5 = objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "canUndo");
  }
  uint64_t v6 = v5;
  if (v4) {
    CFRelease(v4);
  }
  return v6;
}

void sub_198D8B9A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::executeUndoRedo(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  CGFloat v4 = WeakRetained;
  if (a2) {
    objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "redo");
  }
  else {
    objc_msgSend((id)objc_msgSend(WeakRetained, "undoManager"), "undo");
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_198D8BA30(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::interpretKeyEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v6 = [WeakRetained _interpretKeyEvent:*(void *)(a2 + 88) isCharEvent:a3];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v6;
}

void sub_198D8BAA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::positionInformationDidChange(id *this, const InteractionInformationAtPosition *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _positionInformationDidChange:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8BB14(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::saveImageToLibrary(uint64_t a1, WebCore::SharedBuffer **a2)
{
  WebCore::SharedBuffer::createNSData((uint64_t *)&cf, *a2);
  UIImageDataWriteToSavedPhotosAlbum();
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198D8BB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::executeSavedCommandBySelector(WebKit::PageClientImpl *this, const WTF::String *a2)
{
  return 0;
}

void WebKit::PageClientImpl::selectionDidChange(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _selectionChanged];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8BBF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::assistiveTechnologyMakeFirstResponder(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained becomeFirstResponder];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8BC68(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

float WebKit::PageClientImpl::convertToDeviceSpace(WebKit::PageClientImpl *this, const FloatRect *a2)
{
  return a2->m_location.m_x;
}

float WebKit::PageClientImpl::convertToUserSpace(WebKit::PageClientImpl *this, const FloatRect *a2)
{
  return a2->m_location.m_x;
}

uint64_t WebKit::PageClientImpl::screenToRootView(id *this, const WebCore::IntPoint *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  WebCore::IntPoint::operator CGPoint();
  objc_msgSend(WeakRetained, "convertPoint:fromView:", 0);
  v6.double x = v3;
  v6.double y = v4;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v7, &v6);
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v7;
}

void sub_198D8BD04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::rootViewToScreen(id *this, const WebCore::IntRect *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  WebCore::IntRect::operator CGRect();
  objc_msgSend(WeakRetained, "convertRect:toView:", 0);
  v10[0] = v3;
  v10[1] = v4;
  v10[2] = v5;
  v10[3] = v6;
  uint64_t v8 = WebCore::enclosingIntRect((WebCore *)v10, v7);
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v8;
}

void sub_198D8BD98(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::accessibilityScreenToRootView(id *this, const WebCore::IntPoint *a2)
{
  WebCore::IntPoint::operator CGPoint();
  double v4 = v3;
  double v6 = v5;
  v11.double x = v3;
  v11.double y = v5;
  id WeakRetained = objc_loadWeakRetained(this + 5);
  if (objc_opt_respondsToSelector())
  {
    objc_msgSend(WeakRetained, "accessibilityConvertPointFromSceneReferenceCoordinates:", v4, v6);
    v11.double x = v8;
    v11.double y = v9;
  }
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v12, &v11);
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v12;
}

void sub_198D8BE40(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::relayAccessibilityNotification(uint64_t a1, void *a2, void *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (objc_opt_respondsToSelector())
  {
    if (*a2) {
      double v6 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      double v6 = &stru_1EEA10550;
    }
    [WeakRetained accessibilityRelayNotification:v6 notificationData:*a3];
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8BEF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::rootViewToAccessibilityScreen(id *this, const WebCore::IntRect *a2)
{
  WebCore::IntRect::operator CGRect();
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v19 = v3;
  double v20 = v5;
  double v21 = v7;
  double v22 = v9;
  id WeakRetained = objc_loadWeakRetained(this + 5);
  if (objc_opt_respondsToSelector())
  {
    objc_msgSend(WeakRetained, "accessibilityConvertRectToSceneReferenceCoordinates:", v4, v6, v8, v10, *(void *)&v19, *(void *)&v20, *(void *)&v21, *(void *)&v22);
    double v19 = v13;
    double v20 = v14;
    double v21 = v15;
    double v22 = v16;
  }
  uint64_t v17 = WebCore::enclosingIntRect((WebCore *)&v19, v12);
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v17;
}

void sub_198D8BFCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneWithKeyEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _didHandleKeyEvent:*(void *)(a2 + 88) eventWasHandled:a3];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C054(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneWithTouchEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _touchEvent:a2 preventsNativeGestures:a3];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C0D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneDeferringTouchStart(id *this, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _doneDeferringTouchStart:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C148(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneDeferringTouchMove(id *this, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _doneDeferringTouchMove:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C1B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::doneDeferringTouchEnd(id *this, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _doneDeferringTouchEnd:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C228(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = WTF::URL::operator NSURL *();
  if (*a4) {
    uint64_t v12 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v12 = &stru_1EEA10550;
  }
  if (*a5) {
    double v13 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    double v13 = &stru_1EEA10550;
  }
  [WeakRetained requestTextRecognition:v11 imageData:a3 sourceLanguageIdentifier:v12 targetLanguageIdentifier:v13 completionHandler:a6];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C314(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::dataOwnerForPasteboard(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = [WeakRetained _dataOwnerForPasteboard:a2];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v4;
}

void sub_198D8C374(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::createPopupMenuProxy(void *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::PageClientImpl::setTextIndicator(uint64_t a1, WebCore::TextIndicator **a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *a2;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)*a2 + 1;
  double v6 = v4;
  [WeakRetained setUpTextIndicator:&v6];
  double v5 = v6;
  double v6 = 0;
  if (v5) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(v5);
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::TextIndicator *a10)
{
  if (a10) {
    WTF::RefCounted<WebCore::TextIndicator>::deref(a10);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::clearTextIndicator(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained clearTextIndicator:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C480(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::setTextIndicatorAnimationProgress(id *this, float a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  *(float *)&double v4 = a2;
  [WeakRetained setTextIndicatorAnimationProgress:v4];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C4FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::makeViewBlank(id *this, int a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  double v4 = (void *)[WeakRetained layer];
  *(float *)&double v5 = (float)(a2 ^ 1u);
  [v4 setOpacity:v5];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C578(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showBrowsingWarning(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    double v6 = WeakRetained;
    [WeakRetained _showBrowsingWarning:a2 completionHandler:a3];
    CFRelease(v6);
  }
  else
  {
    v7[0] = 0;
    int v8 = 0;
    WTF::CompletionHandler<void ()(std::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &&)>::operator()(a3);
    ((void (*)(char *, unsigned char *))off_1EE9D3D18[v8])(&v9, v7);
  }
}

void sub_198D8C640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9D3D18[a15])(v15 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::clearBrowsingWarning(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _clearBrowsingWarning];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C6D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::clearBrowsingWarningIfForMainFrameNavigation(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _clearBrowsingWarningIfForMainFrameNavigation];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C738(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::didPerformDictionaryLookup(uint64_t a1)
{
  return 0;
}

void sub_198D8C83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::acceleratedCompositingRootLayer(WebKit::PageClientImpl *this)
{
  return 0;
}

void WebKit::PageClientImpl::takeViewSnapshot(uint64_t a1@<X0>, void *a2@<X8>)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    double v4 = WeakRetained;
    [WeakRetained _takeViewSnapshot];
    CFRelease(v4);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_198D8C940(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::commitPotentialTapFailed(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _commitPotentialTapFailed];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8C9A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didGetTapHighlightGeometries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  LOBYTE(v17) = a9;
  [WeakRetained _didGetTapHighlightForRequest:a2 color:a3 quads:a4 topLeftRadius:a5 topRightRadius:a6 bottomLeftRadius:a7 bottomRightRadius:a8 nodeHasBuiltInClickHandling:v17];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CA8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::couldNotRestorePageState(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _couldNotRestorePageState];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CAF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::restorePageState(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, _DWORD *a5, double a6)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  LODWORD(v12) = *a4;
  LODWORD(v13) = a4[1];
  LODWORD(v14) = *a5;
  LODWORD(v15) = a5[1];
  LODWORD(v16) = a5[2];
  LODWORD(v17) = a5[3];
  objc_msgSend(WeakRetained, "_restorePageScrollPosition:scrollOrigin:previousObscuredInset:scale:", a2, a3, v12, v13, v14, v15, v16, v17, a6);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CBAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::restorePageCenterAndScale(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  objc_msgSend(WeakRetained, "_restorePageStateToUnobscuredCenter:scale:", a2, a3, a4);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CC44(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::elementDidFocus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5, API::Object *this)
{
  if (this) {
    API::Object::toNSObject(this, &cf);
  }
  else {
    CFTypeRef cf = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _elementDidFocus:a2 userIsInteracting:a3 blurPreviousNode:a4 activityStateChanges:a5 userObject:cf];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  CFTypeRef v12 = cf;
  CFTypeRef cf = 0;
  if (v12) {
    CFRelease(v12);
  }
}

void sub_198D8CCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::updateInputContextAfterBlurringAndRefocusingElement(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _updateInputContextAfterBlurringAndRefocusingElement];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CD7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::updateFocusedElementInformation(id *this, const FocusedElementInformation *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _updateFocusedElementInformation:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CDEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::isFocusingElement(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  uint64_t v2 = [WeakRetained isFocusingElement];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v2;
}

void sub_198D8CE44(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::elementDidBlur(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _elementDidBlur];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CEAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::focusedElementDidChangeInputMode(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _didUpdateInputMode:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CF1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didUpdateEditorState(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didUpdateEditorState];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8CF84(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showPlaybackTargetPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (*a5) {
    double v10 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    double v10 = &stru_1EEA10550;
  }
  [WeakRetained _showPlaybackTargetPicker:a2 fromRect:a3 routeSharingPolicy:a4 routingContextUID:v10];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D040(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::handleRunOpenPanel(id *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, const FrameInfoData *a4, OpenPanelParameters *a5, WebOpenPanelResultListenerProxy *a6)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _showRunOpenPanel:a5 frameInfo:a4 resultListener:a6];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return 1;
}

void sub_198D8D0B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::showShareSheet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7[0] = 0;
  v7[16] = 0;
  [WeakRetained _showShareSheet:a2 inRect:v7 completionHandler:a3];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return 1;
}

void sub_198D8D134(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showContactPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _showContactPicker:a2 completionHandler:a3];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D1B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showInspectorHighlight(id *this, const InspectorOverlayHighlight *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _showInspectorHighlight:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D228(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::hideInspectorHighlight(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _hideInspectorHighlight];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D290(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showInspectorIndication(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained setShowingInspectorIndication:1];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D2FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::hideInspectorIndication(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained setShowingInspectorIndication:0];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D368(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::enableInspectorNodeSearch(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _enableInspectorNodeSearch];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D3D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::disableInspectorNodeSearch(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _disableInspectorNodeSearch];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D438(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::closeFullScreenManager(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained closeFullScreenWindowController];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D4A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebKit::PageClientImpl::closeFullScreenManager(id *this)
{
}

void WebKit::PageClientImpl::enterFullScreen(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  uint64_t v2 = (void *)[WeakRetained fullScreenWindowController];
  WebCore::FloatSize::operator CGSize();
  objc_msgSend(v2, "enterFullScreen:");
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D518(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebKit::PageClientImpl::enterFullScreen(uint64_t a1)
{
}

void WebKit::PageClientImpl::exitFullScreen(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "exitFullScreen");
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D58C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebKit::PageClientImpl::exitFullScreen(id *this)
{
}

uint64_t WebKit::PageClientImpl::lockFullscreenOrientation(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  double v4 = (void *)[WeakRetained fullScreenWindowController];
  if ((a2 - 1) > 2) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = qword_1994F6E28[(char)(a2 - 1)];
  }
  [v4 setSupportedOrientations:v5];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return 1;
}

void sub_198D8D614(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebKit::PageClientImpl::lockFullscreenOrientation(uint64_t a1, int a2)
{
  return 1;
}

void WebKit::PageClientImpl::unlockFullscreenOrientation(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "resetSupportedOrientations");
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D6A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebKit::PageClientImpl::unlockFullscreenOrientation(id *this)
{
}

void WebKit::PageClientImpl::beganEnterFullScreen(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  double v4 = (void *)[WeakRetained fullScreenWindowController];
  WebCore::IntRect::operator CGRect();
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  WebCore::IntRect::operator CGRect();
  objc_msgSend(v4, "beganEnterFullScreenWithInitialFrame:finalFrame:", v6, v8, v10, v12, v13, v14, v15, v16);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D788(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebKit::PageClientImpl::beganEnterFullScreen(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
}

void WebKit::PageClientImpl::beganExitFullScreen(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  double v4 = (void *)[WeakRetained fullScreenWindowController];
  WebCore::IntRect::operator CGRect();
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  WebCore::IntRect::operator CGRect();
  objc_msgSend(v4, "beganExitFullScreenWithInitialFrame:finalFrame:", v6, v8, v10, v12, v13, v14, v15, v16);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D870(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'WebKit::PageClientImpl::beganExitFullScreen(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
}

void WebKit::PageClientImpl::didFinishLoadingDataForCustomContentProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  double v8 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a3 length:a4];
  [WeakRetained _didFinishLoadingDataForCustomContentProviderWithSuggestedFilename:a2 data:v8];
  if (v8) {
    CFRelease(v8);
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D92C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scrollingNodeScrollViewWillStartPanGesture(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained scrollViewWillStartPanOrPinchGesture];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8D9A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scrollingNodeScrollViewDidScroll(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _didScroll];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8DA10(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scrollingNodeScrollWillStartScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_scrollingNodeScrollingWillBegin:", a2, a3);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8DA94(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scrollingNodeScrollDidEndScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_scrollingNodeScrollingDidEnd:", a2, a3);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8DB18(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::navigationGestureDidBegin(id *this)
{
  id WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained;
    [WeakRetained _navigationGestureDidBegin];
    double v4 = (id *)WebKit::NavigationState::fromWebPage(v2[52], v3);
    if (v4) {
      WebKit::NavigationState::navigationGestureDidBegin(v4);
    }
    CFRelease(v2);
  }
}

void sub_198D8DB98(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::navigationGestureWillEnd(id *this, int a2, WebKit::WebBackForwardListItem *a3)
{
  id WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    double v7 = WeakRetained;
    uint64_t v8 = WebKit::NavigationState::fromWebPage(WeakRetained[52], v6);
    if (v8) {
      WebKit::NavigationState::navigationGestureWillEnd(v8, a2, (uint64_t)a3);
    }
    CFRelease(v7);
  }
}

void sub_198D8DC30(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::navigationGestureDidEnd(id *this, int a2, WebKit::WebBackForwardListItem *a3)
{
  id WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    double v7 = WeakRetained;
    uint64_t v8 = WebKit::NavigationState::fromWebPage(WeakRetained[52], v6);
    if (v8) {
      WebKit::NavigationState::navigationGestureDidEnd(v8, a2, (uint64_t)a3);
    }
    [v7 _navigationGestureDidEnd];
    CFRelease(v7);
  }
}

void sub_198D8DCCC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::navigationGestureDidEnd(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _navigationGestureDidEnd];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8DD34(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::willRecordNavigationSnapshot(id *this, WebKit::WebBackForwardListItem *a2)
{
  id WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    double v5 = WeakRetained;
    uint64_t v6 = WebKit::NavigationState::fromWebPage(WeakRetained[52], v4);
    if (v6) {
      WebKit::NavigationState::willRecordNavigationSnapshot(v6, (uint64_t)a2);
    }
    CFRelease(v5);
  }
}

void sub_198D8DDB8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didRemoveNavigationGestureSnapshot(id *this)
{
  id WeakRetained = (WebKit::NavigationState **)objc_loadWeakRetained(this + 2);
  if (WeakRetained)
  {
    double v3 = WeakRetained;
    double v4 = (id *)WebKit::NavigationState::fromWebPage(WeakRetained[52], v2);
    if (v4) {
      WebKit::NavigationState::navigationGestureSnapshotWasRemoved(v4);
    }
    CFRelease(v3);
  }
}

void sub_198D8DE30(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didFinishNavigation(id *this, Navigation *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _didFinishNavigation:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8DEA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didFailNavigation(id *this, Navigation *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _didFailNavigation:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8DF10(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didSameDocumentNavigationForMainFrame(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  [WeakRetained _didSameDocumentNavigationForMainFrame:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8DF80(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didChangeBackgroundColor(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _updateScrollViewBackground];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8DFE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::videoControlsManagerDidChange(id *this)
{
  WebKit::PageClientImplCocoa::videoControlsManagerDidChange(this);
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _videoControlsManagerDidChange];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8E058(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::createValidationBubble@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  id Weak = objc_loadWeak((id *)(a1 + 40));
  uint64_t v8 = WTF::fastMalloc((WTF *)0x48);
  uint64_t result = MEMORY[0x1997337A0](v8, Weak, a2, a3);
  *a4 = v8;
  return result;
}

void sub_198D8E0D8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::createColorPicker(void *a1@<X8>)
{
  *a1 = 0;
}

WebKit::WebDataListSuggestionsDropdown *WebKit::PageClientImpl::createDataListSuggestionsDropdown@<X0>(id *this@<X0>, WebKit::WebPageProxy *a2@<X1>, WebKit::WebDataListSuggestionsDropdown **a3@<X8>)
{
  id Weak = objc_loadWeak(this + 5);
  uint64_t v6 = (WebKit::WebDataListSuggestionsDropdown *)WTF::fastMalloc((WTF *)0x30);
  uint64_t result = WebKit::WebDataListSuggestionsDropdown::WebDataListSuggestionsDropdown(v6, a2);
  *(void *)uint64_t result = &unk_1EE9D4590;
  *((void *)result + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = Weak;
  *((void *)result + 5) = 0;
  *a3 = result;
  return result;
}

void WebKit::PageClientImpl::createDateTimePicker(void *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::PageClientImpl::didPerformDragOperation(id *this, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didPerformDragOperation:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8E1C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didHandleDragStartRequest(id *this, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didHandleDragStartRequest:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8E230(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didHandleAdditionalDragItemsRequest(id *this, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didHandleAdditionalDragItemsRequest:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8E2A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::startDrag(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebCore::ShareableBitmap::create();
  if (v9)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    WebCore::ShareableBitmap::makeCGImageCopy((uint64_t *)&cf, v9);
    [WeakRetained _startDrag:&cf item:a2];
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7)
    {
      CFRelease(v7);
      if (!WeakRetained)
      {
LABEL_5:
        uint64_t result = (uint64_t)v9;
        double v9 = 0;
        if (result) {
          return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, v6);
        }
        return result;
      }
    }
    else if (!WeakRetained)
    {
      goto LABEL_5;
    }
    CFRelease(WeakRetained);
    goto LABEL_5;
  }
  return result;
}

void sub_198D8E358(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::willReceiveEditDragSnapshot(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _willReceiveEditDragSnapshot];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8E3F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didReceiveEditDragSnapshot(uint64_t a1, const WebCore::TextIndicatorData *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v10, a2);
  [WeakRetained _didReceiveEditDragSnapshot:v10];
  if (v17)
  {
    if ((v16 & 0x8000000000000) != 0)
    {
      double v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v4);
      }
    }
    double v5 = v15;
    double v15 = 0;
    if (v5)
    {
      if (v5[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
      }
      else {
        --v5[2];
      }
    }
    uint64_t v6 = v14;
    double v14 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    CFTypeRef v7 = v13;
    double v13 = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
    uint64_t v8 = v11;
    if (v11)
    {
      double v11 = 0;
      int v12 = 0;
      WTF::fastFree(v8, v4);
    }
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
}

void sub_198D8E570(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      uint64_t v26 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  if (v24) {
    CFRelease(v24);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didChangeDragCaretRect(id *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  WebCore::IntRect::operator CGRect();
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  WebCore::IntRect::operator CGRect();
  objc_msgSend(WeakRetained, "_didChangeDragCaretRect:currentRect:", v5, v7, v9, v11, v12, v13, v14, v15);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8E760(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::performSwitchHapticFeedback(WebKit::PageClientImpl *this)
{
  unsigned int v1 = (void *)[objc_alloc(MEMORY[0x1E4F42AA8]) initWithStyle:0];
  [v1 impactOccurred];
  if (v1)
  {
    CFRelease(v1);
  }
}

void sub_198D8E7D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::requestPasswordForQuickLookDocument(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  double v6 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *double v6 = MEMORY[0x1E4F14398];
  v6[1] = 50331650;
  v6[2] = WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::descriptor;
  v6[4] = v5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  double v8 = (void *)[WeakRetained _passwordView];
  double v9 = v8;
  if (v8)
  {
    [v8 showPasswordFailureAlert];
    [v9 setUserDidEnterPassword:v6];
  }
  else
  {
    if (*a2) {
      double v10 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      double v10 = &stru_1EEA10550;
    }
    [WeakRetained _showPasswordViewWithDocumentName:v10 passwordHandler:v6];
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }

  _Block_release(v6);
}

void sub_198D8E8F8(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::requestDOMPasteAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _requestDOMPasteAccessForCategory:a2 requiresInteraction:a3 elementRect:a4 originIdentifier:a5 completionHandler:a6];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8E9E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::cancelPointersForGestureRecognizer(id *this, UIGestureRecognizer *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained cancelPointersForGestureRecognizer:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8EA58(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::activeTouchIdentifierForGestureRecognizer(id *this, UIGestureRecognizer *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  uint64_t v4 = [WeakRetained activeTouchIdentifierForGestureRecognizer:a2];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v4;
}

void sub_198D8EAB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::handleAutocorrectionContext(id *this, const WebAutocorrectionContext *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _handleAutocorrectionContext:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8EB28(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showDataDetectorsUIForPositionInformation(id *this, const InteractionInformationAtPosition *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _showDataDetectorsUIForPositionInformation:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8EB9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::hardwareKeyboardAvailabilityChanged(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _hardwareKeyboardAvailabilityChanged];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8EC04(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCleanupFullscreen(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "didCleanupFullscreen");
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8EC70(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::writePromisedAttachmentToPasteboard(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _writePromisedAttachmentToPasteboard:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8ECE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::setMouseEventPolicy(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _setMouseEventPolicy:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8ED50(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _showMediaControlsContextMenu:a2 items:a3 completionHandler:a4];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8EDDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::handleAsynchronousCancelableScrollEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  [WeakRetained scrollView:a2 handleScrollUpdate:a3 completion:a4];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8EE68(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::runModalJavaScriptDialog(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained runModalJavaScriptDialog:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8EED8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c65_ZTSKZN6WebKit14PageClientImpl26contentViewBackgroundColorEvE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t WebKit::PageClientImpl::isScreenBeingCaptured(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  uint64_t v2 = [WeakRetained screenIsBeingCaptured];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v2;
}

void sub_198D8EF40(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::requestScrollToRect(id *this, const WebCore::FloatRect *a2, const WebCore::FloatPoint *a3)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  WebCore::FloatRect::operator CGRect();
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  WebCore::FloatPoint::operator CGPoint();
  objc_msgSend(WeakRetained, "_scrollToRect:withOrigin:minimumScrollDistance:", v5, v7, v9, v11, v12, v13, 0.0);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8F014(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::sceneID(id *this@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  MEMORY[0x19972EAD0](a2, objc_msgSend((id)objc_msgSend((id)objc_msgSend(WeakRetained, "window"), "windowScene"), "_sceneIdentifier"));
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8F094(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::beginTextRecognitionForFullscreenVideo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained beginTextRecognitionForFullscreenVideo:a2 playerViewController:a3];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8F118(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::cancelTextRecognitionForFullscreenVideo(id *this, AVPlayerViewController *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained cancelTextRecognitionForFullscreenVideo:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8F188(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::isTextRecognitionInFullscreenVideoEnabled(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  uint64_t v2 = [WeakRetained isTextRecognitionInFullscreenVideoEnabled];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v2;
}

void sub_198D8F1E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::beginTextRecognitionForVideoInElementFullscreen(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(float *)&double v12 = a3;
  *(float *)&double v13 = a4;
  *(float *)&double v14 = a5;
  *(float *)&double v15 = a6;
  objc_msgSend(WeakRetained, "beginTextRecognitionForVideoInElementFullscreen:bounds:", a2, v12, v13, v14, v15);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8F288(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::cancelTextRecognitionForVideoInElementFullscreen(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained cancelTextRecognitionForVideoInElementFullscreen];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8F2F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PageClientImpl::presentingViewController(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "isFullScreen"))
  {
    uint64_t v2 = objc_msgSend((id)objc_msgSend(WeakRetained, "fullScreenWindowController"), "fullScreenViewController");
    if (!WeakRetained) {
      return v2;
    }
  }
  else
  {
    uint64_t v3 = WeakRetained[52];
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 + 8));
      uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(v3 + 104) + 488))(*(void *)(v3 + 104));
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  CFRelease(WeakRetained);
  return v2;
}

void sub_198D8F3C4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(v1);
  _Unwind_Resume(a1);
}

float WebKit::PageClientImpl::rootViewToWebView(id *this, const WebCore::FloatRect *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  WebCore::FloatRect::operator CGRect();
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  id v12 = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "convertRect:fromView:", v12, v5, v7, v9, v11);
  v18.origin.double x = v13;
  v18.origin.double y = v14;
  v18.size.double width = v15;
  v18.size.double height = v16;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v19, &v18);
  if (v12) {
    CFRelease(v12);
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v19;
}

void sub_198D8F4B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

float WebKit::PageClientImpl::webViewToRootView(id *this, const WebCore::FloatPoint *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  WebCore::FloatPoint::operator CGPoint();
  double v5 = v4;
  double v7 = v6;
  id v8 = objc_loadWeakRetained(this + 5);
  objc_msgSend(WeakRetained, "convertPoint:toView:", v8, v5, v7);
  v12.double x = v9;
  v12.double y = v10;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v13, &v12);
  if (v8) {
    CFRelease(v8);
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v13;
}

void sub_198D8F58C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::scheduleVisibleContentRectUpdate(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  [WeakRetained _scheduleVisibleContentRectUpdate];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198D8F60C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ProcessStateMonitor::ProcessStateMonitor(uint64_t a1, uint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v3;
  double v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  double v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9D3DD8;
  v5[1] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 24), v4);
  *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = &unk_1EE9B3390;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = 0;
  double v6 = qword_1EB358348;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v24 = a1;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::ProcessStateMonitor", buf, 0xCu);
  }
  id v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v7);
  if ((WTF::RunLoop::isCurrent(v8) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8F87CLL);
  }
  CGFloat v9 = (void *)MEMORY[0x1E4F96418];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3321888768;
  v21[2] = ___ZN6WebKit19ProcessStateMonitorC2EON3WTF8FunctionIFvbEEE_block_invoke;
  v21[3] = &__block_descriptor_40_e8_32c65_ZTSKZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEE3__1_e40_v16__0___RBSProcessMonitorConfiguring__8l;
  uint64_t v10 = *(void *)a1;
  if (*(void *)a1) {
    goto LABEL_9;
  }
  uint64_t v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v10 = 1;
  *(void *)(v10 + 8) = a1;
  CGPoint v12 = *(unsigned int **)a1;
  *(void *)a1 = v10;
  if (!v12) {
    goto LABEL_9;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  uint64_t v10 = *(void *)a1;
  if (*(void *)a1)
  {
LABEL_9:
    char v13 = 0;
    atomic_fetch_add((atomic_uint *volatile)v10, 1u);
    atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  }
  else
  {
    char v13 = 1;
  }
  double v22 = (WTF *)v10;
  CGFloat v14 = (const void *)[v9 monitorWithConfiguration:v21];
  CGFloat v16 = v14;
  if (v14) {
    CFRetain(v14);
  }
  char v17 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = v16;
  if (v17) {
    CFRelease(v17);
  }
  if ((v13 & 1) == 0 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v10);
    WTF::fastFree((WTF *)v10, v15);
  }
  WebKit::ProcessStateMonitor::checkRemainingRunTime((WebKit::ProcessStateMonitor *)a1);
  float v19 = (unsigned int *)v22;
  double v22 = 0;
  if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v19);
    WTF::fastFree((WTF *)v19, v18);
  }
  return a1;
}

void sub_198D8F8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  CGRect v18 = *(const void **)(v14 + 56);
  *(void *)(v14 + 56) = 0;
  if (v18) {
    CFRelease(v18);
  }
  *(void *)(v14 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v16;
  uint64_t v19 = *(void *)(v14 + 48);
  *(void *)(v14 + 48) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::RunLoop::TimerBase::~TimerBase(v15);
  uint64_t v21 = *(void *)(v14 + 16);
  *(void *)(v14 + 16) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v14, v20);
  _Unwind_Resume(a1);
}

unsigned int *___ZN6WebKit19ProcessStateMonitorC2EON3WTF8FunctionIFvbEEE_block_invoke(uint64_t a1, void *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  double v4 = (void *)[MEMORY[0x1E4F96448] descriptor];
  [v4 setValues:24];
  [a2 setStateDescriptor:v4];
  v11[0] = objc_msgSend(MEMORY[0x1E4F96430], "predicateMatchingHandle:", objc_msgSend(MEMORY[0x1E4F963E8], "currentProcess"));
  objc_msgSend(a2, "setPredicates:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v11, 1));
  double v5 = (void *)(a1 + 32);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3321888768;
  v9[2] = ___ZZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEEN3__1clEPU39objcproto28RBSProcessMonitorConfiguring11objc_object_block_invoke;
  v9[3] = &__block_descriptor_40_e8_32c194_ZTSKZZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEEN3__1clEPU39objcproto28RBSProcessMonitorConfiguring11objc_objectEUlP17RBSProcessMonitorP16RBSProcessHandleP21RBSProcessStateUpdateE__e74_v32__0__RBSProcessMonitor_8__RBSProcessHandle_16__RBSProcessStateUpdate_24l;
  double v6 = *(atomic_uint **)(a1 + 32);
  void *v5 = 0;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v10 = (WTF *)v6;
  [a2 setUpdateHandler:v9];
  if (v6 && atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v6);
    WTF::fastFree((WTF *)v6, v7);
  }
  __n128 result = (unsigned int *)v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

void sub_198D8FB88(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if (!v14) {
      goto LABEL_7;
    }
  }
  else if (!v14)
  {
    goto LABEL_7;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c65_ZTSKZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEE3__1(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c65_ZTSKZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEE3__1(uint64_t a1, void *a2)
{
  __n128 result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebKit::ProcessStateMonitor::checkRemainingRunTime(WebKit::ProcessStateMonitor *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F963E8], "currentProcess"), "activeLimitations"), "runTime");
  if (v3 == *MEMORY[0x1E4F964B8])
  {
    return WebKit::ProcessStateMonitor::processDidBecomeRunning((uint64_t)this);
  }
  else if (v3 <= 15.0)
  {
    return WebKit::ProcessStateMonitor::processWillBeSuspendedImmediately((uint64_t)this);
  }
  else if (!*((unsigned char *)this + 8))
  {
    double v4 = v3 + -15.0;
    double v5 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 134218240;
      BOOL v7 = this;
      __int16 v8 = 2048;
      double v9 = v4;
      _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::processWillBeSuspended starts timer for %fs", (uint8_t *)&v6, 0x16u);
    }
    uint64_t result = WTF::RunLoop::TimerBase::start();
    *((unsigned char *)this + 8) = 1;
  }
  return result;
}

void WebKit::ProcessStateMonitor::~ProcessStateMonitor(id *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358348;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    int v9 = 134217984;
    uint64_t v10 = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::~ProcessStateMonitor", (uint8_t *)&v9, 0xCu);
  }
  double v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v3);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198D8FF4CLL);
  }
  [this[7] invalidate];
  WebKit::ProcessStateMonitor::processDidBecomeRunning((uint64_t)this);
  id v5 = this[7];
  this[7] = 0;
  if (v5) {
    CFRelease(v5);
  }
  this[3] = &unk_1EE9B3390;
  id v6 = this[6];
  this[6] = 0;
  if (v6) {
    (*(void (**)(id))(*(void *)v6 + 8))(v6);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(this + 3));
  id v8 = this[2];
  this[2] = 0;
  if (v8) {
    (*(void (**)(id))(*(void *)v8 + 8))(v8);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v7);
}

void sub_198D8FF54(_Unwind_Exception *a1)
{
  BOOL v3 = *(const void **)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(v1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = &unk_1EE9B3390;
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 24));
  uint64_t v6 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v1, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ProcessStateMonitor::processDidBecomeRunning(uint64_t this)
{
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v1 = this;
    if (*(unsigned char *)(this + 8) == 2) {
      this = (*(uint64_t (**)(void, void))(**(void **)(this + 16) + 16))(*(void *)(this + 16), 0);
    }
    else {
      this = WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 24));
    }
    *(unsigned char *)(v1 + 8) = 0;
  }
  return this;
}

uint64_t WebKit::ProcessStateMonitor::processWillBeSuspendedImmediately(uint64_t this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(this + 8) != 2)
  {
    uint64_t v1 = this;
    uint64_t v2 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 134217984;
      uint64_t v4 = v1;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::processWillBeSuspendedImmediately", (uint8_t *)&v3, 0xCu);
    }
    WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 24));
    this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), 1);
    *(unsigned char *)(v1 + 8) = 2;
  }
  return this;
}

id WebKit::RevealFocusedElementDeferrer::create@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  id result = objc_initWeak((id *)(v6 + 8), a1);
  *(unsigned char *)(v6 + 16) = a2;
  *a3 = v6;
  return result;
}

void sub_198D901B4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RevealFocusedElementDeferrer::fulfill(uint64_t result, int a2)
{
  int v2 = *(unsigned __int8 *)(result + 16);
  *(unsigned char *)(result + 16) = v2 & ~(_BYTE)a2;
  if ((v2 & (a2 ^ 0xFF)) == 0)
  {
    uint64_t v3 = result;
    ++*(_DWORD *)result;
    uint64_t v4 = (id *)(result + 8);
    id to = 0;
    objc_moveWeak(&to, (id *)(result + 8));
    objc_storeWeak(v4, 0);
    [objc_loadWeak(&to) _zoomToRevealFocusedElement];
    objc_destroyWeak(&to);
    return WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v3);
  }
  return result;
}

void sub_198D9024C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v10);
  _Unwind_Resume(a1);
}

void WebKit::SmartMagnificationController::~SmartMagnificationController(WebKit::SmartMagnificationController *this)
{
  *(void *)this = &unk_1EE9D3C68;
  IPC::MessageReceiverMap::removeMessageReceiver(*(void *)(*((void *)this + 2) + 256) + 152, 0x8Eu, *(void *)(*(void *)(*((void *)this + 2) + 32) + 1928));
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SmartMagnificationController::~SmartMagnificationController(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::SmartMagnificationController::zoomFactorForTargetRect(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, double a7, double a8)
{
  if ((a2 & 1) == 0)
  {
    a3 = a3 - (float)(a5 * 0.05);
    a5 = (float)(a5 * 0.05) + (float)(a5 + (float)(a5 * 0.05));
    a4 = a4 - (float)(a6 * 0.05);
    a6 = (float)(a6 * 0.05) + (float)(a6 + (float)(a6 * 0.05));
  }
  if (a7 >= 0.0) {
    double v10 = a7;
  }
  else {
    double v10 = 0.0;
  }
  if (a8 <= 1.6) {
    double v11 = a8;
  }
  else {
    double v11 = 1.6;
  }
  objc_msgSend(*(id *)(a1 + 24), "_contentZoomScale", __PAIR64__(LODWORD(a4), LODWORD(a3)), __PAIR64__(LODWORD(a6), LODWORD(a5)), *(void *)&v10, *(void *)&v11);
  double v13 = v12;
  uint64_t result = objc_msgSend(*(id *)(a1 + 24), "_targetContentZoomScaleForRect:currentScale:fitEntireRect:minimumScale:maximumScale:", &v16, a2);
  if (v15 == v13) {
    return [*(id *)(a1 + 24) _initialScaleFactor];
  }
  return result;
}

uint64_t WebKit::SmartMagnificationController::didCollectGeometryForSmartMagnificationGesture(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, float a7, float a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  if (a7 <= 0.0 || a8 <= 0.0) {
    goto LABEL_13;
  }
  double v21 = a13;
  double v20 = a14;
  if (a13 < 0.0) {
    double v21 = 0.0;
  }
  if (a14 > 1.6) {
    double v20 = 1.6;
  }
  double v38 = v21;
  double v39 = v20;
  double v22 = (PAL *)[*(id *)(a1 + 24) bounds];
  if (v23 <= *(float *)(*(void *)(*(void *)(a1 + 16) + 32) + 2304)) {
    double v24 = 60.0;
  }
  else {
    double v24 = PAL::currentUserInterfaceIdiomIsSmallScreen(v22) ? 100.0 : 150.0;
  }
  uint64_t v25 = *(void **)(a1 + 24);
  WebCore::FloatRect::operator CGRect();
  double v27 = v26;
  double v29 = v28;
  double v31 = v30;
  double v33 = v32;
  WebCore::FloatPoint::operator CGPoint();
  uint64_t result = objc_msgSend(v25, "_zoomToRect:withOrigin:fitEntireRect:minimumScale:maximumScale:minimumScrollDistance:", a2, v27, v29, v31, v33, v34, v35, v38, v39, *(void *)&v24);
  if ((result & 1) == 0)
  {
LABEL_13:
    CFTypeRef v37 = *(void **)(a1 + 24);
    WebCore::FloatPoint::operator CGPoint();
    return objc_msgSend(v37, "_zoomToInitialScaleWithOrigin:");
  }
  return result;
}

uint64_t WebKit::SmartMagnificationController::scrollToRect(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  WebCore::FloatRect::operator CGRect();
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  WebCore::FloatPoint::operator CGPoint();
  return objc_msgSend(v1, "_scrollToRect:withOrigin:minimumScrollDistance:", v3, v5, v7, v9, v10, v11, 0.0);
}

uint64_t std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 312))
  {
    double v3 = *(WTF::StringImpl **)(a1 + 256);
    *(void *)(a1 + 256) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    double v4 = *(WTF::StringImpl **)(a1 + 248);
    *(void *)(a1 + 248) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 240))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 232);
      if (v5 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9D3C90[v5])(&v8, a1 + 176);
      }
      *(_DWORD *)(a1 + 232) = -1;
    }
    if (*(unsigned char *)(a1 + 160)) {
      WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(a1 + 48), a2);
    }
    double v6 = *(const void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  return a1;
}

WebCore::TextIndicatorData *std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100](WebCore::TextIndicatorData *this, const WebCore::TextIndicatorData *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    WebCore::TextIndicatorData::TextIndicatorData(this, a2);
    *((unsigned char *)this + 112) = 1;
  }
  return this;
}

void sub_198D906F0(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 112)) {
    WebCore::TextIndicatorData::~TextIndicatorData(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::DragSourceState::DragSourceState(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  *(void *)(a1 + 40) = v6;
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 48), (uint64_t)(a2 + 3));
  std::__optional_move_base<WebCore::Path,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 168), (uint64_t)a2 + 168);
  uint64_t v7 = *((void *)a2 + 31);
  *((void *)a2 + 31) = 0;
  *(void *)(a1 + 248) = v7;
  WTF::URL::URL(a1 + 256, (uint64_t *)a2 + 32);
  *(_OWORD *)(a1 + 296) = *(long long *)((char *)a2 + 296);
  return a1;
}

void sub_198D907A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(WTF::StringImpl **)(v13 + 248);
  *(void *)(v13 + 248) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(unsigned char *)(v13 + 240))
  {
    uint64_t v17 = *(unsigned int *)(v13 + 232);
    if (v17 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9D3C90[v17])(&a13, v13 + 176);
    }
    *(_DWORD *)(v13 + 232) = -1;
  }
  if (*(unsigned char *)(v13 + 160)) {
    WebCore::TextIndicatorData::~TextIndicatorData(v14, a2);
  }
  CGRect v18 = *(const void **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
  if (v18) {
    CFRelease(v18);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<WebKit::DragSourceState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::DragSourceState,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 312) == *((unsigned __int8 *)a2 + 312))
  {
    if (*(unsigned char *)(a1 + 312))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
      uint64_t v6 = *((void *)a2 + 5);
      *((void *)a2 + 5) = 0;
      uint64_t v7 = *(const void **)(a1 + 40);
      *(void *)(a1 + 40) = v6;
      if (v7) {
        CFRelease(v7);
      }
      std::__optional_storage_base<WebCore::TextIndicatorData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::TextIndicatorData,false>>((WebCore::TextIndicatorData *)(a1 + 48), (uint64_t)(a2 + 3));
      std::__optional_storage_base<WebCore::Path,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Path,false>>(a1 + 168, (uint64_t)a2 + 168);
      WTF::String::operator=((uint64_t *)(a1 + 248), (uint64_t *)a2 + 31);
      WTF::URL::operator=(a1 + 256, (uint64_t)(a2 + 16));
      *(_OWORD *)(a1 + 296) = *(long long *)((char *)a2 + 296);
    }
  }
  else if (*(unsigned char *)(a1 + 312))
  {
    std::__optional_destruct_base<WebKit::DragSourceState,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    WebKit::DragSourceState::DragSourceState(a1, a2);
    *(unsigned char *)(a1 + 312) = 1;
  }
}

void std::__optional_destruct_base<WebKit::DragSourceState,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 312))
  {
    double v3 = *(WTF::StringImpl **)(a1 + 256);
    *(void *)(a1 + 256) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    long long v4 = *(WTF::StringImpl **)(a1 + 248);
    *(void *)(a1 + 248) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 240))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 232);
      if (v5 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9D3C90[v5])(&v7, a1 + 176);
      }
      *(_DWORD *)(a1 + 232) = -1;
    }
    if (*(unsigned char *)(a1 + 160)) {
      WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(a1 + 48), a2);
    }
    uint64_t v6 = *(const void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v6) {
      CFRelease(v6);
    }
    *(unsigned char *)(a1 + 312) = 0;
  }
}

void std::__optional_storage_base<WebCore::TextIndicatorData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::TextIndicatorData,false>>(WebCore::TextIndicatorData *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 112) == *(unsigned __int8 *)(a2 + 112))
  {
    if (*((unsigned char *)a1 + 112))
    {
      WebCore::TextIndicatorData::operator=((uint64_t)a1, (long long *)a2);
    }
  }
  else if (*((unsigned char *)a1 + 112))
  {
    WebCore::TextIndicatorData::~TextIndicatorData(a1, (void *)a2);
    *(unsigned char *)(v2 + 112) = 0;
  }
  else
  {
    *(unsigned char *)(WebCore::TextIndicatorData::TextIndicatorData((uint64_t)a1, (long long *)a2) + 112) = 1;
  }
}

uint64_t std::__optional_storage_base<WebCore::Path,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Path,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(unsigned char *)(result + 72))
    {
      uint64_t v3 = result + 8;
      uint64_t v4 = a2 + 8;
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>(v3, v4);
    }
  }
  else if (*(unsigned char *)(result + 72))
  {
    uint64_t v5 = *(unsigned int *)(result + 64);
    if (v5 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9D3C90[v5])(&v6, result + 8);
    }
    *(_DWORD *)(v2 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
    *(unsigned char *)(v2 + 72) = 0;
  }
  else
  {
    uint64_t result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100](result + 8, a2 + 8);
    *(unsigned char *)(v2 + 72) = 1;
  }
  return result;
}

id ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__0cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = (const void *)[MEMORY[0x1E4F429A8] previewForURL:*(void *)(a1 + 40) title:*(void *)(a1 + 32)];
  uint64_t v2 = v1;
  if (v1) {
    CFRetain(v1);
  }
  uint64_t v3 = (void *)CFMakeCollectable(v2);

  return v3;
}

CFTypeRef __copy_helper_block_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_198D90B8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

CFTypeRef ___ZZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvENK3__1cvU13block_pointerFP13UIDragPreviewvEEv_block_invoke(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)[objc_alloc(MEMORY[0x1E4F42AA0]) initWithImage:*(void *)(a1 + 32)];
  id v2 = objc_alloc(MEMORY[0x1E4F429B0]);
  uint64_t v3 = (void *)MEMORY[0x1E4F29238];
  [v1 bounds];
  v7[0] = objc_msgSend(v3, "valueWithCGRect:");
  uint64_t v4 = (const void *)objc_msgSend(v2, "initWithTextLineRects:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v7, 1));
  CFTypeRef v5 = (id)CFMakeCollectable((CFTypeRef)[objc_alloc(MEMORY[0x1E4F429A8]) initWithView:v1 parameters:v4]);
  if (v4) {
    CFRelease(v4);
  }
  if (v1) {
    CFRelease(v1);
  }
  return v5;
}

void sub_198D90D04(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__1(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c83_ZTSKZN6WebKit24DragDropInteractionState34updatePreviewsForActiveDragSourcesEvE3__1(uint64_t a1)
{
  id v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::deallocateTable(const void **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      CFTypeRef v5 = *v4;
      if (*v4 != (const void *)-1)
      {
        *uint64_t v4 = 0;
        if (v5) {
          CFRelease(v5);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSString *)>::fromCallable<WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0>(WebKit::PageClientImpl::requestPasswordForQuickLookDocument(WTF::String const&,WTF::Function<void ()(WTF::String const&)> &&)::$_0)::{lambda(void *,NSString *)#1}::__invoke(uint64_t a1)
{
  MEMORY[0x19972EAD0](&v4);
  (*(void (**)(void, WTF::StringImpl **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198D90E88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEEN3__1clEPU39objcproto28RBSProcessMonitorConfiguring11objc_object_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(atomic_uint **)(a1 + 32);
  if (v1) {
    atomic_fetch_add(v1, 1u);
  }
  id v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *id v2 = &unk_1EE9D3D88;
  v2[1] = v1;
  uint64_t v4 = v2;
  WTF::ensureOnMainRunLoop();
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
  }
  return result;
}

void sub_198D90F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c194_ZTSKZZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEEN3__1clEPU39objcproto28RBSProcessMonitorConfiguring11objc_objectEUlP17RBSProcessMonitorP16RBSProcessHandleP21RBSProcessStateUpdateE_(uint64_t result, uint64_t a2)
{
  id v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c194_ZTSKZZN6WebKit19ProcessStateMonitorC1EON3WTF8FunctionIFvbEEEEN3__1clEPU39objcproto28RBSProcessMonitorConfiguring11objc_objectEUlP17RBSProcessMonitorP16RBSProcessHandleP21RBSProcessStateUpdateE_(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessStateMonitor::ProcessStateMonitor(WTF::Function<void ()(BOOL)> &&)::$_1::operator()(objc_object  {objcproto28RBSProcessMonitorConfiguring}*)::{lambda(RBSProcessMonitor *,RBSProcessHandle *,RBSProcessStateUpdate *)#1}::operator() const(objc_object  {objcproto28RBSProcessMonitorConfiguring}*,RBSProcessMonitor *,RBSProcessHandle *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D3D88;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessStateMonitor::ProcessStateMonitor(WTF::Function<void ()(BOOL)> &&)::$_1::operator()(objc_object  {objcproto28RBSProcessMonitorConfiguring}*)::{lambda(RBSProcessMonitor *,RBSProcessHandle *,RBSProcessStateUpdate *)#1}::operator() const(objc_object  {objcproto28RBSProcessMonitorConfiguring}*,RBSProcessMonitor *,RBSProcessHandle *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D3D88;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::ProcessStateMonitor *WTF::Detail::CallableWrapper<WebKit::ProcessStateMonitor::ProcessStateMonitor(WTF::Function<void ()(BOOL)> &&)::$_1::operator()(objc_object  {objcproto28RBSProcessMonitorConfiguring}*)::{lambda(RBSProcessMonitor *,RBSProcessHandle *,RBSProcessStateUpdate *)#1}::operator() const(objc_object  {objcproto28RBSProcessMonitorConfiguring}*,RBSProcessMonitor *,RBSProcessHandle *)::{lambda(void)#1},void>::call(WebKit::ProcessStateMonitor *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t result = *(WebKit::ProcessStateMonitor **)(v1 + 8);
    if (result) {
      return (WebKit::ProcessStateMonitor *)WebKit::ProcessStateMonitor::checkRemainingRunTime(result);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::expand(uint64_t *a1, const void **a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      double v12 = (const void **)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != (const void *)-1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = ((unint64_t)v13 + ~((void)v13 << 32)) ^ (((unint64_t)v13 + ~((void)v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = v16 + 16 * v23;
          double v26 = *(const void **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v26)
          {
            CFRelease(v26);
            double v27 = *(const void **)v25;
            *(void *)uint64_t v25 = 0;
            if (v27) {
              CFRelease(v27);
            }
          }
          else
          {
            *(void *)uint64_t v25 = 0;
          }
          double v28 = *v12;
          unsigned int *v12 = 0;
          *(void *)uint64_t v25 = v28;
          uint64_t v29 = v4 + 16 * v10;
          uint64_t v30 = *(void *)(v29 + 8);
          *(void *)(v29 + 8) = 0;
          *(void *)(v25 + 8) = v30;
          double v31 = *(const void **)(v29 + 8);
          *(void *)(v29 + 8) = 0;
          if (v31) {
            CFRelease(v31);
          }
          double v32 = *v12;
          unsigned int *v12 = 0;
          if (v32) {
            CFRelease(v32);
          }
          if (v12 == a2) {
            uint64_t v11 = v25;
          }
        }
        else
        {
          uint64_t v14 = v4 + 16 * v10;
          double v15 = *(const void **)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15)
          {
            CFRelease(v15);
            uint64_t v13 = *v12;
          }
          unsigned int *v12 = 0;
          if (v13) {
            CFRelease(v13);
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::DragSourceState const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 312 * v4;
  uint64_t v7 = *(void *)(v3 + 32);
  long long v8 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v3;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = v7;
  double v9 = *(const void **)(v3 + 40);
  *(void *)(v6 + 40) = v9;
  if (v9) {
    CFRetain(v9);
  }
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)(v5 + 312 * v4 + 48), (const WebCore::TextIndicatorData *)(v3 + 48));
  std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)(v5 + 312 * v4 + 168), (const WebCore::Path *)(v3 + 168));
  uint64_t v10 = *(_DWORD **)(v3 + 248);
  if (v10) {
    *v10 += 2;
  }
  *(void *)(v5 + 312 * v4 + 248) = v10;
  uint64_t v11 = *(_DWORD **)(v3 + 256);
  if (v11) {
    *v11 += 2;
  }
  uint64_t v12 = v5 + 312 * v4;
  *(void *)(v12 + 256) = v11;
  long long v13 = *(_OWORD *)(v3 + 264);
  *(_OWORD *)(v12 + 280) = *(_OWORD *)(v3 + 280);
  *(_OWORD *)(v12 + 26WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v13;
  *(_OWORD *)(v12 + 296) = *(_OWORD *)(v3 + 296);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void sub_198D91418(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v4 + 312 * v3 + 160)) {
    WebCore::TextIndicatorData::~TextIndicatorData(v2, a2);
  }
  uint64_t v7 = *v5;
  const void *v5 = 0;
  if (v7) {
    CFRelease(v7);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 312 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xD20D21)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = *(WTF **)a1;
      unsigned int v4 = *(_DWORD *)(a1 + 12);
      unsigned int v5 = 312 * a2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(312 * a2));
      *(_DWORD *)(a1 + 8) = v5 / 0x138;
      *(void *)a1 = v6;
      if (v4)
      {
        uint64_t v8 = v6;
        uint64_t v9 = 0;
        uint64_t v10 = 312 * v4;
        do
        {
          uint64_t v11 = (char *)v3 + v9;
          WebKit::DragSourceState::DragSourceState(v8 + v9, (long long *)((char *)v3 + v9));
          uint64_t v12 = *(WTF::StringImpl **)((char *)v3 + v9 + 256);
          *(void *)((char *)v3 + v9 + 256) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v7);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
          long long v13 = (WTF::StringImpl *)*((void *)v11 + 31);
          *((void *)v11 + 31) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v7);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          uint64_t v14 = (char *)v3 + v9;
          if (*((unsigned char *)v3 + v9 + 240))
          {
            uint64_t v15 = *((unsigned int *)v14 + 58);
            if (v15 != -1) {
              ((void (*)(char *, char *))off_1EE9D3C90[v15])(&v17, (char *)v3 + v9 + 176);
            }
            *((_DWORD *)v14 + 58) = -1;
          }
          if (v14[160]) {
            WebCore::TextIndicatorData::~TextIndicatorData((WTF *)((char *)v3 + v9 + 48), v7);
          }
          uint64_t v16 = *(const void **)((char *)v3 + v9 + 40);
          *(void *)((char *)v3 + v9 + 40) = 0;
          if (v16) {
            CFRelease(v16);
          }
          v9 += 312;
        }
        while (v10 != v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::GestureRecognizerConsistencyEnforcer::*&)(void),WebKit::GestureRecognizerConsistencyEnforcer*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  id v2 = (uint64_t (*)(void *))a1[1];
  unint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::add(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = (const void *)*a2;
  unint64_t v10 = ~(*a2 << 32) + *a2;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (const void **)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v6 - 4);
        }
        char v26 = 0;
        uint64_t v27 = v6 + 8 * v21;
        goto LABEL_31;
      }
      if (v15 == (const void *)-1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      uint64_t v14 = (const void **)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      const void *v16 = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v9 = (const void *)*a2;
      uint64_t v14 = v16;
    }
  }
  *a2 = 0;
  unint64_t v18 = *v14;
  *uint64_t v14 = v9;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v22 = *a1;
  if (*a1) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_24:
      uint64_t v14 = WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::expand(a1, v14);
      uint64_t v22 = *a1;
      if (*a1) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_24;
  }
  uint64_t v27 = v22 + 8 * v25;
  char v26 = 1;
LABEL_31:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v27;
  *(unsigned char *)(a3 + 16) = v26;
}

const void **WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::expand(uint64_t *a1, const void **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::rehash(a1, v5, a2);
}

const void **WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::rehash(uint64_t *a1, unsigned int a2, const void **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    unsigned int v13 = (const void **)v6;
    do
    {
      if (*v13 != (const void *)-1)
      {
        if (*v13)
        {
          uint64_t v14 = (const void **)WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::lookupForReinsert(a1, v13);
          uint64_t v15 = *v14;
          *uint64_t v14 = 0;
          if (v15) {
            CFRelease(v15);
          }
          uint64_t v16 = *v13;
          *unsigned int v13 = 0;
          *uint64_t v14 = v16;
          int v17 = *v13;
          *unsigned int v13 = 0;
          if (v17) {
            CFRelease(v17);
          }
          if (v13 == a3) {
            unint64_t v11 = v14;
          }
        }
        else
        {
          *unsigned int v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::remove(uint64_t *a1, const void **a2)
{
  int v4 = *a2;
  *a2 = 0;
  if (v4) {
    CFRelease(v4);
  }
  *a2 = (const void *)-1;
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::rehash(a1, v9 >> 1, 0);
    }
  }
}

uint64_t WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>>,WKDeferringGestureRecognizer const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 8 * v7);
  if (v8 == *a2) {
    return v2 + 8 * v7;
  }
  int v9 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 8 * v7);
    ++v9;
    if (v8 == *a2) {
      return v2 + 8 * v7;
    }
  }
  return v2 + 8 * *(unsigned int *)(v2 - 4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessStateMonitor::ProcessStateMonitor(WTF::Function<void ()(BOOL)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 8);
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    uint64_t v2 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 134217984;
      uint64_t v4 = v1;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - ProcessStateMonitor::suspendTimerFired", (uint8_t *)&v3, 0xCu);
    }
    return WebKit::ProcessStateMonitor::processWillBeSuspendedImmediately(v1);
  }
  return result;
}

uint64_t WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(uint64_t result)
{
  uint64_t v1 = (WTF *)result;
  if (*(_DWORD *)result == 1)
  {
    objc_destroyWeak((id *)(result + 8));
    return WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::ViewGestureGeometryCollector::CollectGeometryForSmartMagnificationGesture>(uint64_t a1, float **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1548;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198D91D60(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteScrollingUIState::reset(uint64_t this, void *a2)
{
  uint64_t v2 = this;
  *(unsigned char *)this = 0;
  uint64_t v3 = *(void *)(this + 8);
  if (v3)
  {
    *(void *)(this + 8) = 0;
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    *(void *)(v2 + 16) = 0;
    this = WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5)
  {
    *(void *)(v2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    return WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  return this;
}

uint64_t WebKit::RemoteScrollingUIState::addNodeWithActiveUserScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add((uint64_t *)(a1 + 16), v6, (uint64_t)v5);
  if (v5[16]) {
    *(unsigned char *)a1 |= 2u;
  }
  return result;
}

void *WebKit::RemoteScrollingUIState::removeNodeWithActiveUserScroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t result = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)(a1 + 16), v8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v7 = 0;
  }
  if (v7 != result) {
    uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(v4, result);
  }
  *(unsigned char *)a1 |= 2u;
  return result;
}

WTF *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 32))(a1, *(void *)(*(void *)(a2 + 8) + 8));
  if (!result)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    goto LABEL_37;
  }
  int v9 = result;
  uint64_t v42 = 0;
  uint64_t v10 = *(unsigned int *)(a2 + 28);
  if (!v10)
  {
    LODWORD(v12) = 0;
    uint64_t result = 0;
    goto LABEL_36;
  }
  if (v10 >= 0x4924925)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x198D922DCLL);
  }
  unsigned int v11 = 56 * v10;
  uint64_t result = (WTF *)WTF::fastMalloc((WTF *)(56 * v10));
  LODWORD(v10) = v11 / 0x38;
  LODWORD(v42) = v11 / 0x38;
  uint64_t v41 = result;
  uint64_t v12 = *(unsigned int *)(a2 + 28);
  if (!v12)
  {
LABEL_36:
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v9;
    *(void *)(a3 + 16) = result;
    *(_DWORD *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
    *(_DWORD *)(a3 + 28) = v12;
    *(unsigned char *)(a3 + 32) = 1;
    uint64_t v6 = 0;
    goto LABEL_37;
  }
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = 48 * v12;
  while (2)
  {
    int v15 = *(_DWORD *)(v13 + 40);
    if (v15 == -1) {
      uint64_t v16 = -1;
    }
    else {
      uint64_t v16 = *(unsigned int *)(v13 + 40);
    }
    switch(v16)
    {
      case 1:
        if (v15 != 1) {
          goto LABEL_44;
        }
        uint64_t v24 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(v13 + 8));
        if (!v24) {
          goto LABEL_25;
        }
        LODWORD(v36) = *(_DWORD *)v13;
        *((void *)&v36 + 1) = v24;
        *(void *)&long long v37 = 0;
        BYTE8(v37) = 0;
        LOBYTE(v38) = 0;
        *((void *)&v38 + 1) = v24;
        int v18 = 1;
        LOBYTE(v39) = 1;
        goto LABEL_28;
      case 2:
        if (v15 != 2) {
          goto LABEL_44;
        }
        uint64_t v20 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 40))(a1, *(void *)(*(void *)(v13 + 8) + 8));
        if (!v20) {
          goto LABEL_25;
        }
        uint64_t v21 = *(void *)(v13 + 16);
        LODWORD(v36) = *(_DWORD *)v13;
        *((void *)&v36 + 1) = v20;
        *(void *)&long long v37 = v21;
        uint64_t v22 = *(void *)(v13 + 24);
        LOBYTE(v38) = *(unsigned char *)(v13 + 32);
        *((void *)&v37 + 1) = v22;
        *((void *)&v38 + 1) = v20;
        LOBYTE(v39) = 2;
        goto LABEL_21;
      case 3:
        if (v15 != 3) {
          goto LABEL_44;
        }
        uint64_t v23 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 104))(a1, *(void *)(v13 + 8));
        if (v23)
        {
          LODWORD(v36) = *(_DWORD *)v13;
          *((void *)&v36 + 1) = v23;
          *(void *)&long long v37 = 0;
          BYTE8(v37) = 0;
          LOBYTE(v38) = 0;
          *((void *)&v38 + 1) = v23;
          LOBYTE(v39) = 3;
LABEL_21:
          int v18 = 1;
        }
        else
        {
LABEL_25:
          int v18 = 0;
          LOBYTE(v36) = 0;
        }
        goto LABEL_28;
      default:
        if (v15)
        {
LABEL_44:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_45;
        }
        uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 184))(a1, *(void *)(v13 + 8));
        if (v17)
        {
          LODWORD(v36) = *(_DWORD *)v13;
          *((void *)&v36 + 1) = v17;
          *(void *)&long long v37 = 0;
          BYTE8(v37) = 0;
          LOBYTE(v38) = 0;
          *((void *)&v38 + 1) = v17;
          int v18 = 1;
          uint64_t v19 = &v39;
        }
        else
        {
          int v18 = 0;
          uint64_t v19 = (uint64_t *)&v36;
        }
        *(unsigned char *)uint64_t v19 = 0;
LABEL_28:
        char v40 = v18;
        if (v18)
        {
          int v25 = HIDWORD(v42);
          if (HIDWORD(v42) == v42)
          {
            unint64_t v26 = WTF::Vector<WebKit::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v41, HIDWORD(v42) + 1, (unint64_t)&v36);
            int v27 = HIDWORD(v42);
            uint64_t result = v41;
            double v28 = (char *)v41 + 56 * HIDWORD(v42);
            long long v30 = *(_OWORD *)(v26 + 16);
            long long v29 = *(_OWORD *)(v26 + 32);
            long long v31 = *(_OWORD *)v26;
            *((void *)v28 + 6) = *(void *)(v26 + 48);
            *((_OWORD *)v28 + 1) = v30;
            *((_OWORD *)v28 + 2) = v29;
            *(_OWORD *)double v28 = v31;
            int v25 = v27;
          }
          else
          {
            uint64_t result = v41;
            double v32 = (char *)v41 + 56 * HIDWORD(v42);
            long long v33 = v36;
            long long v34 = v37;
            long long v35 = v38;
            *((void *)v32 + 6) = v39;
            *((_OWORD *)v32 + 1) = v34;
            *((_OWORD *)v32 + 2) = v35;
            *(_OWORD *)double v32 = v33;
          }
          LODWORD(v12) = v25 + 1;
          HIDWORD(v42) = v25 + 1;
          v13 += 48;
          v14 -= 48;
          if (!v14)
          {
            LODWORD(v10) = v42;
            goto LABEL_36;
          }
          continue;
        }
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 32) = 0;
        uint64_t result = v41;
        if (v41)
        {
          uint64_t v41 = 0;
          LODWORD(v42) = 0;
          uint64_t result = (WTF *)WTF::fastFree(result, v8);
        }
LABEL_37:
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            return (WTF *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v8);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
        return result;
    }
  }
}

{
  WTF *result;
  void *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  long long v23;
  char *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned char *v29;
  char v30;
  char *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  WTF *v45;
  unint64_t v46;
  uint64_t v47;
  void v48[2];
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  WTF *v57;
  uint64_t v58;

  uint64_t result = (WTF *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2, (uint64_t)&v51);
  if (!v56)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 56) = 0;
    return (WTF *)std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v6);
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 52);
  if (!v7)
  {
LABEL_37:
    v44[0] = v51;
    LOBYTE(v44[1]) = 0;
    LOBYTE(v45) = 0;
    long long v34 = v53;
    if (v53)
    {
      long long v35 = v52;
      uint64_t v52 = 0;
      v44[1] = v35;
      LOBYTE(v45) = 1;
    }
    long long v36 = v54;
    unint64_t v54 = 0;
    long long v37 = v55;
    unsigned int v55 = 0;
    long long v38 = v49;
    uint64_t v49 = 0;
    uint64_t v39 = v50;
    uint64_t v50 = 0;
    *(void *)a3 = v51;
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v34)
    {
      char v40 = v44[1];
      v44[1] = 0;
      *(void *)(a3 + 8) = v40;
      *(unsigned char *)(a3 + 16) = 1;
    }
    CFTypeRef v46 = 0;
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v36;
    char v47 = 0;
    *(void *)(a3 + 32) = v37;
    v48[0] = 0;
    *(void *)(a3 + 40) = v38;
    v48[1] = 0;
    *(void *)(a3 + 48) = v39;
    *(unsigned char *)(a3 + 56) = 1;
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v6);
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v41);
    if ((_BYTE)v45)
    {
      uint64_t v43 = v44[1];
      v44[1] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v42);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
    }
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v42);
    return (WTF *)std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v6);
  }
  if (v7 < 0x6666667)
  {
    uint64_t v8 = 40 * v7;
    uint64_t result = (WTF *)WTF::fastMalloc((WTF *)(40 * v7));
    LODWORD(v50) = (v8 & 0xFFFFFFF8) / 0x28;
    uint64_t v49 = result;
    int v9 = *(_DWORD *)(a2 + 52);
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 40);
      unsigned int v11 = v10 + 40 * v9;
      do
      {
        if (*(unsigned char *)(v10 + 32))
        {
          uint64_t v58 = 0;
          uint64_t v12 = *(unsigned int *)(v10 + 28);
          if (v12)
          {
            if (v12 >= 0xAAAAAAB)
            {
              __break(0xC471u);
              goto LABEL_50;
            }
            uint64_t v13 = 24 * v12;
            uint64_t result = (WTF *)WTF::fastMalloc((WTF *)(24 * v12));
            LODWORD(v12) = (v13 & 0xFFFFFFF8) / 0x18;
            LODWORD(v58) = v12;
            v57 = result;
            uint64_t v14 = *(_DWORD *)(v10 + 28);
            if (v14)
            {
              int v15 = 0;
              uint64_t v16 = *(void *)(v10 + 16);
              uint64_t v17 = v16 + 24 * v14;
              do
              {
                int v18 = *(WTF::StringImpl **)(v16 + 8);
                uint64_t v19 = *(_DWORD *)(v16 + 16);
                LOBYTE(v44[0]) = *(unsigned char *)v16;
                v44[1] = v18;
                LODWORD(v45) = v19;
                LOBYTE(v46) = 1;
                if (v15 == v58)
                {
                  uint64_t v20 = WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, v15 + 1, (unint64_t)v44);
                  int v15 = HIDWORD(v58);
                  uint64_t result = v57;
                  uint64_t v21 = (char *)v57 + 24 * HIDWORD(v58);
                  uint64_t v22 = *(void *)(v20 + 16);
                  *(_OWORD *)uint64_t v21 = *(_OWORD *)v20;
                  *((void *)v21 + 2) = v22;
                }
                else
                {
                  uint64_t v23 = *(_OWORD *)v44;
                  uint64_t v24 = (char *)result + 24 * v15;
                  *((void *)v24 + 2) = v45;
                  *(_OWORD *)uint64_t v24 = v23;
                }
                HIDWORD(v58) = ++v15;
                v16 += 24;
              }
              while (v16 != v17);
              LODWORD(v12) = v58;
            }
            else
            {
              int v15 = 0;
            }
          }
          else
          {
            int v15 = 0;
            uint64_t result = 0;
          }
          long long v30 = *(unsigned char *)(v10 + 8);
          v44[0] = *(WTF::StringImpl **)v10;
          LOBYTE(v44[1]) = v30;
          CFTypeRef v45 = result;
          CFTypeRef v46 = __PAIR64__(v15, v12);
          LOBYTE(v47) = 1;
          if (HIDWORD(v50) == v50)
          {
            uint64_t result = (WTF *)WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<WebKit::WebGPU::VertexBufferLayout>>((uint64_t)&v49, (unint64_t)v44);
          }
          else
          {
            long long v31 = (char *)v49 + 40 * HIDWORD(v50);
            *long long v31 = 0;
            v31[32] = 0;
            if ((_BYTE)v47)
            {
              double v32 = v44[0];
              v31[8] = (char)v44[1];
              *(void *)long long v31 = v32;
              *((void *)v31 + 2) = 0;
              *((void *)v31 + 3) = 0;
              long long v33 = v45;
              CFTypeRef v45 = 0;
              *((void *)v31 + 2) = v33;
              *((_DWORD *)v31 + 6) = v46;
              LODWORD(v33) = HIDWORD(v46);
              HIDWORD(v46) = 0;
              *((_DWORD *)v31 + 7) = v33;
              v31[32] = 1;
            }
            ++HIDWORD(v50);
          }
          if ((_BYTE)v47)
          {
            uint64_t result = v45;
            if (v45)
            {
              CFTypeRef v45 = 0;
              LODWORD(v46) = 0;
              uint64_t result = (WTF *)WTF::fastFree(result, v6);
            }
          }
        }
        else
        {
          int v25 = HIDWORD(v50);
          if (HIDWORD(v50) == v50)
          {
            unint64_t v26 = HIDWORD(v50) + ((unint64_t)HIDWORD(v50) >> 2);
            if (v26 >= 0x10) {
              int v27 = v26 + 1;
            }
            else {
              int v27 = 16;
            }
            if (v27 <= (unint64_t)HIDWORD(v50) + 1) {
              double v28 = HIDWORD(v50) + 1;
            }
            else {
              double v28 = v27;
            }
            uint64_t result = (WTF *)WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v49, v28);
            int v25 = HIDWORD(v50);
          }
          long long v29 = (char *)v49 + 40 * v25;
          void *v29 = 0;
          v29[32] = 0;
          ++HIDWORD(v50);
        }
        v10 += 40;
      }
      while (v10 != v11);
      if (v56) {
        goto LABEL_37;
      }
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    goto LABEL_37;
  }
LABEL_51:
  __break(0xC471u);
  return result;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v6 += 2;
  }
  (*(void (**)(WTF **__return_ptr, uint64_t, void))(*(void *)a1 + 32))(&v43, a1, *(void *)(a2 + 8));
  uint64_t result = (unsigned int *)v43;
  if (v43 && *((void *)v43 + 1))
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v9 = *(unsigned int *)(a2 + 28);
    if (v9)
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x198D92924);
      }
      LODWORD(v42) = 48 * (int)v9 / 0x30u;
      uint64_t v41 = WTF::fastMalloc((WTF *)(48 * v9));
      uint64_t v10 = *(unsigned int *)(a2 + 28);
      if (v10)
      {
        unsigned int v11 = *(int **)(a2 + 16);
        uint64_t v12 = 56 * v10;
        while (1)
        {
          switch(*((unsigned char *)v11 + 48))
          {
            case 0:
              (*(void (**)(WTF **__return_ptr, uint64_t, void))(*(void *)a1 + 160))(&v45, a1, *((void *)v11 + 5));
              uint64_t v14 = (unsigned int *)v45;
              if (!v45) {
                goto LABEL_28;
              }
              int v15 = (WTF *)*((void *)v45 + 1);
              if (!v15) {
                goto LABEL_28;
              }
              LODWORD(v49) = *v11;
              uint64_t v50 = v15;
              int v53 = 0;
              LODWORD(v36) = v49;
              LOBYTE(v37) = 0;
              int v39 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v37, (uint64_t)&v50);
              char v40 = 1;
              goto LABEL_25;
            case 1:
              (*(void (**)(WTF **__return_ptr, uint64_t, void))(*(void *)a1 + 192))(&v45, a1, *((void *)v11 + 5));
              uint64_t v14 = (unsigned int *)v45;
              if (!v45 || (uint64_t v20 = (WTF *)*((void *)v45 + 1)) == 0)
              {
LABEL_28:
                LOBYTE(v36) = 0;
                char v40 = 0;
                goto LABEL_29;
              }
              LODWORD(v49) = *v11;
              uint64_t v50 = v20;
              int v53 = 1;
              LODWORD(v36) = v49;
              LOBYTE(v37) = 0;
              int v39 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v37, (uint64_t)&v50);
              char v40 = 1;
LABEL_25:
              if (v53 != -1) {
                ((void (*)(WTF **, WTF **))off_1EE9D3DF0[v53])(&v44, &v50);
              }
              goto LABEL_27;
            case 2:
              WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, (uint64_t)(v11 + 2), (uint64_t)&v45);
              if (v48)
              {
                LODWORD(v49) = *v11;
                uint64_t v16 = v45;
                atomic_fetch_add((atomic_uint *volatile)v45, 1u);
                uint64_t v50 = v16;
                long long v51 = v46;
                char v52 = v47;
                int v53 = 2;
                LODWORD(v36) = v49;
                LOBYTE(v37) = 0;
                int v39 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v37, (uint64_t)&v50);
                char v40 = 1;
                if (v53 != -1) {
                  ((void (*)(WTF **, WTF **))off_1EE9D3DF0[v53])(&v44, &v50);
                }
                if (v48)
                {
LABEL_27:
                  uint64_t v14 = (unsigned int *)v45;
LABEL_29:
                  CFTypeRef v45 = 0;
                  if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
                  {
                    atomic_store(1u, v14);
                    WTF::fastFree((WTF *)v14, v13);
                  }
                }
              }
              else
              {
                LOBYTE(v36) = 0;
                char v40 = 0;
              }
LABEL_41:
              if (!v40)
              {
                *(unsigned char *)a3 = 0;
                *(unsigned char *)(a3 + 32) = 0;
                goto LABEL_56;
              }
              int v23 = HIDWORD(v42);
              if (HIDWORD(v42) == v42)
              {
                uint64_t v24 = (int *)WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v41, HIDWORD(v42) + 1, (unint64_t)&v36);
                int v23 = HIDWORD(v42);
                uint64_t v25 = (uint64_t)(v24 + 2);
                int v26 = *v24;
                uint64_t v27 = v41 + 48 * HIDWORD(v42);
                *(_DWORD *)uint64_t v27 = v26;
                *(_DWORD *)(v27 + 40) = -1;
                *(unsigned char *)(v27 + 8) = 0;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>(v27 + 8, v25);
              }
              else
              {
                uint64_t v28 = v41 + 48 * HIDWORD(v42);
                *(_DWORD *)uint64_t v28 = v36;
                *(_DWORD *)(v28 + 40) = -1;
                *(unsigned char *)(v28 + 8) = 0;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>(v28 + 8, (uint64_t)&v37);
              }
              HIDWORD(v42) = v23 + 1;
              if (v40 && v39 != -1) {
                ((void (*)(uint64_t *, WTF **))off_1EE9D3DF0[v39])(&v49, &v37);
              }
              v11 += 14;
              v12 -= 56;
              if (!v12) {
                goto LABEL_49;
              }
              break;
            case 3:
              (*(void (**)(WTF **__return_ptr, uint64_t, void))(*(void *)a1 + 96))(&v45, a1, *((void *)v11 + 5));
              if (v45
                && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v45, v46, &v49), uint64_t v17 = v49, v49 = 0, v17))
              {
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(*(atomic_uchar **)(v17 + 8), v13);
                int v18 = *v11;
                LODWORD(v49) = *v11;
                if (v45)
                {
                  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v45, v46, &v44);
                  uint64_t v19 = v44;
                }
                else
                {
                  uint64_t v19 = 0;
                  char v44 = 0;
                }
                uint64_t v50 = v19;
                int v53 = 3;
                LODWORD(v36) = v18;
                LOBYTE(v37) = 0;
                int v39 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v37, (uint64_t)&v50);
                char v40 = 1;
                if (v53 != -1) {
                  ((void (*)(char *, WTF **))off_1EE9D3DF0[v53])(v54, &v50);
                }
                int v53 = -1;
                uint64_t v21 = (atomic_uchar **)v44;
                char v44 = 0;
                if (v21) {
                  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebGPU::ExternalTexture,(WTF::DestructionThread)0>(v21[1], v13);
                }
              }
              else
              {
                LOBYTE(v36) = 0;
                char v40 = 0;
              }
              uint64_t v22 = v45;
              CFTypeRef v45 = 0;
              if (v22) {
                WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v22, v13);
              }
              goto LABEL_41;
            default:
              __break(0xC471u);
              JUMPOUT(0x198D9291CLL);
          }
        }
      }
    }
LABEL_49:
    long long v36 = v6;
    uint64_t v29 = *((void *)v43 + 1);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v29 + 16), v29);
    long long v30 = *(atomic_uint **)(v29 + 16);
    atomic_fetch_add(v30, 1u);
    uint64_t v31 = v41;
    uint64_t v41 = 0;
    *(void *)a3 = v36;
    *(void *)(a3 + 8) = v30;
    long long v37 = 0;
    v38[0] = 0;
    long long v36 = 0;
    *(void *)(a3 + 16) = v31;
    v38[1] = 0;
    uint64_t v32 = v42;
    uint64_t v42 = 0;
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v32;
    *(unsigned char *)(a3 + 32) = 1;
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v33);
    long long v34 = (unsigned int *)v37;
    long long v37 = 0;
    if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v13);
    }
    long long v35 = v36;
    long long v36 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
    uint64_t v6 = 0;
LABEL_56:
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v13);
    uint64_t result = (unsigned int *)v43;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  uint64_t v43 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
    if (!v6) {
      return result;
    }
  }
  else if (!v6)
  {
    return result;
  }
  if (*(_DWORD *)v6 == 2) {
    return (unsigned int *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v7);
  }
  *(_DWORD *)v6 -= 2;
  return result;
}

{
  void *v5;
  unsigned int *result;
  uint64_t v7;
  atomic_uint *v8;
  uint64_t v9;
  WTF *v10;

  (*(void (**)(WTF **__return_ptr))(*(void *)a1 + 40))(&v10);
  uint64_t result = (unsigned int *)v10;
  if (v10 && (uint64_t v7 = *((void *)v10 + 1)) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
    uint64_t v8 = *(atomic_uint **)(v7 + 16);
    atomic_fetch_add(v8, 1u);
    uint64_t v9 = *(void *)(a2 + 16);
    *(void *)(a3 + 8) = *(void *)(a2 + 8);
    *(void *)(a3 + 16) = v9;
    *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(unsigned char *)(a2 + 24);
    *(void *)a3 = v8;
    *(unsigned char *)(a3 + 32) = 1;
    uint64_t result = (unsigned int *)v10;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  uint64_t v10 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

{
  void *v5;
  unsigned int *result;
  uint64_t v7;
  atomic_uint *v8;
  __int16 v9;
  int v10;
  void *v11;
  __int16 v12;
  char v13;
  WTF *v14;

  (*(void (**)(WTF **__return_ptr))(*(void *)a1 + 88))(&v14);
  uint64_t result = (unsigned int *)v14;
  if (v14 && (uint64_t v7 = *((void *)v14 + 1)) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
    uint64_t v8 = *(atomic_uint **)(v7 + 16);
    atomic_fetch_add(v8, 1u);
    uint64_t v9 = *(_WORD *)(a2 + 8);
    uint64_t v10 = *(_DWORD *)(a2 + 28);
    if (v10)
    {
      unsigned int v11 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 28));
      memcpy(v11, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
    }
    else
    {
      unsigned int v11 = 0;
    }
    uint64_t v12 = *(_WORD *)(a2 + 32);
    uint64_t v13 = *(unsigned char *)(a2 + 34);
    *(void *)a3 = v8;
    *(_WORD *)(a3 + 8) = v9;
    *(void *)(a3 + 16) = v11;
    *(_DWORD *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
    *(_DWORD *)(a3 + 28) = v10;
    *(_WORD *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 3WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v13;
    *(unsigned char *)(a3 + 40) = 1;
    uint64_t result = (unsigned int *)v14;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 40) = 0;
  }
  uint64_t v14 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

{
  void *v5;
  unsigned int *result;
  uint64_t v7;
  WTF *v8;

  (*(void (**)(WTF **__return_ptr))(*(void *)a1 + 112))(&v8);
  uint64_t result = (unsigned int *)v8;
  if (v8 && *((void *)v8 + 1))
  {
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v7;
    *(unsigned char *)(a3 + 16) = 1;
    uint64_t result = (unsigned int *)v8;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  uint64_t v8 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

{
  void *v5;
  unsigned int *result;
  uint64_t v7;
  WTF *v8;
  int v9;
  int v10;
  char v11;
  int v12;
  unsigned int *v13;
  WTF *v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  int v18;
  unsigned __int8 v19;
  char v20;
  unsigned char v21[16];
  int v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned char *v25;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 184))(&v24);
  uint64_t result = (unsigned int *)v24;
  if (!v24 || (uint64_t v7 = *(void *)(v24 + 8)) == 0)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 56) = 0;
    goto LABEL_36;
  }
  v21[0] = 0;
  int v23 = 0;
  if (!*(unsigned char *)(a2 + 40)) {
    goto LABEL_22;
  }
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2 + 16, (uint64_t)&v14);
  if (v23 != v17)
  {
    if (v23)
    {
      if (v22 != -1) {
        ((void (*)(unsigned char **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v22])(&v25, v21);
      }
      uint64_t v22 = -1;
      int v23 = 0;
    }
    else
    {
      v21[0] = 0;
      uint64_t v22 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v21, (uint64_t)&v14);
      int v23 = 1;
    }
    goto LABEL_17;
  }
  if (!v23) {
    goto LABEL_20;
  }
  if (v22 == -1)
  {
    if (v16 == -1) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v25 = v21;
    ((void (*)(unsigned char **, unsigned char *, WTF **))off_1EE9D4470[v16])(&v25, v21, &v14);
    goto LABEL_17;
  }
  if (v16 != -1) {
    goto LABEL_16;
  }
  ((void (*)(unsigned char **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v22])(&v25, v21);
  uint64_t v22 = -1;
LABEL_17:
  if (v17 && v16 != -1) {
    ((void (*)(unsigned char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v16])(&v25, &v14);
  }
LABEL_20:
  if (v23)
  {
    uint64_t v7 = *(void *)(v24 + 8);
LABEL_22:
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
    uint64_t v8 = *(WTF **)(v7 + 16);
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    uint64_t v14 = v8;
    uint64_t v9 = *(_DWORD *)(a2 + 8);
    int v15 = v9;
    LOBYTE(v16) = 0;
    uint64_t v19 = 0;
    uint64_t v10 = v23;
    if (v23)
    {
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v16, (uint64_t)v21);
      uint64_t v19 = 1;
      uint64_t v8 = v14;
      uint64_t v9 = v15;
    }
    unsigned int v11 = *(unsigned char *)(a2 + 48);
    uint64_t v20 = v11;
    uint64_t v14 = 0;
    *(void *)a3 = v8;
    *(_DWORD *)(a3 + 8) = v9;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 40) = 0;
    if (v10)
    {
      *(_DWORD *)(a3 + 32) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a3 + 16, (uint64_t)&v16);
      *(unsigned char *)(a3 + 40) = 1;
      uint64_t v12 = v19;
      *(unsigned char *)(a3 + 48) = v20;
      *(unsigned char *)(a3 + 56) = 1;
      if (v12)
      {
        if (v18 != -1) {
          ((void (*)(unsigned char **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v18])(&v25, &v16);
        }
        int v18 = -1;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 48) = v11;
      *(unsigned char *)(a3 + 56) = 1;
    }
    uint64_t v13 = (unsigned int *)v14;
    uint64_t v14 = 0;
    if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v5);
    }
    if (v23 && v22 != -1) {
      ((void (*)(WTF **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v22])(&v14, v21);
    }
    goto LABEL_35;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 56) = 0;
LABEL_35:
  uint64_t result = (unsigned int *)v24;
LABEL_36:
  uint64_t v24 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

{
  WTF::StringImpl *v4;
  void *v5;
  unsigned int *result;
  char v7;
  atomic_uint *v8;

  uint64_t v4 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v5 = *(void **)(a2 + 8);
  if (!v5)
  {
    uint64_t result = 0;
    goto LABEL_9;
  }
  (*(void (**)(atomic_uint **__return_ptr))(*(void *)a1 + 104))(&v8);
  uint64_t result = (unsigned int *)v8;
  if (v8 && *((void *)v8 + 1))
  {
    atomic_fetch_add(v8, 1u);
LABEL_9:
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = result;
    uint64_t v7 = 1;
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
  *(unsigned char *)a3 = 0;
LABEL_10:
  *(unsigned char *)(a3 + 16) = v7;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
    if (!v4) {
      return result;
    }
  }
  else if (!v4)
  {
    return result;
  }
  if (*(_DWORD *)v4 == 2) {
    return (unsigned int *)WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v5);
  }
  *(_DWORD *)v4 -= 2;
  return result;
}

{
  WTF::StringImpl *v5;
  unsigned int *result;
  uint64_t v7;
  atomic_uint *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;

  (*(void (**)(WTF **__return_ptr))(*(void *)a1 + 168))(&v19);
  uint64_t result = (unsigned int *)v19;
  if (v19 && (uint64_t v7 = *((void *)v19 + 1)) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
    uint64_t v8 = *(atomic_uint **)(v7 + 16);
    atomic_fetch_add(v8, 1u);
    uint64_t v14 = (WTF *)v8;
    LOBYTE(v15) = 0;
    uint64_t v16 = 0;
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v9 = *(WTF::StringImpl **)(a2 + 8);
      if (v9) {
        *(_DWORD *)v9 += 2;
      }
      int v15 = v9;
      uint64_t v16 = 1;
    }
    uint64_t v10 = WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v17, (uint64_t *)(a2 + 24));
    *(void *)a3 = v14;
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v16)
    {
      uint64_t v12 = v15;
      int v15 = 0;
      *(void *)(a3 + 8) = v12;
      *(unsigned char *)(a3 + 16) = 1;
    }
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v17;
    uint64_t v13 = v18;
    uint64_t v17 = 0;
    int v18 = 0;
    *(void *)(a3 + 32) = v13;
    *(unsigned char *)(a3 + 40) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, v11);
    if (v16 && v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v5);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = (unsigned int *)v19;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 40) = 0;
  }
  uint64_t v19 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

{
  void *v5;
  unsigned int *result;
  uint64_t v7;
  atomic_uint *v8;
  int v9;
  int v10;
  char v11;
  int v12;
  int v13;
  char v14;
  __int16 v15;
  char v16;
  WTF *v17;

  (*(void (**)(WTF **__return_ptr))(*(void *)a1 + 192))(&v17);
  uint64_t result = (unsigned int *)v17;
  if (v17 && (uint64_t v7 = *((void *)v17 + 1)) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
    uint64_t v8 = *(atomic_uint **)(v7 + 16);
    atomic_fetch_add(v8, 1u);
    uint64_t v9 = *(_DWORD *)(a2 + 8);
    uint64_t v10 = *(_DWORD *)(a2 + 12);
    unsigned int v11 = *(unsigned char *)(a2 + 16);
    uint64_t v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(_DWORD *)(a2 + 24);
    uint64_t v14 = *(unsigned char *)(a2 + 28);
    *(void *)a3 = v8;
    *(_DWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 12) = v10;
    *(unsigned char *)(a3 + 16) = v11;
    *(_WORD *)(a3 + 17) = v15;
    *(unsigned char *)(a3 + 19) = v16;
    *(_DWORD *)(a3 + 20) = v12;
    *(_DWORD *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v13;
    *(unsigned char *)(a3 + 28) = v14;
    *(unsigned char *)(a3 + 32) = 1;
    uint64_t result = (unsigned int *)v17;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  uint64_t v17 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void WebKit::WebGPU::ConvertToBackingContext::convertToBacking(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(_DWORD **)a1;
  if (*(void *)a1) {
    *v4 += 2;
  }
  uint64_t v41 = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  if (!v5)
  {
    unsigned int v11 = 0;
    uint64_t v7 = 0;
LABEL_25:
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 20) = v11;
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
    return;
  }
  if (v5 < 0x5555556)
  {
    int v6 = 48 * v5;
    uint64_t v7 = WTF::fastMalloc((WTF *)(48 * v5));
    LODWORD(v5) = (v6 & 0xFFFFFFF0) / 0x30;
    LODWORD(v41) = v5;
    uint64_t v40 = v7;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10)
    {
      unsigned int v11 = 0;
      uint64_t v12 = 3 * v10;
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = 16 * v12;
      int v15 = (unsigned __int8 *)(v13 + 43);
      do
      {
        char v16 = *(v15 - 19);
        if (v16)
        {
          char v16 = *(v15 - 35);
          char v8 = *(v15 - 34);
          char v17 = 1;
          uint64_t v9 = *(void *)(v15 - 27);
        }
        else
        {
          char v17 = 0;
        }
        int v18 = *(v15 - 6);
        if (*(v15 - 6))
        {
          int v18 = *(v15 - 9);
          int v19 = (*(v15 - 8) << 8) | (*(v15 - 7) << 16);
          int v20 = 0x1000000;
        }
        else
        {
          int v20 = 0;
          int v19 = 0;
        }
        int v21 = *(v15 - 2);
        if (*(v15 - 2))
        {
          int v21 = *(v15 - 5);
          int v22 = (*(v15 - 4) << 8) | (*(v15 - 3) << 16);
          int v23 = 0x1000000;
        }
        else
        {
          int v22 = 0;
          int v23 = 0;
        }
        __int16 v24 = *(v15 - 10);
        __int16 v25 = *(v15 - 11);
        if (!*(v15 - 10)) {
          __int16 v25 = 0;
        }
        int v26 = *(_DWORD *)(v15 - 43);
        char v27 = *(v15 - 39);
        BYTE9(v36) = v8;
        *(void *)&long long v37 = v9;
        char v8 = v25;
        uint64_t v9 = v20 | v18 | v19;
        __int16 v28 = *v15 << 8;
        LODWORD(v36) = v26;
        BYTE4(v36) = v27;
        BYTE8(v36) = v16;
        BYTE8(v37) = v17;
        LOWORD(v38) = v25 | (v24 << 8);
        *(_DWORD *)((char *)&v38 + 2) = v9;
        *(_DWORD *)((char *)&v38 + 6) = v23 | v22 | v21;
        WORD5(v38) = v28;
        char v39 = 1;
        if (v11 == v41)
        {
          uint64_t v29 = (_OWORD *)WTF::Vector<WebKit::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, v11 + 1, (unint64_t)&v36);
          unsigned int v11 = HIDWORD(v41);
          uint64_t v7 = v40;
          long long v30 = (_OWORD *)(v40 + 48 * HIDWORD(v41));
          long long v32 = v29[1];
          long long v31 = v29[2];
          _OWORD *v30 = *v29;
          v30[1] = v32;
          v30[2] = v31;
        }
        else
        {
          long long v33 = (_OWORD *)(v7 + 48 * v11);
          long long v34 = v36;
          long long v35 = v38;
          v33[1] = v37;
          v33[2] = v35;
          *long long v33 = v34;
        }
        HIDWORD(v41) = ++v11;
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
      LODWORD(v5) = v41;
    }
    else
    {
      unsigned int v11 = 0;
    }
    goto LABEL_25;
  }
  __break(0xC471u);
}

void WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(_DWORD **)a1;
  if (*(void *)a1) {
    *v4 += 2;
  }
  uint64_t v41 = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  if (!v5)
  {
    unsigned int v11 = 0;
    uint64_t v7 = 0;
LABEL_25:
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 20) = v11;
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
    return;
  }
  if (v5 < 0x5555556)
  {
    int v6 = 48 * v5;
    uint64_t v7 = WTF::fastMalloc((WTF *)(48 * v5));
    LODWORD(v5) = (v6 & 0xFFFFFFF0) / 0x30;
    LODWORD(v41) = v5;
    uint64_t v40 = v7;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10)
    {
      unsigned int v11 = 0;
      uint64_t v12 = 3 * v10;
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = 16 * v12;
      int v15 = (unsigned __int8 *)(v13 + 43);
      do
      {
        char v16 = *(v15 - 19);
        if (v16)
        {
          char v16 = *(v15 - 35);
          char v8 = *(v15 - 34);
          char v17 = 1;
          uint64_t v9 = *(void *)(v15 - 27);
        }
        else
        {
          char v17 = 0;
        }
        int v18 = *(v15 - 6);
        if (*(v15 - 6))
        {
          int v18 = *(v15 - 9);
          int v19 = (*(v15 - 8) << 8) | (*(v15 - 7) << 16);
          int v20 = 0x1000000;
        }
        else
        {
          int v20 = 0;
          int v19 = 0;
        }
        int v21 = *(v15 - 2);
        if (*(v15 - 2))
        {
          int v21 = *(v15 - 5);
          int v22 = (*(v15 - 4) << 8) | (*(v15 - 3) << 16);
          int v23 = 0x1000000;
        }
        else
        {
          int v22 = 0;
          int v23 = 0;
        }
        __int16 v24 = *(v15 - 10);
        __int16 v25 = *(v15 - 11);
        if (!*(v15 - 10)) {
          __int16 v25 = 0;
        }
        int v26 = *(_DWORD *)(v15 - 43);
        char v27 = *(v15 - 39);
        BYTE9(v36) = v8;
        *(void *)&long long v37 = v9;
        char v8 = v25;
        uint64_t v9 = v20 | v18 | v19;
        __int16 v28 = *v15 << 8;
        LODWORD(v36) = v26;
        BYTE4(v36) = v27;
        BYTE8(v36) = v16;
        BYTE8(v37) = v17;
        LOWORD(v38) = v25 | (v24 << 8);
        *(_DWORD *)((char *)&v38 + 2) = v9;
        *(_DWORD *)((char *)&v38 + 6) = v23 | v22 | v21;
        WORD5(v38) = v28;
        char v39 = 1;
        if (v11 == v41)
        {
          uint64_t v29 = (_OWORD *)WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, v11 + 1, (unint64_t)&v36);
          unsigned int v11 = HIDWORD(v41);
          uint64_t v7 = v40;
          long long v30 = (_OWORD *)(v40 + 48 * HIDWORD(v41));
          long long v32 = v29[1];
          long long v31 = v29[2];
          _OWORD *v30 = *v29;
          v30[1] = v32;
          v30[2] = v31;
        }
        else
        {
          long long v33 = (_OWORD *)(v7 + 48 * v11);
          long long v34 = v36;
          long long v35 = v38;
          v33[1] = v37;
          v33[2] = v35;
          *long long v33 = v34;
        }
        HIDWORD(v41) = ++v11;
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
      LODWORD(v5) = v41;
    }
    else
    {
      unsigned int v11 = 0;
    }
    goto LABEL_25;
  }
  __break(0xC471u);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9D3DF0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 32) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9D3E10[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  __n128 result = *(__n128 *)(a3 + 1);
  *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *((unsigned char *)a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

unint64_t WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      int v5 = 48 * a2;
      __n128 result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = 48 * v4;
        unint64_t v8 = (_DWORD *)((char *)v3 + 40);
        do
        {
          *(_DWORD *)__n128 result = *(v8 - 10);
          *(unsigned char *)(result + 8) = 0;
          uint64_t v9 = result + 8;
          *(_DWORD *)(result + 40) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::reference_wrapper<WebCore::WebGPU::Sampler>,std::reference_wrapper<WebCore::WebGPU::TextureView>,WebCore::WebGPU::BufferBinding,std::reference_wrapper<WebCore::WebGPU::ExternalTexture>>,(std::__variant_detail::_Trait)1>>(result + 8, (uint64_t)(v8 - 8));
          uint64_t v10 = *v8;
          if (v10 != -1) {
            ((void (*)(char *, _DWORD *))off_1EE9D3DF0[v10])(&v11, v8 - 8);
          }
          *unint64_t v8 = -1;
          v8 += 12;
          __n128 result = v9 + 40;
          v7 -= 48;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WebGPU::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      int v5 = 48 * a2;
      __n128 result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = 48 * v4;
        unint64_t v8 = v3;
        do
        {
          long long v9 = *(_OWORD *)v8;
          long long v10 = *((_OWORD *)v8 + 2);
          *(_OWORD *)(result + 16) = *((_OWORD *)v8 + 1);
          *(_OWORD *)(result + 32) = v10;
          *(_OWORD *)__n128 result = v9;
          result += 48;
          unint64_t v8 = (WTF *)((char *)v8 + 48);
          v7 -= 48;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebKit::TextChecker::setContinuousSpellCheckingEnabled(WebKit::TextChecker *this)
{
  unsigned __int8 v1 = this;
  WebKit::mutableState(this);
  char v3 = WebKit::mutableState(void)::state ^ v1;
  if ((WebKit::mutableState(void)::state ^ v1))
  {
    WebKit::mutableState(v2);
    WebKit::mutableState(void)::state = WebKit::mutableState(void)::state & 0xFE | v1;
  }
  return v3 & 1;
}

void WebKit::TextChecker::setGrammarCheckingEnabled(WebKit::TextChecker *this)
{
  int v1 = (int)this;
  WebKit::mutableState(this);
  if (v1 != (WebKit::mutableState(void)::state & 2) >> 1)
  {
    WebKit::mutableState(v2);
    if (v1) {
      char v3 = 2;
    }
    else {
      char v3 = 0;
    }
    WebKit::mutableState(void)::state = WebKit::mutableState(void)::state & 0xFD | v3;
  }
}

void WebKit::TextChecker::closeSpellDocumentWithTag(WebKit::TextChecker *this)
{
  char v3 = this;
  {
    WebKit::spellDocumentTagMap(void)::tagMap = 0;
  }
  int v1 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::spellDocumentTagMap(void)::tagMap, &v3);
  if (WebKit::spellDocumentTagMap(void)::tagMap)
  {
    uint64_t v2 = WebKit::spellDocumentTagMap(void)::tagMap
       + 16 * *(unsigned int *)(WebKit::spellDocumentTagMap(void)::tagMap - 4);
    if ((void *)v2 == v1) {
      return;
    }
  }
  else
  {
    if (!v1) {
      return;
    }
    uint64_t v2 = 0;
  }
  if ((void *)v2 != v1) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(&WebKit::spellDocumentTagMap(void)::tagMap, v1);
  }
}

void WebKit::TextChecker::checkTextOfParagraph(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  v142[1] = *MEMORY[0x1E4F143B8];
  v137[0] = a2;
  v137[1] = a3;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  if ((a5 & 1) == 0) {
    return;
  }
  {
    uint64_t v9 = WebKit::spellDocumentTagMap(void)::tagMap;
    if (WebKit::spellDocumentTagMap(void)::tagMap)
    {
LABEL_5:
      int v10 = *(_DWORD *)(v9 - 8);
      goto LABEL_6;
    }
  }
  else
  {
    WebKit::spellDocumentTagMap(void)::tagMap = 0;
  }
  WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>>,WTF::DefaultHash<long long>,WTF::HashMap<long long,WTF::RetainPtr<UITextChecker>,WTF::DefaultHash<long long>,WTF::HashTraits<long long>,WTF::HashTraits<WTF::RetainPtr<UITextChecker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long long>>::expand(0);
  uint64_t v9 = WebKit::spellDocumentTagMap(void)::tagMap;
  if (WebKit::spellDocumentTagMap(void)::tagMap) {
    goto LABEL_5;
  }
  int v10 = 0;
LABEL_6:
  unint64_t v11 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
  int v15 = (uint64_t *)(v9 + 16 * v14);
  uint64_t v16 = *v15;
  if (!*v15)
  {
LABEL_14:
    int v19 = (const void *)v15[1];
    *int v15 = a1;
    v15[1] = 0;
    if (v19) {
      CFRelease(v19);
    }
    if (WebKit::spellDocumentTagMap(void)::tagMap) {
      int v20 = *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 12) = v20;
    if (WebKit::spellDocumentTagMap(void)::tagMap) {
      int v21 = *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 16) + v21);
    unint64_t v23 = *(unsigned int *)(WebKit::spellDocumentTagMap(void)::tagMap - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
      {
LABEL_25:
        uint64_t v24 = [objc_alloc(MEMORY[0x1E4F42EE8]) _initWithAsynchronousLoading:1];
        __int16 v25 = (const void *)v15[1];
        v15[1] = v24;
        if (v25) {
          CFRelease(v25);
        }
        goto LABEL_27;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_25;
    }
    int v15 = WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>>,WTF::DefaultHash<long long>,WTF::HashMap<long long,WTF::RetainPtr<UITextChecker>,WTF::DefaultHash<long long>,WTF::HashTraits<long long>,WTF::HashTraits<WTF::RetainPtr<UITextChecker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long long>>::expand(v15);
    goto LABEL_25;
  }
  char v17 = 0;
  int v18 = 1;
  while (v16 != a1)
  {
    if (v16 == -1) {
      char v17 = v15;
    }
    unsigned int v14 = (v14 + v18) & v10;
    int v15 = (uint64_t *)(v9 + 16 * v14);
    uint64_t v16 = *v15;
    ++v18;
    if (!*v15)
    {
      if (v17)
      {
        uint64_t *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(v9 - 16);
        int v15 = v17;
      }
      goto LABEL_14;
    }
  }
LABEL_27:
  int v26 = (void *)v15[1];
  if (v26)
  {
    char v27 = (void *)v15[1];
    CFRetain(v26);
    int v26 = v27;
  }
  v113 = v26;
  if (([v26 _doneLoading] & 1) == 0) {
    goto LABEL_134;
  }
  __int16 v28 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42B30], "sharedInputModeController"), "currentInputMode");
  if (objc_msgSend((id)objc_msgSend(v28, "multilingualLanguages"), "count"))
  {
    uint64_t v29 = [v28 multilingualLanguages];
LABEL_34:
    uint64_t v30 = v29;
    goto LABEL_35;
  }
  if ([v28 primaryLanguage])
  {
    v142[0] = [v28 languageWithRegion];
    uint64_t v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:v142 count:1];
    goto LABEL_34;
  }
  uint64_t v30 = MEMORY[0x1E4F1CBF0];
LABEL_35:
  WTF::StringView::createNSStringWithoutCopying((uint64_t *)&cf, (WTF::StringView *)v137);
  uint64_t v31 = [(id)cf length];
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    v100 = 0;
    do
    {
      uint64_t v101 = objc_msgSend(v113, "rangeOfMisspelledWordInString:range:startingAt:wrap:languages:", cf, 0, v31, v100, 0, v30);
      uint64_t v103 = v101;
      if (v101 == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      v104 = v102;
      long long v130 = 0uLL;
      v131 = 0;
      v129[0] = 1;
      *(void *)&v129[8] = v101;
      *(void *)&v129[16] = v102;
      unsigned int v105 = *(_DWORD *)(a6 + 12);
      if (v105 == *(_DWORD *)(a6 + 8))
      {
        WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>(a6, (unint64_t)v129);
      }
      else
      {
        uint64_t v106 = *(void *)a6 + 48 * v105;
        uint64_t v107 = *(void *)&v129[16];
        *(_OWORD *)uint64_t v106 = *(_OWORD *)v129;
        *(void *)(v106 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        *(void *)(v106 + 32) = 0;
        *(void *)(v106 + 16) = v107;
        uint64_t v108 = v130;
        *(void *)&long long v130 = 0;
        *(void *)(v106 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v108;
        LODWORD(v108) = DWORD2(v130);
        DWORD2(v130) = 0;
        *(_DWORD *)(v106 + 32) = v108;
        LODWORD(v108) = HIDWORD(v130);
        HIDWORD(v130) = 0;
        *(_DWORD *)(v106 + 36) = v108;
        CGRect v109 = v131;
        v131 = 0;
        *(void *)(v106 + 40) = v109;
        ++*(_DWORD *)(a6 + 12);
      }
      CGRect v110 = v131;
      v131 = 0;
      if (v110)
      {
        if (*(_DWORD *)v110 == 2) {
          WTF::StringImpl::destroy(v110, v102);
        }
        else {
          *(_DWORD *)v110 -= 2;
        }
      }
      WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v130, v102);
      unint64_t v111 = [(id)cf length];
      v100 = (char *)v104 + v103;
    }
    while ((unint64_t)v104 + v103 < v111);
    goto LABEL_132;
  }
  char v32 = a5;
  uint64_t v33 = 6;
  if ((a5 & 2) == 0) {
    uint64_t v33 = 2;
  }
  if ((a5 & 0x40) != 0) {
    uint64_t v34 = v33 | 0x200;
  }
  else {
    uint64_t v34 = v33;
  }
  v140 = @"InsertionPoint";
  uint64_t v141 = [NSNumber numberWithInt:a4];
  uint64_t v35 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v141 forKeys:&v140 count:1];
  long long v134 = 0u;
  long long v135 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  obuint64_t j = (id)objc_msgSend(v113, "checkString:range:types:languages:options:", cf, 0, v31, v34, v30, v35);
  uint64_t v36 = [obj countByEnumeratingWithState:&v132 objects:v139 count:16];
  if (!v36)
  {
LABEL_132:
    CFTypeRef v112 = cf;
    CFTypeRef cf = 0;
    if (v112) {
      CFRelease(v112);
    }
LABEL_134:
    if (v113) {
      CFRelease(v113);
    }
    return;
  }
  uint64_t v117 = *(void *)v133;
  char v114 = v32;
LABEL_43:
  uint64_t v37 = 0;
  uint64_t v118 = v36;
  while (1)
  {
    if (*(void *)v133 != v117) {
      objc_enumerationMutation(obj);
    }
    uint64_t v119 = v37;
    long long v38 = *(void **)(*((void *)&v132 + 1) + 8 * v37);
    uint64_t v39 = [v38 resultType];
    uint64_t v40 = [v38 range];
    uint64_t v42 = v40;
    uint64_t v43 = v41;
    if (v39 == 512)
    {
      if ((v32 & 0x40) == 0) {
        goto LABEL_116;
      }
      long long v130 = 0uLL;
      v131 = 0;
      v129[0] = 64;
      *(void *)&v129[8] = v40;
      *(void *)&v129[16] = v41;
      MEMORY[0x19972EAD0](v122, [v38 replacementString]);
      unint64_t v71 = v122[0];
      v122[0] = 0;
      unsigned int v72 = v131;
      v131 = v71;
      if (v72)
      {
        int v73 = *(_DWORD *)v72 - 2;
        if (*(_DWORD *)v72 != 2)
        {
LABEL_88:
          *(_DWORD *)unsigned int v72 = v73;
          goto LABEL_89;
        }
        WTF::StringImpl::destroy(v72, v70);
        unsigned int v72 = v122[0];
        v122[0] = 0;
        if (v72)
        {
          int v73 = *(_DWORD *)v72 - 2;
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::destroy(v72, v74);
            goto LABEL_89;
          }
          goto LABEL_88;
        }
      }
LABEL_89:
      if ((objc_opt_respondsToSelector() & 1) == 0) {
        goto LABEL_109;
      }
      v75 = (void *)[v38 detail];
      if (!v75) {
        goto LABEL_109;
      }
      uint64_t v76 = WTF::fastMalloc((WTF *)0x28);
      DWORD2(v130) = 1;
      *(void *)&long long v130 = v76;
      v124 = 0;
      *(_OWORD *)v122 = 0u;
      *(_OWORD *)v123 = 0u;
      v122[0] = (WTF::StringImpl *)objc_msgSend((id)objc_msgSend(v75, "objectForKey:", @"NSGrammarRange"), "rangeValue");
      v122[1] = v77;
      MEMORY[0x19972EAD0](&v120, [v75 objectForKey:@"NSGrammarUserDescription"]);
      int v79 = v120;
      v120 = 0;
      uint64_t v80 = v124;
      v124 = v79;
      if (v80)
      {
        int v81 = *(_DWORD *)v80 - 2;
        if (*(_DWORD *)v80 != 2)
        {
LABEL_95:
          *(_DWORD *)uint64_t v80 = v81;
          goto LABEL_96;
        }
        WTF::StringImpl::destroy(v80, v78);
        uint64_t v80 = v120;
        v120 = 0;
        if (v80)
        {
          int v81 = *(_DWORD *)v80 - 2;
          if (*(_DWORD *)v80 == 2)
          {
            WTF::StringImpl::destroy(v80, v82);
            goto LABEL_96;
          }
          goto LABEL_95;
        }
      }
LABEL_96:
      WTF::makeVector<WTF::String>((void *)[v75 objectForKey:@"NSGrammarCorrections"], (uint64_t)&v120);
      if (HIDWORD(v123[1])) {
        WTF::VectorDestructor<true,WTF::String>::destruct(v123[0], (WTF *)((char *)v123[0] + 8 * HIDWORD(v123[1])));
      }
      v84 = v123[0];
      if (v123[0])
      {
        v123[0] = 0;
        LODWORD(v123[1]) = 0;
        WTF::fastFree(v84, v83);
      }
      v123[0] = v120;
      uint64_t v85 = v121;
      v120 = 0;
      v121 = 0;
      v123[1] = v85;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v120, v83);
      if (HIDWORD(v130) == DWORD2(v130))
      {
        WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GrammarDetail>((uint64_t)&v130, (unint64_t)v122);
      }
      else
      {
        uint64_t v91 = v130 + 40 * HIDWORD(v130);
        *(_OWORD *)uint64_t v91 = *(_OWORD *)v122;
        *(void *)(v91 + 16) = 0;
        *(void *)(v91 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        uint64_t v92 = v123[0];
        v123[0] = 0;
        *(void *)(v91 + 16) = v92;
        LODWORD(v92) = v123[1];
        LODWORD(v123[1]) = 0;
        *(_DWORD *)(v91 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v92;
        LODWORD(v92) = HIDWORD(v123[1]);
        HIDWORD(v123[1]) = 0;
        *(_DWORD *)(v91 + 28) = v92;
        uint64_t v93 = v124;
        v124 = 0;
        *(void *)(v91 + 32) = v93;
        ++HIDWORD(v130);
      }
      v94 = v124;
      v124 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2) {
          WTF::StringImpl::destroy(v94, v86);
        }
        else {
          *(_DWORD *)v94 -= 2;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v123, v86);
LABEL_109:
      uint64_t v44 = a6;
      unsigned int v45 = *(_DWORD *)(a6 + 12);
      if (v45 == *(_DWORD *)(a6 + 8)) {
        goto LABEL_50;
      }
      goto LABEL_110;
    }
    if (v39 == 4) {
      break;
    }
    if (v39 != 2) {
      goto LABEL_116;
    }
    long long v130 = 0uLL;
    v131 = 0;
    v129[0] = 1;
    *(void *)&v129[8] = v40;
    *(void *)&v129[16] = v41;
    uint64_t v44 = a6;
    unsigned int v45 = *(_DWORD *)(a6 + 12);
    if (v45 == *(_DWORD *)(a6 + 8))
    {
LABEL_50:
      WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>(v44, (unint64_t)v129);
      goto LABEL_111;
    }
LABEL_110:
    uint64_t v95 = *(void *)v44 + 48 * v45;
    uint64_t v96 = *(void *)&v129[16];
    *(_OWORD *)uint64_t v95 = *(_OWORD *)v129;
    *(void *)(v95 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    *(void *)(v95 + 32) = 0;
    *(void *)(v95 + 16) = v96;
    uint64_t v97 = v130;
    *(void *)&long long v130 = 0;
    *(void *)(v95 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v97;
    LODWORD(v97) = DWORD2(v130);
    DWORD2(v130) = 0;
    *(_DWORD *)(v95 + 32) = v97;
    LODWORD(v97) = HIDWORD(v130);
    HIDWORD(v130) = 0;
    *(_DWORD *)(v95 + 36) = v97;
    v98 = v131;
    v131 = 0;
    *(void *)(v95 + 40) = v98;
    ++*(_DWORD *)(v44 + 12);
LABEL_111:
    v99 = v131;
    v131 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2) {
        WTF::StringImpl::destroy(v99, v41);
      }
      else {
        *(_DWORD *)v99 -= 2;
      }
    }
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v130, v41);
LABEL_116:
    uint64_t v37 = v119 + 1;
    if (v119 + 1 == v118)
    {
      uint64_t v36 = [obj countByEnumeratingWithState:&v132 objects:v139 count:16];
      if (!v36) {
        goto LABEL_132;
      }
      goto LABEL_43;
    }
  }
  if ((v32 & 2) == 0) {
    goto LABEL_116;
  }
  v129[0] = 0;
  *(_OWORD *)&v129[8] = 0u;
  long long v130 = 0u;
  v131 = 0;
  long long v46 = (void *)[v38 grammarDetails];
  v129[0] = 2;
  *(void *)&v129[8] = v42;
  *(void *)&v129[16] = v43;
  unint64_t v47 = [v46 count];
  if (!v47) {
    goto LABEL_55;
  }
  if (v47 < 0x6666667)
  {
    unsigned int v48 = 40 * v47;
    uint64_t v49 = WTF::fastMalloc((WTF *)(40 * v47));
    DWORD2(v130) = v48 / 0x28;
    *(void *)&long long v130 = v49;
LABEL_55:
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    uint64_t v50 = [v46 countByEnumeratingWithState:&v125 objects:v138 count:16];
    if (!v50)
    {
LABEL_80:
      unsigned int v69 = *(_DWORD *)(a6 + 12);
      if (v69 == *(_DWORD *)(a6 + 8))
      {
        WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>(a6, (unint64_t)v129);
      }
      else
      {
        uint64_t v87 = *(void *)a6 + 48 * v69;
        uint64_t v88 = *(void *)&v129[16];
        *(_OWORD *)uint64_t v87 = *(_OWORD *)v129;
        *(void *)(v87 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        *(void *)(v87 + 32) = 0;
        *(void *)(v87 + 16) = v88;
        uint64_t v89 = v130;
        *(void *)&long long v130 = 0;
        *(void *)(v87 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v89;
        LODWORD(v89) = DWORD2(v130);
        DWORD2(v130) = 0;
        *(_DWORD *)(v87 + 32) = v89;
        LODWORD(v89) = HIDWORD(v130);
        HIDWORD(v130) = 0;
        *(_DWORD *)(v87 + 36) = v89;
        int v90 = v131;
        v131 = 0;
        *(void *)(v87 + 40) = v90;
        ++*(_DWORD *)(a6 + 12);
      }
      char v32 = v114;
      goto LABEL_111;
    }
    uint64_t v51 = *(void *)v126;
    while (2)
    {
      uint64_t v52 = 0;
LABEL_58:
      if (*(void *)v126 != v51) {
        objc_enumerationMutation(v46);
      }
      int v53 = *(void **)(*((void *)&v125 + 1) + 8 * v52);
      v124 = 0;
      *(_OWORD *)v122 = 0u;
      *(_OWORD *)v123 = 0u;
      v122[0] = (WTF::StringImpl *)objc_msgSend((id)objc_msgSend(v53, "objectForKey:", @"NSGrammarRange"), "rangeValue");
      v122[1] = v54;
      MEMORY[0x19972EAD0](&v120, [v53 objectForKey:@"NSGrammarUserDescription"]);
      uint64_t v56 = v120;
      v120 = 0;
      v57 = v124;
      v124 = v56;
      if (v57)
      {
        int v58 = *(_DWORD *)v57 - 2;
        if (*(_DWORD *)v57 != 2) {
          goto LABEL_64;
        }
        WTF::StringImpl::destroy(v57, v55);
        v57 = v120;
        v120 = 0;
        if (v57)
        {
          int v58 = *(_DWORD *)v57 - 2;
          if (*(_DWORD *)v57 == 2) {
            WTF::StringImpl::destroy(v57, v59);
          }
          else {
LABEL_64:
          }
            *(_DWORD *)v57 = v58;
        }
      }
      WTF::makeVector<WTF::String>((void *)[v53 objectForKey:@"NSGrammarCorrections"], (uint64_t)&v120);
      if (HIDWORD(v123[1])) {
        WTF::VectorDestructor<true,WTF::String>::destruct(v123[0], (WTF *)((char *)v123[0] + 8 * HIDWORD(v123[1])));
      }
      uint64_t v61 = v123[0];
      if (v123[0])
      {
        v123[0] = 0;
        LODWORD(v123[1]) = 0;
        WTF::fastFree(v61, v60);
      }
      v123[0] = v120;
      int v62 = v121;
      v120 = 0;
      v121 = 0;
      v123[1] = v62;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v120, v60);
      if (HIDWORD(v130) == DWORD2(v130))
      {
        WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GrammarDetail>((uint64_t)&v130, (unint64_t)v122);
      }
      else
      {
        uint64_t v64 = v130 + 40 * HIDWORD(v130);
        *(_OWORD *)uint64_t v64 = *(_OWORD *)v122;
        *(void *)(v64 + 16) = 0;
        *(void *)(v64 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        long long v65 = v123[0];
        v123[0] = 0;
        *(void *)(v64 + 16) = v65;
        LODWORD(v65) = v123[1];
        LODWORD(v123[1]) = 0;
        *(_DWORD *)(v64 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v65;
        LODWORD(v65) = HIDWORD(v123[1]);
        HIDWORD(v123[1]) = 0;
        *(_DWORD *)(v64 + 28) = v65;
        long long v66 = v124;
        v124 = 0;
        *(void *)(v64 + 32) = v66;
        ++HIDWORD(v130);
      }
      char v67 = v124;
      v124 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2) {
          WTF::StringImpl::destroy(v67, v63);
        }
        else {
          *(_DWORD *)v67 -= 2;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v123, v63);
      if (v50 == ++v52)
      {
        uint64_t v68 = [v46 countByEnumeratingWithState:&v125 objects:v138 count:16];
        uint64_t v50 = v68;
        if (!v68) {
          goto LABEL_80;
        }
        continue;
      }
      goto LABEL_58;
    }
  }
  __break(0xC471u);
}

void sub_198D93E68(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a15, a2);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c98_ZTSKZ85__UIScrollView_WebKitInternal___wk_setContentOffsetAndShowScrollIndicators_animated__E3__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v3;
  return result;
}

void WebKit::createUIAlertController(WebKit *this@<X0>, NSString *a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:this];
  uint64_t v8 = [MEMORY[0x1E4F42A30] preferredFontForTextStyle:*MEMORY[0x1E4F438A0]];
  uint64_t v9 = [(WebKit *)this length];
  objc_msgSend(v7, "addAttribute:value:range:", *MEMORY[0x1E4F42508], v8, 0, v9);
  id v10 = objc_alloc_init(MEMORY[0x1E4F42728]);
  *a3 = v10;
  [v10 _setAttributedTitle:v7];
  [v10 setTitle:this];
  [v10 setMessage:a2];
  [v10 setPreferredStyle:1];
  if (v7)
  {
    CFRelease(v7);
  }
}

void sub_198D947E4(_Unwind_Exception *exception_object)
{
  *uint64_t v2 = 0;
  if (v3) {
    CFRelease(v3);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::scrollViewForTouches(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)v9;
LABEL_3:
  uint64_t v5 = 0;
  while (1)
  {
    if (*(void *)v9 != v4) {
      objc_enumerationMutation(a1);
    }
    uint64_t v6 = [*(id *)(*((void *)&v8 + 1) + 8 * v5) view];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (v6) {
        return v6;
      }
    }
    if (v3 == ++v5)
    {
      uint64_t v3 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

void WebKit::ViewGestureController::beginSwipeGesture(uint64_t a1, void *a2, int a3)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 24)) {
    return;
  }
  *(_DWORD *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  *(void *)(a1 + 96) = ++WebKit::ViewGestureController::takeNextGestureID(void)::nextGestureID;
  WebKit::WebPageProxy::willBeginViewGesture(*(WebKit::WebPageProxy **)(a1 + 16));
  WebKit::WebPageProxy::recordAutomaticNavigationSnapshot(*(WebKit::WebPageProxy **)(a1 + 16));
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0)
  {
    uint64_t v8 = v7 - 16;
    CFRetain(*(CFTypeRef *)(v7 - 8));
    char v9 = 0;
    long long v10 = (uint64_t *)(a1 + 80);
    uint64_t v11 = v8;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v8 = *(void *)(a1 + 16);
    long long v10 = (uint64_t *)(a1 + 80);
    char v9 = 1;
    if (!v8) {
      goto LABEL_7;
    }
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  uint64_t v12 = v8;
LABEL_7:
  uint64_t v13 = *v10;
  uint64_t *v10 = v12;
  if (v13)
  {
    CFRelease(*(CFTypeRef *)(v13 + 8));
    uint64_t v12 = *v10;
  }
  uint64_t v14 = *(void *)(v12 + 664);
  uint64_t v15 = WebKit::itemSkippingBackForwardItemsAddedByJSWithoutUserGesture(v14, a3 != 0);
  if (!v15)
  {
    int v73 = qword_1EB358708;
    if (os_log_type_enabled((os_log_t)qword_1EB358708, OS_LOG_TYPE_ERROR))
    {
      v74 = "back";
      if (a3) {
        v74 = "forward";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v74;
      _os_log_error_impl(&dword_1985F2000, v73, OS_LOG_TYPE_ERROR, "Failed to find %s item when beginning swipe.", buf, 0xCu);
    }
    *(_DWORD *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    *(void *)(a1 + 96) = 0;
    WebKit::WebPageProxy::didEndViewGesture(*(WebKit::WebPageProxy **)(a1 + 16));
    if ((v9 & 1) == 0) {
      goto LABEL_76;
    }
    return;
  }
  uint64_t v16 = v15;
  uint64_t v77 = v11;
  CFRetain(*(CFTypeRef *)(v15 + 8));
  WebKit::WebPageProxy::navigationGestureDidBegin(*(WebKit::WebPageProxy **)(a1 + 80));
  char v17 = *(WebKit::WebPageProxy **)(a1 + 16);
  if (*(WebKit::WebPageProxy **)(a1 + 80) != v17)
  {
    WebKit::WebPageProxy::navigationGestureDidBegin(v17);
    uint64_t v18 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 80) != v18)
    {
      uint64_t v19 = *(void *)(v18 + 664);
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        if (*(void *)(v20 + 8) && *(unsigned char *)(v19 + 48))
        {
          unint64_t v21 = *(void *)(v19 + 40);
          if (v21 < *(unsigned int *)(v19 + 36))
          {
            uint64_t v22 = *(void *)(*(void *)(v19 + 24) + 8 * v21);
            if (!v22) {
              goto LABEL_27;
            }
            uint64_t v23 = *(void *)(v14 + 16);
            if (!v23) {
              goto LABEL_23;
            }
            uint64_t v23 = *(void *)(v23 + 8);
            if (!v23) {
              goto LABEL_23;
            }
            if (!*(unsigned char *)(v14 + 48))
            {
              uint64_t v23 = 0;
              goto LABEL_23;
            }
            unint64_t v24 = *(void *)(v14 + 40);
            if (v24 < *(unsigned int *)(v14 + 36))
            {
              uint64_t v23 = *(void *)(*(void *)(v14 + 24) + 8 * v24);
LABEL_23:
              __int16 v25 = *(_DWORD **)(v22 + 336);
              if (v25) {
                ++*v25;
              }
              int v26 = *(WebKit::ViewSnapshot **)(v23 + 336);
              *(void *)(v23 + 336) = v25;
              if (v26) {
                WTF::RefCounted<WebKit::ViewSnapshot>::deref(v26);
              }
              goto LABEL_27;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x198D951A0);
        }
      }
    }
  }
LABEL_27:
  *(_OWORD *)buf = 0u;
  unsigned long long v86 = 0u;
  [*(id *)(a1 + 104) frame];
  *(void *)buf = v27;
  *(void *)&buf[8] = v28;
  *(CGFloat *)&unsigned long long v86 = v29;
  *((CGFloat *)&v86 + 1) = v30;
  id v31 = objc_alloc_init(MEMORY[0x1E4F42FF8]);
  char v76 = v9;
  char v32 = objc_msgSend(objc_alloc(MEMORY[0x1E4F42FF0]), "initWithFrame:", *(double *)buf, *(double *)&buf[8], v86);
  uint64_t v33 = *(const void **)(a1 + 120);
  *(void *)(a1 + 120) = v32;
  if (v33)
  {
    CFRelease(v33);
    char v32 = *(void **)(a1 + 120);
  }
  [v32 setUserInteractionEnabled:0];
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 120), "layer"), "setName:", @"SwipeSnapshot");
  uint64_t v34 = (const void *)[MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v36 = v34;
  if (v34) {
    CFRetain(v34);
  }
  uint64_t v37 = *(void *)(v16 + 336);
  if (v37)
  {
    uint64_t v38 = *(void *)(a1 + 16);
    uint64_t v39 = 764;
    if (!*(unsigned char *)(v38 + 768)) {
      uint64_t v39 = 760;
    }
    LODWORD(v35) = *(_DWORD *)(v38 + v39);
    uint64_t v75 = v35;
    WebCore::FloatSize::FloatSize((WebCore::FloatSize *)&v84, (const CGSize *)&v86);
    float32x2_t v84 = vmul_n_f32(v84, *(float *)&v75);
    int v40 = *(unsigned __int8 *)(v16 + 160);
    float v41 = roundf(WebKit::WebPageProxy::viewScrollPosition(*(WebKit::WebPageProxy **)(a1 + 16)));
    if (v41 >= 2147500000.0)
    {
      int v43 = 0x7FFFFFFF;
    }
    else if (v41 <= -2147500000.0)
    {
      int v43 = 0x80000000;
    }
    else
    {
      int v43 = (int)v41;
    }
    float v44 = roundf(v42);
    if (v44 >= 2147500000.0)
    {
      int v45 = 0x7FFFFFFF;
    }
    else if (v44 <= -2147500000.0)
    {
      int v45 = 0x80000000;
    }
    else
    {
      int v45 = (int)v44;
    }
    uint64_t v46 = *(void *)(v37 + 16);
    if (v46
      && v84.f32[0] == (float)*(int *)(v46 + 24)
      && v84.f32[1] == (float)*(int *)(v46 + 28)
      && *(float *)&v75 == *(float *)(v37 + 32)
      && (v40 || v43 == *(_DWORD *)(v37 + 48) && v45 == *(_DWORD *)(v37 + 52)))
    {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 120), "layer"), "setContents:", WebKit::ViewSnapshot::asLayerContents((WebKit::ViewSnapshot *)v37));
    }
    WebCore::Color::Color((WebCore::Color *)&v83, (const Color *)(v37 + 40));
    uint64_t v48 = v83;
    if ((v83 & 0x4000000000000) != 0)
    {
      WebCore::cocoaColor((uint64_t *)&cf, (WebCore *)&v83, v47);
      CFTypeRef v49 = cf;
      CFTypeRef cf = 0;
      if (v36)
      {
        CFRelease(v36);
        CFTypeRef v50 = cf;
        CFTypeRef cf = 0;
        if (v50) {
          CFRelease(v50);
        }
      }
      uint64_t v48 = v83;
      uint64_t v36 = v49;
    }
    if ((v48 & 0x8000000000000) != 0)
    {
      unsigned int v72 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, v47);
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 120), "setBackgroundColor:", v36, v75);
  uint64_t v51 = (void *)[*(id *)(a1 + 120) layer];
  [v51 setContentsGravity:*MEMORY[0x1E4F3A3F8]];
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "window"), "screen"), "scale");
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 120), "layer"), "setContentsScale:", v52);
  [v31 setView:*(void *)(a1 + 120)];
  id v53 = objc_alloc(MEMORY[0x1E4F42FF0]);
  unint64_t v54 = objc_msgSend(v53, "initWithFrame:", *(double *)buf, *(double *)&buf[8], v86);
  unsigned int v55 = *(const void **)(a1 + 128);
  *(void *)(a1 + 128) = v54;
  if (v55)
  {
    CFRelease(v55);
    unint64_t v54 = *(void **)(a1 + 128);
  }
  objc_msgSend((id)objc_msgSend(v54, "layer"), "setName:", @"SwipeTransitionContainer");
  id v56 = objc_alloc(MEMORY[0x1E4F42FF0]);
  v57 = objc_msgSend(v56, "initWithFrame:", *(double *)buf, *(double *)&buf[8], v86);
  int v58 = *(const void **)(a1 + 112);
  *(void *)(a1 + 112) = v57;
  if (v58)
  {
    CFRelease(v58);
    v57 = *(void **)(a1 + 112);
  }
  objc_msgSend((id)objc_msgSend(v57, "layer"), "setName:", @"LiveSwipeViewClipping");
  [*(id *)(a1 + 112) setClipsToBounds:1];
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "superview"), "insertSubview:belowSubview:", *(void *)(a1 + 128), *(void *)(a1 + 104));
  [*(id *)(a1 + 128) addSubview:*(void *)(a1 + 112)];
  [*(id *)(a1 + 112) addSubview:*(void *)(a1 + 104)];
  id v59 = objc_alloc_init(MEMORY[0x1E4F42FF8]);
  [v59 setView:*(void *)(a1 + 112)];
  id v60 = objc_alloc(MEMORY[0x1E4F43260]);
  if (a3) {
    uint64_t v61 = 1;
  }
  else {
    uint64_t v61 = 2;
  }
  int v62 = (const void *)[v60 initWithCurrentOperation:v61];
  id v63 = objc_alloc_init(MEMORY[0x1E4F43390]);
  uint64_t v64 = *(const void **)(a1 + 144);
  *(void *)(a1 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v63;
  if (v64)
  {
    CFRelease(v64);
    id v63 = *(id *)(a1 + 144);
  }
  [v63 _setFromViewController:v59];
  [*(id *)(a1 + 144) _setToViewController:v31];
  [*(id *)(a1 + 144) _setContainerView:*(void *)(a1 + 128)];
  objc_msgSend(*(id *)(a1 + 144), "_setFromStartFrame:", *(double *)buf, *(double *)&buf[8], v86);
  objc_msgSend(*(id *)(a1 + 144), "_setToEndFrame:", *(double *)buf, *(double *)&buf[8], v86);
  long long v65 = (double *)MEMORY[0x1E4F1DB28];
  objc_msgSend(*(id *)(a1 + 144), "_setToStartFrame:", *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
  objc_msgSend(*(id *)(a1 + 144), "_setFromEndFrame:", *v65, v65[1], v65[2], v65[3]);
  [*(id *)(a1 + 144) _setAnimator:v62];
  [*(id *)(a1 + 144) _setInteractor:a2];
  [*(id *)(a1 + 144) _setTransitionIsInFlight:1];
  *(unsigned char *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 163) = 0;
  long long v66 = *(void **)(a1 + 144);
  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 3321888768;
  v80[2] = ___ZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionE_block_invoke;
  v80[3] = &__block_descriptor_48_e8_40c107_ZTSN3WTF6RefPtrIN6WebKit22WebBackForwardListItemENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEE_e53_v32__0B8d12B20___UIViewControllerTransitionContext_24l;
  v80[4] = a1;
  CFRetain(*(CFTypeRef *)(v16 + 8));
  uint64_t v81 = v16;
  [v66 _setInteractiveUpdateHandler:v80];
  uint64_t v67 = *(void *)(*(void *)(*(void *)(a1 + 16) + 32) + 760);
  uint64_t v68 = *(void *)(a1 + 96);
  unsigned int v69 = *(void **)(a1 + 144);
  v78[0] = MEMORY[0x1E4F143A8];
  v78[1] = 3321888768;
  v78[2] = ___ZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionE_block_invoke_176;
  v78[3] = &__block_descriptor_56_e8_32c124_ZTSKZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionEE3__0_e47_v20__0___UIViewControllerTransitionContext_8B16l;
  CFRetain(*(CFTypeRef *)(v16 + 8));
  v78[4] = v67;
  v78[5] = v68;
  CFRetain(*(CFTypeRef *)(v16 + 8));
  uint64_t v79 = v16;
  [v69 _setCompletionHandler:v78];
  CFRelease(*(CFTypeRef *)(v16 + 8));
  [a2 setAnimationController:v62];
  [a2 startInteractiveTransition:*(void *)(a1 + 144)];
  uint64_t v70 = v79;
  uint64_t v79 = 0;
  if (v70) {
    CFRelease(*(CFTypeRef *)(v70 + 8));
  }
  uint64_t v71 = v81;
  uint64_t v81 = 0;
  if (v71) {
    CFRelease(*(CFTypeRef *)(v71 + 8));
  }
  if (v62) {
    CFRelease(v62);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v36) {
    CFRelease(v36);
  }
  uint64_t v11 = v77;
  if (v31) {
    CFRelease(v31);
  }
  CFRelease(*(CFTypeRef *)(v16 + 8));
  if ((v76 & 1) == 0) {
LABEL_76:
  }
    CFRelease(*(CFTypeRef *)(v11 + 8));
}

void sub_198D951AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  CFRelease(*(CFTypeRef *)(v28 + 8));
  if ((a12 & 1) == 0) {
    CFRelease(*(CFTypeRef *)(a13 + 8));
  }
  _Unwind_Resume(a1);
}

void ___ZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionE_block_invoke(uint64_t a1, int a2, int a3)
{
  if (a2) {
    WebKit::ViewGestureController::willEndSwipeGesture(*(WebKit::ViewGestureController **)(a1 + 32), *(const Color ***)(a1 + 40), a3 ^ 1);
  }
}

void WebKit::ViewGestureController::willEndSwipeGesture(WebKit::ViewGestureController *this, const Color **a2, int a3)
{
  char v3 = a3;
  *((unsigned char *)this + 160) = 1;
  WebKit::WebPageProxy::navigationGestureWillEnd(*((WebKit::WebPageProxy **)this + 10), a3 ^ 1u, (WebKit::WebBackForwardListItem *)a2);
  if ((v3 & 1) == 0)
  {
    *((void *)this + 19) = 0;
    uint64_t v6 = a2[42];
    if (v6) {
      *((void *)this + 19) = (unint64_t)(float)((float)v6[3].m_colorAndFlags * 0.5);
    }
    *((unsigned char *)this + 162) = 0;
    WebKit::WebPageProxy::goToBackForwardItem(*((void *)this + 10), (uint64_t)a2, 3u, &v17);
    uint64_t v8 = *((void *)this + 11);
    *((void *)this + 11) = v17;
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
    uint64_t v9 = *(void *)(*((void *)this + 10) + 664);
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10 || !*(void *)(v10 + 8) || !*(unsigned char *)(v9 + 48)) {
      goto LABEL_15;
    }
    unint64_t v11 = *(void *)(v9 + 40);
    if (v11 >= *(unsigned int *)(v9 + 36))
    {
      __break(0xC471u);
      return;
    }
    uint64_t v12 = *(WebKit::WebBackForwardListItem **)(*(void *)(v9 + 24) + 8 * v11);
    if (v12 && WebKit::WebBackForwardListItem::itemIsClone(v12, (const WebKit::WebBackForwardListItem *)a2, v7))
    {
      WebKit::ViewGestureController::removeSwipeSnapshot(this);
    }
    else
    {
LABEL_15:
      uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v13 = &unk_1EE9D4030;
      v13[1] = this;
      uint64_t v17 = (uint64_t)v13;
      WebKit::ViewGestureController::SnapshotRemovalTracker::start((uint64_t)this + 168, 62, &v17);
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      uint64_t v14 = a2[42];
      if (v14)
      {
        WebCore::Color::Color((WebCore::Color *)&v17, v14 + 5);
        WebCore::Color::operator=();
        if ((v17 & 0x8000000000000) != 0)
        {
          uint64_t v16 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, v15);
          }
        }
        WebKit::WebPageProxy::didChangeBackgroundColor(*((WebKit::WebPageProxy **)this + 2));
      }
    }
  }
}

void sub_198D95620(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    unint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c107_ZTSN3WTF6RefPtrIN6WebKit22WebBackForwardListItemENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEE(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3) {
    __n128 result = CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  v2[5] = v3;
  return result;
}

void __destroy_helper_block_e8_40c107_ZTSN3WTF6RefPtrIN6WebKit22WebBackForwardListItemENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEE(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void ___ZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionE_block_invoke_176(uint64_t *a1, void *a2, int a3)
{
  uint64_t v6 = (WebKit::ViewGestureController *)WebKit::ViewGestureController::controllerForGesture(a1[4], a1[5]);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (const Color **)a1[6];
  if (!*((unsigned char *)v6 + 160)) {
    WebKit::ViewGestureController::willEndSwipeGesture(v6, v8, a3 ^ 1);
  }
  *((unsigned char *)v7 + 163) = 1;
  [a2 _setTransitionIsInFlight:0];
  [a2 _setInteractor:0];
  [a2 _setAnimator:0];
  objc_msgSend((id)objc_msgSend(*((id *)v7 + 16), "superview"), "insertSubview:aboveSubview:", *((void *)v7 + 15), *((void *)v7 + 16));
  objc_msgSend((id)objc_msgSend(*((id *)v7 + 16), "superview"), "insertSubview:aboveSubview:", *((void *)v7 + 13), *((void *)v7 + 16));
  [*((id *)v7 + 14) removeFromSuperview];
  uint64_t v9 = (const void *)*((void *)v7 + 14);
  *((void *)v7 + 1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v9) {
    CFRelease(v9);
  }
  [*((id *)v7 + 16) removeFromSuperview];
  uint64_t v10 = (const void *)*((void *)v7 + 16);
  *((void *)v7 + 16) = 0;
  if (v10) {
    CFRelease(v10);
  }
  unint64_t v11 = (CFTypeRef *)*((void *)v7 + 10);
  if (a3)
  {
    WebKit::WebPageProxy::navigationGestureDidEnd(*((WebKit::WebPageProxy **)v7 + 10), 1, (WebKit::WebBackForwardListItem *)v8);
    uint64_t v12 = (void *)*((void *)v7 + 2);
    if (*((void **)v7 + 10) != v12)
    {
      WebKit::WebPageProxy::navigationGestureDidEnd(*((WebKit::WebPageProxy **)v7 + 2));
      uint64_t v12 = (void *)*((void *)v7 + 2);
    }
    uint64_t v13 = v12[149];
    if ((!v13 || !*(void *)(v13 + 64)) && !v12[29] || *((unsigned char *)v7 + 164)) {
      goto LABEL_15;
    }
    uint64_t v16 = *(void *)(v12[4] + 760);
    uint64_t v17 = *((void *)v7 + 12);
    if (*((unsigned char *)v7 + 162))
    {
      if (!v13 || (uint64_t v18 = *(void *)(v13 + 64)) == 0)
      {
        uint64_t v18 = v12[29];
        if (!v18)
        {
LABEL_15:
          WebKit::ViewGestureController::removeSwipeSnapshot(v7);
          return;
        }
      }
      uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v19 = &unk_1EE9D4008;
      v19[1] = v16;
      v19[2] = v17;
      unint64_t v24 = v19;
      WebKit::WebPageProxy::callAfterNextPresentationUpdate((uint64_t)v12, (uint64_t *)&v24);
      if (v24) {
        (*(void (**)(void *))(*v24 + 8))(v24);
      }
      uint64_t v20 = *(void (**)(uint64_t))(*(void *)v18 + 168);
      v20(v18);
    }
    else
    {
      unint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v21 = &unk_1EE9D4058;
      v21[1] = v7;
      v21[2] = v16;
      v21[3] = v17;
      uint64_t v22 = *((void *)v7 + 30);
      *((void *)v7 + 30) = v21;
      if (v22)
      {
        uint64_t v23 = *(void (**)(void))(*(void *)v22 + 8);
        v23();
      }
    }
  }
  else
  {
    if (v11) {
      CFRetain(v11[1]);
    }
    WebKit::ViewGestureController::removeSwipeSnapshot(v7);
    WebKit::WebPageProxy::navigationGestureDidEnd((WebKit::WebPageProxy *)v11, 0, (WebKit::WebBackForwardListItem *)v8);
    uint64_t v14 = (WebKit::WebPageProxy *)*((void *)v7 + 2);
    if (v11 != (CFTypeRef *)v14) {
      WebKit::WebPageProxy::navigationGestureDidEnd(v14);
    }
    if (v11)
    {
      CFTypeRef v15 = v11[1];
      CFRelease(v15);
    }
  }
}

void sub_198D959D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

_OWORD *__copy_helper_block_e8_32c124_ZTSKZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionEE3__0(_OWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  result[2] = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3) {
    __n128 result = CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  *((void *)v2 + 6) = v3;
  return result;
}

void __destroy_helper_block_e8_32c124_ZTSKZN6WebKit21ViewGestureController17beginSwipeGestureEP38_UINavigationInteractiveTransitionBaseNS0_14SwipeDirectionEE3__0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

uint64_t WebKit::ViewGestureController::removeSwipeSnapshot(WebKit::ViewGestureController *this)
{
  uint64_t result = WebKit::ViewGestureController::SnapshotRemovalTracker::reset((WebKit::ViewGestureController *)((char *)this + 168));
  if (*((_DWORD *)this + 6) == 1)
  {
    if (*((unsigned char *)this + 163))
    {
      return WebKit::ViewGestureController::resetState(this);
    }
    else
    {
      *((unsigned char *)this + 16WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
    }
  }
  return result;
}

uint64_t WebKit::ViewGestureController::resetState(WebKit::ViewGestureController *this)
{
  [*((id *)this + 15) removeFromSuperview];
  uint64_t v2 = (const void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 19) = 0;
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    WebKit::WebPageProxy::navigationGestureSnapshotWasRemoved(v3);
    uint64_t v4 = *((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v4) {
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
  uint64_t v5 = (const void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::Color::operator=();
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 12) = 0;
  return WebKit::WebPageProxy::didEndViewGesture(*((WebKit::WebPageProxy **)this + 2));
}

void sub_198D95B70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    unint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::ViewGestureController::beginSimulatedSwipeInDirectionForTesting(uint64_t a1, uint64_t a2)
{
  BOOL canSwipeInDirection = WebKit::ViewGestureController::canSwipeInDirection(a1, a2);
  if (canSwipeInDirection)
  {
    uint64_t v5 = (void *)[*(id *)(a1 + 136) transitionForDirection:a2];
    WebKit::ViewGestureController::beginSwipeGesture(a1, v5, a2);
    [v5 _stopInteractiveTransition];
  }
  return canSwipeInDirection;
}

void sub_198D96630(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x280])) {
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&a9, a2);
  }
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void sub_198D96A94(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,_DWORD *a28,_DWORD *a29,_DWORD *a30,uint64_t a31)
{
  if ((a31 & 0x8000000000000) != 0)
  {
    uint64_t v33 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, a2);
    }
  }
  if (a30)
  {
    if (a30[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a30 + 8))(a30);
    }
    else {
      --a30[2];
    }
  }
  if (a29)
  {
    if (a29[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a29 + 8))(a29);
    }
    else {
      --a29[2];
    }
  }
  if (a28)
  {
    if (a28[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a28 + 8))(a28);
    }
    else {
      --a28[2];
    }
  }
  if (a25) {
    WTF::fastFree(a25, a2);
  }
  CFRelease(v31);
  _Unwind_Resume(a1);
}

void sub_198D96D08(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198D96DF4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198D96F6C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198D96FF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D971CC(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 640)) {
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D975AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36)
{
  if (a36)
  {
    if (*(_DWORD *)a36 == 2) {
      WTF::StringImpl::destroy(a36, a2);
    }
    else {
      *(_DWORD *)a36 -= 2;
    }
  }
  CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_198D978A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef a22)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v23);
  if (v24) {
    CFRelease(v24);
  }
  if (a22) {
    CFRelease(a22);
  }
  CFRelease(v22);
  _Unwind_Resume(a1);
}

void sub_198D97B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, CFTypeRef a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12) {
    CFRelease(a12);
  }
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c79_ZTSN3WTF9RetainPtrIU41objcproto30WKActionSheetAssistantDelegate11objc_objectEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c79_ZTSN3WTF9RetainPtrIU41objcproto30WKActionSheetAssistantDelegate11objc_objectEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

CFTypeRef __copy_helper_block_e8_40c46_ZTSN3WTF9RetainPtrI22WKActionSheetAssistantEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSN3WTF9RetainPtrI22WKActionSheetAssistantEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198D97EBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D9816C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 - 72);
  *(void *)(v1 - 72) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D98658(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D988C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D98AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, CFTypeRef cf)
{
  if (a10) {
    CFRelease(a10);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D98BC0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(a1);
}

void sub_198D98CD4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(a1);
}

void sub_198D98DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D98F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D9950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location)
{
  objc_destroyWeak(v12);
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(a1);
}

void sub_198D99738(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v11);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198D99968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D99CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c93_ZTSKZ80__WKActionSheetAssistant_contextMenuInteraction_configurationForMenuAtLocation__E3__7(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c93_ZTSKZ80__WKActionSheetAssistant_contextMenuInteraction_configurationForMenuAtLocation__E3__7(uint64_t a1)
{
}

void sub_198D99F3C(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void sub_198D9A054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198D9A0F0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c103_ZTSKZ90__WKActionSheetAssistant_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c103_ZTSKZ90__WKActionSheetAssistant_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__8(uint64_t a1)
{
}

void sub_198D9A210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198D9A2AC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c95_ZTSKZ82__WKActionSheetAssistant_contextMenuInteraction_willEndForConfiguration_animator__E3__9(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c95_ZTSKZ82__WKActionSheetAssistant_contextMenuInteraction_willEndForConfiguration_animator__E3__9(uint64_t a1)
{
}

void sub_198D9A784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, int a11)
{
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D9A904(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D9B224(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198D9B3D0(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::mutableState(void)::$_0 &&>>()
{
  WebKit::mutableState(void)::state |= 1u;
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t result = [MEMORY[0x1E4F42EE8] grammarCheckingEnabled];
    if (result) {
      WebKit::mutableState(void)::state |= 2u;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<long long,WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<long long,WTF::RetainPtr<UITextChecker>>>,WTF::DefaultHash<long long>,WTF::HashMap<long long,WTF::RetainPtr<UITextChecker>,WTF::DefaultHash<long long>,WTF::HashTraits<long long>,WTF::HashTraits<WTF::RetainPtr<UITextChecker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<long long>>::expand(uint64_t *a1)
{
  if (WebKit::spellDocumentTagMap(void)::tagMap
    && (int v1 = *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 4)) != 0)
  {
    unsigned int v2 = v1 << (6 * *(_DWORD *)(WebKit::spellDocumentTagMap(void)::tagMap - 12) >= (2 * v1));
  }
  else
  {
    unsigned int v2 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(&WebKit::spellDocumentTagMap(void)::tagMap, v2, a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ViewGestureController::endSwipeGesture(WebKit::WebBackForwardListItem *,_UIViewControllerTransitionContext *,BOOL)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result = WebKit::ViewGestureController::controllerForGesture(*(void *)(a1 + 8), *(void *)(a1 + 16));
  if (result && *(_DWORD *)(result + 24) == 1)
  {
    unsigned int v2 = (WebKit::ViewGestureController::SnapshotRemovalTracker *)(result + 168);
    return WebKit::ViewGestureController::SnapshotRemovalTracker::stopWaitingForEvent(v2, (WebKit::ViewGestureController::SnapshotRemovalTracker *)4, "outstanding event occurred: ", 29, 1);
  }
  return result;
}

uint64_t WebKit::InteractionInformationAtPosition::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  WTF::URL::operator=(a1 + 72, a2 + 72);
  WTF::URL::operator=(a1 + 112, a2 + 112);
  WTF::String::operator=((uint64_t *)(a1 + 152), (uint64_t *)(a2 + 152));
  WTF::String::operator=((uint64_t *)(a1 + 160), (uint64_t *)(a2 + 160));
  WTF::String::operator=((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v9 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = v8;
  if (v9) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v9, v7);
  }
  WTF::String::operator=((uint64_t *)(a1 + 200), (uint64_t *)(a2 + 200));
  WTF::String::operator=((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  int v10 = *(_DWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = v10;
  std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Cursor,false>>((__n128 *)(a1 + 240), (__n128 *)(a2 + 240));
  WebCore::TextIndicatorData::operator=(a1 + 280, (long long *)(a2 + 280));
  WTF::String::operator=((uint64_t *)(a1 + 392), (uint64_t *)(a2 + 392));
  uint64_t v11 = *(void *)(a2 + 400);
  *(void *)(a2 + 400) = 0;
  uint64_t v12 = *(const void **)(a1 + 400);
  *(void *)(a1 + 400) = v11;
  if (v12) {
    CFRelease(v12);
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  long long v13 = *(_OWORD *)(a2 + 424);
  long long v14 = *(_OWORD *)(a2 + 440);
  long long v15 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v15;
  *(_OWORD *)(a1 + 42WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v13;
  *(_OWORD *)(a1 + 440) = v14;
  long long v16 = *(_OWORD *)(a2 + 488);
  long long v17 = *(_OWORD *)(a2 + 504);
  long long v18 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v18;
  *(_OWORD *)(a1 + 488) = v16;
  *(_OWORD *)(a1 + 50WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v17;
  long long v19 = *(_OWORD *)(a2 + 552);
  long long v20 = *(_OWORD *)(a2 + 568);
  long long v21 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 593) = *(_OWORD *)(a2 + 593);
  *(_OWORD *)(a1 + 568) = v20;
  *(_OWORD *)(a1 + 58WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v21;
  *(_OWORD *)(a1 + 552) = v19;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 624, (_DWORD *)(a2 + 624));
  return a1;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  void *v9;
  atomic_uint *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const void *v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  WTF::String::operator=((uint64_t *)(a1 + 72), (WTF::StringImpl **)(a2 + 72));
  uint64_t v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  WTF::String::operator=((uint64_t *)(a1 + 112), (WTF::StringImpl **)(a2 + 112));
  uint64_t v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v8;
  WTF::String::operator=((uint64_t *)(a1 + 152), (WTF::StringImpl **)(a2 + 152));
  WTF::String::operator=((uint64_t *)(a1 + 160), (WTF::StringImpl **)(a2 + 160));
  WTF::String::operator=((uint64_t *)(a1 + 168), (WTF::StringImpl **)(a2 + 168));
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  int v10 = *(atomic_uint **)(a2 + 192);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = v10;
  if (v11) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v11, v9);
  }
  WTF::String::operator=((uint64_t *)(a1 + 200), (WTF::StringImpl **)(a2 + 200));
  WTF::String::operator=((uint64_t *)(a1 + 208), (WTF::StringImpl **)(a2 + 208));
  uint64_t v12 = *(_DWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 232) = v12;
  std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Cursor,false> const&>((__n128 *)(a1 + 240), (__n128 *)(a2 + 240));
  WebCore::TextIndicatorData::operator=(a1 + 280, (long long *)(a2 + 280));
  WTF::String::operator=((uint64_t *)(a1 + 392), (WTF::StringImpl **)(a2 + 392));
  long long v13 = *(void *)(a2 + 400);
  if (v13) {
    CFRetain(*(CFTypeRef *)(a2 + 400));
  }
  long long v14 = *(const void **)(a1 + 400);
  *(void *)(a1 + 400) = v13;
  if (v14) {
    CFRelease(v14);
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  long long v15 = *(_OWORD *)(a2 + 424);
  long long v16 = *(_OWORD *)(a2 + 440);
  long long v17 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v17;
  *(_OWORD *)(a1 + 42WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v15;
  *(_OWORD *)(a1 + 440) = v16;
  long long v18 = *(_OWORD *)(a2 + 488);
  long long v19 = *(_OWORD *)(a2 + 504);
  long long v20 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v20;
  *(_OWORD *)(a1 + 488) = v18;
  *(_OWORD *)(a1 + 50WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v19;
  long long v21 = *(_OWORD *)(a2 + 552);
  uint64_t v22 = *(_OWORD *)(a2 + 568);
  uint64_t v23 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 593) = *(_OWORD *)(a2 + 593);
  *(_OWORD *)(a1 + 568) = v22;
  *(_OWORD *)(a1 + 58WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v23;
  *(_OWORD *)(a1 + 552) = v21;
  WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 624, a2 + 624);
  return a1;
}

__n128 std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Cursor,false>>(__n128 *a1, __n128 *a2)
{
  if (a1[2].n128_u8[0] == a2[2].n128_u8[0])
  {
    if (a1[2].n128_u8[0])
    {
      a1->n128_u8[0] = a2->n128_u8[0];
      unint64_t v4 = a2->n128_u64[1];
      a2->n128_u64[1] = 0;
      long long v5 = (_DWORD *)a1->n128_u64[1];
      a1->n128_u64[1] = v4;
      if (v5)
      {
        if (v5[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
        }
        else {
          --v5[2];
        }
      }
      __n128 result = a2[1];
      a1[1] = result;
    }
  }
  else if (a1[2].n128_u8[0])
  {
    std::__optional_destruct_base<WebCore::Cursor,false>::reset[abi:sn180100]((uint64_t)a1);
  }
  else
  {
    a1->n128_u8[0] = a2->n128_u8[0];
    unint64_t v7 = a2->n128_u64[1];
    a2->n128_u64[1] = 0;
    a1->n128_u64[1] = v7;
    __n128 result = a2[1];
    a1[1] = result;
    a1[2].n128_u8[0] = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::Cursor,false>::reset[abi:sn180100](uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    uint64_t v1 = result;
    __n128 result = *(void *)(result + 8);
    *(void *)(v1 + 8) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1) {
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      else {
        --*(_DWORD *)(result + 8);
      }
    }
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

WebKit::InteractionInformationAtPosition *WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition(WebKit::InteractionInformationAtPosition *this, const WebKit::InteractionInformationAtPosition *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  long long v4 = *((_OWORD *)a2 + 1);
  long long v5 = *((_OWORD *)a2 + 2);
  long long v6 = *((_OWORD *)a2 + 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  unint64_t v7 = (_DWORD *)*((void *)a2 + 9);
  if (v7) {
    *v7 += 2;
  }
  *((void *)this + 9) = v7;
  long long v8 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = v8;
  uint64_t v9 = (_DWORD *)*((void *)a2 + 14);
  if (v9) {
    *v9 += 2;
  }
  *((void *)this + 1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v9;
  long long v10 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v10;
  uint64_t v11 = (_DWORD *)*((void *)a2 + 19);
  if (v11) {
    *v11 += 2;
  }
  *((void *)this + 19) = v11;
  uint64_t v12 = (_DWORD *)*((void *)a2 + 20);
  if (v12) {
    *v12 += 2;
  }
  *((void *)this + 20) = v12;
  long long v13 = (_DWORD *)*((void *)a2 + 21);
  if (v13) {
    *v13 += 2;
  }
  *((void *)this + 21) = v13;
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  long long v14 = (atomic_uint *)*((void *)a2 + 24);
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
  *((void *)this + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v14;
  long long v15 = (_DWORD *)*((void *)a2 + 25);
  if (v15) {
    *v15 += 2;
  }
  *((void *)this + 25) = v15;
  long long v16 = (_DWORD *)*((void *)a2 + 26);
  if (v16) {
    *v16 += 2;
  }
  *((void *)this + 26) = v16;
  long long v17 = *(_OWORD *)((char *)a2 + 216);
  int v18 = *((_DWORD *)a2 + 58);
  *((unsigned char *)this + 240) = 0;
  *((_DWORD *)this + 58) = v18;
  *(_OWORD *)((char *)this + 216) = v17;
  *((unsigned char *)this + 272) = 0;
  if (*((unsigned char *)a2 + 272))
  {
    *((unsigned char *)this + 240) = *((unsigned char *)a2 + 240);
    uint64_t v19 = *((void *)a2 + 31);
    if (v19) {
      ++*(_DWORD *)(v19 + 8);
    }
    *((void *)this + 31) = v19;
    *((_OWORD *)this + 16) = *((_OWORD *)a2 + 16);
    *((unsigned char *)this + 272) = 1;
  }
  WebCore::TextIndicatorData::TextIndicatorData((WebKit::InteractionInformationAtPosition *)((char *)this + 280), (const WebKit::InteractionInformationAtPosition *)((char *)a2 + 280));
  long long v20 = (_DWORD *)*((void *)a2 + 49);
  if (v20) {
    *v20 += 2;
  }
  long long v21 = (const void *)*((void *)a2 + 50);
  *((void *)this + 49) = v20;
  *((void *)this + 50) = v21;
  if (v21) {
    CFRetain(v21);
  }
  *(_OWORD *)((char *)this + 408) = *(_OWORD *)((char *)a2 + 408);
  long long v22 = *(_OWORD *)((char *)a2 + 424);
  long long v23 = *(_OWORD *)((char *)a2 + 440);
  long long v24 = *(_OWORD *)((char *)a2 + 472);
  *(_OWORD *)((char *)this + 456) = *(_OWORD *)((char *)a2 + 456);
  *(_OWORD *)((char *)this + 472) = v24;
  *(_OWORD *)((char *)this + 42WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v22;
  *(_OWORD *)((char *)this + 440) = v23;
  long long v25 = *(_OWORD *)((char *)a2 + 488);
  long long v26 = *(_OWORD *)((char *)a2 + 504);
  long long v27 = *(_OWORD *)((char *)a2 + 536);
  *(_OWORD *)((char *)this + 520) = *(_OWORD *)((char *)a2 + 520);
  *(_OWORD *)((char *)this + 536) = v27;
  *(_OWORD *)((char *)this + 488) = v25;
  *(_OWORD *)((char *)this + 50WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v26;
  long long v28 = *(_OWORD *)((char *)a2 + 552);
  long long v29 = *(_OWORD *)((char *)a2 + 568);
  long long v30 = *(_OWORD *)((char *)a2 + 584);
  *(_OWORD *)((char *)this + 593) = *(_OWORD *)((char *)a2 + 593);
  *(_OWORD *)((char *)this + 568) = v29;
  *(_OWORD *)((char *)this + 58WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v30;
  *(_OWORD *)((char *)this + 552) = v28;
  WTF::Vector<WebCore::ElementAnimationContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 624, (uint64_t)a2 + 624);
  return this;
}

void sub_198D9BE58(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  long long v6 = (WTF::StringImpl *)v2[49];
  v2[49] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  WebCore::TextIndicatorData::~TextIndicatorData(v4, a2);
  std::__optional_destruct_base<WebCore::Cursor,false>::~__optional_destruct_base[abi:sn180100](v3);
  long long v8 = (WTF::StringImpl *)v2[26];
  v2[26] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = (WTF::StringImpl *)v2[25];
  v2[25] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v2[24];
  v2[24] = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v10, v7);
  }
  uint64_t v11 = (WTF::StringImpl *)v2[21];
  v2[21] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)v2[20];
  v2[20] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v7);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  long long v13 = (WTF::StringImpl *)v2[19];
  v2[19] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v7);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  long long v14 = (WTF::StringImpl *)v2[14];
  v2[14] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v7);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  long long v15 = (WTF::StringImpl *)v2[9];
  v2[9] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v7);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

id *std::unique_ptr<WebKit::CompactContextMenuPresenter>::reset[abi:sn180100](id **a1, id *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CompactContextMenuPresenter::~CompactContextMenuPresenter(result);
    return (id *)WTF::fastFree(v4, v5);
  }
  return result;
}

__n128 std::__optional_storage_base<WebCore::Cursor,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Cursor,false> const&>(__n128 *a1, __n128 *a2)
{
  if (a1[2].n128_u8[0] == a2[2].n128_u8[0])
  {
    if (a1[2].n128_u8[0])
    {
      a1->n128_u8[0] = a2->n128_u8[0];
      unint64_t v4 = a2->n128_u64[1];
      if (v4) {
        ++*(_DWORD *)(v4 + 8);
      }
      long long v5 = (_DWORD *)a1->n128_u64[1];
      a1->n128_u64[1] = v4;
      if (v5)
      {
        if (v5[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
        }
        else {
          --v5[2];
        }
      }
      __n128 result = a2[1];
      a1[1] = result;
    }
  }
  else if (a1[2].n128_u8[0])
  {
    std::__optional_destruct_base<WebCore::Cursor,false>::reset[abi:sn180100]((uint64_t)a1);
  }
  else
  {
    a1->n128_u8[0] = a2->n128_u8[0];
    unint64_t v7 = a2->n128_u64[1];
    if (v7) {
      ++*(_DWORD *)(v7 + 8);
    }
    a1->n128_u64[1] = v7;
    __n128 result = a2[1];
    a1[1] = result;
    a1[2].n128_u8[0] = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::TextCheckingResult>::destruct(*(void *)a1, (WTF::StringImpl *)(*(void *)a1 + 48 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::TextCheckingResult>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  if ((WTF::StringImpl *)result != a2)
  {
    uint64_t v3 = result + 24;
    do
    {
      unint64_t v4 = *(WTF::StringImpl **)(v3 + 16);
      *(void *)(v3 + 16) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      __n128 result = WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      long long v5 = (WTF::StringImpl *)(v3 + 24);
      v3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)(v3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
  *(void *)(v4 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(v3 + 24);
  *(void *)(v3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(v4 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v4 + 32) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 36);
  *(_DWORD *)(v3 + 36) = 0;
  *(_DWORD *)(v4 + 36) = v6;
  uint64_t v7 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = 0;
  *(void *)(v4 + 40) = v7;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x198D9C5FCLL);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)a1 + 48 * *(unsigned int *)(a1 + 12));
    int v5 = 48 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::TextCheckingResult>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::TextCheckingResult>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  if ((WTF::StringImpl *)result != a2)
  {
    uint64_t v5 = result + 24;
    do
    {
      uint64_t v6 = *(void *)(v5 - 8);
      *(_OWORD *)a3 = *(_OWORD *)(v5 - 24);
      *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 16) = v6;
      uint64_t v7 = *(void *)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 32) = v7;
      LODWORD(v7) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 36) = v7;
      uint64_t v8 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(a3 + 40) = v8;
      unint64_t v9 = *(WTF::StringImpl **)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v10 = v5 - 24;
      __n128 result = WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v5 += 48;
      a3 += 48;
    }
    while ((WTF::StringImpl *)(v10 + 48) != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ViewGestureController::willEndSwipeGesture(WebKit::WebBackForwardListItem &,BOOL)::$_0,void>::call(uint64_t a1)
{
  return WebKit::ViewGestureController::removeSwipeSnapshot(*(WebKit::ViewGestureController **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ViewGestureController::endSwipeGesture(WebKit::WebBackForwardListItem *,_UIViewControllerTransitionContext *,BOOL)::$_0,void>::call(void *a1)
{
  uint64_t v1 = *(void *)(a1[1] + 16);
  uint64_t v2 = *(void *)(v1 + 1192);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 64)) != 0 || (uint64_t v3 = *(void *)(v1 + 232)) != 0)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = a1[3];
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v6 = &unk_1EE9D4008;
    v6[1] = v4;
    uint64_t v6[2] = v5;
    uint64_t v10 = v6;
    WebKit::WebPageProxy::callAfterNextPresentationUpdate(v1, (uint64_t *)&v10);
    if (v10) {
      (*(void (**)(void *))(*v10 + 8))(v10);
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 168);
    return v7(v3);
  }
  else
  {
    unint64_t v9 = (WebKit::ViewGestureController *)a1[1];
    return WebKit::ViewGestureController::removeSwipeSnapshot(v9);
  }
}

uint64_t WTF::Vector<WebCore::Path,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 72 * v3;
    uint64_t v6 = (_DWORD *)((char *)v4 + 64);
    do
    {
      uint64_t v7 = *v6;
      if (v7 != -1) {
        ((void (*)(char *, _DWORD *))off_1EE9D4070[v7])(&v9, v6 - 14);
      }
      *uint64_t v6 = -1;
      v6 += 18;
      v5 -= 72;
    }
    while (v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void ___ZZ73__WKActionSheetAssistant__uiMenuElementsForMediaControlContextMenuItems__ENK3__6clERN7WebCore28MediaControlsContextMenuItemE_block_invoke(uint64_t a1)
{
  id WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained;
    WTF::CompletionHandler<void ()(unsigned long long)>::operator()(WeakRetained + 91);
    CFRelease(v2);
  }
}

void sub_198D9C8E8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c148_ZTSKZZ73__WKActionSheetAssistant__uiMenuElementsForMediaControlContextMenuItems__ENK3__6clERN7WebCore28MediaControlsContextMenuItemEEUlP8UIActionE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  *(void *)(v3 + 8) = *(void *)(a2 + 40);
}

void __destroy_helper_block_e8_32c148_ZTSKZZ73__WKActionSheetAssistant__uiMenuElementsForMediaControlContextMenuItems__ENK3__6clERN7WebCore28MediaControlsContextMenuItemEEUlP8UIActionE_(uint64_t a1)
{
}

void *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 96))(a1, *(void *)(*(void *)a2 + 8));
  if (result)
  {
    uint64_t v6 = result;
    char v7 = *(unsigned char *)(a2 + 8);
    char v8 = *(unsigned char *)(a2 + 9);
    int v9 = *(_DWORD *)(a2 + 28);
    if (v9)
    {
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 28));
      __n128 result = memcpy(v10, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
    }
    else
    {
      uint64_t v10 = 0;
    }
    __int16 v12 = *(_WORD *)(a2 + 32);
    char v13 = *(unsigned char *)(a2 + 34);
    *(void *)a3 = v6;
    *(unsigned char *)(a3 + 8) = v7;
    *(unsigned char *)(a3 + 9) = v8;
    *(void *)(a3 + 16) = v10;
    *(_DWORD *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v9;
    *(_DWORD *)(a3 + 28) = v9;
    *(_WORD *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 3WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v13;
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 40) = v11;
  return result;
}

unint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 == 1)
  {
    long long v5 = *(_OWORD *)(a1 + 16);
    v8[0] = *(_OWORD *)a1;
    v8[1] = v5;
    int v9 = 1;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 32) = -1;
    unint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v8);
    *(unsigned char *)(a2 + 40) = 1;
  }
  else
  {
    if (v3)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v6, v7);
    }
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v8, a1);
    int v9 = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 32) = -1;
    unint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v8);
    *(unsigned char *)(a2 + 40) = 1;
  }
  if (v9 != -1) {
    return ((uint64_t (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v9])(&v10, v8);
  }
  return result;
}

unint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 == 1)
  {
    long long v5 = *(_OWORD *)(a1 + 16);
    v8[0] = *(_OWORD *)a1;
    v8[1] = v5;
    int v9 = 1;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 32) = -1;
    unint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v8);
    *(unsigned char *)(a2 + 40) = 1;
  }
  else
  {
    if (v3)
    {
      uint64_t v6 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v6, v7);
    }
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v8, a1);
    int v9 = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 32) = -1;
    unint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v8);
    *(unsigned char *)(a2 + 40) = 1;
  }
  if (v9 != -1) {
    return ((uint64_t (*)(char *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v9])(&v10, v8);
  }
  return result;
}

unint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking(uint64_t a1, unsigned __int8 *a2)
{
  if (a2[7])
  {
    unint64_t v2 = ((unint64_t)a2[2] << 16) | ((unint64_t)a2[3] << 24) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48);
    unint64_t v3 = (unint64_t)a2[1] << 8;
    uint64_t v4 = 0x100000000000000;
  }
  else
  {
    unint64_t v2 = 0;
    uint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  return v4 | v2 | v3 | *a2;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 32) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void sub_198D9D358(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t startUpdatingCallback(uint64_t a1, void *a2)
{
  return [a2 _startUpdating];
}

uint64_t stopUpdatingCallback(uint64_t a1, void *a2)
{
  return [a2 _stopUpdating];
}

uint64_t setEnableHighAccuracy(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 _setEnableHighAccuracy:a2];
}

void sub_198D9D6C4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CFTypeRef cf,uint64_t a43,uint64_t a44,uint64_t a45,int a46,WTF::StringImpl *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  GeolocationRequestData::~GeolocationRequestData((GeolocationRequestData *)&a12, a2);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v55);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198D9DC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  CFRelease(*(CFTypeRef *)(v8 + 8));
  if (a5) {
    CFRelease(*(CFTypeRef *)(a5 + 8));
  }
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  GeolocationRequestData::~GeolocationRequestData((GeolocationRequestData *)va, v10);
  _Unwind_Resume(a1);
}

void sub_198D9DF0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unint64_t v6 = v3;
  unint64_t v8 = v6;
  if (v6 <= v5)
  {
    long long v15 = (GeolocationRequestData *)((char *)v2 + 352 * v6);
    uint64_t v16 = 352 * v5 - 352 * v6;
    do
    {
      GeolocationRequestData::~GeolocationRequestData(v15, a2);
      long long v15 = (GeolocationRequestData *)(v17 + 352);
      v16 -= 352;
    }
    while (v16);
  }
  else
  {
    if (v5)
    {
      uint64_t v9 = 352 * v5;
      char v10 = (GeolocationRequestData *)v2;
      do
      {
        GeolocationRequestData::~GeolocationRequestData(v10, a2);
        char v10 = (GeolocationRequestData *)(v11 + 352);
        v9 -= 352;
      }
      while (v9);
    }
    if (v8 != v4)
    {
      __int16 v12 = (GeolocationRequestData *)((char *)v2 + 352 * v8);
      uint64_t v13 = 352 * v4 - 352 * v8;
      do
      {
        GeolocationRequestData::~GeolocationRequestData(v12, a2);
        __int16 v12 = (GeolocationRequestData *)(v14 + 352);
        v13 -= 352;
      }
      while (v13);
    }
  }
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198D9FF58(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, a2);
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v15);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v15);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v15);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198DA01B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c28_ZTSN3WTF9RetainPtrI5NSURLEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c28_ZTSN3WTF9RetainPtrI5NSURLEE(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void GeolocationRequestData::~GeolocationRequestData(GeolocationRequestData *this, WTF::StringImpl *a2)
{
  unint64_t v3 = (const void *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unint64_t v5 = (WTF::StringImpl *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((unsigned int *)this + 68);
  if (v6 != -1) {
    ((void (*)(char *, char *))off_1EE9D4120[v6])(&v10, (char *)this + 248);
  }
  *((_DWORD *)this + 68) = -1;
  char v7 = (const void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)this + 48));
  uint64_t v9 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
}

Class initASVInlinePreview(void)
{
  if ((byte_1E93CF7D9 & 1) == 0)
  {
    uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/AssetViewer.framework/AssetViewer", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x198DA0B78);
    }
    unk_1E93CF7F0 = v1;
    byte_1E93CF7D9 = 1;
  }
  Class result = objc_getClass("ASVInlinePreview");
  qword_1E93CF7E8 = (uint64_t)result;
  if (!result) {
    goto LABEL_7;
  }
  getASVInlinePreviewClass = ASVInlinePreviewFunction;
  return result;
}

uint64_t ASVInlinePreviewFunction(void)
{
  return qword_1E93CF7E8;
}

void WTF::VectorMover<false,GeolocationRequestData>::move(GeolocationRequestData *a1, GeolocationRequestData *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      GeolocationRequestData::GeolocationRequestData(a3, (uint64_t)v5);
      GeolocationRequestData::~GeolocationRequestData(v5, v6);
      a3 += 352;
      unint64_t v5 = (GeolocationRequestData *)((char *)v5 + 352);
    }
    while (v5 != a2);
  }
}

uint64_t GeolocationRequestData::GeolocationRequestData(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  *(_WORD *)(v4 + 40) = *(_WORD *)(a2 + 40);
  WebCore::ResourceRequestBase::ResourceRequestBase(v4 + 48, a2 + 48);
  uint64_t v5 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 240) = v5;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 248, a2 + 248);
  uint64_t v6 = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 280) = v6;
  long long v7 = *(_OWORD *)(a2 + 288);
  long long v8 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 318) = *(_OWORD *)(a2 + 318);
  *(_OWORD *)(a1 + 288) = v7;
  *(_OWORD *)(a1 + 30WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v8;
  uint64_t v9 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(void *)(a1 + 336) = v9;
  uint64_t v10 = *(void *)(a2 + 344);
  *(void *)(a2 + 34WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(a1 + 34WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
  return a1;
}

void sub_198DA0CD4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void **)(v1 + 240);
  *(void *)(v1 + 240) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  uint64_t v6 = *(WTF::StringImpl **)v1;
  *(void *)uint64_t v1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v6 += 2;
  }
  if (!*(unsigned char *)(a2 + 24)) {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7)
  {
LABEL_9:
    char v9 = 0;
    unint64_t v8 = 0;
    goto LABEL_10;
  }
  if (!*(void *)(v7 + 8) || (Class result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result)) == 0)
  {
LABEL_8:
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  a4 = *(double *)(a2 + 16);
  unint64_t v8 = result & 0xFFFFFFFFFFFFFF00;
  uint64_t v7 = result;
  char v9 = 1;
LABEL_10:
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8 | v7;
  *(double *)(a3 + 16) = a4;
  *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v9;
  *(unsigned char *)(a3 + 32) = 1;
  return result;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  if (!*(unsigned char *)(a2 + 24)
    || (Class result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking((uint64_t)result, a2 + 8, (uint64_t)&v10),
        !v12))
  {
    *(void *)a3 = v4;
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
LABEL_13:
    *(unsigned char *)(a3 + 32) = 1;
    return result;
  }
  uint64_t v6 = v10;
  if (!v10)
  {
    uint64_t v9 = v11;
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = v9;
    *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
    goto LABEL_13;
  }
  atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  int v7 = v12;
  uint64_t v8 = v11;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v8;
  *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  *(unsigned char *)(a3 + 32) = 1;
  if (v7)
  {
    Class result = (unsigned int *)v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v5);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2, (uint64_t)v27);
  if (v28)
  {
    WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2 + 16, (uint64_t)&v21);
    if (v26)
    {
      uint64_t v8 = v27[1];
      uint64_t v9 = v21;
      LOBYTE(v18) = 0;
      char v19 = 0;
      int v10 = v23;
      if (v23)
      {
        uint64_t v11 = v22;
        long long v22 = 0;
        int v18 = v11;
        char v19 = 1;
      }
      uint64_t v12 = v24;
      uint64_t v13 = v25;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      *(void *)a3 = v27[0];
      *(void *)(a3 + 8) = v8;
      *(void *)(a3 + 16) = v9;
      *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(unsigned char *)(a3 + 32) = 0;
      if (v10)
      {
        uint64_t v14 = v18;
        int v18 = 0;
        *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v14;
        *(unsigned char *)(a3 + 32) = 1;
      }
      v20[0] = 0;
      v20[1] = 0;
      *(void *)(a3 + 40) = v12;
      *(void *)(a3 + 48) = v13;
      *(unsigned char *)(a3 + 56) = 1;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v7);
      if (v19 && v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v15);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      return std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v15);
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 56) = 0;
      uint64_t v16 = (WTF::StringImpl *)v27[0];
      uint64_t result = std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v7);
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          return WTF::StringImpl::destroy(v16, v17);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 56) = 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF *v34;
  WTF::StringImpl *v35;
  char v36;
  void v37[4];
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  uint64_t result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2, (uint64_t)&v40);
  if (!v45)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 56) = 0;
    return std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, (void *)v7);
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v8 = *(unsigned int *)(a2 + 52);
  if (!v8)
  {
LABEL_29:
    int v10 = 0;
LABEL_30:
    LOBYTE(v35) = 0;
    uint64_t v36 = 0;
    long long v27 = v42;
    if (v42)
    {
      char v28 = v41;
      float v41 = 0;
      uint64_t v35 = v28;
      uint64_t v36 = 1;
    }
    long long v29 = v43;
    int v43 = 0;
    long long v30 = v44;
    float v44 = 0;
    id v31 = v38;
    uint64_t v38 = 0;
    char v32 = v39;
    uint64_t v39 = 0;
    *(void *)a3 = v40;
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v27)
    {
      uint64_t v33 = v35;
      uint64_t v35 = 0;
      *(void *)(a3 + 8) = v33;
      *(unsigned char *)(a3 + 16) = 1;
    }
    v37[0] = 0;
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v29;
    v37[1] = 0;
    *(void *)(a3 + 32) = v30;
    v37[2] = 0;
    *(void *)(a3 + 40) = v31;
    v37[3] = 0;
    *(_DWORD *)(a3 + 48) = v32;
    *(_DWORD *)(a3 + 52) = v10;
    *(unsigned char *)(a3 + 56) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, (void *)v7);
    if (v36 && v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v7);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
LABEL_41:
    uint64_t v34 = v38;
    if (v38)
    {
      uint64_t v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree(v34, (void *)v7);
    }
    return std::__optional_destruct_base<WebKit::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v40, (void *)v7);
  }
  if (!(v8 >> 28))
  {
    LODWORD(v39) = *(_DWORD *)(a2 + 52);
    uint64_t v38 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
    uint64_t v9 = *(unsigned int *)(a2 + 52);
    if (v9)
    {
      int v10 = 0;
      uint64_t v11 = *(unsigned __int8 **)(a2 + 40);
      uint64_t v12 = 16 * v9;
      while (1)
      {
        if (v11[12])
        {
          uint64_t v13 = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, v11);
          if ((v7 & 0xFF00000000) == 0)
          {
            *(unsigned char *)a3 = 0;
            *(unsigned char *)(a3 + 56) = 0;
            goto LABEL_41;
          }
          uint64_t v14 = v13;
          long long v15 = v7;
          uint64_t v16 = HIDWORD(v39);
          if (HIDWORD(v39) == v39)
          {
            uint64_t v17 = HIDWORD(v39) + ((unint64_t)HIDWORD(v39) >> 2);
            if (v17 >= 0x10) {
              int v18 = v17 + 1;
            }
            else {
              int v18 = 16;
            }
            if (v18 <= (unint64_t)HIDWORD(v39) + 1) {
              char v19 = HIDWORD(v39) + 1;
            }
            else {
              char v19 = v18;
            }
            WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v38, v19);
            uint64_t v16 = HIDWORD(v39);
          }
          long long v20 = (char *)v38 + 16 * v16;
          *(void *)long long v20 = v14;
          *((_DWORD *)v20 + 2) = v15;
          uint64_t v21 = 1;
        }
        else
        {
          long long v22 = v10;
          if (v10 == v39)
          {
            unsigned __int8 v23 = v10 + 1;
            uint64_t v24 = v22 + (v22 >> 2);
            if (v24 >= 0x10) {
              uint64_t v25 = v24 + 1;
            }
            else {
              uint64_t v25 = 16;
            }
            if (v25 <= v23) {
              char v26 = v22 + 1;
            }
            else {
              char v26 = v25;
            }
            WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v38, v26);
            uint64_t v21 = 0;
            long long v20 = (char *)v38 + 16 * HIDWORD(v39);
          }
          else
          {
            uint64_t v21 = 0;
            long long v20 = (char *)v38 + 16 * v10;
          }
          *long long v20 = 0;
        }
        v20[12] = v21;
        int v10 = ++HIDWORD(v39);
        v11 += 16;
        v12 -= 16;
        if (!v12) {
          goto LABEL_30;
        }
      }
    }
    goto LABEL_29;
  }
  __break(0xC471u);
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  int v14;
  unsigned __int8 v15;
  char v16;
  unsigned char v17[16];
  int v18;
  char v19;
  unsigned char *v20;

  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 200))(a1, *(void *)(*(void *)a2 + 8));
  if (!result) {
    goto LABEL_26;
  }
  uint64_t v6 = result;
  v17[0] = 0;
  char v19 = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2 + 16, (uint64_t)&v10);
    if (v19 != v13)
    {
      if (v19)
      {
        if (v18 != -1) {
          uint64_t result = ((uint64_t (*)(unsigned char **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v18])(&v20, v17);
        }
        int v18 = -1;
        char v19 = 0;
      }
      else
      {
        v17[0] = 0;
        int v18 = -1;
        uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)&v10);
        char v19 = 1;
      }
      goto LABEL_16;
    }
    if (!v19) {
      goto LABEL_19;
    }
    if (v18 == -1)
    {
      if (v12 == -1) {
        goto LABEL_16;
      }
    }
    else if (v12 == -1)
    {
      uint64_t result = ((uint64_t (*)(unsigned char **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v18])(&v20, v17);
      int v18 = -1;
LABEL_16:
      if (v13 && v12 != -1) {
        uint64_t result = ((uint64_t (*)(unsigned char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v12])(&v20, &v10);
      }
LABEL_19:
      if (v19)
      {
        int v10 = v6;
        uint64_t v11 = *(_DWORD *)(a2 + 8);
        LOBYTE(v12) = 0;
        long long v15 = 0;
        uint64_t v14 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v12, (uint64_t)v17);
        long long v15 = 1;
        uint64_t v16 = *(unsigned char *)(a2 + 48);
        *(void *)a3 = v10;
        *(_DWORD *)(a3 + 8) = v11;
        *(unsigned char *)(a3 + 16) = 0;
        *(unsigned char *)(a3 + 40) = 0;
        *(_DWORD *)(a3 + 32) = -1;
        uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a3 + 16, (uint64_t)&v12);
        *(unsigned char *)(a3 + 40) = 1;
        uint64_t v9 = v15;
        *(unsigned char *)(a3 + 48) = v16;
        *(unsigned char *)(a3 + 56) = 1;
        if (v9 && v14 != -1) {
          uint64_t result = ((uint64_t (*)(unsigned char **, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v14])(&v20, &v12);
        }
        goto LABEL_23;
      }
LABEL_26:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 56) = 0;
      return result;
    }
    long long v20 = v17;
    uint64_t result = ((uint64_t (*)(unsigned char **, unsigned char *, uint64_t *))off_1EE9D4450[v12])(&v20, v17, &v10);
    goto LABEL_16;
  }
  int v10 = result;
  uint64_t v11 = *(_DWORD *)(a2 + 8);
  int v7 = v11;
  LOBYTE(v12) = 0;
  long long v15 = 0;
  uint64_t v16 = *(unsigned char *)(a2 + 48);
  uint64_t v8 = v16;
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 48) = v8;
  *(unsigned char *)(a3 + 56) = 1;
LABEL_23:
  if (v19)
  {
    if (v18 != -1) {
      return ((uint64_t (*)(uint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v18])(&v10, v17);
    }
  }
  return result;
}

{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t vars8;

  uint64_t v4 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v5 || !*(void *)(v5 + 8))
  {
    uint64_t result = 0;
    goto LABEL_10;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (result)
  {
LABEL_10:
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = result;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      return WTF::StringImpl::destroy(v4, v7);
    }
    else
    {
      *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

{
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 192))(a1, *(void *)(*(void *)a2 + 8));
  if (result)
  {
    uint64_t v12 = result;
    LOBYTE(v13) = 0;
    uint64_t v14 = 0;
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v6 = *(WTF::StringImpl **)(a2 + 8);
      if (v6) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v13 = v6;
      uint64_t v14 = 1;
    }
    int v7 = WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v15, (uint64_t *)(a2 + 24));
    *(void *)a3 = v12;
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v14)
    {
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      *(void *)(a3 + 8) = v9;
      *(unsigned char *)(a3 + 16) = 1;
    }
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v15;
    int v10 = v16;
    long long v15 = 0;
    uint64_t v16 = 0;
    *(void *)(a3 + 32) = v10;
    *(unsigned char *)(a3 + 40) = 1;
    uint64_t result = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, v8);
    if (v14)
    {
      uint64_t result = (uint64_t)v13;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          return WTF::StringImpl::destroy(v13, v11);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 40) = 0;
  }
  return result;
}

{
  uint64_t result;
  int v6;
  int v7;
  char v8;
  int v9;
  int v10;
  char v11;
  char v12;

  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(*(void *)a2 + 8));
  if (result)
  {
    uint64_t v6 = *(_DWORD *)(a2 + 8);
    int v7 = *(_DWORD *)(a2 + 12);
    uint64_t v8 = *(unsigned char *)(a2 + 16);
    uint64_t v9 = *(_DWORD *)(a2 + 20);
    int v10 = *(_DWORD *)(a2 + 24);
    uint64_t v11 = *(unsigned char *)(a2 + 28);
    *(void *)a3 = result;
    *(_DWORD *)(a3 + 8) = v6;
    *(_DWORD *)(a3 + 12) = v7;
    *(unsigned char *)(a3 + 16) = v8;
    *(_DWORD *)(a3 + 20) = v9;
    *(_DWORD *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
    uint64_t v12 = 1;
    *(unsigned char *)(a3 + 28) = v11;
  }
  else
  {
    uint64_t v12 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 32) = v12;
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v25);
  if (v26)
  {
    WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2 + 16, (uint64_t)&v19);
    if (v24)
    {
      long long v8 = v25;
      long long v25 = 0uLL;
      uint64_t v9 = v19;
      uint64_t v19 = 0;
      LOBYTE(v16) = 0;
      char v17 = 0;
      int v10 = v21;
      if (v21)
      {
        uint64_t v11 = v20;
        long long v20 = 0;
        uint64_t v16 = v11;
        char v17 = 1;
      }
      uint64_t v12 = v22;
      uint64_t v13 = v23;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      *(_OWORD *)a3 = v8;
      *(void *)(a3 + 16) = v9;
      *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(unsigned char *)(a3 + 32) = 0;
      if (v10)
      {
        uint64_t v14 = v16;
        uint64_t v16 = 0;
        *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v14;
        *(unsigned char *)(a3 + 32) = 1;
      }
      v18[0] = 0;
      v18[1] = 0;
      *(void *)(a3 + 40) = v12;
      *(void *)(a3 + 48) = v13;
      *(unsigned char *)(a3 + 56) = 1;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v7);
      if (v17 && v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v7);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 56) = 0;
    }
    std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 56) = 0;
  }
  return std::__optional_destruct_base<WebCore::WebGPU::PipelineDescriptorBase,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v6);
}

{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v11;
  uint64_t result;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  char v28;
  char v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  long long v51;
  long long v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  WTF::StringImpl *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  WTF::StringImpl *v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned char v77[69];
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned int *v94;
  WTF::StringImpl *v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v102);
  if (!v104 || (uint64_t result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2 + 16, &v94), !v101))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 208) = 0;
    return std::__optional_destruct_base<WebCore::WebGPU::PipelineDescriptorBase,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v102, v11);
  }
  if (*(unsigned char *)(a2 + 78))
  {
    uint64_t v16 = *(unsigned char *)(a2 + 72);
    uint64_t v14 = *(unsigned int *)(a2 + 73) | ((unint64_t)*(unsigned __int8 *)(a2 + 77) << 32);
    char v17 = 1;
  }
  else
  {
    uint64_t v16 = 0;
    char v17 = 0;
  }
  if (*(unsigned char *)(a2 + 124))
  {
    uint64_t v6 = *(void *)(a2 + 85);
    int v18 = *(unsigned char *)(a2 + 80);
    uint64_t v13 = *(_WORD *)(a2 + 81);
    long long v15 = *(_WORD *)(a2 + 83);
    unint64_t v3 = ((unint64_t)*(unsigned int *)(a2 + 96) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 100) << 56);
    uint64_t v4 = ((unint64_t)*(unsigned int *)(a2 + 104) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 108) << 56);
    uint64_t v5 = *(_DWORD *)(a2 + 112);
    int v7 = *(void *)(a2 + 116);
    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v19 = 0;
    int v18 = 0;
  }
  long long v20 = *(unsigned __int8 *)(a2 + 140);
  unsigned __int8 v21 = *(void *)(a2 + 128);
  if (*(unsigned char *)(a2 + 140)) {
    uint64_t v22 = *(unsigned __int8 *)(a2 + 136) | 0x100000000;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(unsigned __int8 *)(a2 + 200);
  if (*(unsigned char *)(a2 + 200))
  {
    int v62 = v22;
    id v63 = *(void *)(a2 + 128);
    uint64_t v64 = *(unsigned __int8 *)(a2 + 140);
    long long v65 = v5;
    long long v66 = v4;
    uint64_t v67 = v19;
    char v24 = v3;
    long long v25 = v15;
    char v26 = v14;
    long long v27 = v13;
    char v28 = v18;
    long long v29 = v17;
    long long v30 = v16;
    uint64_t result = (uint64_t)WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2 + 144, (uint64_t)&v86);
    uint64_t v23 = v93;
    uint64_t v16 = v30;
    char v17 = v29;
    int v18 = v28;
    uint64_t v13 = v27;
    uint64_t v14 = v26;
    long long v15 = v25;
    unint64_t v3 = v24;
    if (*(unsigned char *)(a2 + 200))
    {
      uint64_t v19 = v67;
      uint64_t v4 = v66;
      long long v20 = v64;
      uint64_t v5 = v65;
      uint64_t v22 = v62;
      unsigned __int8 v21 = v63;
      if (!v93)
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 208) = 0;
LABEL_36:
        std::__optional_destruct_base<WebCore::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v31);
        if (v101)
        {
          WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v99, v11);
          WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v59);
          if (v96)
          {
            id v60 = v95;
            uint64_t v95 = 0;
            if (v60)
            {
              if (*(_DWORD *)v60 == 2) {
                WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v11);
              }
              else {
                *(_DWORD *)v60 -= 2;
              }
            }
          }
          uint64_t v61 = v94;
          v94 = 0;
          if (v61)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v61, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v61);
              WTF::fastFree((WTF *)v61, v11);
            }
          }
        }
        return std::__optional_destruct_base<WebCore::WebGPU::PipelineDescriptorBase,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v102, v11);
      }
    }
    else
    {
      uint64_t v19 = v67;
      uint64_t v4 = v66;
      long long v20 = v64;
      uint64_t v5 = v65;
      uint64_t v22 = v62;
      unsigned __int8 v21 = v63;
    }
  }
  else
  {
    LOBYTE(v86) = 0;
    uint64_t v93 = 0;
  }
  char v32 = v102;
  uint64_t v33 = v103;
  v102 = 0;
  uint64_t v103 = 0;
  uint64_t v68 = v32;
  unsigned int v69 = v33;
  if (v101)
  {
    uint64_t v34 = v94;
    v94 = 0;
    uint64_t v70 = v34;
    LOBYTE(v71) = 0;
    unsigned int v72 = 0;
    uint64_t v35 = v96;
    if (v96)
    {
      uint64_t v36 = v95;
      uint64_t v95 = 0;
      uint64_t v71 = v36;
      unsigned int v72 = 1;
    }
    uint64_t v37 = v97;
    uint64_t v97 = 0;
    int v73 = v37;
    uint64_t v38 = v98;
    uint64_t v39 = HIDWORD(v98);
    v98 = 0;
    v74 = __PAIR64__(v39, v38);
    int v40 = v99;
    v99 = 0;
    uint64_t v75 = v40;
    float v41 = v100;
    float v42 = HIDWORD(v100);
    v100 = 0;
    char v76 = __PAIR64__(v42, v41);
    v77[0] = v16;
    *(_DWORD *)&v77[1] = v14;
    v77[5] = BYTE4(v14);
    v77[6] = v17;
    v77[8] = v18;
    *(_WORD *)&v77[9] = v13;
    *(_WORD *)&v77[11] = v15;
    *(void *)&v77[13] = v6;
    *(void *)&v77[21] = v3;
    *(void *)&v77[29] = v4;
    *(_DWORD *)&v77[40] = v5;
    *(void *)&v77[44] = v7;
    v77[52] = v19;
    if (v20) {
      int v43 = v21;
    }
    else {
      int v43 = 0;
    }
    *(void *)&v77[56] = v43;
    *(_DWORD *)&v77[64] = v22;
    v77[68] = BYTE4(v22);
    LOBYTE(v78) = 0;
    uint64_t v85 = 0;
    if (v23)
    {
      float v44 = v86;
      unsigned long long v86 = 0;
      uint64_t v78 = v44;
      LOBYTE(v79) = 0;
      uint64_t v80 = 0;
      if (v88)
      {
        int v45 = v87;
        uint64_t v87 = 0;
        uint64_t v79 = v45;
        uint64_t v80 = 1;
      }
      uint64_t v46 = v89;
      uint64_t v89 = 0;
      uint64_t v81 = v46;
      unint64_t v47 = v90;
      int v90 = 0;
      uint64_t v82 = v47;
      uint64_t v48 = v91;
      uint64_t v91 = 0;
      uint64_t v83 = v48;
      CFTypeRef v49 = v92;
      uint64_t v92 = 0;
      float32x2_t v84 = v49;
      uint64_t v85 = 1;
    }
    uint64_t v68 = 0;
    unsigned int v69 = 0;
    *(void *)a3 = v32;
    *(void *)(a3 + 8) = v33;
    uint64_t v70 = 0;
    *(void *)(a3 + 16) = v34;
    *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    *(unsigned char *)(a3 + 32) = 0;
    if (v35)
    {
      CFTypeRef v50 = v71;
      uint64_t v71 = 0;
      *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v50;
      *(unsigned char *)(a3 + 32) = 1;
    }
    v74 = 0;
    char v76 = 0;
    uint64_t v51 = *(_OWORD *)v77;
    *(_OWORD *)(a3 + 88) = *(_OWORD *)&v77[16];
    double v52 = *(_OWORD *)&v77[48];
    *(_OWORD *)(a3 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_OWORD *)&v77[32];
    *(_OWORD *)(a3 + 120) = v52;
    int v73 = 0;
    *(void *)(a3 + 40) = v37;
    *(_DWORD *)(a3 + 48) = v38;
    *(_DWORD *)(a3 + 52) = v39;
    uint64_t v75 = 0;
    *(void *)(a3 + 56) = v40;
    *(_DWORD *)(a3 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v41;
    *(_DWORD *)(a3 + 68) = v42;
    *(void *)(a3 + 133) = *(void *)&v77[61];
    *(_OWORD *)(a3 + 72) = v51;
    *(unsigned char *)(a3 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    *(unsigned char *)(a3 + 200) = 0;
    if (v23)
    {
      id v53 = v78;
      uint64_t v78 = 0;
      *(void *)(a3 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v53;
      *(unsigned char *)(a3 + 152) = 0;
      *(unsigned char *)(a3 + 160) = 0;
      if (v80)
      {
        unint64_t v54 = v79;
        uint64_t v79 = 0;
        *(void *)(a3 + 152) = v54;
        *(unsigned char *)(a3 + 160) = 1;
      }
      unsigned int v55 = v81;
      uint64_t v81 = 0;
      *(void *)(a3 + 168) = v55;
      id v56 = v82;
      uint64_t v82 = 0;
      *(void *)(a3 + 176) = v56;
      v57 = v83;
      uint64_t v83 = 0;
      *(void *)(a3 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v57;
      int v58 = v84;
      float32x2_t v84 = 0;
      *(void *)(a3 + 192) = v58;
      *(unsigned char *)(a3 + 200) = 1;
    }
    *(unsigned char *)(a3 + 208) = 1;
    WebCore::WebGPU::RenderPipelineDescriptor::~RenderPipelineDescriptor((WebCore::WebGPU::RenderPipelineDescriptor *)&v68, v77);
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(_DWORD **)a1;
  if (*(void *)a1) {
    *v4 += 2;
  }
  uint64_t v5 = (WTF *)*(unsigned int *)(a1 + 20);
  LODWORD(v12) = 0;
  *(_OWORD *)uint64_t v11 = (unint64_t)v4;
  HIDWORD(v12) = v5;
  if (v5)
  {
    LODWORD(v12) = *(_DWORD *)(a1 + 20);
    v11[1] = (WTF::StringImpl *)WTF::fastMalloc(v5);
    memcpy(v11[1], *(const void **)(a1 + 8), *(unsigned int *)(a1 + 20));
  }
  uint64_t v6 = WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v13, (uint64_t *)(a1 + 24));
  *(_OWORD *)a2 = *(_OWORD *)v11;
  *(void *)(a2 + 16) = v12;
  uint64_t v7 = v13;
  uint64_t v13 = 0;
  *(void *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v7;
  uint64_t v8 = v14;
  uint64_t v14 = 0;
  *(void *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 40) = 1;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, v9);
  return 0;
}

{
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;

  unint64_t v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t v5 = *(_DWORD *)(a1 + 8);
    uint64_t v8 = *(void *)a1;
    uint64_t v9 = v5;
    int v10 = 1;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v8);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  else
  {
    if (v3)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v6, v7);
    }
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v8, a1);
    int v10 = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v8);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  if (v10 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v10])(&v11, &v8);
  }
  return result;
}

{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[2];
  int v8;
  char v9;

  unint64_t v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    v7[0] = *(void *)a1;
    uint64_t v8 = 1;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v7);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  else
  {
    if (v3)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, v6);
    }
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v7, a1);
    uint64_t v8 = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v7);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  if (v8 != -1) {
    return ((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v8])(&v9, v7);
  }
  return result;
}

{
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;

  unint64_t v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t v5 = *(_DWORD *)(a1 + 8);
    uint64_t v8 = *(void *)a1;
    uint64_t v9 = v5;
    int v10 = 1;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v8);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  else
  {
    if (v3)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v6, v7);
    }
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v8, a1);
    int v10 = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v8);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  if (v10 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v10])(&v11, &v8);
  }
  return result;
}

{
  void *v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  long long v8;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, (uint64_t)&v10);
  uint64_t v5 = v13;
  if (v13)
  {
    uint64_t v6 = v12;
    uint64_t v7 = *(_WORD *)(a1 + 32);
    uint64_t v8 = v10;
    int v10 = 0uLL;
    *(_OWORD *)a2 = v8;
    *(void *)&uint64_t v8 = v11;
    uint64_t v11 = 0;
    *(void *)(a2 + 16) = v8;
    *(void *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v6;
    uint64_t v5 = 1;
    *(_WORD *)(a2 + 32) = v7;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 40) = v5;
  return std::__optional_destruct_base<WebKit::WebGPU::RenderPassLayout,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v4);
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(void *)a1;
    int v8 = v5;
    int v9 = 1;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v7);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  else
  {
    if (v3)
    {
      uint64_t v6 = std::__throw_bad_variant_access[abi:sn180100]();
      return std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100](v6);
    }
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, a1);
    int v9 = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v7);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  if (v9 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v9])(&v10, &v7);
  }
  return result;
}

{
  int v3;
  uint64_t result;
  uint64_t v5;
  void v6[2];
  int v7;
  char v8;

  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    v6[0] = *(void *)a1;
    uint64_t v7 = 1;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  else
  {
    if (v3)
    {
      int v5 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v5);
    }
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v6, a1);
    uint64_t v7 = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  if (v7 != -1) {
    return ((uint64_t (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v7])(&v8, v6);
  }
  return result;
}

{
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;

  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(void *)a1;
    int v8 = v5;
    int v9 = 1;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v7);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  else
  {
    if (v3)
    {
      uint64_t v6 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v6);
    }
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, a1);
    int v9 = 0;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v7);
    *(unsigned char *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  if (v9 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v9])(&v10, &v7);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 8);
    uint64_t v4 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, v3);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::PipelineDescriptorBase,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    int v3 = *(unsigned int **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 28))
  {
    int v5 = (void *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *((unsigned int *)a2 + 3);
    if (v6)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = *a2 + 16 * v6;
      do
      {
        int v9 = *(_DWORD **)v7;
        if (*(void *)v7) {
          *v9 += 2;
        }
        uint64_t v10 = *(void *)(v7 + 8);
        void *v5 = v9;
        v5[1] = v10;
        v5 += 2;
        v7 += 16;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = off_1EE9D41A0[v4](&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9D41B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

void *__copy_helper_block_e8_32c65_ZTSKZ52__WKMouseDeviceObserver_startWithCompletionHandler__E3__0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_198DA1AA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c65_ZTSKZ52__WKMouseDeviceObserver_startWithCompletionHandler__E3__0(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_198DA1C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Block_release(v14);
  CFRelease(v13);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c64_ZTSKZ51__WKMouseDeviceObserver_stopWithCompletionHandler__E3__1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_198DA1CEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c64_ZTSKZ51__WKMouseDeviceObserver_stopWithCompletionHandler__E3__1(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2)
  {
    CFRelease(v2);
  }
}

void sub_198DA1DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA23B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA25B8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198DA2784(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198DA2900(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA29D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA2B88(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA2E08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c71_ZTSKZ58__WKPDFView_web_setContentProviderData_suggestedFilename__E3__6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = (id *)(a1 + 40);
  *(v3 - 1) = v2;
  objc_copyWeak(v3, (id *)(a2 + 40));
}

void __destroy_helper_block_e8_32c71_ZTSKZ58__WKPDFView_web_setContentProviderData_suggestedFilename__E3__6(uint64_t a1)
{
}

void sub_198DA34C8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198DA35A4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198DA36FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA39CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA4074(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198DA4300(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA45F8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&a21, a2);
  _Unwind_Resume(a1);
}

void sub_198DA47D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_198DA4D38(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, a2);
  if (a29)
  {
    char v32 = a24;
    a24 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v31);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v31);
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, v33);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, v33);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, v33);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198DA500C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA564C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA5740(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA5D30(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 32);
  *(void *)(v2 - 32) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(const void **)(v2 - 24);
  *(void *)(v2 - 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v5) {
    CFRelease(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA6004(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::NativeWebMouseEvent,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v3 = *(const void **)(a1 + 144);
    *(void *)(a1 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 128, a2);
    WTF::Vector<WebKit::WebMouseEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 112, v4);
    char v6 = *(WTF::StringImpl **)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(WTF::StringImpl **)a1;
  if (*(void *)a1) {
    *(_DWORD *)v3 += 2;
  }
  if (*(_DWORD *)(a1 + 32))
  {
    char v4 = 0;
    char v5 = 0;
  }
  else
  {
    char v5 = *(unsigned char *)(a1 + 16);
    *(_DWORD *)char v17 = *(_DWORD *)(a1 + 17);
    *(_DWORD *)&v17[3] = *(_DWORD *)(a1 + 20);
    char v4 = *(unsigned char *)(a1 + 24);
  }
  uint64_t v8 = v3;
  char v9 = v5;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v17;
  *(_DWORD *)&v10[3] = *(_DWORD *)&v17[3];
  char v11 = v4;
  char v12 = *(unsigned char *)(a1 + 40);
  char v13 = 0;
  char v16 = 0;
  std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ExternalTextureDescriptor>(a2, (uint64_t *)&v8);
  if (v16)
  {
    if (v15 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix_0[v15])(&v18, &v14);
    }
    int v15 = -1;
  }
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  char v5 = *(_DWORD **)a1;
  if (*(void *)a1) {
    *v5 += 2;
  }
  char v6 = *a2;
  v11[0] = v6;
  if (v6) {
    CFRetain(v6);
  }
  int v12 = 2;
  char v13 = *(unsigned char *)(a1 + 24);
  uint64_t v10 = 0;
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,WTF::RetainPtr<__CVBuffer *>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,WTF::RetainPtr<__CVBuffer *>>,(std::__variant_detail::_Trait)1>>(a3 + 16, (uint64_t)v11);
  *(unsigned char *)(a3 + 40) = v13;
  *(unsigned char *)(a3 + 48) = 1;
  if (v12 != -1) {
    ((void (*)(char *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEENS7_6RefPtrINS9_10VideoFrameENS7_12RawPtrTraitsISH_EENS7_21DefaultRefDerefTraitsISH_EEEENS7_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRST_EEEDcOSU_DpOT0____fmatrix[v12])(&v9, v11);
  }
  int v12 = -1;
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (WTF *)WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v37);
  if (!v42)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 56) = 0;
    return (WTF *)std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, (void *)v7);
  }
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v8 = *(unsigned int *)(a2 + 52);
  if (v8)
  {
    if (v8 >> 28) {
      goto LABEL_46;
    }
    uint64_t result = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
    LODWORD(v36) = v8;
    uint64_t v35 = result;
    uint64_t v9 = *(unsigned int *)(a2 + 52);
    if (v9)
    {
      uint64_t v10 = result;
      unsigned int v11 = 0;
      int v12 = *(unsigned __int8 **)(a2 + 40);
      uint64_t v13 = 16 * v9;
      while (1)
      {
        if (v12[12])
        {
          uint64_t result = (WTF *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, v12);
          if ((v7 & 0xFF00000000) == 0)
          {
            *(unsigned char *)a3 = 0;
            *(unsigned char *)(a3 + 56) = 0;
            goto LABEL_41;
          }
          uint64_t v14 = result;
          int v15 = v7;
          if (v11 == v36)
          {
            unint64_t v16 = v11 + ((unint64_t)v11 >> 2);
            if (v16 >= 0x10) {
              unint64_t v17 = v16 + 1;
            }
            else {
              unint64_t v17 = 16;
            }
            if (v17 <= (unint64_t)v11 + 1) {
              unint64_t v18 = v11 + 1;
            }
            else {
              unint64_t v18 = v17;
            }
            uint64_t result = (WTF *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v35, v18);
            unsigned int v11 = HIDWORD(v36);
            uint64_t v10 = v35;
            uint64_t v19 = (char *)v35 + 16 * HIDWORD(v36);
          }
          else
          {
            uint64_t v19 = (char *)v10 + 16 * v11;
          }
          *(void *)uint64_t v19 = v14;
          *((_DWORD *)v19 + 2) = v15;
          char v23 = 1;
        }
        else if (v11 == v36)
        {
          unint64_t v20 = v11 + ((unint64_t)v11 >> 2);
          if (v20 >= 0x10) {
            unint64_t v21 = v20 + 1;
          }
          else {
            unint64_t v21 = 16;
          }
          if (v21 <= (unint64_t)v11 + 1) {
            unint64_t v22 = v11 + 1;
          }
          else {
            unint64_t v22 = v21;
          }
          uint64_t result = (WTF *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v35, v22);
          char v23 = 0;
          unsigned int v11 = HIDWORD(v36);
          uint64_t v10 = v35;
          uint64_t v19 = (char *)v35 + 16 * HIDWORD(v36);
          *uint64_t v19 = 0;
        }
        else
        {
          char v23 = 0;
          uint64_t v19 = (char *)v10 + 16 * v11;
          *uint64_t v19 = 0;
        }
        v19[12] = v23;
        HIDWORD(v36) = ++v11;
        v12 += 16;
        v13 -= 16;
        if (!v13) {
          goto LABEL_30;
        }
      }
    }
  }
  unsigned int v11 = 0;
LABEL_30:
  if (v42)
  {
    uint64_t v24 = v37;
    uint64_t v37 = 0;
    LOBYTE(v32) = 0;
    char v33 = 0;
    int v25 = v39;
    if (v39)
    {
      char v26 = v38;
      uint64_t v38 = 0;
      char v32 = v26;
      char v33 = 1;
    }
    uint64_t v27 = v40;
    uint64_t v40 = 0;
    uint64_t v28 = v41;
    uint64_t v41 = 0;
    uint64_t v29 = v35;
    uint64_t v35 = 0;
    int v30 = v36;
    uint64_t v36 = 0;
    *(void *)a3 = v24;
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v25)
    {
      id v31 = v32;
      char v32 = 0;
      *(void *)(a3 + 8) = v31;
      *(unsigned char *)(a3 + 16) = 1;
    }
    v34[0] = 0;
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v27;
    v34[1] = 0;
    *(void *)(a3 + 32) = v28;
    v34[2] = 0;
    *(void *)(a3 + 40) = v29;
    v34[3] = 0;
    *(_DWORD *)(a3 + 48) = v30;
    *(_DWORD *)(a3 + 52) = v11;
    *(unsigned char *)(a3 + 56) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, (void *)v7);
    if (v33 && v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v7);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
LABEL_41:
    if (v35) {
      WTF::fastFree(v35, (void *)v7);
    }
    return (WTF *)std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, (void *)v7);
  }
  __break(1u);
LABEL_46:
  __break(0xC471u);
  return result;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  char v17 = *((unsigned char *)a2 + 12);
  uint64_t v5 = *((unsigned __int8 *)a2 + 20);
  uint64_t v6 = *((unsigned int *)a2 + 4);
  (*(void (**)(WTF **__return_ptr))(*(void *)a1 + 40))(&v15);
  uint64_t result = (unsigned int *)v15;
  if (v15 && (uint64_t v9 = *((void *)v15 + 1)) != 0)
  {
    int v13 = v16;
    char v14 = v17;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 16), v9);
    uint64_t v10 = *(atomic_uint **)(v9 + 16);
    atomic_fetch_add(v10, 1u);
    *(void *)a3 = v4;
    *(_DWORD *)(a3 + 8) = v13;
    *(unsigned char *)(a3 + 12) = v14;
    *(void *)(a3 + 13) = (v6 << 24) | (v5 << 56);
    *(_WORD *)(a3 + 21) = v11;
    *(unsigned char *)(a3 + 23) = v12;
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
    *(unsigned char *)(a3 + 32) = 1;
    uint64_t result = (unsigned int *)v15;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  int v15 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  v9[0] = 0;
  char v11 = 0;
  if (*(unsigned char *)(a1 + 24))
  {
    WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, (uint64_t)v5);
    uint64_t result = std::__optional_storage_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>>((uint64_t)v9, (uint64_t)v5);
    if (v7 && v6 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v6])(&v12, v5);
    }
    if (!v11)
    {
      *a2 = 0;
      a2[40] = 0;
      return result;
    }
    v5[0] = 0;
    char v7 = 0;
    int v6 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v5, (uint64_t)v9);
    char v7 = 1;
  }
  else
  {
    v5[0] = 0;
    char v7 = 0;
  }
  char v8 = *(unsigned char *)(a1 + 32);
  uint64_t result = std::__optional_destruct_base<WebKit::WebGPU::ImageCopyExternalImage,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ImageCopyExternalImage>((uint64_t)a2, (uint64_t)v5);
  if (v7 && v6 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v6])(&v12, v5);
  }
  if (v11)
  {
    if (v10 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v10])(v5, v9);
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  v9[0] = 0;
  char v11 = 0;
  if (*(unsigned char *)(a1 + 24))
  {
    WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, (uint64_t)v5);
    uint64_t result = std::__optional_storage_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,false>>((uint64_t)v9, (uint64_t)v5);
    if (v7 && v6 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v6])(&v12, v5);
    }
    if (!v11)
    {
      *a2 = 0;
      a2[40] = 0;
      return result;
    }
    v5[0] = 0;
    char v7 = 0;
    int v6 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v5, (uint64_t)v9);
    char v7 = 1;
  }
  else
  {
    v5[0] = 0;
    char v7 = 0;
  }
  char v8 = *(unsigned char *)(a1 + 32);
  uint64_t result = std::__optional_destruct_base<WebCore::WebGPU::ImageCopyExternalImage,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::ImageCopyExternalImage>((uint64_t)a2, (uint64_t)v5);
  if (v7 && v6 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v6])(&v12, v5);
  }
  if (v11)
  {
    if (v10 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v10])(v5, v9);
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2, (uint64_t)&v13);
  if (v19)
  {
    uint64_t v6 = v13;
    int v7 = v14;
    v8[0] = 0;
    char v10 = 0;
    if (v17)
    {
      int v9 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v8, (uint64_t)v15);
      char v10 = 1;
    }
    char v11 = v18;
    __int16 v12 = *(_WORD *)(a2 + 49);
    uint64_t result = std::__optional_destruct_base<WebKit::WebGPU::ImageCopyTextureTagged,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ImageCopyTextureTagged>((uint64_t)a3, &v6);
    if (v10 && v9 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v9])(&v20, v8);
    }
    if (v19 && v17 && v16 != -1) {
      return ((uint64_t (*)(uint64_t *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v16])(&v6, v15);
    }
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  long long v14;
  unint64_t v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;
  __int16 v21;
  unsigned char v22[32];
  int v23;
  char v24;
  unsigned char *v25;

  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(*(void *)a2 + 8));
  if (!result) {
    goto LABEL_31;
  }
  int v7 = result;
  char v8 = *(void *)(a2 + 16);
  if (v8 && *(void *)(v8 + 8))
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
    char v10 = v9 & 0xFFFFFFFFFFFFFF00;
    char v11 = v9;
    __int16 v12 = 1;
  }
  else
  {
    char v11 = 0;
    __int16 v12 = 0;
    char v10 = 0;
  }
  v22[0] = 0;
  uint64_t v24 = 0;
  uint64_t v13 = *(unsigned __int8 *)(a2 + 64);
  if (!*(unsigned char *)(a2 + 64)) {
    goto LABEL_23;
  }
  uint64_t result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2 + 24, (uint64_t)&v14);
  if (v24 != v18)
  {
    if (v24)
    {
      if (v23 != -1) {
        uint64_t result = ((uint64_t (*)(unsigned char **, unsigned char *))off_1EE9D4C38[v23])(&v25, v22);
      }
      char v23 = -1;
      uint64_t v24 = 0;
    }
    else
    {
      v22[0] = 0;
      char v23 = -1;
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v22, (uint64_t)&v14);
      uint64_t v24 = 1;
    }
    goto LABEL_19;
  }
  if (!v24) {
    goto LABEL_22;
  }
  if (v23 == -1)
  {
    if (v17 == -1) {
      goto LABEL_19;
    }
LABEL_18:
    int v25 = v22;
    uint64_t result = ((uint64_t (*)(unsigned char **, unsigned char *, long long *))off_1EE9D4C48[v17])(&v25, v22, &v14);
    goto LABEL_19;
  }
  if (v17 != -1) {
    goto LABEL_18;
  }
  uint64_t result = ((uint64_t (*)(unsigned char **, unsigned char *))off_1EE9D4C38[v23])(&v25, v22);
  char v23 = -1;
LABEL_19:
  if (v18 && v17 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char **, long long *))off_1EE9D4C38[v17])(&v25, &v14);
  }
LABEL_22:
  if (!v24)
  {
LABEL_31:
    *a3 = 0;
    a3[88] = 0;
    return result;
  }
LABEL_23:
  *(void *)&int v14 = v7;
  DWORD2(v1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_DWORD *)(a2 + 8);
  BYTE12(v1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(unsigned char *)(a2 + 12);
  int v15 = v10 | v11;
  int v16 = v12;
  LOBYTE(v17) = 0;
  char v20 = 0;
  if (v13)
  {
    char v19 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v17, (uint64_t)v22);
    char v20 = 1;
  }
  unint64_t v21 = *(_WORD *)(a2 + 72);
  uint64_t result = std::__optional_destruct_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::RenderPassColorAttachment>((uint64_t)a3, &v14);
  if (v20 && v19 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char **, int *))off_1EE9D4C38[v19])(&v25, &v17);
  }
  if (v24)
  {
    if (v23 != -1) {
      return ((uint64_t (*)(long long *, unsigned char *))off_1EE9D4C38[v23])(&v14, v22);
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v16);
  if (v18[40])
  {
    uint64_t v6 = v16;
    int v16 = 0;
    int v9 = v6;
    int v10 = v17;
    v11[0] = 0;
    char v13 = 0;
    if (v18[24])
    {
      int v12 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v11, (uint64_t)v18);
      char v13 = 1;
    }
    char v14 = v18[32];
    __int16 v15 = *(_WORD *)(a2 + 49);
    std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTextureTagged,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::ImageCopyTextureTagged>((uint64_t)a3, (uint64_t *)&v9);
    if (v13)
    {
      if (v12 != -1) {
        ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v12])(&v19, v11);
      }
      int v12 = -1;
    }
    int v7 = (unsigned int *)v9;
    int v9 = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
  return std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v5);
}

{
  uint64_t result;
  void *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned char *v31;
  unsigned char *v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  void *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unsigned int *v51;
  unsigned char *v52;
  uint64_t *v53;
  WTF::StringImpl *v54[2];
  uint64_t v55;
  void v56[2];
  void v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;

  uint64_t result = (uint64_t)WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v60);
  if (!v65)
  {
    *a3 = 0;
    a3[56] = 0;
    return std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v6);
  }
  int v58 = 0;
  id v59 = 0;
  int v7 = *(unsigned int *)(a2 + 52);
  double v52 = a3;
  if (v7)
  {
    if (v7 >= 0x6666667) {
      goto LABEL_58;
    }
    char v8 = 40 * v7;
    uint64_t result = WTF::fastMalloc((WTF *)(40 * v7));
    LODWORD(v59) = (v8 & 0xFFFFFFF8) / 0x28;
    int v58 = result;
    int v9 = *(_DWORD *)(a2 + 52);
    if (v9)
    {
      int v10 = result;
      char v11 = 0;
      int v12 = *(uint64_t **)(a2 + 40);
      id v53 = &v12[5 * v9];
      while (1)
      {
        if (*((unsigned char *)v12 + 32))
        {
          uint64_t v67 = 0;
          char v13 = *((unsigned int *)v12 + 7);
          if (v13)
          {
            if (v13 >= 0xAAAAAAB)
            {
              __break(0xC471u);
              goto LABEL_57;
            }
            char v14 = 24 * v13;
            uint64_t result = WTF::fastMalloc((WTF *)(24 * v13));
            __int16 v15 = result;
            int v16 = (v14 & 0xFFFFFFF8) / 0x18;
            LODWORD(v67) = v16;
            long long v66 = result;
            int v17 = *((_DWORD *)v12 + 7);
            if (v17)
            {
              char v18 = 0;
              char v19 = v12[2];
              char v20 = v19 + 24 * v17;
              do
              {
                unint64_t v21 = *(WTF::StringImpl **)(v19 + 8);
                unint64_t v22 = *(_DWORD *)(v19 + 16);
                LOBYTE(v54[0]) = *(unsigned char *)v19;
                v54[1] = v21;
                LODWORD(v55) = v22;
                LOBYTE(v56[0]) = 1;
                if (v18 == v67)
                {
                  uint64_t result = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, v18 + 1, (unint64_t)v54);
                  char v18 = HIDWORD(v67);
                  __int16 v15 = v66;
                  char v23 = v66 + 24 * HIDWORD(v67);
                  uint64_t v24 = *(void *)(result + 16);
                  *(_OWORD *)char v23 = *(_OWORD *)result;
                  *(void *)(v23 + 16) = v24;
                }
                else
                {
                  int v25 = *(_OWORD *)v54;
                  char v26 = v15 + 24 * v18;
                  *(void *)(v26 + 16) = v55;
                  *(_OWORD *)char v26 = v25;
                }
                HIDWORD(v67) = ++v18;
                v19 += 24;
              }
              while (v19 != v20);
              int v16 = v67;
            }
            else
            {
              char v18 = 0;
            }
          }
          else
          {
            char v18 = 0;
            int v16 = 0;
            __int16 v15 = 0;
          }
          char v33 = *v12;
          uint64_t v34 = *((unsigned char *)v12 + 8);
          if (v11 == v59)
          {
            uint64_t v35 = v11 + ((unint64_t)v11 >> 2);
            if (v35 >= 0x10) {
              uint64_t v36 = v35 + 1;
            }
            else {
              uint64_t v36 = 16;
            }
            if (v36 <= (unint64_t)v11 + 1) {
              uint64_t v37 = v11 + 1;
            }
            else {
              uint64_t v37 = v36;
            }
            uint64_t result = (uint64_t)WTF::Vector<std::optional<WebCore::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)&v58, v37);
            int v30 = HIDWORD(v59);
            int v10 = v58;
            uint64_t v38 = v58 + 40 * HIDWORD(v59);
            *(void *)uint64_t v38 = v33;
            *(unsigned char *)(v38 + 8) = v34;
            *(void *)(v38 + 16) = v15;
            *(_DWORD *)(v38 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v16;
            *(_DWORD *)(v38 + 28) = v18;
            *(unsigned char *)(v38 + 32) = 1;
            goto LABEL_37;
          }
          unsigned __int8 v39 = v10 + 40 * v11;
          *(void *)unsigned __int8 v39 = v33;
          *(unsigned char *)(v39 + 8) = v34;
          *(void *)(v39 + 16) = v15;
          *(_DWORD *)(v39 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v16;
          *(_DWORD *)(v39 + 28) = v18;
          *(unsigned char *)(v39 + 32) = 1;
        }
        else
        {
          if (v11 == v59)
          {
            uint64_t v27 = v11 + ((unint64_t)v11 >> 2);
            if (v27 >= 0x10) {
              uint64_t v28 = v27 + 1;
            }
            else {
              uint64_t v28 = 16;
            }
            if (v28 <= (unint64_t)v11 + 1) {
              uint64_t v29 = v11 + 1;
            }
            else {
              uint64_t v29 = v28;
            }
            uint64_t result = (uint64_t)WTF::Vector<std::optional<WebCore::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)&v58, v29);
            int v30 = HIDWORD(v59);
            int v10 = v58;
            id v31 = (unsigned char *)(v58 + 40 * HIDWORD(v59));
            *id v31 = 0;
            v31[32] = 0;
            goto LABEL_37;
          }
          char v32 = (unsigned char *)(v10 + 40 * v11);
          *char v32 = 0;
          v32[32] = 0;
        }
        int v30 = HIDWORD(v59);
LABEL_37:
        char v11 = v30 + 1;
        HIDWORD(v59) = v30 + 1;
        v12 += 5;
        if (v12 == v53) {
          goto LABEL_40;
        }
      }
    }
  }
  char v11 = 0;
LABEL_40:
  if (v65)
  {
    uint64_t v40 = v60;
    id v60 = 0;
    LOBYTE(v54[1]) = 0;
    LOBYTE(v55) = 0;
    uint64_t v41 = v62;
    if (v62)
    {
      char v42 = v61;
      uint64_t v61 = 0;
      v54[1] = v42;
      LOBYTE(v55) = 1;
    }
    int v43 = v63;
    id v63 = 0;
    float v44 = v64;
    uint64_t v64 = 0;
    int v45 = v58;
    int v58 = 0;
    uint64_t v46 = v59;
    id v59 = 0;
    v54[0] = 0;
    *(void *)double v52 = v40;
    v52[8] = 0;
    v52[16] = 0;
    if (v41)
    {
      unint64_t v47 = v54[1];
      v54[1] = 0;
      *((void *)v52 + 1) = v47;
      v52[16] = 1;
    }
    v56[0] = 0;
    *((void *)v52 + 3) = v43;
    v56[1] = 0;
    *((void *)v52 + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v44;
    v57[0] = 0;
    *((void *)v52 + 5) = v45;
    v57[1] = 0;
    *((_DWORD *)v52 + 12) = v46;
    *((_DWORD *)v52 + 13) = v11;
    v52[56] = 1;
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v6);
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v48);
    if ((_BYTE)v55)
    {
      CFTypeRef v50 = v54[1];
      v54[1] = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2) {
          WTF::StringImpl::destroy(v50, v49);
        }
        else {
          *(_DWORD *)v50 -= 2;
        }
      }
    }
    uint64_t v51 = (unsigned int *)v54[0];
    v54[0] = 0;
    if (v51)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v51, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v49);
      }
    }
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v49);
    return std::__optional_destruct_base<WebCore::WebGPU::ProgrammableStage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v6);
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,WTF::RetainPtr<__CVBuffer *>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,WTF::RetainPtr<__CVBuffer *>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEENS7_6RefPtrINS9_10VideoFrameENS7_12RawPtrTraitsISH_EENS7_21DefaultRefDerefTraitsISH_EEEENS7_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRST_EEEDcOSU_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEENS7_6RefPtrINS9_10VideoFrameENS7_12RawPtrTraitsISH_EENS7_21DefaultRefDerefTraitsISH_EEEENS7_9RetainPtrIP10__CVBufferEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JSX_SW_EEEDcmSZ_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISJ_EENS9_21DefaultRefDerefTraitsISJ_EEEENS9_9RetainPtrIP10__CVBufferEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSH_SO_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISJ_EENS9_21DefaultRefDerefTraitsISJ_EEEENS9_9RetainPtrIP10__CVBufferEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSH_SO_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS9_33SupportsObjectIdentifierNullStateE1EEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISJ_EENS9_21DefaultRefDerefTraitsISJ_EEEENS9_9RetainPtrIP10__CVBufferEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJSH_SO_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__optional_storage_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(unsigned char *)(result + 24))
    {
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(result, a2);
    }
  }
  else if (*(unsigned char *)(result + 24))
  {
    uint64_t v3 = *(unsigned int *)(result + 16);
    if (v3 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v3])(&v4, result);
    }
    *(_DWORD *)(v2 + 16) = -1;
    *(unsigned char *)(v2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  }
  else
  {
    *(unsigned char *)__n128 result = 0;
    *(_DWORD *)(result + 16) = -1;
    __n128 result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(result, a2);
    *(unsigned char *)(v2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v6 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)uint64_t v4 = v6;
    LODWORD(v6) = a3[2];
    a3[2] = 0;
    *(_DWORD *)(v4 + 8) = v6;
    LODWORD(v6) = a3[3];
    a3[3] = 0;
    *(void *)(v4 + 12) = v6;
    return result;
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ImageCopyExternalImage,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ImageCopyExternalImage>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 16) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(unsigned char *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

uint64_t std::__optional_storage_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(unsigned char *)(result + 24))
    {
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(result, a2);
    }
  }
  else if (*(unsigned char *)(result + 24))
  {
    uint64_t v3 = *(unsigned int *)(result + 16);
    if (v3 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v4, result);
    }
    *(_DWORD *)(v2 + 16) = -1;
    *(unsigned char *)(v2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  }
  else
  {
    *(unsigned char *)__n128 result = 0;
    *(_DWORD *)(result + 16) = -1;
    __n128 result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(result, a2);
    *(unsigned char *)(v2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v6 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)uint64_t v4 = v6;
    LODWORD(v6) = a3[2];
    a3[2] = 0;
    *(_DWORD *)(v4 + 8) = v6;
    LODWORD(v6) = a3[3];
    a3[3] = 0;
    *(void *)(v4 + 12) = v6;
    return result;
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ImageCopyExternalImage,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::ImageCopyExternalImage>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 16) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(unsigned char *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v6 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)uint64_t v4 = v6;
    LODWORD(v6) = a3[2];
    a3[2] = 0;
    *(_DWORD *)(v4 + 8) = v6;
    LODWORD(v6) = a3[3];
    a3[3] = 0;
    *(void *)(v4 + 12) = v6;
    return result;
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(void *)a2 = v6;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  uint64_t v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v6 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)uint64_t v4 = v6;
    LODWORD(v6) = a3[2];
    a3[2] = 0;
    *(_DWORD *)(v4 + 8) = v6;
    LODWORD(v6) = a3[3];
    a3[3] = 0;
    *(void *)(v4 + 12) = v6;
    return result;
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(void *)a2 = v6;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  uint64_t v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ImageCopyTextureTagged,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ImageCopyTextureTagged>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  *(unsigned char *)(a1 + 40) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    *(_DWORD *)(a1 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 2));
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)((char *)a2 + 49);
  *(unsigned char *)(a1 + 56) = 1;
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTextureTagged,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::ImageCopyTextureTagged>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  *(unsigned char *)(a1 + 40) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    *(_DWORD *)(a1 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 2));
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)((char *)a2 + 49);
  *(unsigned char *)(a1 + 56) = 1;
  return a1;
}

void sub_198DA95B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22)
{
  if (a22 != -1) {
    ((void (*)(char *, uint64_t *))off_1EE9D4490[a22])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DA9E30(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DAA54C(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 104, a2);
  WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 88, v4);
  char v6 = *(WTF **)(v2 + 72);
  if (v6)
  {
    *(void *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 80) = 0;
    WTF::fastFree(v6, v5);
  }
  _Unwind_Resume(a1);
}

void sub_198DAB034(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,WTF *a50,int a51)
{
}

void sub_198DABA14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DABC08(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DABD04(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

void sub_198DABE04(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

Class initASVThumbnailView(void)
{
  if ((_MergedGlobals_8 & 1) == 0)
  {
    uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/AssetViewer.framework/AssetViewer", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x198DAC214);
    }
    qword_1E93CF810 = (uint64_t)v1;
    _MergedGlobals_8 = 1;
  }
  Class result = objc_getClass("ASVThumbnailView");
  qword_1E93CF808 = (uint64_t)result;
  if (!result) {
    goto LABEL_7;
  }
  getASVThumbnailViewClass = ASVThumbnailViewFunction;
  return result;
}

uint64_t ASVThumbnailViewFunction(void)
{
  return qword_1E93CF808;
}

WTF *WTF::VectorTypeOperations<WebKit::WKTouchEvent>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (uint64_t)result + 104;
    do
    {
      WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 16, v4);
      Class result = *(WTF **)(v3 - 32);
      if (result)
      {
        *(void *)(v3 - 32) = 0;
        *(_DWORD *)(v3 - 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        Class result = (WTF *)WTF::fastFree(result, a2);
      }
      uint64_t v5 = (WTF *)(v3 + 24);
      v3 += 128;
    }
    while (v5 != a2);
  }
  return result;
}

__n128 WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WKTouchEvent>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  unint64_t v4 = *(void *)a1 + ((unint64_t)a1[3] << 7);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)v3;
  char v5 = *(unsigned char *)(v3 + 64);
  long long v7 = *(_OWORD *)(v3 + 32);
  __n128 result = *(__n128 *)(v3 + 48);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v4 + 32) = v7;
  *(__n128 *)(v4 + 48) = result;
  *(unsigned char *)(v4 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v5;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  uint64_t v8 = *(void *)(v3 + 72);
  *(void *)(v3 + 72) = 0;
  *(void *)(v4 + 72) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v4 + 80) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 84);
  *(_DWORD *)(v3 + 8WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(_DWORD *)(v4 + 8WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v8;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  uint64_t v9 = *(void *)(v3 + 88);
  *(void *)(v3 + 88) = 0;
  *(void *)(v4 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 96);
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v4 + 96) = v9;
  LODWORD(v9) = *(_DWORD *)(v3 + 100);
  *(_DWORD *)(v3 + 100) = 0;
  *(_DWORD *)(v4 + 100) = v9;
  *(void *)(v4 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(v4 + 112) = 0;
  uint64_t v10 = *(void *)(v3 + 104);
  *(void *)(v3 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(v4 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 112);
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v4 + 112) = v10;
  LODWORD(v10) = *(_DWORD *)(v3 + 116);
  *(_DWORD *)(v3 + 116) = 0;
  *(_DWORD *)(v4 + 116) = v10;
  *(unsigned char *)(v4 + 120) = *(unsigned char *)(v3 + 120);
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + ((unint64_t)a1[3] << 7) <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 25)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      unint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      __n128 result = (unsigned int *)WTF::fastMalloc((WTF *)(a2 << 7));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = 0;
        uint64_t v9 = v5 << 7;
        do
        {
          unint64_t v10 = &v7[v8 / 4];
          char v11 = (char *)v4 + v8;
          *(_OWORD *)unint64_t v10 = *(_OWORD *)((char *)v4 + v8);
          long long v12 = *(_OWORD *)((char *)v4 + v8 + 16);
          long long v13 = *(_OWORD *)((char *)v4 + v8 + 32);
          long long v14 = *(_OWORD *)((char *)v4 + v8 + 48);
          *((unsigned char *)v10 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *((unsigned char *)v4 + v8 + 64);
          *((_OWORD *)v10 + 2) = v13;
          *((_OWORD *)v10 + 3) = v14;
          *((_OWORD *)v10 + 1) = v12;
          *((void *)v10 + 9) = 0;
          *((void *)v10 + 10) = 0;
          uint64_t v15 = *(void *)((char *)v4 + v8 + 72);
          *((void *)v11 + 9) = 0;
          *((void *)v10 + 9) = v15;
          LODWORD(v15) = *(_DWORD *)((char *)v4 + v8 + 80);
          *((_DWORD *)v11 + 20) = 0;
          v10[20] = v15;
          LODWORD(v15) = *(_DWORD *)((char *)v4 + v8 + 84);
          *((_DWORD *)v11 + 21) = 0;
          *((void *)v10 + 11) = 0;
          *((void *)v10 + 12) = 0;
          uint64_t v16 = *(void *)((char *)v4 + v8 + 88);
          v10[21] = v15;
          *(void *)((char *)v4 + v8 + 88) = 0;
          *((void *)v10 + 11) = v16;
          LODWORD(v15) = *(_DWORD *)((char *)v4 + v8 + 96);
          *((_DWORD *)v11 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
          v10[24] = v15;
          LODWORD(v15) = *(_DWORD *)((char *)v4 + v8 + 100);
          *((_DWORD *)v11 + 25) = 0;
          v10[25] = v15;
          *((void *)v10 + 13) = 0;
          *((void *)v10 + 1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
          int v17 = (uint64_t *)((char *)v4 + v8 + 104);
          uint64_t v18 = *v17;
          uint64_t *v17 = 0;
          *((void *)v10 + 13) = v18;
          LODWORD(v18) = *(_DWORD *)((char *)v4 + v8 + 112);
          *((_DWORD *)v11 + 28) = 0;
          v10[28] = v18;
          LODWORD(v18) = *(_DWORD *)((char *)v4 + v8 + 116);
          *((_DWORD *)v11 + 29) = 0;
          v10[29] = v18;
          *((unsigned char *)v10 + 120) = *((unsigned char *)v4 + v8 + 120);
          WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v6);
          WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4 + v8 + 88, v19);
          __n128 result = *(unsigned int **)((char *)v4 + v8 + 72);
          if (result)
          {
            *((void *)v11 + 9) = 0;
            *((_DWORD *)v11 + 20) = 0;
            __n128 result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v8 += 128;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(WTF *result@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  uint64_t v6 = *a2;
  if (*a2) {
    *(_DWORD *)v6 += 2;
  }
  int v17 = 0;
  uint64_t v18 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v7 = *((unsigned int *)a2 + 5);
    if (!v7) {
      goto LABEL_20;
    }
    if (v7 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      __n128 result = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
      LODWORD(v18) = v7;
      int v17 = result;
      if (*((unsigned char *)a2 + 24))
      {
        uint64_t v8 = *((unsigned int *)a2 + 5);
        if (v8)
        {
          uint64_t v9 = a2[1];
          uint64_t v10 = 8 * v8;
          do
          {
            __n128 result = (WTF *)(*(uint64_t (**)(WTF *, void))(*(void *)v4 + 32))(v4, *(void *)v9);
            uint64_t v16 = result;
            if (!result)
            {
              *(unsigned char *)a3 = 0;
              *(unsigned char *)(a3 + 32) = 0;
              goto LABEL_25;
            }
            if (HIDWORD(v18) == v18)
            {
              __n128 result = (WTF *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, HIDWORD(v18) + 1, (unint64_t)&v16);
              *((void *)v17 + HIDWORD(v18)) = *(void *)result;
            }
            else
            {
              *((void *)v17 + HIDWORD(v18)) = result;
            }
            uint64_t v11 = ++HIDWORD(v18);
            uint64_t v9 = (WTF::StringImpl *)((char *)v9 + 8);
            v10 -= 8;
          }
          while (v10);
          if (!v11) {
            goto LABEL_21;
          }
          if (!(v11 >> 29))
          {
            uint64_t v12 = WTF::fastMalloc((WTF *)(8 * v11));
            if (HIDWORD(v18))
            {
              uint64_t v13 = 0;
              long long v14 = v17;
              uint64_t v15 = 8 * HIDWORD(v18);
              do
              {
                *(void *)(v12 + v13) = *(void *)((char *)v14 + v13);
                v13 += 8;
              }
              while (v15 != v13);
            }
LABEL_22:
            *(void *)a3 = v6;
            *(void *)(a3 + 8) = v12;
            *(_DWORD *)(a3 + 16) = v11;
            *(_DWORD *)(a3 + 20) = v11;
            *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
            goto LABEL_24;
          }
LABEL_35:
          __break(0xC471u);
          return result;
        }
LABEL_20:
        LODWORD(v11) = 0;
LABEL_21:
        uint64_t v12 = 0;
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_35;
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
LABEL_24:
  *(unsigned char *)(a3 + 32) = 1;
  uint64_t v6 = 0;
LABEL_25:
  __n128 result = v17;
  if (v17)
  {
    int v17 = 0;
    LODWORD(v18) = 0;
    __n128 result = (WTF *)WTF::fastFree(result, a2);
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      return (WTF *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

void *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(void *this@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = this;
  uint64_t v6 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v6 += 2;
  }
  LOBYTE(__dst) = 0;
  char v36 = 0;
  __src = 0;
  uint64_t v33 = 0;
  if (a2[24])
  {
    uint64_t v7 = *((unsigned int *)a2 + 5);
    if (v7)
    {
      if (v7 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        this = (void *)WTF::fastMalloc((WTF *)(8 * v7));
        LODWORD(v33) = v7;
        __src = this;
        if (a2[24])
        {
          uint64_t v8 = *((unsigned int *)a2 + 5);
          if (v8)
          {
            uint64_t v9 = (void *)*((void *)a2 + 1);
            uint64_t v10 = 8 * v8;
            while (1)
            {
              (*(void (**)(WTF **__return_ptr, void *, void))(*(void *)v4 + 32))(&v31, v4, *v9);
              if (v31 && (uint64_t v11 = *((void *)v31 + 1)) != 0)
              {
                int v12 = HIDWORD(v33);
                if (HIDWORD(v33) == v33)
                {
                  unint64_t v13 = HIDWORD(v33) + ((unint64_t)HIDWORD(v33) >> 2);
                  if (v13 >= 0x10) {
                    unint64_t v14 = v13 + 1;
                  }
                  else {
                    unint64_t v14 = 16;
                  }
                  if (v14 <= (unint64_t)HIDWORD(v33) + 1) {
                    unint64_t v15 = HIDWORD(v33) + 1;
                  }
                  else {
                    unint64_t v15 = v14;
                  }
                  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(&__src, v15);
                  char v16 = 0;
                  int v17 = HIDWORD(v33) + 1;
                  *((void *)__src + HIDWORD(v33)) = v11;
                  HIDWORD(v33) = v17;
                }
                else
                {
                  char v16 = 0;
                  *((void *)__src + HIDWORD(v33)) = v11;
                  HIDWORD(v33) = v12 + 1;
                }
              }
              else
              {
                *(unsigned char *)a3 = 0;
                *(unsigned char *)(a3 + 32) = 0;
                char v16 = 1;
              }
              this = v31;
              id v31 = 0;
              if (this && atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, (unsigned int *)this);
                this = (void *)WTF::fastFree((WTF *)this, a2);
              }
              if (v16) {
                goto LABEL_53;
              }
              ++v9;
              v10 -= 8;
              if (!v10)
              {
                if (!v36) {
                  goto LABEL_35;
                }
                unint64_t v18 = HIDWORD(v33);
                unsigned int v19 = HIDWORD(v33);
                if (HIDWORD(v35) <= HIDWORD(v33))
                {
                  if (HIDWORD(v33) <= v35)
                  {
                    unsigned int v19 = HIDWORD(v35);
                  }
                  else
                  {
                    if (v35)
                    {
                      if (HIDWORD(v35)) {
                        HIDWORD(v35) = 0;
                      }
                      char v20 = (WTF *)__dst;
                      if (__dst)
                      {
                        __dst = 0;
                        LODWORD(v35) = 0;
                        WTF::fastFree(v20, a2);
                      }
                    }
                    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(&__dst, v18);
                    unsigned int v19 = HIDWORD(v35);
                  }
                }
                char v26 = (char *)__src;
                if (v19) {
                  memmove(__dst, __src, 8 * v19);
                }
                if (v19 != v18)
                {
                  uint64_t v27 = (char *)__dst + 8 * v19;
                  uint64_t v28 = &v26[8 * v19];
                  uint64_t v29 = 8 * v18 - 8 * v19;
                  do
                  {
                    uint64_t v30 = *(void *)v28;
                    v28 += 8;
                    *v27++ = v30;
                    v29 -= 8;
                  }
                  while (v29);
                }
                if (v36)
                {
                  uint64_t v23 = (uint64_t)__dst;
                  int v21 = v35;
                  goto LABEL_42;
                }
                goto LABEL_51;
              }
            }
          }
          goto LABEL_35;
        }
      }
      __break(1u);
      goto LABEL_65;
    }
LABEL_35:
    int v21 = HIDWORD(v33);
    if (!HIDWORD(v33))
    {
      uint64_t v23 = 0;
      goto LABEL_41;
    }
    if (!(HIDWORD(v33) >> 29))
    {
      unint64_t v22 = (WTF *)(8 * HIDWORD(v33));
      uint64_t v23 = WTF::fastMalloc(v22);
      uint64_t v24 = 0;
      int v25 = (char *)__src;
      do
      {
        *(void *)((char *)v24 + v23) = *(void *)((char *)v24 + (void)v25);
        uint64_t v24 = (WTF *)((char *)v24 + 8);
      }
      while (v22 != v24);
LABEL_41:
      char v36 = 1;
      LODWORD(v18) = v21;
LABEL_42:
      __dst = 0;
      uint64_t v35 = 0;
      *(void *)a3 = v6;
      *(void *)(a3 + 8) = v23;
      *(_DWORD *)(a3 + 16) = v21;
      *(_DWORD *)(a3 + 20) = v18;
      *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
      goto LABEL_52;
    }
LABEL_65:
    __break(0xC471u);
    return this;
  }
LABEL_51:
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
LABEL_52:
  uint64_t v6 = 0;
  *(unsigned char *)(a3 + 32) = 1;
LABEL_53:
  this = __src;
  if (__src) {
    this = (void *)WTF::fastFree((WTF *)__src, a2);
  }
  if (v36)
  {
    this = __dst;
    if (__dst) {
      this = (void *)WTF::fastFree((WTF *)__dst, a2);
    }
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      return (void *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

void sub_198DAD420(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t clearGeolocationCache(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  return objc_msgSend(a2, "clearCache", a3, a4, a5);
}

void sub_198DAD80C(_Unwind_Exception *a1, void *a2)
{
  std::default_delete<PermissionRequest>::operator()[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void sub_198DADDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(v16);
  char v20 = *(const void **)(v18 - 72);
  *(void *)(v18 - 72) = 0;
  if (v20) {
    CFRelease(v20);
  }
  _Unwind_Resume(a1);
}

void sub_198DADEB8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c72_ZTSKZZ54__WKWebGeolocationPolicyDecider__executeNextChallenge_EUb_E3__2(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c72_ZTSKZZ54__WKWebGeolocationPolicyDecider__executeNextChallenge_EUb_E3__2(uint64_t a1)
{
}

void sub_198DADF34(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c72_ZTSKZZ54__WKWebGeolocationPolicyDecider__executeNextChallenge_EUb_E3__3(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c72_ZTSKZZ54__WKWebGeolocationPolicyDecider__executeNextChallenge_EUb_E3__3(uint64_t a1)
{
}

void sub_198DAE364(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(v1);
  }
  CFRelease(v2);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_48c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_48c43_ZTSN3WTF9RetainPtrI19NSMutableDictionaryEE(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t WebKit::WebDataListSuggestionsDropdownIOS::show(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    return [v4 updateWithInformation:a2];
  }
  else
  {
    uint64_t v6 = *a2;
    uint64_t v7 = (PAL *)[*(id *)(a1 + 32) _shouldUseContextMenusForFormControls];
    if (v7)
    {
      uint64_t v8 = WKDataListSuggestionsDropdown;
    }
    else if (PAL::currentUserInterfaceIdiomIsSmallScreen(v7))
    {
      uint64_t v8 = WKDataListSuggestionsPicker;
    }
    else
    {
      uint64_t v8 = WKDataListSuggestionsPopover;
    }
    uint64_t v9 = (void *)[[v8 alloc] initWithInformation:a2 inView:*(void *)(a1 + 32)];
    uint64_t v10 = *(const void **)(a1 + 40);
    *(void *)(a1 + 40) = v9;
    if (v10)
    {
      CFRelease(v10);
      uint64_t v9 = *(void **)(a1 + 40);
    }
    return [v9 showSuggestionsDropdown:a1 activationType:v6];
  }
}

_DWORD *WebKit::WebDataListSuggestionsDropdownIOS::close(id *this)
{
  [this[5] invalidate];
  id v3 = this[5];
  this[5] = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WebKit::WebDataListSuggestionsDropdown::close(this, v2);
}

void sub_198DAF028(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DAF380(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DAF4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
}

void sub_198DAF758(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DAFB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_198DAFC6C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c62_ZTSKZ49__WKDataListSuggestionsDropdown__showSuggestions_E3__5(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c62_ZTSKZ49__WKDataListSuggestionsDropdown__showSuggestions_E3__5(uint64_t a1)
{
}

void sub_198DAFECC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DAFF88(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c76_ZTSKZ63__WKDataListSuggestionsDropdown__updateSuggestionsMenuElements_E3__6(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  *(void *)(v3 + 8) = *(void *)(a2 + 40);
}

void __destroy_helper_block_e8_32c76_ZTSKZ63__WKDataListSuggestionsDropdown__updateSuggestionsMenuElements_E3__6(uint64_t a1)
{
}

void sub_198DB01DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_198DB0260(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c100_ZTSKZ87__WKDataListSuggestionsDropdown_contextMenuInteraction_configurationForMenuAtLocation__E3__7(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c100_ZTSKZ87__WKDataListSuggestionsDropdown_contextMenuInteraction_configurationForMenuAtLocation__E3__7(uint64_t a1)
{
}

void sub_198DB0330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198DB03A4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c110_ZTSKZ97__WKDataListSuggestionsDropdown_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c110_ZTSKZ97__WKDataListSuggestionsDropdown_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__8(uint64_t a1)
{
}

void sub_198DB0474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198DB04E8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c102_ZTSKZ89__WKDataListSuggestionsDropdown_contextMenuInteraction_willEndForConfiguration_animator__E3__9(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c102_ZTSKZ89__WKDataListSuggestionsDropdown_contextMenuInteraction_willEndForConfiguration_animator__E3__9(uint64_t a1)
{
}

uint64_t WebKit::WebPageProxy::getIsSpeaking(uint64_t a1, uint64_t *a2)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
}

void WebKit::WebPageProxy::requestFocusedElementInformation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    v3[0] = 0;
    v3[416] = 0;
    WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>::operator()(a2);
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 256);
    v3[0] = 0;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(v2, (uint64_t)v3, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void sub_198DB064C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198DB06F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebPageProxy::updateStringForFind(uint64_t *this, WTF::StringImpl **a2)
{
  if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800))
  {
    {
      WebKit::globalStringForFind(void)::string = 0;
    }
    return WTF::String::operator=(&WebKit::globalStringForFind(void)::string, a2);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::scrollingNodeScrollViewWillStartPanGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 1032))(v6, a2, a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 1600);

  return v7(v6);
}

void sub_198DB0848(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::scrollingNodeScrollWillStartScroll(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1040))(v4, v5, v6);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v7(v4);
}

void sub_198DB096C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::scrollingNodeScrollDidEndScroll(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1048))(v4, v5, v6);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v7(v4);
}

void sub_198DB0A90(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::dynamicViewportSizeUpdate(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 801))
  {
    uint64_t v2 = (WebKit::WebPageProxy *)result;
    if (*(unsigned char *)(result + 800))
    {
      uint64_t v4 = *(_DWORD **)(result + 888);
      *((void *)v2 + 111) = 0;
      if (v4) {
        WTF::RefCounted<WebCore::ValidationBubble>::deref(v4);
      }
      *(void *)(*((void *)v2 + 4) + 2132) = *(void *)a2;
      *(void *)(*((void *)v2 + 4) + 232) = *(void *)(a2 + 16);
      *(void *)(*((void *)v2 + 4) + 84WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(void *)(a2 + 8);
      *(void *)(*((void *)v2 + 4) + 816) = *(void *)(a2 + 16);
      uint64_t v5 = *((void *)v2 + 32);
      uint64_t v6 = a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DynamicViewportSizeUpdate>(v5, &v6, *(void *)(*((void *)v2 + 4) + 1928), 0);
      return WebKit::WebPageProxy::setDeviceOrientation(v2, *(_DWORD *)(a2 + 96));
    }
  }
  return result;
}

uint64_t IPC::MessageSender::send<Messages::WebPage::SetViewportConfigurationViewLayoutSize>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2483;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v12 = v5;
  IPC::ArgumentCoder<std::tuple<WebCore::FloatSize const&,double,double>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatSize const&,double,double>,0ul,1ul,2ul>(v5, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v12, 0);
  uint64_t v8 = v12;
  int v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198DB0C6C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::setOverrideViewportArguments(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 32);
  int v5 = *(unsigned __int8 *)(v4 + 2128);
  if (*(unsigned char *)(a2 + 40)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if ((*(unsigned char *)(a2 + 40) != 0) == (v5 != 0)) {
      return result;
    }
  }
  else
  {
    CFTypeRef result = WebCore::ViewportArguments::operator==(a2, v4 + 2088);
    if (result) {
      return result;
    }
    uint64_t v4 = *(void *)(v3 + 32);
  }
  uint64_t v7 = (_OWORD *)(v4 + 2088);
  long long v8 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)(a2 + 25);
  _OWORD *v7 = v8;
  v7[1] = v9;
  if (!*(unsigned char *)(v3 + 801))
  {
    if (*(unsigned char *)(v3 + 800))
    {
      uint64_t v10 = *(void *)(v3 + 256);
      uint64_t v11 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetOverrideViewportArguments>(v10, &v11, *(void *)(*(void *)(v3 + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::selectWithGesture(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v12 = a2;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    long long v8 = 0;
    return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a6, (uint64_t)&v8, 0, 0, 0);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 256);
    long long v8 = &v12;
    char v9 = a3;
    char v10 = a4;
    char v11 = a5;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(v7, (uint64_t)&v8, a6, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v5 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, a2, a3, a4, a5);
  BOOL v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void sub_198DB0E50(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateSelectionWithTouches(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v10 = a2;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v7 = 0;
    return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a5, (uint64_t)&v7, 0, 0);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 256);
    uint64_t v7 = &v10;
    char v8 = a3;
    char v9 = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(v6, (uint64_t)&v7, a5, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v4 + 16))(v4, a2, a3, a4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void sub_198DB0F88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::WebPageProxy::requestAutocorrectionData(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    char v8 = 0;
    uint64_t v9 = 0;
    CFTypeRef cf = 0;
    WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a3, (uint64_t)&v8);
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef result = v8;
    if (v8)
    {
      char v8 = 0;
      LODWORD(v9) = 0;
      return (WTF *)WTF::fastFree(result, v3);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 256);
    uint64_t v7 = a2;
    return (WTF *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(v6, &v7, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
  return result;
}

void sub_198DB1050(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v9 = *(WTF **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v10 = v3;
  CFTypeRef v4 = *(const void **)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  CFTypeRef cf = v4;
  uint64_t v12 = v2;
  WTF::Function<void ()(WebKit::WebAutocorrectionData)>::operator()(&v12, (uint64_t)&v9);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = v9;
  if (v9)
  {
    uint64_t v9 = 0;
    LODWORD(v10) = 0;
    WTF::fastFree(v7, v5);
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198DB112C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, CFTypeRef cf, uint64_t a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebPageProxy::applyAutocorrection(WebKit::WebPageProxy *this, const WTF::String *a2, const WTF::String *a3, char a4)
{
  uint64_t v4 = *((void *)this + 32);
  v11[0] = a2;
  v11[1] = a3;
  char v12 = a4;
  uint64_t v5 = *(void *)(*((void *)this + 4) + 1928);
  WTF::ApproximateTime::now(this);
  WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::SyncApplyAutocorrection>(v4, (uint64_t)v11, v5, 0, (uint64_t)v13, v6 + 1.0);
  int v7 = v14;
  int v8 = v13[8];
  if (v14 != -1) {
    ((void (*)(void *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage23SyncApplyAutocorrectionEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v14])(v11, v13);
  }
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  return !v9;
}

IPC::Encoder *WebKit::WebPageProxy::selectTextWithGranularityAtPoint(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t *a5)
{
  uint64_t v22 = a2;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return (IPC::Encoder *)WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 256);
    unsigned int v19 = &v22;
    char v20 = a3;
    char v21 = a4;
    uint64_t v8 = *a5;
    *a5 = 0;
    uint64_t v9 = *(void *)(a1 + 256);
    uint64_t v10 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v10, v9 + 200, "WebPageProxy::selectTextWithGranularityAtPoint", 47, 0, 0);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
    char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v12 = 2399;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    int v25 = v12;
    IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,0ul,1ul,2ul>(v12, (uint64_t)&v19);
    unint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unint64_t v13 = &unk_1EE9D47C0;
    v13[1] = v8;
    v13[2] = v10;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v23[0] = v13;
    v23[1] = v14;
    char v24 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v25, 0, (uint64_t)v23, 1);
    if (v24)
    {
      uint64_t v16 = v23[0];
      v23[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t result = v25;
    int v25 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

void sub_198DB13D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a15 && a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v25 = a2;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return WTF::CompletionHandler<void ()(void)>::operator()(a6);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 256);
    uint64_t v12 = *a6;
    *a6 = 0;
    uint64_t v13 = *(void *)(a1 + 256);
    uint64_t v14 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v14, v13 + 200, "WebPageProxy::selectPositionAtBoundaryWithDirection", 52, 0, 0);
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 2397;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    uint64_t v28 = v16;
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v16, (int *)&v25);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v16, a3);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v16, a4);
    int v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
    if (v18)
    {
      unsigned char *v17 = a5;
      unsigned int v19 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unsigned int v19 = &unk_1EE9D47E8;
      v19[1] = v12;
      v19[2] = v14;
      uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v26[0] = v19;
      v26[1] = v20;
      char v27 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v28, 0, (uint64_t)v26, 1);
      if (v27)
      {
        uint64_t v22 = v26[0];
        v26[0] = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
      }
      uint64_t result = (uint64_t)v28;
      uint64_t v28 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v21);
        return WTF::fastFree(v23, v24);
      }
    }
    else
    {
      uint64_t result = 831;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_198DB170C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return (IPC::Encoder *)WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 256);
    uint64_t v9 = *a4;
    *a4 = 0;
    uint64_t v10 = *(void *)(a1 + 256);
    uint64_t v11 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v11, v10 + 200, "WebPageProxy::moveSelectionAtBoundaryWithDirection", 51, 0, 0);
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 2322;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    char v21 = v13;
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v13, a2);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v13, a3);
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v14 = &unk_1EE9D4810;
    v14[1] = v9;
    v14[2] = v11;
    v19[0] = v14;
    v19[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v20 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v21, 0, (uint64_t)v19, 1);
    if (v20)
    {
      uint64_t v16 = v19[0];
      v19[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t result = v21;
    char v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

void sub_198DB19FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::selectPositionAtPoint(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v21 = a2;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 256);
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v9 = *(void *)(a1 + 256);
    uint64_t v10 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v10, v9 + 200, "WebPageProxy::selectPositionAtPoint", 36, 0, 0);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 2398;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    char v24 = v12;
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, (int *)&v21);
    uint64_t v13 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
    if (v14)
    {
      *uint64_t v13 = a3;
      uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v15 = &unk_1EE9D4838;
      v15[1] = v8;
      v15[2] = v10;
      uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v22[0] = v15;
      v22[1] = v16;
      char v23 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v24, 0, (uint64_t)v22, 1);
      if (v23)
      {
        uint64_t v18 = v22[0];
        v22[0] = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
      }
      uint64_t result = (uint64_t)v24;
      char v24 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v17);
        return WTF::fastFree(v19, v20);
      }
    }
    else
    {
      uint64_t result = 831;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_198DB1D0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::requestRVItemInCurrentSelectedRange(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    *(_OWORD *)uint64_t v4 = 0u;
    cf[0] = 0;
    WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>::operator()(a2);
    cf[1] = 0;
    uint64_t result = 0;
    v4[0] = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 256);
    LOBYTE(v4[0]) = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(v3, (uint64_t)v4, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
  return result;
}

void sub_198DB1EDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198DB1F9C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    *(_OWORD *)uint64_t v10 = 0u;
    cf[0] = 0;
    WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()(a3);
    cf[1] = 0;
    uint64_t result = 0;
    v10[0] = 0;
  }
  else
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    uint64_t v7 = *(atomic_uint **)(a1 + 24);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v9 = &unk_1EE9D4900;
    *((void *)v9 + 1) = v7;
    *((void *)v9 + 2) = a2;
    *((void *)v9 + 3) = v8;
    v10[0] = v9;
    WebKit::WebPageProxy::dispatchAfterCurrentContextMenuEvent(a1, (uint64_t *)v10);
    uint64_t result = v10[0];
    v10[0] = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_198DB20FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (v12)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198DB2210(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::handleAutocorrectionContext(WebKit::WebPageProxy *this, const WebAutocorrectionContext *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, const WebAutocorrectionContext *))(*(void *)v4 + 1120))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB2318(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPageProxy::getSelectionContext(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>::operator()(a2);
    uint64_t v15 = 0;
    uint64_t result = 0;
    v13[0] = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 256);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 2276;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v15 = v5;
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v7 = &unk_1EE9D4950;
    *((void *)v7 + 1) = v6;
    v13[0] = v7;
    v13[1] = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v14 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v3, &v15, 0, (uint64_t)v13, 1);
    if (v14)
    {
      uint64_t v9 = v13[0];
      v13[0] = 0;
      if (v9) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v9 + 8))(v9);
      }
    }
    uint64_t result = v15;
    uint64_t v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (WTF::StringImpl *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void sub_198DB2510(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, char a13, WTF::StringImpl *a14)
{
  if (a13 && a11) {
    (*(void (**)(WTF::StringImpl *))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198DB26B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::selectWithTwoTouches(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    v8[0] = 0;
    return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(a6, (uint64_t)v8, 0, 0, 0);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 256);
    v8[0] = &v12;
    v8[1] = &v11;
    char v9 = a4;
    char v10 = a5;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(v7, (uint64_t)v8, a6, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::didReceivePositionInformation(WebKit::WebPageProxy *this, const InteractionInformationAtPosition *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, const InteractionInformationAtPosition *))(*(void *)v4 + 968))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB2844(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::isValidPerformActionOnElementAuthorizationToken(WebKit::WebPageProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = (uint64_t)*a2;
  if (*a2)
  {
    uint64_t v5 = *((void *)this + 139);
    if (v5)
    {
      int v7 = *(_DWORD *)(v5 - 8);
      unsigned int v8 = *(_DWORD *)(result + 16);
      if (v8 >= 0x100) {
        unsigned int v9 = v8 >> 8;
      }
      else {
        unsigned int v9 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      }
      for (i = 0; ; unsigned int v9 = i + v11)
      {
        int v11 = v9 & v7;
        uint64_t result = *(void *)(v5 + 8 * (v9 & v7));
        if (result != -1)
        {
          if (!result) {
            return result;
          }
          if (WTF::equal((WTF *)result, *a2, a3)) {
            break;
          }
        }
        ++i;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageProxy::performActionOnElement(WebKit::WebPageProxy *this, int a2)
{
  WTF::createVersion4UUIDString((uint64_t *)&v20, this);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 139, &v20, v4, (uint64_t)v21);
  uint64_t v5 = *((void *)this + 32);
  int v18 = a2;
  unsigned int v19 = &v20;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
  uint64_t v6 = (atomic_uint *)*((void *)this + 3);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  int v7 = v20;
  if (v20) {
    *(_DWORD *)v20 += 2;
  }
  uint64_t v8 = *(void *)(*((void *)this + 4) + 1928);
  unsigned int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v9 = 2331;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  char v23 = v9;
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v9, &v18);
  char v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9D49A0;
  v10[1] = v6;
  v10[2] = v7;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v10;
  v21[1] = v11;
  char v22 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v23, 0, (uint64_t)v21, 1);
  if (v22)
  {
    uint64_t v13 = v21[0];
    v21[0] = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  char v14 = v23;
  char v23 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v16, v17);
  }
  uint64_t result = v20;
  char v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198DB2AD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a15 && a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v17, v18);
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::saveImageToLibrary(WebKit::WebPageProxy *a1, int a2, const WTF::StringImpl **a3)
{
  buf[3] = *(WebCore::SharedMemory **)MEMORY[0x1E4F143B8];
  if (WebKit::WebPageProxy::isValidPerformActionOnElementAuthorizationToken(a1, a3, (const WTF::StringImpl *)a3))
  {
    WebCore::SharedMemory::map();
    if (buf[0])
    {
      WebCore::SharedMemory::createSharedBuffer(buf[0]);
      uint64_t v4 = *((void *)a1 + 5);
      if (v4) {
        uint64_t v5 = *(void *)(v4 + 8);
      }
      else {
        uint64_t v5 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
      (*(void (**)(uint64_t, unsigned int **))(*(void *)v5 + 976))(v5, &v11);
      (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
      int v7 = v11;
      uint64_t v11 = 0;
      if (v7) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
      }
      uint64_t v8 = (unsigned int *)buf[0];
      buf[0] = 0;
      if (v8) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
      }
    }
  }
  else
  {
    unsigned int v9 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136446210;
      *(WebCore::SharedMemory **)((char *)buf + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = (WebCore::SharedMemory *)"void WebKit::WebPageProxy::saveImageToLibr"
                                                                              "ary(SharedMemory::Handle &&, const String &)";
      _os_log_fault_impl(&dword_1985F2000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ios/WebPageProxyIOS.mm 581: Invalid message dispatched %{public}s", (uint8_t *)buf, 0xCu);
    }
    uint64_t v10 = *(void *)(*((void *)a1 + 32) + 144);
    if (v10) {
      *(unsigned char *)(v10 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

void sub_198DB2E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, unsigned int *a11)
{
  uint64_t v12 = v11;
  (*(void (**)(uint64_t))(*(void *)v12 + 1600))(v12);
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v14);
  }
  if (a11) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(a11);
  }
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::applicationDidEnterBackground(WebKit::WebPageProxy *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 1105) = 1;
  int v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42738], "sharedApplication"), "isSuspendedUnderLock");
  uint64_t v3 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = *(void *)(v5 + 760);
    uint64_t v7 = *(void *)(v5 + 1928);
    uint64_t v8 = *(void *)(*((void *)this + 32) + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = this;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = v7;
    __int16 v25 = 1024;
    int v26 = v8;
    __int16 v27 = 1024;
    int v28 = v2;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::applicationDidEnterBackground: isSuspendedUnderLock? %d", buf, 0x2Cu);
  }
  if (v2)
  {
    uint64_t v9 = WebKit::NavigationState::fromWebPage(this, v4);
    if (v9) {
      WebKit::NavigationState::releaseNetworkActivity(v9, 1);
    }
  }
  uint64_t v10 = *((void *)this + 32);
  char v18 = v2;
  uint64_t v11 = *(void *)(*((void *)this + 4) + 1928);
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2141;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  unsigned int v19 = v12;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v12, &v18);
  buf[0] = 0;
  BYTE2(v22) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v19, 0, (uint64_t)buf, 1);
  if (BYTE2(v22))
  {
    uint64_t v14 = *(void *)buf;
    *(void *)buf = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  uint64_t result = v19;
  unsigned int v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

void sub_198DB305C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::applicationDidFinishSnapshottingAfterEnteringBackground(WebKit::WebPageProxy *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 192))(v2);
    (*(void (**)(void))(**((void **)this + 29) + 168))(*((void *)this + 29));
  }
  uint64_t v3 = *((void *)this + 32);
  char v5 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationDidFinishSnapshottingAfterEnteringBackground>(v3, (uint64_t)&v5, *(void *)(*((void *)this + 4) + 1928), 0);
}

uint64_t WebKit::WebPageProxy::applicationWillEnterForeground(WebKit::WebPageProxy *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 1105) = 0;
  int v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42738], "sharedApplication"), "isSuspendedUnderLock");
  uint64_t v3 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *(void *)(v4 + 760);
    uint64_t v6 = *(void *)(v4 + 1928);
    uint64_t v7 = *(void *)(*((void *)this + 32) + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = this;
    __int16 v23 = 2048;
    uint64_t v24 = v5;
    __int16 v25 = 2048;
    uint64_t v26 = v6;
    __int16 v27 = 1024;
    int v28 = v7;
    __int16 v29 = 1024;
    int v30 = v2;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::applicationWillEnterForeground: isSuspendedUnderLock? %d", buf, 0x2Cu);
  }
  uint64_t v8 = *((void *)this + 32);
  char v20 = v2;
  uint64_t v9 = *(void *)(*((void *)this + 4) + 1928);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2144;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  __int16 v21 = v10;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, &v20);
  buf[0] = 0;
  BYTE2(v2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v21, 0, (uint64_t)buf, 1);
  if (BYTE2(v24))
  {
    uint64_t v12 = *(void *)buf;
    *(void *)buf = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t v13 = v21;
  __int16 v21 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v18, v19);
  }
  uint64_t v14 = *(void *)(*(void *)(*((void *)this + 32) + 512) + 8);
  if (v14) {
    uint64_t v15 = (WebKit::WebProcessPool *)(v14 - 16);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = WebKit::WebProcessPool::cachedHardwareKeyboardState(v15);
  return WebKit::WebPageProxy::hardwareKeyboardAvailabilityChanged(this, v16 & 0xFFFFFF);
}

void sub_198DB3354(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::hardwareKeyboardAvailabilityChanged(WebKit::WebPageProxy *a1, int a2)
{
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  uint64_t v3 = *((void *)a1 + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t))(*(void *)v4 + 1064))(v4);
  (*(void (**)(uint64_t))(*(void *)v4 + 1600))(v4);
  WebKit::WebPageProxy::updateCurrentModifierState(a1);
  uint64_t v5 = *((void *)a1 + 32);
  uint64_t v7 = (char *)&v8;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HardwareKeyboardAvailabilityChanged>(v5, &v7, *(void *)(*((void *)a1 + 4) + 1928), 0);
}

void sub_198DB34BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::applicationDidEnterBackgroundForMedia(WebKit::WebPageProxy *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42738], "sharedApplication"), "isSuspendedUnderLock");
  uint64_t v3 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *(void *)(v4 + 760);
    uint64_t v6 = *(void *)(v4 + 1928);
    uint64_t v7 = *(void *)(*((void *)this + 32) + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = this;
    __int16 v19 = 2048;
    uint64_t v20 = v5;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    __int16 v23 = 1024;
    int v24 = v7;
    __int16 v25 = 1024;
    int v26 = v2;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::applicationWillEnterForegroundForMedia: isSuspendedUnderLock? %d", buf, 0x2Cu);
  }
  uint64_t v8 = *((void *)this + 32);
  char v16 = v2;
  uint64_t v9 = *(void *)(*((void *)this + 4) + 1928);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2142;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, &v16);
  buf[0] = 0;
  BYTE2(v20) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v17, 0, (uint64_t)buf, 1);
  if (BYTE2(v20))
  {
    uint64_t v12 = *(void *)buf;
    *(void *)buf = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t result = v17;
  int v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void sub_198DB36C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::applicationWillEnterForegroundForMedia(WebKit::WebPageProxy *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42738], "sharedApplication"), "isSuspendedUnderLock");
  uint64_t v3 = qword_1EB358730;
  if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *(void *)(v4 + 760);
    uint64_t v6 = *(void *)(v4 + 1928);
    uint64_t v7 = *(void *)(*((void *)this + 32) + 136);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    }
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = this;
    __int16 v19 = 2048;
    uint64_t v20 = v5;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    __int16 v23 = 1024;
    int v24 = v7;
    __int16 v25 = 1024;
    int v26 = v2;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::applicationWillEnterForegroundForMedia: isSuspendedUnderLock? %d", buf, 0x2Cu);
  }
  uint64_t v8 = *((void *)this + 32);
  char v16 = v2;
  uint64_t v9 = *(void *)(*((void *)this + 4) + 1928);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2145;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, &v16);
  buf[0] = 0;
  BYTE2(v20) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v8, &v17, 0, (uint64_t)buf, 1);
  if (BYTE2(v20))
  {
    uint64_t v12 = *(void *)buf;
    *(void *)buf = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t result = v17;
  int v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void sub_198DB38F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::extendSelection(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 256);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 1928);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2239;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v16 = v7;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v7, a2);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9D49C8;
  v8[1] = v5;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v15 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v16, 0, (uint64_t)v14, 1);
  if (v15)
  {
    uint64_t v10 = v14[0];
    v14[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void sub_198DB3A98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::requestRectsForGranularityWithSelectionOffset(uint64_t a1, char a2, int a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v8 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a4);
    return 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    char v6 = a2;
    int v7 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v5, (uint64_t)&v6, a4, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void sub_198DB3C18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198DB3CB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::requestRectsAtSelectionOffsetWithText(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    uint64_t v7 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a4);
    return 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    LODWORD(v6) = a2;
    uint64_t v7 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v5, (int *)&v6, a4, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void sub_198DB3D78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebPageProxy::moveSelectionByOffset(uint64_t a1, int a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return (IPC::Encoder *)WTF::CompletionHandler<void ()(void)>::operator()(a3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    int v17 = a2;
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = *(void *)(a1 + 256);
    uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v8, v7 + 200, "WebPageProxy::moveSelectionByOffset", 36, 0, 0);
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 2323;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v20 = v10;
    IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v10, &v17);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v11 = &unk_1EE9D4A68;
    v11[1] = v6;
    void v11[2] = v8;
    uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v18[0] = v11;
    v18[1] = v12;
    char v19 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v20, 0, (uint64_t)v18, 1);
    if (v19)
    {
      uint64_t v14 = v18[0];
      v18[0] = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

void sub_198DB3F40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::interpretKeyEvent(WebKit::WebPageProxy *a1, char *a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebPageProxy::updateEditorState(a1, a2, 2);
  if (*(void *)(*((void *)a1 + 4) + 768) == *(void *)(*((void *)a1 + 4) + 776))
  {
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
  else
  {
    uint64_t v8 = *((void *)a1 + 5);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
    uint64_t v10 = (void *)*((void *)a1 + 4);
    uint64_t v11 = v10[96];
    if (v11 == v10[97])
    {
      uint64_t result = 81;
      __break(0xC471u);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 960))(v9, v10[98] + 96 * v11, a3);
      WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
      uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 1600);
      return v12(v9);
    }
  }
  return result;
}

void sub_198DB41DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::relayAccessibilityNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
  uint64_t v9 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a3 length:a4];
  uint64_t v10 = v9;
  CFTypeRef cf = v9;
  if (v9) {
    CFRetain(v9);
  }
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)v8 + 528))(v8, a2, &cf);
  CFTypeRef v11 = cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 1600))(v8);
}

void sub_198DB4344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFRelease(v11);
  (*(void (**)(uint64_t))(*(void *)v10 + 1600))(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::assistiveTechnologyMakeFirstResponder(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 424))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB4478(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::executeSavedCommandBySelector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
}

uint64_t WebKit::WebPageProxy::potentialTapAtPosition(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v12 = a4;
  uint64_t v7 = (_DWORD *)a1[111];
  a1[111] = 0;
  if (v7) {
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v7);
  }
  uint64_t v8 = a1[32];
  v10[0] = &v12;
  v10[1] = a2;
  char v11 = a3;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PotentialTapAtPosition>(v8, (uint64_t)v10, *(void *)(a1[4] + 1928), 0);
}

uint64_t WebKit::WebPageProxy::attemptSyntheticClick(uint64_t a1, float *a2, char a3, uint64_t a4)
{
  char v15 = a3;
  uint64_t v14 = a4;
  uint64_t v4 = *(void *)(a1 + 256);
  float v5 = roundf(*a2);
  uint64_t v6 = 0x7FFFFFFFLL;
  uint64_t v7 = 0x80000000;
  if (v5 > -2147500000.0) {
    uint64_t v7 = (int)v5;
  }
  if (v5 < 2147500000.0) {
    uint64_t v6 = v7;
  }
  float v8 = roundf(a2[1]);
  uint64_t v9 = 0x7FFFFFFF00000000;
  unint64_t v10 = 0x8000000000000000;
  if (v8 > -2147500000.0) {
    unint64_t v10 = (unint64_t)(int)v8 << 32;
  }
  if (v8 < 2147500000.0) {
    uint64_t v9 = v10;
  }
  uint64_t v12 = v9 | v6;
  v13[0] = &v12;
  v13[1] = &v15;
  v13[2] = &v14;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AttemptSyntheticClick>(v4, (uint64_t)v13, *(void *)(*(void *)(a1 + 32) + 1928), 0);
}

uint64_t WebKit::WebPageProxy::couldNotRestorePageState(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 880))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB46B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::restorePageState(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a6 <= 0.0)
  {
    char v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v17 = 136446210;
      char v18 = "void WebKit::WebPageProxy::restorePageState(std::optional<WebCore::FloatPoint>, const WebCore::FloatPoint &,"
            " const WebCore::FloatBoxExtent &, double)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ios/WebPageProxyIOS.mm 885: Invalid message dispatched %{public}s", (uint8_t *)&v17, 0xCu);
    }
    uint64_t v16 = *(void *)(*(void *)(a1 + 256) + 144);
    if (v16) {
      *(unsigned char *)(v16 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      uint64_t v13 = *(void *)(v12 + 8);
    }
    else {
      uint64_t v13 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, double))(*(void *)v13 + 888))(v13, a2, a3, a4, a5, a6);
    uint64_t v14 = *(void (**)(uint64_t))(*(void *)v13 + 1600);
    v14(v13);
  }
}

void sub_198DB48F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::restorePageCenterAndScale(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a4 <= 0.0)
  {
    char v11 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v13 = 136446210;
      uint64_t v14 = "void WebKit::WebPageProxy::restorePageCenterAndScale(std::optional<WebCore::FloatPoint>, double)";
      _os_log_fault_impl(&dword_1985F2000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ios/WebPageProxyIOS.mm 891: Invalid message dispatched %{public}s", (uint8_t *)&v13, 0xCu);
    }
    uint64_t v12 = *(void *)(*(void *)(a1 + 256) + 144);
    if (v12) {
      *(unsigned char *)(v12 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
    (*(void (**)(uint64_t, uint64_t, void, double))(*(void *)v9 + 896))(v9, a2, a3, a4);
    unint64_t v10 = *(void (**)(uint64_t))(*(void *)v9 + 1600);
    v10(v9);
  }
}

void sub_198DB4B24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didGetTapHighlightGeometries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 1592))(v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))(*(void *)v17 + 872))(v17, a2, a3, a4, a5, a6, a7, a8, a9);
  char v18 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 1600);

  return v18(v17);
}

void sub_198DB4C94(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateInputContextAfterBlurringAndRefocusingElement(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 912))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB4D9C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::elementDidFocus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5, API::Object **a6)
{
  if (*(unsigned char *)(a1 + 442)) {
    *(unsigned char *)(a1 + 442) = 0;
  }
  WebKit::WebProcessProxy::transformHandlesToObjects(*(WebKit::WebProcessProxy **)(a1 + 256), *a6, &v15);
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v13 + 904))(v13, a2, a3, a4, a5, v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1600))(v13);
}

void sub_198DB4F08(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::elementDidBlur(WebKit::WebPageProxy *this)
{
  if (*((unsigned char *)this + 442)) {
    *((unsigned char *)this + 442) = 0;
  }
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 928))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB501C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateFocusedElementInformation(WebKit::WebPageProxy *this, const FocusedElementInformation *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, const FocusedElementInformation *))(*(void *)v4 + 920))(v4, a2);
  float v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB512C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::focusedElementDidChangeInputMode(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(unsigned char **)(result + 32);
  if (v3[2216] || v3[2217] || v3[2218] || v3[2219])
  {
    *(_WORD *)(result + 441) = a2 | 0x100;
  }
  else
  {
    uint64_t v4 = *(void *)(result + 40);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 936))(v5, a2);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 1600);
    return v6(v5);
  }
  return result;
}

void sub_198DB5278(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didReleaseAllTouchPoints(uint64_t this)
{
  if (*(unsigned char *)(this + 442))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 40);
    if (v2) {
      uint64_t v3 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1592))(v3);
    if (*(unsigned char *)(v1 + 442))
    {
      (*(void (**)(uint64_t, void))(*(void *)v3 + 936))(v3, *(unsigned __int8 *)(v1 + 441));
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1600))(v3);
      if (*(unsigned char *)(v1 + 442)) {
        *(unsigned char *)(v1 + 442) = 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return this;
}

void sub_198DB539C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::showInspectorHighlight(WebKit::WebPageProxy *this, const InspectorOverlayHighlight *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, const InspectorOverlayHighlight *))(*(void *)v4 + 1072))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB54AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::hideInspectorHighlight(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1080))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB55B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::showInspectorIndication(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1088))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB56BC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::hideInspectorIndication(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1096))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB57C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::enableInspectorNodeSearch(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1104))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB58CC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::disableInspectorNodeSearch(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1112))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB59D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPageProxy::focusNextFocusedElement(uint64_t a1, char a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return (IPC::Encoder *)WTF::CompletionHandler<void ()(void)>::operator()(a3);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    char v17 = a2;
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = *(void *)(a1 + 256);
    uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
    WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v8, v7 + 200, "WebPageProxy::focusNextFocusedElement", 38, 0, 0);
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 1928);
    unint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v10 = 2248;
    *((void *)v10 + 1) = v9;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v20 = v10;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, &v17);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v11 = &unk_1EE9D4A90;
    v11[1] = v6;
    void v11[2] = v8;
    uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v18[0] = v11;
    v18[1] = v12;
    char v19 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v20, 0, (uint64_t)v18, 1);
    if (v19)
    {
      uint64_t v14 = v18[0];
      v18[0] = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

void sub_198DB5BB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (a13 && a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::didPerformDictionaryLookup(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 712))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB5DB4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::showPlaybackTargetPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 1592))(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 984))(v10, a2, a3, a4, a5);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 1600);

  return v11(v10);
}

void sub_198DB5EEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::commitPotentialTapFailed(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 864))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB5FF4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didNotHandleTapAsClick(WebKit::WebPageProxy *this, const IntPoint *a2)
{
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 1592))(v5);
  (*(void (**)(uint64_t, const IntPoint *))(*(void *)v5 + 536))(v5, a2);
  (*(void (**)(uint64_t))(*(void *)v5 + 1600))(v5);
  uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 13) + 464);

  return v6();
}

void sub_198DB6150(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didHandleTapAsHover(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 544))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB6258(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didCompleteSyntheticClick(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 552))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB6360(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::disableDoubleTapGesturesDuringTapIfNecessary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 1000))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB6470(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::handleSmartMagnificationInformationForPotentialTap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 1592))(v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double))(*(void *)v14 + 1008))(v14, a2, a3, a4, a5, a6, a7);
  uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 1600);

  return v15(v14);
}

void sub_198DB65C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::computePagesForPrintingiOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v11 = a2;
  *((void *)&v11 + 1) = a3;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800)) {
    return 0;
  }
  long long v13 = v11;
  v7[0] = &v11;
  v7[1] = a4;
  uint64_t v6 = 0x7FF0000000000000;
  char v14 = 1;
  v12[0] = v7;
  v12[1] = &v6;
  WebKit::WebPageProxy::sendToWebPage<IPC::ConnectionSendSyncResult<Messages::WebPage::ComputePagesForPrintingiOS> WebKit::WebPageProxy::sendSyncToProcessContainingFrame<Messages::WebPage::ComputePagesForPrintingiOS>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,Messages::WebPage::ComputePagesForPrintingiOS&&,IPC::Timeout const&)::{lambda(Messages::WebPage::ComputePagesForPrintingiOS&)#1}>(a1, (uint64_t)&v13, (uint64_t)v12, (uint64_t)v8);
  uint64_t v4 = 0;
  if (v10 != -1)
  {
    if (!v10) {
      uint64_t v4 = v9;
    }
    ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage26ComputePagesForPrintingiOSEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v10])(&v13, v8);
  }
  return v4;
}

uint64_t WebKit::WebPageProxy::drawToPDFiOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  *(void *)&long long v8 = a2;
  *((void *)&v8 + 1) = a3;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>::operator()(a6);
    *(void *)&long long v11 = 0;
    return 0;
  }
  else
  {
    long long v11 = v8;
    v7[0] = &v8;
    v7[1] = a4;
    void v7[2] = a5;
    char v12 = 1;
    v9[0] = v7;
    v9[1] = a6;
    char v10 = 0;
    return WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawToPDFiOS,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebPage::DrawToPDFiOS &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(a1, (uint64_t)&v11, (uint64_t)v9);
  }
}

void sub_198DB6740(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(unsigned int **)(v2 - 48);
  *(void *)(v2 - 48) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::drawToImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    LOBYTE(v7) = 0;
    char v9 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>::operator()(a5);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v7);
    return 0;
  }
  else
  {
    long long v7 = v10;
    v6[0] = &v10;
    v6[1] = a4;
    char v8 = 1;
    v11[0] = v6;
    v11[1] = a5;
    char v12 = 0;
    return WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::DrawToImage,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>,Messages::WebPage::DrawToImage &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)><WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>)1>>>&)#1}>(a1, (uint64_t)&v7, (uint64_t)v11);
  }
}

void sub_198DB67E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::generateSyntheticEditingCommand(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      uint64_t v2 = *(void *)(result + 256);
      char v3 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GenerateSyntheticEditingCommand>(v2, &v3, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

WebKit::WebPageProxy *WebKit::WebPageProxy::didUpdateEditorState(WebKit::WebPageProxy *this, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = this;
  if (a2[9]) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = a3[15] == a2[15];
  }
  if (!v5 && a3[9] == 0)
  {
    uint64_t v7 = *((void *)this + 5);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v8 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
    (*(void (**)(uint64_t))(*(void *)v8 + 392))(v8);
    this = (WebKit::WebPageProxy *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 1600))(v8);
  }
  if (!a3[8])
  {
    WebKit::WebPageProxy::updateFontAttributesAfterEditorStateChange(v4, a2);
    uint64_t v9 = *((void *)v4 + 5);
    if (v9) {
      uint64_t v10 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 1592))(v10);
    (*(void (**)(uint64_t))(*(void *)v10 + 448))(v10);
    long long v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 1600);
    return (WebKit::WebPageProxy *)v11(v10);
  }
  return this;
}

void sub_198DB6A18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::dispatchDidUpdateEditorState(uint64_t this)
{
  if (*(unsigned char *)(this + 1104))
  {
    uint64_t v1 = this;
    if (*(unsigned char *)(*(void *)(this + 32) + 576))
    {
      uint64_t v2 = *(void *)(this + 40);
      if (v2) {
        uint64_t v3 = *(void *)(v2 + 8);
      }
      else {
        uint64_t v3 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v3 + 1592))(v3);
      (*(void (**)(uint64_t))(*(void *)v3 + 944))(v3);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1600))(v3);
      *(unsigned char *)(v1 + 110WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    }
  }
  return this;
}

void sub_198DB6B2C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::showValidationMessage(WebKit::WebPageProxy *this, const IntRect *a2, const WTF::String *a3)
{
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  uint64_t v8 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  double v15 = WebKit::valueForKey<double>(v8 + 40, v8 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key);
  (*(void (**)(_DWORD **__return_ptr, uint64_t, const WTF::String *, double *))(*(void *)v7 + 680))(&v16, v7, a3, &v15);
  uint64_t v9 = v16;
  uint64_t v16 = 0;
  uint64_t v10 = (_DWORD *)*((void *)this + 111);
  *((void *)this + 111) = v9;
  if (v10)
  {
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v10);
    long long v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      WTF::RefCounted<WebCore::ValidationBubble>::deref(v11);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
  char v12 = (WebCore::ValidationBubble *)*((void *)this + 111);
  long long v13 = (UIViewController *)(*(uint64_t (**)(void))(**((void **)this + 13) + 488))(*((void *)this + 13));
  uint64_t result = WebCore::ValidationBubble::setAnchorRect(v12, a2, v13);
  if (!*((unsigned char *)this + 450)) {
    return WebCore::ValidationBubble::show(*((WebCore::ValidationBubble **)this + 111));
  }
  return result;
}

void sub_198DB6D38(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::requestEvasionRectsAboveSelection(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    v4[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a2);
    return 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 256);
    LOBYTE(v4[0]) = 0;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v3, (uint64_t)v4, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void sub_198DB6DF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198DB6E98(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::updateSelectionWithDelta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    v6[0] = a2;
    v6[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(v5, v6, a4, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

float WebKit::WebPageProxy::selectionBoundingRectInRootViewCoordinates(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (*(unsigned char *)(v1 + 249))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(v1 + 704);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (v3)
    {
      if (*(unsigned char *)(v1 + 250))
      {
        unsigned int v4 = *(_DWORD *)(v1 + 652);
        if (v4)
        {
          uint64_t v5 = *(WebCore::SelectionGeometry **)(v1 + 640);
          uint64_t v6 = 84 * v4;
          do
          {
            v8[0] = WebCore::SelectionGeometry::rect(v5);
            v8[1] = v7;
            WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v9, (const WebCore::IntRect *)v8);
            WebCore::FloatRect::unite((WebCore::FloatRect *)&v10, (const WebCore::FloatRect *)v9);
            uint64_t v5 = (WebCore::SelectionGeometry *)((char *)v5 + 84);
            v6 -= 84;
          }
          while (v6);
        }
      }
      else
      {
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v10, (const WebCore::IntRect *)(v1 + 592));
      }
    }
  }
  return *(float *)&v10;
}

uint64_t WebKit::WebPageProxy::requestDocumentEditingContext(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v9);
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v10);
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v11);
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v12);
    WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v13);
    long long v15 = 0u;
    long long v14 = 0u;
    *(_OWORD *)&v13[40] = 0u;
    WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(a3);
    uint64_t v5 = (WTF *)v15;
    if ((void)v15)
    {
      *(void *)&long long v15 = 0;
      DWORD2(v15) = 0;
      WTF::fastFree(v5, v4);
    }
    uint64_t v6 = (WTF *)v14;
    if ((void)v14)
    {
      *(void *)&long long v14 = 0;
      DWORD2(v1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      WTF::fastFree(v6, v4);
    }
    MEMORY[0x199732DE0](v13);
    MEMORY[0x199732DE0](v12);
    MEMORY[0x199732DE0](v11);
    MEMORY[0x199732DE0](v10);
    return MEMORY[0x199732DE0](v9);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 256);
    v9[0] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestDocumentEditingContext,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>>(v8, v9, a3, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void sub_198DB7118(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38,WTF *a39,int a40)
{
  int v45 = a39;
  if (a39)
  {
    a39 = 0;
    a40 = 0;
    WTF::fastFree(v45, a2);
  }
  uint64_t v46 = a37;
  if (a37)
  {
    a37 = 0;
    a38 = 0;
    WTF::fastFree(v46, a2);
  }
  MEMORY[0x199732DE0](v43);
  MEMORY[0x199732DE0](v42);
  MEMORY[0x199732DE0](v41);
  MEMORY[0x199732DE0](v40);
  MEMORY[0x199732DE0](&a10);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198DB7214(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didHandleDragStartRequest(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 1648))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB731C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didHandleAdditionalDragItemsRequest(WebKit::WebPageProxy *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 1656))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB742C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::requestDragStart(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  char v6 = a4;
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      uint64_t v4 = *(void *)(result + 256);
      v5[0] = a2;
      v5[1] = a3;
      v5[2] = &v6;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestDragStart>(v4, (uint64_t)v5, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::requestAdditionalItemsForDragSession(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  char v6 = a4;
  if (!*(unsigned char *)(result + 801))
  {
    if (*(unsigned char *)(result + 800))
    {
      uint64_t v4 = *(void *)(result + 256);
      v5[0] = a2;
      v5[1] = a3;
      v5[2] = &v6;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestAdditionalItemsForDragSession>(v4, (uint64_t)v5, *(void *)(*(void *)(result + 32) + 1928), 0);
    }
  }
  return result;
}

WTF *WebKit::WebPageProxy::insertDroppedImagePlaceholders(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    int v30 = 0;
    uint64_t v31 = 0;
    v22[0] = 0;
    char v29 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a3, (uint64_t)&v30, (uint64_t)v22);
    if (v29)
    {
      if ((v28 & 0x8000000000000) != 0)
      {
        __int16 v21 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v4);
        }
      }
      uint64_t v5 = v27;
      uint64_t v27 = 0;
      if (v5)
      {
        if (v5[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
        }
        else {
          --v5[2];
        }
      }
      char v18 = v26;
      int v26 = 0;
      if (v18)
      {
        if (v18[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
        }
        else {
          --v18[2];
        }
      }
      char v19 = v25;
      __int16 v25 = 0;
      if (v19)
      {
        if (v19[2] == 1) {
          (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
        }
        else {
          --v19[2];
        }
      }
      uint64_t v20 = v23;
      if (v23)
      {
        __int16 v23 = 0;
        int v24 = 0;
        WTF::fastFree(v20, v4);
      }
    }
    uint64_t result = v30;
    if (v30)
    {
      int v30 = 0;
      LODWORD(v31) = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 256);
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 1928);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 2297;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v33 = v9;
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v9, *(unsigned int *)(a2 + 12));
    uint64_t v10 = *(unsigned int *)(a2 + 12);
    if (v10)
    {
      uint64_t v11 = *(int **)a2;
      uint64_t v12 = 8 * v10;
      do
      {
        IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v9, v11);
        v11 += 2;
        v12 -= 8;
      }
      while (v12);
    }
    uint64_t v13 = *a3;
    *a3 = 0;
    long long v14 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(void *)long long v14 = &unk_1EE9D4B30;
    *((void *)v14 + 1) = v13;
    int v30 = v14;
    uint64_t v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    char v32 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v33, 0, (uint64_t)&v30, 1);
    if (v32)
    {
      uint64_t v16 = v30;
      int v30 = 0;
      if (v16) {
        (*(void (**)(WTF *))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t result = v33;
    uint64_t v33 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

void sub_198DB77C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (*(unsigned char *)(v24 - 64))
  {
    uint64_t v26 = *(void *)(v24 - 80);
    *(void *)(v24 - 80) = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
  }
  uint64_t v27 = *(IPC::Encoder **)(v24 - 56);
  *(void *)(v24 - 56) = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, a2);
    WTF::fastFree(v28, v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *a1;
  *a1 = 0;
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v11, a3);
  WTF::Function<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(&v19, a2, (uint64_t)v11);
  if (v18)
  {
    if ((v17 & 0x8000000000000) != 0)
    {
      uint64_t v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v4);
      }
    }
    uint64_t v5 = v16;
    uint64_t v16 = 0;
    if (v5)
    {
      if (v5[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
      }
      else {
        --v5[2];
      }
    }
    char v6 = v15;
    long long v15 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    uint64_t v7 = v14;
    long long v14 = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
    uint64_t v8 = v12;
    if (v12)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      WTF::fastFree(v8, v4);
    }
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198DB7B3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    if ((a21 & 0x8000000000000) != 0)
    {
      __int16 v25 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a18)
    {
      if (a18[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
      }
      else {
        --a18[2];
      }
    }
    if (a15) {
      WTF::fastFree(a15, a2);
    }
  }
  uint64_t v26 = *(void *)(v23 - 24);
  *(void *)(v23 - 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::willReceiveEditDragSnapshot(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1664))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_198DB7D5C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didReceiveEditDragSnapshot(uint64_t a1, const WebCore::TextIndicatorData *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v12, a2);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 1672))(v4, v12);
  if (v19)
  {
    if ((v18 & 0x8000000000000) != 0)
    {
      uint64_t v11 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v5);
      }
    }
    char v6 = v17;
    uint64_t v17 = 0;
    if (v6)
    {
      if (v6[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
      else {
        --v6[2];
      }
    }
    uint64_t v7 = v16;
    uint64_t v16 = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
    uint64_t v8 = v15;
    long long v15 = 0;
    if (v8)
    {
      if (v8[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      }
      else {
        --v8[2];
      }
    }
    uint64_t v9 = v13;
    if (v13)
    {
      int v13 = 0;
      int v14 = 0;
      WTF::fastFree(v9, v5);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 1600))(v4);
}

void sub_198DB7F84(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      uint64_t v26 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v24 + 1600))(v24);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebPageProxy::didStartLoadForQuickLookDocumentInMainFrame(WebKit::WebPageProxy *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v4 = *((void *)this + 9);
  if (*a2 && (int v6 = WTF::StringImpl::reverseFind(), (v7 = *a2) != 0))
  {
    if (v6 != -1 || (*((_DWORD *)v7 + 1) & 0x80000000) != 0)
    {
      WTF::StringImpl::substring(v7);
    }
    else
    {
      *(_DWORD *)v7 += 2;
      uint64_t v10 = v7;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **, const WTF::String *))(*(void *)v4 + 280))(v4, &v10, a3);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198DB81C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::didFinishLoadForQuickLookDocumentInMainFrame(uint64_t a1)
{
  uint64_t result = (unsigned int *)WebCore::ShareableResourceHandle::tryWrapInSharedBuffer();
  if (v4)
  {
    (*(void (**)(void))(**(void **)(a1 + 72) + 288))(*(void *)(a1 + 72));
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v3);
  }
  return result;
}

void sub_198DB8270(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::requestPasswordForQuickLookDocumentInMainFrameShared(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 1592))(v6);
  WTF::Function<void ()(WTF::String const&)>::Function<WTF::CompletionHandler<void ()(WTF::String const&)>,void>(&v9, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v6 + 1640))(v6, a2, &v9);
  uint64_t v7 = v9;
  uint64_t v9 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 1600))(v6);
}

void sub_198DB83AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 1600))(v10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorAuthorizationPresenter@<X0>(WebKit::WebPaymentCoordinatorProxy *a1@<X1>, PKPaymentRequest *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::PaymentAuthorizationController::PaymentAuthorizationController(v7, (uint64_t)a1 + 24, (uint64_t)a2);
  *a3 = v7;
  return result;
}

void sub_198DB846C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorPresentingViewController(WebKit::WebPageProxy::Internals *this, const WebKit::WebPaymentCoordinatorProxy *a2)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) + 104) + 488))();
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorPresentingViewController(WebKit::WebPageProxy::Internals *this, const WebKit::WebPaymentCoordinatorProxy *a2)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 5) + 104) + 488))();
}

uint64_t WebKit::WebPageProxy::Internals::paymentCoordinatorCTDataConnectionServiceType(WebKit::WebPageProxy::Internals *this, const WebKit::WebPaymentCoordinatorProxy *a2)
{
  return *(void *)(*(void *)(*((void *)this + 7) + 312) + 208) + 320;
}

uint64_t non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorCTDataConnectionServiceType(WebKit::WebPageProxy::Internals *this, const WebKit::WebPaymentCoordinatorProxy *a2)
{
  return *(void *)(*(void *)(*((void *)this + 5) + 312) + 208) + 320;
}

uint64_t WebKit::desktopClassBrowsingRecommendedForRequest(WebKit *this, const WebCore::ResourceRequest *a2)
{
  uint64_t v3 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(this);
  if (WebCore::Quirks::needsIPadMiniUserAgent(v3, v4)) {
    return 0;
  }
  uint64_t v5 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(this);
  if (WebCore::Quirks::needsIPhoneUserAgent(v5, v6)) {
    return 0;
  }
  uint64_t v8 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(this);
  if (WebCore::Quirks::needsDesktopUserAgent(v8, v9)) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t ___ZNK6WebKit12WebPageProxy33isDesktopClassBrowsingRecommendedERKN7WebCore15ResourceRequestE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (MGGetSInt32Answer() - 8 > 0xFFFFFFFD)
  {
    BOOL v2 = 0;
  }
  else
  {
    if (qword_1E93CF850 != -1) {
      dispatch_once(&qword_1E93CF850, &__block_literal_global_363);
    }
    BOOL v2 = byte_1E93CF82B != 0;
  }
  byte_1E93CF829 = v2;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 72) + 240))(*(void *)(v1 + 72));
  if ((result & 1) == 0)
  {
    uint64_t result = WTF::linkedOnOrAfterSDKWithBehavior();
    if ((result & 1) == 0) {
      byte_1E93CF829 = 0;
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::useDesktopClassBrowsing(WebKit::WebPageProxy *a1, const WebCore::ResourceRequest *a2, char a3, WebKit *this)
{
  if (a2 == 2)
  {
    if (!a3) {
      return 1;
    }
    BOOL v8 = WebKit::desktopClassBrowsingRecommendedForRequest(this, a2) == 0;
    return !v8;
  }
  if ((_BYTE)a2) {
    return 0;
  }
  uint64_t result = WebKit::desktopClassBrowsingRecommendedForRequest(this, a2);
  if (result < 2) {
    return result;
  }
  uint64_t v6 = *((void *)a1 + 5);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 1472))(v7) & 1) == 0)
  {
    uint64_t v9 = WebKit::WebPageProxy::viewSize(a1);
    (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
    if ((v9 - 1) > 0x176 || v9 <= 0) {
      goto LABEL_15;
    }
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
LABEL_15:
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZNK6WebKit12WebPageProxy33isDesktopClassBrowsingRecommendedERKN7WebCore15ResourceRequestE_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (qword_1E93CF838 != -1) {
    dispatch_once(&qword_1E93CF838, block);
  }
  BOOL v8 = byte_1E93CF829 == 0;
  return !v8;
}

void sub_198DB8828(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::predictedUserAgentForRequest@<X0>(uint64_t this@<X0>, const WebCore::ResourceRequest *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (WebKit::WebPageProxy *)this;
  uint64_t v6 = *(_DWORD **)(this + 376);
  if (v6 && v6[1]) {
    goto LABEL_17;
  }
  this = (uint64_t)API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get((API::WebsitePolicies **)(*(void *)(this + 48) + 56));
  uint64_t v8 = this;
  uint64_t v6 = *(_DWORD **)(this + 64);
  if (v6)
  {
    if (v6[1]) {
      goto LABEL_17;
    }
  }
  this = *(void *)(this + 88);
  if (!this)
  {
LABEL_16:
    uint64_t v6 = (_DWORD *)*((void *)v4 + 44);
    if (!v6)
    {
LABEL_18:
      *a3 = v6;
      return this;
    }
LABEL_17:
    *v6 += 2;
    goto LABEL_18;
  }
  int v9 = *(_DWORD *)this;
  int v10 = *(_DWORD *)(this + 4);
  *(_DWORD *)this += 2;
  if (v9)
  {
    *(_DWORD *)this = v9;
    if (!v10) {
      goto LABEL_16;
    }
  }
  else
  {
    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
    if (!v10) {
      goto LABEL_16;
    }
  }
  this = WebKit::WebPageProxy::useDesktopClassBrowsing(v4, (const WebCore::ResourceRequest *)*(unsigned __int8 *)(v8 + 130), *(unsigned char *)(v8 + 135), a2);
  if ((this & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v11 = *(WTF::StringImpl **)(v8 + 88);
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  int v13 = v11;
  WebCore::standardUserAgentWithApplicationName();
  this = (uint64_t)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      return WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return this;
}

void sub_198DB8988(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::effectiveContentModeAfterAdjustingPolicies(WebKit::WebPageProxy *this, API::WebsitePolicies *a2, const WebCore::ResourceRequest *a3)
{
  v35[2] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 34);
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, a3))*((unsigned char *)a2 + 123) = 2; {
  uint64_t v7 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(a3);
  }
  WebCore::Quirks::defaultVisibilityAdjustmentSelectors((uint64_t *)&v32, v7, v8);
  if (v34)
  {
    v35[0] = v32;
    int v9 = v33;
    char v32 = 0;
    uint64_t v33 = 0;
    v35[1] = v9;
    v31[1] = (WTF::StringImpl *)0x100000001;
    v31[0] = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v31[0], (uint64_t)v35);
    API::WebsitePolicies::setVisibilityAdjustmentSelectors((uint64_t)a2, (WTF::StringImpl *)v31);
    WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v10);
    WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v11);
    if (v34) {
      WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v12);
    }
  }
  int v13 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(a3);
  if (WebCore::Quirks::needsIPhoneUserAgent(v13, v14))
  {
    WebCore::standardUserAgentWithApplicationName();
    if (v35[0])
    {
      WTF::StringImpl::replace();
      v31[0] = v32;
    }
    else
    {
      v31[0] = 0;
    }
    WTF::String::operator=((uint64_t *)a2 + 8, v31);
    uint64_t v16 = v31[0];
    v31[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v24 = v35[0];
    v35[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v15);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::operator=((uint64_t *)a2 + 10, &v32);
    uint64_t v26 = v32;
    char v32 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    return 1;
  }
  char v17 = WebKit::WebPageProxy::useDesktopClassBrowsing(this, (const WebCore::ResourceRequest *)*((unsigned __int8 *)a2 + 130), *((unsigned char *)a2 + 135), a3);
  *((unsigned char *)this + 1122) = 0;
  if ((v17 & 1) == 0)
  {
    uint64_t result = 1;
    *((unsigned char *)a2 + 133) = 1;
    return result;
  }
  uint64_t v18 = *((void *)a2 + 8);
  if (!v18 || !*(_DWORD *)(v18 + 4))
  {
    uint64_t v19 = *((void *)this + 47);
    if (!v19 || !*(_DWORD *)(v19 + 4))
    {
      uint64_t v20 = (WTF::StringImpl *)*((void *)a2 + 11);
      if (v20)
      {
        *(_DWORD *)v20 += 2;
        char v32 = v20;
        if (*((_DWORD *)v20 + 1))
        {
LABEL_22:
          WebCore::standardUserAgentWithApplicationName();
          WTF::String::operator=((uint64_t *)a2 + 8, v31);
          uint64_t v22 = v31[0];
          v31[0] = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v21);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          uint64_t v27 = v32;
          char v32 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v21);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          goto LABEL_41;
        }
      }
      else
      {
        char v32 = 0;
      }
      WTF::String::operator=((uint64_t *)&v32, (WTF::StringImpl **)this + 46);
      goto LABEL_22;
    }
  }
LABEL_41:
  uint64_t v28 = *((void *)a2 + 10);
  if (!v28 || !*(_DWORD *)(v28 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::operator=((uint64_t *)a2 + 10, &v32);
    int v30 = v32;
    char v32 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  if (qword_1E93CF850 != -1) {
    dispatch_once(&qword_1E93CF850, &__block_literal_global_363);
  }
  if (byte_1E93CF82B)
  {
    *(_DWORD *)((char *)a2 + 122) = 16843266;
    *((unsigned char *)this + 1122) = 1;
  }
  return 2;
}

void sub_198DB8D98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, int a10, WTF::StringImpl *a11, uint64_t a12, char a13, WTF::StringImpl *a14)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::textInputContextsInRect(uint64_t a1, uint64_t *a2, float a3, float a4, float a5, float a6)
{
  *(float *)int v9 = a3;
  *(float *)&v9[1] = a4;
  *(float *)&void v9[2] = a5;
  *(float *)&v9[3] = a6;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    v8[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(a2);
    return 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 256);
    v8[0] = (WTF *)v9;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v7, (float **)v8, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

void sub_198DB8F24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  BOOL v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198DB8FC4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::focusTextInputContextAndPlaceCaret(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    v6[0] = a2;
    v6[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(v5, (uint64_t)v6, a4, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::setShouldRevealCurrentSelectionAfterInsertion(uint64_t this, char a2)
{
  if (!*(unsigned char *)(this + 801))
  {
    if (*(unsigned char *)(this + 800))
    {
      uint64_t v2 = *(void *)(this + 256);
      char v3 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetShouldRevealCurrentSelectionAfterInsertion>(v2, &v3, *(void *)(*(void *)(this + 32) + 1928), 0);
    }
  }
  return this;
}

unsigned int *WebKit::WebPageProxy::willOpenAppLink(unsigned int *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 79);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 8)) == 0 || !*(void *)(v3 + 8))
  {
    uint64_t v4 = WebKit::WebPageProxy::ProcessActivityState::takeOpeningAppLinkActivity((WebKit::WebPageProxy::ProcessActivityState *)(this + 148));
    uint64_t v5 = WTF::WorkQueue::main(v4);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1 + 6, (uint64_t)(v1 + 4));
    uint64_t v6 = (atomic_uint *)*((void *)v1 + 3);
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    uint64_t v7 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v7 = &unk_1EE9D4BD0;
    *((void *)v7 + 1) = v6;
    uint64_t v8 = v7;
    (*(void (**)(uint64_t, unsigned int **, double))(*(void *)v5 + 16))(v5, &v8, 25.0);
    this = v8;
    uint64_t v8 = 0;
    if (this) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)this + 8))(this);
    }
  }
  return this;
}

void sub_198DB91B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::processWillBecomeSuspended(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800))
  {
    int v3 = *(unsigned __int8 *)(*((void *)this + 4) + 1152);
    *((unsigned char *)this + 448) = v3;
    if (v3) {
      WebKit::WebPageProxy::setNetworkRequestsInProgress(this, 0, a3);
    }
  }
}

unint64_t WebKit::WebPageProxy::willPerformPasteCommand(WebKit::WebPasteboardProxy *a1, unsigned int a2, uint64_t *a3, long long *a4)
{
  if (a2 <= 1)
  {
    MEMORY[0x19972EAD0](&v13, *MEMORY[0x1E4F43C08]);
    long long v11 = *a4;
    uint64_t v12 = *((void *)a4 + 2);
    unint64_t v4 = WebKit::WebPageProxy::grantAccessToCurrentPasteboardData(a1, &v13, a3, (uint64_t)&v11);
    int v9 = v13;
    int v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  return v4;
}

void sub_198DB9300(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::showDataDetectorsUIForPositionInformation(WebKit::WebPageProxy *this, const InteractionInformationAtPosition *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, const InteractionInformationAtPosition *))(*(void *)v4 + 992))(v4, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void sub_198DB9404(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::shouldDismissKeyboardAfterTapAtPoint(uint64_t a1, uint64_t *a2, float a3, float a4)
{
  *(float *)uint64_t v7 = a3;
  *(float *)&v7[1] = a4;
  if (*(unsigned char *)(a1 + 801) || !*(unsigned char *)(a1 + 800))
  {
    return WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 256);
    uint64_t v6 = (float *)v7;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ShouldDismissKeyboardAfterTapAtPoint,WTF::CompletionHandler<void ()(BOOL)>>(v5, &v6, a2, *(void *)(*(void *)(a1 + 32) + 1928), 0, 1);
  }
}

uint64_t WebKit::WebPageProxy::statusBarWasTapped(WebKit::WebPageProxy *this)
{
  uint64_t v2 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_INFO, "WebPageProxy::statusBarWasTapped", v6, 2u);
  }
  uint64_t v3 = (void *)[MEMORY[0x1E4F42738] sharedApplication];
  if (([v3 supportsMultipleScenes] & 1) == 0 && objc_msgSend(v3, "applicationState"))
  {
    uint64_t v4 = (void *)[MEMORY[0x1E4F223E0] defaultWorkspace];
    objc_msgSend(v4, "openApplicationWithBundleID:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"));
  }
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 472))(*((void *)this + 13));
}

uint64_t WebKit::WebProcessProxy::platformDestroy(WebKit::WebProcessProxy *this)
{
  [+[WKMouseDeviceObserver sharedInstance] stop];
  uint64_t v1 = +[WKStylusDeviceObserver sharedInstance];

  return [(WKStylusDeviceObserver *)v1 stop];
}

uint64_t WebKit::WebScreenOrientationManagerProxy::platformShouldRejectLockRequest@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42738], "sharedApplication"), "supportsMultipleScenes");
  if (result)
  {
    uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)(a1 + 8) = v6;
    char v4 = 1;
    char v5 = 6;
  }
  else
  {
    char v5 = 0;
    char v4 = 0;
  }
  *(unsigned char *)a1 = v5;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

void sub_198DB98AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf)
{
  _Block_object_dispose(&a16, 8);
  CFTypeRef v23 = cf;
  CFTypeRef cf = 0;
  if (v23) {
    CFRelease(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void WebKit::WebDataListSuggestionsDropdownIOS::~WebDataListSuggestionsDropdownIOS(WebKit::WebDataListSuggestionsDropdownIOS *this, void *a2)
{
  *(void *)this = &unk_1EE9D4590;
  uint64_t v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebKit::WebDataListSuggestionsDropdown::~WebDataListSuggestionsDropdown(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE9D4590;
  uint64_t v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebKit::WebDataListSuggestionsDropdown::~WebDataListSuggestionsDropdown(this, a2);

  WTF::fastFree(v4, v5);
}

uint64_t std::default_delete<PermissionRequest>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3) {
    CFRelease(v3);
  }
  char v4 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    CFRelease(v4);
  }
  char v5 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)this;
  *(void *)this = 0;
  if (v7) {
    CFRelease(v7);
  }

  return WTF::fastFree(this, a2);
}

Class initCLLocationManager(void)
{
  if ((byte_1E93CF82A & 1) == 0)
  {
    uint64_t v1 = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x198DB9B64);
    }
    *(void *)algn_1E93CF848 = v1;
    byte_1E93CF82A = 1;
  }
  Class result = objc_getClass("CLLocationManager");
  qword_1E93CF840 = (uint64_t)result;
  if (!result) {
    goto LABEL_7;
  }
  getCLLocationManagerClass = CLLocationManagerFunction;
  return result;
}

uint64_t CLLocationManagerFunction(void)
{
  return qword_1E93CF840;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage23SyncApplyAutocorrectionEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage26ComputePagesForPrintingiOSEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t ___ZN6WebKitL29desktopClassBrowsingSupportedEv_block_invoke(PAL *a1)
{
  uint64_t result = PAL::currentUserInterfaceIdiomIsSmallScreen(a1);
  byte_1E93CF82B = result ^ 1;
  return result;
}

Class initMPAVRoutingController(void)
{
  if ((byte_1E93CF82C & 1) == 0)
  {
    unk_1E93CF860 = ___ZL18MediaPlayerLibraryv_block_invoke();
    byte_1E93CF82C = 1;
  }
  Class result = objc_getClass("MPAVRoutingController");
  qword_1E93CF858 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB9C64);
  }
  off_1EC2B20F8 = MPAVRoutingControllerFunction;
  return result;
}

uint64_t MPAVRoutingControllerFunction(void)
{
  return qword_1E93CF858;
}

uint64_t ___ZL18MediaPlayerLibraryv_block_invoke()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/MediaPlayer.framework/MediaPlayer", 2);
  if (!result)
  {
    uint64_t result = 40;
    __break(0xC471u);
  }
  return result;
}

Class initMPMediaControlsConfiguration(void)
{
  if ((byte_1E93CF82C & 1) == 0)
  {
    unk_1E93CF860 = ___ZL18MediaPlayerLibraryv_block_invoke();
    byte_1E93CF82C = 1;
  }
  Class result = objc_getClass("MPMediaControlsConfiguration");
  qword_1E93CF868 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB9D40);
  }
  _MergedGlobals_257 = MPMediaControlsConfigurationFunction;
  return result;
}

uint64_t MPMediaControlsConfigurationFunction(void)
{
  return qword_1E93CF868;
}

Class initMPMediaControlsViewController(void)
{
  if ((byte_1E93CF82C & 1) == 0)
  {
    unk_1E93CF860 = ___ZL18MediaPlayerLibraryv_block_invoke();
    byte_1E93CF82C = 1;
  }
  Class result = objc_getClass("MPMediaControlsViewController");
  qword_1E93CF870 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198DB9DD4);
  }
  off_1EC2B2100 = MPMediaControlsViewControllerFunction;
  return result;
}

uint64_t MPMediaControlsViewControllerFunction(void)
{
  return qword_1E93CF870;
}

unsigned int *WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::RetainPtr<objc_object  {objcproto13UIInteraction}*>>>::moveOverlapping(unsigned int *result, unsigned int *a2, unsigned int **a3)
{
  uint64_t v3 = a2;
  char v4 = result;
  if (result <= (unsigned int *)a3)
  {
    if (a2 != result)
    {
      char v5 = (unsigned int **)((char *)a3 + (((char *)a2 - (char *)result) & 0xFFFFFFFFFFFFFFF0) - 8);
      uint64_t v6 = a2;
      do
      {
        uint64_t v7 = *((void *)v6 - 2);
        v6 -= 4;
        *(void *)uint64_t v6 = 0;
        *(v5 - 1) = v7;
        uint64_t v8 = *((void *)v6 + 1);
        *((void *)v6 + 1) = 0;
        void *v5 = v8;
        int v9 = (const void *)*((void *)v6 + 1);
        *((void *)v6 + 1) = 0;
        if (v9) {
          CFRelease(v9);
        }
        Class result = (unsigned int *)*((void *)v3 - 2);
        *((void *)v3 - 2) = 0;
        if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          Class result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
        v5 -= 2;
        uint64_t v3 = v6;
      }
      while (v6 != v4);
    }
  }
  else
  {
    return WTF::VectorMover<false,std::pair<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::RetainPtr<objc_object  {objcproto13UIInteraction}*>>>::move(result, a2, a3);
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::ValidationBubble>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x1997337B0]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  long long v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v11 = 2370;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  int v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v13 = &unk_1EE9D4710;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  uint64_t v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void sub_198DBA068(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4710;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4710;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    unint64_t v4 = *a2;
    if (*a2)
    {
      unint64_t v5 = a2[1];
      if (v5 <= a2[2] - v4)
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
        *a2 = 0;
        a2[1] = 0;
        unint64_t v12 = a2[3];
        if (v12)
        {
          if (v5)
          {
            (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v12 + 16))(v12, v4, v5);
            unint64_t v10 = 0;
            unint64_t v22 = *a2;
            unint64_t v23 = a2[1];
            unint64_t v24 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            unint64_t v11 = 0;
            if (v24 && v23)
            {
              (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v24 + 16))(v24, v22, v23);
              unint64_t v11 = *a2;
              unint64_t v10 = a2[1];
            }
          }
          else
          {
            unint64_t v10 = 0;
            unint64_t v11 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)a2[2];
        a2[2] = (unint64_t)(v6 + 1);
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (!v7)
          {
            LOBYTE(v30[0]) = 0;
            char v31 = 0;
            std::__optional_move_base<WebKit::FocusedElementInformation,false>::__optional_move_base[abi:sn180100](v27, (uint64_t)v30);
LABEL_12:
            char v29 = 1;
            if (v31) {
              WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v30, v8);
            }
LABEL_17:
            if (v29
              || (v16 = *a2, v17 = a2[1], *a2 = 0, a2[1] = 0, (unint64_t v18 = a2[3]) != 0)
              && v17
              && ((*(void (**)(unint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16), v29))
            {
              std::__optional_move_base<WebKit::FocusedElementInformation,false>::__optional_move_base[abi:sn180100](v25, (uint64_t)v27);
              char v26 = 1;
              if (!v29
                || !v28
                || (WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v27, v14), v26))
              {
LABEL_21:
                WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>::operator()(v2);
                if (v26)
                {
                  if (v25[416]) {
                    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v25, v15);
                  }
                }
                return;
              }
            }
            else
            {
              v25[0] = 0;
              char v26 = 0;
            }
            unint64_t v19 = *a2;
            unint64_t v20 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            unint64_t v21 = a2[3];
            if (!v21
              || !v20
              || ((*(void (**)(unint64_t, unint64_t))(*(void *)v21 + 16))(v21, v19), !v26))
            {
              IPC::Connection::cancelReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(v2);
              return;
            }
            goto LABEL_21;
          }
          IPC::Decoder::decode<WebKit::FocusedElementInformation>(a2, v30);
          if (v31)
          {
            WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)v27, v30);
            char v28 = 1;
            goto LABEL_12;
          }
LABEL_16:
          v27[0] = 0;
          char v29 = 0;
          goto LABEL_17;
        }
        unint64_t v10 = v5;
        unint64_t v11 = v4;
      }
      *a2 = 0;
      a2[1] = 0;
      unint64_t v13 = a2[3];
      if (v13 && v10) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11);
      }
      goto LABEL_16;
    }
  }
  int v9 = (uint64_t *)(a1 + 8);

  IPC::Connection::cancelReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(v9);
}

void sub_198DBA520(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  if (a63)
  {
    if (a61) {
      WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a9, a2);
    }
  }
  _Unwind_Resume(a1);
}

void IPC::Connection::cancelReply<Messages::WebPage::RequestFocusedElementInformation,WTF::CompletionHandler<void ()(std::optional<WebKit::FocusedElementInformation> const&)>>(uint64_t *a1)
{
}

void sub_198DBA5F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a61) {
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::FocusedElementInformation>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::FocusedElementInformation,void>::decode(a1, a2);
  if (!a2[416])
  {
    unint64_t v4 = *a1;
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_198DBA684(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 416)) {
    WebKit::FocusedElementInformation::~FocusedElementInformation(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<WebKit::FocusedElementInformation,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[416] = 0;
  if (*(unsigned char *)(a2 + 416))
  {
    WebKit::FocusedElementInformation::FocusedElementInformation((uint64_t)a1, (long long *)a2);
    a1[416] = 1;
  }
  return a1;
}

void sub_198DBA6E4(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 416)) {
    WebKit::FocusedElementInformation::~FocusedElementInformation(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DynamicViewportSizeUpdate>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2229;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::DynamicViewportSizeUpdate,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DBA808(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetDeviceOrientation>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2424;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::Encoder::operator<<<int>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DBA974(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetOverrideViewportArguments>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2456;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v21 = v8;
  uint64_t v9 = *a2;
  LODWORD(a2) = *(unsigned __int8 *)(*a2 + 40);
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (a2)
  {
    if (v11)
    {
      unsigned char *v10 = 1;
      if (*(unsigned char *)(v9 + 40))
      {
        IPC::ArgumentCoder<WebCore::ViewportArguments,void>::encode(v8, v9);
        goto LABEL_7;
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x198DBAB38);
  }
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198DBAB58);
  }
  unsigned char *v10 = 0;
LABEL_7:
  LOBYTE(v19) = 0;
  char v20 = 0;
  uint64_t v13 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, a4, (uint64_t)&v19, 1);
  if (v20)
  {
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  long long v15 = v21;
  unint64_t v21 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v17, v18);
  }
  return v13;
}

void sub_198DBAB64(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v12 = 2400;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v28 = v12;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, *(int **)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *(unsigned char *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *(unsigned char *)(a2 + 9));
  char v13 = *(unsigned char *)(a2 + 10);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (v15)
  {
    *uint64_t v14 = v13;
    uint64_t v16 = *a3;
    *a3 = 0;
    char v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v17 = &unk_1EE9D4738;
    v17[1] = v16;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v26[0] = v17;
    v26[1] = v18;
    char v27 = 1;
    int v20 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a5, (uint64_t)v26, a6);
    if (v27)
    {
      uint64_t v21 = v26[0];
      v26[0] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
    unint64_t v22 = v28;
    char v28 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v19);
      WTF::fastFree(v24, v25);
    }
    if (v20) {
      return v18;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198DBAD74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4738;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4738;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithGesture,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (v9[0] = IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>>>(a2),
        v9[1] = v3,
        (v3 & 0xFF00000000) != 0))
  {
    unsigned __int8 v4 = BYTE2(v3);
    uint64_t v5 = v3;
    uint64_t v6 = BYTE1(v3);
    BOOL v7 = v2;
  }
  else
  {
    v9[0] = 0;
    BOOL v7 = v2;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unsigned __int8 v4 = 0;
  }
  return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(v7, (uint64_t)v9, v5, v6, v4);
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>>>(unint64_t *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (v3)
  {
    unsigned __int8 v4 = v2;
    if ((unsigned __int16)IPC::Decoder::decode<WebKit::GestureType>((uint64_t *)a1) >= 0x100u
      && (unsigned __int16)IPC::Decoder::decode<WebKit::GestureRecognizerState>((uint64_t *)a1) >= 0x100u
      && (unsigned __int16)IPC::Decoder::decode<WTF::OptionSet<WebKit::SelectionFlags>>(a1) >= 0x100u)
    {
      return v4;
    }
  }
  else
  {
    unint64_t v9 = *a1;
    unint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v11 = a1[3];
    if (v11) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9);
    }
  }
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t v7 = a1[3];
  if (v7 && v6) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v7 + 16))(v7, v5);
  }
  return 0;
}

uint64_t IPC::Decoder::decode<WebKit::GestureType>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::GestureType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::GestureType,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      BOOL v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 8)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::Decoder::decode<WebKit::GestureRecognizerState>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::GestureRecognizerState,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::GestureRecognizerState,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      BOOL v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 6)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::SelectionFlags>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      char v17 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v2, v1);
        a1 = v17;
        uint64_t v10 = *v17;
        unint64_t v9 = v17[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      LODWORD(v5) = *v4;
      int v6 = v5 < 8;
      if (v5 >= 8) {
        LODWORD(v5) = 0;
      }
      goto LABEL_5;
    }
    unint64_t v9 = v1;
    uint64_t v10 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v16 = a1;
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v10);
    }
    LODWORD(v5) = 0;
    int v6 = 0;
    a1 = v16;
  }
  else
  {
    int v6 = 0;
  }
LABEL_5:
  uint64_t v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      if (v13)
      {
        unsigned int v15 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
        return v15;
      }
    }
  }
  return v7;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2535;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v28 = v12;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, *(int **)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *(unsigned char *)(a2 + 8));
  char v13 = *(unsigned char *)(a2 + 9);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (v15)
  {
    *uint64_t v14 = v13;
    uint64_t v16 = *a3;
    *a3 = 0;
    char v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v17 = &unk_1EE9D4760;
    v17[1] = v16;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v26[0] = v17;
    v26[1] = v18;
    char v27 = 1;
    int v20 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a5, (uint64_t)v26, a6);
    if (v27)
    {
      uint64_t v21 = v26[0];
      v26[0] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
    unint64_t v22 = v28;
    char v28 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v19);
      WTF::fastFree(v24, v25);
    }
    if (v20) {
      return v18;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198DBB6C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4760;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4760;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2) {
    goto LABEL_11;
  }
  uint64_t v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (v5)
  {
    int v6 = v4;
    unsigned __int16 v7 = IPC::Decoder::decode<WebKit::GestureRecognizerState>((uint64_t *)a2);
    if (v7 >= 0x100u)
    {
      unsigned __int8 v8 = v7;
      unsigned __int16 v9 = IPC::Decoder::decode<WTF::OptionSet<WebKit::SelectionFlags>>(a2);
      if (v9 >= 0x100u)
      {
        uint64_t v13 = (unsigned __int16)(v8 | (unsigned __int16)(v9 << 8)) | 0x100000000;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v18 = *a2;
    unint64_t v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v20 = a2[3];
    if (v20 && v19) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18);
    }
  }
  unint64_t v10 = *a2;
  unint64_t v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v12 = a2[3];
  if (v12 && v11) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10);
  }
  int v6 = 0;
  uint64_t v13 = 0;
LABEL_9:
  v21[0] = v6;
  v21[1] = v13;
  if ((v13 & 0xFF00000000) == 0)
  {
LABEL_11:
    v21[0] = 0;
    uint64_t v16 = v2;
    uint64_t v15 = 0;
    unsigned __int8 v14 = 0;
    return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(v16, (uint64_t)v21, v15, v14);
  }
  unsigned __int8 v14 = BYTE1(v13);
  uint64_t v15 = v13;
  uint64_t v16 = v2;
  return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::SelectionTouch,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(v16, (uint64_t)v21, v15, v14);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WillInsertFinalDictationResult>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int16 v7 = 2551;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DBBAA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidInsertFinalDictationResult>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int16 v7 = 2210;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DBBBF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceDictatedText>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  unsigned __int8 v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v8 = 2358;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DBBD68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceSelectedText>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  unsigned __int8 v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v8 = 2362;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  unint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DBBEDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::Function<void ()(WebKit::WebAutocorrectionData)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unsigned __int8 v8 = *(WTF **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v9 = v3;
  uint64_t v4 = *(const void **)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  CFTypeRef cf = v4;
  (*(void (**)(uint64_t, WTF **))(*(void *)v2 + 16))(v2, &v8);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t result = v8;
  if (v8)
  {
    unsigned __int8 v8 = 0;
    LODWORD(v9) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_198DBBFD0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v12 = 2366;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __int16 v25 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  unsigned __int8 v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned __int8 v14 = &unk_1EE9D4788;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  __int16 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DBC158(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4788;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4788;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::ArgumentCoder<WebKit::WebAutocorrectionData,void>::decode(a2, a2, (uint64_t)&v23);
    if (v26
      || (uint64_t v4 = (void *)*a2, v15 = a2[1], *a2 = 0, a2[1] = 0, (v16 = a2[3]) != 0)
      && v15
      && ((*(void (**)(unint64_t, void *))(*(void *)v16 + 16))(v16, v4), v26))
    {
      unint64_t v19 = v23;
      uint64_t v5 = v24;
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v20 = v5;
      CFTypeRef v6 = cf;
      CFTypeRef cf = 0;
      CFTypeRef v21 = v6;
      char v22 = 1;
      std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v4);
    }
    else
    {
      LOBYTE(v19) = 0;
      char v22 = 0;
      std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v23, v4);
      unsigned __int16 v7 = (void *)*a2;
      unint64_t v17 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v18 = a2[3];
      if (v18 && v17) {
        (*(void (**)(unint64_t, void *))(*(void *)v18 + 16))(v18, v7);
      }
    }
    if (v22)
    {
      unint64_t v23 = v19;
      uint64_t v8 = v20;
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v24 = v8;
      uint64_t v9 = v21;
      CFTypeRef v21 = 0;
      CFTypeRef cf = v9;
      WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(v2, (uint64_t)&v23);
      CFTypeRef v11 = cf;
      CFTypeRef cf = 0;
      if (v11) {
        CFRelease(v11);
      }
      unint64_t v12 = v23;
      if (v23)
      {
        unint64_t v23 = 0;
        LODWORD(v2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        WTF::fastFree(v12, v10);
      }
      return (WTF *)std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v10);
    }
    else
    {
      std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v7);
      return IPC::Connection::cancelReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(v2);
    }
  }
  else
  {
    unsigned __int8 v14 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(v14);
  }
}

void sub_198DBC498(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, CFTypeRef cf)
{
}

WTF *IPC::Connection::cancelReply<Messages::WebPage::RequestAutocorrectionData,WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>>(uint64_t *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  CFTypeRef cf = 0;
  WTF::CompletionHandler<void ()(WebKit::WebAutocorrectionData)>::operator()(a1, (uint64_t)&v4);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t result = v4;
  if (v4)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

void sub_198DBC540(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebKit::WebAutocorrectionData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::WebPage::SyncApplyAutocorrection>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (!*(void *)(result + 144))
  {
    *(unsigned char *)a5 = 1;
    *(_DWORD *)(a5 + 16) = 1;
    return result;
  }
  uint64_t v11 = result;
  kdebug_trace();
  uint64_t v12 = *(void *)(v11 + 144);
  if (!v12)
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  uint64_t v28 = 0;
  IPC::Connection::createSyncMessageEncoder(3791, a3, &v28, &v27);
  uint64_t v13 = v27;
  if (a4)
  {
    **((unsigned char **)v27 + 66) |= 4u;
    *(unsigned char *)(v12 + 96) = 1;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, *(uint64_t **)(a2 + 8));
  char v14 = *(unsigned char *)(a2 + 16);
  unint64_t v15 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198DBC808);
  }
  *unint64_t v15 = v14;
  IPC::Connection::sendSyncMessage(v12, v28, (uint64_t *)&v27, a4, (uint64_t)&v25, a6);
  if (v26)
  {
    if (v26 == 1)
    {
      *(unsigned char *)a5 = (_BYTE)v25;
      int v17 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_14:
      ((void (*)(__int16 *, uint64_t **))off_1EE9D47A0[v17])(&v24, &v25);
      goto LABEL_15;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_24:
    __break(1u);
LABEL_25:
    JUMPOUT(0x198DBC7E8);
  }
  __int16 v24 = 0;
  IPC::Decoder::operator>><std::tuple<BOOL>>(v25, &v24);
  if (HIBYTE(v24))
  {
    int v17 = v26;
    if (!v26)
    {
      unint64_t v19 = v25;
      __int16 v25 = 0;
      char v20 = v24;
      *(void *)a5 = v19;
      *(unsigned char *)(a5 + 8) = v20;
      *(_DWORD *)(a5 + 16) = 0;
      goto LABEL_14;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_24;
  }
  *(unsigned char *)a5 = 13;
  *(_DWORD *)(a5 + 16) = 1;
  int v17 = v26;
  if (v26 != -1) {
    goto LABEL_14;
  }
LABEL_15:
  CFTypeRef v21 = v27;
  char v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }

  return kdebug_trace();
}

void sub_198DBC81C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, int a15, int a16, IPC::Encoder *a17)
{
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9D47A0[a16])(&a12, &a14);
  }
  unint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, a2);
    WTF::fastFree(v19, v20);
  }
  kdebug_trace();
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)a2);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 9);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectTextWithGranularityAtPoint,WebKit::WebPageProxy::selectTextWithGranularityAtPoint(WebCore::IntPoint,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectTextWithGranularityAtPoint(WebCore::IntPoint,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D47C0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D47C0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectTextWithGranularityAtPoint,WebKit::WebPageProxy::selectTextWithGranularityAtPoint(WebCore::IntPoint,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectTextWithGranularityAtPoint(WebCore::IntPoint,WebCore::TextGranularity,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectPositionAtBoundaryWithDirection,WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(WebCore::IntPoint,WebCore::TextGranularity,WebCore::SelectionDirection,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(WebCore::IntPoint,WebCore::TextGranularity,WebCore::SelectionDirection,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D47E8;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D47E8;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectPositionAtBoundaryWithDirection,WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(WebCore::IntPoint,WebCore::TextGranularity,WebCore::SelectionDirection,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection(WebCore::IntPoint,WebCore::TextGranularity,WebCore::SelectionDirection,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::MoveSelectionAtBoundaryWithDirection,WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(WebCore::TextGranularity,WebCore::SelectionDirection,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(WebCore::TextGranularity,WebCore::SelectionDirection,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D4810;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D4810;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::MoveSelectionAtBoundaryWithDirection,WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(WebCore::TextGranularity,WebCore::SelectionDirection,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection(WebCore::TextGranularity,WebCore::SelectionDirection,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectPositionAtPoint,WebKit::WebPageProxy::selectPositionAtPoint(WebCore::IntPoint,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectPositionAtPoint(WebCore::IntPoint,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D4838;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D4838;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectPositionAtPoint,WebKit::WebPageProxy::selectPositionAtPoint(WebCore::IntPoint,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::selectPositionAtPoint(WebCore::IntPoint,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2152;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __int16 v25 = v12;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9D4860;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  unint64_t v19 = v25;
  __int16 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DBCE90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4860;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4860;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2533;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v31 = v12;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, *(int **)a2);
  char v13 = *(unsigned char *)(a2 + 8);
  char v14 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
  if (!v15 || (*char v14 = v13, v16 = *(unsigned char *)(a2 + 9), v17 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1), !v18))
  {
    __break(0xC471u);
    JUMPOUT(0x198DBD28CLL);
  }
  unsigned char *v17 = v16;
  uint64_t v19 = *a3;
  *a3 = 0;
  char v20 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v20 = &unk_1EE9D4888;
  v20[1] = v19;
  uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v29[0] = v20;
  v29[1] = v21;
  char v30 = 1;
  int v23 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v31, a5, (uint64_t)v29, a6);
  if (v30)
  {
    uint64_t v24 = v29[0];
    v29[0] = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  __int16 v25 = v31;
  char v31 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v22);
    WTF::fastFree(v27, v28);
  }
  if (v23) {
    return v21;
  }
  else {
    return 0;
  }
}

void sub_198DBD2B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4888;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4888;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2534;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  __int16 v25 = v12;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::TextGranularity,BOOL>,0ul,1ul,2ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v14 = &unk_1EE9D48B0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  __int16 v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DBD658(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D48B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D48B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2375;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9D48D8;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void sub_198DBD9E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D48D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D48D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WebKit::RevealItem>((uint64_t)&v16, a2);
    if (v19)
    {
      uint64_t v12 = v16;
      long long v13 = v17;
      uint64_t v5 = v18;
      uint64_t v16 = 0;
      uint64_t v18 = 0;
      uint64_t v14 = v5;
      char v15 = 1;
      std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v4);
    }
    else
    {
      LOBYTE(v12) = 0;
      char v15 = 0;
      std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v4);
      uint64_t v6 = *(WTF::StringImpl **)a2;
      uint64_t v9 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v10 = *((void *)a2 + 3);
      if (v10 && v9) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v10 + 16))(v10, v6);
      }
    }
    if (v15)
    {
      WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>::operator()(v2);
      return std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v11);
    }
    else
    {
      std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v6);
      return IPC::Connection::cancelReply<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(v2);
    }
  }
  else
  {
    unsigned __int16 v7 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(v7);
  }
}

void sub_198DBDCA4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::RequestRVItemInCurrentSelectedRange,WTF::CompletionHandler<void ()(WebKit::RevealItem const&)>>(uint64_t *a1)
{
  return 0;
}

void sub_198DBDD24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::RevealItem>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::RevealItem,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198DBDDDC(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(const void **)(a1 + 24);
    *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView(WebCore::IntPoint,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D4900;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView(WebCore::IntPoint,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D4900;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView(WebCore::IntPoint,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 && ((uint64_t v4 = *(void *)(v3 + 8)) != 0 ? (v5 = a2 == 0) : (v5 = 0), v5))
  {
    uint64_t v7 = *(void *)(v4 + 240);
    uint64_t v8 = *(void *)(*(void *)(v4 + 16) + 1928);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 2343;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v18 = v9;
    IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v9, (int *)(a1 + 16));
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    uint64_t v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v11 = &unk_1EE9D4928;
    *((void *)v11 + 1) = v10;
    v16[0] = v11;
    v16[1] = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    LOBYTE(cf[0]) = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v18, 0, (uint64_t)v16, 1);
    if (LOBYTE(cf[0]))
    {
      long long v13 = v16[0];
      v16[0] = 0;
      if (v13) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v13 + 8))(v13);
      }
    }
    unint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v16 = 0u;
    cf[0] = 0;
    WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()((uint64_t *)(a1 + 24));
    cf[1] = 0;
    unint64_t result = 0;
    v16[0] = 0;
  }
  return result;
}

void sub_198DBE130(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11, CFTypeRef cf, uint64_t a13, IPC::Encoder *a14)
{
  if (a11 && a9) {
    (*(void (**)(WTF::StringImpl *))(*(void *)a9 + 8))(a9);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4928;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4928;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(WTF::StringImpl **)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - (void)v4)
      {
        unint64_t v16 = 0;
        long long v17 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v18 = *((void *)a2 + 3);
        if (v18)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v18 + 16))(v18, v4, v5);
            unint64_t v16 = 0;
            char v20 = *(WTF::StringImpl **)a2;
            uint64_t v21 = *((void *)a2 + 1);
            uint64_t v22 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            long long v17 = 0;
            if (v22 && v21)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v22 + 16))(v22, v20, v21);
              long long v17 = *(WTF::StringImpl **)a2;
              unint64_t v16 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v16 = 0;
            long long v17 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          IPC::Decoder::decode<WebKit::RevealItem>((uint64_t)&v28, a2);
          if (v31)
          {
            uint64_t v24 = v28;
            long long v25 = v29;
            uint64_t v9 = v30;
            uint64_t v28 = 0;
            uint64_t v30 = 0;
            uint64_t v26 = v9;
            v23[0] = v7 != 0;
            char v27 = 1;
            std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v8);
LABEL_12:
            if (v27)
            {
              WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>::operator()(v2);
              return std::__optional_destruct_base<std::tuple<BOOL,WebKit::RevealItem>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v15);
            }
            else
            {
              std::__optional_destruct_base<std::tuple<BOOL,WebKit::RevealItem>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v10);
              return IPC::Connection::cancelReply<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(v2);
            }
          }
          v23[0] = 0;
          char v27 = 0;
          std::__optional_destruct_base<WebKit::RevealItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v8);
LABEL_11:
          uint64_t v10 = *(WTF::StringImpl **)a2;
          uint64_t v13 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v14 = *((void *)a2 + 3);
          if (v14 && v13) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v14 + 16))(v14, v10);
          }
          goto LABEL_12;
        }
        unint64_t v16 = v5;
        long long v17 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v19 = *((void *)a2 + 3);
      if (v19 && v16) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v19 + 16))(v19, v17);
      }
      v23[0] = 0;
      char v27 = 0;
      goto LABEL_11;
    }
  }
  uint64_t v11 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(v11);
}

void sub_198DBE564(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<std::tuple<BOOL,WebKit::RevealItem>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::PrepareSelectionForContextMenuWithLocationInView,WTF::CompletionHandler<void ()(BOOL,WebKit::RevealItem const&)>>(uint64_t *a1)
{
  return 0;
}

void sub_198DBE5E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::tuple<BOOL,WebKit::RevealItem>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleAutocorrectionContextRequest>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 2285;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  long long v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  long long v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DBE778(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionContext,WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4950;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionContext,WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4950;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetSelectionContext,WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String>>(a2, v7);
    if (v7[24])
    {
      WTF::CompletionHandler<void ()(WTF::String const&,WTF::String const&,WTF::String const&)>::operator()(v2);
      return std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
    }
    else
    {
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v3);
      return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage19GetSelectionContextEN3WTF17CompletionHandlerIFvRKNS5_6StringES9_S9_EEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSG_(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage19GetSelectionContextEN3WTF17CompletionHandlerIFvRKNS5_6StringES9_S9_EEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSG_(v6);
  }
}

void sub_198DBE960(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_198DBE9E4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      unint64_t result = v6;
      uint64_t v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

void sub_198DBEA7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (v9)
  {
    unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String,WTF::String>(a1, a2, (uint64_t *)&v8, (uint64_t)a3);
    if (v9)
    {
      unint64_t result = v8;
      uint64_t v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_198DBEB48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WTF::String,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v11);
  char v8 = v12;
  if (!v12)
  {
    *(unsigned char *)a4 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)a2 + 8) && *((unsigned char *)a3 + 8))
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v10;
    *(void *)(a4 + 16) = v11;
    char v8 = 1;
LABEL_6:
    *(unsigned char *)(a4 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage19GetSelectionContextEN3WTF17CompletionHandlerIFvRKNS5_6StringES9_S9_EEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1ELm2EEEEDaSG_(uint64_t *a1)
{
  return 0;
}

void sub_198DBECB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleTwoFingerTapAtPoint>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2287;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, *(int **)a2);
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::encode<IPC::Encoder>(v8, *(char **)(a2 + 8));
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, *(uint64_t **)(a2 + 16));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DBEE48(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char *a2)
{
  char v2 = *a2;
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = v2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  char v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v12 = 2401;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, *(int **)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, *(int **)(a2 + 8));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *(unsigned char *)(a2 + 16));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *(unsigned char *)(a2 + 17));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D4978;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DBF07C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4978;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4978;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::SelectWithTwoTouches,WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>>(WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (v9[0] = IPC::Decoder::decode<std::tuple<WebCore::IntPoint,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>>>(a2),
        v9[1] = v3,
        (v3 & 0xFF00000000) != 0))
  {
    unsigned __int8 v4 = BYTE2(v3);
    uint64_t v5 = v3;
    uint64_t v6 = BYTE1(v3);
    char v7 = v2;
  }
  else
  {
    v9[0] = 0;
    char v7 = v2;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unsigned __int8 v4 = 0;
  }
  return WTF::CompletionHandler<void ()(WebCore::IntPoint const&,WebKit::GestureType,WebKit::GestureRecognizerState,WTF::OptionSet<WebKit::SelectionFlags>)>::operator()(v7, (uint64_t)v9, v5, v6, v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestPositionInformation>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2374;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::InteractionInformationRequest,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DBF3A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartInteractionWithElementContextOrPosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2492;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::optional<WebCore::ElementContext>,void>::encode<IPC::Encoder,std::optional<WebCore::ElementContext> const&>(v8, *(void *)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v8, *(int **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DBF51C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopInteraction>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2497;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DBF670(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(IPC::Encoder *a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v5 = v4;
    char v7 = (uint64_t *)*((void *)a2 + 1);
    return (uint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformActionOnElement,WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0>(WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D49A0;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformActionOnElement,WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0>(WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D49A0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::PerformActionOnElement,WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0>(WebKit::WebPageProxy::performActionOnElement(unsigned int)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WTF::StringImpl **result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    uint64_t v4 = *((void *)v3 + 1);
    if (v4)
    {
      uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v4 + 1096), result + 2, a3);
      uint64_t v5 = *(void *)(v4 + 1096);
      if (v5)
      {
        unint64_t v6 = (WTF::StringImpl **)(v5 + 8 * *(unsigned int *)(v5 - 4));
        if (v6 == result) {
          return result;
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        unint64_t v6 = 0;
      }
      if (v6 != result)
      {
        return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(v4 + 1096), result);
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PerformActionOnElements>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2332;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v21 = v8;
  int v9 = *a2;
  uint64_t v10 = (_DWORD *)IPC::Encoder::grow(v8, 4uLL, 4);
  if (v11 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v10 = v9;
    IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, *((void *)a2 + 1));
    LOBYTE(v19) = 0;
    char v20 = 0;
    uint64_t v13 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, a4, (uint64_t)&v19, 1);
    if (v20)
    {
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v15 = v21;
    uint64_t v21 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v12);
      WTF::fastFree(v17, v18);
    }
    return v13;
  }
  return result;
}

void sub_198DBFA54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = 80 * v5;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(a1, v6);
      v6 += 80;
      v7 -= 80;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationDidFinishSnapshottingAfterEnteringBackground>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2143;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DBFC08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationWillResignActive>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2146;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DBFD58(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelection,WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D49C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelection,WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D49C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelection,WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::extendSelection(WebCore::TextGranularity,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  unint64_t result = (uint64_t *)(a1 + 8);
  if (*result) {
    return (uint64_t *)WTF::CompletionHandler<void ()(void)>::operator()(result);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectWordBackward>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2402;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  unint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DBFFB4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  unint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v11 = 2240;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9D49F0;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void sub_198DC0154(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D49F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D49F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2270;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v28 = v12;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v12, *(unsigned char *)a2);
  int v13 = *(_DWORD *)(a2 + 4);
  uint64_t v14 = (_DWORD *)IPC::Encoder::grow(v12, 4uLL, 4);
  if (v15 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v14 = v13;
    uint64_t v16 = *a3;
    *a3 = 0;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v17 = &unk_1EE9D4A18;
    v17[1] = v16;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v26[0] = v17;
    v26[1] = v18;
    char v27 = 1;
    int v20 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a5, (uint64_t)v26, a6);
    if (v27)
    {
      uint64_t v21 = v26[0];
      v26[0] = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
    uint64_t v22 = v28;
    uint64_t v28 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v19);
      WTF::fastFree(v24, v25);
    }
    if (v20) {
      return v18;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_198DC049C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4A18;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4A18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v5, a2), v7))
  {
    uint64_t result = (WTF *)WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(v2);
    if (v7)
    {
      uint64_t result = v5;
      if (v5)
      {
        uint64_t v5 = 0;
        int v6 = 0;
        return (WTF *)WTF::fastFree(result, v4);
      }
    }
  }
  else
  {
    return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  }
  return result;
}

void sub_198DC06D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::GetRectsForGranularityWithSelectionOffset,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  return 0;
}

void sub_198DC073C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, unint64_t *a2)
{
  unint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)v8);
  if (v9)
  {
    *(void *)a1 = v8[0];
    *(void *)(a1 + 8) = v8[1];
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    unint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2269;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(v12, a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D4A40;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DC0958(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4A40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4A40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v5, a2), v7))
  {
    unint64_t result = (WTF *)WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(v2);
    if (v7)
    {
      unint64_t result = v5;
      if (v5)
      {
        unint64_t v5 = 0;
        int v6 = 0;
        return (WTF *)WTF::fastFree(result, v4);
      }
    }
  }
  else
  {
    return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
  }
  return result;
}

void sub_198DC0B8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::GetRectsAtSelectionOffsetWithText,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  return 0;
}

void sub_198DC0BF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StoreSelectionForAccessibility>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2502;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC0D20(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartAutoscrollAtPosition>(uint64_t a1, float **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2491;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC0E8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelAutoscroll>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2155;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DC0FE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::MoveSelectionByOffset,WebKit::WebPageProxy::moveSelectionByOffset(int,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::moveSelectionByOffset(int,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D4A68;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D4A68;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::MoveSelectionByOffset,WebKit::WebPageProxy::moveSelectionByOffset(int,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::moveSelectionByOffset(int,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WillStartUserTriggeredZooming>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2552;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DC1240(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PotentialTapAtPosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2340;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v21 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *(float **)(a2 + 8));
  char v9 = *(unsigned char *)(a2 + 16);
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v11)
  {
    unsigned char *v10 = v9;
    LOBYTE(v19) = 0;
    char v20 = 0;
    uint64_t v13 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, a4, (uint64_t)&v19, 1);
    if (v20)
    {
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v15 = v21;
    uint64_t v21 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v12);
      WTF::fastFree(v17, v18);
    }
    return v13;
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198DC13F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CommitPotentialTap>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2172;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::encode<IPC::Encoder>(v8, *(char **)a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v8, **(_DWORD **)(a2 + 16));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC1578(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelPotentialTap>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2157;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DC16CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::TapHighlightAtPosition>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2511;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *(float **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC1840(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AttemptSyntheticClick>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2148;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC19AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)a2);
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::encode<IPC::Encoder>(a1, *(char **)(a2 + 8));
  uint64_t v4 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v4);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRecognizeLongPress>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2212;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DC1B50(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleDoubleTapForDoubleClickAtPoint>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2286;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WTF::OptionSet<WebKit::WebEventModifier> const&,WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC1CB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InspectorNodeSearchMovedToPosition>(uint64_t a1, float **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2302;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC1E24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InspectorNodeSearchEndedAtPosition>(uint64_t a1, float **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2301;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC1F90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BlurFocusedElement>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2153;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DC20E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsShowingInputViewForFocusedElement>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2438;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC224C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AutofillLoginCredentials>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2149;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC23C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusNextFocusedElement,WebKit::WebPageProxy::focusNextFocusedElement(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::focusNextFocusedElement(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D4A90;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D4A90;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 16), 0);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusNextFocusedElement,WebKit::WebPageProxy::focusNextFocusedElement(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebPageProxy::focusNextFocusedElement(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFocusedElementValue>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2430;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(v8, *(void *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC2648(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFocusedElementSelectedIndex>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2429;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v24 = v8;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(v8, *(void *)a2);
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = (_DWORD *)IPC::Encoder::grow(v8, 4uLL, 4);
  if (v11 <= 3 || (_DWORD *v10 = v9, v12 = *(unsigned char *)(a2 + 12), v13 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1), !v14))
  {
    __break(0xC471u);
    JUMPOUT(0x198DC280CLL);
  }
  *uint64_t v13 = v12;
  LOBYTE(v22) = 0;
  char v23 = 0;
  uint64_t v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a4, (uint64_t)&v22, 1);
  if (v23)
  {
    uint64_t v17 = v22;
    uint64_t v22 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  return v16;
}

void sub_198DC2830(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GenerateSyntheticEditingCommand>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2254;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v21 = v8;
  char v9 = *a2;
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v11)
  {
    unsigned char *v10 = v9;
    LOBYTE(v19) = 0;
    char v20 = 0;
    uint64_t v13 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, a4, (uint64_t)&v19, 1);
    if (v20)
    {
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v15 = v21;
    uint64_t v21 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v12);
      WTF::fastFree(v17, v18);
    }
    return v13;
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_198DC29CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HardwareKeyboardAvailabilityChanged>(uint64_t a1, char **a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2289;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebKit::HardwareKeyboardState,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC2B34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2369;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  char v24 = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v13 = &unk_1EE9D4AB8;
  v13[1] = v12;
  uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v22[0] = v13;
  v22[1] = v14;
  char v23 = 1;
  int v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    uint64_t v17 = v22[0];
    v22[0] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = v24;
  char v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v20, v21);
  }
  if (v16) {
    return v14;
  }
  else {
    return 0;
  }
}

void sub_198DC2CD8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4AB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4AB8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v6);
    if (v8)
    {
      uint64_t result = (WTF *)WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(v2);
      if (v8)
      {
        uint64_t result = v6;
        if (v6)
        {
          int v6 = 0;
          int v7 = 0;
          return (WTF *)WTF::fastFree(result, v4);
        }
      }
    }
    else
    {
      return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
    }
  }
  else
  {
    unint64_t v5 = (uint64_t *)(a1 + 8);
    return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v5);
  }
  return result;
}

void sub_198DC2F14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::RequestEvasionRectsAboveSelection,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  return 0;
}

void sub_198DC2F80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2532;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v12, *a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v12, a2[1]);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D4AE0;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DC3104(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4AE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4AE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UpdateSelectionWithDelta,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestDocumentEditingContext,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2367;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  long long v25 = v12;
  IPC::ArgumentCoder<WebKit::DocumentEditingContextRequest,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D4B08;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  long long v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DC3410(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestDocumentEditingContext,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>>(WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4B08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestDocumentEditingContext,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>>(WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4B08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::RequestDocumentEditingContext,WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>>(WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::ArgumentCoder<WebKit::DocumentEditingContext,void>::decode(a2, v16);
    if (v17
      || (uint64_t v4 = *(void **)a2,
          uint64_t v9 = *((void *)a2 + 1),
          *(void *)a2 = 0,
          *((void *)a2 + 1) = 0,
          (uint64_t v10 = *((void *)a2 + 3)) != 0)
      && v9
      && ((*(void (**)(uint64_t, void *))(*(void *)v10 + 16))(v10, v4), v17))
    {
      WebKit::DocumentEditingContext::DocumentEditingContext((uint64_t)v14, (uint64_t)v16);
      char v5 = 1;
    }
    else
    {
      char v5 = 0;
      v14[0] = 0;
    }
    char v15 = v5;
    std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v4);
    if (v15
      || (uint64_t v11 = *(void **)a2,
          uint64_t v12 = *((void *)a2 + 1),
          *(void *)a2 = 0,
          *((void *)a2 + 1) = 0,
          (uint64_t v13 = *((void *)a2 + 3)) != 0)
      && v12
      && ((*(void (**)(uint64_t, void *))(*(void *)v13 + 16))(v13, v11), v15))
    {
      WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(v2);
      return std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v6);
    }
    else
    {
      std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v11);
      return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage29RequestDocumentEditingContextEN3WTF17CompletionHandlerIFvON6WebKit22DocumentEditingContextEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSG_(v2);
    }
  }
  else
  {
    char v8 = (uint64_t *)(a1 + 8);
    return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage29RequestDocumentEditingContextEN3WTF17CompletionHandlerIFvON6WebKit22DocumentEditingContextEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSG_(v8);
  }
}

void sub_198DC3710(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__optional_destruct_base<WebKit::DocumentEditingContext,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 248))
  {
    uint64_t v3 = *(WTF **)(a1 + 232);
    if (v3)
    {
      *(void *)(a1 + 232) = 0;
      *(_DWORD *)(a1 + 240) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(WTF **)(a1 + 216);
    if (v4)
    {
      *(void *)(a1 + 216) = 0;
      *(_DWORD *)(a1 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      WTF::fastFree(v4, a2);
    }
    MEMORY[0x199732DE0](a1 + 160);
    MEMORY[0x199732DE0](a1 + 120);
    MEMORY[0x199732DE0](a1 + 80);
    MEMORY[0x199732DE0](a1 + 40);
    MEMORY[0x199732DE0](a1);
  }
  return a1;
}

uint64_t _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage29RequestDocumentEditingContextEN3WTF17CompletionHandlerIFvON6WebKit22DocumentEditingContextEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSG_(uint64_t *a1)
{
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v6);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v7);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v8);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v9);
  WebCore::AttributedString::AttributedString((WebCore::AttributedString *)v10);
  long long v12 = 0u;
  long long v11 = 0u;
  *(_OWORD *)&unsigned char v10[40] = 0u;
  WTF::CompletionHandler<void ()(WebKit::DocumentEditingContext &&)>::operator()(a1);
  uint64_t v3 = (WTF *)v12;
  if ((void)v12)
  {
    *(void *)&long long v12 = 0;
    DWORD2(v12) = 0;
    WTF::fastFree(v3, v2);
  }
  uint64_t v4 = (WTF *)v11;
  if ((void)v11)
  {
    *(void *)&long long v11 = 0;
    DWORD2(v11) = 0;
    WTF::fastFree(v4, v2);
  }
  MEMORY[0x199732DE0](v10);
  MEMORY[0x199732DE0](v9);
  MEMORY[0x199732DE0](v8);
  MEMORY[0x199732DE0](v7);
  return MEMORY[0x199732DE0](v6);
}

void sub_198DC38A4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38,WTF *a39,int a40)
{
  int v45 = a39;
  if (a39)
  {
    a39 = 0;
    a40 = 0;
    WTF::fastFree(v45, a2);
  }
  uint64_t v46 = a37;
  if (a37)
  {
    a37 = 0;
    a38 = 0;
    WTF::fastFree(v46, a2);
  }
  MEMORY[0x199732DE0](v43);
  MEMORY[0x199732DE0](v42);
  MEMORY[0x199732DE0](v41);
  MEMORY[0x199732DE0](v40);
  MEMORY[0x199732DE0](&a10);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestDragStart>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2368;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  long long v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC3A28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, *(int **)(a2 + 8));
  char v4 = **(unsigned char **)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestAdditionalItemsForDragSession>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 2365;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::IntPoint const&,WebCore::IntPoint const&,WTF::OptionSet<WebCore::DragSourceAction> const&>,0ul,1ul,2ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  long long v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC3C0C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4B30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4B30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::InsertDroppedImagePlaceholders,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v27);
    if (!v29)
    {
      LOBYTE(v24[0]) = 0;
      char v26 = 0;
LABEL_31:
      if (v26
        || (char v20 = (void *)*a2, v21 = a2[1], *a2 = 0, a2[1] = 0, (v22 = a2[3]) != 0)
        && v21
        && ((*(void (**)(unint64_t, void *))(*(void *)v22 + 16))(v22, v20), v26))
      {
        std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v30, (uint64_t)v25);
        WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(v2, (uint64_t)v24, (uint64_t)v30);
        if (v37)
        {
          if ((v36 & 0x8000000000000) != 0)
          {
            uint64_t v19 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, v14);
            }
          }
          char v15 = v35;
          uint64_t v35 = 0;
          if (v15)
          {
            if (v15[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
            }
            else {
              --v15[2];
            }
          }
          uint64_t v16 = v34;
          char v34 = 0;
          if (v16)
          {
            if (v16[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
            }
            else {
              --v16[2];
            }
          }
          char v17 = v33;
          uint64_t v33 = 0;
          if (v17)
          {
            if (v17[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v17 + 8))(v17);
            }
            else {
              --v17[2];
            }
          }
          uint64_t v18 = v31;
          if (v31)
          {
            char v31 = 0;
            int v32 = 0;
            WTF::fastFree(v18, v14);
          }
        }
        return (WTF *)std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WebCore::TextIndicatorData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v14);
      }
      else
      {
        std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WebCore::TextIndicatorData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v20);
        return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN3WTF17CompletionHandlerIFvRKNS5_6VectorIN7WebCore7IntRectELm0ENS5_15CrashOnOverflowELm16ENS5_10FastMallocEEENSt3__18optionalINS8_17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNSF_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSO_(v2);
      }
    }
    IPC::Decoder::decode<std::optional<WebCore::TextIndicatorData>>(a2, v30);
    if (v38)
    {
      uint64_t v5 = v29;
      if (!v29)
      {
        __break(1u);
        goto LABEL_54;
      }
      v24[0] = v27;
      uint64_t v6 = v28;
      char v27 = 0;
      uint64_t v28 = 0;
      v24[1] = v6;
      std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v25, (uint64_t)v30);
      char v26 = 1;
      if (v38 && v37)
      {
        uint64_t v5 = v36;
        if ((v36 & 0x8000000000000) == 0)
        {
LABEL_9:
          int v7 = v35;
          uint64_t v35 = 0;
          if (v7)
          {
            if (v7[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
            }
            else {
              --v7[2];
            }
          }
          uint64_t v10 = v34;
          char v34 = 0;
          if (v10)
          {
            if (v10[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
            }
            else {
              --v10[2];
            }
          }
          uint64_t v11 = v33;
          uint64_t v33 = 0;
          if (v11)
          {
            if (v11[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
            }
            else {
              --v11[2];
            }
          }
          long long v12 = v31;
          if (v31)
          {
            char v31 = 0;
            int v32 = 0;
            WTF::fastFree(v12, v4);
          }
          goto LABEL_28;
        }
LABEL_54:
        char v23 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v23);
          WTF::fastFree((WTF *)v23, v4);
        }
        goto LABEL_9;
      }
    }
    else
    {
      LOBYTE(v24[0]) = 0;
      char v26 = 0;
    }
LABEL_28:
    if (v29)
    {
      uint64_t v13 = v27;
      if (v27)
      {
        char v27 = 0;
        LODWORD(v28) = 0;
        WTF::fastFree(v13, v4);
      }
    }
    goto LABEL_31;
  }
  char v8 = (uint64_t *)(a1 + 8);

  return _ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN3WTF17CompletionHandlerIFvRKNS5_6VectorIN7WebCore7IntRectELm0ENS5_15CrashOnOverflowELm16ENS5_10FastMallocEEENSt3__18optionalINS8_17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNSF_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSO_(v8);
}

void sub_198DC4104(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF *a28,int a29,int a30,char a31)
{
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF *)a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_198DC43FC(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    char v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::VectorArgumentCoder<false,WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v26 = a1[3];
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v26 + 16))(v26, v6, v5);
        unint64_t v25 = *a1;
        unint64_t v24 = a1[1];
      }
      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = 0;
      }
    }
    goto LABEL_29;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    unint64_t v24 = v5;
    unint64_t v25 = 0;
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF *)a1[3];
    if (result)
    {
      if (v24) {
        unint64_t result = (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v25);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v10 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v28);
      if (!v29) {
        break;
      }
      uint64_t v18 = HIDWORD(v31);
      if (HIDWORD(v31) == v31)
      {
        uint64_t v19 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v28);
        uint64_t v18 = HIDWORD(v31);
        char v20 = v30;
        long long v21 = *v19;
      }
      else
      {
        char v20 = v30;
        long long v21 = v28;
      }
      *((_OWORD *)v20 + v18) = v21;
      unint64_t v22 = ++HIDWORD(v31);
      if (!--v10)
      {
        WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v30, v22);
        *(void *)a3 = v30;
        uint64_t v27 = v31;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        *(void *)(a3 + 8) = v27;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      int v15 = 0;
      int v17 = 0;
      uint64_t v16 = 0;
LABEL_17:
      uint64_t v30 = 0;
      *(void *)a3 = v16;
      HIDWORD(v31) = 0;
      *(_DWORD *)(a3 + 8) = v17;
      *(_DWORD *)(a3 + 12) = v15;
LABEL_18:
      *(unsigned char *)(a3 + 16) = 1;
      goto LABEL_25;
    }
    LODWORD(v31) = v10;
    uint64_t v30 = (WTF *)WTF::fastMalloc((WTF *)(16 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebCore::IntRect>(a1, (uint64_t)&v28);
      if (!v29) {
        break;
      }
      uint64_t v11 = HIDWORD(v31);
      if (HIDWORD(v31) == v31)
      {
        long long v12 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v30, HIDWORD(v31) + 1, (unint64_t)&v28);
        uint64_t v11 = HIDWORD(v31);
        uint64_t v13 = v30;
        long long v14 = *v12;
      }
      else
      {
        uint64_t v13 = v30;
        long long v14 = v28;
      }
      *((_OWORD *)v13 + v11) = v14;
      int v15 = ++HIDWORD(v31);
      if (!--v10)
      {
        uint64_t v16 = v30;
        int v17 = v31;
        goto LABEL_17;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
LABEL_25:
  unint64_t result = v30;
  if (v30)
  {
    uint64_t v30 = 0;
    LODWORD(v31) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_198DC4684(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13) {
    WTF::fastFree(a13, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::optional<WebCore::TextIndicatorData>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(unsigned char *)(a1 + 128)) {
      WebCore::TextIndicatorData::~TextIndicatorData((WebCore::TextIndicatorData *)(a1 + 16), a2);
    }
    uint64_t v3 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  return a1;
}

WTF *_ZZN3IPC10Connection11cancelReplyIN8Messages7WebPage30InsertDroppedImagePlaceholdersEN3WTF17CompletionHandlerIFvRKNS5_6VectorIN7WebCore7IntRectELm0ENS5_15CrashOnOverflowELm16ENS5_10FastMallocEEENSt3__18optionalINS8_17TextIndicatorDataEEEEEEEEvOT0_ENKUlTpTnmNSF_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSO_(uint64_t *a1)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v8[0] = 0;
  char v15 = 0;
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(a1, (uint64_t)&v16, (uint64_t)v8);
  if (v15)
  {
    if ((v14 & 0x8000000000000) != 0)
    {
      unint64_t v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v1);
      }
    }
    uint64_t v2 = v13;
    uint64_t v13 = 0;
    if (v2)
    {
      if (v2[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
      }
      else {
        --v2[2];
      }
    }
    uint64_t v3 = v12;
    long long v12 = 0;
    if (v3)
    {
      if (v3[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      else {
        --v3[2];
      }
    }
    char v4 = v11;
    uint64_t v11 = 0;
    if (v4)
    {
      if (v4[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
      }
      else {
        --v4[2];
      }
    }
    unint64_t v5 = v9;
    if (v9)
    {
      uint64_t v9 = 0;
      int v10 = 0;
      WTF::fastFree(v5, v1);
    }
  }
  unint64_t result = v16;
  if (v16)
  {
    uint64_t v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v1);
  }
  return result;
}

void sub_198DC485C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      uint64_t v27 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  unint64_t v26 = *(WTF **)(v24 - 32);
  if (v26)
  {
    *(void *)(v24 - 32) = 0;
    *(_DWORD *)(v24 - 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    WTF::fastFree(v26, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::Function<void ()(WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WebCore::TextIndicatorData>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v11, a3);
  unint64_t result = (WTF *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v4 + 16))(v4, a2, v11);
  if (v18)
  {
    if ((v17 & 0x8000000000000) != 0)
    {
      int v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v6);
      }
    }
    unint64_t v7 = v16;
    uint64_t v16 = 0;
    if (v7)
    {
      if (v7[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
      }
      else {
        --v7[2];
      }
    }
    BOOL v8 = v15;
    char v15 = 0;
    if (v8)
    {
      if (v8[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
      }
      else {
        --v8[2];
      }
    }
    uint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9)
    {
      if (v9[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
      }
      else {
        --v9[2];
      }
    }
    unint64_t result = v12;
    if (v12)
    {
      long long v12 = 0;
      int v13 = 0;
      return (WTF *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

void sub_198DC4B04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      unint64_t v25 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidConcludeDrop>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2203;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198DC4D10(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Function<void ()(WTF::String const&)>::Function<WTF::CompletionHandler<void ()(WTF::String const&)>,void>(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v5 = *a2;
  *a2 = 0;
  *uint64_t v4 = &unk_1EE9D4B58;
  v4[1] = v5;
  if (v5)
  {
    *a1 = v4;
    return (uint64_t)a1;
  }
  else
  {
    uint64_t result = 139;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String const&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4B58;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4B58;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::String const&)>,void,WTF::String const&>::call(uint64_t a1, WTF::RefCountedBase *a2)
{
  return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 8), a2);
}

uint64_t WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    uint64_t v5 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      unint64_t v7 = *(void ***)a2;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v5, v7++)+ 1;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198DC4F64(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, float **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  long long v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v12 = 2512;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  unint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D4B80;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v25;
  unint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DC50DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4B80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4B80;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v11);
    if (v12)
    {
      uint64_t v10 = v11;
      WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(v2);
      uint64_t result = (uint64_t)v10;
      if (v10) {
        return WTF::fastFree(v10, v4);
      }
    }
    else
    {
      unint64_t v7 = *a2;
      unint64_t v8 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      unint64_t v9 = a2[3];
      if (v9 && v8) {
        (*(void (**)(unint64_t, unint64_t))(*(void *)v9 + 16))(v9, v7);
      }
      return IPC::Connection::cancelReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(v6);
  }
  return result;
}

void sub_198DC5378(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12)
{
  if (a12)
  {
    if (a9) {
      WTF::fastFree(a9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::TextInputContextsInRect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t *a1)
{
  return 0;
}

void sub_198DC53E4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_198DC5474(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::VectorArgumentCoder<false,WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v26 = a1[3];
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v26 + 16))(v26, v6, v5);
        unint64_t v25 = *a1;
        unint64_t v24 = a1[1];
      }
      else
      {
        unint64_t v24 = 0;
        unint64_t v25 = 0;
      }
    }
    goto LABEL_20;
  }
  unint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    unint64_t v24 = v5;
    unint64_t v25 = 0;
LABEL_20:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF *)a1[3];
    if (result)
    {
      if (v24) {
        uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v25);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  unsigned __int8 v39 = 0;
  uint64_t v40 = 0;
  if (v10 >= 0x3333)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ElementContext>(a1, (uint64_t)&v41);
      if (!v46) {
        break;
      }
      int v28 = HIDWORD(v40);
      if (HIDWORD(v40) == v40)
      {
        char v29 = (_OWORD *)WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v41);
        int v28 = HIDWORD(v40);
        uint64_t v30 = (_OWORD *)((char *)v39 + 80 * HIDWORD(v40));
        long long v31 = v29[4];
        long long v33 = v29[1];
        long long v32 = v29[2];
        v30[3] = v29[3];
        v30[4] = v31;
        v30[1] = v33;
        v30[2] = v32;
        _OWORD *v30 = *v29;
      }
      else
      {
        char v34 = (_OWORD *)((char *)v39 + 80 * HIDWORD(v40));
        long long v35 = v45;
        long long v37 = v42;
        long long v36 = v43;
        v34[3] = v44;
        void v34[4] = v35;
        v34[1] = v37;
        v34[2] = v36;
        *char v34 = v41;
      }
      HIDWORD(v40) = v28 + 1;
      if (!--v10)
      {
        WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v39, (v28 + 1));
        *(void *)a3 = v39;
        uint64_t v38 = v40;
        unsigned __int8 v39 = 0;
        uint64_t v40 = 0;
        *(void *)(a3 + 8) = v38;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      int v22 = 0;
      int v23 = 0;
      uint64_t v13 = 0;
LABEL_17:
      unsigned __int8 v39 = 0;
      *(void *)a3 = v13;
      HIDWORD(v40) = 0;
      *(_DWORD *)(a3 + 8) = v23;
      *(_DWORD *)(a3 + 12) = v22;
LABEL_18:
      *(unsigned char *)(a3 + 16) = 1;
      goto LABEL_29;
    }
    LODWORD(v40) = 80 * (int)v10 / 0x50u;
    unsigned __int8 v39 = (WTF *)WTF::fastMalloc((WTF *)(80 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ElementContext>(a1, (uint64_t)&v41);
      if (!v46) {
        break;
      }
      int v11 = HIDWORD(v40);
      if (HIDWORD(v40) == v40)
      {
        char v12 = (_OWORD *)WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v41);
        int v11 = HIDWORD(v40);
        uint64_t v13 = v39;
        uint64_t v14 = (_OWORD *)((char *)v39 + 80 * HIDWORD(v40));
        long long v15 = v12[4];
        long long v17 = v12[1];
        long long v16 = v12[2];
        v14[3] = v12[3];
        v14[4] = v15;
        v14[1] = v17;
        void v14[2] = v16;
        *uint64_t v14 = *v12;
      }
      else
      {
        uint64_t v13 = v39;
        uint64_t v18 = (_OWORD *)((char *)v39 + 80 * HIDWORD(v40));
        long long v19 = v45;
        long long v21 = v42;
        long long v20 = v43;
        void v18[3] = v44;
        v18[4] = v19;
        v18[1] = v21;
        void v18[2] = v20;
        *uint64_t v18 = v41;
      }
      int v22 = v11 + 1;
      HIDWORD(v40) = v22;
      if (!--v10)
      {
        int v23 = v40;
        goto LABEL_17;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
LABEL_29:
  uint64_t result = v39;
  if (v39)
  {
    unsigned __int8 v39 = 0;
    LODWORD(v40) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_198DC579C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x3333334)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = *(unsigned int *)(result + 12);
    int v5 = 80 * a2;
    uint64_t v6 = (_OWORD *)WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = 80 * v4;
      unint64_t v9 = v3;
      do
      {
        *uint64_t v6 = *(_OWORD *)v9;
        long long v10 = *((_OWORD *)v9 + 1);
        long long v11 = *((_OWORD *)v9 + 2);
        long long v12 = *((_OWORD *)v9 + 4);
        v6[3] = *((_OWORD *)v9 + 3);
        v6[4] = v12;
        v6[1] = v10;
        void v6[2] = v11;
        v6 += 5;
        unint64_t v9 = (WTF *)((char *)v9 + 80);
        v8 -= 80;
      }
      while (v8);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned int *)(result + 12);
    if (v3 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v3) = a2;
    }
    uint64_t v4 = *(WTF **)result;
    if (a2)
    {
      if (a2 >= 0x3333334)
      {
        __break(0xC471u);
        return result;
      }
      int v5 = 80 * a2;
      uint64_t result = WTF::fastMalloc((WTF *)(80 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
      *(void *)uint64_t v2 = result;
      if (v3 && (WTF *)result != v4)
      {
        uint64_t v6 = 80 * v3;
        unint64_t v7 = v4;
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v7;
          long long v8 = *((_OWORD *)v7 + 1);
          long long v9 = *((_OWORD *)v7 + 2);
          long long v10 = *((_OWORD *)v7 + 4);
          *(_OWORD *)(result + 48) = *((_OWORD *)v7 + 3);
          *(_OWORD *)(result + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
          *(_OWORD *)(result + 16) = v8;
          *(_OWORD *)(result + 32) = v9;
          result += 80;
          unint64_t v7 = (WTF *)((char *)v7 + 80);
          v6 -= 80;
        }
        while (v6);
      }
    }
    if (v4)
    {
      if (*(WTF **)v2 == v4)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  long long v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v12 = 2249;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  unint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode(v12, *(void *)a2);
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v12, *(int **)(a2 + 8));
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D4BA8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  long long v19 = v25;
  unint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DC5BB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4BA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4BA8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetShouldRevealCurrentSelectionAfterInsertion>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  long long v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v8 = 2468;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  long long v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_198DC5F10(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::willOpenAppLink(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D4BD0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::willOpenAppLink(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D4BD0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WebKit::ProcessThrottlerActivity *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::willOpenAppLink(void)::$_0,void>::call(WebKit::ProcessThrottlerActivity *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v2 + 616), 0);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ShouldDismissKeyboardAfterTapAtPoint,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, float **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  long long v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v12 = 2487;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  unint64_t v25 = v12;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v12, *a2);
  uint64_t v13 = *a3;
  *a3 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9D4BF8;
  v14[1] = v13;
  uint64_t v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v23[0] = v14;
  v23[1] = v15;
  char v24 = 1;
  int v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    uint64_t v18 = v23[0];
    v23[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  long long v19 = v25;
  unint64_t v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v21, v22);
  }
  if (v17) {
    return v15;
  }
  else {
    return 0;
  }
}

void sub_198DC61C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldDismissKeyboardAfterTapAtPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D4BF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldDismissKeyboardAfterTapAtPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D4BF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::ShouldDismissKeyboardAfterTapAtPoint,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::platformInitialize(void)::$_0,BOOL,BOOL>::call(uint64_t a1, uint64_t a2)
{
  {
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
  }
  uint64_t v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)&WebKit::WebProcessProxy::globalPageMap(void)::pageMap);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  if (WebKit::WebProcessProxy::globalPageMap(void)::pageMap) {
    uint64_t v7 = WebKit::WebProcessProxy::globalPageMap(void)::pageMap
  }
       + 16 * *(unsigned int *)(WebKit::WebProcessProxy::globalPageMap(void)::pageMap - 4);
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v3) {
    return 0;
  }
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(v4[1] + 8);
    if (!v8)
    {
      if (v9)
      {
        uint64_t v8 = v9 - 16;
        CFRetain(*(CFTypeRef *)(v9 - 8));
      }
      else
      {
        uint64_t v8 = 0;
      }
      goto LABEL_16;
    }
    uint64_t v10 = v9 - 16;
    if (v9) {
      uint64_t v11 = v9 - 16;
    }
    else {
      uint64_t v11 = 0;
    }
    if ((*(_WORD *)(*(void *)(v11 + 32) + 64) & 4) != 0)
    {
      if (v9) {
        CFRetain(*(CFTypeRef *)(v9 - 8));
      }
      CFRelease(*(CFTypeRef *)(v8 + 8));
      uint64_t v8 = v10;
      goto LABEL_28;
    }
LABEL_16:
    while (1)
    {
      v4 += 2;
      if (v4 == v6) {
        break;
      }
      if ((unint64_t)(*v4 + 1) > 1) {
        goto LABEL_20;
      }
    }
    uint64_t v4 = v6;
LABEL_20:
    ;
  }
  while (v4 != (void *)v7);
  if (!v8) {
    return 0;
  }
LABEL_28:
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 104) + 480))(*(void *)(v8 + 104), a2);
  CFRelease(*(CFTypeRef *)(v8 + 8));
  return v12;
}

void sub_198DC6580(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

unint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(uint64_t a1)
{
  (*(void (**)(WTF **__return_ptr))(*(void *)a1 + 64))(&v6);
  uint64_t v3 = (unsigned int *)v6;
  if (v6)
  {
    unint64_t v4 = *((void *)v6 + 1);
    unint64_t v1 = v4 >> 8;
    uint64_t v6 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  else
  {
    LOBYTE(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  }
  return v4 | (v1 << 8);
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 192))(&v26);
  if (!v26 || !*(void *)(v26 + 8))
  {
    *a3 = 0;
    a3[80] = 0;
    goto LABEL_45;
  }
  if (*(unsigned char *)(a2 + 24))
  {
    (*(void (**)(WTF **__return_ptr, uint64_t, void))(*(void *)a1 + 192))(&v13, a1, *(void *)(a2 + 16));
    uint64_t v7 = v13;
    if (!v13 || !*((void *)v13 + 1)) {
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  v23[0] = 0;
  char v25 = 0;
  if (!*(unsigned char *)(a2 + 72))
  {
LABEL_26:
    uint64_t v8 = *(void *)(v26 + 8);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), v8);
    uint64_t v9 = *(atomic_uint **)(v8 + 16);
    atomic_fetch_add(v9, 1u);
    uint64_t v13 = (WTF *)v9;
    int v14 = *(_DWORD *)(a2 + 8);
    char v15 = *(unsigned char *)(a2 + 12);
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)v7, 1u);
    }
    uint64_t v16 = v7;
    v17[0] = 0;
    char v21 = 0;
    if (v25)
    {
      int v20 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, (uint64_t)v23);
      char v21 = 1;
    }
    __int16 v22 = *(_WORD *)(a2 + 80);
    std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::RenderPassColorAttachment>((uint64_t)a3, (uint64_t *)&v13);
    if (v21)
    {
      if (v20 != -1) {
        ((void (*)(unsigned char **, unsigned char *))off_1EE9D4C58[v20])(&v27, v17);
      }
      int v20 = -1;
    }
    uint64_t v10 = (unsigned int *)v16;
    uint64_t v16 = 0;
    if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v6);
    }
    uint64_t v11 = (unsigned int *)v13;
    uint64_t v13 = 0;
    if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v6);
    }
    if (v25 && v24 != -1) {
      ((void (*)(WTF **, unsigned char *))off_1EE9D4C58[v24])(&v13, v23);
    }
    goto LABEL_42;
  }
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2 + 32, (uint64_t)&v13);
  if (v25 != v19)
  {
    if (v25)
    {
      if (v24 != -1) {
        ((void (*)(unsigned char **, unsigned char *))off_1EE9D4C58[v24])(&v27, v23);
      }
      int v24 = -1;
      char v25 = 0;
    }
    else
    {
      v23[0] = 0;
      int v24 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, (uint64_t)&v13);
      char v25 = 1;
    }
    goto LABEL_22;
  }
  if (!v25) {
    goto LABEL_25;
  }
  if (v24 == -1)
  {
    if (v18 == -1) {
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v27 = v23;
    ((void (*)(unsigned char **, unsigned char *, WTF **))off_1EE9D4C68[v18])(&v27, v23, &v13);
    goto LABEL_22;
  }
  if (v18 != -1) {
    goto LABEL_21;
  }
  ((void (*)(unsigned char **, unsigned char *))off_1EE9D4C58[v24])(&v27, v23);
  int v24 = -1;
LABEL_22:
  if (v19 && v18 != -1) {
    ((void (*)(unsigned char **, WTF **))off_1EE9D4C58[v18])(&v27, &v13);
  }
LABEL_25:
  if (v25) {
    goto LABEL_26;
  }
LABEL_41:
  *a3 = 0;
  a3[80] = 0;
LABEL_42:
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v7);
    WTF::fastFree(v7, v6);
  }
LABEL_45:
  uint64_t result = (unsigned int *)v26;
  uint64_t v26 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderPassLayout,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(WTF **)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    unint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    uint64_t result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1EE9D4C38[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v6 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)uint64_t v4 = v6;
    LODWORD(v6) = a3[2];
    a3[2] = 0;
    *(_DWORD *)(v4 + 8) = v6;
    LODWORD(v6) = a3[3];
    a3[3] = 0;
    *(_DWORD *)(v4 + 12) = v6;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __n128 result = *(__n128 *)a3;
      long long v7 = *(_OWORD *)(a3 + 16);
      *a2 = *(_OWORD *)a3;
      a2[1] = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EE9D4C38[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  __n128 result = *(__n128 *)a3;
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v8;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::RenderPassColorAttachment>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v5 = a1 + 32;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(_DWORD *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 2));
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  *(unsigned char *)(a1 + 88) = 1;
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1EE9D4C58[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v6 = *(void *)a3;
    *(void *)a3 = 0;
    *(void *)uint64_t v4 = v6;
    LODWORD(v6) = a3[2];
    a3[2] = 0;
    *(_DWORD *)(v4 + 8) = v6;
    LODWORD(v6) = a3[3];
    a3[3] = 0;
    *(_DWORD *)(v4 + 12) = v6;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __n128 result = *(__n128 *)a3;
      long long v7 = *(_OWORD *)(a3 + 16);
      *a2 = *(_OWORD *)a3;
      a2[1] = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EE9D4C58[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  __n128 result = *(__n128 *)a3;
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v8;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::RenderPassColorAttachment>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = a2[1];
  uint64_t v5 = a2[2];
  a2[2] = 0;
  *(unsigned char *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  uint64_t v6 = a1 + 24;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 40) = 0;
  if (*((unsigned char *)a2 + 64))
  {
    *(_DWORD *)(a1 + 56) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(v6, (uint64_t)(a2 + 3));
    *(unsigned char *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  *(unsigned char *)(a1 + 80) = 1;
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 28))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *((unsigned int *)a2 + 3);
    if (v6)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = *a2 + 16 * v6;
      do
      {
        char v9 = *(_DWORD **)v7;
        if (*(void *)v7) {
          *v9 += 2;
        }
        void *v5 = v9;
        v5[1] = *(void *)(v7 + 8);
        v7 += 16;
        v5 += 2;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198DC79CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC8038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c72_ZTSKZ59__WKDatePickerPopoverController_dismissDatePickerAnimated__E3__0(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c72_ZTSKZ59__WKDatePickerPopoverController_dismissDatePickerAnimated__E3__0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198DC8378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC8BA4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198DC9030(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC909C(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 72) = 0;
  _Unwind_Resume(a1);
}

void sub_198DC9128(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 72) = 0;
  _Unwind_Resume(a1);
}

void sub_198DC927C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c51_ZTSKZ38__WKDateTimePicker_showDateTimePicker_E3__2(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c51_ZTSKZ38__WKDateTimePicker_showDateTimePicker_E3__2(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198DC94B8(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC9584(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC969C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC9850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC99A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC9C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DC9D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCA3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  _Block_release(v10);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_198DCA6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location)
{
  _Block_release(v11);
  objc_destroyWeak((id *)&a9);
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(a1);
}

void sub_198DCA7A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_198DCAD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCB04C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, WTF::StringImpl *a19)
{
  if (v19) {
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_198DCB678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (a14) {
    CFRelease(*(CFTypeRef *)(a14 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t setContainsUTIThatConformsTo(void *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(a1);
        }
        if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F442D8], "typeWithIdentifier:", *(void *)(*((void *)&v8 + 1) + 8 * v7)), "conformsToType:", a2))return 1; {
        ++v7;
        }
      }
      while (v5 != v7);
      uint64_t result = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v5 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_198DCB8BC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198DCBE74(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCBF20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCC024(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCC160(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_198DCC41C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c88_ZTSKZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__E3__6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = (id *)(a1 + 40);
  *(v3 - 1) = v2;
  objc_copyWeak(v3, (id *)(a2 + 40));
}

void __destroy_helper_block_e8_32c88_ZTSKZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__E3__6(uint64_t a1)
{
}

void sub_198DCC61C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(a1);
}

void sub_198DCC7B0(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_198DCCDDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCCF7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCD140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCD244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCD484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCD588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCD734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t firstUTIThatConformsTo(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v11;
LABEL_3:
  uint64_t v7 = 0;
  while (1)
  {
    if (*(void *)v11 != v6) {
      objc_enumerationMutation(a1);
    }
    uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * v7);
    if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F442D8], "typeWithIdentifier:", v8), "conformsToType:", a2)) {
      return v8;
    }
    if (v5 == ++v7)
    {
      uint64_t v5 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

void sub_198DCDDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9) {
    CFRelease(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCDF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9) {
    CFRelease(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCE1D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCE4E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCE5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCE854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef a24,CFTypeRef a25)
{
  *uint64_t v26 = 0;
  if (v27) {
    CFRelease(v27);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&a18, 8);
  CFTypeRef v29 = a25;
  a25 = 0;
  if (v29) {
    CFRelease(v29);
  }
  CFTypeRef v30 = a24;
  a24 = 0;
  if (v30) {
    CFRelease(v30);
  }
  if (v25) {
    CFRelease(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(result + 56) = v3;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198DCEA48(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<WTF::RetainPtr<NSURL>,WTF::RetainPtr<NSURL>>::operator=[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(const void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = a2[1];
  a2[1] = 0;
  uint64_t v7 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  if (v7) {
    CFRelease(v7);
  }
  return a1;
}

CFTypeRef __copy_helper_block_e8_56c28_ZTSN3WTF9RetainPtrI5NSURLEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_56c28_ZTSN3WTF9RetainPtrI5NSURLEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_198DCF03C(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCF470(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCF9D4(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DCFC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__557(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__558(uint64_t a1)
{
}

void sub_198DCFD5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD009C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD0470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD052C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD07F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

Class initPXActivityProgressController(void)
{
  if ((_MergedGlobals_41 & 1) == 0)
  {
    uint64_t v1 = dlopen("/System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x198DD0AD0);
    }
    qword_1E93CF888 = (uint64_t)v1;
    _MergedGlobals_41 = 1;
  }
  Class result = objc_getClass("PXActivityProgressController");
  qword_1E93CF880 = (uint64_t)result;
  if (!result) {
    goto LABEL_7;
  }
  getPXActivityProgressControllerClass = PXActivityProgressControllerFunction;
  return result;
}

uint64_t PXActivityProgressControllerFunction(void)
{
  return qword_1E93CF880;
}

void sub_198DD0B90(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198DD0C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_198DD0E30(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__ENK3__6clEP7NSArrayIP13UIMenuElementE_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 106WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  return [*(id *)(a1 + 32) showFilePickerMenu];
}

uint64_t ___ZZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__ENK3__6clEP7NSArrayIP13UIMenuElementE_block_invoke_2(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 106WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  return [*(id *)(a1 + 32) _showPhotoPicker];
}

uint64_t ___ZZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__ENK3__6clEP7NSArrayIP13UIMenuElementE_block_invoke_3(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 1025) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 106WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  return [*(id *)(a1 + 32) _showCamera];
}

Class initPHPickerConfiguration(void)
{
  if ((byte_1E93CF879 & 1) == 0)
  {
    *(void *)algn_1E93CF898 = ___ZL15PhotosUILibraryv_block_invoke();
    byte_1E93CF879 = 1;
  }
  Class result = objc_getClass("PHPickerConfiguration");
  qword_1E93CF890 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198DD0F14);
  }
  off_1EC2B2118 = PHPickerConfigurationFunction;
  return result;
}

uint64_t PHPickerConfigurationFunction(void)
{
  return qword_1E93CF890;
}

uint64_t ___ZL15PhotosUILibraryv_block_invoke()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/PhotosUI.framework/PhotosUI", 2);
  if (!result)
  {
    uint64_t result = 70;
    __break(0xC471u);
  }
  return result;
}

Class initPHPickerFilter(void)
{
  if ((byte_1E93CF879 & 1) == 0)
  {
    *(void *)algn_1E93CF898 = ___ZL15PhotosUILibraryv_block_invoke();
    byte_1E93CF879 = 1;
  }
  Class result = objc_getClass("PHPickerFilter");
  qword_1E93CF8A0 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198DD0FF0);
  }
  _MergedGlobals_40 = PHPickerFilterFunction;
  return result;
}

uint64_t PHPickerFilterFunction(void)
{
  return qword_1E93CF8A0;
}

Class initPHPickerViewController(void)
{
  if ((byte_1E93CF879 & 1) == 0)
  {
    *(void *)algn_1E93CF898 = ___ZL15PhotosUILibraryv_block_invoke();
    byte_1E93CF879 = 1;
  }
  Class result = objc_getClass("PHPickerViewController");
  qword_1E93CF8A8 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198DD1084);
  }
  off_1EC2B2120 = PHPickerViewControllerFunction;
  return result;
}

uint64_t PHPickerViewControllerFunction(void)
{
  return qword_1E93CF8A8;
}

void sub_198DD13BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  if (a11) {
    (*(void (**)(CFTypeRef))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD16A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf, WTF::StringImpl *a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb_E3__7vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9D4E20;
  uint64_t v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb_E3__7vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D4E20;
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb_E3__7vJEE4callEv(void *a1)
{
  id Weak = objc_loadWeak((id *)(a1[2] + 976));
  uint64_t v3 = a1[2] + 1096;
  v12[0] = *(void *)v3;
  v12[1] = *(void *)(v3 + 8);
  uint64_t v10 = 0;
  *(void *)uint64_t v3 = 0;
  LODWORD(v11) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  HIDWORD(v11) = 0;
  *(_DWORD *)(v3 + 12) = 0;
  objc_msgSend(Weak, "_removeTemporaryDirectoriesWhenDeallocated:", v12, v10, v11);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v4);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
  uint64_t v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1[1] + 1048), "configuration"), "preferredAssetRepresentationMode");
  uint64_t v7 = (void *)a1[1];
  uint64_t v8 = a1[3];
  if (v6 == 2) {
    return [v7 _chooseMediaItems:v8];
  }
  else {
    return [v7 _uploadMediaItemsTranscodingVideo:v8];
  }
}

void sub_198DD18A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

void *_ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb0_E3__8vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9D4E48;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb0_E3__8vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D4E48;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb0_E3__8vJEE4callEv(uint64_t a1)
{
  [*(id *)(a1 + 8) _dismissDisplayAnimated:1];
  uint64_t v2 = *(void **)(a1 + 8);

  return [v2 _cancel];
}

void *_ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb1_E3__9vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9D4E70;
  uint64_t v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb1_E3__9vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D4E70;
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    CFRelease(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb1_E3__9vJEE4callEv(uint64_t a1)
{
  return [*(id *)(a1 + 8) _chooseMediaItems:*(void *)(a1 + 24)];
}

void *_ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb2_E4__10vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9D4E98;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb2_E4__10vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D4E98;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb2_E4__10vJEE4callEv(uint64_t a1)
{
  [*(id *)(a1 + 8) _dismissDisplayAnimated:1];
  uint64_t v2 = *(void **)(a1 + 8);

  return [v2 _cancel];
}

void *_ZN3WTF6Detail15CallableWrapperIZZ81__WKFileUploadPanel_imagePickerController_didFinishPickingMultipleMediaWithInfo__EUb3_E4__11vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9D4EC0;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ81__WKFileUploadPanel_imagePickerController_didFinishPickingMultipleMediaWithInfo__EUb3_E4__11vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D4EC0;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ81__WKFileUploadPanel_imagePickerController_didFinishPickingMultipleMediaWithInfo__EUb3_E4__11vJEE4callEv(uint64_t a1)
{
  [*(id *)(a1 + 8) _dismissDisplayAnimated:1];
  uint64_t v2 = *(void **)(a1 + 8);

  return [v2 _cancel];
}

void sub_198DD1E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_198DD1FD4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t result@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  if (*a2) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v8 = *((unsigned int *)a2 + 5);
  if (v8)
  {
    if (v8 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    LODWORD(v42) = 96 * (int)v8 / 0x60u;
    uint64_t v41 = WTF::fastMalloc((WTF *)(96 * v8));
    unsigned int v9 = *((_DWORD *)v4 + 5);
    if (v9)
    {
      uint64_t v10 = (uint64_t)v4[1];
      for (uint64_t i = 88 * v9; i; i -= 88)
      {
        if (*(unsigned char *)(v10 + 80))
        {
          WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v5, v10, v37);
          int v12 = v40[0];
          if (v40[0])
          {
            unsigned int v13 = HIDWORD(v42);
            if (HIDWORD(v42) == v42)
            {
              unint64_t v14 = HIDWORD(v42) + ((unint64_t)HIDWORD(v42) >> 2);
              if (v14 >= 0x10) {
                unint64_t v15 = v14 + 1;
              }
              else {
                unint64_t v15 = 16;
              }
              if (v15 <= (unint64_t)HIDWORD(v42) + 1) {
                unint64_t v16 = HIDWORD(v42) + 1;
              }
              else {
                unint64_t v16 = v15;
              }
              WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v41, v16);
              unsigned int v13 = HIDWORD(v42);
            }
            std::__optional_destruct_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::RenderPassColorAttachment>(v41 + 96 * v13, (long long *)v37);
            ++HIDWORD(v42);
          }
          else
          {
            *(unsigned char *)a3 = 0;
            *(unsigned char *)(a3 + 120) = 0;
          }
          if (v40[0] && (_BYTE)v39 && DWORD2(v38) != -1) {
            ((void (*)(_OWORD *, unsigned char *))off_1EE9D4F28[DWORD2(v38)])(v43, &v37[32]);
          }
          if (!v12) {
            goto LABEL_54;
          }
        }
        else
        {
          unsigned int v17 = HIDWORD(v42);
          if (HIDWORD(v42) == v42)
          {
            unint64_t v18 = HIDWORD(v42) + ((unint64_t)HIDWORD(v42) >> 2);
            if (v18 >= 0x10) {
              unint64_t v19 = v18 + 1;
            }
            else {
              unint64_t v19 = 16;
            }
            if (v19 <= (unint64_t)HIDWORD(v42) + 1) {
              unint64_t v20 = HIDWORD(v42) + 1;
            }
            else {
              unint64_t v20 = v19;
            }
            WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v41, v20);
            unsigned int v17 = HIDWORD(v42);
          }
          char v21 = (unsigned char *)(v41 + 96 * v17);
          unsigned char *v21 = 0;
          v21[88] = 0;
          ++HIDWORD(v42);
        }
        v10 += 88;
      }
    }
  }
  if (!*((unsigned char *)v4 + 56))
  {
    char v22 = 0;
    char v23 = 0;
    goto LABEL_38;
  }
  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v5, (uint64_t)(v4 + 3), (uint64_t)v37);
  char v22 = v37[0];
  v43[0] = *(_OWORD *)&v37[1];
  a4 = *(double *)&v37[16];
  *(_OWORD *)((char *)v43 + 15) = *(_OWORD *)&v37[16];
  char v23 = v37[32];
  if (v37[32])
  {
LABEL_38:
    int v24 = v4[8];
    if (v24 && (a2 = (WTF::StringImpl **)*((void *)v24 + 1)) != 0)
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 136))(v5);
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFF00;
      uint64_t v27 = v25;
      char v28 = 1;
    }
    else
    {
      uint64_t v27 = 0;
      unint64_t v26 = 0;
      char v28 = 0;
    }
    if (*((unsigned char *)v4 + 88))
    {
      unint64_t v29 = (unint64_t)v4[9];
      if (!v29)
      {
LABEL_48:
        uint64_t v31 = 0;
        char v32 = 0;
        goto LABEL_49;
      }
      a2 = *(WTF::StringImpl ***)(v29 + 8);
      if (a2)
      {
        uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 136))(v5);
        if (v30)
        {
          a4 = *((double *)v4 + 10);
          unint64_t v29 = v30 & 0xFFFFFFFFFFFFFF00;
          uint64_t v31 = v30;
          char v32 = 1;
LABEL_49:
          uint64_t v33 = v41;
          uint64_t v41 = 0;
          v37[24] = v22;
          *(_OWORD *)&v37[25] = v43[0];
          *(_OWORD *)&v37[40] = *(_OWORD *)((char *)v43 + 15);
          LOBYTE(v38) = v23;
          *((void *)&v38 + 1) = v26 | v27;
          LOBYTE(v39) = v28;
          *((void *)&v39 + 1) = v31 | v29;
          *(double *)uint64_t v40 = a4;
          v40[8] = v32;
          *(void *)&v40[16] = v4[12];
          v40[24] = *((unsigned char *)v4 + 104);
          *(void *)long long v37 = 0;
          *(void *)&v37[8] = 0;
          *(void *)a3 = v7;
          *(void *)(a3 + 8) = v33;
          *(void *)&v37[16] = 0;
          uint64_t v34 = v42;
          uint64_t v42 = 0;
          *(void *)(a3 + 16) = v34;
          *(_OWORD *)(a3 + 88) = *(_OWORD *)v40;
          *(_OWORD *)(a3 + 97) = *(_OWORD *)&v40[9];
          *(_OWORD *)(a3 + 72) = v39;
          *(_OWORD *)(a3 + 56) = v38;
          *(_OWORD *)(a3 + 40) = *(_OWORD *)&v37[40];
          *(_OWORD *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_OWORD *)&v37[24];
          *(unsigned char *)(a3 + 120) = 1;
          WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37[8], a2);
          long long v35 = *(WTF::StringImpl **)v37;
          *(void *)long long v37 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2) {
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v35 -= 2;
            }
          }
          uint64_t v7 = 0;
          goto LABEL_54;
        }
      }
    }
    unint64_t v29 = 0;
    goto LABEL_48;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 120) = 0;
LABEL_54:
  Class result = WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, a2);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      return WTF::StringImpl::destroy(v7, v36);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = result;
  uint64_t v7 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v7 += 2;
  }
  unsigned int v55 = 0;
  uint64_t v56 = 0;
  unsigned int v8 = *(_DWORD *)(a2 + 20);
  if (v8)
  {
    if (v8 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      return result;
    }
    int v9 = 88 * v8;
    uint64_t v10 = WTF::fastMalloc((WTF *)(88 * v8));
    LODWORD(v56) = (v9 & 0xFFFFFFF8) / 0x58;
    unsigned int v55 = (WTF::StringImpl *)v10;
    uint64_t v11 = *(unsigned int *)(a2 + 20);
    if (v11)
    {
      uint64_t v12 = v10;
      unsigned int v13 = 0;
      uint64_t v14 = *(void *)(a2 + 8);
      uint64_t v3 = 96 * v11;
      while (1)
      {
        if (*(unsigned char *)(v14 + 88))
        {
          WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, v14, v42);
          if (!(_BYTE)v49)
          {
            *(unsigned char *)a3 = 0;
            *(unsigned char *)(a3 + 112) = 0;
            std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v15);
            goto LABEL_81;
          }
          if (v13 == v56)
          {
            unint64_t v16 = v13 + ((unint64_t)v13 >> 2);
            if (v16 >= 0x10) {
              unint64_t v17 = v16 + 1;
            }
            else {
              unint64_t v17 = 16;
            }
            if (v17 <= (unint64_t)v13 + 1) {
              unint64_t v18 = v13 + 1;
            }
            else {
              unint64_t v18 = v17;
            }
            WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v55, v18);
            int v19 = HIDWORD(v56);
            uint64_t v12 = (uint64_t)v55;
            std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::RenderPassColorAttachment>((uint64_t)v55 + 88 * HIDWORD(v56), (uint64_t *)v42);
          }
          else
          {
            std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::RenderPassColorAttachment>(v12 + 88 * v13, (uint64_t *)v42);
            int v19 = HIDWORD(v56);
          }
          unsigned int v13 = v19 + 1;
          HIDWORD(v56) = v13;
          std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v20);
        }
        else
        {
          if (v13 == v56)
          {
            unint64_t v21 = v13 + ((unint64_t)v13 >> 2);
            if (v21 >= 0x10) {
              unint64_t v22 = v21 + 1;
            }
            else {
              unint64_t v22 = 16;
            }
            if (v22 <= (unint64_t)v13 + 1) {
              unint64_t v23 = v13 + 1;
            }
            else {
              unint64_t v23 = v22;
            }
            WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v55, v23);
            int v24 = HIDWORD(v56);
            uint64_t v12 = (uint64_t)v55;
            uint64_t v25 = (char *)v55 + 88 * HIDWORD(v56);
            *uint64_t v25 = 0;
            v25[80] = 0;
            unsigned int v13 = v24 + 1;
          }
          else
          {
            unint64_t v26 = (unsigned char *)(v12 + 88 * v13);
            *unint64_t v26 = 0;
            v26[80] = 0;
            unsigned int v13 = HIDWORD(v56) + 1;
          }
          HIDWORD(v56) = v13;
        }
        v14 += 96;
        v3 -= 96;
        if (!v3) {
          goto LABEL_32;
        }
      }
    }
  }
  unsigned int v13 = 0;
LABEL_32:
  if (*(unsigned char *)(a2 + 56))
  {
    WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v5, a2 + 24, (uint64_t)&v52);
    int v27 = v54;
    if (*(unsigned char *)(a2 + 56) && !v54)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 112) = 0;
      goto LABEL_79;
    }
  }
  else
  {
    int v27 = 0;
    LOBYTE(v52) = 0;
    unsigned __int8 v54 = 0;
  }
  if (!*(unsigned char *)(a2 + 72))
  {
    char v28 = 0;
    goto LABEL_42;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, void))(*(void *)v5 + 112))(v42, v5, *(void *)(a2 + 64));
  char v28 = (atomic_uint *)v42[0];
  if (v42[0] && *((void *)v42[0] + 1))
  {
LABEL_42:
    if (!*(unsigned char *)(a2 + 96))
    {
      int v30 = 0;
      unint64_t v29 = 0;
LABEL_54:
      v42[0] = v7;
      v42[1] = v55;
      unsigned int v32 = v56;
      unsigned int v55 = 0;
      uint64_t v56 = 0;
      unint64_t v43 = __PAIR64__(v13, v32);
      LOBYTE(v4WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      unsigned __int8 v46 = 0;
      if (v27)
      {
        uint64_t v33 = v52;
        double v52 = 0;
        uint64_t v44 = v33;
        *(_OWORD *)long long v45 = *(_OWORD *)v53;
        *(void *)&v45[13] = *(void *)&v53[13];
        unsigned __int8 v46 = 1;
      }
      if (v28) {
        atomic_fetch_add(v28, 1u);
      }
      uint64_t v47 = v28;
      LOBYTE(v48) = 0;
      char v50 = 0;
      if (v30)
      {
        uint64_t v48 = v29;
        uint64_t v49 = v3;
        char v50 = 1;
        unint64_t v29 = 0;
      }
      *(void *)&long long v51 = *(void *)(a2 + 104);
      BYTE8(v51) = *(unsigned char *)(a2 + 112);
      long long v34 = *(_OWORD *)v42;
      v42[0] = 0;
      v42[1] = 0;
      *(_OWORD *)a3 = v34;
      *(void *)&long long v34 = v43;
      unint64_t v43 = 0;
      *(void *)(a3 + 16) = v34;
      *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(unsigned char *)(a3 + 56) = 0;
      int v35 = v46;
      if (v46)
      {
        long long v36 = v44;
        uint64_t v44 = 0;
        *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v36;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)v45;
        *(void *)(a3 + 45) = *(void *)&v45[13];
        *(unsigned char *)(a3 + 56) = 1;
      }
      *(void *)(a3 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v28;
      *(unsigned char *)(a3 + 72) = 0;
      *(unsigned char *)(a3 + 88) = 0;
      if (v30)
      {
        uint64_t v37 = v49;
        *(void *)(a3 + 72) = v48;
        *(void *)(a3 + 80) = v37;
        *(unsigned char *)(a3 + 88) = 1;
        *(_OWORD *)(a3 + 96) = v51;
        *(unsigned char *)(a3 + 112) = 1;
        uint64_t v48 = 0;
      }
      else
      {
        *(_OWORD *)(a3 + 96) = v51;
        *(unsigned char *)(a3 + 112) = 1;
      }
      uint64_t v47 = 0;
      if (v35)
      {
        long long v38 = (unsigned int *)v44;
        uint64_t v44 = 0;
        if (v38)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v38, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v38);
            WTF::fastFree((WTF *)v38, (void *)a2);
          }
        }
      }
      WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42[1], (void *)a2);
      long long v39 = v42[0];
      v42[0] = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
      uint64_t v7 = 0;
      if (v30 && v29)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, (void *)a2);
        }
        uint64_t v7 = 0;
      }
      goto LABEL_76;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, void))(*(void *)v5 + 112))(v42, v5, *(void *)(a2 + 80));
    unint64_t v29 = (unsigned int *)v42[0];
    if (v42[0])
    {
      if (*((void *)v42[0] + 1))
      {
        int v30 = 1;
        atomic_fetch_add((atomic_uint *volatile)v42[0], 1u);
        uint64_t v3 = *(void *)(a2 + 88);
        uint64_t v31 = (unsigned int *)v42[0];
        v42[0] = 0;
        if (!v31) {
          goto LABEL_53;
        }
      }
      else
      {
        int v30 = 0;
        v42[0] = 0;
        uint64_t v31 = v29;
        unint64_t v29 = 0;
      }
      if (atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, (void *)a2);
      }
      goto LABEL_53;
    }
    int v30 = 0;
LABEL_53:
    unsigned int v13 = HIDWORD(v56);
    int v27 = v54;
    goto LABEL_54;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 112) = 0;
LABEL_76:
  if (v28 && atomic_fetch_add(v28, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v28);
    WTF::fastFree((WTF *)v28, (void *)a2);
  }
LABEL_79:
  if (v54)
  {
    uint64_t v40 = (unsigned int *)v52;
    double v52 = 0;
    if (v40)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v40, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, (void *)a2);
      }
    }
  }
LABEL_81:
  Class result = WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, (void *)a2);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      return WTF::StringImpl::destroy(v7, v41);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return result;
}

double WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(_DWORD **)a1;
  if (*(void *)a1) {
    *v4 += 2;
  }
  *(void *)&long long v6 = v4;
  WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v6 + 8, a1 + 8);
  LOWORD(v8) = *(_WORD *)(a1 + 24);
  HIDWORD(v8) = *(_DWORD *)(a1 + 28);
  *(_OWORD *)a2 = v6;
  double result = v7;
  *(double *)(a2 + 16) = v7;
  *(void *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v8;
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

WTF::StringImpl *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(WebKit::WebGPU::ConvertToBackingContext *this@<X0>, const WebCore::WebGPU::RenderPipelineDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (WTF::StringImpl *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)this, (uint64_t)a2, (uint64_t)&v109);
  if (!v111)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 208) = 0;
    return result;
  }
  double result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)this, (uint64_t)a2 + 16, (uint64_t)&v101);
  if (v108)
  {
    if (*((unsigned char *)a2 + 78))
    {
      char v16 = *((unsigned char *)a2 + 72);
      unint64_t v3 = *(unsigned int *)((char *)a2 + 73) | ((unint64_t)*((unsigned __int8 *)a2 + 77) << 32);
      char v17 = 1;
    }
    else
    {
      char v16 = 0;
      char v17 = 0;
    }
    if (*((unsigned char *)a2 + 124))
    {
      uint64_t v4 = *(void *)((char *)a2 + 85);
      char v18 = *((unsigned char *)a2 + 80);
      __int16 v11 = *(_WORD *)((char *)a2 + 81);
      __int16 v12 = *(_WORD *)((char *)a2 + 83);
      unint64_t v13 = ((unint64_t)*((unsigned int *)a2 + 24) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 100) << 56);
      unint64_t v15 = ((unint64_t)*((unsigned int *)a2 + 26) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 108) << 56);
      int v14 = *((_DWORD *)a2 + 28);
      uint64_t v5 = *(void *)((char *)a2 + 116);
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
      char v18 = 0;
    }
    int v20 = *((unsigned __int8 *)a2 + 140);
    uint64_t v21 = *((void *)a2 + 16);
    if (*((unsigned char *)a2 + 140)) {
      uint64_t v22 = *((unsigned __int8 *)a2 + 136) | 0x100000000;
    }
    else {
      uint64_t v22 = 0;
    }
    LOBYTE(v91) = 0;
    unsigned __int8 v98 = 0;
    int v23 = *((unsigned __int8 *)a2 + 200);
    if (!*((unsigned char *)a2 + 200)) {
      goto LABEL_37;
    }
    unint64_t v67 = v15;
    int v68 = v14;
    unint64_t v69 = v13;
    char v70 = v19;
    __int16 v71 = v12;
    __int16 v72 = v11;
    WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)this, (uint64_t)a2 + 144, (uint64_t)&v73);
    if (v98 == v80)
    {
      if (v98)
      {
        uint64_t v91 = v73;
        std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)&v92, (uint64_t)&v74);
        if (HIDWORD(v95)) {
          WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(v94, (WTF *)((char *)v94 + 16 * HIDWORD(v95)));
        }
        uint64_t v25 = v94;
        if (v94)
        {
          v94 = 0;
          LODWORD(v95) = 0;
          WTF::fastFree(v25, v24);
        }
        v94 = v76;
        uint64_t v26 = v77;
        char v76 = 0;
        uint64_t v77 = 0;
        uint64_t v95 = v26;
        int v27 = v96;
        if (v96)
        {
          uint64_t v96 = 0;
          LODWORD(v97) = 0;
          WTF::fastFree(v27, v24);
        }
        uint64_t v96 = v78;
        unint64_t v28 = v79;
        uint64_t v78 = 0;
        unint64_t v79 = 0;
        unint64_t v97 = v28;
      }
    }
    else if (v98)
    {
      unint64_t v29 = v96;
      if (v96)
      {
        uint64_t v96 = 0;
        LODWORD(v97) = 0;
        WTF::fastFree(v29, v24);
      }
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v24);
      if (v93)
      {
        int v30 = v92;
        uint64_t v92 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2) {
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v24);
          }
          else {
            *(_DWORD *)v30 -= 2;
          }
        }
      }
      unsigned __int8 v98 = 0;
    }
    else
    {
      uint64_t v91 = v73;
      LOBYTE(v92) = 0;
      char v93 = 0;
      if ((_BYTE)v75)
      {
        uint64_t v31 = v74;
        v74 = 0;
        uint64_t v92 = v31;
        char v93 = 1;
      }
      unsigned int v32 = v76;
      char v76 = 0;
      v94 = v32;
      uint64_t v33 = v77;
      uint64_t v77 = 0;
      uint64_t v95 = v33;
      long long v34 = v78;
      uint64_t v78 = 0;
      uint64_t v96 = v34;
      unint64_t v35 = v79;
      unint64_t v79 = 0;
      unint64_t v97 = v35;
      unsigned __int8 v98 = 1;
    }
    double result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v73, v24);
    __int16 v12 = v71;
    __int16 v11 = v72;
    char v19 = v70;
    unint64_t v13 = v69;
    int v14 = v68;
    unint64_t v15 = v67;
    if (!v98)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 208) = 0;
    }
    else
    {
LABEL_37:
      uint64_t v37 = v109;
      long long v38 = v110;
      CGRect v109 = 0;
      int v73 = v37;
      v74 = v110;
      if (!v108)
      {
        __break(1u);
        return result;
      }
      uint64_t v39 = v101;
      uint64_t v75 = v101;
      LOBYTE(v76) = 0;
      LOBYTE(v77) = 0;
      int v40 = v103;
      if (v103)
      {
        uint64_t v41 = v102;
        v102 = 0;
        char v76 = v41;
        LOBYTE(v77) = 1;
      }
      uint64_t v42 = v104;
      v104 = 0;
      uint64_t v78 = v42;
      unsigned int v43 = v105;
      unsigned int v44 = HIDWORD(v105);
      uint64_t v105 = 0;
      unint64_t v79 = __PAIR64__(v44, v43);
      uint64_t v45 = v106;
      uint64_t v106 = 0;
      uint64_t v80 = v45;
      unsigned int v46 = v107;
      unsigned int v47 = HIDWORD(v107);
      uint64_t v107 = 0;
      unint64_t v81 = __PAIR64__(v47, v46);
      v82[0] = v16;
      *(_DWORD *)&v82[1] = v3;
      v82[5] = BYTE4(v3);
      v82[6] = v17;
      v82[8] = v18;
      *(_WORD *)&v82[9] = v11;
      *(_WORD *)&v82[11] = v12;
      *(void *)&v82[13] = v4;
      *(void *)&v82[21] = v13;
      *(void *)&v82[29] = v15;
      *(_WORD *)&v82[37] = v99;
      v82[39] = v100;
      *(_DWORD *)&v82[40] = v14;
      *(void *)&v82[44] = v5;
      v82[52] = v19;
      if (v20) {
        uint64_t v48 = v21;
      }
      else {
        uint64_t v48 = 0;
      }
      *(void *)&v82[56] = v48;
      v82[68] = BYTE4(v22);
      *(_DWORD *)&v82[64] = v22;
      LOBYTE(v83) = 0;
      char v90 = 0;
      if (v23)
      {
        uint64_t v83 = v91;
        LOBYTE(v8WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        char v85 = 0;
        if (v93)
        {
          uint64_t v49 = v92;
          uint64_t v92 = 0;
          float32x2_t v84 = v49;
          char v85 = 1;
        }
        char v50 = v94;
        v94 = 0;
        unsigned long long v86 = v50;
        uint64_t v51 = v95;
        uint64_t v95 = 0;
        uint64_t v87 = v51;
        double v52 = v96;
        uint64_t v96 = 0;
        uint64_t v88 = v52;
        unint64_t v53 = v97;
        unint64_t v97 = 0;
        unint64_t v89 = v53;
        char v90 = 1;
      }
      int v73 = 0;
      *(void *)a3 = v37;
      *(void *)(a3 + 8) = v38;
      *(void *)(a3 + 16) = v39;
      *(unsigned char *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(unsigned char *)(a3 + 32) = 0;
      if (v40)
      {
        unsigned __int8 v54 = v76;
        char v76 = 0;
        *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v54;
        *(unsigned char *)(a3 + 32) = 1;
      }
      unint64_t v79 = 0;
      unint64_t v81 = 0;
      long long v55 = *(_OWORD *)v82;
      *(_OWORD *)(a3 + 88) = *(_OWORD *)&v82[16];
      long long v56 = *(_OWORD *)&v82[48];
      *(_OWORD *)(a3 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_OWORD *)&v82[32];
      *(_OWORD *)(a3 + 120) = v56;
      uint64_t v78 = 0;
      *(void *)(a3 + 40) = v42;
      *(_DWORD *)(a3 + 48) = v43;
      *(_DWORD *)(a3 + 52) = v44;
      uint64_t v80 = 0;
      *(void *)(a3 + 56) = v45;
      *(_DWORD *)(a3 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v46;
      *(_DWORD *)(a3 + 68) = v47;
      *(void *)(a3 + 133) = *(void *)&v82[61];
      *(_OWORD *)(a3 + 72) = v55;
      *(unsigned char *)(a3 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(unsigned char *)(a3 + 200) = 0;
      if (v23)
      {
        *(void *)(a3 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v83;
        *(unsigned char *)(a3 + 152) = 0;
        *(unsigned char *)(a3 + 160) = 0;
        if (v85)
        {
          v57 = v84;
          float32x2_t v84 = 0;
          *(void *)(a3 + 152) = v57;
          *(unsigned char *)(a3 + 160) = 1;
        }
        int v58 = v86;
        unsigned long long v86 = 0;
        *(void *)(a3 + 168) = v58;
        uint64_t v59 = v87;
        uint64_t v87 = 0;
        *(void *)(a3 + 176) = v59;
        id v60 = v88;
        uint64_t v88 = 0;
        *(void *)(a3 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v60;
        unint64_t v61 = v89;
        unint64_t v89 = 0;
        *(void *)(a3 + 192) = v61;
        *(unsigned char *)(a3 + 200) = 1;
      }
      *(unsigned char *)(a3 + 208) = 1;
      std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v83, v82);
      WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v62);
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v63);
      if ((_BYTE)v77)
      {
        uint64_t v64 = v76;
        char v76 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2) {
            WTF::StringImpl::destroy(v64, v36);
          }
          else {
            *(_DWORD *)v64 -= 2;
          }
        }
      }
      long long v65 = v73;
      int v73 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2) {
          WTF::StringImpl::destroy(v65, v36);
        }
        else {
          *(_DWORD *)v65 -= 2;
        }
      }
    }
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v91, v36);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 208) = 0;
  }
  std::__optional_destruct_base<WebKit::WebGPU::VertexState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v101, v10);
  double result = v109;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v109, v66);
    }
    else {
      *(_DWORD *)v109 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(*(void *)a2 + 8);
  ++v2[2];
  uint64_t v3 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 120))(a1, v2);
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  return v3;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(WTF **__return_ptr))(*(void *)a1 + 104))(&v7);
  double result = (unsigned int *)v7;
  if (v7 && (uint64_t v5 = *((void *)v7 + 1)) != 0)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 16), v5);
    long long v6 = *(atomic_uint **)(v5 + 16);
    atomic_fetch_add(v6, 1u);
    *(void *)a2 = v6;
    *(unsigned char *)(a2 + 8) = 1;
    double result = (unsigned int *)v7;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  double v7 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2E8BA2F)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      uint64_t v3 = *(WTF **)result;
      unsigned int v4 = *(_DWORD *)(result + 12);
      int v5 = 88 * a2;
      double result = WTF::fastMalloc((WTF *)(88 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x58;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        uint64_t v8 = 0;
        uint64_t v9 = 88 * v4;
        do
        {
          uint64_t v10 = (char *)v3 + v8;
          uint64_t v11 = v7 + v8;
          *(unsigned char *)uint64_t v11 = 0;
          *(unsigned char *)(v11 + 80) = 0;
          if (*((unsigned char *)v3 + v8 + 80))
          {
            uint64_t v12 = *(void *)v10;
            *(void *)uint64_t v10 = 0;
            *(void *)uint64_t v11 = v12;
            *(void *)(v11 + 8) = *((void *)v10 + 1);
            uint64_t v13 = *((void *)v10 + 2);
            *((void *)v10 + 2) = 0;
            *(void *)(v11 + 16) = v13;
            *(unsigned char *)(v11 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
            *(unsigned char *)(v11 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
            if (v10[64])
            {
              *(_DWORD *)(v7 + v8 + 56) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(v11 + 24, (uint64_t)v3 + v8 + 24);
              *(unsigned char *)(v11 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
            }
            *(_WORD *)(v7 + v8 + 72) = *(_WORD *)((char *)v3 + v8 + 72);
            *(unsigned char *)(v11 + 80) = 1;
          }
          double result = std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + v8, v6);
          v8 += 88;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if ((v3 & 0x80000000) == 0)
  {
    int v5 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(__int16 **)a2;
      uint64_t v8 = 2 * v6;
      do
      {
        __int16 v9 = *v7++;
        *v5++ = v9;
        v8 -= 2;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

double adjustedFontSize(uint64_t a1, uint64_t a2, double a3, double a4)
{
  unint64_t v5 = *(unsigned int *)(a2 + 12);
  if (!v5) {
    return a4;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  double v11 = a4;
  do
  {
    uint64_t v12 = *(void *)(*(void *)a2 + v9);
    if (v12 && *(_DWORD *)(v12 + 4))
    {
      double v15 = a4;
      objc_msgSend((id)WTF::StringImpl::operator NSString *(), "_legacy_sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:", a1, &v15, 0, 12.0, a3);
      if (v15 < v11 && v15 > 0.0) {
        double v11 = v15;
      }
      unint64_t v5 = *(unsigned int *)(a2 + 12);
    }
    ++v10;
    v9 += 16;
  }
  while (v10 < v5);
  return v11;
}

void sub_198DD3E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD41E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD42D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD48AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD4FDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD580C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD5B98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c85_ZTSKZ72__WKSelectPicker_contextMenuInteraction_configurationForMenuAtLocation__E3__0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c85_ZTSKZ72__WKSelectPicker_contextMenuInteraction_configurationForMenuAtLocation__E3__0(uint64_t a1)
{
}

void sub_198DD5CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198DD5D30(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c95_ZTSKZ82__WKSelectPicker_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__1(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c95_ZTSKZ82__WKSelectPicker_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__1(uint64_t a1)
{
}

void sub_198DD5E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198DD5E9C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c87_ZTSKZ74__WKSelectPicker_contextMenuInteraction_willEndForConfiguration_animator__E3__2(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c87_ZTSKZ74__WKSelectPicker_contextMenuInteraction_willEndForConfiguration_animator__E3__2(uint64_t a1)
{
}

void sub_198DD5FC0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198DD66F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD68A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v19);
  _Unwind_Resume(a1);
}

void sub_198DD6DD4(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD7270(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD77C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD7AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198DD7B5C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c55_ZTSKZ42__WKSelectPickerTableViewController_next__E3__4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c55_ZTSKZ42__WKSelectPickerTableViewController_next__E3__4(uint64_t a1)
{
}

void sub_198DD7C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198DD7CBC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c59_ZTSKZ46__WKSelectPickerTableViewController_previous__E3__5(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c59_ZTSKZ46__WKSelectPickerTableViewController_previous__E3__5(uint64_t a1)
{
}

void sub_198DD7DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_198DD7E18(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c56_ZTSKZ43__WKSelectPickerTableViewController_close__E3__6(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c56_ZTSKZ43__WKSelectPickerTableViewController_close__E3__6(uint64_t a1)
{
}

void sub_198DD8D20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DD91A8(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZ55__WKSelectPickerGroupHeaderView_setCollapsed_animated__ENK3__3cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F42FF0], "userInterfaceLayoutDirectionForSemanticContentAttribute:", objc_msgSend(*(id *)(a1 + 32), "semanticContentAttribute"));
  memset(&v8, 0, sizeof(v8));
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 432))
  {
    CGAffineTransformMakeRotation(&v8, dbl_1994F6F50[v2 == 0]);
  }
  else
  {
    long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)&v8.CGFloat a = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)&v8.c = v4;
    *(_OWORD *)&v8.tdouble x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  }
  unint64_t v5 = *(void **)(v3 + 416);
  CGAffineTransform v7 = v8;
  return [v5 setTransform:&v7];
}

CFTypeRef __copy_helper_block_e8_32c68_ZTSKZ55__WKSelectPickerGroupHeaderView_setCollapsed_animated__E3__3(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSKZ55__WKSelectPickerGroupHeaderView_setCollapsed_animated__E3__3(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 28);
  if (!v7) {
    goto LABEL_18;
  }
  if (v7 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v26) = *(_DWORD *)(a2 + 28);
  uint64_t v25 = WTF::fastMalloc((WTF *)(16 * v7));
  uint64_t v8 = *(unsigned int *)(a2 + 28);
  if (v8)
  {
    uint64_t v9 = 16 * v8;
    uint64_t v10 = *(void *)(a2 + 16) + 8;
    while (1)
    {
      double v11 = (WTF::StringImpl *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v4, v10);
      if (!(_BYTE)a2) {
        break;
      }
      uint64_t v12 = *(WTF::StringImpl **)(v10 - 8);
      if (v12) {
        *(_DWORD *)v12 += 2;
      }
      uint64_t v22 = v12;
      int v23 = v11;
      if (HIDWORD(v26) == v26)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v25, (unint64_t)&v22);
      }
      else
      {
        uint64_t v13 = (WTF::StringImpl **)(v25 + 16 * HIDWORD(v26));
        uint64_t v22 = 0;
        *uint64_t v13 = v12;
        v13[1] = v23;
        ++HIDWORD(v26);
      }
      int v14 = v22;
      uint64_t v22 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      v10 += 16;
      v9 -= 16;
      if (!v9) {
        goto LABEL_18;
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    CFTypeRef result = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, (void *)a2);
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        return WTF::StringImpl::destroy(v6, v21);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
LABEL_18:
    double v15 = *(_DWORD **)(a2 + 8);
    if (v15) {
      *v15 += 2;
    }
    uint64_t v16 = v25;
    uint64_t v25 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v15;
    int v23 = 0;
    v24[0] = 0;
    uint64_t v22 = 0;
    *(void *)(a3 + 16) = v16;
    v24[1] = 0;
    uint64_t v17 = v26;
    uint64_t v26 = 0;
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v17;
    *(unsigned char *)(a3 + 32) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, (void *)a2);
    char v19 = v23;
    int v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    int v20 = v22;
    uint64_t v22 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v18);
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t result@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v6 = *a2;
  if (*a2) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v7 = *((unsigned int *)a2 + 7);
  if (!v7) {
    goto LABEL_26;
  }
  if (v7 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v37) = *((_DWORD *)a2 + 7);
  uint64_t v36 = WTF::fastMalloc((WTF *)(16 * v7));
  uint64_t v8 = *((unsigned int *)a2 + 7);
  if (v8)
  {
    uint64_t v9 = (uint64_t)a2[2] + 8;
    uint64_t v10 = 16 * v8;
    while (1)
    {
      WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v4, (uint64_t)&v31);
      if (!(_BYTE)v32) {
        break;
      }
      double v11 = *(WTF::StringImpl **)(v9 - 8);
      if (v11) {
        *(_DWORD *)v11 += 2;
      }
      uint64_t v12 = v31;
      uint64_t v31 = 0;
      long long v34 = v11;
      unint64_t v35 = v12;
      int v13 = HIDWORD(v37);
      if (HIDWORD(v37) == v37)
      {
        int v14 = (void *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v36, HIDWORD(v37) + 1, (unint64_t)&v34);
        int v13 = HIDWORD(v37);
        double v15 = (void *)(v36 + 16 * HIDWORD(v37));
        uint64_t v16 = *v14;
        *int v14 = 0;
        uint64_t v17 = (WTF **)(v14 + 1);
        *double v15 = v16;
        char v18 = (WTF **)(v15 + 1);
      }
      else
      {
        char v19 = (WTF::StringImpl **)(v36 + 16 * HIDWORD(v37));
        long long v34 = 0;
        *char v19 = v11;
        char v18 = v19 + 1;
        uint64_t v17 = &v35;
      }
      int v20 = *v17;
      IPC::Encoder *v17 = 0;
      *char v18 = v20;
      HIDWORD(v37) = v13 + 1;
      uint64_t v21 = (unsigned int *)v35;
      unint64_t v35 = 0;
      if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
      uint64_t v22 = v34;
      long long v34 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      if ((_BYTE)v32)
      {
        int v23 = (unsigned int *)v31;
        uint64_t v31 = 0;
        if (v23)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, a2);
          }
        }
      }
      v9 += 16;
      v10 -= 16;
      if (!v10) {
        goto LABEL_26;
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    CFTypeRef result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, a2);
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        return WTF::StringImpl::destroy(v6, v30);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
LABEL_26:
    int v24 = a2[1];
    if (v24) {
      *(_DWORD *)v24 += 2;
    }
    uint64_t v25 = v36;
    uint64_t v36 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v24;
    unsigned int v32 = 0;
    v33[0] = 0;
    uint64_t v31 = 0;
    *(void *)(a3 + 16) = v25;
    v33[1] = 0;
    uint64_t v26 = v37;
    uint64_t v37 = 0;
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v26;
    *(unsigned char *)(a3 + 32) = 1;
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, a2);
    unint64_t v28 = v32;
    unsigned int v32 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v27);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    unint64_t v29 = v31;
    uint64_t v31 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v27);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    return WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v27);
  }
  return result;
}

WTF::StringImpl *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *(WTF::StringImpl **)a1;
  if (*(void *)a1) {
    *(_DWORD *)v4 += 2;
  }
  CFTypeRef result = (WTF::StringImpl *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1 + 8, (uint64_t)v20);
  if (v22)
  {
    double v11 = v4;
    v12[0] = 0;
    int v13 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v12, (uint64_t)v20);
    uint64_t v14 = *(void *)(a1 + 32);
    char v15 = *(unsigned char *)(a1 + 40);
    __int16 v16 = *(_WORD *)(a1 + 41);
    uint64_t v7 = (WTF *)*(unsigned int *)(a1 + 60);
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = (int)v7;
    if (v7)
    {
      uint64_t v8 = (WTF *)WTF::fastMalloc(v7);
      int v18 = (int)v7;
      uint64_t v17 = v8;
      memcpy(v8, *(const void **)(a1 + 48), *(unsigned int *)(a1 + 60));
    }
    std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::TextureDescriptor>((uint64_t)a2, (uint64_t *)&v11);
    uint64_t v10 = v17;
    if (v17)
    {
      uint64_t v17 = 0;
      int v18 = 0;
      WTF::fastFree(v10, v9);
    }
    if (v13 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9D50A8[v13])(&v23, v12);
    }
    int v13 = -1;
    CFTypeRef result = v11;
    double v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        CFTypeRef result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v22)
    {
      if (v21 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9D50A8[v21])(&v11, v20);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[64] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(WTF::StringImpl **)a1;
  if (*(void *)a1) {
    *(_DWORD *)v4 += 2;
  }
  CFTypeRef result = (WTF::StringImpl *)WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1 + 8, (uint64_t)v18);
  if (v20)
  {
    uint64_t v12 = v4;
    v13[0] = 0;
    int v14 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v18);
    *(void *)char v15 = *(void *)(a1 + 32);
    v15[8] = *(unsigned char *)(a1 + 40);
    *(_WORD *)&v15[9] = *(_WORD *)(a1 + 41);
    uint64_t v7 = (WTF *)*(unsigned int *)(a1 + 60);
    __int16 v16 = 0;
    LODWORD(v17) = 0;
    HIDWORD(v17) = v7;
    if (v7)
    {
      uint64_t v8 = (void *)WTF::fastMalloc(v7);
      LODWORD(v17) = v7;
      __int16 v16 = v8;
      memcpy(v8, *(const void **)(a1 + 48), *(unsigned int *)(a1 + 60));
    }
    uint64_t v9 = v12;
    uint64_t v12 = 0;
    *(void *)a2 = v9;
    *(unsigned char *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2 + 8, (uint64_t)v13);
    *(void *)(a2 + 32) = *(void *)v15;
    *(_DWORD *)(a2 + 39) = *(_DWORD *)&v15[7];
    *(void *)(a2 + 48) = v16;
    uint64_t v11 = v17;
    __int16 v16 = 0;
    uint64_t v17 = 0;
    *(void *)(a2 + 56) = v11;
    *(unsigned char *)(a2 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
    if (v14 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE9D50B8[v14])(&v21, v13);
    }
    int v14 = -1;
    CFTypeRef result = v12;
    uint64_t v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        CFTypeRef result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v20)
    {
      if (v19 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, unsigned char *))off_1EE9D50B8[v19])(&v12, v18);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      CFTypeRef result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = (unsigned int **)v4;
        unint64_t v9 = (unsigned int **)((char *)v4 + 16 * v5);
        do
        {
          unint64_t v10 = *v8;
          *unint64_t v8 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t v11 = v8[1];
          v8[1] = 0;
          *((void *)v7 + 1) = v11;
          uint64_t v12 = v8[1];
          v8[1] = 0;
          if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v6);
          }
          CFTypeRef result = *v8;
          *unint64_t v8 = 0;
          if (result)
          {
            if (*result == 2) {
              CFTypeRef result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
            }
            else {
              *result -= 2;
            }
          }
          v8 += 2;
          v7 += 4;
        }
        while (v8 != v9);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

PlaybackSessionInterfaceIOS *WKFullScreenViewControllerPlaybackSessionModelClient::setInterface(WKFullScreenViewControllerPlaybackSessionModelClient *this, PlaybackSessionInterfaceIOS *a2)
{
  CFTypeRef result = this->m_interface.m_ptr;
  if (result == a2) {
    return result;
  }
  m_ptr = a2;
  if (result
    && WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel((WebCore::PlaybackSessionInterfaceIOS *)result))
  {
    uint64_t v5 = WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel((WebCore::PlaybackSessionInterfaceIOS *)this->m_interface.m_ptr);
    (*(void (**)(uint64_t, WKFullScreenViewControllerPlaybackSessionModelClient *))(*(void *)v5 + 24))(v5, this);
  }
  if (m_ptr) {
    ++*((_DWORD *)m_ptr + 4);
  }
  CFTypeRef result = this->m_interface.m_ptr;
  this->m_interface.m_ptr = m_ptr;
  if (!result) {
    goto LABEL_10;
  }
  if (*((_DWORD *)result + 4) != 1)
  {
    --*((_DWORD *)result + 4);
LABEL_10:
    if (!m_ptr) {
      return result;
    }
    goto LABEL_13;
  }
  CFTypeRef result = (PlaybackSessionInterfaceIOS *)(*(uint64_t (**)(PlaybackSessionInterfaceIOS *))(*(void *)result + 8))(result);
  m_ptr = this->m_interface.m_ptr;
  if (!m_ptr) {
    return result;
  }
LABEL_13:
  CFTypeRef result = (PlaybackSessionInterfaceIOS *)WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel((WebCore::PlaybackSessionInterfaceIOS *)m_ptr);
  if (result)
  {
    uint64_t v6 = WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel((WebCore::PlaybackSessionInterfaceIOS *)this->m_interface.m_ptr);
    unint64_t v7 = *(uint64_t (**)(uint64_t, WKFullScreenViewControllerPlaybackSessionModelClient *))(*(void *)v6 + 16);
    return (PlaybackSessionInterfaceIOS *)v7(v6, this);
  }
  return result;
}

void sub_198DDAD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
    }
    else {
      --a10[4];
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DDB210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DDBA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DDC048(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DDC178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
    }
    else {
      --a10[4];
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DDC750(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void **)(v2 - 72);
  *(void *)(v2 - 72) = 0;
  if (v4) {
    CFRelease(v4);
  }
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DDC8D8(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DDC9D4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WKFullScreenViewControllerPlaybackSessionModelClient::~WKFullScreenViewControllerPlaybackSessionModelClient(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  m_ptr = this->m_interface.m_ptr;
  this->m_interface.m_ptr = 0;
  if (m_ptr)
  {
    if (*((_DWORD *)m_ptr + 4) == 1) {
      (*(void (**)(PlaybackSessionInterfaceIOS *))(*(void *)m_ptr + 8))(m_ptr);
    }
    else {
      --*((_DWORD *)m_ptr + 4);
    }
  }
  objc_destroyWeak(&this->m_parent.m_weakReference);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)&this->m_weakPtrFactory, v3);
}

{
  PlaybackSessionInterfaceIOS *m_ptr;
  void *v3;
  void *v4;
  uint64_t vars8;

  m_ptr = this->m_interface.m_ptr;
  this->m_interface.m_ptr = 0;
  if (m_ptr)
  {
    if (*((_DWORD *)m_ptr + 4) == 1) {
      (*(void (**)(PlaybackSessionInterfaceIOS *))(*(void *)m_ptr + 8))(m_ptr);
    }
    else {
      --*((_DWORD *)m_ptr + 4);
    }
  }
  objc_destroyWeak(&this->m_parent.m_weakReference);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)&this->m_weakPtrFactory, v3);
  if (this->m_count.m_value)
  {
    this->m_interface.m_ptr = 0;
    *(_OWORD *)&this->_vptr$PlaybackSessionModelClient = 0u;
    *(_OWORD *)&this->m_count.m_value = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)this, v4);
  }
}

void sub_198DDE138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  CFRelease(*(CFTypeRef *)(v19 + 8));
  _Unwind_Resume(a1);
}

void sub_198DDE7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15) {
    CFRelease(v15);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v3;
  return result;
}

void sub_198DDEE34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, char a17, WTF::StringImpl *a18)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (v18) {
    CFRelease(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WKWebViewState::applyTo(WebKit::WKWebViewState *this, WKWebView *a2)
{
  -[WKWebView _setPageScale:withOrigin:](a2, "_setPageScale:withOrigin:", *((double *)this + 1), 0.0, 0.0);
  if (*((unsigned char *)this + 80)) {
    -[WKWebView _setObscuredInsets:](a2, "_setObscuredInsets:", *((double *)this + 11), *((double *)this + 12), *((double *)this + 13), *((double *)this + 14));
  }
  else {
    [(WKWebView *)a2 _resetObscuredInsets];
  }
  [(WKWebView *)a2 _setObscuredInsetEdgesAffectedBySafeArea:*((void *)this + 15)];
  uint64_t v4 = [(WKWebView *)a2 scrollView];
  uint64_t v5 = v4;
  if (*((unsigned char *)this + 40)) {
    -[UIScrollView setContentInset:](v4, "setContentInset:", *((double *)this + 6), *((double *)this + 7), *((double *)this + 8), *((double *)this + 9));
  }
  else {
    [(UIScrollView *)v4 _resetContentInset];
  }
  -[UIScrollView setContentOffset:](v5, "setContentOffset:", *((double *)this + 22), *((double *)this + 23));
  -[UIScrollView setScrollIndicatorInsets:](v5, "setScrollIndicatorInsets:", *((double *)this + 16), *((double *)this + 17), *((double *)this + 18), *((double *)this + 19));
  if (*((unsigned char *)this + 160)) {
    [(UIScrollView *)v5 setContentInsetAdjustmentBehavior:*((void *)this + 21)];
  }
  else {
    [(WKWebView *)a2 _resetScrollViewInsetAdjustmentBehavior];
  }
  if (*((unsigned char *)this + 208)) {
    -[WKWebView _setUnobscuredSafeAreaInsets:](a2, "_setUnobscuredSafeAreaInsets:", *((double *)this + 27), *((double *)this + 28), *((double *)this + 29), *((double *)this + 30));
  }
  else {
    [(WKWebView *)a2 _resetUnobscuredSafeAreaInsets];
  }
  if (*((unsigned char *)this + 248))
  {
    -[WKWebView _overrideLayoutParametersWithMinimumLayoutSize:minimumUnobscuredSizeOverride:maximumUnobscuredSizeOverride:](a2, "_overrideLayoutParametersWithMinimumLayoutSize:minimumUnobscuredSizeOverride:maximumUnobscuredSizeOverride:", *((double *)this + 32), *((double *)this + 33), *((double *)this + 32), *((double *)this + 33), *((double *)this + 34), *((double *)this + 35));
    if (!a2) {
      goto LABEL_19;
    }
  }
  else
  {
    [(WKWebView *)a2 _clearOverrideLayoutParameters];
    if (!a2) {
      goto LABEL_19;
    }
  }
  [(WKWebView *)a2 _page];
  if (v7)
  {
    WebKit::WebPageProxy::setTopContentInset(v7, *(float *)this);
    WebKit::WebPageProxy::setForceAlwaysUserScalable((uint64_t)v7, *((unsigned __int8 *)this + 193));
  }
LABEL_19:
  [(WKWebView *)a2 _setViewScale:*((double *)this + 2)];
  [(UIScrollView *)v5 setZoomScale:*((double *)this + 3)];
  [(UIScrollView *)v5 setBouncesZoom:*((unsigned __int8 *)this + 192)];
  return [(WKWebView *)a2 _setMinimumEffectiveDeviceWidth:*((double *)this + 25)];
}

void sub_198DDF6F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35)
{
  int v38 = 1;
  atomic_compare_exchange_strong_explicit(v35, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
  if (v38 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  uint64_t v39 = *(WTF::StringImpl **)(v36 - 200);
  *(void *)(v36 - 200) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, a2);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE0380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  if (a17) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(a17 + 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE0C9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22)
{
  int v24 = 1;
  atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE12F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  int v23 = 1;
  atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE1960(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE1FF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  int v32 = 1;
  atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
  if (v32 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, a2);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE22A8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198DE28A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  int v23 = 1;
  atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE2C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE2F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(atomic_uchar **)(v10 + 64));
  _Unwind_Resume(a1);
}

void sub_198DE3080(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE3180(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE369C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198DE3CDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26)
{
  int v28 = 1;
  atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE4338(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20)
{
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::DisplayCaptureSessionManager::deviceSelectedForTesting@<X0>(WebCore::RealtimeMediaSourceCenter *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v7 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(a1);
  uint64_t v8 = WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(v7);
  unint64_t v9 = *(uint64_t (***)(void))(*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
  uint64_t result = (*v9)();
  uint64_t v11 = *(unsigned int *)(result + 12);
  if (!v11)
  {
LABEL_8:
    char v15 = 0;
    *(unsigned char *)a4 = 0;
    goto LABEL_9;
  }
  int v12 = 0;
  int v13 = (unsigned char *)(*(void *)result + 32);
  uint64_t v14 = 40 * v11;
  while (1)
  {
    if (!*v13 || *(v13 - 24) != a2) {
      goto LABEL_7;
    }
    if (v12 == a3) {
      break;
    }
    ++v12;
LABEL_7:
    v13 += 40;
    v14 -= 40;
    if (!v14) {
      goto LABEL_8;
    }
  }
  __int16 v16 = (_DWORD *)*((void *)v13 - 4);
  if (v16) {
    *v16 += 2;
  }
  *(void *)a4 = v16;
  *(unsigned char *)(a4 + 8) = a2;
  uint64_t v17 = (_DWORD *)*((void *)v13 - 2);
  if (v17) {
    *v17 += 2;
  }
  *(void *)(a4 + 16) = v17;
  int v18 = (_DWORD *)*((void *)v13 - 1);
  if (v18) {
    *v18 += 2;
  }
  *(void *)(a4 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v18;
  *(_DWORD *)(a4 + 32) = *(_DWORD *)v13;
  char v15 = 1;
LABEL_9:
  *(unsigned char *)(a4 + 40) = v15;
  return result;
}

uint64_t WebKit::DisplayCaptureSessionManager::showWindowPicker(WebCore::MockRealtimeMediaSourceCenter *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  if (*((unsigned char *)a1 + 4)) {
    goto LABEL_2;
  }
  a1 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(a1);
  if (!a1)
  {
    LOBYTE(v9[0]) = 0;
    char v10 = 0;
    uint64_t v6 = v9;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(a3, v9);
    return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
  }
  if (*((unsigned char *)v4 + 4)) {
LABEL_2:
  }
    int v5 = *(_DWORD *)v4;
  else {
    int v5 = 0;
  }
  uint64_t v6 = v11;
  WebKit::DisplayCaptureSessionManager::deviceSelectedForTesting(a1, 5, v5, (uint64_t)v11);
  WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(a3, v11);
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
}

void sub_198DE4A10(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  LOBYTE(v9) = 0;
  char v13 = 0;
  if (*((unsigned char *)a2 + 40))
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    char v10 = *((unsigned char *)a2 + 8);
    int v12 = *((_DWORD *)a2 + 8);
    int v4 = v12;
    char v13 = 1;
    uint64_t v9 = 0;
    uint64_t v14 = v3;
    char v15 = v10;
    long long v11 = 0u;
    long long v5 = *((_OWORD *)a2 + 1);
    *((_OWORD *)a2 + 1) = 0u;
    long long v16 = v5;
    int v17 = v4;
    char v18 = 1;
  }
  else
  {
    LOBYTE(v1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    char v18 = 0;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v14);
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v6);
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9, v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

void sub_198DE4B24(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15, a2);
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v17);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::DisplayCaptureSessionManager::showScreenPicker(WebCore::MockRealtimeMediaSourceCenter *a1, uint64_t a2, uint64_t *a3)
{
  int v4 = a1;
  if (*((unsigned char *)a1 + 4)) {
    goto LABEL_2;
  }
  a1 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(a1);
  if (!a1)
  {
    LOBYTE(v9[0]) = 0;
    char v10 = 0;
    uint64_t v6 = v9;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(a3, v9);
    return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
  }
  if (*((unsigned char *)v4 + 4)) {
LABEL_2:
  }
    int v5 = *(_DWORD *)v4;
  else {
    int v5 = 0;
  }
  uint64_t v6 = v11;
  WebKit::DisplayCaptureSessionManager::deviceSelectedForTesting(a1, 4, v5, (uint64_t)v11);
  WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(a3, v11);
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
}

void sub_198DE4BF8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WebKit::DisplayCaptureSessionManager::promptForGetDisplayMedia(WebCore::MockRealtimeMediaSourceCenter *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v6 = a2;
  if (*((unsigned char *)a1 + 4)
    || (uint64_t result = WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(a1), result))
  {
    if (v6)
    {
      return WebKit::DisplayCaptureSessionManager::showScreenPicker(a1, a2, a5);
    }
    else
    {
      return WebKit::DisplayCaptureSessionManager::showWindowPicker(a1, a2, a5);
    }
  }
  return result;
}

uint64_t WKFullScreenViewControllerPlaybackSessionModelClient::ptrCount(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  return this->m_count.m_value;
}

uint64_t WKFullScreenViewControllerPlaybackSessionModelClient::ptrCountWithoutThreadCheck(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  return this->m_count.m_value;
}

WKFullScreenViewControllerPlaybackSessionModelClient *WKFullScreenViewControllerPlaybackSessionModelClient::incrementPtrCount(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  return this;
}

WKFullScreenViewControllerPlaybackSessionModelClient *WKFullScreenViewControllerPlaybackSessionModelClient::decrementPtrCount(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  unsigned int m_value = this->m_count.m_value;
  if (m_value)
  {
    this->m_count.unsigned int m_value = m_value - 1;
  }
  else
  {
    this = (WKFullScreenViewControllerPlaybackSessionModelClient *)286;
    __break(0xC471u);
  }
  return this;
}

id WKFullScreenViewControllerPlaybackSessionModelClient::rateChanged(uint64_t a1, char a2)
{
  id result = objc_loadWeak((id *)(a1 + 24));
  if (result)
  {
    return (id)[result setPlaying:a2 & 1];
  }
  return result;
}

id WKFullScreenViewControllerPlaybackSessionModelClient::pictureInPictureActiveChanged(WKFullScreenViewControllerPlaybackSessionModelClient *this, uint64_t a2)
{
  id result = objc_loadWeak(&this->m_parent.m_weakReference);
  if (result)
  {
    return (id)[result setPictureInPictureActive:a2];
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ80__WKFullScreenWindowController_beganEnterFullScreenWithInitialFrame_finalFrame__EUb2_E3__4vJbEE4callEb(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (a2) {
    return [v2 didEnterPictureInPicture];
  }
  else {
    return [v2 didExitPictureInPicture];
  }
}

uint64_t std::default_delete<WTF::Observer<void ()(BOOL)>>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    int v4 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  else
  {
    *(void *)this = 0;
  }

  return WTF::fastFree(this, a2);
}

Class initAVBackgroundView(void)
{
  if ((_MergedGlobals_145 & 1) == 0)
  {
    qword_1E93CF8C0 = (uint64_t)dlopen("/System/Library/Frameworks/AVKit.framework/AVKit", 2);
    _MergedGlobals_145 = 1;
  }
  Class result = objc_getClass("AVBackgroundView");
  qword_1E93CF8B8 = (uint64_t)result;
  getAVBackgroundViewClass = AVBackgroundViewFunction;
  return result;
}

uint64_t AVBackgroundViewFunction(void)
{
  return qword_1E93CF8B8;
}

void sub_198DE5C70(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20)
{
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  CFRelease(cf);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v28, this);
  WTF::String::String((WTF::String *)&v27, a3);
  *(void *)buf = v28;
  v26[0] = v27;
  Class result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v26, &v29);
  if (v29)
  {
    uint64_t v8 = v27;
    int v27 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v28;
    int v28 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    char v10 = *(NSObject **)(a1 + 32);
    long long v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      WTF::String::utf8();
      char v13 = v26[0] ? (char *)v26[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      long long v11 = v26[0];
      v26[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          long long v11 = (WTF *)WTF::fastFree(v11, v12);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
    }
    if (*(unsigned char *)a1)
    {
      uint64_t v14 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v15 = *v14;
        if (v15) {
          break;
        }
        int v16 = *v14;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v16, v15 | 1, memory_order_acquire, memory_order_acquire);
        if (v16 == v15)
        {
          uint64_t v17 = WTF::Logger::observers(v11);
          uint64_t v18 = *(unsigned int *)(v17 + 12);
          if (v18)
          {
            uint64_t v19 = *(uint64_t **)v17;
            uint64_t v20 = *(void *)v17 + 8 * v18;
            do
            {
              uint64_t v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v31 = 0;
              WTF::String::String((WTF::String *)v32, a3);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v21 + 16))(v21, a1, 0, v26);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v22);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                int v24 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2) {
                    WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                  }
                  else {
                    *(_DWORD *)v24 -= 2;
                  }
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          int v25 = 1;
          atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    Class result = v29;
    unint64_t v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198DE624C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *_ZN3WTF6Detail15CallableWrapperIZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_E3__3vJEED1Ev(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  *a1 = &unk_1EE9D5280;
  a1[1] = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_E3__3vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D5280;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_E3__3vJEE4callEv(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned char **)(a1 + 16);
  if (v2[474])
  {
    v2[474] = 0;
    if ([v2 loggerPtr])
    {
      if ([*(id *)(a1 + 16) logChannel])
      {
        uint64_t v3 = [*(id *)(a1 + 16) loggerPtr];
        uint64_t v4 = [*(id *)(a1 + 16) logChannel];
        if (*(unsigned char *)(v3 + 12))
        {
          uint64_t v5 = v4;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
          WTF::String::String((WTF::String *)&v56, "repaint completed, but exit requested");
          *(void *)buf = v57;
          v55[0] = v56;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v55, &v58);
          if (v58)
          {
            unint64_t v7 = v56;
            long long v56 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2) {
                WTF::StringImpl::destroy(v7, v6);
              }
              else {
                *(_DWORD *)v7 -= 2;
              }
            }
            uint64_t v21 = v57;
            v57 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2) {
                WTF::StringImpl::destroy(v21, v6);
              }
              else {
                *(_DWORD *)v21 -= 2;
              }
            }
            int v22 = *(NSObject **)(v5 + 32);
            int v23 = (WTF *)os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
            if (v23)
            {
              WTF::String::utf8();
              int v25 = v55[0] ? (char *)v55[0] + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = v25;
              _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              int v23 = v55[0];
              v55[0] = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 1) {
                  int v23 = (WTF *)WTF::fastFree(v23, v24);
                }
                else {
                  --*(_DWORD *)v23;
                }
              }
            }
            if (*(unsigned char *)v5 && *(unsigned char *)(v5 + 16))
            {
              uint64_t v26 = (atomic_uchar *)MEMORY[0x1E4F30998];
              while (1)
              {
                int v27 = *v26;
                if (v27) {
                  break;
                }
                int v28 = *v26;
                atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, v27 | 1, memory_order_acquire, memory_order_acquire);
                if (v28 == v27)
                {
                  uint64_t v29 = WTF::Logger::observers(v23);
                  uint64_t v30 = *(unsigned int *)(v29 + 12);
                  if (v30)
                  {
                    int v31 = *(uint64_t **)v29;
                    uint64_t v32 = *(void *)v29 + 8 * v30;
                    do
                    {
                      uint64_t v33 = *v31;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                      v60.i32[0] = 0;
                      WTF::String::String((WTF::String *)&v60.u64[1], "repaint completed, but exit requested");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v55, (uint64_t)buf, 2uLL);
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v33 + 16))(v33, v5, 1, v55);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v34);
                      for (uint64_t i = 24; i != -8; i -= 16)
                      {
                        uint64_t v36 = *(WTF::StringImpl **)&buf[i];
                        *(void *)&buf[i] = 0;
                        if (v36)
                        {
                          if (*(_DWORD *)v36 == 2) {
                            WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v24);
                          }
                          else {
                            *(_DWORD *)v36 -= 2;
                          }
                        }
                      }
                      ++v31;
                    }
                    while (v31 != (uint64_t *)v32);
                  }
                  goto LABEL_49;
                }
              }
            }
LABEL_51:
            int v38 = v58;
            int v58 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2) {
                WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v24);
              }
              else {
                *(_DWORD *)v38 -= 2;
              }
            }
            goto LABEL_55;
          }
          goto LABEL_86;
        }
      }
    }
    goto LABEL_55;
  }
  uint64_t v8 = [*(id *)(a1 + 8) _manager];
  uint64_t v9 = *(void **)(a1 + 16);
  if (!v8)
  {
    if ([v9 loggerPtr])
    {
      if ([*(id *)(a1 + 16) logChannel])
      {
        uint64_t v16 = [*(id *)(a1 + 16) loggerPtr];
        uint64_t v17 = [*(id *)(a1 + 16) logChannel];
        if (*(unsigned char *)(v16 + 12))
        {
          uint64_t v18 = v17;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
          WTF::String::String((WTF::String *)&v56, "repaint completed, but manager missing");
          *(void *)buf = v57;
          v55[0] = v56;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v55, &v58);
          if (v58)
          {
            uint64_t v20 = v56;
            long long v56 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2) {
                WTF::StringImpl::destroy(v20, v19);
              }
              else {
                *(_DWORD *)v20 -= 2;
              }
            }
            int v40 = v57;
            v57 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2) {
                WTF::StringImpl::destroy(v40, v19);
              }
              else {
                *(_DWORD *)v40 -= 2;
              }
            }
            uint64_t v41 = *(NSObject **)(v18 + 32);
            uint64_t v42 = (WTF *)os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
            if (v42)
            {
              WTF::String::utf8();
              unsigned int v43 = v55[0] ? (char *)v55[0] + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = v43;
              _os_log_impl(&dword_1985F2000, v41, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              uint64_t v42 = v55[0];
              v55[0] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 1) {
                  uint64_t v42 = (WTF *)WTF::fastFree(v42, v24);
                }
                else {
                  --*(_DWORD *)v42;
                }
              }
            }
            if (*(unsigned char *)v18 && *(unsigned char *)(v18 + 16))
            {
              uint64_t v26 = (atomic_uchar *)MEMORY[0x1E4F30998];
              while (1)
              {
                int v44 = *v26;
                if (v44) {
                  break;
                }
                int v45 = *v26;
                atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v45, v44 | 1, memory_order_acquire, memory_order_acquire);
                if (v45 == v44)
                {
                  uint64_t v46 = WTF::Logger::observers(v42);
                  uint64_t v47 = *(unsigned int *)(v46 + 12);
                  if (v47)
                  {
                    uint64_t v48 = *(uint64_t **)v46;
                    uint64_t v49 = *(void *)v46 + 8 * v47;
                    do
                    {
                      uint64_t v50 = *v48;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                      v60.i32[0] = 0;
                      WTF::String::String((WTF::String *)&v60.u64[1], "repaint completed, but manager missing");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v55, (uint64_t)buf, 2uLL);
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v50 + 16))(v50, v18, 1, v55);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v51);
                      for (uint64_t j = 24; j != -8; j -= 16)
                      {
                        unint64_t v53 = *(WTF::StringImpl **)&buf[j];
                        *(void *)&buf[j] = 0;
                        if (v53)
                        {
                          if (*(_DWORD *)v53 == 2) {
                            WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v24);
                          }
                          else {
                            *(_DWORD *)v53 -= 2;
                          }
                        }
                      }
                      ++v48;
                    }
                    while (v48 != (uint64_t *)v49);
                  }
LABEL_49:
                  int v37 = 1;
                  atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
                  if (v37 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                  goto LABEL_51;
                }
              }
            }
            goto LABEL_51;
          }
LABEL_86:
          __break(0xC471u);
          JUMPOUT(0x198DE6AB0);
        }
      }
    }
LABEL_55:
    uint64_t v39 = *(void **)(a1 + 16);
    [v39 _exitFullscreenImmediately];
    return;
  }
  char v10 = (void *)[v9 _webView];
  int8x16_t v11 = *(int8x16_t *)(a1 + 8);
  int8x16_t v54 = v11;
  if (v11.i64[0]) {
    CFRetain((CFTypeRef)v11.i64[0]);
  }
  int8x16_t v12 = *(int8x16_t *)(a1 + 40);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 24);
  int8x16_t v60 = v12;
  char v13 = (int8x16_t *)malloc_type_malloc(0x50uLL, 0x10F00402B658426uLL);
  v13->i64[0] = MEMORY[0x1E4F14398];
  v13->i64[1] = 50331650;
  v13[1].i64[0] = (uint64_t)_ZZN3WTF8BlockPtrIFvvEE12fromCallableIZZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_ENK3__3clEvEUlvE_EES2_T_ENUlPvE_8__invokeES7_;
  v13[1].i64[1] = (uint64_t)&_ZZN3WTF8BlockPtrIFvvEE12fromCallableIZZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_ENK3__3clEvEUlvE_EES2_T_E10descriptor;
  int8x16_t v14 = *(int8x16_t *)buf;
  int8x16_t v15 = v60;
  v13[2] = vextq_s8(v54, v54, 8uLL);
  void v13[3] = v14;
  v13[4] = v15;
  [v10 _doAfterNextVisibleContentRectAndPresentationUpdate:v13];

  _Block_release(v13);
}

void sub_198DE6ABC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, char a17, WTF::StringImpl *a18)
{
  int v20 = 1;
  atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
  if (v20 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void _ZZN3WTF8BlockPtrIFvvEE12fromCallableIZZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_ENK3__3clEvEUlvE_EES2_T_ENUlPKvE_8__invokeES8_(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _ZZN3WTF8BlockPtrIFvvEE12fromCallableIZZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_ENK3__3clEvEUlvE_EES2_T_ENUlPvE_8__invokeES7_(id *a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebKit::WebFullScreenManagerProxy *)[a1[5] _manager];
  uint64_t v3 = [a1[4] loggerPtr];
  if (v2)
  {
    if (v3)
    {
      if ([a1[4] logChannel])
      {
        uint64_t v4 = [a1[4] loggerPtr];
        uint64_t v5 = [a1[4] logChannel];
        if (*(unsigned char *)(v4 + 12)) {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>(v5, (WTF::Logger::LogSiteIdentifier *)(a1 + 6), "presentation updated");
        }
      }
    }
    memset(buf, 0, 32);
    long long v6 = *MEMORY[0x1E4F1DB30];
    memset(&v56[1], 0, 32);
    v56[0] = 0u;
    long long v7 = *MEMORY[0x1E4F1DAD8];
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    *(_OWORD *)&v50[32] = 0u;
    long long v51 = 0u;
    *(_OWORD *)&v50[16] = 0u;
    uint64_t v47 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    *(_OWORD *)uint64_t v50 = 0u;
    __asm { FMOV            V4.2D, #1.0 }
    *(_OWORD *)&buf[8] = _Q4;
    *(_OWORD *)&buf[24] = _Q4;
    long long v13 = *(_OWORD *)(MEMORY[0x1E4F437F8] + 16);
    long long v48 = *MEMORY[0x1E4F437F8];
    long long v49 = v13;
    long long v14 = *MEMORY[0x1E4F437F8];
    *(_OWORD *)&v50[24] = *(_OWORD *)(MEMORY[0x1E4F437F8] + 16);
    *(_OWORD *)&v50[8] = v14;
    long long v15 = *(_OWORD *)(MEMORY[0x1E4F437F8] + 16);
    long long v51 = *MEMORY[0x1E4F437F8];
    long long v52 = v15;
    long long v54 = v7;
    *(_OWORD *)((char *)&v56[1] + 8) = *(_OWORD *)(MEMORY[0x1E4F437F8] + 16);
    *(void *)&v50[40] = 15;
    *(_OWORD *)((char *)v56 + 8) = v14;
    long long v16 = *MEMORY[0x1E4F1DB30];
    v56[3] = v6;
    v56[4] = v16;
    WebKit::WKWebViewState::applyTo((WebKit::WKWebViewState *)buf, (WKWebView *)[a1[4] _webView]);
    return WebKit::WebFullScreenManagerProxy::willEnterFullScreen(v2, 1);
  }
  else
  {
    if (v3)
    {
      if ([a1[4] logChannel])
      {
        uint64_t v18 = [a1[4] loggerPtr];
        uint64_t v19 = [a1[4] logChannel];
        if (*(unsigned char *)(v18 + 12))
        {
          uint64_t v20 = v19;
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v44, (WTF::Logger::LogSiteIdentifier *)(a1 + 6));
          WTF::String::String((WTF::String *)&v43, "presentation updated, but manager missing");
          *(void *)buf = v44;
          v42[0] = v43;
          uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v42, &v45);
          if (!v45)
          {
            __break(0xC471u);
            return result;
          }
          int v22 = v43;
          unsigned int v43 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v21);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          int v23 = v44;
          int v44 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v21);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          int v24 = *(NSObject **)(v20 + 32);
          int v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          if (v25)
          {
            WTF::String::utf8();
            int v27 = v42[0] ? (char *)v42[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = v27;
            _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            int v25 = v42[0];
            v42[0] = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 1) {
                int v25 = (WTF *)WTF::fastFree(v25, v26);
              }
              else {
                --*(_DWORD *)v25;
              }
            }
          }
          if (*(unsigned char *)v20 && *(unsigned char *)(v20 + 16))
          {
            int v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v29 = *v28;
              if (v29) {
                break;
              }
              int v30 = *v28;
              atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
              if (v30 == v29)
              {
                uint64_t v31 = WTF::Logger::observers(v25);
                uint64_t v32 = *(unsigned int *)(v31 + 12);
                if (v32)
                {
                  uint64_t v33 = *(uint64_t **)v31;
                  uint64_t v34 = *(void *)v31 + 8 * v32;
                  do
                  {
                    uint64_t v35 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)(a1 + 6));
                    *(_DWORD *)&uint8_t buf[16] = 0;
                    WTF::String::String((WTF::String *)&buf[24], "presentation updated, but manager missing");
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v42, (uint64_t)buf, 2uLL);
                    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v35 + 16))(v35, v20, 1, v42);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v36);
                    for (uint64_t i = 24; i != -8; i -= 16)
                    {
                      int v38 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2) {
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v26);
                        }
                        else {
                          *(_DWORD *)v38 -= 2;
                        }
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v34);
                }
                int v39 = 1;
                atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
                if (v39 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          int v40 = v45;
          int v45 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v26);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
        }
      }
    }
    id v41 = a1[5];
    return [v41 _exitFullscreenImmediately];
  }
}

void sub_198DE70F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::LogArgument<WebKit::FullScreenState>::toString(void *a1)
{
  uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v3;
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatRect,char [3],WebCore::FloatRect>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, WebCore::FloatRect *a3, WebCore::FloatRect *a4)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v34, this);
  WebCore::FloatRect::toJSONString((uint64_t *)&v33, a3);
  WTF::String::String((WTF::String *)&v32, ", ");
  WebCore::FloatRect::toJSONString((uint64_t *)&v31, a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v34, (uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v35);
  long long v6 = v31;
  uint64_t v31 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  long long v7 = v32;
  uint64_t v32 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v33;
  uint64_t v33 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v34;
  uint64_t v34 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  char v10 = *(NSObject **)(a1 + 32);
  int8x16_t v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    WTF::String::utf8();
    long long v13 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    int v37 = v13;
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    int8x16_t v11 = v30[0];
    v30[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1) {
        int8x16_t v11 = (WTF *)WTF::fastFree(v11, v12);
      }
      else {
        --*(_DWORD *)v11;
      }
    }
  }
  if (*(unsigned char *)a1)
  {
    long long v14 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v15 = *v14;
      if (v15) {
        break;
      }
      int v16 = *v14;
      atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v16, v15 | 1, memory_order_acquire, memory_order_acquire);
      if (v16 == v15)
      {
        uint64_t v17 = WTF::Logger::observers(v11);
        uint64_t v18 = *(unsigned int *)(v17 + 12);
        if (v18)
        {
          uint64_t v19 = *(uint64_t **)v17;
          uint64_t v20 = *(void *)v17 + 8 * v18;
          do
          {
            uint64_t v21 = *v19;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v37 + 4), this);
            int v38 = 1;
            WebCore::FloatRect::toJSONString(&v39, a3);
            int v40 = 0;
            WTF::String::String((WTF::String *)v41, ", ");
            v41[2] = 1;
            WebCore::FloatRect::toJSONString(v42, a4);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 4uLL);
            (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v21 + 16))(v21, a1, 0, v30);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v22);
            for (uint64_t i = 56; i != -8; i -= 16)
            {
              int v24 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2) {
                  WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                }
                else {
                  *(_DWORD *)v24 -= 2;
                }
              }
            }
            ++v19;
          }
          while (v19 != (uint64_t *)v20);
        }
        int v25 = 1;
        atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
        if (v25 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v35;
  uint64_t v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198DE7674(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,char a23)
{
  int v24 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [16]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v26, this);
  WTF::String::String((WTF::String *)&v25, "manager missing");
  *(void *)buf = v26;
  v24[0] = v25;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v24, &v27);
  if (v27)
  {
    long long v6 = v25;
    int v25 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    long long v7 = v26;
    uint64_t v26 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = *(NSObject **)(a1 + 32);
    uint64_t v9 = (WTF *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      WTF::String::utf8();
      int8x16_t v11 = v24[0] ? (char *)v24[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v9 = v24[0];
      v24[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1) {
          uint64_t v9 = (WTF *)WTF::fastFree(v9, v10);
        }
        else {
          --*(_DWORD *)v9;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned char *)(a1 + 16))
    {
      int8x16_t v12 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v13 = *v12;
        if (v13) {
          break;
        }
        int v14 = *v12;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, v13 | 1, memory_order_acquire, memory_order_acquire);
        if (v14 == v13)
        {
          uint64_t v15 = WTF::Logger::observers(v9);
          uint64_t v16 = *(unsigned int *)(v15 + 12);
          if (v16)
          {
            uint64_t v17 = *(uint64_t **)v15;
            uint64_t v18 = *(void *)v15 + 8 * v16;
            do
            {
              uint64_t v19 = *v17;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v29 = 0;
              WTF::String::String((WTF::String *)v30, "manager missing");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v24, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v19 + 16))(v19, a1, 1, v24);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v20);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                int v22 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2) {
                    WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
                  }
                  else {
                    *(_DWORD *)v22 -= 2;
                  }
                }
              }
              ++v17;
            }
            while (v17 != (uint64_t *)v18);
          }
          int v23 = 1;
          atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v27;
    int v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198DE7B04(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebKit::FullScreenState,char [11]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v28, this);
  WTF::LogArgument<WebKit::FullScreenState>::toString(&v27);
  WTF::String::String((WTF::String *)&v26, ", dropping");
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v28, (uint64_t *)&v27, (uint64_t *)&v26, &v29);
  uint64_t v3 = v26;
  uint64_t v26 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = v27;
  int v27 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = v28;
  int v28 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  long long v6 = *(NSObject **)(a1 + 32);
  long long v7 = (WTF *)os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    WTF::String::utf8();
    uint64_t v9 = v25[0] ? (char *)v25[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    uint64_t v31 = v9;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    long long v7 = v25[0];
    v25[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1) {
        long long v7 = (WTF *)WTF::fastFree(v7, v8);
      }
      else {
        --*(_DWORD *)v7;
      }
    }
  }
  if (*(unsigned char *)a1)
  {
    char v10 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v11 = *v10;
      if (v11) {
        break;
      }
      int v12 = *v10;
      atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v12, v11 | 1, memory_order_acquire, memory_order_acquire);
      if (v12 == v11)
      {
        uint64_t v13 = WTF::Logger::observers(v7);
        uint64_t v14 = *(unsigned int *)(v13 + 12);
        if (v14)
        {
          uint64_t v15 = *(uint64_t **)v13;
          uint64_t v16 = *(void *)v13 + 8 * v14;
          do
          {
            uint64_t v17 = *v15;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v31 + 4), this);
            int v32 = 0;
            WTF::LogArgument<WebKit::FullScreenState>::toString(&v33);
            int v34 = 0;
            WTF::String::String((WTF::String *)v35, ", dropping");
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v25, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v17 + 16))(v17, a1, 0, v25);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v18);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              uint64_t v20 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2) {
                  WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v8);
                }
                else {
                  *(_DWORD *)v20 -= 2;
                }
              }
            }
            ++v15;
          }
          while (v15 != (uint64_t *)v16);
        }
        int v21 = 1;
        atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
        if (v21 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v29;
  int v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198DE7F40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  int v21 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v28, this);
  WTF::String::String((WTF::String *)&v27, a3);
  *(void *)buf = v28;
  v26[0] = v27;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v26, &v29);
  if (v29)
  {
    uint64_t v8 = v27;
    int v27 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v28;
    int v28 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    char v10 = *(NSObject **)(a1 + 32);
    int v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      WTF::String::utf8();
      uint64_t v13 = v26[0] ? (char *)v26[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v11 = v26[0];
      v26[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          int v11 = (WTF *)WTF::fastFree(v11, v12);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
    }
    if (*(unsigned char *)a1)
    {
      uint64_t v14 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v15 = *v14;
        if (v15) {
          break;
        }
        int v16 = *v14;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v16, v15 | 1, memory_order_acquire, memory_order_acquire);
        if (v16 == v15)
        {
          uint64_t v17 = WTF::Logger::observers(v11);
          uint64_t v18 = *(unsigned int *)(v17 + 12);
          if (v18)
          {
            uint64_t v19 = *(uint64_t **)v17;
            uint64_t v20 = *(void *)v17 + 8 * v18;
            do
            {
              uint64_t v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v31 = 0;
              WTF::String::String((WTF::String *)v32, a3);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v21 + 16))(v21, a1, 0, v26);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v22);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                int v24 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2) {
                    WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                  }
                  else {
                    *(_DWORD *)v24 -= 2;
                  }
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          int v25 = 1;
          atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v29;
    int v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198DE84B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DE8ABC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebKit::FullScreenState>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v26, this);
  WTF::LogArgument<WebKit::FullScreenState>::toString(&v25);
  uint64_t v4 = v25;
  *(void *)buf = v26;
  v24[0] = v25;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v24, &v27);
  if (v27)
  {
    int v25 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v6);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    long long v7 = v26;
    uint64_t v26 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = *(NSObject **)(a1 + 32);
    uint64_t v9 = (WTF *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      WTF::String::utf8();
      int v11 = v24[0] ? (char *)v24[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v9 = v24[0];
      v24[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1) {
          uint64_t v9 = (WTF *)WTF::fastFree(v9, v10);
        }
        else {
          --*(_DWORD *)v9;
        }
      }
    }
    if (*(unsigned char *)a1)
    {
      int v12 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v13 = *v12;
        if (v13) {
          break;
        }
        int v14 = *v12;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, v13 | 1, memory_order_acquire, memory_order_acquire);
        if (v14 == v13)
        {
          uint64_t v15 = WTF::Logger::observers(v9);
          uint64_t v16 = *(unsigned int *)(v15 + 12);
          if (v16)
          {
            uint64_t v17 = *(uint64_t **)v15;
            uint64_t v18 = *(void *)v15 + 8 * v16;
            do
            {
              uint64_t v19 = *v17;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], this);
              int v29 = 0;
              WTF::LogArgument<WebKit::FullScreenState>::toString(v30);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v24, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v19 + 16))(v19, a1, 0, v24);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v20);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                int v22 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2) {
                    WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
                  }
                  else {
                    *(_DWORD *)v22 -= 2;
                  }
                }
              }
              ++v17;
            }
            while (v17 != (uint64_t *)v18);
          }
          int v23 = 1;
          atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v27;
    int v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_198DE8EE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteData::ownerProcess(int a1)
{
  uint64_t result = 0;
  if (a1 > 1023)
  {
    if (a1 >= 0x10000)
    {
      if (a1 < 0x40000)
      {
        if (a1 == 0x10000) {
          return 1;
        }
        if (a1 == 0x20000) {
          return result;
        }
      }
      else if (a1 == 0x40000 || a1 == 0x80000 || a1 == 0x100000)
      {
        return result;
      }
    }
    else if (a1 < 0x2000)
    {
      if (a1 == 1024) {
        return 1;
      }
      if (a1 == 4096) {
        return result;
      }
    }
    else if (a1 == 0x2000 || a1 == 0x4000 || a1 == 0x8000)
    {
      return result;
    }
    goto LABEL_36;
  }
  if (a1 > 31)
  {
    if (a1 > 127)
    {
      if (a1 == 128) {
        return result;
      }
      if (a1 != 256)
      {
        if (a1 == 512) {
          return result;
        }
        goto LABEL_36;
      }
      return 1;
    }
    if (a1 == 32) {
      return result;
    }
    if (a1 == 64) {
      return 1;
    }
LABEL_36:
    uint64_t result = 84;
    __break(0xC471u);
    return result;
  }
  if (a1 > 7)
  {
    if (a1 != 8)
    {
      if (a1 == 16) {
        return result;
      }
      goto LABEL_36;
    }
    return 1;
  }
  if ((a1 - 1) >= 2)
  {
    if (a1 == 4) {
      return 2;
    }
    goto LABEL_36;
  }
  return result;
}

uint64_t WebKit::WebsiteData::filter(int a1, int a2)
{
  int v2 = a1;
  if (!a1) {
    return 0;
  }
  LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  do
  {
    if (WebKit::WebsiteData::ownerProcess(v2 & -v2) == a2) {
      int v5 = v2 & -v2;
    }
    else {
      int v5 = 0;
    }
    uint64_t v4 = v5 | v4;
    v2 &= v2 - 1;
  }
  while (v2);
  return v4;
}

uint64_t WebKit::WebsiteData::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN6WebKit11WebsiteData5EntryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_((uint64_t)a2, a1);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((void **)(a1 + 16), a2 + 2);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((void **)(a1 + 24), a2 + 3);
  return WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy((uint64_t *)(a1 + 32), v4, v5, a2 + 4);
}

uint64_t WebKit::WebsiteData::Entry::Entry(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(void *)(a1 + 40) = a4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*a3);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.i32[0] == 1)
  {
    *(_DWORD *)(a1 + 32) = *a3;
    return a1;
  }
  else
  {
    uint64_t result = 129;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebsiteData::Entry::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::isolatedCopy();
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a2, (uint64_t)v8);
  *(_DWORD *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v5;
  if (v9 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_2[v9])(&v7, v8);
  }
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  unsigned char v8[24];
  int v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::isolatedCopy();
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a2, (uint64_t)v8);
  *(_DWORD *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v5;
  if (v9 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_2[v9])(&v7, v8);
  }
  return result;
}

BOOL WebKit::InteractionInformationRequest::isValidForRequest(int32x2_t *this, const InteractionInformationRequest *a2, int a3)
{
  if (a2->includeSnapshot && !this[1].i8[0]
    || a2->includeLinkIndicator && !this[1].i8[1]
    || a2->includeCaretContext && !this[1].i8[2]
    || a2->includeHasDoubleClickHandler && !this[1].i8[3]
    || a2->includeImageData && !this[1].i8[4]
    || a2->gatherAnimations && !this[1].i8[5]
    || a2->linkIndicatorShouldHaveLegacyMargins != this[1].u8[6])
  {
    return 0;
  }
  int32x2_t v3 = vsub_s32((int32x2_t)a2->point, *this);
  int32x2_t v4 = vmul_s32(v3, v3);
  return vadd_s32(vdup_lane_s32(v4, 1), v4).u32[0] <= a3 * a3;
}

uint64_t _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN6WebKit11WebsiteData5EntryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_(uint64_t result, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    if (v2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = result;
      int v5 = 48 * v2;
      uint64_t result = WTF::fastMalloc((WTF *)(48 * v2));
      *(_DWORD *)(v4 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v4 = result;
      uint64_t v6 = *(unsigned int *)(a2 + 12);
      if (v6)
      {
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = 48 * v6;
        do
        {
          WebKit::WebsiteData::Entry::isolatedCopy(v7, (uint64_t)v11);
          uint64_t v9 = *(void *)v4 + 48 * *(unsigned int *)(v4 + 12);
          *(unsigned char *)uint64_t v9 = 0;
          *(_DWORD *)(v9 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
          uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v11);
          *(_OWORD *)(v9 + 32) = v13;
          ++*(_DWORD *)(v4 + 12);
          if (v12 != -1) {
            uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_2[v12])(&v10, v11);
          }
          v7 += 48;
          v8 -= 48;
        }
        while (v8);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  int v5 = result;
  uint64_t v7 = v6;
  if (*a1) {
    uint64_t v8 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if ((WTF::StringImpl *)v8 != result)
  {
    do
    {
      WTF::String::isolatedCopy();
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v12, v9, (uint64_t)&v11);
      uint64_t result = v12;
      int v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      while (1)
      {
        int v5 = (WTF::StringImpl *)((char *)v5 + 8);
        if (v5 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v5 + 1) > 1) {
          goto LABEL_12;
        }
      }
      int v5 = v7;
LABEL_12:
      ;
    }
    while (v5 != (WTF::StringImpl *)v8);
  }
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  if (*a1) {
    unsigned int v4 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v4 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a2, v4);
  while (*a1 && *(_DWORD *)(*a1 - 12))
  {
    uint64_t v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)a1);
    uint64_t v7 = (WTF::StringImpl **)*a1;
    if (*a1) {
      v7 += *((unsigned int *)v7 - 1);
    }
    if (v7 == v6)
    {
      uint64_t v8 = 0;
      goto LABEL_11;
    }
    uint64_t v8 = *v6;
    *uint64_t v6 = 0;
    if (*a1)
    {
      uint64_t v12 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
      if ((WTF::StringImpl **)v12 == v6) {
        goto LABEL_11;
      }
    }
    else
    {
      if (!v6) {
        goto LABEL_11;
      }
      uint64_t v12 = 0;
    }
    if ((WTF::StringImpl **)v12 != v6) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(a1, v6);
    }
LABEL_11:
    uint64_t v14 = v8;
    WTF::String::isolatedCopy();
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v15, v9, (uint64_t)v13);
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::optional<WebCore::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      int32x2_t v3 = *(WTF **)result;
      uint64_t v4 = result[3];
      int v5 = 40 * a2;
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        unint64_t v8 = 0;
        uint64_t v9 = 40 * v4;
        do
        {
          char v10 = &v7[v8 / 4];
          uint64_t v11 = (char *)v3 + v8;
          *(unsigned char *)char v10 = 0;
          *((unsigned char *)v10 + 32) = 0;
          if (*((unsigned char *)v3 + v8 + 32))
          {
            uint64_t v12 = *(void *)v11;
            *((unsigned char *)v10 + 8) = v11[8];
            *(void *)char v10 = v12;
            *((void *)v10 + 2) = 0;
            *((void *)v10 + 3) = 0;
            uint64_t v13 = *((void *)v11 + 2);
            *((void *)v11 + 2) = 0;
            *((void *)v10 + 2) = v13;
            LODWORD(v13) = *((_DWORD *)v11 + 6);
            *((_DWORD *)v11 + 6) = 0;
            v10[6] = v13;
            LODWORD(v13) = *((_DWORD *)v11 + 7);
            *((_DWORD *)v11 + 7) = 0;
            unsigned char v10[7] = v13;
            *((unsigned char *)v10 + 32) = 1;
            if (v11[32])
            {
              uint64_t result = (unsigned int *)*((void *)v11 + 2);
              if (result)
              {
                *((void *)v11 + 2) = 0;
                *((_DWORD *)v11 + 6) = 0;
                uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
              }
            }
          }
          v8 += 40;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t *a13)
{
  uint64_t v20 = API::Object::newObject(0x840uLL, 107);
  uint64_t result = WebKit::UserMediaPermissionRequestProxy::UserMediaPermissionRequestProxy(v20, a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13);
  *(void *)uint64_t v20 = &unk_1EE9D5378;
  *(unsigned char *)(v20 + 210WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *a9 = v20;
  return result;
}

void sub_198DEA3F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void WebKit::UserMediaPermissionRequestProxy::~UserMediaPermissionRequestProxy(WebKit::UserMediaPermissionRequestProxy *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D7E78;
  uint64_t v3 = *((void *)this + 262);
  *((void *)this + 262) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 261);
  *((void *)this + 261) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  int v5 = (WTF::StringImpl *)*((void *)this + 260);
  *((void *)this + 260) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2032, a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1816, v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1760, v7);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1704, v8);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1648, v9);
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1064, v10);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 848, v11);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 792, v12);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 736, v13);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 680, v14);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, v15);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v16);
  uint64_t v18 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v18) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, v17);
  }
  uint64_t v19 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v17);
  }
}

{
  uint64_t vars8;

  WebKit::UserMediaPermissionRequestProxy::~UserMediaPermissionRequestProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::UserMediaPermissionRequestProxyMac::~UserMediaPermissionRequestProxyMac(WebKit::UserMediaPermissionRequestProxyMac *this, WTF::StringImpl *a2)
{
  WebKit::UserMediaPermissionRequestProxy::~UserMediaPermissionRequestProxy(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::UserMediaPermissionRequestProxyMac::invalidate(WebKit::UserMediaPermissionRequestProxyMac *this)
{
  if (*((unsigned char *)this + 2104))
  {
    {
      LOBYTE(WebKit::DisplayCaptureSessionManager::singleton(void)::manager) = 0;
      byte_1E93CFBB8 = 0;
      dword_1E93CFBBC = 0;
    }
    uint64_t v2 = *(void *)(*(void *)(*((void *)this + 2) + 64) + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    CFRetain(*(CFTypeRef *)(v3 + 8));
    CFRelease(*(CFTypeRef *)(v3 + 8));
    *((unsigned char *)this + 210WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  }

  return WebKit::UserMediaPermissionRequestProxy::invalidate((uint64_t)this);
}

void WebKit::UserMediaPermissionRequestProxyMac::promptForGetDisplayMedia(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    *(unsigned char *)(a1 + 210WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
    {
      LOBYTE(WebKit::DisplayCaptureSessionManager::singleton(void)::manager) = 0;
      byte_1E93CFBB8 = 0;
      dword_1E93CFBBC = 0;
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 64) + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v7 = *(void *)(a1 + 72);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unint64_t v8 = &unk_1EE9D53B8;
    v8[1] = a1;
    char v10 = v8;
    WebKit::DisplayCaptureSessionManager::promptForGetDisplayMedia((WebCore::MockRealtimeMediaSourceCenter *)&WebKit::DisplayCaptureSessionManager::singleton(void)::manager, a2, v6, v7 + 8, (uint64_t *)&v10);
    uint64_t v9 = (uint64_t)v10;
    char v10 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void sub_198DEA730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::UserMediaPermissionRequestProxyMac::canRequestDisplayCapturePermission(WebKit::UserMediaPermissionRequestProxyMac *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = this;
  {
    if (byte_1E93CFBB8)
    {
      uint64_t v4 = *((void *)this + 2);
      if (!v4) {
        return 0;
      }
LABEL_8:
      if (dword_1E93CFBBC) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }
  }
  else
  {
    LOBYTE(WebKit::DisplayCaptureSessionManager::singleton(void)::manager) = 0;
    byte_1E93CFBB8 = 0;
    dword_1E93CFBBC = 0;
  }
  this = (WebKit::UserMediaPermissionRequestProxyMac *)WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(this);
  uint64_t v4 = *((void *)v3 + 2);
  if (this)
  {
    if (v4) {
      goto LABEL_8;
    }
    return 0;
  }
  if (!v4) {
    return 0;
  }
LABEL_11:
  uint64_t v5 = *(void *)(*(void *)(v4 + 64) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(v6 + 272);
  {
    WebKit::WebPreferencesKey::requireUAGetDisplayMediaPromptKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requireUAGetDisplayMediaPromptKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::requireUAGetDisplayMediaPromptKey(void)::$_0::operator() const(void)::impl;
  }
  this = (WebKit::UserMediaPermissionRequestProxyMac *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requireUAGetDisplayMediaPromptKey(void)::key, a3);
  if (this) {
    return 0;
  }
LABEL_18:
  {
    LOBYTE(WebKit::DisplayCaptureSessionManager::singleton(void)::manager) = 0;
    byte_1E93CFBB8 = 0;
    dword_1E93CFBBC = 0;
LABEL_20:
    uint64_t result = WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(this);
    if (!result) {
      return result;
    }
    return dword_1E93CFBBC == 1;
  }
  if (!byte_1E93CFBB8) {
    goto LABEL_20;
  }
  return dword_1E93CFBBC == 1;
}

WebCore::IOSurface *WebKit::ViewSnapshot::create@<X0>(WebCore::IOSurface **a1@<X0>, WebKit::ViewSnapshot **a2@<X8>)
{
  uint64_t v4 = (WebKit::ViewSnapshot *)WTF::fastMalloc((WTF *)0x58);
  uint64_t v5 = *a1;
  *a1 = 0;
  uint64_t v9 = v5;
  *a2 = WebKit::ViewSnapshot::ViewSnapshot(v4, (uint64_t *)&v9);
  uint64_t result = v9;
  if (v9)
  {
    WebCore::IOSurface::~IOSurface(v9);
    return (WebCore::IOSurface *)WTF::fastFree(v7, v8);
  }
  return result;
}

WebKit::ViewSnapshot *WebKit::ViewSnapshot::ViewSnapshot(WebKit::ViewSnapshot *a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 1;
  *((void *)a1 + 1) = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  *((void *)a1 + 2) = v3;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *(_OWORD *)((char *)a1 + 56) = 0u;
  *(_OWORD *)((char *)a1 + 68) = 0u;
  if (v3)
  {
    {
      byte_1EB35A7F0 = 0;
      WebKit::ViewSnapshotStore::singleton(void)::store = 0uLL;
      *(_OWORD *)&qword_1EB35A7E0 = 0uLL;
    }
    WebKit::ViewSnapshotStore::didAddImageToSnapshot((WebKit::ViewSnapshotStore *)&WebKit::ViewSnapshotStore::singleton(void)::store, a1);
  }
  return a1;
}

unsigned int *WebKit::ViewSnapshot::setSurface(WebCore::IOSurface **this, WebCore::IOSurface **a2)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    *a2 = 0;
    std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100](this + 2, v4);
    {
      byte_1EB35A7F0 = 0;
      WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
      *(_OWORD *)&qword_1EB35A7E0 = 0u;
    }
    return WebKit::ViewSnapshotStore::didAddImageToSnapshot((WebKit::ViewSnapshotStore *)&WebKit::ViewSnapshotStore::singleton(void)::store, (WebKit::ViewSnapshot *)this);
  }
  else
  {
    return (unsigned int *)WebKit::ViewSnapshot::clearImage((WebCore::IOSurface *)this);
  }
}

WebCore::IOSurface *WebKit::ViewSnapshot::clearImage(WebCore::IOSurface *this)
{
  uint64_t v1 = (WebCore::IOSurface **)((char *)this + 16);
  if (*((void *)this + 2))
  {
    {
      byte_1EB35A7F0 = 0;
      WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
      *(_OWORD *)&qword_1EB35A7E0 = 0u;
    }
    WebKit::ViewSnapshotStore::willRemoveImageFromSnapshot((WebKit::ViewSnapshotStore *)&WebKit::ViewSnapshotStore::singleton(void)::store, this);
    return std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100](v1, 0);
  }
  return this;
}

uint64_t WebKit::ViewSnapshot::setVolatile(WebKit::ViewSnapshot *this)
{
  {
    if (byte_1EB35A7F0) {
      return 0;
    }
  }
  else
  {
    byte_1EB35A7F0 = 0;
    WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
    *(_OWORD *)&qword_1EB35A7E0 = 0u;
  }
  uint64_t v2 = (WebCore::IOSurface *)*((void *)this + 2);
  if (v2) {
    return WebCore::IOSurface::setVolatile(v2);
  }
  else {
    return 1;
  }
}

uint64_t WebKit::ViewSnapshot::asLayerContents(WebKit::ViewSnapshot *this)
{
  if (!*((void *)this + 2)) {
    return 0;
  }
  if (WebKit::ViewSnapshot::setVolatile(this))
  {
    WebKit::ViewSnapshot::clearImage(this);
    return 0;
  }
  return *(void *)(*((void *)this + 2) + 48);
}

void WebKit::ViewSnapshot::asImageForTesting(WebKit::ViewSnapshot *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (WebCore::IOSurface *)*((void *)this + 2);
  if (v3)
  {
    WebCore::IOSurface::createPlatformContext(v3);
    WebCore::IOSurface::createImage(*((WebCore::IOSurface **)this + 2), cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_198DEABF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)107>::type()
{
  return 107;
}

uint64_t WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 40 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v4 = v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      uint64_t v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t result = *v3;
      WebCore::IOSurface *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 5;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WebCore::IOSurface *std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100](WebCore::IOSurface **a1, WebCore::IOSurface *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::IOSurface::~IOSurface(result);
    return (WebCore::IOSurface *)WTF::fastFree(v4, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxyMac::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,std::optional<WebCore::CaptureDevice>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D53B8;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxyMac::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,std::optional<WebCore::CaptureDevice>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D53B8;
  *((void *)this + 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxyMac::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,std::optional<WebCore::CaptureDevice>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  LOBYTE(v17) = 0;
  char v22 = 0;
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v11 = *(void *)(a1 + 8);
    *(unsigned char *)(v11 + 210WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    WebKit::UserMediaPermissionRequestProxy::deny((void *)v11, 5);
    return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v12);
  }
  uint64_t v3 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  uint64_t v17 = v3;
  char v4 = *(unsigned char *)(a2 + 8);
  char v18 = v4;
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 16);
  uint64_t v5 = *(WTF::StringImpl **)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  uint64_t v19 = v6;
  uint64_t v20 = v5;
  int v21 = *(_DWORD *)(a2 + 32);
  char v22 = 1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(unsigned char *)(v7 + 210WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3) {
    *(_DWORD *)v3 += 2;
  }
  int v24 = v3;
  char v25 = v4;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v26 = v6;
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  int v27 = v5;
  int v28 = v21;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v23, (uint64_t)&v24, 1uLL);
  WebKit::UserMediaPermissionRequestProxy::setEligibleVideoDeviceUIDs(v7, v23);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v8);
  uint64_t v10 = v27;
  int v27 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v13 = v26;
  uint64_t v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v24;
  int v24 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v9);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = *(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8);
  int v24 = 0;
  if (v22)
  {
    WebKit::UserMediaPermissionRequestProxy::allow(v15, &v24, (const WTF::String *)&v17);
    return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v12);
  }
  uint64_t result = std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
  return result;
}

void sub_198DEAFBC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20)
{
}

WTF *WebKit::UserMediaPermissionRequestProxy::setEligibleVideoDeviceUIDs(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (WTF::StringImpl **)(a1 + 80);
  unsigned int v4 = *(_DWORD *)(a1 + 92);
  if (v4) {
    WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(*v3, (WTF::StringImpl *)((char *)*v3 + 40 * v4));
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

uint64_t *WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  WebCore::IOSurface *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (a3 < 0x6666667)
  {
    unsigned int v6 = 40 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(40 * a3));
    *((_DWORD *)v3 + 2) = v6 / 0x28;
    uint64_t *v3 = v7;
    uint64_t v8 = a2 + 40 * a3;
    unsigned int v9 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v10 = *v3;
      uint64_t v11 = *(_DWORD **)a2;
      if (*(void *)a2) {
        *v11 += 2;
      }
      unsigned int v12 = v9;
      *(void *)(v10 + 40 * v9) = v11;
      uint64_t v13 = v10 + 40 * v9;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v14 = *(_DWORD **)(a2 + 16);
      if (v14) {
        *v14 += 2;
      }
      *(void *)(v13 + 16) = v14;
      uint64_t v15 = *(_DWORD **)(a2 + 24);
      if (v15) {
        *v15 += 2;
      }
      uint64_t v16 = v10 + 40 * v12;
      *(void *)(v16 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v15;
      *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32);
      unsigned int v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      a2 += 40;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_198DEB1B8(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AuxiliaryProcessProxy::~AuxiliaryProcessProxy(WebKit::AuxiliaryProcessProxy *this)
{
  *(void *)this = &unk_1EE9D53E0;
  *((void *)this + 3) = &unk_1EE9D54C0;
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = &unk_1EE9D5518;
  uint64_t v2 = (WebKit::AuxiliaryProcessProxy *)((char *)this + 200);
  WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
  unsigned int v4 = (atomic_uchar *volatile *)*((void *)this + 18);
  if (v4)
  {
    char v5 = 0;
    atomic_uchar *volatile v6 = *v4;
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    ++*((void *)v6 + 1);
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
    }
    IPC::Connection::invalidate((uint64_t)v4);
    char v8 = 0;
    atomic_uchar *volatile v9 = *v4;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v10 - 1;
    *((void *)v9 + 1) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v30 = *((void *)v9 + 2);
      uint64_t v13 = *((void *)v9 + 3);
      *((void *)v9 + 3) = 0;
      BOOL v12 = v30 == 0;
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = 0;
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v11) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v11) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9B37E8;
    *(void *)(v15 + 8) = v9;
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v12;
    uint64_t v53 = v15;
    WTF::ensureOnMainRunLoop();
    uint64_t v16 = v53;
    uint64_t v53 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
LABEL_14:
  uint64_t v17 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v17)
  {
    *(void *)(v17 + 16) = 0;
    WebKit::ProcessLauncher::platformInvalidate((WebKit::ProcessLauncher *)v17);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*(atomic_uchar **)(v17 + 8), v18);
  }
  uint64_t v19 = *((void *)this + 15);
  uint64_t v53 = v19;
  uint64_t v20 = *((unsigned int *)this + 33);
  int v54 = *((_DWORD *)this + 32);
  int v55 = v20;
  v52[0] = 0;
  *((void *)this + 15) = 0;
  v52[1] = 0;
  *((void *)this + 16) = 0;
  WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v3);
  if (v20)
  {
    uint64_t v22 = 40 * v20;
    int v23 = (uint64_t *)(v19 + 16);
    do
    {
      if (*((unsigned char *)v23 + 16))
      {
        uint64_t v24 = *v23;
        *int v23 = 0;
        (*(void (**)(uint64_t, void))(*(void *)v24 + 16))(v24, 0);
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
      v23 += 5;
      v22 -= 40;
    }
    while (v22);
  }
  WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v21);
  uint64_t v26 = *((void *)this + 18);
  if (v26)
  {
    {
      uint64_t v27 = WebKit::connectionToProcessMap(void)::map;
      int v28 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v26 + 24));
      if (v27)
      {
        uint64_t v29 = (void *)(v27 + 16 * *(unsigned int *)(v27 - 4));
        if (v29 == v28) {
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else
    {
      WebKit::connectionToProcessMap(void)::map = 0;
      int v28 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v26 + 24));
    }
    if (!v28) {
      goto LABEL_34;
    }
    uint64_t v29 = 0;
LABEL_32:
    if (v29 != v28) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v28, v25);
    }
  }
LABEL_34:
  uint64_t v31 = *((void *)this + 51);
  if (v31) {
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v31, (WTF::StringImpl *)v25);
  }
  uint64_t v32 = *((void *)this + 50);
  if (v32) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v32, (WTF::StringImpl *)v25);
  }
  uint64_t v33 = *((void *)this + 49);
  if (v33) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v33, (WTF::StringImpl *)v25);
  }
  WebKit::ProcessThrottler::~ProcessThrottler(v2);
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::AuxiliaryProcessProxy *)((char *)this + 152), v34);
  uint64_t v36 = (atomic_uchar *volatile *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v36)
  {
    char v37 = 0;
    atomic_uchar *volatile v38 = *v36;
    atomic_compare_exchange_strong_explicit(*v36, (unsigned __int8 *)&v37, 1u, memory_order_acquire, memory_order_acquire);
    if (v37) {
      MEMORY[0x19972E8D0](v38);
    }
    uint64_t v39 = *((void *)v38 + 1);
    uint64_t v40 = v39 - 1;
    *((void *)v38 + 1) = v39 - 1;
    if (v39 == 1)
    {
      uint64_t v51 = *((void *)v38 + 2);
      uint64_t v42 = *((void *)v38 + 3);
      *((void *)v38 + 3) = 0;
      BOOL v41 = v51 == 0;
    }
    else
    {
      BOOL v41 = 0;
      uint64_t v42 = 0;
    }
    int v43 = 1;
    atomic_compare_exchange_strong_explicit(v38, (unsigned __int8 *)&v43, 0, memory_order_release, memory_order_relaxed);
    if (v43 == 1)
    {
      if (v40) {
        goto LABEL_49;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v38);
      if (v40) {
        goto LABEL_49;
      }
    }
    uint64_t v44 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v44 = &unk_1EE9B37E8;
    *(void *)(v44 + 8) = v38;
    *(void *)(v44 + 16) = v42;
    *(unsigned char *)(v44 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v41;
    uint64_t v53 = v44;
    WTF::ensureOnMainRunLoop();
    uint64_t v45 = v53;
    uint64_t v53 = 0;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
    }
  }
LABEL_49:
  uint64_t v46 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v46) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*(atomic_uchar **)(v46 + 8), v35);
  }
  WTF::Vector<WebKit::AuxiliaryProcessProxy::PendingMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v35);
  WebKit::ResponsivenessTimer::~ResponsivenessTimer((WebKit::AuxiliaryProcessProxy *)((char *)this + 56));
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v47);
  uint64_t v49 = *((void *)this + 1);
  if (v49)
  {
    *(void *)(v49 + 8) = 0;
    uint64_t v50 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v50)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v50, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v50);
        WTF::fastFree((WTF *)v50, v48);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

void WebKit::AuxiliaryProcessProxy::terminate(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 17);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "AuxiliaryProcessProxy::terminate: PID=%d", (uint8_t *)v6, 8u);
  }
  unsigned int v4 = (atomic_uchar *volatile *)*((void *)this + 17);
  if (v4)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 1);
    WebKit::ProcessLauncher::terminateProcess((WebKit::ProcessLauncher *)v4);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*((atomic_uchar **)v4 + 1), v5);
  }
}

void non-virtual thunk to'WebKit::AuxiliaryProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, int *a3)
{
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v2 = (char *)this + 200;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x28);
  WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v3, (uint64_t)v2, "IPC sending due to large outgoing queue", 40, 0, 0);
  unsigned int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v4 = 3;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  BOOL v12 = v4;
  char v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9D57F0;
  v5[1] = v3;
  v10[0] = v5;
  v10[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v11 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v12, 0, (uint64_t)v10, 0);
  if (v11 && v10[0]) {
    (*(void (**)(void))(*(void *)v10[0] + 8))(v10[0]);
  }
  uint64_t result = v12;
  BOOL v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

atomic_uchar *WebKit::AuxiliaryProcessProxy::shutDownProcess(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (!v2 || !*(unsigned char *)(v2 + 104))
  {
    if (*((void *)this + 18)) {
      WebKit::XPCConnectionTerminationWatchdog::startConnectionTerminationWatchdog();
    }
    return WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
  }
  *((void *)this + 17) = 0;
  *(void *)(v2 + 16) = 0;
  WebKit::ProcessLauncher::platformInvalidate((WebKit::ProcessLauncher *)v2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessLauncher,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 8), v3);
  uint64_t v4 = *((void *)this + 18);
  if (!v4) {
    return WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
  }
  char v5 = 0;
  atomic_uchar *volatile v6 = *(atomic_uchar *volatile *)v4;
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  (*(void (**)(WebKit::AuxiliaryProcessProxy *, uint64_t))(*(void *)this + 192))(this, v4);
  uint64_t v8 = *((void *)this + 17);
  if (v8 && *(unsigned char *)(v8 + 104) || *((void *)this + 18))
  {
    atomic_uchar *volatile v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)atomic_uchar *volatile v9 = 7;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v42 = v9;
    LOBYTE(v40) = 0;
    char v41 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v42, 0, (uint64_t)&v40, 1);
    if (v41 && v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
    char v11 = v42;
    uint64_t v42 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v16, v17);
    }
  }
  IPC::Connection::invalidate(v4);
  {
    uint64_t v12 = WebKit::connectionToProcessMap(void)::map;
    uint64_t v13 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v4 + 24));
    if (v12)
    {
      uint64_t v15 = (void *)(v12 + 16 * *(unsigned int *)(v12 - 4));
      if (v15 == v13) {
        goto LABEL_28;
      }
      goto LABEL_26;
    }
  }
  else
  {
    WebKit::connectionToProcessMap(void)::map = 0;
    uint64_t v13 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v4 + 24));
  }
  if (!v13) {
    goto LABEL_28;
  }
  uint64_t v15 = 0;
LABEL_26:
  if (v15 != v13) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v13, v14);
  }
LABEL_28:
  char v18 = (atomic_uchar *volatile *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v18)
  {
    char v19 = 0;
    atomic_uchar *volatile v20 = *v18;
    atomic_compare_exchange_strong_explicit(*v18, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
    if (v19) {
      MEMORY[0x19972E8D0](v20);
    }
    uint64_t v21 = *((void *)v20 + 1);
    uint64_t v22 = v21 - 1;
    *((void *)v20 + 1) = v21 - 1;
    if (v21 == 1)
    {
      uint64_t v39 = *((void *)v20 + 2);
      uint64_t v24 = *((void *)v20 + 3);
      *((void *)v20 + 3) = 0;
      BOOL v23 = v39 == 0;
    }
    else
    {
      BOOL v23 = 0;
      uint64_t v24 = 0;
    }
    int v25 = 1;
    atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
    if (v25 == 1)
    {
      if (!v22) {
        goto LABEL_35;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
      if (!v22)
      {
LABEL_35:
        uint64_t v26 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v26 = &unk_1EE9B37E8;
        *(void *)(v26 + 8) = v20;
        *(void *)(v26 + 16) = v24;
        *(unsigned char *)(v26 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v23;
        uint64_t v40 = v26;
        WTF::ensureOnMainRunLoop();
        uint64_t v27 = v40;
        uint64_t v40 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
      }
    }
  }
  WTF::RunLoop::TimerBase::stop((WebKit::AuxiliaryProcessProxy *)((char *)this + 64));
  char v28 = 0;
  *((void *)this + 12) = 0;
  *(_WORD *)((char *)this + 105) = 0;
  atomic_uchar *volatile v29 = *(atomic_uchar *volatile *)v4;
  atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v28, 1u, memory_order_acquire, memory_order_acquire);
  if (v28) {
    MEMORY[0x19972E8D0](v29);
  }
  uint64_t v30 = *((void *)v29 + 1);
  uint64_t v31 = v30 - 1;
  *((void *)v29 + 1) = v30 - 1;
  if (v30 == 1)
  {
    uint64_t v38 = *((void *)v29 + 2);
    uint64_t v33 = *((void *)v29 + 3);
    *((void *)v29 + 3) = 0;
    BOOL v32 = v38 == 0;
  }
  else
  {
    BOOL v32 = 0;
    uint64_t v33 = 0;
  }
  int v34 = 1;
  atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
  if (v34 == 1)
  {
    if (v31) {
      return WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    if (v31) {
      return WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
    }
  }
  uint64_t v35 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v35 = &unk_1EE9B37E8;
  *(void *)(v35 + 8) = v29;
  *(void *)(v35 + 16) = v33;
  *(unsigned char *)(v35 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v32;
  uint64_t v40 = v35;
  WTF::ensureOnMainRunLoop();
  uint64_t v36 = v40;
  uint64_t v40 = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  return WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
}

uint64_t IPC::Connection::send<Messages::AuxiliaryProcess::SetProcessSuppressionEnabled>(uint64_t a1, char *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 6;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void WebKit::AuxiliaryProcessProxy::logInvalidMessage(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  char v5 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    if (a3 >= 0xEF4) {
      unsigned int v6 = 3828;
    }
    else {
      unsigned int v6 = a3;
    }
    int v7 = (&IPC::Detail::messageDescriptions)[3 * v6];
    uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 152))(a1);
    uint64_t v9 = a1[17];
    if (v9) {
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    }
    int v10 = 136446722;
    char v11 = v7;
    __int16 v12 = 2082;
    uint64_t v13 = v8;
    __int16 v14 = 1024;
    int v15 = v9;
    _os_log_fault_impl(&dword_1985F2000, v5, OS_LOG_TYPE_FAULT, "Received an invalid message '%{public}s' from the %{public}s process with PID %d", (uint8_t *)&v10, 0x1Cu);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(result + 169))
  {
    result += 56;
    if (a2)
    {
      if (!*(unsigned char *)(v2 + 105))
      {
        uint64_t result = WebKit::ResponsivenessTimer::start(result);
        *(unsigned char *)(v2 + 106) = 1;
      }
    }
    else
    {
      return WebKit::ResponsivenessTimer::start(result);
    }
  }
  else if (!*(unsigned char *)(result + 185))
  {
    *(_WORD *)(result + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a2 | 0x100;
  }
  return result;
}

BOOL WebKit::AuxiliaryProcessProxy::mayBecomeUnresponsive(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  getpid();
  if (!sandbox_check() || (getpid(), !sandbox_check()))
  {
    *(void *)char v5 = 0xE00000001;
    int v6 = 1;
    uint64_t v2 = *((void *)this + 17);
    if (v2) {
      LODWORD(v2) = *(_DWORD *)(v2 + 108);
    }
    int v7 = v2;
    size_t v4 = 648;
    if (sysctl(v5, 4u, v8, &v4, 0, 0) != -1 && (v9 & 0x800) != 0) {
      return 0;
    }
  }
  if (*((unsigned char *)this + 389)) {
    return *((void *)this + 28) != 0;
  }
  return 1;
}

void WebKit::AuxiliaryProcessProxy::didBecomeUnresponsive(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = (*(uint64_t (**)(WebKit::AuxiliaryProcessProxy *))(*(void *)this + 152))(this);
    uint64_t v4 = *((void *)this + 17);
    if (v4) {
      LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_DWORD *)(v4 + 108);
    }
    int v5 = 136446466;
    uint64_t v6 = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "AuxiliaryProcessProxy::didBecomeUnresponsive: %{public}s process with PID %d became unresponsive", (uint8_t *)&v5, 0x12u);
  }
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::checkForResponsiveness(uint64_t a1, uint64_t *a2, int a3)
{
  WebKit::AuxiliaryProcessProxy::startResponsivenessTimer(a1, a3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  int v5 = *(atomic_uint **)(a1 + 8);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  __int16 v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v7 = 3;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  int v15 = v7;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v8 = &unk_1EE9D5840;
  v8[1] = v5;
  void v8[2] = v6;
  v13[0] = v8;
  v13[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v14 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v15, 0, (uint64_t)v13, 1);
  if (v14 && v13[0]) {
    (*(void (**)(void))(*(void *)v13[0] + 8))(v13[0]);
  }
  uint64_t result = v15;
  int v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::requestRemoteProcessTermination(WebKit::AuxiliaryProcessProxy *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 80))();
}

uint64_t non-virtual thunk to'WebKit::AuxiliaryProcessProxy::requestRemoteProcessTermination(WebKit::AuxiliaryProcessProxy *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 4) + 80))();
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::AuxiliaryProcess::PreferencesDidUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 5;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> const&>(v8, *(uint64_t ***)a2);
  IPC::ArgumentCoder<WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> const&>(v8, *(WTF ****)(a2 + 8));
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16 && v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  char v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

IPC::Encoder *WebKit::BackgroundProcessResponsivenessTimer::responsivenessCheckTimerFired(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  WTF::RunLoop::TimerBase::start();
  uint64_t v2 = *(void *)(*(void *)this + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 1u);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2615;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v10 = v3;
  LOBYTE(v8) = 0;
  char v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v10, 0, (uint64_t)&v8, 1);
  if (v9)
  {
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v6, v7);
    if (!v2) {
      return result;
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
}

unsigned __int8 *WebKit::BackgroundProcessResponsivenessTimer::timeoutTimerFired(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  double v2 = *((double *)this + 1) + *((double *)this + 1);
  if (v2 > 28800.0) {
    double v2 = 28800.0;
  }
  *((double *)this + 1) = v2;
  WTF::RunLoop::TimerBase::start();
  uint64_t v3 = *(void *)(*(void *)this + 8);
  uint64_t v4 = (unsigned int *)(v3 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  if (*(unsigned char *)(v3 + 389))
  {
    uint64_t v5 = *(void *)(v3 + 224);
    uint64_t result = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
    if (!v5) {
      return result;
    }
  }
  else
  {
    uint64_t result = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
  }
  if (*((unsigned char *)this + 80))
  {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8) + 48))(*(void *)(*(void *)this + 8));
    if (result)
    {
      return WebKit::BackgroundProcessResponsivenessTimer::setResponsive((unsigned __int8 *)this, 0);
    }
  }
  return result;
}

void WebKit::BackgroundProcessResponsivenessTimer::~BackgroundProcessResponsivenessTimer(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  double v2 = (WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48);
  *((void *)this + 6) = &unk_1EE9B3390;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  *((void *)this + 2) = &unk_1EE9B3390;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16));
  uint64_t v6 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
}

unsigned __int8 *WebKit::BackgroundProcessResponsivenessTimer::didReceiveBackgroundResponsivenessPong(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  double v2 = (WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48);
  uint64_t result = (unsigned __int8 *)WTF::RunLoop::TimerBase::isActive((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48));
  if (result)
  {
    WTF::RunLoop::TimerBase::stop(v2);
    double v4 = *((double *)this + 1) + *((double *)this + 1);
    if (v4 > 28800.0) {
      double v4 = 28800.0;
    }
    *((double *)this + 1) = v4;
    WTF::RunLoop::TimerBase::start();
    return WebKit::BackgroundProcessResponsivenessTimer::setResponsive((unsigned __int8 *)this, 1);
  }
  return result;
}

unsigned __int8 *WebKit::BackgroundProcessResponsivenessTimer::setResponsive(unsigned __int8 *this, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (this[80] != a2)
  {
    unsigned __int8 v2 = a2;
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(*(void *)this + 8);
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
    (*(void (**)(void))(**(void **)(*(void *)v3 + 8) + 32))(*(void *)(*(void *)v3 + 8));
    v3[80] = v2;
    (*(void (**)(void))(**(void **)(*(void *)v3 + 8) + 40))(*(void *)(*(void *)v3 + 8));
    int v5 = v3[80];
    uint64_t v6 = qword_1EB358280;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(*(void *)(*(void *)v3 + 8) + 136);
        if (v8) {
          LODWORD(v8) = *(_DWORD *)(v8 + 108);
        }
        int v10 = 67109120;
        int v11 = v8;
        _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "Notifying the client that background WebProcess with pid %d has become responsive again", (uint8_t *)&v10, 8u);
      }
      (*(void (**)(void))(**(void **)(*(void *)v3 + 8) + 24))(*(void *)(*(void *)v3 + 8));
    }
    else
    {
      if (v7)
      {
        uint64_t v9 = *(void *)(*(void *)(*(void *)v3 + 8) + 136);
        if (v9) {
          LODWORD(v9) = *(_DWORD *)(v9 + 108);
        }
        int v10 = 67109120;
        int v11 = v9;
        _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "Notifying the client that background WebProcess with pid %d has become unresponsive", (uint8_t *)&v10, 8u);
      }
      (*(void (**)(void))(**(void **)(*(void *)v3 + 8) + 16))(*(void *)(*(void *)v3 + 8));
    }
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
  }
  return this;
}

unsigned __int8 *WebKit::BackgroundProcessResponsivenessTimer::processTerminated(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  WTF::RunLoop::TimerBase::stop((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48));
  WTF::RunLoop::TimerBase::stop((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16));

  return WebKit::BackgroundProcessResponsivenessTimer::setResponsive((unsigned __int8 *)this, 1);
}

void WebKit::BrowsingContextGroup::~BrowsingContextGroup(WebKit::BrowsingContextGroup *this, void *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)this + 24, a2);
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::deallocateTable(v6, v4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

uint64_t WebKit::BrowsingContextGroup::processForSite(WebKit::BrowsingContextGroup *this, const WTF::StringImpl **a2)
{
  WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::Site>>,WebKit::Site>(a2, (uint64_t)this + 16, (atomic_uint **)&v8);
  uint64_t v3 = (unsigned int *)v8;
  if (!v8) {
    return 0;
  }
  uint64_t v4 = *((void *)v8 + 1);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = *(void *)(v5 + 136);
    if ((!v6 || !*(unsigned char *)(v6 + 104)) && !*(void *)(v5 + 144)) {
      uint64_t v4 = 0;
    }
  }
  uint64_t v8 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v4;
}

void WebKit::BrowsingContextGroup::addFrameProcess(WebKit::BrowsingContextGroup *this, WebKit::FrameProcess *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (WTF::StringImpl **)((char *)a2 + 32);
  uint64_t v5 = (uint64_t *)((char *)this + 16);
  uint64_t v6 = *((void *)this + 2);
  if (v6
    || (WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::expand((uint64_t *)this + 2),
        (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WebKit::Site::hash(v4) & v7;
  uint64_t v9 = (void *)(v6 + 24 * v8);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>((WTF **)v9, v10, v11) & 1) == 0)
  {
    __int16 v72 = v3;
    char v14 = 0;
    int v15 = 1;
    do
    {
      if (*v9 == -1)
      {
        char v14 = v9;
      }
      else if (WebKit::Site::operator==((WTF **)v9, v4, v13))
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
        uint64_t v26 = (atomic_uint *)*((void *)a2 + 1);
        if (v26) {
          atomic_fetch_add(v26, 1u);
        }
        uint64_t v27 = (unsigned int *)v9[2];
        void v9[2] = v26;
        uint64_t v3 = v72;
        if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v27);
          WTF::fastFree((WTF *)v27, v25);
        }
        goto LABEL_32;
      }
      unsigned int v8 = (v8 + v15) & v7;
      uint64_t v9 = (void *)(v6 + 24 * v8);
      ++v15;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>((WTF **)v9, v12, v13));
    uint64_t v3 = v72;
    if (v14)
    {
      *char v14 = 0;
      v14[1] = 0;
      void v14[2] = 0;
      --*(_DWORD *)(*v5 - 16);
      uint64_t v9 = v14;
    }
  }
  WTF::String::operator=(v9, v4);
  WTF::String::operator=(v9 + 1, (WTF::StringImpl **)a2 + 5);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  uint64_t v17 = (atomic_uint *)*((void *)a2 + 1);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  char v18 = (unsigned int *)v9[2];
  void v9[2] = v17;
  if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v16);
  }
  uint64_t v19 = *v5;
  if (*v5) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *v5;
  if (*v5) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 <= 0x400)
  {
    if (3 * v24 > 4 * v23) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }
  if (v24 <= 2 * v23) {
LABEL_26:
  }
    WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::expand(v5);
LABEL_32:
  char v28 = (void *)*((void *)v3 + 4);
  if (!v28) {
    return;
  }
  while (1)
  {
    uint64_t v29 = *(void *)(*v28 + 8);
    if (v29) {
      break;
    }
    char v28 = (void *)v28[2];
    if (!v28) {
      return;
    }
  }
  uint64_t v30 = (uint64_t *)((char *)v3 + 56);
LABEL_37:
  uint64_t v31 = (WebKit::WebPageProxy *)(v29 - 16);
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)(v29 - 16), (uint64_t *)&v73);
  MEMORY[0x19972E890](&v76, &v73, 0);
  WebKit::Site::Site((WebKit::Site *)&v74, (const WTF::URL *)&v76);
  char v34 = WebKit::Site::operator==(v4, &v74, v32);
  uint64_t v35 = v75;
  uint64_t v75 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v33);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  uint64_t v36 = v74;
  v74 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v33);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  char v37 = v76;
  char v76 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v33);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  uint64_t v38 = v73;
  int v73 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::destroy(v38, v33);
      if (v34) {
        return;
      }
      goto LABEL_55;
    }
    *(_DWORD *)v38 -= 2;
  }
  if (v34) {
    return;
  }
LABEL_55:
  unsigned int v39 = *((_DWORD *)v3 + 16);
  unsigned int v40 = *((_DWORD *)v3 + 17);
  *((_DWORD *)v3 + 16) = v39 + 1;
  if (v39 > v40) {
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)v30, v33);
  }
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>((atomic_uint **)&v76, (uint64_t)v31);
  uint64_t v42 = *v30;
  if (*v30
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v30, 0), (uint64_t v42 = *v30) != 0))
  {
    char v43 = 0;
    int v44 = *(_DWORD *)(v42 - 8);
  }
  else
  {
    int v44 = 0;
    char v43 = 1;
  }
  uint64_t v45 = 0;
  uint64_t v46 = (unsigned int *)v76;
  unint64_t v47 = ((unint64_t)v76 + ~((void)v76 << 32)) ^ (((unint64_t)v76 + ~((void)v76 << 32)) >> 22);
  unint64_t v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
  unint64_t v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
  unsigned int v50 = (v49 >> 31) ^ v49;
  for (int i = 1; ; ++i)
  {
    unsigned int v52 = v50 & v44;
    uint64_t v53 = v42 + 16 * v52;
    int v54 = *(unsigned int **)v53;
    if (*(void *)v53 != -1) {
      break;
    }
    uint64_t v45 = (void *)(v42 + 16 * v52);
LABEL_66:
    unsigned int v50 = i + v52;
  }
  if (!v54)
  {
    if (v45)
    {
      *uint64_t v45 = 0;
      v45[1] = 0;
      --*(_DWORD *)(*v30 - 16);
      uint64_t v53 = (uint64_t)v45;
    }
    char v76 = 0;
    int v55 = *(unsigned int **)v53;
    *(void *)uint64_t v53 = v46;
    if (v55 && atomic_fetch_add((atomic_uint *volatile)v55, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, v41);
    }
    long long v56 = *(uint64_t **)(v53 + 8);
    *(void *)(v53 + 8) = 0;
    if (v56) {
      WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v56, v41);
    }
    uint64_t v57 = *v30;
    if (*v30) {
      int v58 = *(_DWORD *)(v57 - 12) + 1;
    }
    else {
      int v58 = 1;
    }
    *(_DWORD *)(v57 - 12) = v58;
    uint64_t v62 = *v30;
    if (*v30) {
      int v63 = *(_DWORD *)(v62 - 12);
    }
    else {
      int v63 = 0;
    }
    uint64_t v64 = (*(_DWORD *)(v62 - 16) + v63);
    unint64_t v65 = *(unsigned int *)(v62 - 4);
    if (v65 > 0x400)
    {
      if (v65 > 2 * v64) {
        goto LABEL_84;
      }
    }
    else if (3 * v65 > 4 * v64)
    {
LABEL_84:
      uint64_t v59 = v3;
LABEL_92:
      uint64_t v61 = v62 + 16 * v65;
      uint64_t v46 = (unsigned int *)v76;
      goto LABEL_93;
    }
    uint64_t v53 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v30, (unsigned int **)v53);
    uint64_t v62 = *v30;
    uint64_t v59 = v3;
    if (*v30) {
      unint64_t v65 = *(unsigned int *)(v62 - 4);
    }
    else {
      unint64_t v65 = 0;
    }
    goto LABEL_92;
  }
  if (v54 != (unsigned int *)v76) {
    goto LABEL_66;
  }
  uint64_t v59 = v3;
  if (v43) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = *(unsigned int *)(v42 - 4);
  }
  uint64_t v61 = v42 + 16 * v60;
LABEL_93:
  char v76 = 0;
  if (v46 && atomic_fetch_add((atomic_uint *volatile)v46, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v46);
    WTF::fastFree((WTF *)v46, v41);
  }
  char v76 = (WTF::StringImpl *)v30;
  uint64_t v77 = v53;
  uint64_t v78 = v61;
  uint64_t v66 = *v30;
  if (*v30)
  {
    uint64_t v67 = *(unsigned int *)(v66 - 4);
    uint64_t v68 = v66 + 16 * v67;
  }
  else
  {
    uint64_t v68 = 0;
    uint64_t v67 = 0;
  }
  uint64_t v3 = v59;
  uint64_t v79 = v68;
  uint64_t v80 = v66 + 16 * v67;
  int v81 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v76);
  unint64_t v69 = (uint64_t *)(v77 + 8);
  char v70 = (atomic_uint *)*((void *)a2 + 2);
  __int16 v71 = (WebKit::RemotePageProxy *)WTF::fastMalloc((WTF *)0x60);
  v74 = WebKit::RemotePageProxy::RemotePageProxy(v71, v31, v70, (const WebKit::Site *)v4, 0);
  WebKit::RemotePageProxy::injectPageIntoNewProcess(v74);
  WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add((uint64_t *)&v76, v69, (uint64_t *)&v74);
  if (v74) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v74 + 8))(v74);
  }
  while (1)
  {
    char v28 = (void *)v28[2];
    if (!v28) {
      break;
    }
    uint64_t v29 = *(void *)(*v28 + 8);
    if (v29)
    {
      ++*((_DWORD *)v3 + 12);
      goto LABEL_37;
    }
  }
  ++*((_DWORD *)v3 + 12);
}

uint64_t WebKit::Site::operator==(WTF **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*a1, *a2, a3);
  if (result)
  {
    int v7 = a1[1];
    unsigned int v8 = a2[1];
    return WTF::equal(v7, v8, v6);
  }
  return result;
}

void WebKit::BrowsingContextGroup::removeFrameProcess(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    goto LABEL_23;
  }
  uint64_t v5 = (const WTF::StringImpl **)(a2 + 32);
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = WebKit::Site::hash((WTF::StringImpl **)(a2 + 32)) & v6;
  unsigned int v8 = (WTF **)(v3 + 24 * v7);
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v8, v9, v10))
  {
LABEL_7:
    uint64_t v13 = *v4;
    if (!*v4) {
      goto LABEL_23;
    }
    unsigned int v8 = (WTF **)(v13 + 24 * *(unsigned int *)(v13 - 4));
  }
  else
  {
    int v12 = 1;
    while (*v8 == (WTF *)-1 || (WebKit::Site::operator==(v8, v5, v11) & 1) == 0)
    {
      unsigned int v7 = (v7 + v12) & v6;
      unsigned int v8 = (WTF **)(v3 + 24 * v7);
      ++v12;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v8, a2, v11))goto LABEL_7; {
    }
      }
    uint64_t v13 = *v4;
    if (!*v4) {
      goto LABEL_10;
    }
  }
  v13 += 24 * *(unsigned int *)(v13 - 4);
  if ((WTF **)v13 != v8)
  {
LABEL_10:
    if ((WTF **)v13 != v8)
    {
      WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket((uint64_t)v8, (WTF::StringImpl *)a2);
      ++*(_DWORD *)(*v4 - 16);
      uint64_t v14 = *v4;
      int v15 = *v4 ? *(_DWORD *)(v14 - 12) - 1 : -1;
      *(_DWORD *)(v14 - 12) = v15;
      uint64_t v16 = *v4;
      if (*v4)
      {
        unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
        unsigned int v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9) {
          WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::rehash(v4, v18 >> 1);
        }
      }
    }
  }
LABEL_23:
  uint64_t v20 = *(void *)(a1 + 56);
  if (!v20) {
    goto LABEL_64;
  }
  unsigned int v50 = (uint64_t *)(a1 + 56);
  unsigned int v21 = *(_DWORD *)(v20 - 4);
  if (!v21)
  {
LABEL_72:
    *(_DWORD *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    goto LABEL_73;
  }
  int v22 = 0;
  do
  {
    uint64_t v23 = v20 + 16 * --v21;
    if ((unint64_t)(*(void *)v23 + 1) < 2) {
      continue;
    }
    if (!*(void *)(*(void *)v23 + 8)) {
      goto LABEL_58;
    }
    uint64_t v24 = v20 + 16 * v21;
    uint64_t v27 = *(void *)(v24 + 8);
    uint64_t v26 = (uint64_t *)(v24 + 8);
    uint64_t v25 = v27;
    if (!v27) {
      goto LABEL_58;
    }
    int v28 = *(_DWORD *)(v25 - 4);
    if (!v28) {
      goto LABEL_57;
    }
    int v29 = 0;
    unsigned int v30 = v28 - 1;
    do
    {
      uint64_t v31 = v30;
      BOOL v32 = *(void **)(v25 + 8 * v30);
      if ((unint64_t)v32 + 1 >= 2 && *(void *)(v32[3] + 176) == *(void *)(*(void *)(a2 + 16) + 176))
      {
        *(void *)(v25 + 8 * v30) = -1;
        (*(void (**)(void *))(*v32 + 8))(v32);
        ++v29;
      }
      --v30;
    }
    while (v31);
    uint64_t v25 = *v26;
    if (v29)
    {
      *(_DWORD *)(v25 - 16) += v29;
      uint64_t v33 = *v26;
      if (*v26) {
        int v34 = *(_DWORD *)(v33 - 12);
      }
      else {
        int v34 = 0;
      }
      *(_DWORD *)(v33 - 12) = v34 - v29;
      uint64_t v25 = *v26;
    }
    if (!v25) {
      goto LABEL_58;
    }
    unsigned int v35 = *(_DWORD *)(v25 - 4);
    uint64_t v36 = *(unsigned int *)(v25 - 12);
    if (v35 < 9 || 6 * (int)v36 >= v35) {
      goto LABEL_57;
    }
    unsigned int v38 = (v36 - 1) | ((v36 - 1) >> 1) | (((v36 - 1) | ((v36 - 1) >> 1)) >> 2);
    unsigned int v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
    unint64_t v40 = (v39 | HIWORD(v39)) + 1;
    if (v40 > 0x400)
    {
      if (v40 > 2 * v36) {
        goto LABEL_50;
      }
    }
    else if (3 * v40 > 4 * v36)
    {
      goto LABEL_48;
    }
    LODWORD(v40) = 2 * v40;
    if (v40 <= 0x400)
    {
LABEL_48:
      double v41 = (double)v36;
      double v42 = (double)v40 * 0.604166667;
      goto LABEL_51;
    }
LABEL_50:
    double v41 = (double)v36;
    double v42 = (double)v40 * 0.416666667;
LABEL_51:
    if (v42 <= v41) {
      LODWORD(v40) = 2 * v40;
    }
    if (v40 <= 8) {
      unsigned int v43 = 8;
    }
    else {
      unsigned int v43 = v40;
    }
    WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(v26, v43, 0);
    uint64_t v25 = *v26;
    if (*v26)
    {
LABEL_57:
      if (*(_DWORD *)(v25 - 12)) {
        continue;
      }
    }
LABEL_58:
    WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>::customDeleteBucket(v20 + 16 * v21, (void *)a2);
    ++v22;
  }
  while (v21);
  uint64_t v20 = *v50;
  if (!v22)
  {
    if (v20) {
      goto LABEL_67;
    }
    goto LABEL_64;
  }
  *(_DWORD *)(v20 - 16) += v22;
  uint64_t v44 = *v50;
  if (*v50) {
    int v45 = *(_DWORD *)(v44 - 12);
  }
  else {
    int v45 = 0;
  }
  *(_DWORD *)(v44 - 12) = v45 - v22;
  uint64_t v20 = *v50;
  if (!*v50)
  {
LABEL_64:
    unsigned int v46 = 0;
    *(_DWORD *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    goto LABEL_74;
  }
LABEL_67:
  unsigned int v47 = *(_DWORD *)(v20 - 4);
  if (v47 < 9 || 6 * *(_DWORD *)(v20 - 12) >= v47) {
    goto LABEL_72;
  }
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v50);
  uint64_t v20 = *(void *)(a1 + 56);
  *(_DWORD *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v20)
  {
LABEL_73:
    unsigned int v46 = *(_DWORD *)(v20 - 12);
    int v49 = 0x7FFFFFFF;
    if (v46 < 0x7FFFFFFF) {
      goto LABEL_74;
    }
    goto LABEL_75;
  }
  unsigned int v46 = 0;
LABEL_74:
  int v49 = v46;
LABEL_75:
  *(_DWORD *)(a1 + 68) = 2 * v49;
}

void WebKit::BrowsingContextGroup::addPage(WebKit::BrowsingContextGroup *this, WebKit::WebPageProxy *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 24);
  unsigned int v5 = *((_DWORD *)this + 13);
  unsigned int v6 = *((_DWORD *)this + 12) + 1;
  *((_DWORD *)this + 12) = v6;
  if (v6 > v5) {
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)this + 24);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  unsigned int v7 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v7, 1u);
  atomic_fetch_add(v7, 1u);
  int v73 = (WTF *)v7;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v4, (uint64_t *)&v73, (uint64_t)&v67);
  uint64_t v9 = (unsigned int *)v73;
  int v73 = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v7);
    WTF::fastFree((WTF *)v7, v8);
  }
  uint64_t v10 = (uint64_t *)((char *)this + 56);
  unsigned int v11 = *((_DWORD *)this + 16);
  unsigned int v12 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 16) = v11 + 1;
  if (v11 > v12) {
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 56, v8);
  }
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>((atomic_uint **)&v67, (uint64_t)a2);
  uint64_t v14 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 7, 0), (uint64_t v14 = *v10) != 0))
  {
    char v15 = 0;
    int v16 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v16 = 0;
    char v15 = 1;
  }
  unsigned int v17 = 0;
  unsigned int v18 = (unsigned int *)v67;
  unint64_t v19 = ((unint64_t)v67 + ~((void)v67 << 32)) ^ (((unint64_t)v67 + ~((void)v67 << 32)) >> 22);
  unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  unsigned int v22 = (v21 >> 31) ^ v21;
  for (int i = 1; ; ++i)
  {
    unsigned int v24 = v22 & v16;
    uint64_t v25 = v14 + 16 * v24;
    uint64_t v26 = *(unsigned int **)v25;
    if (*(void *)v25 != -1) {
      break;
    }
    unsigned int v17 = (void *)(v14 + 16 * v24);
LABEL_18:
    unsigned int v22 = i + v24;
  }
  if (!v26)
  {
    if (v17)
    {
      void *v17 = 0;
      v17[1] = 0;
      --*(_DWORD *)(*v10 - 16);
      uint64_t v25 = (uint64_t)v17;
    }
    uint64_t v67 = 0;
    uint64_t v27 = *(unsigned int **)v25;
    *(void *)uint64_t v25 = v18;
    if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v13);
    }
    int v28 = *(uint64_t **)(v25 + 8);
    *(void *)(v25 + 8) = 0;
    if (v28) {
      WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v28, v13);
    }
    uint64_t v29 = *v10;
    if (*v10) {
      int v30 = *(_DWORD *)(v29 - 12) + 1;
    }
    else {
      int v30 = 1;
    }
    *(_DWORD *)(v29 - 12) = v30;
    uint64_t v33 = *v10;
    if (*v10) {
      int v34 = *(_DWORD *)(v33 - 12);
    }
    else {
      int v34 = 0;
    }
    uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
    unint64_t v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
      {
LABEL_36:
        uint64_t v25 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 7, (unsigned int **)v25);
        uint64_t v33 = *v10;
        if (*v10) {
          unint64_t v36 = *(unsigned int *)(v33 - 4);
        }
        else {
          unint64_t v36 = 0;
        }
      }
    }
    else if (3 * v36 <= 4 * v35)
    {
      goto LABEL_36;
    }
    uint64_t v32 = v33 + 16 * v36;
    unsigned int v18 = (unsigned int *)v67;
    goto LABEL_41;
  }
  if (v26 != (unsigned int *)v67) {
    goto LABEL_18;
  }
  if (v15) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *(unsigned int *)(v14 - 4);
  }
  uint64_t v32 = v14 + 16 * v31;
LABEL_41:
  uint64_t v67 = 0;
  if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v13);
  }
  uint64_t v67 = (WebKit::BrowsingContextGroup *)((char *)this + 56);
  uint64_t v68 = v25;
  uint64_t v69 = v32;
  uint64_t v37 = *v10;
  if (*v10)
  {
    uint64_t v38 = *(unsigned int *)(v37 - 4);
    uint64_t v39 = v37 + 16 * v38;
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v38 = 0;
  }
  uint64_t v70 = v39;
  uint64_t v71 = v37 + 16 * v38;
  int v72 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v67);
  uint64_t v44 = *((void *)this + 2);
  double v42 = (uint64_t *)((char *)this + 16);
  uint64_t v43 = v44;
  if (v44)
  {
    int v45 = *(_DWORD *)(v43 - 4);
    if (v45)
    {
      int v46 = 0;
      unsigned int v47 = (uint64_t *)(v68 + 8);
      unsigned int v48 = v45 - 1;
      do
      {
        uint64_t v49 = v48;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>((WTF **)(v43 + 24 * v48), (uint64_t)v40, v41) & 1) == 0&& *(void *)(v43 + 24 * v48) != -1)
        {
          uint64_t v50 = *(void *)(v43 + 24 * v48 + 16);
          if (v50 && (uint64_t v51 = *(void *)(v50 + 8)) != 0)
          {
            uint64_t v52 = *(void *)(v51 + 16);
            if (*(void *)(v52 + 176) != *(void *)(*((void *)a2 + 32) + 176))
            {
              uint64_t v53 = (WebKit::RemotePageProxy *)WTF::fastMalloc((WTF *)0x60);
              int v73 = WebKit::RemotePageProxy::RemotePageProxy(v53, a2, (atomic_uint *)v52, (const WebKit::Site *)(v43 + 24 * v48), 0);
              WebKit::RemotePageProxy::injectPageIntoNewProcess(v73);
              WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add((uint64_t *)&v67, v47, (uint64_t *)&v73);
              if (v73) {
                (*(void (**)(WTF *))(*(void *)v73 + 8))(v73);
              }
            }
          }
          else
          {
            WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(v43 + 24 * v48, v40);
            ++v46;
          }
        }
        --v48;
      }
      while (v49);
      uint64_t v54 = *v42;
      if (v46)
      {
        *(_DWORD *)(v54 - 16) += v46;
        uint64_t v55 = *v42;
        if (*v42) {
          int v56 = *(_DWORD *)(v55 - 12);
        }
        else {
          int v56 = 0;
        }
        *(_DWORD *)(v55 - 12) = v56 - v46;
        uint64_t v54 = *v42;
      }
      if (v54)
      {
        unsigned int v57 = *(_DWORD *)(v54 - 4);
        uint64_t v58 = *(unsigned int *)(v54 - 12);
        if (v57 >= 9 && 6 * (int)v58 < v57)
        {
          unsigned int v60 = (v58 - 1) | ((v58 - 1) >> 1) | (((v58 - 1) | ((v58 - 1) >> 1)) >> 2);
          unsigned int v61 = v60 | (v60 >> 4) | ((v60 | (v60 >> 4)) >> 8);
          unint64_t v62 = (v61 | HIWORD(v61)) + 1;
          if (v62 > 0x400)
          {
            if (v62 <= 2 * v58)
            {
LABEL_73:
              LODWORD(v62) = 2 * v62;
              if (v62 <= 0x400) {
                goto LABEL_74;
              }
            }
            double v63 = (double)v58;
            double v64 = (double)v62;
            double v65 = 0.416666667;
          }
          else
          {
            if (3 * v62 <= 4 * v58) {
              goto LABEL_73;
            }
LABEL_74:
            double v63 = (double)v58;
            double v64 = (double)v62;
            double v65 = 0.604166667;
          }
          if (v64 * v65 <= v63) {
            LODWORD(v62) = 2 * v62;
          }
          if (v62 <= 8) {
            unsigned int v66 = 8;
          }
          else {
            unsigned int v66 = v62;
          }
          WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::rehash(v42, v66);
        }
      }
    }
  }
}

uint64_t *WebKit::BrowsingContextGroup::removePage(WebKit::BrowsingContextGroup *this, WebKit::WebPageProxy *a2)
{
  WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 24, (uint64_t)a2);
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::take((uint64_t)this + 56, a2, &v6);
  uint64_t result = v6;
  if (v6) {
    return (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v6, v4);
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 28);
  unsigned int v5 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v5;
  if (v5 > v4) {
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6 || !*(void *)(v6 + 8)) {
    return 0;
  }
  unsigned int v11 = *(WTF **)(a2 + 24);
  unsigned int v7 = (WTF **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, (uint64_t *)&v11);
  uint64_t v8 = *(void *)a1;
  if (*(void *)a1) {
    v8 += 8 * *(unsigned int *)(v8 - 4);
  }
  if ((WTF **)v8 == v7) {
    return 0;
  }
  uint64_t v10 = *v7;
  if (!*v7) {
    return 0;
  }
  unsigned int v11 = *v7;
  WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)a1, (void **)&v11);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(a1, v10);
  return 1;
}

uint64_t WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::take@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unsigned int v4 = (uint64_t *)result;
  unsigned int v6 = *(_DWORD *)(result + 8);
  unsigned int v7 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 8) = v6 + 1;
  if (v6 > v7) {
    uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(result, a2);
  }
  uint64_t v8 = a2[3];
  if (!v8 || !*(void *)(v8 + 8)) {
    goto LABEL_11;
  }
  uint64_t v12 = a2[3];
  uint64_t result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v12);
  uint64_t v9 = *v4;
  if (*v4) {
    v9 += 16 * *(unsigned int *)(v9 - 4);
  }
  if (v9 == result)
  {
LABEL_11:
    *a3 = 0;
    return result;
  }
  uint64_t v10 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *a3 = v10;
  if (*v4)
  {
    uint64_t v11 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
    if (v11 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = 0;
  }
  if (v11 != result) {
    return (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, (void *)result);
  }
  return result;
}

uint64_t WebKit::BrowsingContextGroup::remotePageInProcess(WebKit::BrowsingContextGroup *this, const WebKit::WebPageProxy *a2, const WebKit::WebProcessProxy *a3)
{
  unsigned int v5 = (char *)this + 56;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)this + 56, (uint64_t)a2, (uint64_t)v22);
  uint64_t v6 = *((void *)this + 7);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    uint64_t v8 = v6 + 16 * v7;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  int v16 = v5;
  uint64_t v17 = v8;
  uint64_t v18 = v8;
  uint64_t v19 = v8;
  uint64_t v20 = v6 + 16 * v7;
  int v21 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v16);
  uint64_t v9 = v23;
  if (v23 == v17) {
    return 0;
  }
  uint64_t v10 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin((void **)(v23 + 8));
  uint64_t v12 = *(void *)(v9 + 8);
  uint64_t v13 = v12 ? v12 + 8 * *(unsigned int *)(v12 - 4) : 0;
  if ((void *)v13 == v10) {
    return 0;
  }
  while (1)
  {
    uint64_t v14 = *v10;
    if (*(void *)(*(void *)(*v10 + 24) + 176) == *((void *)a3 + 22)) {
      return v14;
    }
    while (++v10 != v11)
    {
      if ((unint64_t)(*v10 + 1) > 1) {
        goto LABEL_14;
      }
    }
    uint64_t v10 = v11;
LABEL_14:
    if (v10 == (void *)v13) {
      return 0;
    }
  }
}

void *WebKit::BrowsingContextGroup::takeRemotePageInProcessForProvisionalPage@<X0>(WebKit::BrowsingContextGroup *this@<X0>, const WebKit::WebPageProxy *a2@<X1>, const WebKit::WebProcessProxy *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (char *)this + 56;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)this + 56, (uint64_t)a2, (uint64_t)v24);
  uint64_t v9 = *((void *)this + 7);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v9 - 4);
    uint64_t v11 = v9 + 16 * v10;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v18 = v8;
  uint64_t v19 = v11;
  uint64_t v20 = v11;
  uint64_t v21 = v11;
  uint64_t v22 = v9 + 16 * v10;
  int v23 = 0;
  uint64_t result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v18);
  if (v25 == v19) {
    goto LABEL_12;
  }
  uint64_t result = (void *)WebKit::BrowsingContextGroup::remotePageInProcess(this, a2, a3);
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v13 = v25;
  uint64_t v14 = (uint64_t *)(v25 + 8);
  uint64_t v18 = result;
  uint64_t result = (void *)WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>>,WKDeferringGestureRecognizer const*>((uint64_t *)(v25 + 8), &v18);
  char v15 = *(void **)(v13 + 8);
  if (v15) {
    v15 += *((unsigned int *)v15 - 1);
  }
  if (v15 == result)
  {
LABEL_12:
    *a4 = 0;
    return result;
  }
  int v16 = (void *)*result;
  void *result = 0;
  *a4 = v16;
  if (*v14)
  {
    uint64_t v17 = *v14 + 8 * *(unsigned int *)(*v14 - 4);
    if ((void *)v17 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v17 = 0;
  }
  if ((void *)v17 != result) {
    return WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::remove(v14, (void **)result);
  }
  return result;
}

WebKit::RemotePageProxy *WebKit::BrowsingContextGroup::transitionPageToRemotePage(WebKit::BrowsingContextGroup *this, atomic_uint **a2, const WebKit::Site *a3)
{
  unsigned int v5 = (uint64_t *)((char *)this + 56);
  unsigned int v6 = *((_DWORD *)this + 16);
  unsigned int v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 16) = v6 + 1;
  if (v6 > v7) {
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 56, a2);
  }
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>((atomic_uint **)&v41, (uint64_t)a2);
  uint64_t v9 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v5, 0), (uint64_t v9 = *v5) != 0))
  {
    char v10 = 0;
    int v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v11 = 0;
    char v10 = 1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = (unsigned int *)v41;
  unint64_t v14 = ((unint64_t)v41 + ~((void)v41 << 32)) ^ (((unint64_t)v41 + ~((void)v41 << 32)) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = (v16 >> 31) ^ v16;
  for (int i = 1; ; ++i)
  {
    unsigned int v19 = v17 & v11;
    uint64_t v20 = v9 + 16 * v19;
    uint64_t v21 = *(unsigned int **)v20;
    if (*(void *)v20 != -1) {
      break;
    }
    uint64_t v12 = (void *)(v9 + 16 * v19);
LABEL_12:
    unsigned int v17 = i + v19;
  }
  if (!v21)
  {
    if (v12)
    {
      void *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      uint64_t v20 = (uint64_t)v12;
    }
    double v41 = 0;
    uint64_t v22 = *(unsigned int **)v20;
    *(void *)uint64_t v20 = v13;
    if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v8);
    }
    int v23 = *(uint64_t **)(v20 + 8);
    *(void *)(v20 + 8) = 0;
    if (v23) {
      WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v23, v8);
    }
    uint64_t v24 = *v5;
    if (*v5) {
      int v25 = *(_DWORD *)(v24 - 12) + 1;
    }
    else {
      int v25 = 1;
    }
    *(_DWORD *)(v24 - 12) = v25;
    uint64_t v28 = *v5;
    if (*v5) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30)
      {
LABEL_30:
        uint64_t v20 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v5, (unsigned int **)v20);
        uint64_t v28 = *v5;
        if (*v5) {
          unint64_t v31 = *(unsigned int *)(v28 - 4);
        }
        else {
          unint64_t v31 = 0;
        }
      }
    }
    else if (3 * v31 <= 4 * v30)
    {
      goto LABEL_30;
    }
    uint64_t v27 = v28 + 16 * v31;
    uint64_t v13 = (unsigned int *)v41;
    goto LABEL_35;
  }
  if (v21 != (unsigned int *)v41) {
    goto LABEL_12;
  }
  if (v10) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = *(unsigned int *)(v9 - 4);
  }
  uint64_t v27 = v9 + 16 * v26;
LABEL_35:
  double v41 = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v8);
  }
  double v41 = (WTF *)v5;
  uint64_t v42 = v20;
  uint64_t v43 = v27;
  uint64_t v32 = *v5;
  if (*v5)
  {
    uint64_t v33 = *(unsigned int *)(v32 - 4);
    uint64_t v34 = v32 + 16 * v33;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v44 = v34;
  uint64_t v45 = v32 + 16 * v33;
  int v46 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v41);
  uint64_t v35 = (uint64_t *)(v42 + 8);
  unint64_t v36 = a2[32];
  uint64_t v37 = (WebKit::WebPageProxyMessageReceiverRegistration *)(a2[4] + 490);
  uint64_t v38 = (WebKit::RemotePageProxy *)WTF::fastMalloc((WTF *)0x60);
  unint64_t v40 = WebKit::RemotePageProxy::RemotePageProxy(v38, (WebKit::WebPageProxy *)a2, v36, a3, v37);
  WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add((uint64_t *)&v41, v35, (uint64_t *)&v40);
  uint64_t result = v40;
  if (v40) {
    return (WebKit::RemotePageProxy *)(*(uint64_t (**)(WebKit::RemotePageProxy *))(*(void *)v40 + 8))(v40);
  }
  return result;
}

WebKit::RemotePageProxy *WebKit::BrowsingContextGroup::transitionProvisionalPageToRemotePage(WebKit::BrowsingContextGroup *this, WebKit::ProvisionalPageProxy *a2, const WebKit::Site *a3)
{
  unsigned int v5 = (uint64_t *)((char *)this + 56);
  uint64_t v6 = *(void *)(*((void *)a2 + 3) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = *((_DWORD *)this + 16);
  unsigned int v9 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 16) = v8 + 1;
  if (v8 > v9) {
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 56, a2);
  }
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>((atomic_uint **)&v44, v7);
  uint64_t v11 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v5, 0), (uint64_t v11 = *v5) != 0))
  {
    char v12 = 0;
    int v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    int v13 = 0;
    char v12 = 1;
  }
  unint64_t v14 = 0;
  unint64_t v15 = (unsigned int *)v44;
  unint64_t v16 = ((unint64_t)v44 + ~((void)v44 << 32)) ^ (((unint64_t)v44 + ~((void)v44 << 32)) >> 22);
  unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  unsigned int v19 = (v18 >> 31) ^ v18;
  for (int i = 1; ; ++i)
  {
    unsigned int v21 = v19 & v13;
    uint64_t v22 = v11 + 16 * v21;
    int v23 = *(unsigned int **)v22;
    if (*(void *)v22 != -1) {
      break;
    }
    unint64_t v14 = (void *)(v11 + 16 * v21);
LABEL_15:
    unsigned int v19 = i + v21;
  }
  if (!v23)
  {
    if (v14)
    {
      *unint64_t v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      uint64_t v22 = (uint64_t)v14;
    }
    uint64_t v44 = 0;
    uint64_t v24 = *(unsigned int **)v22;
    *(void *)uint64_t v22 = v15;
    if (v24 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v10);
    }
    int v25 = *(uint64_t **)(v22 + 8);
    *(void *)(v22 + 8) = 0;
    if (v25) {
      WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v25, v10);
    }
    uint64_t v26 = *v5;
    if (*v5) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v30 = *v5;
    if (*v5) {
      int v31 = *(_DWORD *)(v30 - 12);
    }
    else {
      int v31 = 0;
    }
    uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
    unint64_t v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 <= 2 * v32)
      {
LABEL_33:
        uint64_t v22 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v5, (unsigned int **)v22);
        uint64_t v30 = *v5;
        if (*v5) {
          unint64_t v33 = *(unsigned int *)(v30 - 4);
        }
        else {
          unint64_t v33 = 0;
        }
      }
    }
    else if (3 * v33 <= 4 * v32)
    {
      goto LABEL_33;
    }
    uint64_t v29 = v30 + 16 * v33;
    unint64_t v15 = (unsigned int *)v44;
    goto LABEL_38;
  }
  if (v23 != (unsigned int *)v44) {
    goto LABEL_15;
  }
  if (v12) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(unsigned int *)(v11 - 4);
  }
  uint64_t v29 = v11 + 16 * v28;
LABEL_38:
  uint64_t v44 = 0;
  if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v10);
  }
  uint64_t v44 = (WTF *)v5;
  uint64_t v45 = v22;
  uint64_t v46 = v29;
  uint64_t v34 = *v5;
  if (*v5)
  {
    uint64_t v35 = *(unsigned int *)(v34 - 4);
    uint64_t v36 = v34 + 16 * v35;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v47 = v36;
  uint64_t v48 = v34 + 16 * v35;
  int v49 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v44);
  uint64_t v37 = (uint64_t *)(v45 + 8);
  uint64_t v38 = *(void *)(*((void *)a2 + 3) + 8);
  if (v38) {
    uint64_t v39 = (WebKit::WebPageProxy *)(v38 - 16);
  }
  else {
    uint64_t v39 = 0;
  }
  unint64_t v40 = *(atomic_uint **)(*((void *)a2 + 5) + 16);
  double v41 = (WebKit::RemotePageProxy *)WTF::fastMalloc((WTF *)0x60);
  uint64_t v43 = WebKit::RemotePageProxy::RemotePageProxy(v41, v39, v40, a3, (WebKit::ProvisionalPageProxy *)((char *)a2 + 352));
  WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add((uint64_t *)&v44, v37, (uint64_t *)&v43);
  uint64_t result = v43;
  if (v43) {
    return (WebKit::RemotePageProxy *)(*(uint64_t (**)(WebKit::RemotePageProxy *))(*(void *)v43 + 8))(v43);
  }
  return result;
}

BOOL WebKit::BrowsingContextGroup::hasRemotePages(WebKit::BrowsingContextGroup *this, const WebKit::WebPageProxy *a2)
{
  uint64_t v3 = (char *)this + 56;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)this + 56, (uint64_t)a2, (uint64_t)v15);
  uint64_t v4 = *((void *)this + 7);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    uint64_t v6 = v4 + 16 * v5;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  unsigned int v9 = v3;
  uint64_t v10 = v6;
  uint64_t v11 = v6;
  uint64_t v12 = v6;
  uint64_t v13 = v4 + 16 * v5;
  int v14 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v9);
  if (v16 == v10) {
    return 0;
  }
  uint64_t v7 = *(void *)(v16 + 8);
  return v7 && *(_DWORD *)(v7 - 12) != 0;
}

uint64_t WebKit::DeviceIdHashSaltStorage::completePendingHandler(WTF::RunLoop *a1, uint64_t *a2)
{
  uint64_t v17 = 0;
  uint64_t v3 = *((void *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = (void *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      uint64_t v6 = (void *)*((void *)a1 + 2);
      if (v4)
      {
        uint64_t v7 = 16 * v4;
        uint64_t v6 = (void *)*((void *)a1 + 2);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            uint64_t v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v6 = (void *)(v3 + 16 * v4);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = (void *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_8:
    unsigned int v8 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_13;
  }
  unsigned int v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v17, v6[1], (uint64_t)v16);
    a1 = (WTF::RunLoop *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v17, v6[1] + 32, (uint64_t)v16);
    unsigned int v9 = v6 + 2;
    uint64_t v6 = v5;
    if (v9 != v5)
    {
      uint64_t v6 = v9;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          uint64_t v6 = v5;
          break;
        }
      }
    }
  }
  WTF::RunLoop::main(a1);
  uint64_t v10 = v17;
  uint64_t v17 = 0;
  uint64_t v11 = *a2;
  *a2 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v12 = &unk_1EE9D58E0;
  v12[1] = v10;
  void v12[2] = v11;
  v16[0] = v12;
  WTF::RunLoop::dispatch();
  uint64_t v14 = v16[0];
  v16[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v17;
  if (v17) {
    return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v17, v13);
  }
  return result;
}

WebKit::DeviceIdHashSaltStorage *WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(WebKit::DeviceIdHashSaltStorage *this, const WTF::String *a2)
{
  *(_DWORD *)this = 1;
  WTF::WorkQueue::create();
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 0;
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *((void *)this + 5) = 0;
  uint64_t v4 = (char *)this + 48;
  if (!*(void *)a2 || !*(_DWORD *)(*(void *)a2 + 4))
  {
    *(void *)uint64_t v4 = 0;
LABEL_12:
    *((unsigned char *)this + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
    return this;
  }
  WTF::String::number((WTF::String *)1);
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (!*(void *)v4 || !*(_DWORD *)(*(void *)v4 + 4)) {
    goto LABEL_12;
  }
  atomic_fetch_add((atomic_uint *volatile)this, 1u);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v7 = &unk_1EE9D5908;
  v7[1] = this;
  _DWORD v7[2] = this;
  uint64_t v8 = *((void *)this + 1);
  atomic_fetch_add((atomic_uint *volatile)this, 1u);
  unsigned int v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(void *)unsigned int v9 = &unk_1EE9D5930;
  *((void *)v9 + 1) = this;
  *((void *)v9 + 2) = this;
  *((void *)v9 + 3) = v7;
  uint64_t v12 = v9;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v8 + 32))(v8, &v12);
  uint64_t v10 = v12;
  uint64_t v12 = 0;
  if (v10) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

void WebKit::DeviceIdHashSaltStorage::~DeviceIdHashSaltStorage(WebKit::DeviceIdHashSaltStorage *this, void *a2)
{
  *((unsigned char *)this + 25) = 1;
  uint64_t v3 = (char *)this + 32;
  uint64_t v4 = (void *)*((void *)this + 4);
  uint64_t v14 = v4;
  int v6 = *((_DWORD *)this + 10);
  uint64_t v5 = *((unsigned int *)this + 11);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *((void *)this + 5) = 0;
  int v15 = v6;
  int v16 = v5;
  if (v5)
  {
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v4;
      *v4++ = 0;
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      v7 -= 8;
    }
    while (v7);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, a2);
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v9);
  uint64_t v12 = (WTF::StringImpl **)*((void *)this + 2);
  if (v12) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v11);
  }
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 56))(v13);
  }
}

WTF::StringImpl *WebKit::getSecurityOriginData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  if (a3)
  {
    if (a3 == 1)
    {
      int v6 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v6 = (WTF::StringImpl *)v14[0];
    }
    uint64_t v12 = v6;
  }
  else
  {
    uint64_t v12 = 0;
  }
  char v8 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)a4 + 80))(a4, &v12, &v13);
  unsigned int v9 = v12;
  uint64_t v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      if (v8) {
        goto LABEL_9;
      }
LABEL_14:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 32) = 0;
      goto LABEL_15;
    }
    *(_DWORD *)v9 -= 2;
  }
  if ((v8 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  WebCore::SecurityOriginData::fromDatabaseIdentifier();
  int v10 = v16;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (v10)
  {
    *(_DWORD *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v14);
    *(unsigned char *)(a1 + 32) = 1;
    if (v16)
    {
      if (v15 != -1) {
        ((void (*)(WTF::StringImpl **, void *))off_1EE9D5708[v15])(&v12, v14);
      }
    }
  }
LABEL_15:
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::DeviceIdHashSaltStorage::completeDeviceIdHashSaltForOriginCall(uint64_t *a1, WebCore::SecurityOriginData *this, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  WebCore::SecurityOriginData::toString((uint64_t *)&v57, this);
  WebCore::SecurityOriginData::toString((uint64_t *)&v56, a3);
  unsigned int v60 = v57;
  uint64_t v71 = v56;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v60, (uint64_t *)&v71, &v58);
  if (!v58)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v11 = v56;
  int v56 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v57;
  unsigned int v57 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = a1 + 2;
  uint64_t v14 = a1[2];
  if (v14
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1 + 2, 0), (uint64_t v14 = *v13) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v16 = *((_DWORD *)v58 + 4);
  uint64_t v55 = a4;
  if (v16 >= 0x100) {
    unsigned int v17 = v16 >> 8;
  }
  else {
    unsigned int v17 = WTF::StringImpl::hashSlowCase(v58);
  }
  unint64_t v18 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v20 = v17 & v15;
    unsigned int v21 = (uint64_t *)(v14 + 16 * (v17 & v15));
    uint64_t v22 = (WTF *)*v21;
    if (*v21 == -1)
    {
      unint64_t v18 = (uint64_t *)(v14 + 16 * v20);
      goto LABEL_22;
    }
    if (!v22) {
      break;
    }
    uint64_t v23 = WTF::equal(v22, v58, v10);
    if (v23) {
      goto LABEL_50;
    }
LABEL_22:
    unsigned int v17 = i + v20;
  }
  if (v18)
  {
    *unint64_t v18 = 0;
    v18[1] = 0;
    --*(_DWORD *)(*v13 - 16);
    unsigned int v21 = v18;
  }
  WTF::String::operator=(v21, &v58);
  WTF::cryptographicallyRandomValues();
  uint64_t v71 = 0;
  int v72 = 0;
  int v73 = 0;
  char v74 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v71);
  for (uint64_t j = 0; j != 24; j += 8)
  {
    WTF::Internal::appendHex();
    int v69 = v25;
    uint64_t v59 = (WTF::StringImpl *)v68;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v71, (uint64_t)&v59);
  }
  uint64_t v26 = v71;
  if (v71
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v71),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v71),
        (uint64_t v26 = v71) != 0))
  {
    *(_DWORD *)v26 += 2;
  }
  uint64_t v27 = WTF::fastMalloc((WTF *)0x50);
  WTF::WallTime::now((WTF::WallTime *)v27);
  uint64_t v29 = v28;
  *(unsigned char *)uint64_t v27 = 0;
  *(_DWORD *)(v27 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v27, (uint64_t)this);
  *(unsigned char *)(v27 + 32) = 0;
  *(_DWORD *)(v27 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v27 + 32, (uint64_t)a3);
  *(void *)(v27 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v26;
  *(void *)(v27 + 72) = v29;
  int v31 = v72;
  int v72 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v30);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t v32 = v71;
  uint64_t v71 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v30);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  uint64_t v23 = v21[1];
  v21[1] = v27;
  if (v23) {
    uint64_t v23 = std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((WTF *)v23, v30);
  }
  uint64_t v33 = *v13;
  if (*v13) {
    int v34 = *(_DWORD *)(v33 - 12) + 1;
  }
  else {
    int v34 = 1;
  }
  *(_DWORD *)(v33 - 12) = v34;
  uint64_t v35 = *v13;
  if (*v13) {
    int v36 = *(_DWORD *)(v35 - 12);
  }
  else {
    int v36 = 0;
  }
  uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
  unint64_t v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 <= 2 * v37)
    {
LABEL_49:
      uint64_t v23 = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1 + 2, (WTF::StringImpl **)v21);
      unsigned int v21 = (uint64_t *)v23;
    }
  }
  else if (3 * v38 <= 4 * v37)
  {
    goto LABEL_49;
  }
LABEL_50:
  WTF::WallTime::now((WTF::WallTime *)v23);
  *(void *)(v21[1] + 72) = v39;
  uint64_t v40 = v21[1];
  uint64_t v41 = a1[6];
  if (v41 && *(_DWORD *)(v41 + 4))
  {
    uint64_t v42 = a1[1];
    unsigned int v60 = (WTF::StringImpl *)a1;
    unsigned int v61 = (unsigned int *)a1;
    atomic_fetch_add((atomic_uint *volatile)a1, 1u);
    WebCore::SecurityOriginData::isolatedCopy();
    WebCore::SecurityOriginData::isolatedCopy();
    WTF::String::isolatedCopy();
    uint64_t v43 = *(void *)(v40 + 72);
    v62[0] = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v62, (uint64_t)&v71);
    v64[0] = 0;
    int v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v64, (uint64_t)v68);
    unsigned int v66 = v59;
    uint64_t v67 = v43;
    if (v70 != -1) {
      ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9D5708[v70])(&v59, v68);
    }
    if (v75 != -1) {
      ((void (*)(unsigned char *, WTF::StringImpl **))off_1EE9D5708[v75])(v68, &v71);
    }
    uint64_t v44 = WTF::fastMalloc((WTF *)0x68);
    *(void *)uint64_t v44 = &unk_1EE9D5980;
    *(void *)(v44 + 8) = v60;
    uint64_t v45 = v61;
    unsigned int v61 = 0;
    *(void *)(v44 + 16) = v45;
    *(unsigned char *)(v44 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    *(_DWORD *)(v44 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v44 + 24, (uint64_t)v62);
    *(unsigned char *)(v44 + 56) = 0;
    *(_DWORD *)(v44 + 80) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v44 + 56, (uint64_t)v64);
    uint64_t v46 = v66;
    unsigned int v66 = 0;
    *(void *)(v44 + 88) = v46;
    *(void *)(v44 + 96) = v67;
    uint64_t v71 = (WTF::StringImpl *)v44;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v42 + 32))(v42, &v71);
    uint64_t v48 = (uint64_t)v71;
    uint64_t v71 = 0;
    if (v48) {
      (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
    }
    int v49 = v66;
    unsigned int v66 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2) {
        WTF::StringImpl::destroy(v49, v47);
      }
      else {
        *(_DWORD *)v49 -= 2;
      }
    }
    if (v65 != -1) {
      ((void (*)(unsigned char *, unsigned char *))off_1EE9D5708[v65])(v68, v64);
    }
    int v65 = -1;
    if (v63 != -1) {
      ((void (*)(unsigned char *, unsigned char *))off_1EE9D5708[v63])(v68, v62);
    }
    int v63 = -1;
    uint64_t v50 = v61;
    unsigned int v61 = 0;
    if (v50) {
      WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v50);
    }
    uint64_t v40 = v21[1];
  }
  uint64_t v51 = *(WTF::StringImpl **)(v40 + 64);
  if (v51) {
    *(_DWORD *)v51 += 2;
  }
  unsigned int v60 = v51;
  uint64_t v52 = *v55;
  *uint64_t v55 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v52 + 16))(v52, &v60);
  (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  uint64_t v54 = v60;
  unsigned int v60 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2) {
      WTF::StringImpl::destroy(v54, v53);
    }
    else {
      *(_DWORD *)v54 -= 2;
    }
  }
  uint64_t result = v58;
  uint64_t v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v53);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3 + 8;
  if (*(unsigned char *)(a1 + 24))
  {
    LOBYTE(v18) = 0;
    int v20 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v18, a2 + 8);
    v16[0] = 0;
    int v17 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v16, v6);
    uint64_t result = WebKit::DeviceIdHashSaltStorage::completeDeviceIdHashSaltForOriginCall((uint64_t *)a1, (WebCore::SecurityOriginData *)&v18, (WebCore::SecurityOriginData *)v16, a4);
    if (v17 != -1) {
      uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))off_1EE9D5708[v17])(&v15, v16);
    }
    if (v20 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9D5708[v20])(v16, &v18);
    }
  }
  else
  {
    char v8 = (uint64_t *)(a1 + 32);
    uint64_t v18 = a1;
    WebCore::SecurityOriginData::isolatedCopy();
    WebCore::SecurityOriginData::isolatedCopy();
    uint64_t v9 = *a4;
    *a4 = 0;
    uint64_t v24 = (WTF::StringImpl *)v9;
    unint64_t v10 = *(unsigned int *)(a1 + 44);
    if (v10 == *(_DWORD *)(a1 + 40))
    {
      unint64_t v11 = v10 + (v10 >> 2);
      if (v11 >= 0x10) {
        unint64_t v12 = v11 + 1;
      }
      else {
        unint64_t v12 = 16;
      }
      if (v12 <= v10 + 1) {
        unint64_t v13 = v10 + 1;
      }
      else {
        unint64_t v13 = v12;
      }
      WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 32, v13);
      unint64_t v10 = *(unsigned int *)(a1 + 44);
      uint64_t v14 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v14 = *v8;
    }
    WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>((uint64_t *)(v14 + 8 * v10), &v18);
    ++*(_DWORD *)(a1 + 44);
    uint64_t result = v24;
    uint64_t v24 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v23 != -1) {
      uint64_t result = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9D5708[v23])(v16, &v22);
    }
    int v23 = -1;
    if (v21 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9D5708[v21])(v16, &v19);
    }
  }
  return result;
}

void *WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    return (void *)WebKit::DeviceIdHashSaltStorage::completePendingHandler((WTF::RunLoop *)a1, a2);
  }
  else
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    unint64_t v5 = *(unsigned int *)(a1 + 44);
    if (v5 == *(_DWORD *)(a1 + 40))
    {
      uint64_t v6 = a1 + 32;
      unint64_t v7 = v5 + (v5 >> 2);
      if (v7 >= 0x10) {
        unint64_t v8 = v7 + 1;
      }
      else {
        unint64_t v8 = 16;
      }
      if (v8 <= v5 + 1) {
        unint64_t v9 = v5 + 1;
      }
      else {
        unint64_t v9 = v8;
      }
      WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v6, v9);
      unint64_t v5 = *(unsigned int *)(a1 + 44);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t result = (void *)WTF::fastMalloc((WTF *)0x18);
    void *result = &unk_1EE9D59D0;
    result[1] = a1;
    result[2] = v4;
    *(void *)(v10 + 8 * v5) = result;
    ++*(_DWORD *)(a1 + 44);
  }
  return result;
}

uint64_t WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  WTF::String::isolatedCopy();
  unsigned __int8 v2 = (void *)WTF::fastMalloc((WTF *)0x20);
  *unsigned __int8 v2 = &unk_1EE9D59F8;
  v2[1] = a1;
  v2[2] = a1;
  v2[3] = v7;
  unint64_t v8 = v2;
  (*(void (**)(uint64_t, void **))(*(void *)v1 + 32))(v1, &v8);
  uint64_t v3 = v8;
  unint64_t v8 = 0;
  if (v3) {
    (*(void (**)(void *))(*v3 + 8))(v3);
  }
  return 0;
}

uint64_t WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    int v34 = (uint64_t *)(a1 + 16);
    if (v6)
    {
      unsigned int v7 = *(_DWORD *)(v6 - 4);
      if (v7)
      {
        int v36 = 0;
        uint64_t v35 = a1;
        do
        {
          if ((unint64_t)(*(void *)(v6 + 16 * --v7) + 1) >= 2)
          {
            if (a2[3])
            {
              uint64_t v8 = 0;
              unint64_t v9 = 0;
              do
              {
                if (WebCore::operator==())
                {
                  int v13 = 1;
                  goto LABEL_19;
                }
                ++v9;
                unint64_t v10 = a2[3];
                v8 += 32;
              }
              while (v9 < v10);
              if (!v10) {
                goto LABEL_17;
              }
              uint64_t v11 = 0;
              unint64_t v12 = 0;
              do
              {
                int v13 = WebCore::operator==();
                if (v13) {
                  break;
                }
                ++v12;
                v11 += 32;
              }
              while (v12 < a2[3]);
            }
            else
            {
LABEL_17:
              int v13 = 0;
            }
LABEL_19:
            a1 = v35;
            uint64_t v14 = *(void *)(v35 + 48);
            if (v14)
            {
              BOOL v15 = *(_DWORD *)(v14 + 4) == 0;
              char v16 = v13 ^ 1;
              if (v15) {
                char v16 = 1;
              }
              if ((v16 & 1) == 0) {
                a1 = WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(v35);
              }
            }
            if (v13)
            {
              a1 = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>::customDeleteBucket((WTF::StringImpl **)(v6 + 16 * v7), (WTF::StringImpl *)a2);
              ++v36;
            }
          }
        }
        while (v7);
        uint64_t v24 = *v34;
        if (v36)
        {
          *(_DWORD *)(v24 - 16) += v36;
          uint64_t v25 = *v34;
          if (*v34) {
            int v26 = *(_DWORD *)(v25 - 12);
          }
          else {
            int v26 = 0;
          }
          uint64_t v3 = a3;
          *(_DWORD *)(v25 - 12) = v26 - v36;
          uint64_t v24 = *v34;
          if (!*v34) {
            goto LABEL_51;
          }
          goto LABEL_46;
        }
        uint64_t v3 = a3;
        if (v24)
        {
LABEL_46:
          unsigned int v30 = *(_DWORD *)(v24 - 4);
          unsigned int v31 = 6 * *(_DWORD *)(v24 - 12);
          if (v30 >= 9 && v31 < v30) {
            a1 = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(v34);
          }
        }
      }
    }
LABEL_51:
    WTF::RunLoop::main((WTF::RunLoop *)a1);
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v37, v3);
    WTF::RunLoop::dispatch();
    uint64_t result = v37;
    uint64_t v37 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return result;
  }
  int v17 = (uint64_t *)(a1 + 32);
  uint64_t v37 = a1;
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v38, (uint64_t)a2);
  uint64_t v18 = *v3;
  uint64_t *v3 = 0;
  uint64_t v39 = v18;
  unint64_t v19 = *(unsigned int *)(v5 + 44);
  if (v19 == *(_DWORD *)(v5 + 40))
  {
    unint64_t v20 = v19 + (v19 >> 2);
    if (v20 >= 0x10) {
      unint64_t v21 = v20 + 1;
    }
    else {
      unint64_t v21 = 16;
    }
    if (v21 <= v19 + 1) {
      unint64_t v22 = v19 + 1;
    }
    else {
      unint64_t v22 = v21;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 32, v22);
    unint64_t v19 = *(unsigned int *)(v5 + 44);
    uint64_t v23 = *(void *)(v5 + 32);
  }
  else
  {
    uint64_t v23 = *v17;
  }
  WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)>&&)::$_1,void>((void *)(v23 + 8 * v19), &v37);
  ++*(_DWORD *)(v5 + 44);
  uint64_t v28 = v39;
  uint64_t v39 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v27);
}

uint64_t WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = (uint64_t *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (v8)
      {
        int v9 = 0;
        unsigned int v10 = v8 - 1;
        do
        {
          uint64_t v11 = v10;
          if ((unint64_t)(*(void *)(v7 + 16 * v10) + 1) >= 2)
          {
            unint64_t v12 = *(double **)(v7 + 16 * v10 + 8);
            double v13 = v12[9];
            uint64_t v14 = *(void *)(v5 + 48);
            if (v14)
            {
              if (*(_DWORD *)(v14 + 4) && v13 > a3) {
                a1 = WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(v5);
              }
            }
            if (v13 > a3)
            {
              a1 = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>::customDeleteBucket((WTF::StringImpl **)(v7 + 16 * v10), (WTF::StringImpl *)v12);
              ++v9;
            }
          }
          --v10;
        }
        while (v11);
        uint64_t v16 = *v6;
        if (v9)
        {
          *(_DWORD *)(v16 - 16) += v9;
          uint64_t v17 = *v6;
          if (*v6) {
            int v18 = *(_DWORD *)(v17 - 12);
          }
          else {
            int v18 = 0;
          }
          *(_DWORD *)(v17 - 12) = v18 - v9;
          uint64_t v16 = *v6;
        }
        if (v16)
        {
          unsigned int v27 = *(_DWORD *)(v16 - 4);
          unsigned int v28 = 6 * *(_DWORD *)(v16 - 12);
          if (v27 >= 9 && v28 < v27) {
            a1 = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize((uint64_t *)(v5 + 16));
          }
        }
      }
    }
    WTF::RunLoop::main((WTF::RunLoop *)a1);
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v30, a2);
    WTF::RunLoop::dispatch();
    uint64_t result = v30;
    uint64_t v30 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v19 = *a2;
    *a2 = 0;
    unint64_t v20 = *(unsigned int *)(a1 + 44);
    if (v20 == *(_DWORD *)(a1 + 40))
    {
      uint64_t v21 = a1 + 32;
      unint64_t v22 = v20 + (v20 >> 2);
      if (v22 >= 0x10) {
        unint64_t v23 = v22 + 1;
      }
      else {
        unint64_t v23 = 16;
      }
      if (v23 <= v20 + 1) {
        unint64_t v24 = v20 + 1;
      }
      else {
        unint64_t v24 = v23;
      }
      WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v21, v24);
      unint64_t v20 = *(unsigned int *)(v5 + 44);
    }
    uint64_t v25 = *(void *)(v5 + 32);
    uint64_t result = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t result = &unk_1EE9D5A48;
    *(void *)(result + 8) = v5;
    *(double *)(result + 16) = a3;
    *(void *)(result + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v19;
    *(void *)(v25 + 8 * v20) = result;
    ++*(_DWORD *)(v5 + 44);
  }
  return result;
}

void WebKit::DrawingAreaProxy::~DrawingAreaProxy(WebKit::DrawingAreaProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9D5568;
  *((void *)this + 2) = &unk_1EE9D56C8;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

unsigned __int8 *WebKit::DrawingAreaProxy::stopReceivingMessages(WebKit::DrawingAreaProxy *this, WebKit::WebProcessProxy *a2)
{
  uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(WebKit::DrawingAreaProxy *))(*(void *)this + 40))(this);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    int v8 = (char *)a2 + 152;
    do
    {
      unsigned int v9 = *v6++;
      uint64_t result = IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v8, v9, *((void *)this + 3));
      --v7;
    }
    while (v7);
  }
  return result;
}

void *WebKit::DrawingAreaProxy::messageReceiverNames(WebKit::DrawingAreaProxy *this)
{
  if ((byte_1EB359BE9 & 1) == 0) {
    _MergedGlobals_90 = 263;
  }
  return &_MergedGlobals_90;
}

uint64_t WebKit::DrawingAreaProxy::messageSenderConnection(WebKit::DrawingAreaProxy *this)
{
  uint64_t result = *(void *)(*((void *)this + 6) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::DrawingAreaProxy::messageSenderConnection(WebKit::DrawingAreaProxy *this)
{
  uint64_t result = *(void *)(*((void *)this + 4) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::DrawingAreaProxy::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  *a3 = 0;
  v9[0] = v5;
  v9[1] = v6;
  char v10 = 1;
  uint64_t v7 = WebKit::AuxiliaryProcessProxy::sendMessage(v4, a2, a4, (uint64_t)v9, 1);
  if (v10 && v9[0]) {
    (*(void (**)(void))(*(void *)v9[0] + 8))(v9[0]);
  }
  return v7;
}

uint64_t non-virtual thunk to'WebKit::DrawingAreaProxy::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  return WebKit::DrawingAreaProxy::sendMessageWithAsyncReply(a1 - 16, a2, a3, a4);
}

uint64_t WebKit::DrawingAreaProxy::messageSenderDestinationID(WebKit::DrawingAreaProxy *this)
{
  return *((void *)this + 3);
}

uint64_t WebKit::DrawingAreaProxy::delegatedScrollingMode(WebKit::DrawingAreaProxy *this)
{
  return 0;
}

void WebKit::DrawingAreaProxy::createFence(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::FindStringCallbackAggregator::foundString(uint64_t result, uint64_t a2, int a3, char a4)
{
  char v5 = a4;
  if (*(unsigned char *)(a2 + 16))
  {
    *(_DWORD *)(result + 32) += a3;
    return WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,BOOL &>((uint64_t *)(result + 48), (void *)a2, &v5, (uint64_t)&v4);
  }
  return result;
}

void WebKit::FindStringCallbackAggregator::incrementFrame(WebKit::FindStringCallbackAggregator *this, WebKit::WebFrameProxy *a2, WebKit::WebFrameProxy *a3)
{
  if ((a2 & 8) != 0) {
    WebKit::WebFrameProxy::traversePrevious(a3, (a2 >> 4) & 1, (uint64_t)v4);
  }
  else {
    WebKit::WebFrameProxy::traverseNext((uint64_t)a3, (a2 >> 4) & 1, (uint64_t)v4);
  }
  *(void *)this = v4[0];
}

void WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator(WebKit::FindStringCallbackAggregator *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 8)) == 0)
  {
    uint64_t v20 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v20 + 16))(v20, 0);
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    goto LABEL_60;
  }
  CFRetain(*(CFTypeRef *)(v3 - 8));
  uint64_t v4 = *(void *)(v3 + 328);
  if (!v4)
  {
    uint64_t v4 = *(void *)(v3 + 312);
    if (!v4)
    {
      uint64_t v42 = *((void *)this + 5);
      *((void *)this + 5) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v42 + 16))(v42, 0);
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
      goto LABEL_59;
    }
  }
  uint64_t v44 = (WebKit::WebPageProxy *)(v3 - 16);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  CFRetain(*(CFTypeRef *)(v4 + 8));
  char v5 = (unsigned __int16 *)((char *)this + 24);
  uint64_t v6 = v4;
  while (1)
  {
    long long v48 = *(_OWORD *)(v6 + 272);
    uint64_t v7 = *((void *)this + 6);
    if (!v7) {
      goto LABEL_34;
    }
    int v8 = *(_DWORD *)(v7 - 8);
    LODWORD(v47[0]) = -1640531527;
    WORD2(v47[0]) = 0;
    BYTE6(v47[0]) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)v47, &v48);
    unsigned int v9 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v47) & v8;
    char v10 = (uint64_t *)(v7 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == (void)v48 && v12 == *((void *)&v48 + 1))
    {
LABEL_18:
      uint64_t v16 = (uint64_t *)*((void *)this + 6);
      if (!v16) {
        goto LABEL_23;
      }
    }
    else
    {
      int v14 = 1;
      while (v11 | v12)
      {
        unsigned int v9 = (v9 + v14) & v8;
        char v10 = (uint64_t *)(v7 + 24 * v9);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        ++v14;
        if (*v10 == (void)v48 && v12 == *((void *)&v48 + 1)) {
          goto LABEL_18;
        }
      }
      uint64_t v16 = (uint64_t *)*((void *)this + 6);
      if (!v16) {
        goto LABEL_34;
      }
      char v10 = &v16[3 * *((unsigned int *)v16 - 1)];
    }
    v16 += 3 * *((unsigned int *)v16 - 1);
LABEL_23:
    if (v16 != v10)
    {
      if (!*((unsigned char *)v10 + 16) || *(void *)(*(void *)(v6 + 32) + 16) != *(void *)(*(void *)(v4 + 32) + 16)) {
        goto LABEL_40;
      }
      WebKit::FindStringCallbackAggregator::incrementFrame((WebKit::FindStringCallbackAggregator *)&v48, (WebKit::WebFrameProxy *)*v5, (WebKit::WebFrameProxy *)v4);
      uint64_t v17 = v48;
      if ((void)v48) {
        break;
      }
    }
LABEL_34:
    WebKit::FindStringCallbackAggregator::incrementFrame((WebKit::FindStringCallbackAggregator *)&v48, (WebKit::WebFrameProxy *)*v5, (WebKit::WebFrameProxy *)v6);
    uint64_t v19 = v48;
    CFRelease(*(CFTypeRef *)(v6 + 8));
    if (!v19)
    {
      uint64_t v6 = 0;
      goto LABEL_40;
    }
    uint64_t v6 = v19;
    if (v19 == v4)
    {
      uint64_t v6 = v4;
      goto LABEL_40;
    }
  }
  while (1)
  {
    if (v17 == v4)
    {
      uint64_t v17 = v4;
LABEL_33:
      CFRelease(*(CFTypeRef *)(v17 + 8));
      goto LABEL_34;
    }
    if (*(void *)(*(void *)(v17 + 32) + 16) != *(void *)(*(void *)(v4 + 32) + 16)) {
      goto LABEL_33;
    }
    if (v17 == v6) {
      break;
    }
    WebKit::FindStringCallbackAggregator::incrementFrame((WebKit::FindStringCallbackAggregator *)v47, (WebKit::WebFrameProxy *)*v5, (WebKit::WebFrameProxy *)v17);
    uint64_t v18 = v47[0];
    CFRelease(*(CFTypeRef *)(v17 + 8));
    uint64_t v17 = v18;
    if (!v18) {
      goto LABEL_34;
    }
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_40:
  v47[0] = (char *)this + 16;
  v47[1] = (char *)this + 24;
  v47[2] = (char *)this + 28;
  CFRetain(*(CFTypeRef *)(v3 - 8));
  unint64_t v22 = (_DWORD *)*((void *)this + 2);
  if (v22) {
    *v22 += 2;
  }
  int v23 = *((_DWORD *)this + 8);
  uint64_t v24 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6) {
    uint64_t v25 = v6;
  }
  else {
    uint64_t v25 = v4;
  }
  CFRetain(*(CFTypeRef *)(v25 + 8));
  uint64_t v26 = *(void *)(*(void *)(v25 + 32) + 16);
  atomic_fetch_add((atomic_uint *volatile)(v26 + 16), 1u);
  uint64_t v27 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v3 + 1400), v44, *(const WebKit::WebProcessProxy **)(*(void *)(v25 + 32) + 16));
  uint64_t v43 = v3;
  if (v27) {
    unsigned int v28 = (uint64_t *)(v27 + 16);
  }
  else {
    unsigned int v28 = (uint64_t *)(*(void *)(v3 + 16) + 1928);
  }
  uint64_t v29 = *v28;
  uint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v30 = 2242;
  *((void *)v30 + 1) = v29;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  uint64_t v50 = v30;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v30, (uint64_t)v47);
  uint64_t v31 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v31 = &unk_1EE9D5A70;
  *(void *)(v31 + 8) = v44;
  *(void *)(v31 + 16) = v22;
  *(_DWORD *)(v31 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v23;
  *(void *)(v31 + 32) = v24;
  uint64_t v32 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *(void *)&long long v48 = v31;
  *((void *)&v48 + 1) = v32;
  char v49 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v26, &v50, 0, (uint64_t)&v48, 1);
  if (v49 && (void)v48) {
    (*(void (**)(void))(*(void *)v48 + 8))(v48);
  }
  int v34 = v50;
  uint64_t v50 = 0;
  if (v34)
  {
    IPC::Encoder::~Encoder(v34, v33);
    WTF::fastFree(v40, v41);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v26 + 16));
  uint64_t v3 = v43;
  if (v6)
  {
    if (*(void *)(*(void *)(v4 + 32) + 16) != *(void *)(*(void *)(v6 + 32) + 16))
    {
      long long v45 = *(_OWORD *)(v4 + 272);
      char v46 = 1;
      WebKit::WebPageProxy::clearSelection((uint64_t)v44, &v45);
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
    uint64_t v35 = *(const void **)(v6 + 8);
  }
  else
  {
    uint64_t v35 = *(const void **)(v4 + 8);
  }
  CFRelease(v35);
  CFRelease(*(CFTypeRef *)(v4 + 8));
LABEL_59:
  CFRelease(*(CFTypeRef *)(v3 - 8));
LABEL_60:
  uint64_t v36 = *((void *)this + 6);
  if (v36) {
    WTF::fastFree((WTF *)(v36 - 16), v21);
  }
  uint64_t v37 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  unint64_t v38 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v21);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  uint64_t v39 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v39)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, v21);
    }
  }
}

uint64_t WebKit::FindStringCallbackAggregator::FindStringCallbackAggregator(uint64_t a1, uint64_t a2, _DWORD **a3, __int16 a4, int a5, uint64_t *a6)
{
  *(_DWORD *)a1 = 1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v12 = *(atomic_uint **)(a2 + 24);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  *(void *)(a1 + 8) = v12;
  double v13 = *a3;
  if (*a3) {
    *v13 += 2;
  }
  *(void *)(a1 + 16) = v13;
  *(_WORD *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v14 = *a6;
  *a6 = 0;
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = 0;
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::ref(uint64_t this)
{
  return this;
}

unsigned int *WebKit::AuxiliaryProcessProxy::deref(WebKit::AuxiliaryProcessProxy *this)
{
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)this + 4);
}

uint64_t WebKit::AuxiliaryProcessProxy::prepareToDropLastAssertion(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WebKit::ProcessLauncher::Client::shouldEnableLockdownMode(WebKit::ProcessLauncher::Client *this)
{
  return 0;
}

uint64_t WebKit::DrawingAreaProxy::hasVisibleContent(WebKit::DrawingAreaProxy *this)
{
  return 1;
}

uint64_t WebKit::DrawingAreaProxy::shouldCoalesceVisualEditorStateUpdates(WebKit::DrawingAreaProxy *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::ExtensionCapabilityGrant *)(a1 + 8);
    do
    {
      if (*((void *)v4 - 1) != -1)
      {
        WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v4);
        char v5 = (WTF::StringImpl *)*((void *)v4 - 1);
        *((void *)v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      uint64_t v4 = (WebKit::ExtensionCapabilityGrant *)((char *)v4 + 24);
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      char v5 = *(unsigned int **)v4;
      if (*(void *)v4 != -1)
      {
        if (*(void *)(v4 + 8))
        {
          WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(*(uint64_t **)(v4 + 8), a2);
          char v5 = *(unsigned int **)v4;
        }
        *(void *)uint64_t v4 = 0;
        if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      if (*(void *)v4 != -1)
      {
        char v5 = *(unsigned int **)(v4 + 16);
        *(void *)(v4 + 16) = 0;
        if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
        uint64_t v6 = *(WTF::StringImpl **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
        uint64_t v7 = *(WTF::StringImpl **)v4;
        *(void *)uint64_t v4 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != -1)
      {
        *uint64_t v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        uint64_t v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100](v6, a2);
          uint64_t v5 = *v4;
        }
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((unsigned int *)this + 14);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9D5708[v4])(&v7, (char *)this + 32);
  }
  *((_DWORD *)this + 1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
  uint64_t v5 = *((unsigned int *)this + 6);
  if (v5 != -1) {
    ((void (*)(char *, WTF *))off_1EE9D5708[v5])(&v8, this);
  }
  *((_DWORD *)this + 6) = -1;
  return WTF::fastFree(this, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  ++*(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 16);
  if (WebKit::connectionToProcessMap(void)::map) {
    int v4 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) = v4;
  if (WebKit::connectionToProcessMap(void)::map)
  {
    unsigned int v5 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 4);
    if (6 * *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) < v5 && v5 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v5 >> 1);
    }
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1)
{
  if (!WebKit::connectionToProcessMap(void)::map) {
    return 0;
  }
  unsigned int v1 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 8);
  unint64_t v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  unint64_t v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  uint64_t v5 = v1 & ((v4 >> 31) ^ v4);
  uint64_t v6 = *(void *)(WebKit::connectionToProcessMap(void)::map + 16 * v5);
  if (v6 == a1) {
    return WebKit::connectionToProcessMap(void)::map + 16 * v5;
  }
  int v7 = 1;
  while (v6)
  {
    uint64_t v5 = (v5 + v7) & v1;
    uint64_t v6 = *(void *)(WebKit::connectionToProcessMap(void)::map + 16 * v5);
    ++v7;
    if (v6 == a1) {
      return WebKit::connectionToProcessMap(void)::map + 16 * v5;
    }
  }
  return WebKit::connectionToProcessMap(void)::map
       + 16 * *(unsigned int *)(WebKit::connectionToProcessMap(void)::map - 4);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTranslatorASCIILiteral,WTF::ASCIILiteral,WTF::String&>(WTF::ASCIILiteral &&,WTF::String&)::{lambda(void)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    unsigned int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    unsigned int v8 = 0;
  }
  int v9 = WTF::HashTranslatorASCIILiteral::hash(*a2, a2[1]);
  int v10 = 0;
  uint64_t v11 = 0;
  for (int i = v9; ; int i = v10 + v13)
  {
    unsigned int v13 = i & v8;
    uint64_t v14 = v7 + 16 * (i & v8);
    if (*(void *)v14 != -1) {
      break;
    }
    uint64_t v11 = v7 + 16 * v13;
LABEL_10:
    ++v10;
  }
  if (!*(void *)v14)
  {
    if (v11) {
      uint64_t v14 = v11;
    }
    if (*(void *)v14 == -1)
    {
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      --*(_DWORD *)(*a1 - 16);
    }
    WTF::HashTranslatorASCIILiteral::translate((WTF::StringImpl **)v14, (WTF::StringImpl *)*a2, a2[1], v9);
    uint64_t v17 = (_DWORD *)**a3;
    if (v17) {
      *v17 += 2;
    }
    uint64_t result = *(void *)(v14 + 8);
    *(void *)(v14 + 8) = v17;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v24 = *a1;
    if (*a1) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_33:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v14);
        uint64_t v14 = result;
        uint64_t v24 = *a1;
        if (*a1) {
          unint64_t v27 = *(unsigned int *)(v24 - 4);
        }
        else {
          unint64_t v27 = 0;
        }
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_33;
    }
    uint64_t v21 = v24 + 16 * v27;
    char v20 = 1;
    goto LABEL_36;
  }
  uint64_t result = MEMORY[0x19972E990]();
  if ((result & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v18 = *a1;
  if (*a1) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v20 = 0;
  uint64_t v21 = v18 + 16 * v19;
LABEL_36:
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v21;
  *(unsigned char *)(a4 + 16) = v20;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D5728;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 16), a2);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  }
  return a1;
}

{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D5728;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 16), a2);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 16));
  }

  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 24);
  LOBYTE(v8[0]) = 0;
  char v9 = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = 0;
    v8[0] = v4;
    v8[1] = v5;
    char v9 = 1;
  }
  uint64_t result = WebKit::AuxiliaryProcessProxy::sendMessage(v2, (IPC::Encoder **)(a1 + 16), v3, (uint64_t)v8, *(unsigned __int8 *)(a1 + 56));
  if (v9)
  {
    uint64_t result = v8[0];
    if (v8[0])
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)v8[0] + 8);
      return v7();
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D5778;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D5778;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D57A0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D57A0;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(atomic_uint **)(a1 + 8);
  if (v1) {
    atomic_fetch_add(v1, 1u);
  }
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9D57C8;
  v2[1] = v1;
  uint64_t v4 = v2;
  WTF::ensureOnMainRunLoop();
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D57C8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D57C8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0::operator() const(void)::{lambda(void)#1},void>::call(unsigned int *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t result = *(unsigned int **)(v1 + 8);
    if (result)
    {
      uint64_t v2 = result + 4;
      atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
      WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC((WebKit::AuxiliaryProcessProxy *)result);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0>(WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D57F0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0>(WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WebKit::ProcessThrottlerActivity **a1)
{
  *a1 = (WebKit::ProcessThrottlerActivity *)&unk_1EE9D57F0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a1 + 1, 0);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0>(WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WTF::RunLoop *a1)
{
  WTF::RunLoop::main(a1);
  uint64_t v2 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9D5818;
  v3[1] = v2;
  uint64_t v5 = v3;
  WTF::RunLoop::dispatchAfter();
  if (v6) {
    WTF::ThreadSafeRefCounted<WTF::RunLoop::DispatchTimer,(WTF::DestructionThread)0>::deref((unsigned int *)(v6 + 24));
  }
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D5818;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WebKit::ProcessThrottlerActivity **a1)
{
  *a1 = (WebKit::ProcessThrottlerActivity *)&unk_1EE9D5818;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a1 + 1, 0);

  return WTF::fastFree((WTF *)a1, v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0>(WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D5840;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0>(WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D5840;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0>(WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  long long v4 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v2 = &unk_1EE9D5868;
  *(_OWORD *)(v2 + 8) = v4;
  uint64_t v5 = v2;
  WTF::RunLoop::dispatch();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D5868;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D5868;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0::operator()(void)::{lambda(void)#1},void>::call(unsigned int *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      long long v4 = (unsigned int *)(v3 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
      WebKit::ResponsivenessTimer::stop((unsigned char *)(v3 + 56));
      uint64_t result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
    }
  }
  uint64_t v5 = *((void *)v1 + 2);
  if (v5)
  {
    *((void *)v1 + 2) = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return (unsigned int *)v6(v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> const&>(IPC::Encoder *this, uint64_t **a2)
{
  if (*a2) {
    int v4 = *((_DWORD *)*a2 - 3);
  }
  else {
    int v4 = 0;
  }
  uint64_t result = IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  *(_DWORD *)uint64_t result = v4;
  uint64_t v7 = *a2;
  if (*a2)
  {
    uint64_t v8 = *((unsigned int *)v7 - 1);
    char v9 = &v7[3 * v8];
    if (*((_DWORD *)v7 - 3))
    {
      int v10 = *a2;
      if (v8)
      {
        uint64_t v11 = 24 * v8;
        int v10 = v7;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 3;
          v11 -= 24;
          if (!v11)
          {
            int v10 = v9;
            break;
          }
        }
      }
      if (v7) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
    int v10 = &v7[3 * v8];
  }
  else
  {
    int v10 = 0;
    LODWORD(v8) = 0;
  }
  char v9 = &v7[3 * v8];
  if (v7)
  {
LABEL_13:
    uint64_t v12 = &v7[3 * *((unsigned int *)v7 - 1)];
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v12 = 0;
LABEL_18:
  while (v10 != v12)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v10);
    uint64_t result = (uint64_t)IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(this, (uint64_t)(v10 + 1));
    unsigned int v13 = v10 + 3;
    int v10 = v9;
    if (v13 != v9)
    {
      int v10 = v13;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        v10 += 3;
        if (v10 == v9)
        {
          int v10 = v9;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> const&>(IPC::Encoder *this, WTF ***a2)
{
  if (*a2) {
    int v4 = *((_DWORD *)*a2 - 3);
  }
  else {
    int v4 = 0;
  }
  uint64_t result = IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  *(_DWORD *)uint64_t result = v4;
  uint64_t v8 = *a2;
  if (!*a2)
  {
    uint64_t v12 = 0;
    uint64_t v9 = 0;
    goto LABEL_17;
  }
  uint64_t v9 = *((unsigned int *)v8 - 1);
  int v10 = &v8[4 * v9];
  if (!*((_DWORD *)v8 - 3))
  {
    uint64_t v12 = (uint64_t *)&v8[4 * v9];
LABEL_17:
    int v10 = &v8[4 * v9];
    if (!v8) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v9)
  {
    uint64_t v11 = 32 * v9;
    while (1)
    {
      uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v8, v6, v7);
      if ((result & 1) == 0 && *v8 != (WTF *)-1) {
        break;
      }
      v8 += 4;
      v11 -= 32;
      if (!v11)
      {
        uint64_t v8 = v10;
        break;
      }
    }
    uint64_t v12 = (uint64_t *)v8;
    uint64_t v8 = *a2;
    if (!*a2) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v12 = (uint64_t *)*a2;
  if (v8) {
LABEL_18:
  }
    v8 += 4 * *((unsigned int *)v8 - 1);
LABEL_19:
  while (v12 != (uint64_t *)v8)
  {
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v12);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v12 + 1);
    uint64_t result = (uint64_t)IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(this, (uint64_t)(v12 + 2));
    BOOL v15 = v12 + 4;
    uint64_t v12 = (uint64_t *)v10;
    if (v15 != (uint64_t *)v10)
    {
      uint64_t v12 = v15;
      while (1)
      {
        uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v12, v13, v14);
        if ((result & 1) == 0 && *v12 != -1) {
          break;
        }
        v12 += 4;
        if (v12 == (uint64_t *)v10)
        {
          uint64_t v12 = (uint64_t *)v10;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::BackgroundProcessResponsivenessTimer::*&)(void),WebKit::BackgroundProcessResponsivenessTimer*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(WTF **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = WebKit::Site::operator==(a1, &v8, a3);
  uint64_t v5 = v9;
  uint64_t v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v4;
}

uint64_t WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::Site>>,WebKit::Site>@<X0>(const WTF::StringImpl **this@<X1>, uint64_t result@<X0>, atomic_uint **a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (!*(void *)result
    || (unsigned int v6 = *(_DWORD *)(v4 - 8),
        uint64_t v7 = WebKit::Site::hash(this) & v6,
        uint64_t v8 = (WTF **)(v4 + 24 * v7),
        uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v8, v9, v10), (result & 1) != 0))
  {
LABEL_7:
    uint64_t v14 = 0;
  }
  else
  {
    int v13 = 1;
    while (1)
    {
      if (*v8 != (WTF *)-1)
      {
        uint64_t result = WebKit::Site::operator==(v8, this, v12);
        if (result) {
          break;
        }
      }
      uint64_t v7 = (v7 + v13) & v6;
      uint64_t v8 = (WTF **)(v4 + 24 * v7);
      uint64_t result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v8, v11, v12);
      ++v13;
      if (result) {
        goto LABEL_7;
      }
    }
    uint64_t v14 = *(atomic_uint **)(v4 + 24 * v7 + 16);
    if (v14) {
      atomic_fetch_add(v14, 1u);
    }
  }
  *a3 = v14;
  return result;
}

void WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::rehash(a1, v3);
}

void WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    int v5 = 0;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 16;
  if (a2) {
    bzero((void *)(v6 + 16), 24 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v11 = 0;
    uint64_t v4 = v4;
    uint64_t v36 = v4;
    while (1)
    {
      uint64_t v12 = (WTF::StringImpl **)(v3 + 24 * v11);
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>((WTF **)(v3 + 24 * v11), (uint64_t)v7, v8))
        {
          uint64_t v13 = v3 + 24 * v11;
          uint64_t v14 = *(unsigned int **)(v13 + 16);
          *(void *)(v13 + 16) = 0;
          if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, v7);
          }
          BOOL v15 = v12[1];
          v12[1] = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          unsigned int v28 = *v12;
          const WTF::StringImpl *v12 = 0;
          if (!v28) {
            goto LABEL_52;
          }
          if (*(_DWORD *)v28 == 2)
          {
LABEL_51:
            WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v7);
            goto LABEL_52;
          }
          *(_DWORD *)v28 -= 2;
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unsigned int v18 = WebKit::Site::hash((WTF::StringImpl **)(v3 + 24 * v11));
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v17;
            uint64_t v21 = (WTF **)(v16 + 24 * (v18 & v17));
            int v22 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v21, (uint64_t)v7, v8);
            unsigned int v18 = ++v19 + v20;
          }
          while (!v22);
          uint64_t v23 = v16 + 24 * v20;
          uint64_t v26 = *(unsigned int **)(v23 + 16);
          int v25 = (void *)(v23 + 16);
          uint64_t v24 = v26;
          *int v25 = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v24);
            WTF::fastFree((WTF *)v24, v7);
          }
          unint64_t v27 = v21[1];
          v21[1] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          uint64_t v29 = *v21;
          void *v21 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          uint64_t v30 = *v12;
          if (*v12) {
            *(_DWORD *)v30 += 2;
          }
          void *v21 = v30;
          uint64_t v31 = v12[1];
          if (v31) {
            *(_DWORD *)v31 += 2;
          }
          v21[1] = v31;
          uint64_t v32 = v3 + 24 * v11;
          uint64_t v33 = *(void *)(v32 + 16);
          *(void *)(v32 + 16) = 0;
          *int v25 = v33;
          int v34 = *(unsigned int **)(v32 + 16);
          *(void *)(v32 + 16) = 0;
          if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v7);
          }
          uint64_t v35 = v12[1];
          v12[1] = 0;
          uint64_t v4 = v36;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2) {
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v35 -= 2;
            }
          }
          unsigned int v28 = *v12;
          const WTF::StringImpl *v12 = 0;
          if (!v28) {
            goto LABEL_52;
          }
          if (*(_DWORD *)v28 == 2) {
            goto LABEL_51;
          }
          *(_DWORD *)v28 -= 2;
        }
      }
LABEL_52:
      if (++v11 == v4) {
        goto LABEL_55;
      }
    }
  }
  if (v3)
  {
LABEL_55:
    WTF::fastFree((WTF *)(v3 - 16), v7);
  }
}

atomic_uint *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>(atomic_uint **a1, uint64_t a2)
{
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t result = *(atomic_uint **)(a2 + 24);
  atomic_fetch_add(result, 1u);
  atomic_fetch_add(result, 1u);
  *a1 = result;
  if (result && atomic_fetch_add(result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    return (atomic_uint *)WTF::fastFree((WTF *)result, v4);
  }
  return result;
}

BOOL WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      BOOL v9 = 0;
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v3 + 16 * v6;
      if ((unint64_t)(*(void *)v7 + 1) >= 2 && !*(void *)(*(void *)v7 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>::customDeleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    uint64_t v3 = *(void *)a1;
    BOOL v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v10 = *(void *)a1;
      if (*(void *)a1) {
        int v11 = *(_DWORD *)(v10 - 12);
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)(v10 - 12) = v11 - v5;
      uint64_t v3 = *(void *)a1;
    }
    if (v3)
    {
      unsigned int v12 = *(_DWORD *)(v3 - 4);
      if (v12 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v12)
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
        uint64_t v3 = *(void *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          unsigned int v14 = 0;
          goto LABEL_25;
        }
LABEL_22:
        unsigned int v14 = *(_DWORD *)(v3 - 12);
        int v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  unsigned int v14 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  int v15 = v14;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v15;
  return v9;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_9;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_7;
  }
LABEL_9:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5) {
    LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

uint64_t *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  unsigned int v2 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v4 = a1;
    WTF::fastFree((WTF *)v2, a2);
    a1 = v4;
  }
  *(void *)a1 = -1;
  uint64_t result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    return (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      int v15 = (unsigned int **)(v6 + 16 * v13);
      uint64_t v16 = *v15;
      if (*v15 != (unsigned int *)-1)
      {
        if (v16)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = ((unint64_t)v16 + ~((void)v16 << 32)) ^ (((unint64_t)v16 + ~((void)v16 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = v17 + 16 * v24;
          unsigned int v28 = (void *)(v26 + 8);
          unint64_t v27 = *(uint64_t **)(v26 + 8);
          if (v27)
          {
            WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v27, v10);
            uint64_t v29 = *(unsigned int **)v26;
            *(void *)uint64_t v26 = 0;
            if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, v10);
            }
          }
          else
          {
            *(void *)uint64_t v26 = 0;
          }
          uint64_t v30 = *v15;
          *int v15 = 0;
          *(void *)uint64_t v26 = v30;
          uint64_t v31 = v6 + 16 * v13;
          *unsigned int v28 = 0;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          *unsigned int v28 = v32;
          uint64_t v33 = *(uint64_t **)(v31 + 8);
          if (v33) {
            WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v33, v10);
          }
          int v34 = *v15;
          *int v15 = 0;
          if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v10);
          }
          if (v15 == a3) {
            uint64_t v14 = v26;
          }
        }
        else
        {
          if (*(void *)(v6 + 16 * v13 + 8))
          {
            WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(*(uint64_t **)(v6 + 16 * v13 + 8), v10);
            uint64_t v16 = *v15;
          }
          *int v15 = 0;
          if (v16)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a3;
  unint64_t v10 = ~(*a3 << 32) + *a3;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v26 = v6 + 8 * v20;
        goto LABEL_31;
      }
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      uint64_t *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v9 = *a3;
      uint64_t v14 = v16;
    }
  }
  *a3 = 0;
  uint64_t result = (uint64_t *)*v14;
  *uint64_t v14 = v9;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v18 = *a2;
  if (*a2) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::expand(a2, v14);
      uint64_t v14 = result;
      uint64_t v21 = *a2;
      if (*a2) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  uint64_t v26 = v21 + 8 * v24;
  char v25 = 1;
LABEL_31:
  uint64_t *v5 = (uint64_t)v14;
  v5[1] = v26;
  *((unsigned char *)v5 + 16) = v25;
  return result;
}

void *WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unsigned int v13 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          unint64_t v24 = (void *)(v15 + 8 * v22);
          *unint64_t v24 = 0;
          uint64_t v25 = *v13;
          *unsigned int v13 = 0;
          *unint64_t v24 = v25;
          uint64_t v26 = *v13;
          *unsigned int v13 = 0;
          if (v26) {
            (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
          }
          if (v13 == a3) {
            unint64_t v12 = v24;
          }
        }
        else
        {
          *unsigned int v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = *(unsigned int **)(a1 + 16);
  *(void *)a1 = -1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::remove(uint64_t *a1, void **a2)
{
  uint64_t result = *a2;
  *a2 = (void *)-1;
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    unsigned int v1 = result;
    atomic_store(1u, result);
    unsigned int v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unsigned int v2 = &unk_1EE9D58B8;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

WebKit::DeviceIdHashSaltStorage *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result = *(WebKit::DeviceIdHashSaltStorage **)(a1 + 8);
  if (result)
  {
    WebKit::DeviceIdHashSaltStorage::~DeviceIdHashSaltStorage(result, a2);
    return (WebKit::DeviceIdHashSaltStorage *)WTF::fastFree(v3, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::completePendingHandler(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D58E0;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  if (v4) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::completePendingHandler(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D58E0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::completePendingHandler(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(WTF::String const&)::$_0,void,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D5908;
  unsigned int v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(WTF::String const&)::$_0,void,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D5908;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(WTF::String const&)::$_0,void,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v4 = *(WTF::StringImpl ***)(v2 + 16);
  *(void *)(v2 + 16) = v3;
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  *(unsigned char *)(v2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  int v5 = *(void **)(v2 + 32);
  uint64_t v11 = v5;
  int v7 = *(_DWORD *)(v2 + 40);
  uint64_t v6 = *(unsigned int *)(v2 + 44);
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  int v12 = v7;
  int v13 = v6;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v5;
      *v5++ = 0;
      (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      v8 -= 8;
    }
    while (v8);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D5930;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D5930;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v2 = a1;
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (WTF::FileSystemImpl *)(*(void *)(a1 + 8) + 48);
  WTF::FileSystemImpl::makeAllDirectories(v3, a2);
  uint64_t v74 = 0;
  WTF::FileSystemImpl::listDirectory(&v72, v3, v4);
  if (!v73)
  {
    uint64_t v62 = 0;
LABEL_140:
    int v63 = (WTF::RunLoop *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v5);
    WTF::RunLoop::main(v63);
    uint64_t v64 = *(void *)(v2 + 24);
    *(void *)(v2 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    int v65 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v65 = &unk_1EE9D5958;
    v65[1] = v62;
    v65[2] = v64;
    *(void *)buf = v65;
    WTF::RunLoop::dispatch();
    uint64_t result = *(void *)buf;
    *(void *)buf = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return result;
  }
  uint64_t v66 = v2;
  uint64_t v6 = v72;
  uint64_t v7 = v72 + 8 * v73;
  uint64_t v8 = &unk_1EB357000;
  while (1)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::URL::fileURLWithFileSystemPath();
    WTF::URL::lastPathComponent((WTF::URL *)buf);
    if ((v9 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    uint64_t v11 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (v70) {
      break;
    }
    unsigned int v20 = *((void *)v8 + 432);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v12 = 0;
      goto LABEL_23;
    }
LABEL_105:
    int v56 = v71;
    uint64_t v71 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2) {
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v56 -= 2;
      }
    }
    v6 += 8;
    if (v6 == v7)
    {
      uint64_t v62 = v74;
      uint64_t v2 = v66;
      goto LABEL_140;
    }
  }
  int v12 = *((_DWORD *)v70 + 1);
  if (v12 != 48)
  {
    unsigned int v20 = *((void *)v8 + 432);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_101;
    }
LABEL_23:
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 48;
    _os_log_error_impl(&dword_1985F2000, v20, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: The length of the hash salt (%d) is different to the length of the hash salts defined in WebKit (%d)", buf, 0xEu);
    goto LABEL_101;
  }
  WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v71, v10);
  if (!(_BYTE)v13)
  {
    int v21 = *((void *)v8 + 432);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      uint64_t v22 = *(void *)v78 ? *(void *)v78 + 16 : 0;
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_error_impl(&dword_1985F2000, v21, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: Impossible to get the file size of: '%s'", buf, 0xCu);
      uint64_t v23 = *(WTF **)v78;
      *(void *)uint64_t v78 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::fastFree(v23, v5);
        }
        else {
          --*(_DWORD *)v23;
        }
      }
    }
    goto LABEL_101;
  }
  WebKit::createForFile((WebKit *)&v71, v13, &v69);
  uint64_t v14 = v69;
  if (!v69)
  {
    unint64_t v24 = *((void *)v8 + 432);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (*(void *)v78) {
        uint64_t v25 = *(void *)v78 + 16;
      }
      else {
        uint64_t v25 = 0;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_error_impl(&dword_1985F2000, v24, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: Impossible to access the file to restore the hash salt: '%s'", buf, 0xCu);
      uint64_t v26 = *(WTF **)v78;
      *(void *)uint64_t v78 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v5);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      goto LABEL_99;
    }
LABEL_101:
    uint64_t v55 = v70;
    int v70 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    goto LABEL_105;
  }
  WebKit::getSecurityOriginData((uint64_t)buf, (uint64_t)"origin", 7, v69);
  if (!v83)
  {
    unint64_t v27 = *((void *)v8 + 432);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_99;
    }
    WTF::String::utf8();
    if (*(void *)v77) {
      uint64_t v28 = *(void *)v77 + 16;
    }
    else {
      uint64_t v28 = 0;
    }
    *(_DWORD *)uint64_t v78 = 136315138;
    *(void *)&v78[4] = v28;
    _os_log_error_impl(&dword_1985F2000, v27, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: The security origin data in the file is not correct: '%s'", v78, 0xCu);
    uint64_t v29 = *(WTF **)v77;
    *(void *)uint64_t v77 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1) {
        WTF::fastFree(v29, v5);
      }
      else {
        --*(_DWORD *)v29;
      }
    }
    goto LABEL_46;
  }
  WebKit::getSecurityOriginData((uint64_t)v78, (uint64_t)"parentOrigin", 13, v14);
  if (!v80)
  {
    uint64_t v30 = *((void *)v8 + 432);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (v76) {
        unsigned int v57 = (char *)v76 + 16;
      }
      else {
        unsigned int v57 = 0;
      }
      *(_DWORD *)uint64_t v77 = 136315138;
      *(void *)&v77[4] = v57;
      _os_log_error_impl(&dword_1985F2000, v30, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: The parent security origin data in the file is not correct: '%s'", v77, 0xCu);
      uint64_t v58 = v76;
      uint64_t v76 = 0;
      if (!v58) {
        goto LABEL_49;
      }
LABEL_129:
      if (*(_DWORD *)v58 == 1) {
        WTF::fastFree(v58, v5);
      }
      else {
        --*(_DWORD *)v58;
      }
LABEL_49:
      uint64_t v18 = 0;
      goto LABEL_50;
    }
LABEL_46:
    uint64_t v18 = 0;
    goto LABEL_53;
  }
  uint64_t v76 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v16 = (*(uint64_t (**)(uint64_t, unsigned char *, WTF **))(*(void *)v14 + 72))(v14, v77, &v76);
  unint64_t v17 = *(WTF::StringImpl **)v77;
  *(void *)uint64_t v77 = 0;
  if (!v17) {
    goto LABEL_18;
  }
  if (*(_DWORD *)v17 == 2)
  {
    WTF::StringImpl::destroy(v17, v15);
    if (v16) {
      goto LABEL_19;
    }
LABEL_48:
    uint64_t v31 = *((void *)v8 + 432);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    WTF::String::utf8();
    unsigned int v61 = v75 ? (char *)v75 + 16 : 0;
    *(_DWORD *)uint64_t v77 = 136315138;
    *(void *)&v77[4] = v61;
    _os_log_error_impl(&dword_1985F2000, v31, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: The last time used was not correctly restored for: '%s'", v77, 0xCu);
    uint64_t v58 = v75;
    int v75 = 0;
    if (!v58) {
      goto LABEL_49;
    }
    goto LABEL_129;
  }
  *(_DWORD *)v17 -= 2;
LABEL_18:
  if ((v16 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_19:
  if (!v83 || !v80) {
    std::__throw_bad_optional_access[abi:sn180100]();
  }
  uint64_t v18 = WTF::fastMalloc((WTF *)0x50);
  WTF::WallTime::now((WTF::WallTime *)v18);
  *(unsigned char *)uint64_t v18 = 0;
  *(_DWORD *)(v18 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v18, (uint64_t)buf);
  *(unsigned char *)(v18 + 32) = 0;
  *(_DWORD *)(v18 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v18 + 32, (uint64_t)v78);
  unint64_t v19 = v70;
  int v70 = 0;
  *(void *)(v18 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v19;
  *(void *)(v18 + 72) = v76;
LABEL_50:
  if (v80 && v79 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9D5708[v79])(v77, v78);
  }
LABEL_53:
  if (v83 && v82 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9D5708[v82])(v78, buf);
  }
  if (!v18) {
    goto LABEL_99;
  }
  WebCore::SecurityOriginData::toString((uint64_t *)&v68, (WebCore::SecurityOriginData *)v18);
  WebCore::SecurityOriginData::toString((uint64_t *)&v67, (WebCore::SecurityOriginData *)(v18 + 32));
  *(void *)buf = v68;
  *(void *)uint64_t v78 = v67;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v78, v77);
  if (*(void *)v77)
  {
    uint64_t v35 = v67;
    uint64_t v67 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v33);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
    uint64_t v36 = v68;
    uint64_t v68 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v33);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    uint64_t v37 = v74;
    if (v74
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v74, 0), (uint64_t v37 = v74) != 0))
    {
      int v38 = *(_DWORD *)(v37 - 8);
    }
    else
    {
      int v38 = 0;
    }
    unsigned int v39 = *(_DWORD *)(*(void *)v77 + 16);
    if (v39 >= 0x100) {
      unsigned int v40 = v39 >> 8;
    }
    else {
      unsigned int v40 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v77);
    }
    uint64_t v41 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v43 = v40 & v38;
      uint64_t v44 = (uint64_t *)(v37 + 16 * (v40 & v38));
      long long v45 = (WTF *)*v44;
      if (*v44 == -1)
      {
        uint64_t v41 = (uint64_t *)(v37 + 16 * v43);
      }
      else
      {
        if (!v45)
        {
          if (v41)
          {
            *uint64_t v41 = 0;
            v41[1] = 0;
            --*(_DWORD *)(v37 - 16);
            uint64_t v44 = v41;
          }
          WTF::String::operator=(v44, (WTF::StringImpl **)v77);
          char v46 = (WTF *)v44[1];
          v44[1] = v18;
          uint64_t v8 = &unk_1EB357000;
          if (v46) {
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100](v46, (WTF::StringImpl *)v5);
          }
          uint64_t v47 = v74;
          if (v74) {
            int v48 = *(_DWORD *)(v74 - 12) + 1;
          }
          else {
            int v48 = 1;
          }
          *(_DWORD *)(v74 - 12) = v48;
          uint64_t v51 = (*(_DWORD *)(v47 - 16) + v48);
          unint64_t v52 = *(unsigned int *)(v47 - 4);
          if (v52 > 0x400)
          {
            if (v52 <= 2 * v51) {
LABEL_90:
            }
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v74, (WTF::StringImpl **)v44);
          }
          else if (3 * v52 <= 4 * v51)
          {
            goto LABEL_90;
          }
          uint64_t v18 = 0;
          goto LABEL_92;
        }
        if (WTF::equal(v45, *(const WTF::StringImpl **)v77, v34))
        {
          uint64_t v8 = &unk_1EB357000;
          char v49 = qword_1EB357D80;
          if (os_log_type_enabled((os_log_t)qword_1EB357D80, OS_LOG_TYPE_ERROR))
          {
            WTF::String::utf8();
            uint64_t v59 = *(void *)v78 ? *(void *)v78 + 16 : 0;
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v59;
            _os_log_error_impl(&dword_1985F2000, v49, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: There are two files with different hash salts for the same origin: '%s'", buf, 0xCu);
            unsigned int v60 = *(WTF **)v78;
            *(void *)uint64_t v78 = 0;
            if (v60)
            {
              if (*(_DWORD *)v60 == 1) {
                WTF::fastFree(v60, v5);
              }
              else {
                --*(_DWORD *)v60;
              }
            }
          }
LABEL_92:
          uint64_t v53 = *(WTF::StringImpl **)v77;
          *(void *)uint64_t v77 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 != 2)
            {
              *(_DWORD *)v53 -= 2;
              goto LABEL_95;
            }
            WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v5);
            if (v18) {
LABEL_98:
            }
              std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((WTF *)v18, (WTF::StringImpl *)v5);
          }
          else
          {
LABEL_95:
            if (v18) {
              goto LABEL_98;
            }
          }
LABEL_99:
          uint64_t v54 = v69;
          uint64_t v69 = 0;
          if (v54) {
            (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
          }
          goto LABEL_101;
        }
      }
      unsigned int v40 = i + v43;
    }
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      int v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unsigned int v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100) {
            unsigned int v20 = v19 >> 8;
          }
          else {
            unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
          }
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v18;
            unsigned int v20 = ++v21 + v22;
          }
          while (*(void *)(v17 + 16 * v22));
          uint64_t v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          unint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100](v24, v10);
            uint64_t v25 = *v23;
            *uint64_t v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v10);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          else
          {
            *uint64_t v23 = 0;
          }
          uint64_t v26 = *v13;
          *int v13 = 0;
          *uint64_t v23 = v26;
          uint64_t v27 = v6 + 16 * v11;
          uint64_t v28 = *(WTF::StringImpl **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          v23[1] = v28;
          uint64_t v29 = *(WTF **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100](v29, v10);
          }
          uint64_t v30 = *v13;
          *int v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v10);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          if (v13 == a3) {
            int v12 = v23;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          char v16 = *(WTF **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100](v16, v10);
            uint64_t v14 = *v13;
          }
          *int v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D5958;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl **)a1[1];
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D5958;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl **)*((void *)this + 1);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::storeHashSaltToDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9D5980;
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D5708[v4])(&v8, a1 + 56);
  }
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D5708[v5])(&v9, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v6 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v6);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::storeHashSaltToDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D5980;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((unsigned int *)this + 20);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9D5708[v4])(&v8, (char *)this + 56);
  }
  *((_DWORD *)this + 20) = -1;
  uint64_t v5 = *((unsigned int *)this + 12);
  if (v5 != -1) {
    ((void (*)(char *, char *))off_1EE9D5708[v5])(&v9, (char *)this + 24);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v6);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::storeHashSaltToDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::call(double *a1)
{
  uint64_t v2 = (WebCore::SecurityOriginData *)(a1 + 3);
  WebCore::KeyedEncoder::encoder(&v17, (WebCore::KeyedEncoder *)a1);
  uint64_t v3 = v17;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v18, v2);
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v3 + 80))(v3, &v19, &v18);
  uint64_t v5 = v18;
  int v18 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = v19;
  unsigned int v19 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = v17;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SecurityOriginData::databaseIdentifier((uint64_t *)&v18, (WebCore::SecurityOriginData *)(a1 + 7));
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v7 + 80))(v7, &v19, &v18);
  char v9 = v18;
  int v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  unint64_t v10 = v19;
  unsigned int v19 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v17;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **, double))(*(void *)v11 + 72))(v11, &v19, a1[12]);
  int v13 = v19;
  unsigned int v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  WebKit::writeToDisk((uint64_t)&v17);
  uint64_t v15 = v19;
  unsigned int v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(WTF::StringBuilder *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 || (uint64_t v3 = *(void *)a1) != 0) && (*(unsigned char *)(v3 + 16) & 4) == 0)
  {
    uint64_t result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (!result) {
      return result;
    }
    uint64_t v6 = *(unsigned int *)(*(void *)a2 + 16);
    if (v6 < 0x11)
    {
      if (v6)
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)a2 + 16 - v6);
        uint64_t v8 = 2 * v6;
        do
        {
          __int16 v9 = *v7++;
          *result++ = v9;
          v8 -= 2;
        }
        while (v8);
      }
      return result;
    }
    goto LABEL_17;
  }
  uint64_t result = (_WORD *)MEMORY[0x19972DE60]();
  if (!result) {
    return result;
  }
  size_t v10 = *(unsigned int *)(*(void *)a2 + 16);
  if (v10 >= 0x11)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    *(unsigned char *)uint64_t result = *v5;
    return result;
  }
  if (!v10) {
    return result;
  }
  uint64_t v5 = (unsigned char *)(*(void *)a2 + 16 - v10);
  if (v10 == 1) {
    goto LABEL_18;
  }

  return memcpy(result, v5, v10);
}

uint64_t *WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x58);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9D59A8;
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4 + 16, (uint64_t)(a2 + 1));
  *(unsigned char *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4 + 48, (uint64_t)(a2 + 5));
  uint64_t v6 = a2[9];
  a2[9] = 0;
  *(void *)(v4 + 80) = v6;
  *a1 = v4;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D59A8;
  uint64_t v2 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D5708[v3])(&v6, a1 + 48);
  }
  *(_DWORD *)(a1 + 72) = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D5708[v4])(&v7, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D59A8;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 18);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EE9D5708[v4])(&v7, (char *)this + 48);
  }
  *((_DWORD *)this + 18) = -1;
  uint64_t v5 = *((unsigned int *)this + 10);
  if (v5 != -1) {
    ((void (*)(char *, char *))off_1EE9D5708[v5])(&v8, (char *)this + 16);
  }
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::DeviceIdHashSaltStorage::completeDeviceIdHashSaltForOriginCall(*(uint64_t **)(a1 + 8), (WebCore::SecurityOriginData *)(a1 + 16), (WebCore::SecurityOriginData *)(a1 + 48), (uint64_t *)(a1 + 80));
}

void *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D59D0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D59D0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::DeviceIdHashSaltStorage::completePendingHandler(*(WTF::RunLoop **)(a1 + 8), (uint64_t *)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D59F8;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D59F8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::call()
{
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v3, v0);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 27))
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = 32 * v6;
      do
      {
        *(unsigned char *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v7, v8);
        v8 += 32;
        v7 += 32;
        v9 -= 32;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void *WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)>&&)::$_1,void>(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x28);
  uint64_t v5 = *a2;
  *uint64_t v4 = &unk_1EE9D5A20;
  v4[1] = v5;
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v4 + 2), (uint64_t)(a2 + 1));
  uint64_t v6 = a2[3];
  a2[3] = 0;
  v4[4] = v6;
  *a1 = v4;
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D5A20;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9D5A20;
  uint64_t v3 = *((void *)a1 + 4);
  *((void *)a1 + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 25))
  {
    uint64_t v1 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  else
  {
    uint64_t v4 = (unsigned int *)(a1 + 16);
    uint64_t v5 = (uint64_t *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 8);
    return WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(v6, v4, v5);
  }
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v1 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v1 = 0;
  }
  unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  unint64_t v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1) {
      goto LABEL_9;
    }
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    double v5 = (double)v1;
    double v6 = (double)v4;
    double v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 2 * v4;
  if (v4 <= 0x400) {
    goto LABEL_7;
  }
LABEL_9:
  double v5 = (double)v1;
  double v6 = (double)v4;
  double v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5) {
    LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 2 * v4;
  }
  if (v4 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v4;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8, 0);
}

WTF *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>::customDeleteBucket(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket(a1, a2);
  uint64_t result = a1[1];
  a1[1] = 0;
  if (result)
  {
    return (WTF *)std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100](result, v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D5A48;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D5A48;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(void *a1)
{
  if (*(unsigned char *)(a1[1] + 25))
  {
    uint64_t v1 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  else
  {
    double v4 = *((double *)a1 + 2);
    double v5 = a1 + 3;
    uint64_t v6 = a1[1];
    return WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(v6, v5, v4);
  }
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,BOOL &>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v25 = -1640531527;
  __int16 v26 = 0;
  char v27 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v25, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
  unsigned int v11 = result & v9;
  int v12 = (void *)(v8 + 24 * (result & v9));
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    do
    {
      if (v14 == *a2 && v13 == a2[1])
      {
        uint64_t v23 = *a1;
        if (*a1) {
          unsigned int v24 = *(_DWORD *)(v23 - 4);
        }
        else {
          unsigned int v24 = 0;
        }
        *(void *)a4 = v12;
        *(void *)(a4 + 8) = v23 + 24 * v24;
        *(unsigned char *)(a4 + 16) = 0;
        *((unsigned char *)v12 + 16) = *a3;
        return result;
      }
      if (v13 == -1) {
        uint64_t v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v9;
      int v12 = (void *)(v8 + 24 * v11);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *uint64_t v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      int v12 = v15;
    }
  }
  *(_OWORD *)int v12 = *(_OWORD *)a2;
  *((unsigned char *)v12 + 16) = *a3;
  uint64_t v17 = *a1;
  if (*a1) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, (long long *)v12);
      int v12 = (void *)result;
      uint64_t v19 = *a1;
      if (*a1) {
        LODWORD(v22) = *(_DWORD *)(v19 - 4);
      }
      else {
        LODWORD(v22) = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v19 + 24 * v22;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= 2 * v5);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    do
    {
      uint64_t v13 = (long long *)(v4 + 24 * v10);
      if (*((void *)v13 + 1) != -1 && *v13 != 0)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          unsigned int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          unsigned int v15 = 0;
        }
        unsigned int v21 = -1640531527;
        __int16 v22 = 0;
        char v23 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v21, (void *)(v4 + 24 * v10));
        int v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
        int v17 = 0;
        do
        {
          uint64_t v18 = v14 + 24 * (v16 & v15);
          int v16 = ++v17 + (v16 & v15);
        }
        while (*(_OWORD *)v18 != 0);
        long long v19 = *v13;
        *(void *)(v18 + 16) = *((void *)v13 + 2);
        *(_OWORD *)uint64_t v18 = v19;
        if (v13 == a2) {
          uint64_t v11 = v18;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, **(_WORD **)(a2 + 8));
  int v4 = **(_DWORD **)(a2 + 16);

  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D5A70;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D5A70;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(a2, v11);
    if (v15)
    {
      int v4 = v12;
      uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 112);
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      }
      else {
        (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
      }
      BOOL v8 = v4 != 0;
      uint64_t v9 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v9 + 16))(v9, v8);
      uint64_t result = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
      if (v15)
      {
        uint64_t result = v13;
        if (v13)
        {
          uint64_t v13 = 0;
          int v14 = 0;
          return (WTF *)WTF::fastFree(result, v10);
        }
      }
    }
    else
    {
      return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(v2);
    }
  }
  else
  {
    int v6 = (void *)(a1 + 8);
    return (WTF *)IPC::Connection::cancelReply<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(void *a1)
{
  (*(void (**)(void, void, void *))(**(void **)(*a1 + 112) + 32))(*(void *)(*a1 + 112), *a1, a1 + 1);
  uint64_t v2 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, void))(*(void *)v2 + 16))(v2, 0);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[56])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      unsigned int v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a1, (uint64_t)v4);
  if (v4[24])
  {
    IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((unint64_t *)a1, v4, a2);
  }
  else
  {
    *a2 = 0;
    a2[56] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(unint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)a2, (uint64_t *)&v8, a3);
    if (v10)
    {
      unsigned int v7 = v8;
      if (v8)
      {
        BOOL v8 = 0;
        int v9 = 0;
        WTF::fastFree(v7, v6);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned char *a4@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    BOOL v8 = (unsigned int *)(v5 + v6);
    a1[2] = v8 + 1;
    if (v5)
    {
      uint64_t v16 = *v8 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>(a1, a2, a3, (uint64_t)&v16, a4);
      return;
    }
    unint64_t v9 = v4;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v13 = a1;
      char v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v4);
        a1 = v13;
        a4 = v15;
        uint64_t v10 = *v13;
        unint64_t v9 = v13[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12)
  {
    if (v9)
    {
      int v14 = a4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
      a4 = v14;
    }
  }
  *a4 = 0;
  a4[56] = 0;
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    unint64_t v9 = (unsigned int *)(v6 + v7);
    a1[2] = v9 + 1;
    if (v6)
    {
      uint64_t v17 = *v9 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int>(a1, a2, a3, a4, (uint64_t)&v17, a5);
      return;
    }
    unint64_t v10 = v5;
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      int v14 = a1;
      uint64_t v16 = a5;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v6, v5);
        a1 = v14;
        a5 = v16;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13)
  {
    if (v10)
    {
      char v15 = a5;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
      a5 = v15;
    }
  }
  *a5 = 0;
  a5[56] = 0;
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  unint64_t v8 = a1[1];
  uint64_t v9 = *a1;
  unint64_t v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      long long v19 = a1;
      __int16 v22 = a6;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        a1 = v19;
        a6 = v22;
        uint64_t v14 = *v19;
        unint64_t v13 = v19[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = v11 + 1;
  if (!v9)
  {
    unint64_t v13 = v8;
    uint64_t v14 = 0;
LABEL_7:
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      uint64_t v18 = a1;
      unsigned int v21 = a6;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        a1 = v18;
        a6 = v21;
        uint64_t v9 = *v18;
        unint64_t v8 = v18[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v12 = *v11;
  if (v12 < 2)
  {
    __int16 v23 = (v12 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>(a2, a3, a4, a5, &v23, (uint64_t)a6);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v17 = a1[3];
  if (v17)
  {
    if (v8)
    {
      int v20 = a6;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v9);
      a6 = v20;
    }
  }
  *a6 = 0;
  a6[56] = 0;
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unsigned char *a5@<X5>, uint64_t a6@<X8>)
{
  if (*(unsigned char *)(a1 + 24) && *((unsigned char *)a2 + 16) && *(unsigned char *)(a3 + 4) && *(unsigned char *)(a4 + 4) && a5[1])
  {
    *(_OWORD *)a6 = *(_OWORD *)a1;
    uint64_t v6 = *a2;
    *(void *)(a6 + 16) = *(void *)(a1 + 16);
    *(void *)(a6 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v6;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    *(void *)(a6 + 32) = v7;
    LODWORD(v6) = *(_DWORD *)a4;
    *(_DWORD *)(a6 + 40) = *(_DWORD *)a3;
    *(_DWORD *)(a6 + 4WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v6;
    *(unsigned char *)(a6 + 48) = *a5;
    *(unsigned char *)(a6 + 56) = 1;
  }
  else
  {
    __break(1u);
  }
}

void WebKit::FrameLoadState::~FrameLoadState(WebKit::FrameLoadState *this, void *a2)
{
  uint64_t v3 = (unsigned int **)*((void *)this + 21);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unint64_t v5 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

uint64_t WebKit::FrameLoadState::didStartProvisionalLoad(WebKit::FrameLoadState *this, const WTF::URL *a2)
{
  *(_DWORD *)this = 0;
  WTF::String::operator=((uint64_t *)this + 6, (WTF::StringImpl **)a2);
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 72) = v4;
  unint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9D5A98;
  v5[1] = a2;
  uint64_t v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, void *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v9, (void **)a1);
  if (HIDWORD(v10))
  {
    unint64_t v5 = v9;
    uint64_t v6 = 8 * HIDWORD(v10);
    do
    {
      if (*v5)
      {
        if (*(void *)(*v5 + 8))
        {
          uint64_t v11 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v11))
          {
            if (*v5) {
              uint64_t v7 = *(void *)(*v5 + 8);
            }
            else {
              uint64_t v7 = 0;
            }
            (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v7);
          }
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v4);
}

WTF::StringImpl *WebKit::FrameLoadState::didSuspend(WebKit::FrameLoadState *this)
{
  *(_DWORD *)this = 2;
  uint64_t v2 = (char *)this + 48;
  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  WTF::URL::operator=((uint64_t)v2, (uint64_t)v7);
  long long v4 = v7[0];
  v7[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unint64_t v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)unint64_t v5 = &unk_1EE9D5AC0;
  v7[0] = v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, v7);
  uint64_t result = v7[0];
  v7[0] = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::FrameLoadState::didExplicitOpen(WebKit::FrameLoadState *this, const WTF::URL *a2)
{
  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  WTF::URL::operator=((uint64_t)this + 48, (uint64_t)v7);
  unint64_t v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return WebKit::FrameLoadState::setURL(this, a2);
}

uint64_t WebKit::FrameLoadState::setURL(WebKit::FrameLoadState *this, const WTF::URL *a2)
{
  WTF::String::operator=((uint64_t *)this + 1, (WTF::StringImpl **)a2);
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 1) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 2) = v4;
  unint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9D5B88;
  v5[1] = a2;
  uint64_t v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad(WebKit::FrameLoadState *this, const WTF::URL *a2)
{
  WTF::String::operator=((uint64_t *)this + 6, (WTF::StringImpl **)a2);
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 72) = v4;
  unint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9D5AE8;
  v5[1] = a2;
  uint64_t v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::FrameLoadState::didFailProvisionalLoad(WebKit::FrameLoadState *this)
{
  *(_DWORD *)this = 2;
  uint64_t v2 = (char *)this + 48;
  v8[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v8);
  WTF::URL::operator=((uint64_t)v2, (uint64_t)v8);
  long long v4 = v8[0];
  v8[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WTF::String::operator=((uint64_t *)this + 11, (WTF::StringImpl **)this + 16);
  long long v5 = *(_OWORD *)((char *)this + 152);
  *((_OWORD *)this + 6) = *(_OWORD *)((char *)this + 136);
  *((_OWORD *)this + 7) = v5;
  uint64_t v6 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v6 = &unk_1EE9D5B10;
  v8[0] = v6;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, v8);
  uint64_t result = v8[0];
  v8[0] = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::FrameLoadState::didCommitLoad(WebKit::FrameLoadState *this)
{
  *(_DWORD *)this = 1;
  uint64_t v2 = (char *)this + 48;
  uint64_t v3 = (char *)this + 48;
  if (!*((void *)this + 6)) {
    uint64_t v3 = (char *)WTF::aboutBlankURL(this);
  }
  WTF::String::operator=((uint64_t *)this + 1, (WTF::StringImpl **)v3);
  long long v4 = *(_OWORD *)(v3 + 24);
  *((_OWORD *)this + 1) = *(_OWORD *)(v3 + 8);
  *((_OWORD *)this + 2) = v4;
  v9[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v9);
  WTF::URL::operator=((uint64_t)v2, (uint64_t)v9);
  uint64_t v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v7 = &unk_1EE9D5B38;
  v9[0] = v7;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, v9);
  uint64_t result = v9[0];
  v9[0] = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::FrameLoadState::didFinishLoad(WebKit::FrameLoadState *this)
{
  *(_DWORD *)this = 2;
  uint64_t v1 = (uint64_t *)((char *)this + 168);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9D5B60;
  uint64_t v4 = (uint64_t)v2;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WebKit::GeolocationPermissionRequestManagerProxy::invalidateRequests(WebKit::GeolocationPermissionRequestManagerProxy *this)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this);
  uint64_t v4 = *(void **)this;
  if (*(void *)this) {
    long long v5 = &v4[2 * *((unsigned int *)v4 - 1)];
  }
  else {
    long long v5 = 0;
  }
  if (v5 != result)
  {
    do
    {
      *(void *)(result[1] + 8) = 0;
      while (1)
      {
        result += 2;
        if (result == v3) {
          break;
        }
        if ((unint64_t)(*result + 1) > 1) {
          goto LABEL_10;
        }
      }
      uint64_t result = v3;
LABEL_10:
      ;
    }
    while (result != v5);
    uint64_t v4 = *(void **)this;
  }
  if (v4)
  {
    *(void *)this = 0;
    return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable((uint64_t)v4, v3);
  }
  return result;
}

uint64_t *WebKit::GeolocationPermissionRequestManagerProxy::createRequest@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = a2;
  WebKit::GeolocationPermissionRequestProxy::create((uint64_t)a1, a2, a3, a4);
  unint64_t v8 = (_DWORD *)*a4;
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::add<WebKit::GeolocationPermissionRequestProxy*>(a1, &v9, &v8, (uint64_t)v7);
}

unsigned int *WebKit::GeolocationPermissionRequestProxy::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)uint64_t v8 = 1;
  *(void *)(v8 + 8) = a1;
  *(void *)(v8 + 16) = a2;
  uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v10 = *(atomic_uint **)(a3 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  *(void *)(v8 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
  *a4 = v8;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::add<WebKit::GeolocationPermissionRequestProxy*>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_33;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  int v20 = *a3;
  if (*a3) {
    ++*v20;
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v20;
  if (result) {
    uint64_t result = (uint64_t *)WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref((unsigned int **)result, a2);
  }
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_26:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_33:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

WTF::StringImpl *WebKit::GeolocationPermissionRequestManagerProxy::didReceiveGeolocationPermissionDecision(WTF::StringImpl *result, uint64_t a2, char a3)
{
  uint64_t v40 = a2;
  uint64_t v3 = *(void *)(*((void *)result + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!*(unsigned char *)(v4 + 801))
  {
    if (*(unsigned char *)(v4 + 800))
    {
      long long v5 = (uint64_t *)result;
      uint64_t v6 = *(void *)result;
      if (*(void *)result)
      {
        unsigned int v7 = *(_DWORD *)(v6 - 8);
        unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
        uint64_t v12 = *(void *)(v6 + 16 * v11);
        if (v12 != a2)
        {
          int v13 = 1;
          while (v12)
          {
            uint64_t v11 = (v11 + v13) & v7;
            uint64_t v12 = *(void *)(v6 + 16 * v11);
            ++v13;
            if (v12 == a2) {
              goto LABEL_14;
            }
          }
          uint64_t v11 = *(unsigned int *)(v6 - 4);
        }
LABEL_14:
        if (v11 != *(_DWORD *)(v6 - 4))
        {
          if (a3)
          {
            WTF::createVersion4UUIDString((uint64_t *)&v39, result);
            if (v39) {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v5 + 1, &v39, v14, (uint64_t)v41);
            }
          }
          else
          {
            unsigned int v39 = 0;
          }
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v17 = *(void *)(v15 + 8);
          uint64_t v16 = (unsigned int ***)(v15 + 8);
          uint64_t v18 = *(void *)(v17 + 24);
          if (v18)
          {
            int v19 = *(atomic_uint **)(v18 + 8);
            if (v19)
            {
              atomic_fetch_add(v19 + 4, 1u);
              uint64_t v20 = *(void *)(v5[2] + 8);
              if (v20) {
                uint64_t v21 = v20 - 16;
              }
              else {
                uint64_t v21 = 0;
              }
              uint64_t v22 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v21 + 1416), (const WebKit::WebPageProxy *)v21, (const WebKit::WebProcessProxy *)v19);
              if (v22) {
                uint64_t v23 = (uint64_t *)(v22 + 16);
              }
              else {
                uint64_t v23 = (uint64_t *)(*(void *)(v21 + 32) + 1928);
              }
              uint64_t v24 = *v23;
              int v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)int v25 = 2211;
              *((void *)v25 + 1) = v24;
              *((void *)v25 + 66) = (char *)v25 + 16;
              *((void *)v25 + 67) = 512;
              *((void *)v25 + 68) = 0;
              *((void *)v25 + 70) = 0;
              *((void *)v25 + 69) = 0;
              IPC::Encoder::encodeHeader(v25);
              unsigned int v43 = v25;
              IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v25, &v40);
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)&v39);
              LOBYTE(v41[0]) = 0;
              char v42 = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v19, &v43, 0, (uint64_t)v41, 1);
              if (v42)
              {
                uint64_t v27 = v41[0];
                v41[0] = 0;
                if (v27) {
                  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
                }
              }
              char v28 = v43;
              unsigned int v43 = 0;
              if (v28)
              {
                IPC::Encoder::~Encoder(v28, v26);
                WTF::fastFree(v37, v38);
              }
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v19 + 4);
            }
          }
          uint64_t v29 = (void *)(v6 + 16 * v11);
          uint64_t v30 = *v5;
          if (!*v5 || (v30 += 16 * *(unsigned int *)(v30 - 4), (void *)v30 != v29))
          {
            if ((void *)v30 != v29)
            {
              void *v29 = -1;
              uint64_t v31 = *v16;
              uint64_t *v16 = 0;
              if (v31) {
                WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v31, (void *)a2);
              }
              ++*(_DWORD *)(*v5 - 16);
              uint64_t v32 = *v5;
              if (*v5) {
                int v33 = *(_DWORD *)(v32 - 12) - 1;
              }
              else {
                int v33 = -1;
              }
              *(_DWORD *)(v32 - 12) = v33;
              uint64_t v34 = *v5;
              if (*v5)
              {
                unsigned int v35 = 6 * *(_DWORD *)(v34 - 12);
                unsigned int v36 = *(_DWORD *)(v34 - 4);
                if (v35 < v36 && v36 >= 9) {
                  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v5, v36 >> 1, 0);
                }
              }
            }
          }
          uint64_t result = v39;
          unsigned int v39 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::GeolocationPermissionRequestManagerProxy::isValidAuthorizationToken(WebKit::GeolocationPermissionRequestManagerProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = (uint64_t)*a2;
  if (*a2)
  {
    uint64_t v5 = *((void *)this + 1);
    if (v5)
    {
      int v7 = *(_DWORD *)(v5 - 8);
      unsigned int v8 = *(_DWORD *)(result + 16);
      if (v8 >= 0x100) {
        unsigned int v9 = v8 >> 8;
      }
      else {
        unsigned int v9 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      }
      for (i = 0; ; unsigned int v9 = i + v11)
      {
        int v11 = v9 & v7;
        uint64_t result = *(void *)(v5 + 8 * (v9 & v7));
        if (result != -1)
        {
          if (!result) {
            return result;
          }
          if (WTF::equal((WTF *)result, *a2, a3)) {
            break;
          }
        }
        ++i;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl **WebKit::GeolocationPermissionRequestManagerProxy::revokeAuthorizationToken(WebKit::GeolocationPermissionRequestManagerProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = (WTF::StringImpl **)WebKit::GeolocationPermissionRequestManagerProxy::isValidAuthorizationToken(this, a2, a3);
  if (result)
  {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 1, a2, v6);
    uint64_t v7 = *((void *)this + 1);
    if (v7)
    {
      unsigned int v8 = (WTF::StringImpl **)(v7 + 8 * *(unsigned int *)(v7 - 4));
      if (v8 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      unsigned int v8 = 0;
    }
    if (v8 != result)
    {
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)this + 1, result);
    }
  }
  return result;
}

uint64_t WebKit::LegacyGlobalSettings::setCacheModel(char *a1, char a2)
{
  *a1 = a2;
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    uint64_t v4 = v8;
    uint64_t v5 = 8 * v9;
    do
    {
      uint64_t v6 = *v4++;
      WebKit::WebProcessPool::setCacheModel(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

void WebKit::MediaKeySystemPermissionRequestManagerProxy::~MediaKeySystemPermissionRequestManagerProxy(WebKit::MediaKeySystemPermissionRequestManagerProxy *this, void *a2)
{
  WebKit::MediaKeySystemPermissionRequestManagerProxy::invalidatePendingRequests(this, a2);
  uint64_t v4 = (WTF::StringImpl **)*((void *)this + 3);
  if (v4) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, v3);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v3);
  }

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v3);
}

void *WebKit::MediaKeySystemPermissionRequestManagerProxy::invalidatePendingRequests(WebKit::MediaKeySystemPermissionRequestManagerProxy *this, void *a2)
{
  uint64_t result = (void *)*((void *)this + 2);
  if (result)
  {
    uint64_t v4 = *((unsigned int *)result - 1);
    uint64_t v5 = &result[2 * v4];
    if (*((_DWORD *)result - 3))
    {
      uint64_t v6 = result;
      if (v4)
      {
        uint64_t v7 = 16 * v4;
        uint64_t v6 = result;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            uint64_t v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v6 = &result[2 * v4];
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = &result[2 * v4];
  if (result)
  {
LABEL_8:
    unsigned int v8 = &result[2 * *((unsigned int *)result - 1)];
    goto LABEL_13;
  }
  unsigned int v8 = 0;
LABEL_13:
  if (v8 != v6)
  {
    do
    {
      uint64_t v9 = v6[1];
      unint64_t v10 = *(unsigned int **)(v9 + 8);
      *(void *)(v9 + 8) = 0;
      if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
      int v11 = v6 + 2;
      uint64_t v6 = v5;
      if (v11 != v5)
      {
        uint64_t v6 = v11;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            uint64_t v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    uint64_t result = (void *)*((void *)this + 2);
  }
  if (result)
  {
    *((void *)this + 2) = 0;
    return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)result, (WTF::StringImpl *)a2);
  }
  return result;
}

WebKit::WebPageProxy *WebKit::MediaKeySystemPermissionRequestManagerProxy::denyRequest(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4) {
    uint64_t result = (WebKit::WebPageProxy *)(v4 - 16);
  }
  else {
    uint64_t result = 0;
  }
  if (!*((unsigned char *)result + 801) && *((unsigned char *)result + 800))
  {
    uint64_t v8 = WebKit::WebPageProxy::logger(result);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v15 = "MediaKeySystemPermissionRequestManagerProxy";
    uint64_t v16 = 44;
    uint64_t v17 = "denyRequest";
    uint64_t v18 = v9;
    unint64_t v10 = *(WTF::String **)(a2 + 16);
    unint64_t v14 = v10;
    if (*(unsigned char *)(v8 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long,char [11],WTF::String>((uint64_t)&WebKit2LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v15, &v14, ", reason: ", a3);
      unint64_t v10 = *(WTF::String **)(a2 + 16);
    }
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v11) {
      uint64_t v12 = v11 - 16;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)(v12 + 256);
    unint64_t v14 = v10;
    uint64_t v15 = (const char *)&v14;
    uint64_t v16 = (uint64_t)a3;
    return (WebKit::WebPageProxy *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MediaKeySystemWasDenied>(v13, (uint64_t **)&v15, *(void *)(*(void *)(v12 + 32) + 1928), 0);
  }
  return result;
}

WebKit::WebPageProxy *WebKit::MediaKeySystemPermissionRequestManagerProxy::grantRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v3) {
    uint64_t result = (WebKit::WebPageProxy *)(v3 - 16);
  }
  else {
    uint64_t result = 0;
  }
  if (!*((unsigned char *)result + 801) && *((unsigned char *)result + 800))
  {
    uint64_t v6 = WebKit::WebPageProxy::logger(result);
    uint64_t v7 = *(uint64_t **)(a1 + 32);
    v13[0] = (uint64_t *)"MediaKeySystemPermissionRequestManagerProxy";
    v13[1] = (uint64_t *)44;
    void v13[2] = (uint64_t *)"grantRequest";
    void v13[3] = v7;
    uint64_t v8 = *(WTF::String **)(a2 + 16);
    uint64_t v12 = v8;
    if (*(unsigned char *)(v6 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long,char [11],WTF::String>((uint64_t)&WebKit2LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v13, &v12, ", keySystem: ", (WTF::StringImpl **)(a2 + 64));
      uint64_t v8 = *(WTF::String **)(a2 + 16);
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v9) {
      uint64_t v10 = v9 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void *)(v10 + 256);
    uint64_t v12 = v8;
    v13[0] = (uint64_t *)&v12;
    return (WebKit::WebPageProxy *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MediaKeySystemWasGranted>(v11, v13, *(void *)(*(void *)(v10 + 32) + 1928), 0);
  }
  return result;
}

uint64_t *WebKit::MediaKeySystemPermissionRequestManagerProxy::createRequestForFrame@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _DWORD **a6@<X5>, void *a7@<X8>)
{
  char v28 = a2;
  uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v14) {
    uint64_t v15 = (WebKit::WebPageProxy *)(v14 - 16);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = WebKit::WebPageProxy::logger(v15);
  uint64_t v17 = *(void *)(a1 + 32);
  v27[0] = "MediaKeySystemPermissionRequestManagerProxy";
  v27[1] = 44;
  void v27[2] = "createRequestForFrame";
  v27[3] = v17;
  uint64_t v26 = a2;
  if (*(unsigned char *)(v16 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v27, (WTF::String **)&v26);
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v18) {
    uint64_t v19 = v18 - 16;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void *)(v19 + 328);
  uint64_t v21 = *(void *)(v20 + 272);
  uint64_t v22 = *(void *)(v20 + 280);
  uint64_t v23 = WTF::fastMalloc((WTF *)0x48);
  uint64_t v24 = (_DWORD *)WebKit::MediaKeySystemPermissionRequestProxy::MediaKeySystemPermissionRequestProxy(v23, (unsigned int *)a1, (uint64_t)a2, v21, v22, a3, a4, a5, a6);
  *a7 = v24;
  uint64_t v26 = v24;
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::add<WebKit::MediaKeySystemPermissionRequestProxy*>((uint64_t *)(a1 + 16), (WTF::StringImpl *)&v28, &v26, (uint64_t)v27);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::add<WebKit::MediaKeySystemPermissionRequestProxy*>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *(void *)a2;
  unint64_t v12 = *(void *)a2 + ~(*(void *)a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_33;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *(void *)a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  if (*a3) {
    ++*v20;
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v20;
  if (result) {
    uint64_t result = (uint64_t *)WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref((WTF::StringImpl **)result, a2);
  }
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_26:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_33:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

uint64_t WebKit::MediaKeySystemPermissionRequestProxy::MediaKeySystemPermissionRequestProxy(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, _DWORD **a9)
{
  *(_DWORD *)a1 = 1;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2, (uint64_t)a2);
  uint64_t v17 = *(atomic_uint **)a2;
  if (*(void *)a2) {
    atomic_fetch_add(v17, 1u);
  }
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  uint64_t v18 = *a8;
  *a8 = 0;
  *(void *)(a1 + 56) = v18;
  int v19 = *a9;
  if (*a9) {
    *v19 += 2;
  }
  *(void *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v19;
  return a1;
}

uint64_t WebKit::MediaKeySystemPermissionRequestProxy::allow(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (v1)
  {
    uint64_t v2 = this;
    this = *(void *)(v1 + 8);
    if (this)
    {
      WebKit::MediaKeySystemPermissionRequestManagerProxy::grantRequest(this, v2);
      this = *(void *)(v2 + 8);
      *(void *)(v2 + 8) = 0;
      if (this)
      {
        if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v3);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::MediaKeySystemPermissionRequestProxy::deny(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (v1)
  {
    uint64_t v2 = this;
    this = *(void *)(v1 + 8);
    if (this)
    {
      uint64_t v5 = 0;
      WebKit::MediaKeySystemPermissionRequestManagerProxy::denyRequest(this, v2, &v5);
      uint64_t v4 = v5;
      uint64_t v5 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, v3);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      this = *(void *)(v2 + 8);
      *(void *)(v2 + 8) = 0;
      if (this)
      {
        if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v3);
        }
      }
    }
  }
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl **)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl **WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = this[8];
    *((void *)v2 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *((void *)v2 + 7);
    *((void *)v2 + 7) = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
    }
    uint64_t v5 = (unsigned int *)*((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didStartProvisionalLoad(WTF::URL const&)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didSuspend(void)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad(WTF::URL const&)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didFailProvisionalLoad(void)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didCommitLoad(void)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didFinishLoad(void)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::setURL(WTF::URL const&)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 8));
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 32);

  return v4(a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          unint64_t v27 = (unsigned int **)v26[1];
          v26[1] = 0;
          if (v27) {
            WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v27, v10);
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(unsigned int ***)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v30, v10);
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(unsigned int ***)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long,char [11],WTF::String>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WTF::String **a4, const char *a5, WTF::StringImpl **a6)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v43, this);
  WTF::String::number(*a4);
  unsigned int v36 = (char *)a5;
  WTF::String::String((WTF::String *)&v41, a5);
  uint64_t v37 = a6;
  uint64_t v11 = *a6;
  if (*a6) {
    *(_DWORD *)v11 += 2;
  }
  uint64_t v40 = v11;
  WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v43, (uint64_t *)&v42, (uint64_t *)&v41, (uint64_t *)&v40, &v44);
  unint64_t v13 = v40;
  uint64_t v40 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v41;
  uint64_t v41 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = v42;
  char v42 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v12);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = v43;
  unsigned int v43 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v12);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(NSObject **)(a1 + 32);
  int v18 = (WTF *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    WTF::String::utf8();
    unint64_t v20 = v39[0] ? (char *)v39[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    char v46 = v20;
    _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    int v18 = v39[0];
    v39[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1) {
        int v18 = (WTF *)WTF::fastFree(v18, v19);
      }
      else {
        --*(_DWORD *)v18;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    unint64_t v21 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v22 = *v21;
      if (v22) {
        break;
      }
      int v23 = *v21;
      atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, v22 | 1, memory_order_acquire, memory_order_acquire);
      if (v23 == v22)
      {
        uint64_t v24 = WTF::Logger::observers(v18);
        uint64_t v25 = *(unsigned int *)(v24 + 12);
        if (v25)
        {
          uint64_t v26 = *(uint64_t **)v24;
          uint64_t v27 = *(void *)v24 + 8 * v25;
          do
          {
            uint64_t v28 = *v26;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v46 + 4), this);
            uint64_t v29 = *a4;
            int v47 = 0;
            WTF::String::number(v29);
            int v48 = 0;
            WTF::String::String((WTF::String *)v49, v36);
            v49[2] = 0;
            uint64_t v30 = *v37;
            if (*v37) {
              *(_DWORD *)v30 += 2;
            }
            uint64_t v50 = v30;
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v39, (uint64_t)buf, 4uLL);
            (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v28 + 16))(v28, a1, a2, v39);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v31);
            for (uint64_t i = 56; i != -8; i -= 16)
            {
              int v33 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2) {
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v19);
                }
                else {
                  *(_DWORD *)v33 -= 2;
                }
              }
            }
            ++v26;
          }
          while (v26 != (uint64_t *)v27);
        }
        int v34 = 1;
        atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
        if (v34 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v44;
  uint64_t v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MediaKeySystemWasDenied>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2317;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MediaKeySystemWasGranted>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2318;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      unint64_t v12 = (uint64_t *)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = (uint64_t *)(v16 + 16 * v23);
          uint64_t v26 = (WTF::StringImpl **)v25[1];
          v25[1] = 0;
          if (v26) {
            WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v26, v9);
          }
          *uint64_t v25 = *v12;
          uint64_t v27 = v4 + 16 * v10;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          v25[1] = v28;
          uint64_t v29 = *(WTF::StringImpl ***)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v29, v9);
          }
          if (v12 == a2) {
            uint64_t v11 = v25;
          }
        }
        else
        {
          uint64_t v14 = v4 + 16 * v10;
          uint64_t v15 = *(WTF::StringImpl ***)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15) {
            WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v15, v9);
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WebKit::WebPaymentCoordinator::platformAvailablePaymentNetworks@<X0>(WebKit::WebPaymentCoordinator *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v3 = (void *)[(id)((uint64_t (*)(WebKit::WebPaymentCoordinator *))*MEMORY[0x1E4FB6308])(this) availableNetworks];
  uint64_t result = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        MEMORY[0x19972EAD0](&v11, *(void *)(*((void *)&v12 + 1) + 8 * v7));
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v11, (uint64_t)&v10);
        uint64_t v9 = v11;
        uint64_t v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v8);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t result = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_198DF7EEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (*v12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  }
  _Unwind_Resume(exception_object);
}

double WebKit::RemoteGraphicsContextGLProxy::platformCreate@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0xE8);
  uint64_t v7 = WebKit::RemoteGraphicsContextGLProxy::RemoteGraphicsContextGLProxy(v6, (uint64_t)a1, a2);
  *(void *)uint64_t v7 = &unk_1EE9D5BB0;
  *(void *)(v7 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = &unk_1EE9D6500;
  *(void *)(v7 + 72) = &unk_1EE9D6E18;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  LOBYTE(a2) = *a1;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9D6E48;
  *(void *)&double result = 1;
  *(void *)(v8 + 8) = 1;
  *(void *)(v8 + 16) = 0;
  *(unsigned char *)(v8 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a2 ^ 1;
  *(void *)(v6 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v8;
  *a3 = v6;
  return result;
}

void sub_198DF803C()
{
  uint64_t v1 = 216;
  while (1)
  {
    uint64_t v2 = *(unsigned int **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = 0;
    if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
    }
    v1 -= 8;
    if (v1 == 192) {
      WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(v0);
    }
  }
}

void sub_198DF80AC(WTF *a1, void *a2)
{
  WTF::fastFree(a1, a2);
  _Unwind_Resume(v2);
}

id WebKit::MediaPlayerPrivateRemote::createVideoFullscreenLayer@<X0>(void *a1@<X8>)
{
  id result = objc_alloc_init(MEMORY[0x1E4F39BE8]);
  *a1 = result;
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::pushVideoFrameMetadata(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)(v6 + 32));
  uint64_t v7 = v19;
  uint64_t v8 = (WebKit::GPUProcessConnection *)WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  uint64_t v9 = (atomic_uint *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v8);
  uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x88);
  uint64_t result = WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy((uint64_t)v10, v7, v9, a3);
  long long v12 = (atomic_uchar **)v19;
  unint64_t v19 = 0;
  if (v12) {
    uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v12);
  }
  if (*(unsigned char *)(a1 + 864))
  {
    int v13 = *(unsigned __int8 *)(a1 + 856);
    long long v14 = a2[1];
    *(_OWORD *)(a1 + 760) = *a2;
    *(_OWORD *)(a1 + 776) = v14;
    long long v15 = a2[5];
    long long v17 = a2[2];
    long long v16 = a2[3];
    *(_OWORD *)(a1 + 82WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a2[4];
    *(_OWORD *)(a1 + 840) = v15;
    *(_OWORD *)(a1 + 792) = v17;
    *(_OWORD *)(a1 + 808) = v16;
    if (!v13) {
      *(unsigned char *)(a1 + 856) = 1;
    }
    uint64_t v18 = *(void *)(a1 + 728);
    *(void *)(a1 + 728) = v10;
    if (v18 && atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF) == 1)
    {
      uint64_t v10 = (unsigned int *)v18;
LABEL_11:
      atomic_store(1u, v10 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(void *)v10 + 8))(v10);
    }
  }
  else if (atomic_fetch_add((atomic_uint *volatile)v10 + 2, 0xFFFFFFFF) == 1)
  {
    goto LABEL_11;
  }
  return result;
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::nativeImageForCurrentTime@<X0>(unsigned __int8 *this@<X0>, void *a2@<X8>)
{
  if (this[680] > 1u && (this = WebKit::MediaPlayerPrivateRemote::videoFrameForCurrentTime(this, &v6), v6))
  {
    {
      uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v5);
    }
    uint64_t v3 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v4 = WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v3);
    WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(*(IPC::Semaphore ***)(v4 + 8), v6, a2);
    this = (unsigned __int8 *)v6;
    uint64_t v6 = 0;
    if (this)
    {
      if (atomic_fetch_add((atomic_uint *volatile)this + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)this + 2);
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)this + 8))(this);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void sub_198DF8310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a10 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MediaPlayerPrivateRemote::colorSpace(WebKit::RemoteMediaPlayerManager **this@<X0>, void *a2@<X8>)
{
  if (*((unsigned __int8 *)this + 680) > 1u)
  {
    uint64_t v5 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 32);
    uint64_t v6 = (uint64_t)this[23];
    uint64_t v24 = 0;
    IPC::Connection::createSyncMessageEncoder(3725, v6, &v24, &v23);
    IPC::Connection::sendSyncMessage(v5, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
    if (v22)
    {
      if (v22 == 1)
      {
        LOBYTE(v16) = (_BYTE)v21;
        int v7 = 1;
        int v18 = 1;
        goto LABEL_13;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      LOBYTE(v19) = 0;
      char v20 = 0;
      IPC::Decoder::operator>><std::tuple<WebCore::DestinationColorSpace>>(v21, &v19);
      if (!v20)
      {
        LOBYTE(v16) = 13;
        int v18 = 1;
        int v7 = v22;
        if (v22 == -1)
        {
LABEL_14:
          uint64_t v10 = v23;
          unsigned int v23 = 0;
          if (v10)
          {
            IPC::Encoder::~Encoder(v10, v8);
            uint64_t v10 = (IPC::Encoder *)WTF::fastFree(v14, v15);
          }
          uint64_t v11 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v10);
          int v12 = v18;
          if (!v18)
          {
            CFTypeRef v13 = v17;
            long long v17 = 0;
            *a2 = v13;
            if (!v13)
            {
              int v12 = 0;
LABEL_22:
              ((void (*)(uint64_t **, uint64_t **))off_1EE9D6EB8[v12])(&v21, &v16);
              return;
            }
            goto LABEL_20;
          }
          CFTypeRef v13 = *v11;
          if (*v11)
          {
            CFRetain(*v11);
            *a2 = v13;
LABEL_20:
            CFRetain(v13);
            CFRelease(v13);
            int v12 = v18;
            goto LABEL_21;
          }
LABEL_27:
          *a2 = 0;
LABEL_21:
          if (v12 == -1) {
            return;
          }
          goto LABEL_22;
        }
LABEL_13:
        ((void (*)(const void **, uint64_t **))off_1EE9D6E70[v7])(&v19, &v21);
        goto LABEL_14;
      }
      int v7 = v22;
      if (!v22)
      {
        uint64_t v9 = v21;
        unsigned int v21 = 0;
        long long v16 = v9;
        long long v17 = v19;
        int v18 = 0;
        goto LABEL_13;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v3 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)this);
  *a2 = v3;
  if (v3)
  {
    CFRetain(v3);
  }
}

void sub_198DF8558(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, CFTypeRef cf, char a14, int a15, __int16 a16, char a17, char a18, int a19, int a20)
{
  if (a20 != -1) {
    ((void (*)(CFTypeRef *, __int16 *))off_1EE9D6E70[a20])(&cf, &a16);
  }
  int v22 = *(IPC::Encoder **)(v20 - 48);
  *(void *)(v20 - 48) = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, a2);
    WTF::fastFree(v23, v24);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WebKit::MediaPlayerPrivateRemote::layerHostingContextIdChanged(uint64_t a1, unsigned int *a2, const WebCore::FloatSize *a3)
{
  uint64_t result = *(atomic_uchar **)(a1 + 128);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 136), &v9);
    if (v9)
    {
      if (*((unsigned char *)a2 + 4))
      {
        WebKit::MediaPlayerPrivateRemote::setLayerHostingContextID(a1, (void *)*a2);
        uint64_t result = (atomic_uchar *)WebCore::MediaPlayer::videoLayerSizeDidChange(v9, a3);
      }
      else
      {
        int v7 = *(const void **)(a1 + 160);
        *(void *)(a1 + 160) = 0;
        if (v7) {
          CFRelease(v7);
        }
        uint64_t result = (atomic_uchar *)(*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
      }
      uint64_t v8 = (atomic_uchar **)v9;
      uint64_t v9 = 0;
      if (v8) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v8);
      }
    }
  }
  return result;
}

void sub_198DF86C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uchar **a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*a10);
  }
  _Unwind_Resume(exception_object);
}

float WebKit::MediaPlayerPrivateRemote::videoLayerSize(WebKit::MediaPlayerPrivateRemote *this)
{
  uint64_t v2 = (atomic_uchar *)*((void *)this + 16);
  if (!v2) {
    return 0.0;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *((void *)this + 17), &v7);
  if (!v7) {
    return 0.0;
  }
  WebCore::MediaPlayer::videoLayerSize(v7);
  float v4 = v3;
  uint64_t v5 = (atomic_uchar **)v7;
  int v7 = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
  }
  return v4;
}

void sub_198DF8760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uchar **a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*a10);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setVideoLayerSizeFenced(uint64_t a1, float *a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 32);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1192;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  CFTypeRef v13 = v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v8, a2);
  IPC::Encoder::addAttachment((uint64_t)v8, a3);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  CFTypeRef v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_198DF8850(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

void sub_198DF898C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  WTF::fastFree(v10, v13);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_198DF9140(_Unwind_Exception *a1)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::createVideoLayerRemote@<X0>(uint64_t a1@<X0>, WebKit::LayerHostingContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WKVideoLayerRemote **a5@<X8>)
{
  uint64_t v10 = objc_alloc_init(WKVideoLayerRemote);
  [(WKVideoLayerRemote *)v10 setName:@"WKVideoLayerRemote"];
  [(WKVideoLayerRemote *)v10 setVideoGravity:a3];
  [(WKVideoLayerRemote *)v10 setMediaPlayerPrivateRemote:a1];
  WebKit::LayerHostingContext::createPlatformLayerForHostingContext(a2, &cf);
  uint64_t v11 = (void *)cf;
  CFTypeRef cf = 0;
  if (v11) {
    CFRelease(v11);
  }
  -[WKVideoLayerRemote setVideoLayerFrame:](v10, "setVideoLayerFrame:", 0.0, 0.0, (double)(int)a4, (double)SHIDWORD(a4));
  objc_msgSend(v11, "setFrame:", 0.0, 0.0, (double)(int)a4, (double)SHIDWORD(a4));
  uint64_t result = [(WKVideoLayerRemote *)v10 addSublayer:v11];
  *a5 = v10;
  return result;
}

void sub_198DF9354(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DF95A0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DF9674(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DF9720(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DF98F4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DF99A0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DF9CA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198DF9D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198DF9E44(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DF9EF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef collectIcons(void *a1, uint64_t a2)
{
  if (a2 && (uint64_t v3 = *(void *)(a2 + 296)) != 0)
  {
    *(_DWORD *)(v3 + 28) += 2;
    WebCore::LinkIconCollector::iconsOfTypes();
    uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v12];
    if (v12)
    {
      uint64_t v6 = v11;
      uint64_t v7 = 80 * v12;
      do
      {
        uint64_t v8 = WTF::URL::operator NSURL *();
        if (v8) {
          [v5 addObject:v8];
        }
        v6 += 80;
        v7 -= 80;
      }
      while (v7);
    }
    *a1 = v5;
    CFTypeRef result = (CFTypeRef)WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        return (CFTypeRef)WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  else
  {
    uint64_t v10 = (const void *)MEMORY[0x1E4F1CBF0];
    *a1 = MEMORY[0x1E4F1CBF0];
    return CFRetain(v10);
  }
  return result;
}

void sub_198DFA0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(_DWORD *)(v11 + 28) == 2)
  {
    if ((*(_WORD *)(v11 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
  }
  else
  {
    *(_DWORD *)(v11 + 28) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_198DFA1D4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198DFA31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198DFA400(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::~RemoteGraphicsContextGLProxyCocoa(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = 216;
  while (1)
  {
    float v4 = *(unsigned int **)((char *)this + v3);
    *(void *)((char *)this + v3) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    v3 -= 8;
    if (v3 == 192)
    {
      WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(this);
    }
  }
}

{
  _DWORD *v2;
  uint64_t v3;
  unsigned int *v4;

  uint64_t v2 = (_DWORD *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = 216;
  while (1)
  {
    float v4 = *(unsigned int **)((char *)this + v3);
    *(void *)((char *)this + v3) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    v3 -= 8;
    if (v3 == 192) {
      WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(this);
    }
  }
}

double sub_198DFA5DC(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (atomic_load((unsigned int *)(v14 + 16)))
  {
    *(void *)(v14 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    double result = 0.0;
    *(_OWORD *)(v14 + 192) = 0u;
    *(_OWORD *)(v14 + 208) = 0u;
    *(_OWORD *)(v14 + 160) = 0u;
    *(_OWORD *)(v14 + 176) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v14, a2);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 16))();
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isCurrent(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 11) + 24))();
}

uint64_t WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::layerContentsDisplayDelegate@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 224);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

void WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::prepareForDisplay(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *this)
{
  if (!*((void *)this + 13)) {
    return;
  }
  uint64_t v57 = 0;
  uint64_t v2 = (WTF::ApproximateTime *)semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)&v57 + 1, 0, 0);
  uint64_t v3 = (uint64_t *)*((void *)this + 13);
  float v4 = (IPC::Encoder *)*((void *)this + 10);
  double v5 = *((double *)v3 + 15);
  double v6 = INFINITY;
  if (fabs(v5) != INFINITY)
  {
    WTF::ApproximateTime::now(v2);
    double v6 = v5 + v7;
  }
  if ((IPC::Encoder *)v3[7] != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v3 + 8), &v59, v6);
    if (!v61) {
      goto LABEL_88;
    }
    unint64_t v36 = v59;
    unint64_t v37 = v60;
    unint64_t v38 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v39 = v38 - v59;
    if (v38 < v59)
    {
      unint64_t v41 = 0;
      unint64_t v40 = v60;
    }
    else
    {
      unint64_t v40 = 0;
      if (v39 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v41 = 0;
      }
      else
      {
        unint64_t v41 = 0;
        if (v39 + 2 <= v60)
        {
          *(_WORD *)(v59 + v39) = 2871;
          unint64_t v40 = v37;
          unint64_t v41 = v39 + 2;
        }
      }
    }
    char v42 = (void *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v42 >= v36 + v41)
    {
      unint64_t v41 = (unint64_t)v42 - v36 + 8;
      if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7 || v41 > v40) {
        goto LABEL_103;
      }
      void *v42 = v4;
    }
    if (v40)
    {
      uint64_t v44 = v3[9];
      unint64_t v45 = (v3[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v46 = v3[8];
      if (v45 + 16 >= v46) {
        unint64_t v45 = 0;
      }
      if (v41 <= 0x10) {
        unint64_t v41 = 16;
      }
      unint64_t v47 = v45 + v41;
      if (v46 <= v47) {
        unint64_t v47 = 0;
      }
      v3[10] = v47;
      unint64_t v48 = atomic_exchange((atomic_ullong *volatile)(*(void *)(v44 + 16) + 128), v47);
      int v49 = *((_DWORD *)v3 + 29);
      if (v48 == 0x80000000 || v49 != 0)
      {
        unsigned int v52 = v49 + 1;
        *((_DWORD *)v3 + 29) = v52;
        if (v52 >= *((_DWORD *)v3 + 28))
        {
          if (*((unsigned char *)v3 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v3 + 23));
          }
          *((_DWORD *)v3 + 29) = 0;
        }
      }
      v3[7] = (uint64_t)v4;
      goto LABEL_5;
    }
LABEL_103:
    char v51 = 17;
    goto LABEL_89;
  }
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v3 + 8), &v59, v6);
  if (!v61)
  {
LABEL_88:
    char v51 = 15;
LABEL_89:
    LOBYTE(v55) = v51;
    int v56 = 1;
    goto LABEL_90;
  }
  unint64_t v8 = (v59 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v9 = v8 - v59;
  if (v8 < v59) {
    goto LABEL_108;
  }
  unint64_t v10 = 0;
  if (v9 <= 0xFFFFFFFFFFFFFFFDLL && v9 + 2 <= v60)
  {
    *(_WORD *)(v59 + v9) = 2870;
    unint64_t v10 = v9 + 2;
  }
  while (1)
  {
    unint64_t v11 = (v3[10] + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = v3[8];
    if (v11 + 16 >= v12) {
      unint64_t v11 = 0;
    }
    if (v10 <= 0x10) {
      unint64_t v10 = 16;
    }
    unint64_t v13 = v11 + v10;
    if (v12 <= v13) {
      unint64_t v13 = 0;
    }
    v3[10] = v13;
    atomic_exchange((atomic_ullong *volatile)(*(void *)(v3[9] + 16) + 128), v13);
    *((_DWORD *)v3 + 29) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, (uint64_t **)v3 + 1);
    uint64_t v3 = v58;
    uint64_t v67 = 0;
    IPC::Connection::createSyncMessageEncoder(3702, (uint64_t)v4, &v67, &v66);
    float v4 = v66;
    IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v66, (IPC::Semaphore *)&v57);
    IPC::Connection::sendSyncMessage((uint64_t)v3, v67, (uint64_t *)&v66, 0, (uint64_t)&v64, v6);
    if (v65)
    {
      if (v65 == 1)
      {
        LOBYTE(v55) = (_BYTE)v64;
        int v14 = 1;
        int v56 = 1;
        goto LABEL_40;
      }
      goto LABEL_107;
    }
    v62[0] = 0;
    unsigned __int8 v63 = 0;
    float v4 = v64;
    IPC::Decoder::takeLastAttachment(v64, &v70);
    if (BYTE4(v70))
    {
      WTF::MachSendRight::MachSendRight();
      unsigned __int8 v69 = 1;
      if (!BYTE4(v70) || (WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v70), v69))
      {
        int v16 = 1;
        goto LABEL_23;
      }
    }
    else
    {
      v68[0] = 0;
      unsigned __int8 v69 = 0;
    }
    long long v15 = *(void **)v4;
    uint64_t v53 = *((void *)v4 + 1);
    *(void *)float v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v54 = *((void *)v4 + 3);
    if (v54 && v53)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v54 + 16))(v54, v15);
      int v16 = v69;
    }
    else
    {
      int v16 = 0;
    }
LABEL_23:
    if (v63 == v16)
    {
      if (!v63) {
        goto LABEL_38;
      }
      WTF::MachSendRight::operator=();
    }
    else
    {
      if (v63)
      {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v62);
        char v17 = 0;
      }
      else
      {
        WTF::MachSendRight::MachSendRight();
        char v17 = 1;
      }
      unsigned __int8 v63 = v17;
    }
    if (v69) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v68);
    }
    if (!v63)
    {
LABEL_38:
      LOBYTE(v55) = 13;
      int v56 = 1;
      goto LABEL_39;
    }
    if (!v65) {
      break;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
LABEL_108:
    unint64_t v10 = 0;
  }
  int v18 = v64;
  uint64_t v64 = 0;
  int v70 = v18;
  WTF::MachSendRight::MachSendRight();
  unint64_t v19 = v70;
  int v70 = 0;
  uint64_t v55 = v19;
  WTF::MachSendRight::MachSendRight();
  int v56 = 0;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v71);
  uint64_t v20 = v70;
  int v70 = 0;
  if (v20)
  {
    IPC::Decoder::~Decoder(v20);
    WTF::fastFree(v34, v35);
  }
  if (v63) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v62);
  }
LABEL_39:
  int v14 = v65;
  if (v65 == -1) {
    goto LABEL_41;
  }
LABEL_40:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9D6E70[v14])(&v70, &v64);
LABEL_41:
  unsigned int v21 = v66;
  uint64_t v66 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v15);
    WTF::fastFree(v31, v32);
  }
  int v22 = (atomic_uchar **)v58;
  uint64_t v58 = 0;
  if (v22) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v22);
  }
  if (v56) {
LABEL_90:
  }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  WTF::MachSendRight::MachSendRight();
  if (!v70) {
    goto LABEL_63;
  }
  uint64_t v23 = WTF::fastMalloc((WTF *)0x18);
  WebCore::PlatformCALayerDelegatedContentsFence::PlatformCALayerDelegatedContentsFence((WebCore::PlatformCALayerDelegatedContentsFence *)v23);
  *(void *)uint64_t v23 = &unk_1EE9D6E90;
  *(_WORD *)(v23 + 12) = 0;
  WTF::MachSendRight::MachSendRight();
  int v24 = HIDWORD(v57);
  HIDWORD(v57) = 0;
  *(_DWORD *)(v23 + 20) = v24;
  atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 1u);
  unint64_t v25 = *((void *)this + 24);
  *((void *)this + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v25 + 1;
  uint64_t v26 = (char *)this + 8 * (v25 % 3);
  uint64_t v27 = (unsigned int *)*((void *)v26 + 25);
  *((void *)v26 + 25) = v23;
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v27 + 2);
    (*(void (**)(unsigned int *))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *((void *)this + 28);
  if (v70)
  {
    int v29 = *(_DWORD *)(v28 + 12);
    if (!v29 || v70 != v29)
    {
      uint64_t v30 = *(unsigned int **)(v28 + 16);
      *(void *)(v28 + 16) = v23;
      if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(void *)v30 + 8))(v30);
      }
      WTF::MachSendRight::operator=();
      goto LABEL_63;
    }
  }
  else
  {
    int v33 = *(unsigned int **)(v28 + 16);
    *(void *)(v28 + 16) = 0;
    if (v33 && atomic_fetch_add((atomic_uint *volatile)v33 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(void *)v33 + 8))(v33);
    }
    LODWORD(v59) = 0;
    WTF::MachSendRight::operator=();
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v59);
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v23 + 8));
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
LABEL_63:
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v70);
  if (v56 != -1) {
    ((void (*)(unint64_t *, IPC::Decoder **))off_1EE9D6EA8[v56])(&v59, &v55);
  }
  IPC::Semaphore::destroy((IPC::Semaphore *)&v57);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v57);
}

void sub_198DFAE24(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, IPC::Decoder *a9, uint64_t a10, int a11, int a12, char a13, atomic_uchar **a14, char a15, uint64_t a16, uint64_t a17, char a18, __int16 a19, char a20,char a21,__int16 a22,char a23,char a24,int a25,int a26,IPC::Encoder *a27)
{
  if (*(unsigned char *)(v27 - 68)) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v27 - 72));
  }
  if (a20) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a18);
  }
  if (a26 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9D6E70[a26])(v27 - 64, &a23);
  }
  int v29 = a27;
  a27 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, a2);
    WTF::fastFree(v31, v32);
  }
  uint64_t v30 = a14;
  a14 = 0;
  if (v30) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v30);
  }
  IPC::Semaphore::destroy((IPC::Semaphore *)&a13);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::forceContextLost(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)this + 200;
  do
  {
    uint64_t v4 = *(void *)&v3[v2];
    if (v4)
    {
      char v5 = 0;
      atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 12), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
      if (v5) {
        MEMORY[0x19972E8D0](v4 + 12);
      }
      if (!*(unsigned char *)(v4 + 13))
      {
        *(unsigned char *)(v4 + 13) = 1;
        MEMORY[0x1997420B0](*(unsigned int *)(v4 + 20));
      }
      int v6 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 12), (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 12));
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v4 + 8));
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    v2 += 8;
  }
  while (v2 != 24);

  return MEMORY[0x1F416EDF0]((char *)this + 24);
}

void sub_198DFB0DC(_Unwind_Exception *exception_object)
{
  if (atomic_fetch_add((atomic_uint *volatile)v1 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v1 + 2);
    (*(void (**)(unsigned int *))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::asCV(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::layerContentsDisplayDelegate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 200);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return result;
}

void non-virtual thunk to'WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::~RemoteGraphicsContextGLProxyCocoa(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 192;
  while (1)
  {
    char v5 = *(unsigned int **)(v4 + v3);
    *(void *)(v4 + v3) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
    v3 -= 8;
    if (v3 == -24)
    {
      WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24));
    }
  }
}

{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  uint64_t v2 = (WebKit::RemoteGraphicsContextGLProxy *)(a1 - 24);
  uint64_t v3 = *(_DWORD **)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = 0;
  char v5 = a1 + 192;
  while (1)
  {
    int v6 = *(unsigned int **)(v5 + v4);
    *(void *)(v5 + vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
    }
    v4 -= 8;
    if (v4 == -24) {
      WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(v2);
    }
  }
}

{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t vars8;

  uint64_t v2 = *(_DWORD **)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 144;
  while (1)
  {
    char v5 = *(unsigned int **)(v4 + v3);
    *(void *)(v4 + v3) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
    v3 -= 8;
    if (v3 == -24)
    {
      WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 72));
    }
  }
}

{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  uint64_t v2 = (WebKit::RemoteGraphicsContextGLProxy *)(a1 - 72);
  uint64_t v3 = *(_DWORD **)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  uint64_t v4 = 0;
  char v5 = a1 + 144;
  while (1)
  {
    int v6 = *(unsigned int **)(v5 + v4);
    *(void *)(v5 + vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
    }
    v4 -= 8;
    if (v4 == -24) {
      WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(v2);
    }
  }
}

double sub_198DFB310(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (atomic_load((unsigned int *)(v17 - 8)))
  {
    *(void *)(v16 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    double result = 0.0;
    *(_OWORD *)(v16 + 192) = 0u;
    *(_OWORD *)(v16 + 208) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v16, a2);
  }
  return result;
}

void non-virtual thunk to'WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::prepareForDisplay(uint64_t a1)
{
}

uint64_t non-virtual thunk to'WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::asCV()
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::forceContextLost(uint64_t a1)
{
}

double sub_198DFB558(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (atomic_load((unsigned int *)(v17 - 56)))
  {
    *(void *)(v16 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    double result = 0.0;
    *(_OWORD *)(v16 + 192) = 0u;
    *(_OWORD *)(v16 + 208) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v16, a2);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isCurrent(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 24))();
}

void WebKit::anonymous namespace'::DisplayBufferDisplayDelegate::~DisplayBufferDisplayDelegate(WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  WTF::MachSendRight::~MachSendRight((WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *)((char *)this + 12));

  WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v2 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  WTF::MachSendRight::~MachSendRight((WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *)((char *)this + 12));
  WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(this);

  WTF::fastFree(v3, v4);
}

uint64_t WebKit::anonymous namespace'::DisplayBufferDisplayDelegate::prepareToDelegateDisplay(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 240))(a2, *(unsigned __int8 *)(a1 + 24));
}

void WebKit::anonymous namespace'::DisplayBufferDisplayDelegate::display(WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *this, WebCore::PlatformCALayer *a2)
{
  if (*((_DWORD *)this + 3))
  {
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v7, (WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *)((char *)this + 12));
    uint64_t v4 = *((void *)this + 2);
    if (v4) {
      atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
    }
    unint64_t v8 = (unsigned int *)v4;
    char v9 = 0;
    char v10 = 0;
    (*(void (**)(WebCore::PlatformCALayer *, uint64_t *))(*(void *)a2 + 512))(a2, &v7);
    char v5 = v8;
    unint64_t v8 = 0;
    if (v5)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
      }
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v7);
  }
  else
  {
    int v6 = *(void (**)(WebCore::PlatformCALayer *))(*(void *)a2 + 504);
    v6(a2);
  }
}

void sub_198DFB88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unint64_t v11 = a10;
  a10 = 0;
  if (v11)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::anonymous namespace'::DisplayBufferDisplayDelegate::orientation(WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *this)
{
  return 1;
}

void WebKit::anonymous namespace'::DisplayBufferFence::~DisplayBufferFence(WebKit::_anonymous_namespace_::DisplayBufferFence *this)
{
  uint64_t v2 = (WebKit::_anonymous_namespace_::DisplayBufferFence *)((char *)this + 16);
  IPC::Semaphore::destroy((WebKit::_anonymous_namespace_::DisplayBufferFence *)((char *)this + 16));
  WTF::MachSendRight::~MachSendRight(v2);

  WebCore::PlatformCALayerDelegatedContentsFence::~PlatformCALayerDelegatedContentsFence(this);
}

{
  WTF::MachSendRight *v2;
  WTF *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v2 = (WebKit::_anonymous_namespace_::DisplayBufferFence *)((char *)this + 16);
  IPC::Semaphore::destroy((WebKit::_anonymous_namespace_::DisplayBufferFence *)((char *)this + 16));
  WTF::MachSendRight::~MachSendRight(v2);
  WebCore::PlatformCALayerDelegatedContentsFence::~PlatformCALayerDelegatedContentsFence(this);

  WTF::fastFree(v3, v4);
}

BOOL WebKit::anonymous namespace'::DisplayBufferFence::waitFor(atomic_uchar *a1, double a2)
{
  uint64_t v3 = a1;
  char v4 = 0;
  char v5 = a1 + 12;
  atomic_compare_exchange_strong_explicit(a1 + 12, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 12);
  }
  int v6 = 1;
  BOOL v7 = 1;
  if (!v3[13])
  {
    double v8 = INFINITY;
    if (fabs(a2) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
      double v8 = a2 + v9;
    }
    BOOL v7 = IPC::Semaphore::waitFor((semaphore_t *)v3 + 4, v8);
    v3[13] = v7;
  }
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return v7;
}

void sub_198DFBA38(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17PrepareForDisplayEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a2 + 1));

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  int v3 = *(const void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

void sub_198DFBBD0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    uint64_t v5 = *(void *)a1 + 64;
    do
    {
      WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      int v6 = *(WTF::StringImpl **)(v5 - 16);
      *(void *)(v5 - 16) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      BOOL v7 = *(WTF::StringImpl **)(v5 - 64);
      *(void *)(v5 - 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      v5 += 80;
      v4 -= 80;
    }
    while (v4);
  }
  double v8 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

uint64_t *IPC::Decoder::operator>><std::tuple<WebCore::DestinationColorSpace>>(uint64_t *a1, void *a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::DestinationColorSpace>>(a1, a2, (uint64_t)&cf);
  std::__optional_storage_base<WebCore::DestinationColorSpace,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::DestinationColorSpace,false>>((uint64_t)a2, (uint64_t *)&cf);
  if (v7)
  {
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  return a1;
}

void sub_198DFBCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v5 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v6 = v9 == 0;
  }
  else
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9D6F00;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + 16) = v5;
  *(unsigned char *)(v8 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v6;
  char v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

void sub_198DFBE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebKit::MediaPlayerPrivateRemote *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  double result = *(WebKit::MediaPlayerPrivateRemote **)(a1 + 16);
  if (result)
  {
    WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote(result);
    double result = (WebKit::MediaPlayerPrivateRemote *)WTF::fastFree(v5, v6);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    return (WebKit::MediaPlayerPrivateRemote *)WTF::fastFree(v4, a2);
  }
  return result;
}

WTF *WebKit::setOverrideLanguages(_DWORD *a1)
{
  {
    if (dword_1E93CFBD4) {
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)WebKit::overrideLanguagesStorage(void)::storage, (WTF::StringImpl *)(WebKit::overrideLanguagesStorage(void)::storage + 8 * dword_1E93CFBD4));
    }
  }
  else
  {
    WebKit::overrideLanguagesStorage(void)::storage = 0;
    unk_1E93CFBD0 = 0;
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)&WebKit::overrideLanguagesStorage(void)::storage, a1);
}

void WebKit::PageLoadState::~PageLoadState(WebKit::PageLoadState *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WebKit::PageLoadState::Data::~Data((WebKit::PageLoadState *)((char *)this + 192), a2);
  WebKit::PageLoadState::Data::~Data((WebKit::PageLoadState *)((char *)this + 24), v4);
  BOOL v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  if (*(void *)this) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(unsigned int ***)this, v5);
  }
}

void WebKit::PageLoadState::Transaction::~Transaction(WebKit::PageLoadState::Transaction *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (WebKit::PageLoadState *)*((void *)this + 1);
  if (v4)
  {
    int v5 = *((_DWORD *)v4 + 93) - 1;
    *((_DWORD *)v4 + 93) = v5;
    if (!v5) {
      WebKit::PageLoadState::commitChanges(v4, a2, a3);
    }
  }
  uint64_t v6 = *(void *)this;
  *(void *)this = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void WebKit::PageLoadState::commitChanges(WebKit::PageLoadState *this, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!*((unsigned char *)this + 368)) {
    return;
  }
  *((unsigned char *)this + 368) = 0;
  int v40 = *((unsigned __int8 *)this + 328);
  int v41 = *((unsigned __int8 *)this + 160);
  int v38 = *((unsigned __int8 *)this + 329);
  int v39 = *((unsigned __int8 *)this + 161);
  if (WTF::equal(*((WTF **)this + 13), *((const WTF::StringImpl **)this + 34), a3)) {
    int v5 = WTF::equal(*((WTF **)this + 14), *((const WTF::StringImpl **)this + 35), v4) ^ 1;
  }
  else {
    int v5 = 1;
  }
  if (*((void *)this + 5))
  {
    unsigned int v6 = 1;
  }
  else
  {
    unsigned int v7 = *((unsigned __int8 *)this + 24);
    if (v7 > 2) {
      unsigned int v6 = 0;
    }
    else {
      unsigned int v6 = (3u >> (v7 & 7)) & 1;
    }
  }
  int v33 = v5;
  unsigned int v34 = v6;
  if (*((void *)this + 26))
  {
    unsigned int v8 = 1;
LABEL_14:
    unsigned int v30 = v8;
    goto LABEL_16;
  }
  unsigned int v9 = *((unsigned __int8 *)this + 192);
  if (v9 <= 2)
  {
    unsigned int v8 = (3u >> (v9 & 7)) & 1;
    goto LABEL_14;
  }
  unsigned int v30 = 0;
LABEL_16:
  WebKit::PageLoadState::activeURL((unsigned __int8 *)this + 24, &v43);
  WebKit::PageLoadState::activeURL((unsigned __int8 *)this + 192, &v42);
  unint64_t v11 = v42;
  char v10 = v43;
  char v14 = WTF::equal(v43, v42, v12);
  if (!v11) {
    goto LABEL_19;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
LABEL_19:
    if (!v10) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v11, v13);
  if (!v10) {
    goto LABEL_25;
  }
LABEL_20:
  if (*(_DWORD *)v10 == 2) {
    WTF::StringImpl::destroy(v10, v13);
  }
  else {
    *(_DWORD *)v10 -= 2;
  }
LABEL_25:
  int hasOnlySecureContent = WebKit::PageLoadState::hasOnlySecureContent((WebKit::PageLoadState *)((char *)this + 24), (const Data *)v13);
  int v17 = WebKit::PageLoadState::hasOnlySecureContent((WebKit::PageLoadState *)((char *)this + 192), v16);
  int v36 = *((unsigned __int8 *)this + 194);
  int v37 = *((unsigned __int8 *)this + 26);
  int v18 = *((unsigned __int8 *)this + 27);
  int v19 = *((unsigned __int8 *)this + 195);
  if (*((void *)this + 5)) {
    double v20 = 0.1;
  }
  else {
    double v20 = *((double *)this + 21);
  }
  if (*((void *)this + 26)) {
    double v21 = 0.1;
  }
  else {
    double v21 = *((double *)this + 42);
  }
  int v22 = *((unsigned __int8 *)this + 176);
  int v23 = *((unsigned __int8 *)this + 344);
  uint64_t v31 = *((void *)this + 44);
  uint64_t v32 = *((void *)this + 23);
  if (v41 != v40) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeCanGoBack, 0);
  }
  if (v39 != v38) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeCanGoForward, 0);
  }
  int v35 = v34 ^ v30;
  if (v33) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeTitle, 0);
  }
  if (v35) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeIsLoading, 0);
  }
  int v24 = hasOnlySecureContent ^ v17;
  if ((v14 & 1) == 0) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeActiveURL, 0);
  }
  if (v24) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeHasOnlySecureContent, 0);
  }
  if (v37 != v36) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeNegotiatedLegacyTLS, 0);
  }
  if (v18 != v19) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeWasPrivateRelayed, 0);
  }
  if (v20 != v21) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeEstimatedProgress, 0);
  }
  if (v22 != v23) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeNetworkRequestsInProgress, 0);
  }
  if (v32 == v31)
  {
    WebKit::PageLoadState::Data::operator=((uint64_t)this + 24, (uint64_t)this + 192);
    uint64_t v28 = *(void *)(*((void *)this + 2) + 8);
    if (v28) {
      uint64_t v29 = v28 - 16;
    }
    else {
      uint64_t v29 = 0;
    }
    CFRetain(*(CFTypeRef *)(v29 + 8));
    WebKit::WebPageProxy::activityStateDidChange(v29, 128, 0, 0);
    int v27 = v33;
    if (v28) {
      CFRelease(*(CFTypeRef *)(v28 - 8));
    }
  }
  else
  {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::willChangeCertificateInfo, 0);
    WebKit::PageLoadState::Data::operator=((uint64_t)this + 24, (uint64_t)this + 192);
    uint64_t v25 = *(void *)(*((void *)this + 2) + 8);
    if (v25) {
      uint64_t v26 = v25 - 16;
    }
    else {
      uint64_t v26 = 0;
    }
    CFRetain(*(CFTypeRef *)(v26 + 8));
    WebKit::WebPageProxy::activityStateDidChange(v26, 128, 0, 0);
    if (v25) {
      CFRelease(*(CFTypeRef *)(v25 - 8));
    }
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeCertificateInfo, 0);
    int v27 = v33;
  }
  if (v22 != v23) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeNetworkRequestsInProgress, 0);
  }
  if (v20 != v21) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeEstimatedProgress, 0);
  }
  if (v24) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeHasOnlySecureContent, 0);
  }
  if (v37 != v36) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeNegotiatedLegacyTLS, 0);
  }
  if (v18 != v19) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWasPrivateRelayed, 0);
  }
  if ((v14 & 1) == 0) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeActiveURL, 0);
  }
  if (v35) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeIsLoading, 0);
  }
  if (v27) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeTitle, 0);
  }
  if (v39 != v38) {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeCanGoForward, 0);
  }
  if (v41 != v40)
  {
    WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeCanGoBack, 0);
  }
}

void WebKit::PageLoadState::callObserverCallback(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v7 = v6 - 16;
  if (!v6) {
    uint64_t v7 = 0;
  }
  CFRetain(*(CFTypeRef *)(v7 + 8));
  uint64_t v9 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_24;
  }
  int v10 = *(_DWORD *)(v9 - 4);
  if (!v10) {
    goto LABEL_23;
  }
  int v11 = 0;
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v9 + 8 * v12);
    if ((unint64_t)(v14 + 1) >= 2 && !*(void *)(v14 + 8))
    {
      *(void *)(v9 + 8 * v12) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v14);
        WTF::fastFree((WTF *)v14, v8);
      }
      *(void *)(v9 + 8 * v12) = -1;
      ++v11;
    }
    --v12;
  }
  while (v13);
  uint64_t v9 = *(void *)a1;
  if (v11)
  {
    *(_DWORD *)(v9 - 16) += v11;
    uint64_t v15 = *(void *)a1;
    if (*(void *)a1) {
      int v16 = *(_DWORD *)(v15 - 12);
    }
    else {
      int v16 = 0;
    }
    *(_DWORD *)(v15 - 12) = v16 - v11;
    uint64_t v9 = *(void *)a1;
  }
  if (!v9)
  {
LABEL_24:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_25;
  }
  unsigned int v17 = *(_DWORD *)(v9 - 4);
  if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
  {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
    uint64_t v9 = *(void *)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (v9) {
      goto LABEL_27;
    }
LABEL_25:
    int v19 = 0;
    *(_DWORD *)(a1 + 12) = 0;
    goto LABEL_34;
  }
LABEL_23:
  *(_DWORD *)(a1 + 8) = 0;
LABEL_27:
  unsigned int v20 = *(_DWORD *)(v9 - 12);
  if (v20 >= 0x7FFFFFFF) {
    int v21 = -2;
  }
  else {
    int v21 = 2 * v20;
  }
  *(_DWORD *)(a1 + 12) = v21;
  uint64_t v22 = *(unsigned int *)(v9 - 12);
  if (v22)
  {
    if (v22 >> 29)
    {
      __break(0xC471u);
      return;
    }
    int v19 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
  }
  else
  {
    int v19 = 0;
  }
LABEL_34:
  uint64_t v49 = a1;
  uint64_t v50 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)a1);
  char v51 = v23;
  uint64_t v24 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
    uint64_t v26 = v24 + 8 * v25;
    uint64_t v52 = v26;
    uint64_t v53 = v26;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v49);
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v49);
    uint64_t v26 = 0;
    uint64_t v25 = 0;
  }
  uint64_t v44 = a1;
  unint64_t v45 = (void *)v26;
  uint64_t v46 = v26;
  uint64_t v47 = v26;
  uint64_t v48 = v24 + 8 * v25;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v44);
  uint64_t v28 = v50;
  if (v50 != v45)
  {
    unsigned int v29 = 0;
    int v30 = 1;
    do
    {
      unsigned int v31 = v30;
      uint64_t v32 = *(void *)(*v28 + 8);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v32 + 8), v32);
      int v33 = *(atomic_uint **)(v32 + 8);
      if (v33)
      {
        atomic_fetch_add(v33, 1u);
        uint64_t v28 = v50;
      }
      *((void *)v19 + v29) = v33;
      unsigned int v34 = v28 + 1;
      uint64_t v50 = v28 + 1;
      if (v28 + 1 != v51)
      {
        while ((unint64_t)(*v34 + 1) <= 1)
        {
          if (++v34 == v51)
          {
            unsigned int v34 = v51;
            break;
          }
        }
        uint64_t v50 = v34;
      }
      ++v29;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v49);
      ++*(_DWORD *)(v49 + 8);
      uint64_t v28 = v50;
      int v30 = v31 + 1;
    }
    while (v50 != v45);
    if (v29)
    {
      uint64_t v35 = 8 * v31;
      int v36 = v19;
      do
      {
        if (*(void *)v36)
        {
          uint64_t v37 = *(void *)(*(void *)v36 + 8);
          if (v37)
          {
            uint64_t v38 = *(void *)(v37 + 8);
            ++*(_DWORD *)(a1 + 8);
            if (v38)
            {
              if (*(void *)(v38 + 8))
              {
                uint64_t v49 = v38;
                if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v49))
                {
                  uint64_t v39 = *(void *)v36;
                  if (*(void *)v36) {
                    uint64_t v39 = *(void *)(v39 + 8);
                  }
                  int v40 = (void *)(v39 + (a3 >> 1));
                  if (a3) {
                    (*(void (**)(void *))(*v40 + a2))(v40);
                  }
                  else {
                    a2(v40);
                  }
                }
              }
            }
          }
        }
        int v36 = (WTF *)((char *)v36 + 8);
        v35 -= 8;
      }
      while (v35);
      uint64_t v41 = 8 * v31;
      char v42 = (unsigned int **)v19;
      do
      {
        unsigned int v43 = *v42;
        const WTF::StringImpl *v42 = 0;
        if (v43 && atomic_fetch_add((atomic_uint *volatile)v43, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v43);
          WTF::fastFree((WTF *)v43, v27);
        }
        ++v42;
        v41 -= 8;
      }
      while (v41);
    }
  }
  if (v19) {
    WTF::fastFree(v19, v27);
  }
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeCanGoBack(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeCanGoForward(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeTitle(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeIsLoading(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeActiveURL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeHasOnlySecureContent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeNegotiatedLegacyTLS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeWasPrivateRelayed(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeEstimatedProgress(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeNetworkRequestsInProgress(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeCertificateInfo(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t WebKit::PageLoadState::Data::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  WTF::String::operator=((uint64_t *)(a1 + 16), (WTF::StringImpl **)(a2 + 16));
  WTF::String::operator=((uint64_t *)(a1 + 24), (WTF::StringImpl **)(a2 + 24));
  WTF::String::operator=((uint64_t *)(a1 + 32), (WTF::StringImpl **)(a2 + 32));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 40, a2 + 40);
  WTF::String::operator=((uint64_t *)(a1 + 72), (WTF::StringImpl **)(a2 + 72));
  WTF::String::operator=((uint64_t *)(a1 + 80), (WTF::StringImpl **)(a2 + 80));
  WTF::String::operator=((uint64_t *)(a1 + 88), (WTF::StringImpl **)(a2 + 88));
  WTF::String::operator=((uint64_t *)(a1 + 96), (WTF::StringImpl **)(a2 + 96));
  long long v4 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v4;
  char v5 = *(unsigned char *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = v5;
  uint64_t v6 = *(const void **)(a2 + 160);
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 160);
  *(void *)(a1 + 160) = v6;
  if (v7) {
    CFRelease(v7);
  }
  return a1;
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeCertificateInfo(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeNetworkRequestsInProgress(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeEstimatedProgress(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeHasOnlySecureContent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeNegotiatedLegacyTLS(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeWasPrivateRelayed(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeActiveURL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeIsLoading(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeTitle(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeCanGoForward(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeCanGoBack(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

WTF::StringImpl *WebKit::PageLoadState::reset(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_WORD *)(a1 + 192) = 2;
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 208);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  long long v4 = *(WTF::StringImpl **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  char v5 = *(WTF::StringImpl **)(a1 + 224);
  *(void *)(a1 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  long long v12 = 0u;
  long long v13 = 0u;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 232, (uint64_t)&v12);
  if (DWORD2(v13) != -1) {
    ((void (*)(char *, long long *))off_1EE9D7030[DWORD2(v13)])(&v11, &v12);
  }
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 264);
  *(void *)(a1 + 26WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unsigned int v8 = *(WTF::StringImpl **)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(WTF::StringImpl **)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v6);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  double result = *(WTF::StringImpl **)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 34WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  return result;
}

WTF::StringImpl *WebKit::PageLoadState::didExplicitOpen(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::String::operator=((uint64_t *)(a1 + 224), a3);
  double result = *(WTF::StringImpl **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebKit::PageLoadState::didStartProvisionalLoad(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  *(unsigned char *)(a1 + 192) = 0;
  WTF::String::operator=((uint64_t *)(a1 + 216), a3);
  WTF::String::operator=((uint64_t *)(a1 + 360), (WTF::StringImpl **)(a1 + 264));

  return WTF::String::operator=((uint64_t *)(a1 + 264), a4);
}

uint64_t *WebKit::PageLoadState::didFailProvisionalLoad(uint64_t a1, WTF::StringImpl *a2)
{
  *(unsigned char *)(a1 + 192) = 2;
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::String::operator=((uint64_t *)(a1 + 264), (WTF::StringImpl **)(a1 + 360));
}

WTF::StringImpl *WebKit::PageLoadState::didCommitLoad(uint64_t a1, uint64_t a2, const void **a3, char a4, char a5, char a6, uint64_t a7)
{
  *(unsigned char *)(a1 + 192) = 1;
  *(unsigned char *)(a1 + 193) = a4;
  char v11 = *a3;
  if (*a3)
  {
    int v19 = *a3;
    CFRetain(v11);
    char v11 = v19;
  }
  long long v12 = *(void **)(a1 + 352);
  *(void *)(a1 + 352) = v11;
  if (v12) {
    CFRelease(v12);
  }
  long long v13 = (WTF::StringImpl **)(a1 + 216);
  if (!*(void *)(a1 + 216)) {
    long long v13 = (WTF::StringImpl **)WTF::aboutBlankURL((WTF *)v12);
  }
  WTF::String::operator=((uint64_t *)(a1 + 224), v13);
  uint64_t v15 = *(WTF::StringImpl **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  *(unsigned char *)(a1 + 19WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a5;
  *(unsigned char *)(a1 + 195) = a6;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 232, a7);
  unsigned int v17 = *(WTF::StringImpl **)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  double result = *(WTF::StringImpl **)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::PageLoadState::didSwapWebProcesses(WebKit::PageLoadState *this)
{
}

uint64_t WebKit::PageLoadStateObserverBase::didSwapWebProcesses(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

void WebKit::PageLoadState::willChangeProcessIsResponsive(WebKit::PageLoadState *this)
{
}

uint64_t WebKit::PageLoadStateObserverBase::willChangeWebProcessIsResponsive(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

void WebKit::PageLoadState::didChangeProcessIsResponsive(WebKit::PageLoadState *this)
{
}

uint64_t WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

unsigned int *WebKit::ProcessThrottler::prepareToSuspendTimeoutTimerFired(WebKit::ProcessThrottler *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 136);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    int v6 = 134218240;
    uint64_t v7 = this;
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::prepareToSuspendTimeoutTimerFired: Updating process assertion to allow suspension", (uint8_t *)&v6, 0x12u);
  }
  if (!*((unsigned char *)this + 176))
  {
    __break(0xC471u);
    JUMPOUT(0x198DFD3D4);
  }
  uint64_t v4 = WebKit::ProcessThrottler::expectedThrottleState(this);
  return WebKit::ProcessThrottler::setThrottleState((unsigned int *)this, v4);
}

unsigned int *WebKit::ProcessThrottler::dropNearSuspendedAssertionTimerFired(WebKit::ProcessThrottler *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 136);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    int v6 = 134218240;
    uint64_t v7 = this;
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::dropNearSuspendedAssertionTimerFired: Removing near-suspended process assertion", (uint8_t *)&v6, 0x12u);
  }
  uint64_t v4 = *((void *)this + 3);
  if (!v4 || *(unsigned char *)(v4 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x198DFD4CCLL);
  }
  return WebKit::ProcessThrottler::clearAssertion((unsigned int *)this);
}

void WebKit::ProcessThrottler::prepareToDropLastAssertionTimeoutTimerFired(WebKit::ProcessThrottler *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 136);
    if (v4) {
      LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_DWORD *)(v4 + 108);
    }
    int v6 = 134218240;
    uint64_t v7 = this;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::prepareToDropLastAssertionTimeoutTimerFired:", (uint8_t *)&v6, 0x12u);
  }
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), v3);
  }
}

void WebKit::ProcessThrottler::~ProcessThrottler(WebKit::ProcessThrottler *this)
{
  WebKit::ProcessThrottler::invalidateAllActivities(this);
  uint64_t v3 = (unsigned int **)*((void *)this + 19);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, v2);
  }
  uint64_t v4 = (unsigned int **)*((void *)this + 17);
  if (v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v2);
  }
  *((void *)this + 13) = &unk_1EE9B3390;
  uint64_t v5 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ProcessThrottler *)((char *)this + 104));
  *((void *)this + 9) = &unk_1EE9B3390;
  uint64_t v6 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ProcessThrottler *)((char *)this + 72));
  *((void *)this + 5) = &unk_1EE9B3390;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ProcessThrottler *)((char *)this + 40));
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 8), v8);
  }
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 8), v8);
  }
  char v11 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v8);
  }
  long long v12 = (WTF *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v12)
  {
    uint64_t v13 = *((void *)v12 + 1);
    if (v13) {
      WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::deallocateTable(v13, v8);
    }
    if (*(_DWORD *)v12)
    {
      *(void *)long long v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
    }
    else
    {
      WTF::fastFree(v12, v8);
    }
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    uint64_t v14 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v14)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v8);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

void WebKit::ProcessThrottler::invalidateAllActivities(WebKit::ProcessThrottler *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  char v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 136);
    if (v4) {
      int v5 = *(_DWORD *)(v4 + 108);
    }
    else {
      int v5 = 0;
    }
    int v9 = 134218752;
    *(void *)uint64_t v10 = this;
    *(_WORD *)&v10[8] = 1024;
    *(_DWORD *)&v10[10] = v5;
    __int16 v11 = 1024;
    int v12 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 136, v3);
    __int16 v13 = 1024;
    int v14 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 152, v6);
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::invalidateAllActivities: BEGIN (foregroundActivityCount: %u, backgroundActivityCount: %u)", (uint8_t *)&v9, 0x1Eu);
  }
  while (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 17))
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 17, &v9);
    WebKit::ProcessThrottlerActivity::invalidate(*(void *)(**(void **)&v10[4] + 8), 1);
  }
  while (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 19))
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 19, &v9);
    WebKit::ProcessThrottlerActivity::invalidate(*(void *)(**(void **)&v10[4] + 8), 1);
  }
  uint64_t v7 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    int v9 = 134218240;
    *(void *)uint64_t v10 = this;
    *(_WORD *)&v10[8] = 1024;
    *(_DWORD *)&v10[10] = v8;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::invalidateAllActivities: END", (uint8_t *)&v9, 0x12u);
  }
}

unsigned int *WebKit::ProcessThrottler::clearAssertion(unsigned int *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 3))
  {
    uint64_t v1 = (uint64_t)this;
    char v2 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)(v1 + 16) + 8) + 136);
      if (v3) {
        LODWORD(v3) = *(_DWORD *)(v3 + 108);
      }
      *(_DWORD *)__int16 v11 = 134218240;
      *(void *)&v11[4] = v1;
      __int16 v12 = 1024;
      int v13 = v3;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::clearAssertion:", v11, 0x12u);
    }
    if ((WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v1 + 104)) & 1) == 0) {
      WTF::RunLoop::TimerBase::start();
    }
    uint64_t v6 = *(void *)(v1 + 24);
    uint64_t v5 = *(void *)(v1 + 32);
    *(void *)(v1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    *(void *)(v1 + 32) = v6;
    if (v5) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), v4);
    }
    uint64_t v7 = *(atomic_uint **)(*(void *)(v1 + 16) + 8);
    atomic_fetch_add(v7 + 4, 1u);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v1, v1);
    uint64_t v8 = *(atomic_uint **)v1;
    if (*(void *)v1) {
      atomic_fetch_add(v8, 1u);
    }
    int v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    *int v9 = &unk_1EE9D7198;
    v9[1] = v1;
    void v9[2] = v8;
    *(void *)__int16 v11 = v9;
    (*(void (**)(atomic_uint *, unsigned char *))(*(void *)v7 + 128))(v7, v11);
    uint64_t v10 = *(void *)v11;
    *(void *)__int16 v11 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v7 + 4);
  }
  return this;
}

atomic_uchar *WebKit::ProcessThrottler::didDisconnectFromProcess(WebKit::ProcessThrottler *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 136);
    if (v3) {
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    }
    int v7 = 134218240;
    uint64_t v8 = this;
    __int16 v9 = 1024;
    int v10 = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::didDisconnectFromProcess:", (uint8_t *)&v7, 0x12u);
  }
  WTF::RunLoop::TimerBase::stop((WebKit::ProcessThrottler *)((char *)this + 72));
  double result = (atomic_uchar *)WTF::RunLoop::TimerBase::stop((WebKit::ProcessThrottler *)((char *)this + 40));
  if (*((unsigned char *)this + 176)) {
    *((unsigned char *)this + 176) = 0;
  }
  *((unsigned char *)this + 189) = 0;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), v5);
  }
  return result;
}

uint64_t WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  int v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v7 = &unk_1EE9D71C0;
  v7[1] = WebKit::ProcessThrottlerTimedActivity::activityTimedOut;
  _DWORD v7[2] = 0;
  void v7[3] = a1;
  uint64_t v8 = WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)a1, v6);
  *(void *)a1 = &unk_1EE9B3390;
  *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v7;
  *(double *)(a1 + 32) = a3;
  *(unsigned char *)(v8 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(_DWORD *)(a1 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v8 + 40, a2);
  WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)a1);
  return a1;
}

uint64_t WebKit::ProcessThrottlerTimedActivity::activityTimedOut(WebKit::ProcessThrottlerTimedActivity *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v2 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    __int16 v9 = this;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - ProcessThrottlerTimedActivity::activityTimedOut:", buf, 0xCu);
  }
  uint64_t v5 = 0;
  int v6 = 0;
  int v3 = *((_DWORD *)this + 12);
  if (!v3)
  {
    *((void *)this + 5) = 0;
    return ((uint64_t (*)(uint8_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(buf, &v5);
  }
  buf[0] = 0;
  HIDWORD(v9) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v5);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>((uint64_t)&v5, (uint64_t)this + 40);
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>((uint64_t)this + 40, (uint64_t)buf);
  if (HIDWORD(v9) != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[HIDWORD(v9)])(&v7, buf);
  }
  int v3 = v6;
  if (v6 != -1) {
    return ((uint64_t (*)(uint8_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(buf, &v5);
  }
  return result;
}

uint64_t WebKit::ProcessThrottlerTimedActivity::updateTimer(WebKit::ProcessThrottlerTimedActivity *this)
{
  if (*((_DWORD *)this + 12)) {
    return WTF::RunLoop::TimerBase::start();
  }
  else {
    return WTF::RunLoop::TimerBase::stop(this);
  }
}

uint64_t WebKit::operator<<(uint64_t a1, uint64_t a2)
{
  char v7 = 0;
  WebKit::logActivityNames<WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(a1, (uint64_t)"foreground_activities", 22, (void **)(a2 + 136), &v7);
  WebKit::logActivityNames<WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(a1, (uint64_t)"background_activities", 22, (void **)(a2 + 152), &v7);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v4 + 8));
    if (!*(unsigned char *)(v4 + 48))
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WebKit::ProcessAssertion::remainingRunTimeInSeconds((WebKit::ProcessAssertion *)*(unsigned int *)(v4 + 20));
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      char v7 = 1;
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 8), v5);
  }
  if (v7) {
    return a1;
  }

  return WTF::TextStream::operator<<();
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  unsigned char v9[4];
  char v10;

  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  uint64_t v5 = *(void *)(a2 + 552);
  if (v5 && *(_DWORD *)(v5 - 12))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_DWORD *)(*(void *)(a2 + 744) + 8))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(a2 + 576, v4))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(a2 + 592, v6))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(unsigned char *)(a2 + 778))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(unsigned char *)(a2 + 712))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(unsigned char *)(a2 + 872))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(unsigned char *)(a2 + 952))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(unsigned char *)(a2 + 760))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  char v7 = WTF::TextStream::operator<<();
  WebKit::operator<<(v7, a2 + 200);
  WebKit::AuxiliaryProcessProxy::taskInfo(a2, (uint64_t)v9);
  if (!v10) {
    return a1;
  }
  uint64_t result = WTF::TextStream::operator<<();
  if (v10)
  {
    WTF::TextStream::operator<<();
    uint64_t result = WTF::TextStream::operator<<();
    if (v10)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      return a1;
    }
  }
  __break(1u);
  return result;
}

void *WebKit::logActivityNames<WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, unsigned char *a5)
{
  uint64_t result = (void *)WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(a4);
  if ((result & 1) == 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    *a5 = 1;
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(a4, &v19);
    uint64_t v8 = *a4;
    if (*a4)
    {
      uint64_t v9 = *((unsigned int *)v8 - 1);
      uint64_t v10 = &v8[v9];
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v14 = a4;
    uint64_t v15 = v10;
    int v16 = v10;
    unsigned int v17 = v10;
    int v18 = &v8[v9];
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    uint64_t v11 = v20;
    if (v20 != v15)
    {
      char v12 = 1;
      do
      {
        if (!*(unsigned char *)(*(void *)(*v11 + 8) + 33))
        {
          if ((v12 & 1) == 0) {
            WTF::TextStream::operator<<();
          }
          WTF::TextStream::operator<<();
          char v12 = 0;
          uint64_t v11 = v20;
        }
        int v13 = v11 + 1;
        unsigned int v20 = v13;
        while (v13 != v21 && (unint64_t)(*v13 + 1) <= 1)
          unsigned int v20 = ++v13;
        uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v19);
        ++*(_DWORD *)(v19 + 8);
        uint64_t v11 = v20;
      }
      while (v20 != v15);
    }
  }
  return result;
}

atomic_uint **WebKit::ProvisionalFrameProxy::ProvisionalFrameProxy(atomic_uint **a1, uint64_t a2, atomic_uint **a3)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  int v6 = *(atomic_uint **)(a2 + 16);
  atomic_fetch_add(v6, 1u);
  *a1 = v6;
  char v7 = *a3;
  *a3 = 0;
  a1[1] = v7;
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(v9 + 304);
  CFRetain(*(CFTypeRef *)(v10 + 8));
  a1[2] = (atomic_uint *)v10;
  uint64_t v11 = *((void *)a1[1] + 2);
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v11);
  char v12 = (const WebKit::WebProcessProxy *)*((void *)a1[1] + 2);
  uint64_t v20 = *(void *)(a2 + 432);
  char v21 = 1;
  long long v19 = *(_OWORD *)(a2 + 272);
  v22[0] = &v20;
  v22[1] = &v19;
  uint64_t v13 = *(void *)(a2 + 24);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if (v14) {
      uint64_t v15 = v14 - 16;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v15 + 1416), (const WebKit::WebPageProxy *)v15, v12);
  if (v16) {
    unsigned int v17 = (uint64_t *)(v16 + 16);
  }
  else {
    unsigned int v17 = (uint64_t *)(*(void *)(v15 + 32) + 1928);
  }
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CreateProvisionalFrame>((uint64_t)v12, (uint64_t)v22, *v17, 0);
  return a1;
}

void WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(WebKit::ProvisionalFrameProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)this + 8);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        char v7 = *(const WebKit::WebProcessProxy **)(v3 + 16);
        long long v13 = *(_OWORD *)(v4 + 272);
        uint64_t v14 = &v13;
        uint64_t v8 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v6 + 1400), (const WebKit::WebPageProxy *)(v6 - 16), v7);
        if (v8) {
          uint64_t v9 = (uint64_t *)(v8 + 16);
        }
        else {
          uint64_t v9 = (uint64_t *)(*(void *)(v6 + 16) + 1928);
        }
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DestroyProvisionalFrame>((uint64_t)v7, (uint64_t **)&v14, *v9, 0);
      }
    }
  }
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  uint64_t v11 = (WebKit::FrameProcess *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v11) {
    WTF::RefCounted<WebKit::FrameProcess>::deref(v11, a2);
  }
  char v12 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v12)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
}

uint64_t WebKit::ProvisionalPageProxy::ProvisionalPageProxy(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t *a5, uint64_t a6, char a7, String *a8, char a9, char a10, CFTypeRef *a11, uint64_t a12)
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9D6F28;
  *(void *)(a1 + 8) = 0;
  uint64_t v144 = a1 + 16;
  *(void *)(a1 + 16) = &unk_1EE9D6F80;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v20 = *(atomic_uint **)(a2 + 24);
  atomic_fetch_add(v20, 1u);
  *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v20;
  if (*a5) {
    uint64_t v21 = *(void *)(*a5 + 32);
  }
  else {
    uint64_t v21 = WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::generate();
  }
  *(void *)(a1 + 32) = v21;
  uint64_t v22 = *a3;
  *a3 = 0;
  ++*a4;
  *(void *)(a1 + 56) = 0;
  int v23 = (uint64_t *)(a1 + 56);
  *(void *)(a1 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v22;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(a1 + 72) = 0;
  if (a12) {
    CFRetain(*(CFTypeRef *)(a12 + 8));
  }
  *(void *)(a1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = a12;
  *(void *)(a1 + 88) = *(void *)(a6 + 16);
  *(unsigned char *)(a1 + 96) = a7;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 104), a8);
  *(unsigned char *)(a1 + 30WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a9;
  *(unsigned char *)(a1 + 305) = 0;
  *(unsigned char *)(a1 + 306) = a10;
  *(_WORD *)(a1 + 307) = 256;
  *(unsigned char *)(a1 + 309) = 1;
  if (a10)
  {
    uint64_t v24 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a8);
    uint64_t v25 = *(_DWORD **)v24;
    if (*(void *)v24) {
      *v25 += 2;
    }
    *(void *)(a1 + 312) = v25;
    long long v26 = *(_OWORD *)(v24 + 24);
    *(_OWORD *)(a1 + 32WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_OWORD *)(v24 + 8);
    *(_OWORD *)(a1 + 336) = v26;
  }
  else
  {
    *(void *)(a1 + 312) = 0;
    WTF::URL::invalidate((WTF::URL *)(a1 + 312));
  }
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 38WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 16) + 200;
  uint64_t v28 = WTF::fastMalloc((WTF *)0x28);
  *(void *)(a1 + 40WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v28, v27, "Provisional Load", 17, 1, 0);
  if (*a5) {
    uint64_t v29 = *(void *)(*a5 + 144);
  }
  else {
    uint64_t v29 = 0;
  }
  *(void *)(a1 + 408) = v29;
  int v30 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v32 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v32) {
      uint64_t v33 = v32 - 16;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = *(void *)(*(void *)(v33 + 32) + 760);
    uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 136);
    if (v35) {
      LODWORD(v35) = *(_DWORD *)(v35 + 108);
    }
    uint64_t v36 = *(void *)(a1 + 88);
    uint64_t v37 = *a5;
    *(_DWORD *)buf = 134219264;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v34;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v151 = v31;
    LOWORD(v152) = 1024;
    *(_DWORD *)((char *)&v152 + 2) = v35;
    HIWORD(v152) = 2048;
    uint64_t v153 = v36;
    LOWORD(v15WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 2048;
    *(void *)((char *)&v154 + 2) = v37;
    _os_log_impl(&dword_1985F2000, v30, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::ProvisionalPageProxy: suspendedPage=%p", buf, 0x3Au);
  }
  WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)(a1 + 352), *(void *)(*(void *)(a1 + 40) + 16), *(unsigned __int8 **)(a1 + 32), a1);
  WebKit::WebProcessProxy::addProvisionalPageProxy(*(WebKit::WebProcessProxy **)(*(void *)(a1 + 40) + 16), (WebKit::ProvisionalPageProxy *)a1);
  uint64_t v39 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 752);
  if (v39) {
    CFRetain(*(CFTypeRef *)(v39 + 8));
  }
  uint64_t v40 = *v23;
  *int v23 = v39;
  if (v40)
  {
    CFRelease(*(CFTypeRef *)(v40 + 8));
    uint64_t v39 = *v23;
  }
  uint64_t v41 = *(void *)(a1 + 24);
  if (v39)
  {
    uint64_t v42 = *(void *)(v41 + 8);
    uint64_t v43 = v42 ? v42 - 16 : 0;
    if (v39 != *(void *)(v43 + 312))
    {
      uint64_t v44 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 512);
      if (v44)
      {
        uint64_t v45 = *(void *)(v44 + 8);
        if (v45) {
          uint64_t v46 = (WebKit::WebProcessPool *)(v45 - 16);
        }
        else {
          uint64_t v46 = 0;
        }
      }
      else
      {
        uint64_t v46 = 0;
      }
      CFRetain(*(CFTypeRef *)(v43 + 8));
      WebKit::WebProcessPool::pageBeginUsingWebsiteDataStore(v46, (WebKit::WebPageProxy *)v43, *(WebKit::WebsiteDataStore **)(a1 + 56));
      CFRelease(*(CFTypeRef *)(v43 + 8));
      uint64_t v41 = *(void *)(a1 + 24);
    }
  }
  uint64_t v47 = *(void *)(v41 + 8);
  if (v47) {
    uint64_t v48 = v47 - 16;
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = *(void *)(v48 + 328);
  if (v49) {
    CFRetain(*(CFTypeRef *)(v49 + 8));
  }
  uint64_t v50 = *a5;
  if (*a5)
  {
    *(unsigned char *)(v50 + 91) = 3;
    buf[0] = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsSuspended>(*(void *)(v50 + 40), buf, *(void *)(v50 + 32), 0);
    uint64_t v52 = *(void *)(*a5 + 48);
    if (!v52) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  uint64_t v73 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v73) {
    uint64_t v74 = v73 - 16;
  }
  else {
    uint64_t v74 = 0;
  }
  uint64_t v75 = *(void *)(v74 + 272);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKedouble y = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v75 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v38);
  uint64_t v77 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v77) {
    uint64_t v78 = v77 - 16;
  }
  else {
    uint64_t v78 = 0;
  }
  if (BoolValueForKey)
  {
    uint64_t v52 = *(void *)(v78 + 328);
    if (!v52)
    {
LABEL_44:
      uint64_t v53 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = v52;
      if (v53) {
        CFRelease(*(CFTypeRef *)(v53 + 8));
      }
      goto LABEL_46;
    }
LABEL_43:
    CFRetain(*(CFTypeRef *)(v52 + 8));
    goto LABEL_44;
  }
  CFRetain(*(CFTypeRef *)(v78 + 8));
  uint64_t v118 = *(_DWORD **)(a1 + 40);
  uint64_t v119 = (WebCore::Process *)WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v120 = WebCore::Process::identifier(v119);
  uint64_t v121 = API::Object::newObject(0x1C8uLL, 59);
  uint64_t v122 = WebKit::WebFrameProxy::WebFrameProxy(v121, v78, v118, (uint64_t)v119, v120, 1);
  uint64_t v123 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v122;
  if (v123) {
    CFRelease(*(CFTypeRef *)(v123 + 8));
  }
  CFRelease(*(CFTypeRef *)(v78 + 8));
  WebKit::FrameLoadState::setURL((WebKit::FrameLoadState *)(*(void *)(a1 + 72) + 40), (const WTF::URL *)(v49 + 48));
  uint64_t v124 = *(void *)(a1 + 72);
  uint64_t v125 = *(void *)(v49 + 424);
  *(void *)(v49 + 42WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  uint64_t v126 = *(void *)(v124 + 424);
  *(void *)(v124 + 42WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v125;
  if (v126) {
    (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
  }
LABEL_46:
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v54 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v54) {
      uint64_t v55 = v54 - 16;
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v56 = *(void *)(v55 + 272);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v57 = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v56 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v51);
    uint64_t v58 = *(void *)(a1 + 72);
    if (v57 && (uint64_t v59 = *(void *)(v58 + 88)) != 0 && *(_DWORD *)(v59 + 4))
    {
      unint64_t v60 = (WebKit::FrameLoadState *)(v58 + 40);
      char v61 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 104));
      WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad(v60, v61);
    }
    else
    {
      uint64_t v62 = (WebKit::FrameLoadState *)(v58 + 40);
      unsigned __int8 v63 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 104));
      WebKit::FrameLoadState::didStartProvisionalLoad(v62, v63);
    }
    uint64_t v64 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v64) {
      int v65 = (WebKit::WebPageProxy *)(v64 - 16);
    }
    else {
      int v65 = 0;
    }
    uint64_t v66 = *(void *)(*(void *)(a1 + 40) + 16);
    atomic_fetch_add((atomic_uint *volatile)(v66 + 16), 1u);
    *(void *)buf = v66;
    uint64_t v67 = *(void *)(a1 + 72);
    uint64_t v68 = *(void *)(v67 + 272);
    uint64_t v69 = *(void *)(v67 + 280);
    uint64_t v70 = *(void *)(a1 + 88);
    *(void *)&long long v146 = 0;
    WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(v65, (WebKit::WebProcessProxy **)buf, v68, v69, v70, 1, (WebCore::ResourceRequestBase *)(a1 + 104), (CFTypeRef **)&v146);
    uint64_t v71 = v146;
    *(void *)&long long v146 = 0;
    if (v71) {
      CFRelease(*(CFTypeRef *)(v71 + 8));
    }
    uint64_t v72 = *(void *)buf;
    *(void *)buf = 0;
    if (v72) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v72 + 16));
    }
  }
  else if (v49)
  {
    uint64_t v79 = *(void *)(v49 + 88);
    if (v79)
    {
      if (*(_DWORD *)(v79 + 4)) {
        WebKit::FrameLoadState::didStartProvisionalLoad((WebKit::FrameLoadState *)(*(void *)(a1 + 72) + 40), (const WTF::URL *)(v49 + 88));
      }
    }
  }
  if (a11) {
    CFRetain(a11[1]);
  }
  v145 = (API::WebsitePolicies *)a11;
  uint64_t v80 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v80) {
    uint64_t v81 = v80 - 16;
  }
  else {
    uint64_t v81 = 0;
  }
  uint64_t v82 = *(void *)(*(void *)(v81 + 40) + 8);
  uint64_t v83 = *(void *)(*(void *)(a1 + 40) + 16);
  atomic_fetch_add((atomic_uint *volatile)(v83 + 16), 1u);
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v82 + 16))(buf);
  uint64_t v85 = *(void *)buf;
  *(void *)buf = 0;
  uint64_t v86 = *(void *)(a1 + 64);
  *(void *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v85;
  if (v86)
  {
    (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
    uint64_t v87 = *(void *)buf;
    *(void *)buf = 0;
    if (v87) {
      (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
    }
  }
  if (v83) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v83 + 16));
  }
  if (v145)
  {
    API::WebsitePolicies::data(v145, (__n128 *)buf);
    uint64_t v88 = WTF::fastMalloc((WTF *)0x78);
    *(void *)uint64_t v88 = 0;
    *(void *)(v88 + 8) = 0;
    uint64_t v89 = *(void *)buf;
    *(void *)buf = 0;
    *(void *)uint64_t v88 = v89;
    *(void *)(v88 + 16) = 0;
    *(void *)(v88 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    uint64_t v90 = *(void *)&buf[8];
    *(void *)&buf[8] = 0;
    *(void *)(v88 + 8) = v90;
    LODWORD(v9WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_DWORD *)&buf[16];
    *(_DWORD *)&uint8_t buf[16] = 0;
    *(_DWORD *)(v88 + 16) = v90;
    LODWORD(v9WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_DWORD *)&buf[20];
    *(_DWORD *)&buf[20] = 0;
    *(_DWORD *)(v88 + 2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v90;
    *(void *)(v88 + 32) = 0;
    uint64_t v91 = v151;
    uint64_t v151 = 0;
    *(void *)(v88 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v91;
    LODWORD(v91) = v152;
    LODWORD(v152) = 0;
    *(_DWORD *)(v88 + 32) = v91;
    LODWORD(v91) = HIDWORD(v152);
    HIDWORD(v152) = 0;
    *(_DWORD *)(v88 + 36) = v91;
    uint64_t v92 = v153;
    uint64_t v153 = 0;
    *(void *)(v88 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v92;
    uint64_t v93 = v154;
    *(void *)&long long v154 = 0;
    *(void *)(v88 + 48) = v93;
    uint64_t v94 = *((void *)&v154 + 1);
    *((void *)&v154 + 1) = 0;
    *(void *)(v88 + 56) = v94;
    uint64_t v95 = v155;
    uint64_t v155 = 0;
    *(void *)(v88 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v95;
    LOWORD(v95) = v156;
    *(unsigned char *)(v88 + 7WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v157;
    *(_WORD *)(v88 + 72) = v95;
    *(unsigned char *)(v88 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v158;
    *(void *)(v88 + 88) = 0;
    uint64_t v96 = v159;
    uint64_t v159 = 0;
    *(void *)(v88 + 88) = v96;
    long long v97 = v160;
    *(unsigned char *)(v88 + 112) = v161;
    *(_OWORD *)(v88 + 96) = v97;
    std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)(a1 + 376), (WTF::StringImpl *)v88);
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)buf, v98);
  }
  __int16 v99 = *(atomic_uint **)(*(void *)(a1 + 40) + 16);
  atomic_fetch_add(v99 + 4, 1u);
  uint64_t v100 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v100) {
    uint64_t v101 = v100 - 16;
  }
  else {
    uint64_t v101 = 0;
  }
  uint64_t v102 = *(void *)(v101 + 272);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v102 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v84))
  {
    unsigned __int8 v103 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 104));
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v148, v103);
    uint64_t v104 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v104) {
      uint64_t v105 = (const WebKit::WebPageProxy *)(v104 - 16);
    }
    else {
      uint64_t v105 = 0;
    }
    WebKit::BrowsingContextGroup::takeRemotePageInProcessForProvisionalPage(*(WebKit::BrowsingContextGroup **)(a1 + 48), v105, (const WebKit::WebProcessProxy *)v99, &v147);
    uint64_t v107 = v147;
    BOOL v108 = v147 == 0;
    if (v147)
    {
      *(void *)(a1 + 32) = v147[2];
      uint64_t v109 = *(void *)(v107[4] + 8);
      if (v109) {
        uint64_t v110 = v109 - 16;
      }
      else {
        uint64_t v110 = 0;
      }
      uint64_t v111 = *(void *)(v110 + 328);
      if (v111) {
        CFRetain(*(CFTypeRef *)(v111 + 8));
      }
      uint64_t v112 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = v111;
      if (v112) {
        CFRelease(*(CFTypeRef *)(v112 + 8));
      }
      WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)(a1 + 352));
      WebKit::WebPageProxyMessageReceiverRegistration::transferMessageReceivingFrom((WebKit::WebPageProxyMessageReceiverRegistration *)(a1 + 352), (WebKit::WebPageProxyMessageReceiverRegistration *)(v107 + 9), (IPC::MessageReceiver *)a1);
      buf[0] = 0;
      buf[8] = 0;
      long long v146 = *(_OWORD *)(*(void *)(a1 + 72) + 272);
      uint64_t v113 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(v144);
      char v114 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v114 = 2183;
      *((void *)v114 + 1) = v113;
      *((void *)v114 + 66) = (char *)v114 + 16;
      *((void *)v114 + 67) = 512;
      *((void *)v114 + 68) = 0;
      *((void *)v114 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v114 + 69) = 0;
      IPC::Encoder::encodeHeader(v114);
      v149 = v114;
      IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v114, (uint64_t)buf);
      IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v114, (uint64_t *)&v146);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(a1 + 16) + 32))(v144, &v149, 0);
      v116 = v149;
      v149 = 0;
      if (v116)
      {
        IPC::Encoder::~Encoder(v116, v115);
        WTF::fastFree(v142, v143);
      }
      *(unsigned char *)(a1 + 307) = 1;
      (*(void (**)(void *))(*v107 + 8))(v107);
    }
    *(unsigned char *)(a1 + 308) = 0;
    uint64_t v117 = v148;
    v148 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2) {
        WTF::StringImpl::destroy(v117, v106);
      }
      else {
        *(_DWORD *)v117 -= 2;
      }
    }
  }
  else
  {
    BOOL v108 = 1;
  }
  uint64_t v127 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v127) {
    long long v128 = (void *)(v127 - 16);
  }
  else {
    long long v128 = 0;
  }
  WebKit::WebPageProxy::creationParametersForProvisionalPage(v128, *(WebKit::WebProcessProxy **)(*(void *)(a1 + 40) + 16), *(void *)(a1 + 64), (uint64_t)&v145, *(void *)(*(void *)(a1 + 72) + 272), *(void *)(*(void *)(a1 + 72) + 280), (uint64_t)buf);
  *(void *)&long long v146 = a1 + 32;
  *((void *)&v146 + 1) = buf;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::CreateWebPage>((uint64_t)v99, (uint64_t)&v146, 0, 0);
  WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)buf);
  uint64_t v129 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v129) {
    uint64_t v130 = v129 - 16;
  }
  else {
    uint64_t v130 = 0;
  }
  WebKit::WebProcessProxy::addVisitedLinkStoreUser((uint64_t *)v99, *(unsigned int **)(v130 + 304), *(void *)(*(void *)(v130 + 32) + 760));
  uint64_t v131 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v131) {
    uint64_t v132 = v131 - 16;
  }
  else {
    uint64_t v132 = 0;
  }
  if (!*(unsigned char *)(v132 + 1266)) {
    goto LABEL_131;
  }
  uint64_t v133 = (*(uint64_t (**)(uint64_t))(*(void *)v144 + 56))(v144);
  long long v134 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v134 = 2507;
  *((void *)v134 + 1) = v133;
  *((void *)v134 + 66) = (char *)v134 + 16;
  *((void *)v134 + 67) = 512;
  *((void *)v134 + 68) = 0;
  *((void *)v134 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v134 + 69) = 0;
  IPC::Encoder::encodeHeader(v134);
  *(void *)buf = v134;
  (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v144 + 32))(v144, buf, 0);
  v136 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v136)
  {
    IPC::Encoder::~Encoder(v136, v135);
    WTF::fastFree(v140, v141);
    if (!v108) {
      goto LABEL_136;
    }
  }
  else
  {
LABEL_131:
    if (!v108) {
      goto LABEL_136;
    }
  }
  uint64_t v137 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v137) {
    uint64_t v138 = v137 - 16;
  }
  else {
    uint64_t v138 = 0;
  }
  WebKit::WebPageInspectorController::didCreateProvisionalPage(*(WebKit::WebPageInspectorController **)(v138 + 1144), (WebKit::ProvisionalPageProxy *)a1);
LABEL_136:
  if (v99) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v99 + 4);
  }
  if (v145) {
    CFRelease(*((CFTypeRef *)v145 + 1));
  }
  if (v49) {
    CFRelease(*(CFTypeRef *)(v49 + 8));
  }
  return a1;
}

void WebKit::ProvisionalPageProxy::~ProvisionalPageProxy(WebKit::ProvisionalPageProxy *this)
{
  *(void *)this = &unk_1EE9D6F28;
  char v2 = (char *)this + 16;
  *((void *)this + 2) = &unk_1EE9D6F80;
  if (!*((unsigned char *)this + 305))
  {
    uint64_t v3 = *(void *)(*((void *)this + 3) + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    WebKit::WebPageInspectorController::willDestroyProvisionalPage(*(WebKit::WebPageInspectorController **)(v4 + 1144), this);
    uint64_t v5 = *(uint64_t **)(*((void *)this + 5) + 16);
    uint64_t v6 = (WebKit::WebsiteDataStore *)v5[94];
    if (v6)
    {
      uint64_t v7 = *(void *)(*((void *)this + 3) + 8);
      uint64_t v8 = v7 ? v7 - 16 : 0;
      if (v6 != *(WebKit::WebsiteDataStore **)(v8 + 312))
      {
        uint64_t v9 = v5[64];
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10) {
            uint64_t v11 = (WebKit::WebProcessPool *)(v10 - 16);
          }
          else {
            uint64_t v11 = 0;
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
        CFRetain(*(CFTypeRef *)(v8 + 8));
        WebKit::WebProcessPool::pageEndUsingWebsiteDataStore(v11, (WebKit::WebPageProxy *)v8, v6);
        CFRelease(*(CFTypeRef *)(v8 + 8));
        uint64_t v5 = *(uint64_t **)(*((void *)this + 5) + 16);
      }
    }
    if (v5[18] && *((unsigned char *)this + 309))
    {
      uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)v2 + 56))(v2);
      long long v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)long long v13 = 2170;
      *((void *)v13 + 1) = v12;
      *((void *)v13 + 66) = (char *)v13 + 16;
      *((void *)v13 + 67) = 512;
      *((void *)v13 + 68) = 0;
      *((void *)v13 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v13 + 69) = 0;
      IPC::Encoder::encodeHeader(v13);
      uint64_t v33 = v13;
      (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v2 + 32))(v2, &v33, 0);
      uint64_t v15 = v33;
      uint64_t v33 = 0;
      if (v15)
      {
        IPC::Encoder::~Encoder(v15, v14);
        WTF::fastFree(v31, v32);
      }
      uint64_t v5 = *(uint64_t **)(*((void *)this + 5) + 16);
    }
    uint64_t v16 = *(void *)(*((void *)this + 3) + 8);
    if (v16) {
      uint64_t v17 = v16 - 16;
    }
    else {
      uint64_t v17 = 0;
    }
    WebKit::WebProcessProxy::removeVisitedLinkStoreUser(v5, *(WebKit::VisitedLinkStore **)(v17 + 304), *(void *)(*(void *)(v17 + 32) + 760));
  }
  WebKit::WebProcessProxy::removeProvisionalPageProxy(*(WebKit::WebProcessProxy **)(*((void *)this + 5) + 16), this);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 50, 0);
  long long v19 = (WTF *)*((void *)this + 48);
  if (v19)
  {
    *((void *)this + 48) = 0;
    *((_DWORD *)this + 98) = 0;
    WTF::fastFree(v19, v18);
  }
  std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)this + 47, 0);
  WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration((WebKit::ProvisionalPageProxy *)((char *)this + 352));
  uint64_t v21 = (WTF::StringImpl *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = (const void *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v22) {
    CFRelease(v22);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::ProvisionalPageProxy *)((char *)this + 104));
  uint64_t v24 = *((void *)this + 10);
  *((void *)this + 1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v24) {
    CFRelease(*(CFTypeRef *)(v24 + 8));
  }
  uint64_t v25 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v25) {
    CFRelease(*(CFTypeRef *)(v25 + 8));
  }
  uint64_t v26 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v27) {
    CFRelease(*(CFTypeRef *)(v27 + 8));
  }
  uint64_t v28 = (WebKit::BrowsingContextGroup *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v28) {
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v28, v23);
  }
  uint64_t v29 = (WebKit::FrameProcess *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v29) {
    WTF::RefCounted<WebKit::FrameProcess>::deref(v29, (WTF::StringImpl *)v23);
  }
  int v30 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, v23);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v23);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ProvisionalPageProxy::~ProvisionalPageProxy(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::ProvisionalPageProxy::~ProvisionalPageProxy(WebKit::ProvisionalPageProxy *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::ProvisionalPageProxy::~ProvisionalPageProxy((WebKit::ProvisionalPageProxy *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ProvisionalPageProxy::processDidTerminate(WebKit::ProvisionalPageProxy *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  char v2 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *(void *)(*((void *)this + 3) + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(*(void *)(v8 + 32) + 760);
    uint64_t v10 = *(void *)(*(void *)(*((void *)this + 5) + 16) + 136);
    if (v10) {
      LODWORD(v1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_DWORD *)(v10 + 108);
    }
    uint64_t v11 = *((void *)this + 11);
    int v12 = 134219008;
    long long v13 = this;
    __int16 v14 = 2048;
    uint64_t v15 = v9;
    __int16 v16 = 2048;
    uint64_t v17 = v6;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 2048;
    uint64_t v21 = v11;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::processDidTerminate:", (uint8_t *)&v12, 0x30u);
  }
  uint64_t v3 = *(void *)(*((void *)this + 3) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = *(void *)(v4 + 1192);
  *(void *)(v4 + 1192) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::ProvisionalPageProxy::cancel(WTF::StringImpl *this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 39);
  if (v1)
  {
    if (*(_DWORD *)(v1 + 4))
    {
      uint64_t v2 = (uint64_t)this;
      if (*((void *)this + 9))
      {
        uint64_t v3 = qword_1EB358370;
        if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v4 = *(void *)(v2 + 32);
          uint64_t v5 = *(void *)(*(void *)(v2 + 24) + 8);
          if (v5) {
            uint64_t v6 = v5 - 16;
          }
          else {
            uint64_t v6 = 0;
          }
          uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 760);
          uint64_t v8 = *(void *)(*(void *)(*(void *)(v2 + 40) + 16) + 136);
          if (v8) {
            LODWORD(v8) = *(_DWORD *)(v8 + 108);
          }
          uint64_t v9 = *(void *)(v2 + 88);
          *(_DWORD *)buf = 134219008;
          uint64_t v35 = v2;
          __int16 v36 = 2048;
          uint64_t v37 = v7;
          __int16 v38 = 2048;
          uint64_t v39 = v4;
          __int16 v40 = 1024;
          int v41 = v8;
          __int16 v42 = 2048;
          uint64_t v43 = v9;
          _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::cancel: Simulating a didFailProvisionalLoadForFrame", buf, 0x30u);
        }
        WebKit::cancelledError((WebKit *)(v2 + 104), (uint64_t)&v30);
        WebCore::ResourceErrorBase::setType();
        *(_WORD *)buf = 1;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)((char *)&v35 + 4), (const String *)(v2 + 104));
        uint64_t v10 = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v2 + 104));
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v45, v10, v11);
        uint64_t v47 = 0;
        uint64_t v12 = *(void *)(v2 + 72);
        long long v48 = *(_OWORD *)(v12 + 272);
        char v49 = 0;
        char v50 = 0;
        uint64_t v13 = *(void *)(*(void *)(*(void *)(v12 + 32) + 16) + 136);
        if (v13) {
          LODWORD(v13) = *(_DWORD *)(v13 + 108);
        }
        int v51 = v13;
        uint64_t v14 = *(void *)(v12 + 24);
        v16 = v14 && (uint64_t v15 = *(void *)(v14 + 8)) != 0 && *(void *)(v15 + 328) == v12;
        BOOL v52 = v16;
        char v53 = 0;
        WebCore::ResourceRequest::ResourceRequest(v28, (const String *)(v2 + 104));
        uint64_t v17 = *(void *)(v2 + 88);
        uint64_t v27 = 0;
        WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame(v2, (uint64_t)buf, (WebCore::ResourceRequestBase *)v28, v17, 1, (WTF::StringImpl **)(v2 + 312), (uint64_t)&v30, 0, &v27, 0);
        uint64_t v18 = v27;
        uint64_t v27 = 0;
        if (v18) {
          CFRelease(*(CFTypeRef *)(v18 + 8));
        }
        CFTypeRef v19 = cf;
        CFTypeRef cf = 0;
        if (v19) {
          CFRelease(v19);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v28);
        uint64_t v21 = v47;
        uint64_t v47 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
        if (v46 != -1) {
          ((void (*)(CFTypeRef *, uint64_t *))off_1EE9D7030[v46])(v28, v45);
        }
        int v46 = -1;
        CFTypeRef v22 = v44;
        CFTypeRef v44 = 0;
        if (v22) {
          CFRelease(v22);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)&v35 + 4));
        CFTypeRef v24 = v33;
        CFTypeRef v33 = 0;
        if (v24) {
          CFRelease(v24);
        }
        uint64_t v25 = v32;
        uint64_t v32 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v23);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        uint64_t v26 = v31;
        uint64_t v31 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v23);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
        this = v30;
        int v30 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v23);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
    }
  }
  return this;
}

void WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t a4, char a5, WTF::StringImpl **a6, uint64_t a7, char a8, uint64_t *a9, unsigned __int8 a10)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 72);
  if (v10)
  {
    uint64_t v12 = *(void *)(a2 + 248);
    uint64_t v14 = *(void *)(v10 + 272);
    uint64_t v13 = *(void *)(v10 + 280);
    BOOL v15 = v14 == v12 && v13 == *(void *)(a2 + 256);
    if (v15 && (!a5 || a4 == *(void *)(a1 + 88)))
    {
      CFTypeRef v22 = qword_1EB358370;
      if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = *(void *)(a1 + 32);
        uint64_t v44 = *(void *)(*(void *)(a1 + 24) + 8);
        if (v44) {
          uint64_t v45 = v44 - 16;
        }
        else {
          uint64_t v45 = 0;
        }
        uint64_t v46 = *(void *)(*(void *)(v45 + 32) + 760);
        uint64_t v47 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 136);
        if (v47) {
          LODWORD(v47) = *(_DWORD *)(v47 + 108);
        }
        uint64_t v48 = *(void *)(a1 + 88);
        *(_DWORD *)buf = 134219264;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v46;
        __int16 v53 = 2048;
        uint64_t v54 = v43;
        __int16 v55 = 1024;
        int v56 = v47;
        __int16 v57 = 2048;
        uint64_t v58 = v48;
        __int16 v59 = 2048;
        uint64_t v60 = v12;
        _os_log_error_impl(&dword_1985F2000, v22, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didFailProvisionalLoadForFrame: frameID=%llu", buf, 0x3Au);
      }
      *(void *)buf = 0;
      WTF::URL::invalidate((WTF::URL *)buf);
      WTF::URL::operator=(a1 + 312, (uint64_t)buf);
      uint64_t v25 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v23);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 24) + 8);
      if (v26) {
        uint64_t v27 = v26 - 16;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(void *)(v27 + 272);
      {
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v28 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v24))
      {
        uint64_t v29 = *(WebKit::BrowsingContextGroup **)(a1 + 48);
        int v30 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
        WebKit::Site::Site((WebKit::Site *)buf, v30);
        WebKit::BrowsingContextGroup::transitionProvisionalPageToRemotePage(v29, (WebKit::ProvisionalPageProxy *)a1, (const WebKit::Site *)buf);
        uint64_t v32 = *(WTF::StringImpl **)&buf[8];
        *(void *)&buf[8] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2) {
            WTF::StringImpl::destroy(v32, v31);
          }
          else {
            *(_DWORD *)v32 -= 2;
          }
        }
        __int16 v36 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v31);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
        *(unsigned char *)(a1 + 309) = 0;
      }
      else
      {
        uint64_t v33 = *(void *)(*(void *)(a1 + 24) + 8);
        if (v33) {
          uint64_t v34 = v33 - 16;
        }
        else {
          uint64_t v34 = 0;
        }
        uint64_t v35 = *(WebKit::WebFrameProxy **)(v34 + 328);
        if (v35) {
          WebKit::WebFrameProxy::didFailProvisionalLoad(v35);
        }
      }
      uint64_t v37 = WebKit::WebFrameProxy::webFrame(*(void *)(a2 + 248), *(void *)(a2 + 256));
      if (v37)
      {
        uint64_t v38 = v37;
        CFRetain(*(CFTypeRef *)(v37 + 8));
        uint64_t v39 = *(void *)(*(void *)(a1 + 24) + 8);
        if (v39) {
          uint64_t v40 = v39 - 16;
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = *(void *)(*(void *)(a1 + 40) + 16);
        atomic_fetch_add((atomic_uint *volatile)(v41 + 16), 1u);
        *(void *)buf = v41;
        WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(v40, (WebKit::WebProcessProxy **)buf, v38, (__int16 *)a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9, a10);
        uint64_t v42 = *(void *)buf;
        *(void *)buf = 0;
        if (v42) {
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v42 + 16));
        }
        CFRelease(*(CFTypeRef *)(v38 + 8));
      }
      else
      {
        char v49 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "void WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame(FrameInfoData &&, Resou"
                               "rceRequest &&, std::optional<WebCore::NavigationIdentifier>, const String &, const WebCor"
                               "e::ResourceError &, WebCore::WillContinueLoading, const UserData &, WebCore::WillInternal"
                               "lyHandleFailure)";
          _os_log_fault_impl(&dword_1985F2000, v49, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ProvisionalPageProxy.cpp 382: Invalid message dispatched %{public}s", buf, 0xCu);
        }
        uint64_t v50 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 144);
        if (v50) {
          *(unsigned char *)(v50 + 98) = 1;
        }
        else {
          __break(0xC471u);
        }
      }
    }
  }
}

void WebKit::ProvisionalPageProxy::loadData(void *a1, uint64_t a2, uint64_t *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, WTF::StringImpl **a6, const void *a7, char a8, __int16 a9, uint64_t a10, char a11)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = a1[4];
    uint64_t v19 = *(void *)(a1[3] + 8);
    if (v19) {
      uint64_t v20 = v19 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void *)(*(void *)(v20 + 32) + 760);
    uint64_t v22 = *(void *)(*(void *)(a1[5] + 16) + 136);
    if (v22) {
      LODWORD(v22) = *(_DWORD *)(v22 + 108);
    }
    uint64_t v23 = a1[11];
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v32 = 2048;
    uint64_t v33 = v21;
    __int16 v34 = 2048;
    uint64_t v35 = v18;
    __int16 v36 = 1024;
    int v37 = v22;
    __int16 v38 = 2048;
    uint64_t v39 = v23;
    _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::loadData:", buf, 0x30u);
  }
  uint64_t v24 = *(void *)(a1[3] + 8);
  if (v24) {
    uint64_t v25 = v24 - 16;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = *(void *)(a1[5] + 16);
  atomic_fetch_add((atomic_uint *volatile)(v26 + 16), 1u);
  *(void *)buf = v26;
  WebKit::WebPageProxy::loadDataWithNavigationShared(v25, (uint64_t *)buf, a1[4], a2, a3, a4, a5, a6, a7, a8, v28, a9, a10, *(unsigned char *)(a2 + 577), a11);
  uint64_t v27 = *(void *)buf;
  *(void *)buf = 0;
  if (v27) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v27 + 16));
  }
}

void WebKit::ProvisionalPageProxy::loadRequest(void *a1, uint64_t a2, uint64_t a3, const void *a4, char a5, __int16 a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1[3] + 8);
    if (v19) {
      uint64_t v20 = v19 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void *)(v20 + 32);
    uint64_t v22 = *(void *)(*(void *)(a1[5] + 16) + 136);
    if (v22) {
      LODWORD(v22) = *(_DWORD *)(v22 + 108);
    }
    uint64_t v23 = *(void *)(v21 + 760);
    uint64_t v24 = a1[4];
    uint64_t v25 = a1[11];
    if (a10) {
      uint64_t v26 = a9;
    }
    else {
      uint64_t v26 = 0;
    }
    *(_DWORD *)buf = 134219264;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v36 = 2048;
    uint64_t v37 = v23;
    __int16 v38 = 2048;
    uint64_t v39 = v24;
    __int16 v40 = 1024;
    int v41 = v22;
    __int16 v42 = 2048;
    uint64_t v43 = v25;
    __int16 v44 = 2048;
    uint64_t v45 = v26;
    _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::loadRequest: existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x3Au);
  }
  uint64_t v27 = *(void *)(a2 + 472);
  if (v27) {
    BOOL v28 = *(unsigned char *)(a2 + 977) == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28) {
    *(void *)(v27 + 392) = *(void *)(*(void *)(a1[5] + 16) + 176);
  }
  uint64_t v29 = *(void *)(a1[3] + 8);
  if (v29) {
    uint64_t v30 = v29 - 16;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(void *)(a1[5] + 16);
  atomic_fetch_add((atomic_uint *volatile)(v31 + 16), 1u);
  *(void *)buf = v31;
  WebKit::WebPageProxy::loadRequestWithNavigationShared(v30, (uint64_t *)buf, a1[4], a2, a3, *(unsigned char *)(a2 + 577), a12, a4, a5, v33, a6, a7, a9, a10);
  uint64_t v32 = *(void *)buf;
  *(void *)buf = 0;
  if (v32) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v32 + 16));
  }
}

uint64_t WebKit::ProvisionalPageProxy::goToBackForwardItem(uint64_t a1, uint64_t a2, uint64_t a3, API::WebsitePolicies **a4, char a5, uint64_t a6, char a7)
{
  v105[1] = *(const char ***)MEMORY[0x1E4F143B8];
  uint64_t v14 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v15) {
      uint64_t v16 = v15 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void *)(v16 + 32);
    uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 136);
    if (v18) {
      LODWORD(v18) = *(_DWORD *)(v18 + 108);
    }
    uint64_t v19 = *(void *)(v17 + 760);
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 88);
    if (a7) {
      uint64_t v22 = a6;
    }
    else {
      uint64_t v22 = 0;
    }
    *(_DWORD *)buf = 134219264;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v19;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v20;
    LOWORD(v87) = 1024;
    *(_DWORD *)((char *)&v87 + 2) = v18;
    WORD3(v87) = 2048;
    *((void *)&v87 + 1) = v21;
    LOWORD(v88) = 2048;
    *(void *)((char *)&v88 + 2) = v22;
    _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::goToBackForwardItem: existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x3Au);
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v23) {
    uint64_t v24 = v23 - 16;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(void *)(v24 + 664);
  CFRetain(*(CFTypeRef *)(a3 + 8));
  uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v26 = &unk_1EE9D71F8;
  v26[1] = a1;
  void v26[2] = a3;
  *(void *)buf = v26;
  WebKit::WebBackForwardList::filteredItemStates(v25, buf, (uint64_t)v85);
  uint64_t v27 = *(void *)buf;
  *(void *)buf = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  LOBYTE(v72) = 0;
  char v84 = 0;
  if (*a4)
  {
    API::WebsitePolicies::data(*a4, (__n128 *)buf);
    std::optional<WebKit::WebsitePoliciesData>::operator=[abi:sn180100]<WebKit::WebsitePoliciesData,void>((uint64_t)&v72, (uint64_t *)buf);
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)buf, v28);
  }
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  uint64_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v30 = 2526;
  *((void *)v30 + 1) = v29;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  *(void *)buf = v30;
  IPC::VectorArgumentCoder<false,WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v30, (uint64_t)v85);
  (*(void (**)(uint64_t, unsigned char *, void))(*(void *)(a1 + 16) + 32))(a1 + 16, buf, 0);
  uint64_t v32 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v32)
  {
    IPC::Encoder::~Encoder(v32, v31);
    WTF::fastFree(v65, v66);
  }
  uint64_t v71 = 0;
  WTF::URL::URL((uint64_t)&v68, (WTF::StringImpl **)(a3 + 56));
  uint64_t v33 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v33) {
    uint64_t v34 = v33 - 16;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = *(void *)(*(void *)(a1 + 40) + 16);
  __int16 v36 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  __int16 v38 = *(atomic_uint **)(a1 + 8);
  if (v38) {
    atomic_fetch_add(v38, 1u);
  }
  *(void *)buf = v38;
  uint64_t v39 = v68;
  if (v68) {
    *(_DWORD *)v68 += 2;
  }
  *(void *)&buf[8] = v39;
  *(_OWORD *)&uint8_t buf[16] = v69;
  long long v87 = v70;
  long long v88 = *(_OWORD *)(a3 + 32);
  unsigned int add = *(unsigned __int16 *)(a2 + 488);
  if (add <= 0xFF)
  {
    __break(1u);
LABEL_51:
    atomic_store(add, v36);
    WTF::fastFree((WTF *)v36, v37);
    goto LABEL_43;
  }
  int v41 = (WTF::URL *)(a3 + 344);
  LOBYTE(v89) = *(_WORD *)(a2 + 488);
  HIBYTE(v89) = a5;
  LOBYTE(v9WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  char v102 = 0;
  if (v84)
  {
    long long v42 = v72;
    long long v72 = 0u;
    long long v90 = v42;
    *(void *)&long long v42 = v73;
    uint64_t v73 = 0;
    uint64_t v91 = v42;
    uint64_t v43 = v74;
    uint64_t v74 = 0;
    uint64_t v92 = v43;
    *(void *)&long long v42 = v75;
    uint64_t v75 = 0;
    uint64_t v93 = v42;
    long long v44 = v76;
    long long v76 = 0u;
    long long v45 = v77;
    long long v77 = 0u;
    long long v94 = v44;
    long long v95 = v45;
    char v97 = v79;
    __int16 v96 = v78;
    char v98 = v80;
    uint64_t v46 = v81;
    uint64_t v81 = 0;
    uint64_t v99 = v46;
    char v101 = v83;
    long long v100 = v82;
    char v102 = 1;
  }
  *(void *)&long long v103 = a6;
  BYTE8(v103) = a7;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v47 = v71;
  uint64_t v71 = 0;
  uint64_t v104 = a2;
  v105[0] = v47;
  uint64_t v48 = WTF::fastMalloc((WTF *)0xF0);
  *(void *)uint64_t v48 = &unk_1EE9D7220;
  uint64_t v49 = *(void *)buf;
  *(void *)buf = 0;
  *(void *)(v48 + 8) = v49;
  WTF::URL::URL(v48 + 16, (uint64_t *)&buf[8]);
  long long v50 = v88;
  *(_WORD *)(v48 + 72) = v89;
  *(_OWORD *)(v48 + 56) = v50;
  *(unsigned char *)(v48 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(unsigned char *)(v48 + 20WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v102)
  {
    *(void *)(v48 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v90;
    uint64_t v51 = *((void *)&v90 + 1);
    long long v90 = 0u;
    *(void *)(v48 + 88) = v51;
    uint64_t v52 = v91;
    uint64_t v91 = 0;
    *(void *)(v48 + 96) = v52;
    uint64_t v53 = v92;
    uint64_t v92 = 0;
    *(void *)(v48 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v53;
    uint64_t v54 = v93;
    uint64_t v93 = 0;
    *(void *)(v48 + 112) = v54;
    *(_OWORD *)(v48 + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v94;
    *(void *)(v48 + 136) = v95;
    uint64_t v55 = *((void *)&v95 + 1);
    long long v94 = 0u;
    long long v95 = 0u;
    *(void *)(v48 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v55;
    LOWORD(v55) = v96;
    *(unsigned char *)(v48 + 15WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v97;
    *(_WORD *)(v48 + 152) = v55;
    *(unsigned char *)(v48 + 16WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v98;
    uint64_t v56 = v99;
    uint64_t v99 = 0;
    *(void *)(v48 + 168) = v56;
    long long v57 = v100;
    *(unsigned char *)(v48 + 192) = v101;
    *(_OWORD *)(v48 + 176) = v57;
    *(unsigned char *)(v48 + 20WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 1;
  }
  *(_OWORD *)(v48 + 208) = v103;
  *(void *)(v48 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v104;
  uint64_t v58 = v105[0];
  uint64_t v104 = 0;
  v105[0] = 0;
  *(void *)(v48 + 232) = v58;
  uint64_t v67 = v48;
  WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(v34, v35, (const WTF::URL *)&v68, v41, 1, &v67);
  uint64_t v59 = v67;
  uint64_t v67 = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v105);
  uint64_t v60 = v104;
  uint64_t v104 = 0;
  if (v60) {
    CFRelease(*(CFTypeRef *)(v60 + 8));
  }
  if (v102) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v90, (WTF::StringImpl *)v37);
  }
  uint64_t v61 = *(WTF::StringImpl **)&buf[8];
  *(void *)&buf[8] = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2) {
      WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v37);
    }
    else {
      *(_DWORD *)v61 -= 2;
    }
  }
  __int16 v36 = *(unsigned int **)buf;
  *(void *)buf = 0;
  if (v36)
  {
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)v36, 0xFFFFFFFF);
    if (add == 1) {
      goto LABEL_51;
    }
  }
LABEL_43:
  uint64_t v62 = v68;
  uint64_t v68 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2) {
      WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v37);
    }
    else {
      *(_DWORD *)v62 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v71);
  if (v84) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v72, v63);
  }
  return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v85, v63);
}

uint64_t std::optional<WebKit::WebsitePoliciesData>::operator=[abi:sn180100]<WebKit::WebsitePoliciesData,void>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    WebKit::WebsitePoliciesData::operator=(a1, a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>(a1, a2);
    *(unsigned char *)(a1 + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 1;
  }
  return a1;
}

unsigned int *WebKit::ProvisionalPageProxy::didPerformClientRedirect(unsigned int *result, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *((void *)result + 9);
  if (v5)
  {
    uint64_t v7 = *(void *)(v5 + 272);
    uint64_t v6 = *(void *)(v5 + 280);
    if (v7 == a4 && v6 == a5)
    {
      uint64_t v9 = *(void *)(*((void *)result + 3) + 8);
      if (v9) {
        uint64_t v10 = v9 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(atomic_uint **)(*((void *)result + 5) + 16);
      atomic_fetch_add(v11 + 4, 1u);
      uint64_t v13 = (WebKit::WebProcessProxy *)v11;
      uint64_t result = (unsigned int *)WebKit::WebPageProxy::didPerformClientRedirectShared(v10, &v13, a2, a3, a4, a5);
      uint64_t v12 = v13;
      uint64_t v13 = 0;
      if (v12) {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v12 + 4);
      }
    }
  }
  return result;
}

unsigned int *WebKit::ProvisionalPageProxy::didStartProvisionalLoadForFrame(unsigned int *result, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, double a9, WTF::URL *a10, CFTypeRef **a11)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *((void *)result + 9);
  if (v11)
  {
    uint64_t v15 = *(void *)(v11 + 272);
    uint64_t v14 = *(void *)(v11 + 280);
    if (v15 == a2 && v14 == a3)
    {
      uint64_t v23 = result;
      if (!a7 || a6 == *((void *)result + 11))
      {
        uint64_t v24 = qword_1EB358370;
        if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = *((void *)v23 + 4);
          uint64_t v26 = *(void *)(*((void *)v23 + 3) + 8);
          if (v26) {
            uint64_t v27 = v26 - 16;
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v28 = *(void *)(*(void *)(v27 + 32) + 760);
          uint64_t v29 = *(void *)(*(void *)(*((void *)v23 + 5) + 16) + 136);
          if (v29) {
            LODWORD(v29) = *(_DWORD *)(v29 + 108);
          }
          uint64_t v30 = *((void *)v23 + 11);
          *(_DWORD *)buf = 134219264;
          *(void *)&uint8_t buf[4] = v23;
          __int16 v39 = 2048;
          uint64_t v40 = v28;
          __int16 v41 = 2048;
          uint64_t v42 = v25;
          __int16 v43 = 1024;
          int v44 = v29;
          __int16 v45 = 2048;
          uint64_t v46 = v30;
          __int16 v47 = 2048;
          uint64_t v48 = a2;
          _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didStartProvisionalLoadForFrame: frameID=%llu", buf, 0x3Au);
        }
        uint64_t result = (unsigned int *)WTF::String::operator=((uint64_t *)v23 + 39, (WTF::StringImpl **)a8);
        long long v31 = *(_OWORD *)(a8 + 24);
        *((_OWORD *)v23 + 2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_OWORD *)(a8 + 8);
        *((_OWORD *)v23 + 21) = v31;
        if (!*((unsigned char *)v23 + 96))
        {
          uint64_t v32 = *(void *)(*((void *)v23 + 3) + 8);
          uint64_t v33 = v32 - 16;
          if (!v32) {
            uint64_t v33 = 0;
          }
          uint64_t v34 = *(void *)(v33 + 328);
          if (v34 && *((unsigned char *)v23 + 308))
          {
            WebKit::FrameLoadState::didStartProvisionalLoad((WebKit::FrameLoadState *)(v34 + 40), (const WTF::URL *)a8);
            uint64_t v32 = *(void *)(*((void *)v23 + 3) + 8);
          }
          if (v32) {
            uint64_t v35 = (void *)(v32 - 16);
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v36 = *(void *)(*((void *)v23 + 5) + 16);
          atomic_fetch_add((atomic_uint *volatile)(v36 + 16), 1u);
          *(void *)buf = v36;
          uint64_t result = (unsigned int *)WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(v35, (WebKit::WebProcessProxy **)buf, a2, a3, a4, a5, a6, a7, a9, (const WTF::URL *)a8, a10, a11);
          uint64_t v37 = *(void *)buf;
          *(void *)buf = 0;
          if (v37) {
            return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v37 + 16));
          }
        }
      }
    }
  }
  return result;
}

void WebKit::ProvisionalPageProxy::didCommitLoadForFrame(uint64_t a1, WTF::String *a2, uint64_t a3, uint64_t a4, unsigned char *a5, WebCore::ResourceRequestBase *a6, uint64_t a7, uint64_t a8, WTF::StringImpl **a9, __int16 a10, const void **a11, __int16 a12, char a13, char a14, unsigned __int8 a15, CFTypeRef **a16)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *(void *)(a1 + 72);
  if (v16)
  {
    uint64_t v19 = *(void *)(v16 + 272);
    uint64_t v18 = *(void *)(v16 + 280);
    BOOL v20 = v19 == a3 && v18 == a4;
    if (v20 && (!(_BYTE)a8 || a7 == *(void *)(a1 + 88)))
    {
      uint64_t v23 = qword_1EB358370;
      if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        uint64_t v25 = *(void *)(*(void *)(a1 + 24) + 8);
        if (v25) {
          uint64_t v26 = v25 - 16;
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = *(void *)(*(void *)(v26 + 32) + 760);
        uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 136);
        if (v28) {
          LODWORD(v28) = *(_DWORD *)(v28 + 108);
        }
        uint64_t v29 = *(void *)(a1 + 88);
        *(_DWORD *)buf = 134219264;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v27;
        __int16 v70 = 2048;
        uint64_t v71 = v24;
        __int16 v72 = 1024;
        int v73 = v28;
        __int16 v74 = 2048;
        uint64_t v75 = v29;
        __int16 v76 = 2048;
        uint64_t v77 = a3;
        _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didCommitLoadForFrame: frameID=%llu", buf, 0x3Au);
      }
      uint64_t v30 = *(void *)(*(void *)(a1 + 24) + 8);
      uint64_t v58 = v30;
      if (v30) {
        uint64_t v31 = v30 - 16;
      }
      else {
        uint64_t v31 = 0;
      }
      CFRetain(*(CFTypeRef *)(v31 + 8));
      uint64_t v33 = *(void *)(v31 + 272);
      {
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v33 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v32))
      {
        uint64_t v35 = *(void *)(*(void *)(a1 + 24) + 8);
        if (v35) {
          uint64_t v36 = v35 - 16;
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v37 = *(void *)(v36 + 336);
        if (v37)
        {
          CFRetain(*(CFTypeRef *)(v37 + 8));
          uint64_t v39 = *(void *)(v31 + 328);
          uint64_t v40 = *(_DWORD **)(a1 + 40);
          ++*v40;
          __int16 v41 = *(WebKit::FrameProcess **)(v39 + 32);
          *(void *)(v39 + 32) = v40;
          if (v41) {
            WTF::RefCounted<WebKit::FrameProcess>::deref(v41, v38);
          }
          uint64_t v42 = *(void *)(v37 + 24);
          if (v42)
          {
            uint64_t v43 = *(void *)(v42 + 8);
            if (v43)
            {
              CFRetain(*(CFTypeRef *)(v43 - 8));
              WebKit::Site::Site((WebKit::Site *)buf, (const WTF::URL *)(v37 + 48));
              int v44 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a6);
              WebKit::Site::Site((WebKit::Site *)&v67, v44);
              if (!WTF::equal(*(WTF **)buf, v67, v45)
                || (WTF::equal(*(WTF **)&buf[8], v68, v46) & 1) == 0)
              {
                uint64_t v48 = *(void *)(v31 + 256);
                long long v65 = *(_OWORD *)(*(void *)(v31 + 328) + 272);
                v64[0] = 0;
                v64[8] = 0;
                v66[0] = &v65;
                v66[1] = v64;
                WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDidCommitInAnotherProcess>(v48, (uint64_t)v66, *(void *)(*(void *)(v31 + 32) + 1928), 0);
                WebKit::BrowsingContextGroup::transitionPageToRemotePage(*(WebKit::BrowsingContextGroup **)(a1 + 48), (atomic_uint **)v31, (const WebKit::Site *)buf);
              }
              uint64_t v49 = v68;
              uint64_t v68 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2) {
                  WTF::StringImpl::destroy(v49, v47);
                }
                else {
                  *(_DWORD *)v49 -= 2;
                }
              }
              long long v50 = v67;
              uint64_t v67 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2) {
                  WTF::StringImpl::destroy(v50, v47);
                }
                else {
                  *(_DWORD *)v50 -= 2;
                }
              }
              uint64_t v51 = *(WTF::StringImpl **)&buf[8];
              *(void *)&buf[8] = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2) {
                  WTF::StringImpl::destroy(v51, v47);
                }
                else {
                  *(_DWORD *)v51 -= 2;
                }
              }
              uint64_t v52 = *(WTF::StringImpl **)buf;
              *(void *)buf = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2) {
                  WTF::StringImpl::destroy(v52, v47);
                }
                else {
                  *(_DWORD *)v52 -= 2;
                }
              }
              CFRelease(*(CFTypeRef *)(v43 - 8));
            }
          }
          CFRelease(*(CFTypeRef *)(v37 + 8));
        }
        else
        {
          uint64_t v55 = *(void *)(v31 + 328);
          uint64_t v56 = *(_DWORD **)(a1 + 40);
          ++*v56;
          long long v57 = *(WebKit::FrameProcess **)(v55 + 32);
          *(void *)(v55 + 32) = v56;
          if (v57) {
            WTF::RefCounted<WebKit::FrameProcess>::deref(v57, v34);
          }
        }
      }
      *(void *)buf = 0;
      WTF::URL::invalidate((WTF::URL *)buf);
      WTF::URL::operator=(a1 + 312, (uint64_t)buf);
      uint64_t v54 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, v53);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
      WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)(a1 + 352));
      *(unsigned char *)(a1 + 305) = 1;
      WebKit::WebPageProxy::commitProvisionalPage(v31, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
      if (v58) {
        CFRelease(*(CFTypeRef *)(v58 - 8));
      }
    }
  }
}

unsigned int *WebKit::ProvisionalPageProxy::didNavigateWithNavigationData(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *((void *)result + 9);
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 272);
    uint64_t v5 = *(void *)(v4 + 280);
    if (v6 == a3 && v5 == a4)
    {
      uint64_t v8 = *(void *)(*((void *)result + 3) + 8);
      if (v8) {
        uint64_t v9 = v8 - 16;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void *)(*((void *)result + 5) + 16);
      atomic_fetch_add((atomic_uint *volatile)(v10 + 16), 1u);
      uint64_t v12 = v10;
      uint64_t result = (unsigned int *)WebKit::WebPageProxy::didNavigateWithNavigationDataShared(v9, (uint64_t)&v12, a2, a3, a4);
      uint64_t v11 = v12;
      uint64_t v12 = 0;
      if (v11) {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
      }
    }
  }
  return result;
}

unsigned int *WebKit::ProvisionalPageProxy::didChangeProvisionalURLForFrame(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6)
{
  uint64_t v6 = *((void *)result + 9);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 272);
    uint64_t v7 = *(void *)(v6 + 280);
    BOOL v9 = v8 == a2 && v7 == a3;
    if (v9 && (!(_BYTE)a5 || a4 == *((void *)result + 11)))
    {
      uint64_t v10 = *(void *)(*((void *)result + 3) + 8);
      if (v10) {
        uint64_t v11 = (WebKit::WebPageProxy *)(v10 - 16);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(atomic_uint **)(*((void *)result + 5) + 16);
      atomic_fetch_add(v12 + 4, 1u);
      uint64_t v14 = (WebKit::WebProcessProxy *)v12;
      uint64_t result = (unsigned int *)WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(v11, &v14, a2, a3, a4, a5, a6);
      uint64_t v13 = v14;
      uint64_t v14 = 0;
      if (v13) {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v13 + 4);
      }
    }
  }
  return result;
}

void WebKit::ProvisionalPageProxy::decidePolicyForNavigationActionAsync(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1[9];
  if (v3
    && ((v5 = *(void *)(v3 + 272), uint64_t v4 = *(void *)(v3 + 280), v5 == *(void *)(a2 + 2104))
      ? (BOOL v6 = v4 == *(void *)(a2 + 2112))
      : (BOOL v6 = 0),
        v6 && (!*(unsigned char *)(a2 + 2160) || *(void *)(a2 + 2152) == a1[11])))
  {
    uint64_t v7 = *(void *)(a1[3] + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(atomic_uint **)(a1[5] + 16);
    atomic_fetch_add(v9 + 4, 1u);
    uint64_t v14 = (WebKit::WebProcessProxy *)v9;
    WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(v8, &v14, (uint64_t *)a2, a3);
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v10 + 4);
    }
  }
  else
  {
    LOWORD(v1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    BYTE2(v1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 2;
    char v15 = 0;
    char v16 = 0;
    char v17 = 0;
    char v18 = 0;
    v19[0] = 0;
    char v20 = 0;
    LOBYTE(v21) = 0;
    char v22 = 0;
    char v23 = 0;
    char v25 = 0;
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebKit::WebProcessProxy **))(*(void *)v11 + 16))(v11, &v14);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    if (v25)
    {
      uint64_t v13 = v24;
      uint64_t v24 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
    if (v22) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
    }
    if (v20) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v19, v12);
    }
  }
}

void WebKit::ProvisionalPageProxy::decidePolicyForResponse(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, WebCore::ResourceRequestBase *a6, unsigned __int8 a7, _DWORD **a8, __int16 a9, uint64_t *a10)
{
  uint64_t v10 = a1[9];
  if (v10
    && ((uint64_t v12 = *(void *)(v10 + 272), v11 = *(void *)(v10 + 280), v12 == *(void *)(a2 + 248))
      ? (BOOL v13 = v11 == *(void *)(a2 + 256))
      : (BOOL v13 = 0),
        v13 && (!a4 || a3 == a1[11])))
  {
    uint64_t v16 = *(void *)(a1[3] + 8);
    if (v16) {
      uint64_t v17 = v16 - 16;
    }
    else {
      uint64_t v17 = 0;
    }
    char v18 = *(atomic_uint **)(a1[5] + 16);
    atomic_fetch_add(v18 + 4, 1u);
    uint64_t v19 = a1[4];
    char v25 = (WebKit::WebProcessProxy *)v18;
    LOWORD(v2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a9;
    WebKit::WebPageProxy::decidePolicyForResponseShared(v17, &v25, v19, a2, a3, a4, a5, a6, a7, a8, v24, a10);
    char v20 = v25;
    char v25 = 0;
    if (v20) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v20 + 4);
    }
  }
  else
  {
    LOWORD(v25) = 0;
    BYTE2(v25) = 2;
    char v26 = 0;
    char v27 = 0;
    char v28 = 0;
    char v29 = 0;
    v30[0] = 0;
    char v31 = 0;
    LOBYTE(v32) = 0;
    char v33 = 0;
    char v34 = 0;
    char v36 = 0;
    uint64_t v21 = *a10;
    *a10 = 0;
    (*(void (**)(uint64_t, WebKit::WebProcessProxy **))(*(void *)v21 + 16))(v21, &v25);
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    if (v36)
    {
      char v23 = v35;
      uint64_t v35 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v22);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
    }
    if (v33) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v32);
    }
    if (v31) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v30, v22);
    }
  }
}

unsigned int *WebKit::ProvisionalPageProxy::didPerformServerRedirect(unsigned int *result, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *((void *)result + 9);
  if (v5)
  {
    uint64_t v7 = *(void *)(v5 + 272);
    uint64_t v6 = *(void *)(v5 + 280);
    if (v7 == a4 && v6 == a5)
    {
      uint64_t v9 = *(void *)(*((void *)result + 3) + 8);
      if (v9) {
        uint64_t v10 = v9 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(atomic_uint **)(*((void *)result + 5) + 16);
      atomic_fetch_add(v11 + 4, 1u);
      BOOL v13 = (WebKit::WebProcessProxy *)v11;
      uint64_t result = (unsigned int *)WebKit::WebPageProxy::didPerformServerRedirectShared(v10, &v13, a2, a3, a4, a5);
      uint64_t v12 = v13;
      BOOL v13 = 0;
      if (v12) {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v12 + 4);
      }
    }
  }
  return result;
}

unsigned int *WebKit::ProvisionalPageProxy::didReceiveServerRedirectForProvisionalLoadForFrame(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, WebCore::ResourceRequestBase *a6, CFTypeRef **a7)
{
  uint64_t v7 = *((void *)result + 9);
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 272);
    uint64_t v8 = *(void *)(v7 + 280);
    BOOL v10 = v9 == a2 && v8 == a3;
    if (v10 && (!a5 || a4 == *((void *)result + 11)))
    {
      uint64_t v11 = *(void *)(*((void *)result + 3) + 8);
      if (v11) {
        uint64_t v12 = (WebKit::WebPageProxy *)(v11 - 16);
      }
      else {
        uint64_t v12 = 0;
      }
      BOOL v13 = *(atomic_uint **)(*((void *)result + 5) + 16);
      atomic_fetch_add(v13 + 4, 1u);
      char v15 = (WebKit::WebProcessProxy *)v13;
      uint64_t result = (unsigned int *)WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(v12, &v15, a2, a3, a4, a5, a6, a7);
      uint64_t v14 = v15;
      char v15 = 0;
      if (v14) {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v14 + 4);
      }
    }
  }
  return result;
}

void WebKit::ProvisionalPageProxy::startURLSchemeTask(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1[3] + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a1[5] + 16);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
  uint64_t v7 = v5;
  WebKit::WebPageProxy::startURLSchemeTaskShared(v4, a2, &v7, a1[4], a3);
  uint64_t v6 = v7;
  uint64_t v7 = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
}

void WebKit::ProvisionalPageProxy::decidePolicyForNavigationActionSync(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(WebKit::WebProcessProxy **)(a2 + 2152);
  char v4 = *(unsigned char *)(a2 + 2160);
  if (*(unsigned char *)(a2 + 1856)
    && ((uint64_t v5 = a1[9]) == 0
     || ((v7 = *(void *)(v5 + 272), uint64_t v6 = *(void *)(v5 + 280), v7 == *(void *)(a2 + 2104))
       ? (BOOL v8 = v6 == *(void *)(a2 + 2112))
       : (BOOL v8 = 0),
         v8))
    && (*(unsigned char *)(a2 + 2160) ? (BOOL v9 = v3 == (WebKit::WebProcessProxy *)a1[11]) : (BOOL v9 = 0), v9))
  {
    uint64_t v12 = *(void *)(a1[3] + 8);
    if (v12) {
      uint64_t v13 = v12 - 16;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(atomic_uint **)(a1[5] + 16);
    atomic_fetch_add(v14 + 4, 1u);
    v17[0] = (WebKit::WebProcessProxy *)v14;
    WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(v13, v17, a2, a3);
    char v15 = v17[0];
    v17[0] = 0;
    if (v15) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v15 + 4);
    }
  }
  else
  {
    LOWORD(v17[0]) = 0;
    BYTE2(v17[0]) = 2;
    v17[1] = v3;
    char v18 = v4;
    char v19 = 0;
    char v20 = 0;
    v21[0] = 0;
    char v22 = 0;
    LOBYTE(v23) = 0;
    char v24 = 0;
    char v25 = 0;
    char v27 = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebKit::WebProcessProxy **))(*(void *)v10 + 16))(v10, v17);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    if (v27)
    {
      uint64_t v16 = v26;
      char v26 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v11);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    if (v24) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v23);
    }
    if (v22) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v21, v11);
    }
  }
}

void WebKit::ProvisionalPageProxy::logDiagnosticMessageFromWebProcess(uint64_t a1, WTF::String *this, uint64_t a3, int a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v8) {
      BOOL v9 = (WebKit::WebPageProxy *)(v8 - 16);
    }
    else {
      BOOL v9 = 0;
    }
    WebKit::WebPageProxy::logDiagnosticMessage(v9, (uint64_t)this, a3, a4);
  }
  else
  {
    uint64_t v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v12 = 136446210;
      uint64_t v13 = "void WebKit::ProvisionalPageProxy::logDiagnosticMessageFromWebProcess(const String &, const String &, WebCor"
            "e::ShouldSample)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ProvisionalPageProxy.cpp 486: Invalid message dispatched %{public}s", (uint8_t *)&v12, 0xCu);
    }
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 144);
    if (v11) {
      *(unsigned char *)(v11 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

BOOL WTF::String::containsOnlyASCII(WTF::String *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    return 1;
  }
  unint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(unsigned int *)(v1 + 4);
  BOOL v5 = (v2 & 7) == 0 || v3 == 0;
  if ((*(unsigned char *)(v1 + 16) & 4) != 0)
  {
    uint64_t v9 = v2 + v3;
    if (v5)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v18 = v3 - 1;
      char v19 = v2 + 1;
      do
      {
        unsigned int v20 = *(unsigned __int8 *)v2++;
        v10 |= v20;
        if ((v19 & 7) == 0) {
          break;
        }
        uint64_t v21 = v18--;
        ++v19;
      }
      while (v21);
    }
    while (v2 < (v9 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v22 = *(void *)v2;
      v2 += 8;
      v10 |= v22;
    }
    while (v2 != v9)
    {
      unsigned int v23 = *(unsigned __int8 *)v2++;
      v10 |= v23;
    }
    unint64_t v17 = v10 & 0x8080808080808080;
  }
  else
  {
    unint64_t v6 = v2 + 2 * v3;
    if (v5)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v11 = 2 * v3 - 2;
      char v12 = v2 + 2;
      do
      {
        unsigned int v13 = *(unsigned __int16 *)v2;
        v2 += 2;
        v7 |= v13;
        if ((v12 & 7) == 0) {
          break;
        }
        uint64_t v14 = v11;
        v11 -= 2;
        v12 += 2;
      }
      while (v14);
    }
    while (v2 < (v6 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v15 = *(void *)v2;
      v2 += 8;
      v7 |= v15;
    }
    while (v2 != v6)
    {
      unsigned int v16 = *(unsigned __int16 *)v2;
      v2 += 2;
      v7 |= v16;
    }
    unint64_t v17 = v7 & 0xFF80FF80FF80FF80;
  }
  return v17 == 0;
}

void WebKit::ProvisionalPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess(uint64_t a1, WTF::String *this, uint64_t a3, int a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v8) {
      uint64_t v9 = (WebKit::WebPageProxy *)(v8 - 16);
    }
    else {
      uint64_t v9 = 0;
    }
    WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacy(v9, (uint64_t)this, a3, a4);
  }
  else
  {
    uint64_t v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v12 = 136446210;
      unsigned int v13 = "void WebKit::ProvisionalPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess(const String &, con"
            "st String &, WebCore::ShouldSample)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ProvisionalPageProxy.cpp 493: Invalid message dispatched %{public}s", (uint8_t *)&v12, 0xCu);
    }
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 144);
    if (v11) {
      *(unsigned char *)(v11 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

void WebKit::ProvisionalPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess(uint64_t a1, WTF::String *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (WTF::String::containsOnlyASCII(this))
  {
__ZN6WebKit12WebPageProxy39logDiagnosticMessageWithValueDictionaryERKN3WTF6StringES4_RKN7WebCore27DiagnosticLoggingDictionaryENS5_12ShouldSampleE:
    JUMPOUT(0x198E8618CLL);
  }
  uint64_t v3 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    int v5 = 136446210;
    unint64_t v6 = "void WebKit::ProvisionalPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess(const String &, const "
         "String &, const WebCore::DiagnosticLoggingClient::ValueDictionary &, WebCore::ShouldSample)";
    _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ProvisionalPageProxy.cpp 500: Invalid message dispatched %{public}s", (uint8_t *)&v5, 0xCu);
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 16) + 144);
  if (!v4)
  {
    __break(0xC471u);
    goto __ZN6WebKit12WebPageProxy39logDiagnosticMessageWithValueDictionaryERKN3WTF6StringES4_RKN7WebCore27DiagnosticLoggingDictionaryENS5_12ShouldSampleE;
  }
  *(unsigned char *)(v4 + 98) = 1;
}

unsigned int *WebKit::ProvisionalPageProxy::backForwardAddItem(void *a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  uint64_t v4 = *(void *)(a1[3] + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(atomic_uint **)(a1[5] + 16);
  atomic_fetch_add(v6 + 4, 1u);
  uint64_t v9 = (WebKit::WebProcessProxy *)v6;
  uint64_t result = (unsigned int *)WebKit::WebPageProxy::backForwardAddItemShared(v5, &v9, a2, a3, a4, a1[10] != 0);
  uint64_t v8 = v9;
  uint64_t v9 = 0;
  if (v8) {
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v8 + 4);
  }
  return result;
}

WTF *WebKit::ProvisionalPageProxy::registerWebProcessAccessibilityToken(WTF *result, void *a2, WTF *this)
{
  uint64_t v4 = result;
  if (this)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = WTF::fastMalloc(this);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *((unsigned char *)v8 + v6) = *((unsigned char *)v8 + (void)a2);
      uint64_t v8 = (WTF *)((char *)v8 + 1);
    }
    while (this != v8);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t result = (WTF *)*((void *)v4 + 48);
  if (result)
  {
    *((void *)v4 + 48) = 0;
    *((_DWORD *)v4 + 98) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  *((void *)v4 + 48) = v7;
  *((_DWORD *)v4 + 98) = this;
  *((_DWORD *)v4 + 99) = this;
  return result;
}

void WebKit::ProvisionalPageProxy::contentFilterDidBlockLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 16);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
  WebKit::WebPageProxy::contentFilterDidBlockLoadForFrameShared(v5, (uint64_t)v7, a2, a3, a4);
  if (v6)
  {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  }
}

void WebKit::ProvisionalPageProxy::didCreateContextInGPUProcessForVisibilityPropagation(WebKit::ProvisionalPageProxy *this, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = *(void *)(*((void *)this + 3) + 8);
    if (v6) {
      uint64_t v7 = v6 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(*(void *)(v7 + 32) + 760);
    uint64_t v9 = *(void *)(*(void *)(*((void *)this + 5) + 16) + 136);
    if (v9) {
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    }
    uint64_t v10 = *((void *)this + 11);
    int v11 = 134219264;
    int v12 = this;
    __int16 v13 = 2048;
    uint64_t v14 = v8;
    __int16 v15 = 2048;
    uint64_t v16 = v5;
    __int16 v17 = 1024;
    int v18 = v9;
    __int16 v19 = 2048;
    uint64_t v20 = v10;
    __int16 v21 = 1024;
    int v22 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didCreateContextInGPUProcessForVisibilityPropagation: contextID=%u", (uint8_t *)&v11, 0x36u);
  }
  *((_DWORD *)this + 103) = a2;
}

IPC::Encoder *WebKit::ProvisionalPageProxy::swipeAnimationDidEnd(WebKit::ProvisionalPageProxy *this)
{
  uint64_t v1 = (char *)this + 16;
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2506;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v1 + 32))(v1, &v8, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::ProvisionalPageProxy::didReceiveMessage(WebKit::ProvisionalPageProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 <= 0x78C)
  {
    if (*((unsigned __int16 *)a3 + 25) <= 0x76Bu)
    {
      switch(*((_WORD *)a3 + 25))
      {
        case 0x75B:
          IPC::Decoder::decode<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, buf);
          if (v64) {
            WebKit::ProvisionalPageProxy::contentFilterDidBlockLoadForFrame((uint64_t)this, (uint64_t)buf, v62, v63);
          }
          std::__optional_destruct_base<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf);
          return;
        case 0x75C:
        case 0x75D:
        case 0x760:
          return;
        case 0x75E:
        case 0x762:
          goto LABEL_42;
        case 0x75F:
          IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>(a3, buf);
          if (!v93) {
            return;
          }
          uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (!v21) {
            goto LABEL_71;
          }
          *(void *)&long long v53 = v20;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v53 + 1, a2);
          int v22 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v22 = &unk_1EE9D7248;
          v22[1] = v53;
          uint64_t v23 = *((void *)&v53 + 1);
          *((void *)&v53 + 1) = 0;
          void v22[2] = v23;
          *(void *)&long long v55 = v22;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53 + 1);
          if (!v93) {
            goto LABEL_127;
          }
          WebKit::ProvisionalPageProxy::decidePolicyForNavigationActionAsync(this, (uint64_t)buf, (uint64_t *)&v55);
          uint64_t v24 = v55;
          *(void *)&long long v55 = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
LABEL_71:
          if (v93) {
            WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
          }
          break;
        case 0x761:
          IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>>(a3, buf);
          if (!v92) {
            return;
          }
          uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if (!(_BYTE)v26) {
            goto LABEL_78;
          }
          *(void *)&long long v53 = v25;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v53 + 1, a2);
          char v27 = (void *)WTF::fastMalloc((WTF *)0x18);
          *char v27 = &unk_1EE9D7270;
          v27[1] = v53;
          uint64_t v28 = *((void *)&v53 + 1);
          *((void *)&v53 + 1) = 0;
          void v27[2] = v28;
          *(void *)&long long v55 = v27;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53 + 1);
          if (!v92) {
            goto LABEL_127;
          }
          WebKit::ProvisionalPageProxy::decidePolicyForResponse(this, (uint64_t)buf, v67, v68, (uint64_t)v69, (WebCore::ResourceRequestBase *)v85, v89, &v90, v91, (uint64_t *)&v55);
          uint64_t v29 = v55;
          *(void *)&long long v55 = 0;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
LABEL_78:
          if (v92) {
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>::~__tuple_impl((uint64_t)buf, v26);
          }
          break;
        default:
          if (v6 == 1869)
          {
            IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>>(a3, buf);
            if (v69[16]) {
              WebKit::ProvisionalPageProxy::backForwardAddItem(this, *(uint64_t *)buf, *(uint64_t *)&buf[8], (WTF::StringImpl **)&buf[16]);
            }
            std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf);
          }
          return;
      }
    }
    else if (*((unsigned __int16 *)a3 + 25) > 0x77Bu)
    {
      if (v6 != 1916)
      {
        if (v6 != 1921 && v6 != 1923) {
          return;
        }
        goto LABEL_42;
      }
      IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>>(a3, buf);
      if (v88)
      {
        WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame((uint64_t)this, (uint64_t)buf, (WebCore::ResourceRequestBase *)&v67, v73, v74, &v75, (uint64_t)&v76, v85[32], (uint64_t *)&v86, LOBYTE(v87));
        if (v88) {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>::~__tuple_impl((uint64_t)buf, v52);
        }
      }
    }
    else
    {
      switch(*((_WORD *)a3 + 25))
      {
        case 0x76C:
          goto LABEL_42;
        case 0x76D:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>>(a3, buf);
          if (v61)
          {
            WebKit::ProvisionalPageProxy::didChangeProvisionalURLForFrame((unsigned int *)this, *(uint64_t *)buf, *(uint64_t *)&buf[8], *(uint64_t *)&buf[16], v57, v58);
            if (v61)
            {
              uint64_t v8 = v58[0];
              v58[0] = 0;
              if (v8) {
                goto LABEL_60;
              }
            }
          }
          break;
        case 0x771:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>>(a3, buf);
          if (v85[0])
          {
            WebKit::ProvisionalPageProxy::didCommitLoadForFrame((uint64_t)this, (WTF::String *)a2, *(uint64_t *)buf, *(uint64_t *)&buf[8], &buf[16], (WebCore::ResourceRequestBase *)v69, (uint64_t)v75, v76, &v77, v78, &v79, v80, v81, v82, v83, &v84);
            if (v85[0]) {
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>::~__tuple_impl((uint64_t)buf, v31);
            }
          }
          break;
        case 0x773:
          uint64_t v32 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v32 & 0xFF00000000) != 0)
          {
            int v33 = v32;
            char v34 = qword_1EB358370;
            if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v35 = *((void *)this + 4);
              uint64_t v36 = *(void *)(*((void *)this + 3) + 8);
              if (v36) {
                uint64_t v37 = v36 - 16;
              }
              else {
                uint64_t v37 = 0;
              }
              uint64_t v38 = *(void *)(*(void *)(v37 + 32) + 760);
              uint64_t v39 = *(void *)(*(void *)(*((void *)this + 5) + 16) + 136);
              if (v39) {
                LODWORD(v39) = *(_DWORD *)(v39 + 108);
              }
              uint64_t v40 = (WTF::StringImpl *)*((void *)this + 11);
              *(_DWORD *)buf = 134219264;
              *(void *)&uint8_t buf[4] = this;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = v38;
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v57 = v35;
              LOWORD(v58[0]) = 1024;
              *(_DWORD *)((char *)v58 + 2) = v39;
              HIWORD(v58[0]) = 2048;
              v58[1] = v40;
              __int16 v59 = 1024;
              int v60 = v33;
              _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didCreateContextInWebProcessForVisibilityPropagation: contextID=%u", buf, 0x36u);
            }
            *((_DWORD *)this + 102) = v33;
          }
          break;
        case 0x776:
          uint64_t v41 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
          if (v42)
          {
            uint64_t v43 = v41;
            uint64_t v44 = *(void *)(*((void *)this + 3) + 8);
            uint64_t v45 = *(void *)(*((void *)this + 5) + 16);
            uint64_t v46 = v44 ? v44 - 16 : 0;
            atomic_fetch_add((atomic_uint *volatile)(v45 + 16), 1u);
            *(void *)buf = v45;
            WebKit::WebPageProxy::didDestroyNavigationShared(v46, (uint64_t)buf, v43);
            uint64_t v47 = *(void *)buf;
            *(void *)buf = 0;
            if (v47) {
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v47 + 16));
            }
          }
          break;
        default:
          return;
      }
    }
    return;
  }
  if (*((unsigned __int16 *)a3 + 25) <= 0x7CDu)
  {
    if (*((unsigned __int16 *)a3 + 25) <= 0x79Du)
    {
      switch(*((_WORD *)a3 + 25))
      {
        case 0x78D:
          IPC::Decoder::decode<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, buf);
          if (v72) {
            WebKit::ProvisionalPageProxy::didNavigateWithNavigationData((unsigned int *)this, (uint64_t)buf, v70, v71);
          }
          std::__optional_destruct_base<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v9);
          break;
        case 0x78F:
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, buf);
          if (LOBYTE(v58[0])) {
            WebKit::ProvisionalPageProxy::didPerformClientRedirect((unsigned int *)this, (WTF::StringImpl **)buf, (WTF::StringImpl **)&buf[8], *(uint64_t *)&buf[16], v57);
          }
          goto LABEL_84;
        case 0x791:
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, buf);
          if (LOBYTE(v58[0])) {
            WebKit::ProvisionalPageProxy::didPerformServerRedirect((unsigned int *)this, (WTF::StringImpl **)buf, (WTF::StringImpl **)&buf[8], *(uint64_t *)&buf[16], v57);
          }
LABEL_84:
          std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v30);
          break;
        case 0x796:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>>(a3, buf);
          if (v66) {
            WebKit::ProvisionalPageProxy::didReceiveServerRedirectForProvisionalLoadForFrame((unsigned int *)this, *(uint64_t *)buf, *(uint64_t *)&buf[8], *(uint64_t *)&buf[16], v57, (WebCore::ResourceRequestBase *)v58, &v65);
          }
          std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf);
          break;
        default:
          return;
      }
      return;
    }
    if (v6 - 1950 < 2)
    {
LABEL_42:
      uint64_t v12 = *(void *)(*((void *)this + 3) + 8);
      if (v12) {
        __int16 v13 = (WebKit::WebPageProxy *)(v12 - 16);
      }
      else {
        __int16 v13 = 0;
      }
      WebKit::WebPageProxy::didReceiveMessage(v13, (IPC::Connection *)a2, a3);
      return;
    }
    if (v6 == 1952)
    {
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>>(a3, buf);
      if (v88)
      {
        WebKit::ProvisionalPageProxy::didStartProvisionalLoadForFrame((unsigned int *)this, *(uint64_t *)buf, *(uint64_t *)&buf[8], &buf[16], (uint64_t)v69, (uint64_t)v75, v76, (uint64_t)&v77, v87, (WTF::URL *)v85, &v86);
        if (v88) {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>::~__tuple_impl((uint64_t)buf, v51);
        }
      }
      return;
    }
    if (v6 != 1996) {
      return;
    }
    IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>(a3, buf);
    if ((_BYTE)v57) {
      WebKit::ProvisionalPageProxy::logDiagnosticMessageFromWebProcess((uint64_t)this, (WTF::String *)buf, (uint64_t)&buf[8], buf[16]);
    }
    goto LABEL_116;
  }
  if (*((unsigned __int16 *)a3 + 25) <= 0x80Du)
  {
    if (*((unsigned __int16 *)a3 + 25) > 0x7F4u)
    {
      if (v6 == 2037)
      {
        IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, buf);
        if (LOBYTE(v58[0])) {
          WebKit::ProvisionalPageProxy::registerWebProcessAccessibilityToken(this, *(void **)buf, *(WTF **)&buf[8]);
        }
      }
      else if (v6 == 2047)
      {
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)buf);
        if (buf[8])
        {
          uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
          if ((_BYTE)v7)
          {
            *(void *)&long long v53 = v14;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v53 + 1, a2);
            __int16 v15 = (void *)WTF::fastMalloc((WTF *)0x18);
            *__int16 v15 = &unk_1EE9D7298;
            v15[1] = v53;
            uint64_t v16 = *((void *)&v53 + 1);
            *((void *)&v53 + 1) = 0;
            v15[2] = v16;
            *(void *)&long long v55 = v15;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53 + 1);
            if (!buf[8]) {
LABEL_127:
            }
              __break(1u);
            uint64_t v17 = *(void *)(*((void *)this + 3) + 8);
            if (v17) {
              uint64_t v18 = v17 - 16;
            }
            else {
              uint64_t v18 = 0;
            }
            WebKit::WebPageProxy::requestPasswordForQuickLookDocumentInMainFrameShared(v18, (uint64_t)buf, (uint64_t *)&v55);
            uint64_t v19 = v55;
            *(void *)&long long v55 = 0;
            if (v19) {
              (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
          }
          if (buf[8])
          {
            uint64_t v8 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            if (v8)
            {
LABEL_60:
              if (*(_DWORD *)v8 == 2) {
                WTF::StringImpl::destroy(v8, v7);
              }
              else {
                *(_DWORD *)v8 -= 2;
              }
            }
          }
        }
      }
      return;
    }
    if (v6 != 1998)
    {
      if (v6 == 2000)
      {
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>>(a3, buf);
        if (LOBYTE(v58[0])) {
          WebKit::ProvisionalPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess((uint64_t)this, (WTF::String *)buf);
        }
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v10);
      }
      return;
    }
    IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>(a3, buf);
    if ((_BYTE)v57) {
      WebKit::ProvisionalPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess((uint64_t)this, (WTF::String *)buf, (uint64_t)&buf[8], buf[16]);
    }
LABEL_116:
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v11);
    return;
  }
  if (*((unsigned __int16 *)a3 + 25) <= 0x83Bu)
  {
    if (v6 != 2062 && v6 != 2077) {
      return;
    }
    goto LABEL_42;
  }
  switch(v6)
  {
    case 0x83Cu:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(a3, (uint64_t)&v53);
      if (v54)
      {
        uint64_t v48 = *(void *)(*((void *)this + 3) + 8);
        if (v48) {
          uint64_t v49 = v48 - 16;
        }
        else {
          uint64_t v49 = 0;
        }
        long long v55 = v53;
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v49 + 200));
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add((uint64_t *)(v49 + 192), (uint64_t *)&v55, (uint64_t)buf);
      }
      break;
    case 0x83Du:
      IPC::Decoder::decode<std::tuple<WebKit::URLSchemeTaskParameters>>((uint64_t *)a3, buf);
      if ((_BYTE)v75) {
        WebKit::ProvisionalPageProxy::startURLSchemeTask(this, (uint64_t)a2, (uint64_t *)buf);
      }
      std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v50);
      break;
    case 0x84Au:
      goto LABEL_42;
    default:
      return;
  }
}

uint64_t WebKit::ProvisionalPageProxy::didReceiveSyncMessage(void *a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, IPC::Encoder **a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v7 = a3[25];
  if (v7 == 3751)
  {
    IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>((IPC::Decoder *)a3, v26);
    BOOL v8 = v28 != 0;
    if (v28)
    {
      __int16 v15 = *a4;
      *a4 = 0;
      uint64_t v23 = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v24, a2);
      uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v16 = &unk_1EE9D72E8;
      v16[1] = v23;
      uint64_t v17 = v24[0];
      v24[0] = 0;
      v16[2] = v17;
      uint64_t v25 = v16;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v24);
      if (v28)
      {
        WebKit::ProvisionalPageProxy::decidePolicyForNavigationActionSync(a1, (uint64_t)v26, (uint64_t *)&v25);
        uint64_t v18 = (uint64_t)v25;
        uint64_t v25 = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        if (v28) {
          WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v26);
        }
        return v8;
      }
      goto LABEL_23;
    }
    return v8;
  }
  if (v7 == 3741)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)a3, (uint64_t)v26);
    BOOL v8 = v27 != 0;
    if (v27)
    {
      uint64_t v9 = *a4;
      *a4 = 0;
      int v22 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v24, a2);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v10 = &unk_1EE9D72C0;
      v10[1] = v22;
      int v11 = v24[0];
      v24[0] = 0;
      void v10[2] = v11;
      uint64_t v25 = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v24);
      if (v27)
      {
        uint64_t v12 = *(void *)(a1[3] + 8);
        if (v12) {
          uint64_t v13 = v12 - 16;
        }
        else {
          uint64_t v13 = 0;
        }
        WebKit::WebPageProxy::backForwardGoToItemShared(v13, v26, (uint64_t *)&v25);
        uint64_t v14 = (uint64_t)v25;
        uint64_t v25 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        return v8;
      }
LABEL_23:
      __break(1u);
    }
    return v8;
  }
  uint64_t v20 = *(void *)(a1[3] + 8);
  if (v20) {
    uint64_t v21 = v20 - 16;
  }
  else {
    uint64_t v21 = 0;
  }

  return WebKit::WebPageProxy::didReceiveSyncMessage(v21, (uint64_t)a2, (uint64_t)a3);
}

uint64_t WebKit::ProvisionalPageProxy::messageSenderConnection(WebKit::ProvisionalPageProxy *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 5) + 16) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::ProvisionalPageProxy::messageSenderConnection(WebKit::ProvisionalPageProxy *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 3) + 16) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ProvisionalPageProxy::messageSenderDestinationID(WebKit::ProvisionalPageProxy *this)
{
  return *((void *)this + 4);
}

uint64_t non-virtual thunk to'WebKit::ProvisionalPageProxy::messageSenderDestinationID(WebKit::ProvisionalPageProxy *this)
{
  return *((void *)this + 2);
}

uint64_t WebKit::ProvisionalPageProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 16);
  LOBYTE(v7) = 0;
  char v8 = 0;
  uint64_t v4 = WebKit::AuxiliaryProcessProxy::sendMessage(v3, a2, a3, (uint64_t)&v7, 1);
  if (v8)
  {
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  return v4;
}

uint64_t non-virtual thunk to'WebKit::ProvisionalPageProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  return WebKit::ProvisionalPageProxy::sendMessage(a1 - 16, a2, a3);
}

uint64_t WebKit::ProvisionalPageProxy::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 16);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  *a3 = 0;
  v10[0] = v5;
  v10[1] = v6;
  char v11 = 1;
  uint64_t v7 = WebKit::AuxiliaryProcessProxy::sendMessage(v4, a2, a4, (uint64_t)v10, 1);
  if (v11)
  {
    uint64_t v8 = v10[0];
    v10[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  return v7;
}

uint64_t non-virtual thunk to'WebKit::ProvisionalPageProxy::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  return WebKit::ProvisionalPageProxy::sendMessageWithAsyncReply(a1 - 16, a2, a3, a4);
}

void WebKit::RemotePageDrawingAreaProxy::~RemotePageDrawingAreaProxy(WebKit::RemotePageDrawingAreaProxy *this, void *a2)
{
  *(void *)this = &unk_1EE9D6FD0;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)*((void *)this + 4);
    do
    {
      unsigned int v5 = *v4++;
      IPC::MessageReceiverMap::removeMessageReceiver(*((void *)this + 6) + 152, v5, *((void *)this + 3));
      --v3;
    }
    while (v3);
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      (*(void (**)(uint64_t, WebKit::RemotePageDrawingAreaProxy *))(*(void *)v7 + 288))(v7, this);
    }
  }
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  }
  uint64_t v9 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemotePageDrawingAreaProxy::~RemotePageDrawingAreaProxy(this, a2);

  WTF::fastFree(v2, v3);
}

void *WebKit::RemotePageDrawingAreaProxy::didReceiveMessage(void *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this[2];
  if (v3)
  {
    this = *(void **)(v3 + 8);
    if (this) {
      return (void *)(*(uint64_t (**)(void *, IPC::Connection *, IPC::Decoder *))(*this + 16))(this, a2, a3);
    }
  }
  return this;
}

uint64_t WebKit::RemotePageDrawingAreaProxy::didReceiveSyncMessage(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 32))();
  }
  else {
    return 0;
  }
}

WebKit::RemotePageProxy *WebKit::RemotePageProxy::RemotePageProxy(WebKit::RemotePageProxy *this, WebKit::WebPageProxy *a2, atomic_uint *a3, const WebKit::Site *a4, WebKit::WebPageProxyMessageReceiverRegistration *a5)
{
  *(void *)this = &unk_1EE9D7008;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = *(void *)(*((void *)a2 + 4) + 1928);
  atomic_fetch_add(a3 + 4, 1u);
  *((void *)this + 3) = a3;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v9 = (atomic_uint *)*((void *)a2 + 3);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v9;
  uint64_t v10 = *(_DWORD **)a4;
  if (*(void *)a4) {
    *v10 += 2;
  }
  *((void *)this + 5) = v10;
  char v11 = (_DWORD *)*((void *)a4 + 1);
  if (v11) {
    *v11 += 2;
  }
  *((unsigned char *)this + 72) = 0;
  uint64_t v12 = (WebKit::RemotePageProxy *)((char *)this + 72);
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = v11;
  if (a5) {
    WebKit::WebPageProxyMessageReceiverRegistration::transferMessageReceivingFrom(v12, a5, this);
  }
  else {
    WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)v12, *((void *)this + 3), *((unsigned __int8 **)this + 2), (uint64_t)this);
  }
  WebKit::WebProcessProxy::addRemotePageProxy(*((void *)this + 3), (uint64_t)this);
  return this;
}

void WebKit::RemotePageProxy::injectPageIntoNewProcess(WebKit::RemotePageProxy *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (*(void *)(v2 + 312))
      {
        uint64_t v4 = *(void *)(v2 + 216);
        if (!v4)
        {
          __break(0xC471u);
          return;
        }
        unsigned int v5 = (void *)WTF::fastMalloc((WTF *)0x38);
        uint64_t v6 = *((void *)this + 3);
        void *v5 = &unk_1EE9D6FD0;
        v5[1] = 0;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
        uint64_t v7 = *(atomic_uint **)(v4 + 8);
        if (v7) {
          atomic_fetch_add(v7, 1u);
        }
        int v5[2] = v7;
        void v5[3] = *(void *)(v4 + 24);
        v5[4] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
        v5[5] = v8;
        atomic_fetch_add((atomic_uint *volatile)(v6 + 16), 1u);
        v5[6] = v6;
        uint64_t v9 = v5[5];
        if (v9)
        {
          uint64_t v10 = (unsigned __int8 *)v5[4];
          char v11 = (uint64_t *)(v6 + 160);
          do
          {
            unsigned int v12 = *v10++;
            uint64_t v13 = (WTF::StringImpl *)v5[3];
            v31[0] = (WTF::StringImpl *)v12;
            v31[1] = v13;
            WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v11, (unsigned __int8 *)v31, (uint64_t)v5, v45);
            --v9;
          }
          while (v9);
        }
        (*(void (**)(uint64_t, void *))(*(void *)v4 + 280))(v4, v5);
        uint64_t v14 = *((void *)this + 7);
        *((void *)this + 7) = v5;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        uint64_t v15 = WTF::fastMalloc((WTF *)0x10);
        uint64_t v16 = *((void *)this + 3);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 8), v2);
        uint64_t v17 = *(atomic_uint **)(v2 + 8);
        if (v17) {
          atomic_fetch_add(v17, 1u);
        }
        *(void *)uint64_t v15 = v17;
        atomic_fetch_add((atomic_uint *volatile)(v16 + 16), 1u);
        *(void *)(v15 + 8) = v16;
        WebKit::WebProcessProxy::addVisitedLinkStoreUser((uint64_t *)v16, *(unsigned int **)(v2 + 288), *(void *)(*(void *)(v2 + 16) + 760));
        std::unique_ptr<WebKit::RemotePageVisitedLinkStoreRegistration>::reset[abi:sn180100]((uint64_t ***)this + 8, (uint64_t **)v15);
        uint64_t v18 = (WebKit::WebProcessProxy *)*((void *)this + 3);
        WTF::URL::URL((uint64_t)v31, (WTF::StringImpl **)(*(void *)(v2 + 16) + 1032));
        WebKit::WebFrameProxy::frameTreeCreationParameters(*(void *)(v2 + 312), (uint64_t)&v32);
        uint64_t v19 = *(void *)(v2 + 1408);
        if (v19)
        {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v35, *(void ***)(v2 + 1408));
          WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v36, v19 + 8);
          WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v37, v19 + 24);
          uint64_t v20 = *(_DWORD **)(v19 + 40);
          if (v20) {
            *v20 += 2;
          }
          v37[2] = v20;
          uint64_t v21 = *(_DWORD **)(v19 + 48);
          if (v21) {
            *v21 += 2;
          }
          v37[3] = v21;
          int v22 = *(_DWORD **)(v19 + 56);
          if (v22) {
            *v22 += 2;
          }
          v37[4] = v22;
          uint64_t v23 = *(_DWORD **)(v19 + 64);
          if (v23) {
            *v23 += 2;
          }
          v37[5] = v23;
          char v24 = *(unsigned char *)(v19 + 74);
          __int16 v38 = *(_WORD *)(v19 + 72);
          char v39 = v24;
          char v40 = *(unsigned char *)(v19 + 80);
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&v41, (void **)(v19 + 88));
          long long v25 = *(_OWORD *)(v19 + 96);
          char v43 = *(unsigned char *)(v19 + 112);
          long long v42 = v25;
          char v26 = 1;
        }
        else
        {
          char v26 = 0;
          LOBYTE(v35) = 0;
        }
        char v44 = v26;
        WebKit::WebPageProxy::creationParametersForRemotePage((void *)(v2 - 16), v18, v4, (uint64_t)v31, (uint64_t)v45);
        v46[0] = (char *)this + 16;
        v46[1] = v45;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::CreateWebPage>((uint64_t)v18, (uint64_t)v46, 0, 0);
        WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)v45);
        if (v44) {
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v35, v27);
        }
        WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v27);
        uint64_t v29 = v33;
        int v33 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v28);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
        uint64_t v30 = v31[0];
        v31[0] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2) {
            WTF::StringImpl::destroy(v30, v28);
          }
          else {
            *(_DWORD *)v30 -= 2;
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::RemotePageProxy::processDidTerminate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 216);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 296))(v4);
        uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
      }
      if (v2) {
        uint64_t v5 = v2 - 16;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(CFTypeRef **)(v5 + 328);
      if (v6)
      {
        CFRetain(v6[1]);
        WebKit::WebFrameProxy::remoteProcessDidTerminate((WebKit::WebFrameProxy *)v6, *(WebKit::WebProcessProxy **)(a1 + 24));
        CFTypeRef v7 = v6[1];
        CFRelease(v7);
      }
    }
  }
}

void WebKit::RemotePageProxy::~RemotePageProxy(WebKit::RemotePageProxy *this)
{
  *(void *)this = &unk_1EE9D7008;
  WebKit::WebProcessProxy::removeRemotePageProxy(*((WebKit::WebProcessProxy **)this + 3), this);
  WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration((WebKit::RemotePageProxy *)((char *)this + 72));
  std::unique_ptr<WebKit::RemotePageVisitedLinkStoreRegistration>::reset[abi:sn180100]((uint64_t ***)this + 8, 0);
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v2);
  }
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemotePageProxy::~RemotePageProxy(this);

  WTF::fastFree(v1, v2);
}

void WebKit::RemotePageProxy::didReceiveMessage(WebKit::RemotePageProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 <= 0x770)
  {
    if (v6 != 1887)
    {
      if (v6 != 1889)
      {
        if (v6 == 1901)
        {
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>>(a3, &v47);
          if (v51)
          {
            WebKit::RemotePageProxy::didChangeProvisionalURLForFrame((unsigned int *)this, (uint64_t)v47, (uint64_t)v48, v49[0], v49[1], &v50);
            if (v51)
            {
              uint64_t v9 = v50;
              long long v50 = 0;
              if (v9)
              {
                if (*(_DWORD *)v9 == 2) {
                  WTF::StringImpl::destroy(v9, v8);
                }
                else {
                  *(_DWORD *)v9 -= 2;
                }
              }
            }
          }
          return;
        }
LABEL_45:
        uint64_t v38 = *((void *)this + 4);
        if (v38)
        {
          uint64_t v39 = *(void *)(v38 + 8);
          if (v39)
          {
            WebKit::WebPageProxy::didReceiveMessage((WebKit::WebPageProxy *)(v39 - 16), a2, a3);
          }
        }
        return;
      }
      IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>>(a3, &v47);
      if (!v75) {
        return;
      }
      uint64_t v32 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v33)
      {
LABEL_40:
        if (v75) {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>::~__tuple_impl((uint64_t)&v47, v33);
        }
        return;
      }
      uint64_t v44 = v32;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (atomic_uchar *volatile *)a2);
      uint64_t v34 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v34 = &unk_1EE9D7310;
      v34[1] = v44;
      uint64_t v35 = v45;
      uint64_t v45 = 0;
      uint64_t v46 = v34;
      v34[2] = v35;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v45);
      if (v75)
      {
        WebKit::RemotePageProxy::decidePolicyForResponse((uint64_t)this, (uint64_t)&v47, v52, v53, (uint64_t)v54, (WebCore::ResourceRequestBase *)v68, v72, &v73, v74, (uint64_t *)&v46);
        uint64_t v36 = (uint64_t)v46;
        uint64_t v46 = 0;
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
        goto LABEL_40;
      }
LABEL_55:
      __break(1u);
    }
    IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>(a3, &v47);
    if (!v76) {
      return;
    }
    uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    if (v28)
    {
      uint64_t v43 = v27;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (atomic_uchar *volatile *)a2);
      uint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v29 = &unk_1EE9D7338;
      v29[1] = v43;
      uint64_t v30 = v45;
      uint64_t v45 = 0;
      uint64_t v46 = v29;
      void v29[2] = v30;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v45);
      if (!v76) {
        goto LABEL_55;
      }
      WebKit::RemotePageProxy::decidePolicyForNavigationActionAsync((uint64_t)this, (uint64_t *)&v47, (uint64_t *)&v46);
      uint64_t v31 = (uint64_t)v46;
      uint64_t v46 = 0;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
    }
    if (v76) {
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v47);
    }
    return;
  }
  if (*((unsigned __int16 *)a3 + 25) > 0x79Fu)
  {
    if (v6 == 1952)
    {
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>>(a3, &v47);
      if (v71)
      {
        WebKit::RemotePageProxy::didStartProvisionalLoadForFrame((unsigned int *)this, (uint64_t)v47, (uint64_t)v48, v49, (uint64_t)v54, (uint64_t)v56, v57, (const WTF::URL *)&v58, v70, (WTF::URL *)v68, &v69);
        if (v71) {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>::~__tuple_impl((uint64_t)&v47, v37);
        }
      }
      return;
    }
    if (v6 == 1983)
    {
      IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>(a3, &v47);
      if (LOBYTE(v49[0]))
      {
        uint64_t v11 = *((void *)this + 4);
        if (v11)
        {
          uint64_t v12 = *(void *)(v11 + 8);
          if (v12) {
            WebKit::WebPageProxy::handleMessageShared((WebKit::WebPageProxy *)(v12 - 16), (WebKit::WebProcessProxy **)this + 3, &v47, &v48);
          }
        }
      }
      std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v10);
      return;
    }
    goto LABEL_45;
  }
  if (v6 != 1905)
  {
    if (v6 == 1916)
    {
      IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>>(a3, &v47);
      if (v71)
      {
        WebKit::RemotePageProxy::didFailProvisionalLoadForFrame((uint64_t)this, (uint64_t)&v47, (uint64_t)&v52, v54[23], v55, &v56, (uint64_t)&v57, v68[32], (uint64_t *)&v69, LOBYTE(v70));
        if (v71) {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>::~__tuple_impl((uint64_t)&v47, v7);
        }
      }
      return;
    }
    goto LABEL_45;
  }
  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>>(a3, &v47);
  if (v68[0])
  {
    uint64_t v13 = *((void *)this + 4);
    uint64_t v14 = v47;
    uint64_t v15 = v48;
    uint64_t v16 = v56;
    uint64_t v17 = v57;
    int v18 = v59;
    char v19 = v60;
    int v20 = v62;
    int v21 = v63;
    int v22 = v64;
    int v23 = v65;
    unsigned __int8 v24 = v66;
    *(unsigned char *)(*((void *)this + 3) + 776) = 1;
    if (v13)
    {
      uint64_t v25 = *(void *)(v13 + 8);
      uint64_t v26 = v25 ? v25 - 16 : 0;
    }
    else
    {
      uint64_t v26 = 0;
    }
    HIBYTE(v41) = v19;
    HIBYTE(v42) = v21 != 0;
    LOBYTE(v42) = v20 != 0;
    LOBYTE(v41) = v18 != 0;
    WebKit::WebPageProxy::didCommitLoadForFrame(v26, a2, (uint64_t)v14, (uint64_t)v15, v49, (uint64_t)v54, (uint64_t)v16, v17, &v58, v41, &v61, v42, v22 != 0, v23 != 0, v24, &v67);
    if (v68[0]) {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>::~__tuple_impl((uint64_t)&v47, v40);
    }
  }
}

void WebKit::RemotePageProxy::decidePolicyForResponse(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, WebCore::ResourceRequestBase *a6, unsigned __int8 a7, _DWORD **a8, __int16 a9, uint64_t *a10)
{
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10 && (uint64_t v11 = *(void *)(v10 + 8)) != 0)
  {
    uint64_t v12 = v11 - 16;
    uint64_t v13 = *(atomic_uint **)(a1 + 24);
    atomic_fetch_add(v13 + 4, 1u);
    int v21 = (WebKit::WebProcessProxy *)v13;
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v14) {
      uint64_t v15 = v14 - 16;
    }
    else {
      uint64_t v15 = 0;
    }
    LOWORD(v2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = a9;
    WebKit::WebPageProxy::decidePolicyForResponseShared(v12, &v21, *(void *)(*(void *)(v15 + 32) + 1928), a2, a3, a4, a5, a6, a7, a8, v20, a10);
    uint64_t v16 = v21;
    int v21 = 0;
    if (v16) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v16 + 4);
    }
  }
  else
  {
    LOWORD(v21) = 0;
    BYTE2(v21) = 2;
    char v22 = 0;
    char v23 = 0;
    char v24 = 0;
    char v25 = 0;
    v26[0] = 0;
    char v27 = 0;
    LOBYTE(v28) = 0;
    char v29 = 0;
    char v30 = 0;
    char v32 = 0;
    uint64_t v17 = *a10;
    *a10 = 0;
    (*(void (**)(uint64_t, WebKit::WebProcessProxy **))(*(void *)v17 + 16))(v17, &v21);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    if (v32)
    {
      char v19 = v31;
      uint64_t v31 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
    }
    if (v29) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v28);
    }
    if (v27) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v26, v18);
    }
  }
}

void WebKit::RemotePageProxy::decidePolicyForNavigationActionAsync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v5 = *(atomic_uint **)(a1 + 24);
    atomic_fetch_add(v5 + 4, 1u);
    uint64_t v10 = (WebKit::WebProcessProxy *)v5;
    WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(v4 - 16, &v10, a2, a3);
    unsigned int v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v6 + 4);
    }
  }
  else
  {
    LOWORD(v1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    BYTE2(v1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 2;
    char v11 = 0;
    char v12 = 0;
    char v13 = 0;
    char v14 = 0;
    v15[0] = 0;
    char v16 = 0;
    LOBYTE(v17) = 0;
    char v18 = 0;
    char v19 = 0;
    char v21 = 0;
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebKit::WebProcessProxy **))(*(void *)v7 + 16))(v7, &v10);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v21)
    {
      uint64_t v9 = v20;
      uint64_t v20 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
    if (v18) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v17);
    }
    if (v16) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v15, v8);
    }
  }
}

unsigned int *WebKit::RemotePageProxy::didChangeProvisionalURLForFrame(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6)
{
  uint64_t v6 = *((void *)result + 4);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      uint64_t v8 = (atomic_uint *)*((void *)result + 3);
      atomic_fetch_add(v8 + 4, 1u);
      uint64_t v10 = (WebKit::WebProcessProxy *)v8;
      uint64_t result = (unsigned int *)WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared((WebKit::WebPageProxy *)(v7 - 16), &v10, a2, a3, a4, a5, a6);
      uint64_t v9 = v10;
      uint64_t v10 = 0;
      if (v9) {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v9 + 4);
      }
    }
  }
  return result;
}

void WebKit::RemotePageProxy::didFailProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, WTF::StringImpl **a6, uint64_t a7, char a8, uint64_t *a9, unsigned __int8 a10)
{
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    if (*(void *)(v10 + 8))
    {
      uint64_t v19 = WebKit::WebFrameProxy::webFrame(*(void *)(a2 + 248), *(void *)(a2 + 256));
      if (v19)
      {
        uint64_t v20 = v19;
        CFRetain(*(CFTypeRef *)(v19 + 8));
        uint64_t v21 = *(void *)(a1 + 32);
        if (v21)
        {
          uint64_t v22 = *(void *)(v21 + 8);
          if (v22) {
            uint64_t v23 = v22 - 16;
          }
          else {
            uint64_t v23 = 0;
          }
        }
        else
        {
          uint64_t v23 = 0;
        }
        char v24 = *(atomic_uint **)(a1 + 24);
        atomic_fetch_add(v24 + 4, 1u);
        uint64_t v26 = (WebKit::WebProcessProxy *)v24;
        WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(v23, &v26, v20, (__int16 *)a2, a3, a4, a5, a6, a7, a8, a9, a10);
        char v25 = v26;
        uint64_t v26 = 0;
        if (v25) {
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v25 + 4);
        }
        CFRelease(*(CFTypeRef *)(v20 + 8));
      }
    }
  }
}

unsigned int *WebKit::RemotePageProxy::didStartProvisionalLoadForFrame(unsigned int *result, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, char a7, const WTF::URL *a8, double a9, WTF::URL *a10, CFTypeRef **a11)
{
  uint64_t v11 = *((void *)result + 4);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      char v13 = (atomic_uint *)*((void *)result + 3);
      atomic_fetch_add(v13 + 4, 1u);
      uint64_t v15 = (WebKit::WebProcessProxy *)v13;
      uint64_t result = (unsigned int *)WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared((void *)(v12 - 16), &v15, a2, a3, a4, a5, a6, a7, a9, a8, a10, a11);
      char v14 = v15;
      uint64_t v15 = 0;
      if (v14) {
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v14 + 4);
      }
    }
  }
  return result;
}

void WebKit::RemotePageProxy::decidePolicyForNavigationActionSync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v5 = *(atomic_uint **)(a1 + 24);
    atomic_fetch_add(v5 + 4, 1u);
    uint64_t v10 = (WebKit::WebProcessProxy *)v5;
    WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(v4 - 16, &v10, a2, a3);
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v6 + 4);
    }
  }
  else
  {
    LOWORD(v1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    BYTE2(v1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 2;
    char v11 = 0;
    char v12 = 0;
    char v13 = 0;
    char v14 = 0;
    v15[0] = 0;
    char v16 = 0;
    LOBYTE(v17) = 0;
    char v18 = 0;
    char v19 = 0;
    char v21 = 0;
    uint64_t v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WebKit::WebProcessProxy **))(*(void *)v7 + 16))(v7, &v10);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    if (v21)
    {
      uint64_t v9 = v20;
      uint64_t v20 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
    }
    if (v18) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v17);
    }
    if (v16) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v15, v8);
    }
  }
}

uint64_t WebKit::RemotePageProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*((_WORD *)a3 + 25) == 3751)
  {
    IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>(a3, v18);
    BOOL v7 = v19 != 0;
    if (v19)
    {
      uint64_t v8 = *a4;
      *a4 = 0;
      uint64_t v15 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a2);
      uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v9 = &unk_1EE9D7360;
      v9[1] = v15;
      uint64_t v10 = v16[0];
      v16[0] = 0;
      void v9[2] = v10;
      uint64_t v17 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
      if (!v19) {
        __break(1u);
      }
      WebKit::RemotePageProxy::decidePolicyForNavigationActionSync(a1, (uint64_t)v18, (uint64_t *)&v17);
      uint64_t v11 = (uint64_t)v17;
      uint64_t v17 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      if (v19) {
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v18);
      }
    }
    return v7;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (!v13) {
    return 0;
  }

  return WebKit::WebPageProxy::didReceiveSyncMessage(v13 - 16, (uint64_t)a2, (uint64_t)a3);
}

void WebKit::PageLoadState::Data::~Data(WebKit::PageLoadState::Data *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 20);
  *((void *)this + 2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  BOOL v7 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *((unsigned int *)this + 16);
  if (v8 != -1) {
    ((void (*)(char *, char *))off_1EE9D7030[v8])(&v12, (char *)this + 40);
  }
  *((_DWORD *)this + 16) = -1;
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*((unsigned __int8 *)v4 - 8) != 254)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion::entryExpired(WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion *this)
{
  uint64_t v1 = (uint64_t *)(*(void *)this + 8);
  uint64_t v2 = *v1;
  uint64_t result = WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebKit::ProcessAssertionType>>,WebKit::ProcessAssertionType>(*v1, *(unsigned char *)(*((void *)this + 1) + 16));
  if (v2)
  {
    uint64_t v4 = v2 + 16 * *(unsigned int *)(v2 - 4);
    if (v4 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v4 = 0;
  }
  if (v4 != result)
  {
    return WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::remove(v1, result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion::*&)(void),WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9D7078[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

WebKit::ProcessThrottlerActivity *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJDnSC_EEEEEEDcSG_DpT0_(uint64_t a1, WebKit::ProcessThrottlerActivity **a2)
{
  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJDnSC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJDnSC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRSC_SG_EEEDcmSI_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJDnSC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(unsigned int *)(*(void *)result + 8);
  if (v3 != -1)
  {
    if (!v3)
    {
      *a2 = 0;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(&v4, v2);
  }
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

WebKit::ProcessThrottlerActivity *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJDnSC_EEEOSR_EEEDcSJ_DpT0_(WebKit::ProcessThrottlerActivity **a1, WebKit::ProcessThrottlerActivity **a2, WebKit::ProcessThrottlerActivity **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(*a1, a2, a3);
}

WebKit::WebsitePoliciesData *std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100](WebKit::WebsitePoliciesData **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData(result, a2);
    return (WebKit::WebsitePoliciesData *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::WebsitePoliciesData::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v4;
  if (v5) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 20);
  if (v6) {
    WTF::VectorDestructor<true,WebCore::CustomHeaderFields>::destruct(*(void *)(a1 + 8), (void *)(*(void *)(a1 + 8) + 32 * v6));
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 8, (_DWORD *)a2 + 2);
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8)
  {
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = 16 * v8;
    do
    {
      uint64_t v15 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v7)+ 16;
      v16 -= 16;
    }
    while (v16);
  }
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a1 + 24, (_DWORD *)a2 + 6);
  WTF::String::operator=((uint64_t *)(a1 + 40), a2 + 5);
  WTF::String::operator=((uint64_t *)(a1 + 48), a2 + 6);
  WTF::String::operator=((uint64_t *)(a1 + 56), a2 + 7);
  WTF::String::operator=((uint64_t *)(a1 + 64), a2 + 8);
  char v10 = *((unsigned char *)a2 + 74);
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  *(unsigned char *)(a1 + 7WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v10;
  *(unsigned char *)(a1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *((unsigned char *)a2 + 80);
  uint64_t v11 = a2[11];
  a2[11] = 0;
  char v12 = *(WTF::StringImpl ***)(a1 + 88);
  *(void *)(a1 + 88) = v11;
  if (v12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
  }
  long long v13 = *((_OWORD *)a2 + 6);
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 96) = v13;
  return a1;
}

uint64_t ***std::unique_ptr<WebKit::RemotePageVisitedLinkStoreRegistration>::reset[abi:sn180100](uint64_t ***result, uint64_t **a2)
{
  uint64_t v2 = *result;
  WebKit::WebsitePoliciesData *result = a2;
  if (v2)
  {
    if (*v2)
    {
      uint64_t v3 = (*v2)[1];
      if (v3) {
        WebKit::WebProcessProxy::removeVisitedLinkStoreUser(v2[1], *(WebKit::VisitedLinkStore **)(v3 + 288), *(void *)(*(void *)(v3 + 16) + 760));
      }
    }
    uint64_t v4 = v2[1];
    v2[1] = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v4 + 4);
    }
    uint64_t v5 = (unsigned int *)*v2;
    *uint64_t v2 = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    return (uint64_t ***)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, void **a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      uint64_t v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      uint64_t v12 = *a2 ? (uint64_t)&(*a2)[3 * *((unsigned int *)*a2 - 1)] : 0;
      if ((WTF::StringImpl **)v12 != v8)
      {
        do
        {
          uint64_t v20 = v9;
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unsigned int v15 = *((_DWORD *)*v9 + 4);
          if (v15 >= 0x100) {
            int v16 = v15 >> 8;
          }
          else {
            int v16 = WTF::StringImpl::hashSlowCase(*v9);
          }
          int v17 = 0;
          do
          {
            unsigned int v18 = v16 & v14;
            int v16 = ++v17 + (v16 & v14);
          }
          while (*(void *)(v13 + 24 * v18));
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(v13 + 24 * v18, (uint64_t)v9, &v20);
          while (1)
          {
            v9 += 3;
            if (v9 == v11) {
              break;
            }
            if ((unint64_t)*v9 + 1 > 1) {
              goto LABEL_20;
            }
          }
          uint64_t v9 = v11;
LABEL_20:
          ;
        }
        while (v9 != (WTF::StringImpl **)v12);
      }
    }
  }
  return a1;
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, WTF::StringImpl ***a3)
{
  int v4 = *a3;
  uint64_t v5 = **a3;
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  uint64_t v9 = v5;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v10, (uint64_t)(v4 + 1));
  WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  if (v4) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(*(void *)(a1 + 8) + 8 * v4));
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 8, (_DWORD *)(a2 + 8));
}

uint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if (v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198E04D30);
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(a1 + 8) = v3;
    *(void *)a1 = v5;
    WTF::VectorCopier<false,WebCore::CustomHeaderFields>::uninitializedCopy<WebCore::CustomHeaderFields>(*(void *)a2, (uint64_t *)(*(void *)a2 + 32 * *(unsigned int *)(a2 + 12)), v5);
  }
  return a1;
}

uint64_t WTF::VectorCopier<false,WebCore::CustomHeaderFields>::uninitializedCopy<WebCore::CustomHeaderFields>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3, v5);
      uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3 + 16, (uint64_t)(v5 + 2));
      a3 += 32;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 28))
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = 16 * v6;
      do
      {
        uint64_t v5 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7)+ 16;
        v7 += 16;
        v8 -= 16;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ProcessThrottler::*&)(void),WebKit::ProcessThrottler*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9D70D0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D70F8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D70F8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_1,void>::call(uint64_t result)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(*(void *)(*(void *)(v2 + 16) + 8) + 136);
        if (v4) {
          LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_DWORD *)(v4 + 108);
        }
        int v5 = 134218240;
        uint64_t v6 = v2;
        __int16 v7 = 1024;
        int v8 = v4;
        _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::uiAssertionWillExpireImminently:", (uint8_t *)&v5, 0x12u);
      }
      WebKit::ProcessThrottler::sendPrepareToSuspendIPC((unsigned int *)v2, 1);
      WebKit::ProcessThrottler::invalidateAllActivities((WebKit::ProcessThrottler *)v2);
      return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v2 + 40));
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_2,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9D7120;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D7120;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_3,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D7148;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_3,void>::call(unsigned int *result)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t v2 = *(WebKit::ProcessThrottler **)(v1 + 8);
    if (v2)
    {
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(*((void *)v2 + 2) + 8) + 16), 1u);
      uint64_t v3 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(*(void *)(*((void *)v2 + 2) + 8) + 136);
        if (v4) {
          LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_DWORD *)(v4 + 108);
        }
        int v6 = 134218240;
        __int16 v7 = v2;
        __int16 v8 = 1024;
        int v9 = v4;
        _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::assertionWasInvalidated:", (uint8_t *)&v6, 0x12u);
      }
      WebKit::ProcessThrottler::invalidateAllActivities(v2);
      int v5 = (unsigned int *)(*(void *)(*((void *)v2 + 2) + 8) + 16);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::sendPrepareToSuspendIPC(WebKit::IsSuspensionImminent)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7170;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::clearAssertion(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7198;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::clearAssertion(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7198;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::clearAssertion(void)::$_0,void>::call(unsigned int *result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = (void *)*((void *)result + 1);
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(v2 + 16) + 8) + 16), 1u);
      uint64_t v4 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(*(void *)(v3[2] + 8) + 136);
        if (v5) {
          LODWORD(v5) = *(_DWORD *)(v5 + 108);
        }
        int v10 = 134218240;
        uint64_t v11 = v3;
        __int16 v12 = 1024;
        int v13 = v5;
        _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::clearAssertion: Releasing near-suspended assertion", (uint8_t *)&v10, 0x12u);
      }
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 13));
      uint64_t v7 = v3[4];
      v3[4] = 0;
      if (v7) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::ProcessAssertion,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 8), v6);
      }
      if (!v3[3])
      {
        __int16 v8 = *(atomic_uint **)(v3[2] + 8);
        int v9 = (unsigned int *)(v8 + 4);
        atomic_fetch_add(v8 + 4, 1u);
        (*(void (**)(atomic_uint *))(*(void *)v8 + 136))(v8);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
      }
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(*(void *)(*(void *)(v2 + 16) + 8) + 16));
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ProcessThrottlerTimedActivity::*&)(void),WebKit::ProcessThrottlerTimedActivity*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9D71D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_6__implIJDnSC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJDnSC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_6__implIJDnSC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJDnSC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CreateProvisionalFrame>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __int16 v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v8 = 2183;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v18 = v8;
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v8, *(void *)a2);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  __int16 v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DestroyProvisionalFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  __int16 v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v8 = 2190;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  __int16 v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::ProvisionalPageProxy::goToBackForwardItem(API::Navigation &,WebKit::WebBackForwardListItem &,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,BOOL,WebKit::WebBackForwardListItem &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D71F8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProvisionalPageProxy::goToBackForwardItem(API::Navigation &,WebKit::WebBackForwardListItem &,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,BOOL,WebKit::WebBackForwardListItem &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D71F8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::ProvisionalPageProxy::goToBackForwardItem(API::Navigation &,WebKit::WebBackForwardListItem &,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 416);
  return (!v2 || *(void *)(v2 + 8) != *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 40) + 16) + 176))
      && *(void *)(a1 + 16) != a2;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProvisionalPageProxy::goToBackForwardItem(API::Navigation &,WebKit::WebBackForwardListItem &,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_1,void,std::__1<WebKit::SandboxExtensionHandle>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D7220;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 232));
  uint64_t v3 = *(void *)(a1 + 224);
  *(void *)(a1 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  if (*(unsigned char *)(a1 + 200)) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 80), v2);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v2);
  }
  return a1;
}

{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9D7220;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 232));
  uint64_t v3 = *(void *)(a1 + 224);
  *(void *)(a1 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  if (*(unsigned char *)(a1 + 200)) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 80), v2);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v2);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::ProvisionalPageProxy::goToBackForwardItem(API::Navigation &,WebKit::WebBackForwardListItem &,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_1,void,std::__1<WebKit::SandboxExtensionHandle>>::call(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  LOBYTE(v36) = 0;
  unsigned __int8 v37 = 0;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v35 = *(const char ***)a2;
    *(void *)a2 = 0;
    uint64_t v36 = v35;
    int v3 = 1;
    unsigned __int8 v37 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 && *(void *)(v5 + 8))
  {
    char v6 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)a1);
    WebCore::PublicSuffixStore::publicSuffix((uint64_t *)&v49, v6, (const WTF::URL *)(a1 + 16));
    if (v4)
    {
      char v7 = v36;
      uint64_t v36 = 0;
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(a1 + 232), v7);
    }
    uint64_t v39 = *(void *)(*(void *)(a1 + 224) + 16);
    long long v40 = *(_OWORD *)(a1 + 56);
    __int16 v41 = *(_WORD *)(a1 + 72);
    v42[0] = 0;
    char v43 = 0;
    if (*(unsigned char *)(a1 + 200))
    {
      std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>((uint64_t)v42, (uint64_t *)(a1 + 80));
      char v43 = 1;
    }
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(v8 + 8) + 24) + 8);
    if (v9) {
      uint64_t v10 = v9 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    char v44 = *(unsigned char *)(v10 + 1360);
    char v46 = *(unsigned char *)(a1 + 216);
    uint64_t v45 = *(void *)(a1 + 208);
    uint64_t v11 = v49;
    uint64_t v49 = 0;
    __int16 v12 = *(const char ***)(a1 + 232);
    *(void *)(a1 + 232) = 0;
    uint64_t v47 = v11;
    uint64_t v48 = v12;
    uint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)(v8 + 8) + 40) + 16) + 136);
    if (!v13 || !*(unsigned char *)(v13 + 104)) {
      goto LABEL_20;
    }
    char v14 = WTF::URL::protocolIs();
    uint64_t v8 = *(void *)(a1 + 8);
    if (v14)
    {
      uint64_t v15 = *(void *)(v8 + 8);
      uint64_t v17 = *(void *)(v15 + 16);
      uint64_t v16 = *(void *)(v15 + 24);
      uint64_t v18 = v15 + 16;
      uint64_t v19 = *(void *)(v16 + 8);
      if (v19) {
        uint64_t v20 = v19 - 16;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v38 = *(void *)(*(void *)(v20 + 32) + 760);
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(v17 + 56))(v18);
      uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v22 = 2283;
      *((void *)v22 + 1) = v21;
      *((void *)v22 + 66) = (char *)v22 + 16;
      *((void *)v22 + 67) = 512;
      *((void *)v22 + 68) = 0;
      *((void *)v22 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v22 + 69) = 0;
      IPC::Encoder::encodeHeader(v22);
      long long v50 = v22;
      IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::encode(v22, (uint64_t)&v39);
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, &v38);
      goto LABEL_22;
    }
    if (!v8) {
      uint64_t v23 = 0;
    }
    else {
LABEL_20:
    }
      uint64_t v23 = *(void *)(v8 + 8);
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t v18 = v23 + 16;
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(v24 + 56))(v18);
    uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v26 = 2282;
    *((void *)v26 + 1) = v25;
    *((void *)v26 + 66) = (char *)v26 + 16;
    *((void *)v26 + 67) = 512;
    *((void *)v26 + 68) = 0;
    *((void *)v26 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    *((void *)v26 + 69) = 0;
    IPC::Encoder::encodeHeader(v26);
    long long v50 = v26;
    IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::encode(v26, (uint64_t)&v39);
LABEL_22:
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v18 + 32))(v18, &v50, 0);
    char v28 = v50;
    long long v50 = 0;
    if (v28)
    {
      IPC::Encoder::~Encoder(v28, v27);
      WTF::fastFree(v33, v34);
    }
    uint64_t v29 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 40) + 16);
    if (*(unsigned char *)(v29 + 169))
    {
      WebKit::ResponsivenessTimer::start(v29 + 56);
    }
    else if (!*(unsigned char *)(v29 + 185))
    {
      *(_WORD *)(v29 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 256;
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v48);
    uint64_t v31 = v47;
    uint64_t v47 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v30);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    if (v43) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v42, v30);
    }
    char v32 = v49;
    uint64_t v49 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v30);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    int v3 = v37;
  }
  if (v3) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v36);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDidCommitInAnotherProcess>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2311;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v8, *(void *)(a2 + 8));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  __int16 v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[328])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)v5, a2);
  }
  *a2 = 0;
  a2[328] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::BackForwardListItemState>(a1, (uint64_t)v7);
  char v6 = v8;
  if (!v8)
  {
    *a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    std::__tuple_leaf<1ul,WebKit::BackForwardListItemState,false>::__tuple_leaf[abi:sn180100]<WebKit::BackForwardListItemState,void>((uint64_t)(a3 + 16), (uint64_t)v7);
    char v6 = 1;
LABEL_5:
    a3[328] = v6;
    return std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7);
  }
  __break(1u);
  return result;
}

uint64_t std::__tuple_leaf<1ul,WebKit::BackForwardListItemState,false>::__tuple_leaf[abi:sn180100]<WebKit::BackForwardListItemState,void>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v4;
  WebKit::FrameState::FrameState(a1 + 24, (uint64_t *)(a2 + 24));
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  uint64_t v5 = *(void *)(a2 + 280);
  *(void *)(a2 + 28WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(void *)(a1 + 28WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v5;
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  uint64_t v6 = *(void *)(a2 + 304);
  *(void *)(a2 + 30WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(a1 + 30WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v6;
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 328))
  {
    uint64_t v2 = *(WebKit::ViewSnapshot **)(a1 + 320);
    *(void *)(a1 + 32WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    if (v2) {
      WTF::RefCounted<WebKit::ViewSnapshot>::deref(v2);
    }
    int v3 = *(unsigned int **)(a1 + 296);
    *(void *)(a1 + 296) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v3);
    }
    WebKit::FrameState::~FrameState((WTF::StringImpl **)(a1 + 40));
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (v9)
  {
    uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String>((uint64_t *)a1, a2, (uint64_t *)&v8, (uint64_t)a3);
    if (v9)
    {
      uint64_t result = v8;
      char v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    char v8 = 0;
    *(unsigned char *)a4 = 0;
LABEL_6:
    *(unsigned char *)(a4 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v8;
    return result;
  }
  if (*((unsigned char *)a2 + 8) && *((unsigned char *)a3 + 8))
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v10;
    *(unsigned char *)(a4 + 16) = result;
    char v8 = 1;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      char v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v4);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String>(IPC::Decoder *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String>((uint64_t *)a1, a2, (uint64_t *)&v8, a3);
    if (v9)
    {
      char v7 = v8;
      char v8 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v6);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<WebCore::DiagnosticLoggingDictionary>(a1, (uint64_t)&v9);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary>(a1, a2, a3, &v9, a4);
    if (v10)
    {
      if (v9) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }
}

uint64_t IPC::Decoder::decode<WebCore::DiagnosticLoggingDictionary>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::DiagnosticLoggingDictionary,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unsigned char *a5@<X8>)
{
  unsigned __int16 v9 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(a1);
  if (v9 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>(a2, a3, a4, &v9, (uint64_t)a5);
  }
  else
  {
    *a5 = 0;
    a5[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, unsigned char *a4@<X4>, uint64_t a5@<X8>)
{
  if (*((unsigned char *)a1 + 8) && *((unsigned char *)a2 + 8) && *((unsigned char *)a3 + 8) && a4[1])
  {
    uint64_t v5 = *a1;
    *a1 = 0;
    uint64_t v6 = *a2;
    *a2 = 0;
    *(void *)a5 = v5;
    *(void *)(a5 + 8) = v6;
    uint64_t v7 = *a3;
    *a3 = 0;
    *(void *)(a5 + 16) = v7;
    *(unsigned char *)(a5 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *a4;
    *(unsigned char *)(a5 + 32) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::URLSchemeTaskParameters>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::URLSchemeTaskParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[512])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::URLSchemeTaskParameters>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::URLSchemeTaskParameters>(a1, v6);
  char v4 = v7;
  if (v7)
  {
    WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)a2, (uint64_t)v6);
    char v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[512] = v4;
  return std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebKit::URLSchemeTaskParameters>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::decode(a1, a2);
  if (!a2[512])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WebCore::ResourceRequestBase *)a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WebCore::ResourceRequestBase *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 512))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 456);
    *(void *)(a1 + 456) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(unsigned int *)(a1 + 448);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9D7030[v4])(&v8, a1 + 424);
    }
    *(_DWORD *)(a1 + 448) = -1;
    uint64_t v5 = *(const void **)(a1 + 416);
    *(void *)(a1 + 416) = 0;
    if (v5) {
      CFRelease(v5);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 224));
    uint64_t v6 = *(const void **)(a1 + 208);
    *(void *)(a1 + 208) = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WebKit::NavigationActionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[2576])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      char v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::NavigationActionData>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::NavigationActionData>(a1, (uint64_t)v4);
  if (v5)
  {
    WebKit::NavigationActionData::NavigationActionData((uint64_t)a2, (uint64_t)v4);
    int v3 = v5;
    a2[2576] = 1;
    if (v3) {
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[2576] = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D7248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9D7248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 3343;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v10 = v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  char v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[792])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v6);
  if (v6[296])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData>(a1, (uint64_t)v6, a2);
  }
  else
  {
    *a2 = 0;
    a2[792] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v7);
  if (v7[16]) {
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, a2, (uint64_t)v7, a3);
  }
  *a3 = 0;
  a3[792] = 0;
  return result;
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v10);
  if (v10[256])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse>(a1, a2, a3, (uint64_t)v10, a4);
  }
  else
  {
    *a4 = 0;
    a4[792] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v10, v8);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v11);
  if (v11[200])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest>(a1, a2, a3, a4, (uint64_t)v11, a5);
  }
  else
  {
    *a5 = 0;
    a5[792] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v11);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  unint64_t v8 = a1[1];
  uint64_t v9 = *a1;
  unint64_t v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      uint64_t v19 = a1;
      uint64_t v22 = a6;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        a1 = v19;
        a6 = v22;
        uint64_t v15 = *v19;
        unint64_t v14 = v19[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = v11 + 1;
  if (!v9)
  {
    unint64_t v14 = v8;
    uint64_t v15 = 0;
LABEL_7:
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      uint64_t v18 = a1;
      uint64_t v21 = a6;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        a1 = v18;
        a6 = v21;
        uint64_t v9 = *v18;
        unint64_t v8 = v18[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v12 = *v11;
  if (v12 < 2)
  {
    __int16 v23 = (v12 != 0) | 0x100;
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL>((IPC::Decoder *)a1, a2, a3, a4, a5, &v23, a6);
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v8)
    {
      uint64_t v20 = a6;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v9);
      a6 = v20;
    }
  }
  *a6 = 0;
  a6[792] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v16);
  if (v17)
  {
    uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String>((uint64_t *)a1, a2, a3, a4, a5, a6, (uint64_t)&v16, a7);
    if (v17)
    {
      uint64_t result = v16;
      uint64_t v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a7 = 0;
    a7[792] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  unint64_t v10 = a1[1];
  uint64_t v11 = *a1;
  unint64_t v12 = a1[2] - *a1;
  if (v10 <= v12)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v18 = a1[3];
    if (v18)
    {
      uint64_t v21 = a1;
      uint64_t v24 = a8;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        a1 = v21;
        a8 = v24;
        uint64_t v17 = *v21;
        unint64_t v16 = v21[1];
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v13 = (unsigned __int8 *)(v11 + v12);
  a1[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    unint64_t v16 = v10;
    uint64_t v17 = 0;
LABEL_7:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      uint64_t v20 = a1;
      __int16 v23 = a8;
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        a1 = v20;
        a8 = v23;
        uint64_t v11 = *v20;
        unint64_t v10 = v20[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v14 = *v13;
  if (v14 < 2)
  {
    __int16 v25 = (v14 != 0) | 0x100;
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL>(a1, a2, a3, a4, a5, a6, a7, &v25, a8);
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v10)
    {
      uint64_t v22 = a8;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v11);
      a8 = v22;
    }
  }
  *a8 = 0;
  a8[792] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X7>, unsigned char *a9@<X8>)
{
  unsigned __int16 v18 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a1);
  if (v18 <= 0xFFu)
  {
    uint64_t v20 = *a1;
    uint64_t v21 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v22 = v21 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (!v22) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v20);
    }
    *a9 = 0;
    a9[792] = 0;
  }
  else
  {
    unsigned __int16 v23 = v18;
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>(a2, a3, a4, a5, a6, a7, a8, (uint64_t)a9, &v23);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unsigned char *a5@<X5>, uint64_t a6@<X6>, unsigned char *a7@<X7>, uint64_t a8@<X8>, unsigned char *a9)
{
  uint64_t result = a8;
  if (*(unsigned char *)(a1 + 296)
    && *(unsigned char *)(a2 + 16)
    && *(unsigned char *)(a3 + 256)
    && *(unsigned char *)(a4 + 200)
    && a5[1]
    && *(unsigned char *)(a6 + 8)
    && a7[1]
    && a9[1])
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN6WebKit13FrameInfoDataENS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS6_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS6_33SupportsObjectIdentifierNullStateE0EEEEENS8_16ResourceResponseENS8_15ResourceRequestEbNS6_6StringEbNS8_28CrossOriginOpenerPolicyValueEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJS4_SE_SF_SG_bSH_bSI_EJEJEJS4_SE_SF_SG_bSH_bSI_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3_(a8, a1, (_OWORD *)a2, a3, a4, a5, (uint64_t *)a6, a7, a9);
    *(unsigned char *)(result + 792) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN6WebKit13FrameInfoDataENS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS6_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS6_33SupportsObjectIdentifierNullStateE0EEEEENS8_16ResourceResponseENS8_15ResourceRequestEbNS6_6StringEbNS8_28CrossOriginOpenerPolicyValueEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJS4_SE_SF_SG_bSH_bSI_EJEJEJS4_SE_SF_SG_bSH_bSI_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, unsigned char *a6, uint64_t *a7, unsigned char *a8, unsigned char *a9)
{
  uint64_t v16 = std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1, a2);
  *(_OWORD *)(v16 + 296) = *a3;
  std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(v16 + 312, a4);
  WTF::URL::URL(a1 + 568, (uint64_t *)a5);
  WTF::URL::URL(a1 + 608, (uint64_t *)(a5 + 40));
  *(void *)(a1 + 648) = *(void *)(a5 + 80);
  uint64_t v17 = *(void *)(a5 + 88);
  *(void *)(a5 + 88) = 0;
  *(void *)(a1 + 656) = v17;
  *(_OWORD *)(a1 + 66WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
  uint64_t v18 = *(void *)(a5 + 96);
  *(void *)(a5 + 96) = 0;
  *(void *)(a1 + 66WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v18;
  LODWORD(v18) = *(_DWORD *)(a5 + 104);
  *(_DWORD *)(a5 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(_DWORD *)(a1 + 672) = v18;
  LODWORD(v18) = *(_DWORD *)(a5 + 108);
  *(_DWORD *)(a5 + 108) = 0;
  *(_DWORD *)(a1 + 676) = v18;
  *(_OWORD *)(a1 + 68WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  uint64_t v19 = *(void *)(a5 + 112);
  *(void *)(a5 + 112) = 0;
  *(void *)(a1 + 68WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v19;
  LODWORD(v19) = *(_DWORD *)(a5 + 120);
  *(_DWORD *)(a5 + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(_DWORD *)(a1 + 688) = v19;
  LODWORD(v19) = *(_DWORD *)(a5 + 124);
  *(_DWORD *)(a5 + 12WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(_DWORD *)(a1 + 692) = v19;
  *(_OWORD *)(a1 + 696) = 0u;
  uint64_t v20 = *(void *)(a5 + 128);
  *(void *)(a5 + 128) = 0;
  *(void *)(a1 + 696) = v20;
  LODWORD(v2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_DWORD *)(a5 + 136);
  *(_DWORD *)(a5 + 136) = 0;
  *(_DWORD *)(a1 + 70WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v20;
  LODWORD(v2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_DWORD *)(a5 + 140);
  *(_DWORD *)(a5 + 14WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(_DWORD *)(a1 + 708) = v20;
  LODWORD(v2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_DWORD *)(a5 + 144);
  *(unsigned char *)(a1 + 716) = *(unsigned char *)(a5 + 148);
  *(_DWORD *)(a1 + 712) = v20;
  uint64_t v21 = *(void *)(a5 + 152);
  *(void *)(a5 + 152) = 0;
  *(void *)(a1 + 72WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v21;
  uint64_t v22 = *(void *)(a5 + 160);
  *(void *)(a5 + 16WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(void *)(a1 + 728) = v22;
  uint64_t v23 = *(void *)(a5 + 168);
  *(void *)(a5 + 168) = 0;
  *(void *)(a1 + 736) = v23;
  uint64_t v24 = *(void *)(a5 + 176);
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(a5 + 184);
  *(void *)(a1 + 74WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v24;
  uint64_t v25 = *(void *)(a5 + 192);
  *(void *)(a5 + 192) = 0;
  *(void *)(a1 + 76WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v25;
  *(unsigned char *)(a1 + 768) = *a6;
  uint64_t v26 = *a7;
  *a7 = 0;
  *(void *)(a1 + 776) = v26;
  *(unsigned char *)(a1 + 78WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *a8;
  *(unsigned char *)(a1 + 785) = *a9;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit20ProvisionalPageProxyES8_FvONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSE_16ResourceResponseERKNSE_15ResourceRequestEbRKNS_6StringEbNSE_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D7270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit20ProvisionalPageProxyES8_FvONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSE_16ResourceResponseERKNSE_15ResourceRequestEbRKNS_6StringEbNSE_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9D7270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit20ProvisionalPageProxyES8_FvONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSE_16ResourceResponseERKNSE_15ResourceRequestEbRKNS_6StringEbNSE_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EE4callESX_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3345;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  int v3 = *(WTF::StringImpl **)(a1 + 776);
  *(void *)(a1 + 776) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(const void **)(a1 + 760);
  *(void *)(a1 + 76WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 568));
  uint64_t v6 = *(const void **)(a1 + 552);
  *(void *)(a1 + 552) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 312), v5);
  unint64_t v8 = *(WTF::StringImpl **)(a1 + 240);
  *(void *)(a1 + 24WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 232);
  if (v9 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D7030[v9])(&v12, a1 + 208);
  }
  *(_DWORD *)(a1 + 232) = -1;
  unint64_t v10 = *(const void **)(a1 + 200);
  *(void *)(a1 + 20WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[72])
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v4);
  if (v4[16])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)v4, a2);
  }
  else
  {
    *a2 = 0;
    a2[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, a2, &v6, a3);
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, v9);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>(a2, a3, (uint64_t)v9, (uint64_t)a4);
    if (v10)
    {
      unint64_t v8 = v9[0];
      v9[0] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>(uint64_t a1@<X1>, long long *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 16) && *((unsigned char *)a2 + 16) && *(unsigned char *)(a3 + 40))
  {
    long long v5 = *a2;
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_OWORD *)(a4 + 16) = v5;
    WTF::URL::URL(a4 + 32, (uint64_t *)a3);
    *(unsigned char *)(a4 + 72) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[488])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebKit::WebNavigationDataStore>(a1, v6);
  if (v6[472])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,WebKit::WebNavigationDataStore>(a1, (uint64_t)v6, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[488] = 0;
  }
  return std::__optional_destruct_base<WebKit::WebNavigationDataStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebNavigationDataStore>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebNavigationDataStore,void>::decode(a1, a2);
  if (!a2[472])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,WebKit::WebNavigationDataStore>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v7);
  char v6 = v8;
  if (!v8)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 472))
  {
    uint64_t result = WebKit::WebNavigationDataStore::WebNavigationDataStore(a3, (uint64_t *)a2);
    *(_OWORD *)(a3 + 472) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 488) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebNavigationDataStore,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 472))
  {
    int v3 = *(const void **)(a1 + 456);
    *(void *)(a1 + 456) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 216), a2);
    uint64_t v4 = *(const void **)(a1 + 208);
    *(void *)(a1 + 208) = 0;
    if (v4) {
      CFRelease(v4);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
    char v6 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    long long v7 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 488))
  {
    int v3 = *(const void **)(a1 + 456);
    *(void *)(a1 + 456) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 216), a2);
    uint64_t v4 = *(const void **)(a1 + 208);
    *(void *)(a1 + 208) = 0;
    if (v4) {
      CFRelease(v4);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
    char v6 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    long long v7 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      uint64_t result = v6;
      char v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (v9)
  {
    uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,WTF::String,WTF::String>(a1, a2, (uint64_t *)&v8, (uint64_t)a3);
    if (v9)
    {
      uint64_t result = v8;
      char v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,WTF::String,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v11);
  char v8 = v12;
  if (!v12)
  {
    *(unsigned char *)a4 = 0;
    goto LABEL_6;
  }
  if (*((unsigned char *)a2 + 8) && *((unsigned char *)a3 + 8))
  {
    uint64_t v9 = *a2;
    *a2 = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v10;
    *(_OWORD *)(a4 + 16) = v11;
    char v8 = 1;
LABEL_6:
    *(unsigned char *)(a4 + 32) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    int v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[624])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)v5, a2);
  }
  *a2 = 0;
  a2[624] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v8);
  if (v8[296])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData>(a1, a2, (uint64_t)v8, a3);
  }
  else
  {
    *a3 = 0;
    a3[624] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v9);
  if (v9[200])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest>(a1, a2, a3, (uint64_t)v9, a4);
  }
  else
  {
    *a4 = 0;
    a4[624] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v10);
  if (v10[16])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, a2, a3, a4, (uint64_t)v10, a5);
  }
  else
  {
    *a5 = 0;
    a5[624] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, v14);
  if (v15)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>(a1, a2, a3, a4, a5, (uint64_t)v14, a6);
    if (v15)
    {
      uint64_t v13 = v14[0];
      v14[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
  else
  {
    *a6 = 0;
    a6[624] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, v16);
  if (v17)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL>(a1, a2, a3, a4, a5, a6, (uint64_t)v16, a7);
    if (v17)
    {
      char v15 = v16[0];
      v16[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v14);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  else
  {
    *a7 = 0;
    a7[624] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v17);
  if (v18)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData>((uint64_t *)a1, a2, a3, a4, a5, a6, a7, (uint64_t)&v17, a8);
    if (v18)
    {
      uint64_t v16 = v17;
      uint64_t v17 = 0;
      if (v16) {
        CFRelease(*(CFTypeRef *)(v16 + 8));
      }
    }
  }
  else
  {
    *a8 = 0;
    a8[624] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  v19[0] = result;
  v19[1] = v18;
  if ((_BYTE)v18) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>(a2, a3, a4, a5, a6, a7, a8, (uint64_t)a9, (uint64_t)v19);
  }
  *a9 = 0;
  a9[624] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t result = a8;
  if (*(unsigned char *)(a1 + 16)
    && *(unsigned char *)(a2 + 296)
    && *(unsigned char *)(a3 + 200)
    && *(unsigned char *)(a4 + 16)
    && *(unsigned char *)(a5 + 40)
    && *(unsigned char *)(a6 + 40)
    && *(unsigned char *)(a7 + 8)
    && *(unsigned char *)(a9 + 8))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEEEEN6WebKit13FrameInfoDataENS3_15ResourceRequestENS_8optionalINS6_INS3_24NavigationIdentifierTypeES9_yLSA_0EEEEENS5_3URLESK_NSD_8UserDataENS5_8WallTimeEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJSC_SE_SF_SJ_SK_SK_SL_SM_EJEJEJSC_SE_SF_SJ_SK_SK_SL_SM_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSQ_IJDpT2_EEEDpOT3_(a8, (_OWORD *)a1, a2, a3, (_OWORD *)a4, (uint64_t *)a5, (uint64_t *)a6, (uint64_t *)a7, (void *)a9);
    *(unsigned char *)(result + 62WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEEEEN6WebKit13FrameInfoDataENS3_15ResourceRequestENS_8optionalINS6_INS3_24NavigationIdentifierTypeES9_yLSA_0EEEEENS5_3URLESK_NSD_8UserDataENS5_8WallTimeEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJSC_SE_SF_SJ_SK_SK_SL_SM_EJEJEJSC_SE_SF_SJ_SK_SK_SL_SM_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSQ_IJDpT2_EEEDpOT3_(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, void *a9)
{
  *(_OWORD *)a1 = *a2;
  std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1 + 16, a3);
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a1 + 312, a4);
  *(_OWORD *)(a1 + 512) = *a5;
  WTF::URL::URL(a1 + 528, a6);
  WTF::URL::URL(a1 + 568, a7);
  uint64_t v15 = *a8;
  if (v15) {
    CFRetain(*(CFTypeRef *)(v15 + 8));
  }
  *(void *)(a1 + 608) = v15;
  *(void *)(a1 + 616) = *a9;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 568);
  *(void *)(a1 + 568) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 528);
  *(void *)(a1 + 528) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = *(const void **)(a1 + 504);
  *(void *)(a1 + 50WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 312));
  char v8 = *(WTF::StringImpl **)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 248);
  if (v9 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D7030[v9])(&v12, a1 + 224);
  }
  *(_DWORD *)(a1 + 248) = -1;
  uint64_t v10 = *(const void **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[624])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v6);
  if (v6[296])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData>(a1, (uint64_t)v6, a2);
  }
  else
  {
    *a2 = 0;
    a2[624] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v7);
  if (v7[200])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest>(a1, a2, (uint64_t)v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[624] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v7);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v9);
  if (v9[16]) {
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, a2, a3, (uint64_t)v9, a4);
  }
  *a4 = 0;
  a4[624] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v12);
  if (v13)
  {
    uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>(a1, a2, a3, a4, (uint64_t)&v12, a5);
    if (v13)
    {
      uint64_t result = v12;
      char v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a5 = 0;
    a5[624] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)v14);
  if (v14[80])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError>((uint64_t *)a1, a2, a3, a4, a5, (uint64_t)v14, a6);
  }
  else
  {
    *a6 = 0;
    a6[624] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v12);
}

void IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  unsigned __int16 v14 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(a1);
  if (v14 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading>((IPC::Decoder *)a1, a2, a3, a4, a5, a6, &v14, a7);
  }
  else
  {
    *a7 = 0;
    a7[624] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X8>)
{
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v17);
  if (v18)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData>((uint64_t *)a1, a2, a3, a4, a5, a6, a7, (uint64_t)&v17, a8);
    if (v18)
    {
      uint64_t v16 = v17;
      uint64_t v17 = 0;
      if (v16) {
        CFRelease(*(CFTypeRef *)(v16 + 8));
      }
    }
  }
  else
  {
    *a8 = 0;
    a8[624] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(a1);
  __int16 v18 = result;
  if ((unsigned __int16)result > 0xFFu) {
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>(a2, a3, a4, a5, a6, a7, a8, (uint64_t)a9, &v18);
  }
  *a9 = 0;
  a9[624] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unsigned char *a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unsigned char *a9)
{
  uint64_t result = a8;
  if (*(unsigned char *)(a1 + 296)
    && *(unsigned char *)(a2 + 200)
    && *(unsigned char *)(a3 + 16)
    && *(unsigned char *)(a4 + 8)
    && *(unsigned char *)(a5 + 80)
    && a6[1]
    && *(unsigned char *)(a7 + 8)
    && a9[1])
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN6WebKit13FrameInfoDataEN7WebCore15ResourceRequestENS_8optionalIN3WTF23ObjectIdentifierGenericINS5_24NavigationIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE0EEEEENS8_6StringENS5_13ResourceErrorENS5_19WillContinueLoadingENS3_8UserDataENS5_27WillInternallyHandleFailureEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJS4_S6_SF_SG_SH_SI_SJ_SK_EJEJEJS4_S6_SF_SG_SH_SI_SJ_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(a8, a1, a2, (_OWORD *)a3, (uint64_t *)a4, (uint64_t *)a5, a6, (uint64_t *)a7, a9);
    *(unsigned char *)(result + 62WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN6WebKit13FrameInfoDataEN7WebCore15ResourceRequestENS_8optionalIN3WTF23ObjectIdentifierGenericINS5_24NavigationIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE0EEEEENS8_6StringENS5_13ResourceErrorENS5_19WillContinueLoadingENS3_8UserDataENS5_27WillInternallyHandleFailureEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJS4_S6_SF_SG_SH_SI_SJ_SK_EJEJEJS4_S6_SF_SG_SH_SI_SJ_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t *a5, uint64_t *a6, unsigned char *a7, uint64_t *a8, unsigned char *a9)
{
  uint64_t v16 = std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1, a2);
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(v16 + 296, a3);
  *(_OWORD *)(a1 + 496) = *a4;
  uint64_t v17 = *a5;
  *a5 = 0;
  *(void *)(a1 + 512) = v17;
  uint64_t v18 = *a6;
  *a6 = 0;
  *(void *)(a1 + 52WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v18;
  WTF::URL::URL(a1 + 528, a6 + 1);
  uint64_t v19 = a6[6];
  a6[6] = 0;
  *(void *)(a1 + 568) = v19;
  LODWORD(v19) = *((_DWORD *)a6 + 14);
  *(_WORD *)(a1 + 58WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *((_WORD *)a6 + 30);
  *(_DWORD *)(a1 + 576) = v19;
  uint64_t v20 = a6[8];
  a6[8] = 0;
  *(void *)(a1 + 58WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v20;
  *(unsigned char *)(a1 + 592) = *((unsigned char *)a6 + 72);
  *(unsigned char *)(a1 + 60WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *a7;
  uint64_t v21 = *a8;
  if (v21) {
    CFRetain(*(CFTypeRef *)(v21 + 8));
  }
  *(void *)(a1 + 608) = v21;
  *(unsigned char *)(a1 + 616) = *a9;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *(const void **)(a1 + 584);
  *(void *)(a1 + 58WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 568);
  *(void *)(a1 + 568) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = *(WTF::StringImpl **)(a1 + 528);
  *(void *)(a1 + 528) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 520);
  *(void *)(a1 + 52WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  char v8 = *(WTF::StringImpl **)(a1 + 512);
  *(void *)(a1 + 512) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(const void **)(a1 + 488);
  *(void *)(a1 + 488) = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 296));
  long long v11 = *(WTF::StringImpl **)(a1 + 240);
  *(void *)(a1 + 24WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *(unsigned int *)(a1 + 232);
  if (v12 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D7030[v12])(&v15, a1 + 208);
  }
  *(_DWORD *)(a1 + 232) = -1;
  char v13 = *(const void **)(a1 + 200);
  *(void *)(a1 + 20WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v13) {
    CFRelease(v13);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[568])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)v5, a2);
  }
  *a2 = 0;
  a2[568] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v8);
  if (v8[296])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData>(a1, a2, (uint64_t)v8, a3);
  }
  else
  {
    *a3 = 0;
    a3[568] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v9);
  if (v9[200])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest>(a1, a2, a3, (uint64_t)v9, a4);
  }
  else
  {
    *a4 = 0;
    a4[568] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v10);
  if (v10[16])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, a2, a3, a4, (uint64_t)v10, a5);
  }
  else
  {
    *a5 = 0;
    a5[568] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v14);
  if (v15)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>((uint64_t *)a1, a2, a3, a4, a5, (uint64_t)&v14, a6);
    if (v15)
    {
      char v13 = v14;
      unsigned __int16 v14 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
  else
  {
    *a6 = 0;
    a6[568] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  unint64_t v9 = a1[1];
  uint64_t v10 = *a1;
  unint64_t v11 = a1[2] - *a1;
  if (v9 <= v11)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      uint64_t v20 = a1;
      uint64_t v23 = a7;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        a1 = v20;
        a7 = v23;
        uint64_t v15 = *v20;
        unint64_t v14 = v20[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v12 = (unsigned __int8 *)(v10 + v11);
  a1[2] = (uint64_t)(v12 + 1);
  if (!v10)
  {
    unint64_t v14 = v9;
    uint64_t v15 = 0;
LABEL_7:
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      uint64_t v19 = a1;
      uint64_t v22 = a7;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        a1 = v19;
        a7 = v22;
        uint64_t v10 = *v19;
        unint64_t v9 = v19[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v13 = *v12;
  if (v13 < 2)
  {
    __int16 v24 = (v13 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL>(a1, a2, a3, a4, a5, a6, &v24, a7);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v18 = a1[3];
  if (v18)
  {
    if (v9)
    {
      uint64_t v21 = a7;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v10);
      a7 = v21;
    }
  }
  *a7 = 0;
  a7[568] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X8>)
{
  unsigned __int16 v16 = IPC::Decoder::decode<WebCore::TextGranularity>(a1);
  if (v16 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType>(a1, a2, a3, a4, a5, a6, a7, &v16, a8);
  }
  else
  {
    *a8 = 0;
    a8[568] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X7>, unsigned char *a9@<X8>)
{
  IPC::Decoder::decode<WebCore::CertificateInfo>(a1, (uint64_t)&cf);
  if (v20)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo>(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&cf);
    if (v20)
    {
      CFTypeRef v18 = cf;
      CFTypeRef cf = 0;
      if (v18) {
        CFRelease(v18);
      }
    }
  }
  else
  {
    *a9 = 0;
    a9[568] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  unint64_t v12 = a1[1];
  uint64_t v13 = *a1;
  unint64_t v14 = a1[2] - *a1;
  if (v12 <= v14)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      uint64_t v23 = a1;
      uint64_t v26 = a9;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        a1 = v23;
        uint64_t v18 = *v23;
        unint64_t v17 = v23[1];
        a9 = v26;
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v15 = (unsigned __int8 *)(v13 + v14);
  a1[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
    unint64_t v17 = v12;
    uint64_t v18 = 0;
LABEL_7:
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20)
    {
      uint64_t v22 = a1;
      uint64_t v25 = a9;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        a1 = v22;
        uint64_t v13 = *v22;
        unint64_t v12 = v22[1];
        a9 = v25;
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v16 = *v15;
  if (v16 < 2)
  {
    __int16 v27 = (v16 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v27);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v21 = a1[3];
  if (v21)
  {
    if (v12)
    {
      __int16 v24 = a9;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v13);
      a9 = v24;
    }
  }
  *a9 = 0;
  a9[568] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, unsigned char *a11)
{
  unint64_t v13 = a1[1];
  uint64_t v14 = *a1;
  unint64_t v15 = a1[2] - *a1;
  if (v13 <= v15)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20)
    {
      __int16 v24 = a1;
      __int16 v27 = a9;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        a1 = v24;
        uint64_t v19 = *v24;
        unint64_t v18 = v24[1];
        a9 = v27;
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_7;
  }
  unsigned int v16 = (unsigned __int8 *)(v14 + v15);
  a1[2] = (uint64_t)(v16 + 1);
  if (!v14)
  {
    unint64_t v18 = v13;
    uint64_t v19 = 0;
LABEL_7:
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1[3];
    if (v21)
    {
      uint64_t v23 = a1;
      uint64_t v26 = a9;
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v19, v18);
        a1 = v23;
        uint64_t v14 = *v23;
        unint64_t v13 = v23[1];
        a9 = v26;
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v17 = *v16;
  if (v17 < 2)
  {
    __int16 v28 = (v17 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, &v28);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v22 = a1[3];
  if (v22)
  {
    if (v13)
    {
      uint64_t v25 = a9;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v14);
      a9 = v25;
    }
  }
  *a9 = 0;
  a9[568] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, unsigned char *a11, unsigned char *a12)
{
  unint64_t v14 = a1[1];
  uint64_t v15 = *a1;
  unint64_t v16 = a1[2] - *a1;
  if (v14 <= v16)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v21 = a1[3];
    if (v21)
    {
      uint64_t v25 = a1;
      __int16 v28 = a9;
      if (v14)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        a1 = v25;
        a9 = v28;
        uint64_t v20 = *v25;
        unint64_t v19 = v25[1];
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_7;
  }
  unsigned int v17 = (unsigned __int8 *)(v15 + v16);
  a1[2] = (uint64_t)(v17 + 1);
  if (!v15)
  {
    unint64_t v19 = v14;
    uint64_t v20 = 0;
LABEL_7:
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v22 = a1[3];
    if (v22)
    {
      __int16 v24 = a1;
      __int16 v27 = a9;
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20, v19);
        a1 = v24;
        a9 = v27;
        uint64_t v15 = *v24;
        unint64_t v14 = v24[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v18 = *v17;
  if (v18 < 2)
  {
    __int16 v29 = (v18 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, &v29);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v23 = a1[3];
  if (v23)
  {
    if (v14)
    {
      uint64_t v26 = a9;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v15);
      a9 = v26;
    }
  }
  *a9 = 0;
  a9[568] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, unsigned char *a11, unsigned char *a12, unsigned char *a13)
{
  unsigned __int16 v22 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(a1);
  if (v22 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent>((IPC::Decoder *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, &v22);
  }
  else
  {
    *a9 = 0;
    a9[568] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, unsigned char *a11, unsigned char *a12, unsigned char *a13, unsigned char *a14)
{
  unsigned __int16 v23 = IPC::ArgumentCoder<WebCore::PathRoundedRect::Strategy,void>::decode<IPC::Decoder>(a1);
  if (v23 <= 0xFFu)
  {
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v26 = *((void *)a1 + 3);
    if (v26)
    {
      if (v25) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
      }
    }
    *a9 = 0;
    a9[568] = 0;
  }
  else
  {
    unsigned __int16 v27 = v23;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, &v27);
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X6>, unsigned char *a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, unsigned char *a11, unsigned char *a12, unsigned char *a13, unsigned char *a14, unsigned char *a15)
{
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v24);
  if (v25)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>(a2, a3, a4, a5, a6, a7, a8, (uint64_t)a9, a10, a11, a12, a13, a14, a15, (uint64_t)&v24);
    if (v25)
    {
      uint64_t v23 = v24;
      uint64_t v24 = 0;
      if (v23) {
        CFRelease(*(CFTypeRef *)(v23 + 8));
      }
    }
  }
  else
  {
    *a9 = 0;
    a9[568] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unsigned char *a6@<X6>, unsigned char *a7@<X7>, uint64_t a8@<X8>, uint64_t a9, unsigned char *a10, unsigned char *a11, unsigned char *a12, unsigned char *a13, unsigned char *a14, uint64_t a15)
{
  uint64_t result = a8;
  if (*(unsigned char *)(a1 + 16)
    && *(unsigned char *)(a2 + 296)
    && *(unsigned char *)(a3 + 200)
    && *(unsigned char *)(a4 + 16)
    && *(unsigned char *)(a5 + 8)
    && a6[1]
    && a7[1]
    && *(unsigned char *)(a9 + 8)
    && a10[1]
    && a11[1]
    && a12[1]
    && a13[1]
    && a14[1]
    && *(unsigned char *)(a15 + 8))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEEEEN6WebKit13FrameInfoDataENS3_15ResourceRequestENS_8optionalINS6_INS3_24NavigationIdentifierTypeES9_yLSA_0EEEEENS5_6StringEbNS3_13FrameLoadTypeENS3_15CertificateInfoEbbbNS3_18HasInsecureContentENS3_16MouseEventPolicyENSD_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13EEJSC_SE_SF_SJ_SK_bSL_SM_bbbSN_SO_SP_EJEJEJSC_SE_SF_SJ_SK_bSL_SM_bbbSN_SO_SP_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENST_IJDpT2_EEEDpOT3_(a8, (_OWORD *)a1, a2, a3, (_OWORD *)a4, (uint64_t *)a5, a6, a7, (uint64_t *)a9, a10, a11, a12, a13, a14, (uint64_t *)a15);
    *(unsigned char *)(result + 568) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEEEEN6WebKit13FrameInfoDataENS3_15ResourceRequestENS_8optionalINS6_INS3_24NavigationIdentifierTypeES9_yLSA_0EEEEENS5_6StringEbNS3_13FrameLoadTypeENS3_15CertificateInfoEbbbNS3_18HasInsecureContentENS3_16MouseEventPolicyENSD_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13EEJSC_SE_SF_SJ_SK_bSL_SM_bbbSN_SO_SP_EJEJEJSC_SE_SF_SJ_SK_bSL_SM_bbbSN_SO_SP_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENST_IJDpT2_EEEDpOT3_(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t *a6, unsigned char *a7, unsigned char *a8, uint64_t *a9, unsigned char *a10, unsigned char *a11, unsigned char *a12, unsigned char *a13, unsigned char *a14, uint64_t *a15)
{
  *(_OWORD *)a1 = *a2;
  std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1 + 16, a3);
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a1 + 312, a4);
  *(_OWORD *)(a1 + 512) = *a5;
  uint64_t v21 = *a6;
  *a6 = 0;
  *(void *)(a1 + 528) = v21;
  *(unsigned char *)(a1 + 536) = *a7;
  *(unsigned char *)(a1 + 537) = *a8;
  uint64_t v22 = *a9;
  *a9 = 0;
  *(void *)(a1 + 54WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v22;
  *(unsigned char *)(a1 + 552) = *a10;
  *(unsigned char *)(a1 + 553) = *a11;
  *(unsigned char *)(a1 + 55WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *a12;
  *(unsigned char *)(a1 + 555) = *a13;
  *(unsigned char *)(a1 + 556) = *a14;
  uint64_t v23 = *a15;
  if (*a15) {
    CFRetain(*(CFTypeRef *)(v23 + 8));
  }
  *(void *)(a1 + 56WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v23;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 560);
  *(void *)(a1 + 56WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *(const void **)(a1 + 544);
  *(void *)(a1 + 54WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 528);
  *(void *)(a1 + 528) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  char v6 = *(const void **)(a1 + 504);
  *(void *)(a1 + 50WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 312));
  char v8 = *(WTF::StringImpl **)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 248);
  if (v9 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9D7030[v9])(&v12, a1 + 224);
  }
  *(_DWORD *)(a1 + 248) = -1;
  uint64_t v10 = *(const void **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v10) {
    CFRelease(v10);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  return a1;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[240])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)v5, a2);
  }
  *a2 = 0;
  a2[240] = 0;
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)v7);
  if (v7[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, a2, (uint64_t)v7, a3);
  }
  *a3 = 0;
  a3[240] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v9);
  if (v9[200])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest>(a1, a2, a3, (uint64_t)v9, a4);
  }
  else
  {
    *a4 = 0;
    a4[240] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v10);
  if (v11)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>(a2, a3, a4, (uint64_t)&v10, (uint64_t)a5);
    if (v11)
    {
      uint64_t v9 = v10;
      uint64_t v10 = 0;
      if (v9) {
        CFRelease(*(CFTypeRef *)(v9 + 8));
      }
    }
  }
  else
  {
    *a5 = 0;
    a5[240] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = a5;
  if (*(unsigned char *)(a1 + 16) && *(unsigned char *)(a2 + 16) && *(unsigned char *)(a3 + 200) && *(unsigned char *)(a4 + 8))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEEEENS_8optionalINS6_INS3_24NavigationIdentifierTypeES9_yLSA_0EEEEENS3_15ResourceRequestEN6WebKit8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3EEJSC_SG_SH_SJ_EJEJEJSC_SG_SH_SJ_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(a5, (_OWORD *)a1, (_OWORD *)a2, a3, (uint64_t *)a4);
    *(unsigned char *)(result + 24WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS5_33SupportsObjectIdentifierNullStateE1EEEEENS_8optionalINS6_INS3_24NavigationIdentifierTypeES9_yLSA_0EEEEENS3_15ResourceRequestEN6WebKit8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3EEJSC_SG_SH_SJ_EJEJEJSC_SG_SH_SJ_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t *a5)
{
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = *a3;
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a1 + 32, a4);
  uint64_t v7 = *a5;
  if (v7) {
    CFRetain(*(CFTypeRef *)(v7 + 8));
  }
  *(void *)(a1 + 232) = v7;
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 240))
  {
    uint64_t v2 = *(void *)(a1 + 232);
    *(void *)(a1 + 232) = 0;
    if (v2) {
      CFRelease(*(CFTypeRef *)(v2 + 8));
    }
    uint64_t v3 = *(const void **)(a1 + 224);
    *(void *)(a1 + 22WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 32));
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit20ProvisionalPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D7298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit20ProvisionalPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9D7298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit20ProvisionalPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3364;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[112])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ContentFilterUnblockHandler>(a1, (uint64_t)v5);
  if (v5[96])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,WebCore::ContentFilterUnblockHandler>(a1, (uint64_t)v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[112] = 0;
  }
  return std::__optional_destruct_base<WebCore::ContentFilterUnblockHandler,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ContentFilterUnblockHandler>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 96))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder,WebCore::ContentFilterUnblockHandler>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v7);
  char v6 = v8;
  if (!v8)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 96))
  {
    uint64_t result = std::__tuple_leaf<0ul,WebCore::ContentFilterUnblockHandler,false>::__tuple_leaf[abi:sn180100]<WebCore::ContentFilterUnblockHandler,void>(a3, (uint64_t *)a2);
    *(_OWORD *)(a3 + 96) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 112) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebCore::ContentFilterUnblockHandler,false>::__tuple_leaf[abi:sn180100]<WebCore::ContentFilterUnblockHandler,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100](a1 + 48, (uint64_t)(a2 + 6));
  uint64_t v5 = a2[10];
  a2[10] = 0;
  *(void *)(a1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v5;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ContentFilterUnblockHandler,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(const void **)(a1 + 80);
    *(void *)(a1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    if (v2) {
      CFRelease(v2);
    }
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100]((void *)(a1 + 48));
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v2 = *(const void **)(a1 + 80);
    *(void *)(a1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    if (v2) {
      CFRelease(v2);
    }
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100]((void *)(a1 + 48));
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit20ProvisionalPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D72C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit20ProvisionalPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D72C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit20ProvisionalPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, int *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v4, *a2);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(v4, a2[1]);
  uint64_t v5 = v3[1];

  return IPC::Connection::sendMessageImpl(v5, v3, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D72E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D72E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit15RemotePageProxyES8_FvONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSE_16ResourceResponseERKNSE_15ResourceRequestEbRKNS_6StringEbNSE_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D7310;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit15RemotePageProxyES8_FvONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSE_16ResourceResponseERKNSE_15ResourceRequestEbRKNS_6StringEbNSE_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9D7310;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit15RemotePageProxyES8_FvONS7_13FrameInfoDataENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore24NavigationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEERKNSE_16ResourceResponseERKNSE_15ResourceRequestEbRKNS_6StringEbNSE_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSX_EE4callESX_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3345;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D7338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9D7338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3343;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    IPC::Decoder::markInvalid(a1);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      uint64_t v5 = v6;
      char v6 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v4);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder,WTF::String>(IPC::Decoder *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder,WTF::String,WebKit::UserData>(a2, &v6, (uint64_t)a3);
    if (v7)
    {
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        CFRelease(*(CFTypeRef *)(v5 + 8));
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[16] = 0;
  }
}

CFTypeRef IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder,WTF::String,WebKit::UserData>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a1 + 8) && *((unsigned char *)a2 + 8))
  {
    uint64_t v4 = *a1;
    *a1 = 0;
    *(void *)a3 = v4;
    uint64_t v5 = *a2;
    if (*a2) {
      CFTypeRef result = CFRetain(*(CFTypeRef *)(v5 + 8));
    }
    *(void *)(a3 + 8) = v5;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D7360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9D7360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

void sub_198E0B170(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198E0B2B4(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198E0B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198E0B560(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a10) {
    goto LABEL_12;
  }
  char v12 = 0;
  uint64_t v13 = *(void *)(a10 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x19972E8D0](v13);
  }
  uint64_t v14 = *(void *)(v13 + 8);
  int v15 = 1;
  uint64_t v16 = v14 - 1;
  *(void *)(v13 + 8) = v14 - 1;
  if (v14 == 1)
  {
    uint64_t v19 = *(void *)(v13 + 16);
    uint64_t v17 = *(void *)(v13 + 24);
    *(void *)(v13 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    BOOL v18 = v19 != 0;
  }
  else
  {
    uint64_t v17 = 0;
    BOOL v18 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 == 1)
  {
    if (v16) {
      goto LABEL_12;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16) {
      goto LABEL_12;
    }
  }
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (!v18) {
    WTF::fastFree((WTF *)v13, a2);
  }
LABEL_12:
  if (a11) {
    CFRelease(*(CFTypeRef *)(a11 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198E0B7F0(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198E0B8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a9) {
    CFRelease(*(CFTypeRef *)(a9 + 8));
  }
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198E0BA40(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_198E0BB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198E0BBC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198E0BC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v9 + 16));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_198E0BD00(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WKWebProcessBundleParameters *WKBundleGetParameters(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::InjectedBundle::bundleParameters((WebKit::InjectedBundle *)a1);
}

void sub_198E0BEAC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198E0BFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(WTF::StringImpl **, char *))off_1EE9D7378[a12])(&a9, &a10);
  }
  _Unwind_Resume(a1);
}

void sub_198E0C0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v11);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198E0C260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v13);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, v13);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198E0C39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v12 - 24));
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v14);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<WebCore::DocumentParserYieldToken>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = (WTF *)MEMORY[0x199737D10]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::ResponsivenessTimer::timerFired(uint64_t this)
{
  if (!*(unsigned char *)(this + 49)) {
    return this;
  }
  uint64_t v1 = this;
  if (*(double *)(this + 40) != 0.0)
  {
    this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    double v2 = *(double *)(v1 + 40);
    *(void *)(v1 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    if (v2 > v3)
    {
      return WTF::RunLoop::TimerBase::start();
    }
  }
  *(_WORD *)(v1 + 49) = 0;
  if (!*(unsigned char *)(v1 + 48)) {
    return this;
  }
  uint64_t v4 = *(void *)(*(void *)v1 + 8);
  (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  if (byte_1EB359BF9)
  {
    if (_MergedGlobals_91)
    {
LABEL_17:
      *(unsigned char *)(v1 + 49) = 1;
      WTF::RunLoop::TimerBase::start();
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v5 = getenv("DYLD_INSERT_LIBRARIES");
    if (v5) {
      BOOL v6 = strstr(v5, "libgmalloc") != 0;
    }
    else {
      BOOL v6 = 0;
    }
    _MergedGlobals_91 = v6;
    byte_1EB359BF9 = 1;
    if (v6) {
      goto LABEL_17;
    }
  }
  if (((*(uint64_t (**)(void))(**(void **)(*(void *)v1 + 8) + 48))(*(void *)(*(void *)v1 + 8)) & 1) == 0) {
    goto LABEL_17;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  *(unsigned char *)(v1 + 48) = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
LABEL_18:
  char v7 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 64);

  return v7(v4);
}

void WebKit::ResponsivenessTimer::~ResponsivenessTimer(WebKit::ResponsivenessTimer *this)
{
  double v2 = (WebKit::ResponsivenessTimer *)((char *)this + 8);
  *((void *)this + 1) = &unk_1EE9B3390;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  uint64_t v5 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
}

void WebKit::SpeechRecognitionPermissionManager::~SpeechRecognitionPermissionManager(WebKit::SpeechRecognitionPermissionManager *this, WTF::StringImpl *a2)
{
  unint64_t v4 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  if (v4 != v3)
  {
    do
    {
      uint64_t v5 = *(void *)(*((void *)this + 4) + 8 * v4);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      BOOL v6 = v23;
      LOBYTE(v23) = 4;
      uint64_t v24 = v6;
      char v25 = 1;
      uint64_t v7 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v7 + 16))(v7, &v23);
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      if (v25)
      {
        char v8 = v24;
        uint64_t v24 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2) {
            WTF::StringImpl::destroy(v8, a2);
          }
          else {
            *(_DWORD *)v8 -= 2;
          }
        }
      }
      unint64_t v9 = *((unsigned int *)this + 10);
      v4 += v9 + 1;
      do
        v4 -= v9;
      while (v4 >= v9);
    }
    while (v3 != v4);
    unint64_t v10 = *((void *)this + 2);
    unint64_t v11 = *((void *)this + 3);
    uint64_t v12 = (WTF *)*((void *)this + 4);
    if (v10 <= v11)
    {
      if (v10 == v11) {
        goto LABEL_29;
      }
      BOOL v18 = (WebKit::SpeechRecognitionPermissionRequest **)((char *)v12 + 8 * v10);
      uint64_t v19 = 8 * v11 - 8 * v10;
      do
      {
        uint64_t v20 = *v18;
        *BOOL v18 = 0;
        if (v20) {
          WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v20, a2);
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
    else
    {
      if (v11)
      {
        uint64_t v13 = 8 * v11;
        do
        {
          uint64_t v14 = *(WebKit::SpeechRecognitionPermissionRequest **)v12;
          *(void *)uint64_t v12 = 0;
          if (v14) {
            WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v14, a2);
          }
          uint64_t v12 = (WTF *)((char *)v12 + 8);
          v13 -= 8;
        }
        while (v13);
        uint64_t v12 = (WTF *)*((void *)this + 4);
        unint64_t v10 = *((void *)this + 2);
        unint64_t v9 = *((unsigned int *)this + 10);
      }
      if (v10 != v9)
      {
        int v15 = (WebKit::SpeechRecognitionPermissionRequest **)((char *)v12 + 8 * v10);
        uint64_t v16 = 8 * v9 - 8 * v10;
        do
        {
          uint64_t v17 = *v15;
          *int v15 = 0;
          if (v17) {
            WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v17, a2);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
    }
  }
  uint64_t v12 = (WTF *)*((void *)this + 4);
LABEL_29:
  if (v12)
  {
    *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    *((_DWORD *)this + 1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    WTF::fastFree(v12, a2);
  }
  uint64_t v21 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, a2);
  }
  if (*(void *)this)
  {
    *(void *)(*(void *)this + 8) = 0;
    uint64_t v22 = *(unsigned int **)this;
    *(void *)this = 0;
    if (v22)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, a2);
      }
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

void WebKit::SpeechRecognitionPermissionManager::request(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  unint64_t v4 = (uint64_t *)(a1 + 16);
  WebKit::SpeechRecognitionPermissionRequest::create(a2, a3, (uint64_t *)&v9);
  WTF::Deque<WTF::Ref<WebKit::SpeechRecognitionPermissionRequest,WTF::RawPtrTraits<WebKit::SpeechRecognitionPermissionRequest>,WTF::DefaultRefDerefTraits<WebKit::SpeechRecognitionPermissionRequest>>,0ul>::append(v4, (uint64_t *)&v9);
  BOOL v6 = v9;
  unint64_t v9 = 0;
  if (v6) {
    WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v6, v5);
  }
  unint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  if (v7 > v8) {
    v8 += *(unsigned int *)(a1 + 40);
  }
  if (v8 - v7 == 1) {
    WebKit::SpeechRecognitionPermissionManager::startNextRequest((WebKit::SpeechRecognitionPermissionManager *)a1, v5);
  }
}

uint64_t *WTF::Deque<WTF::Ref<WebKit::SpeechRecognitionPermissionRequest,WTF::RawPtrTraits<WebKit::SpeechRecognitionPermissionRequest>,WTF::DefaultRefDerefTraits<WebKit::SpeechRecognitionPermissionRequest>>,0ul>::append(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (*result)
  {
    if (v4 + 1 != *result) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *((unsigned int *)result + 6);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    uint64_t result = WTF::Deque<WTF::String,0ul>::expandCapacity(result);
    uint64_t v4 = v3[1];
  }
LABEL_10:
  uint64_t v6 = v3[2];
  uint64_t v7 = *a2;
  *a2 = 0;
  *(void *)(v6 + 8 * vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v7;
  if (v4 == *((unsigned int *)v3 + 6) - 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v4 + 1;
  }
  v3[1] = v8;
  return result;
}

unsigned int *WebKit::SpeechRecognitionPermissionRequest::create@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)uint64_t v6 = 1;
  uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  uint64_t v8 = *(atomic_uint **)a1;
  if (*(void *)a1) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)(v6 + 8) = v8;
  uint64_t v9 = *a2;
  *a2 = 0;
  *(void *)(v6 + 16) = v9;
  *a3 = v6;
  return result;
}

void WebKit::SpeechRecognitionPermissionManager::startNextRequest(WebKit::SpeechRecognitionPermissionManager *this, WTF::StringImpl *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2 != *((void *)this + 3))
  {
    while (1)
    {
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(WebKit::SpeechRecognitionPermissionRequest **)(v4 + 8 * v2);
      uint64_t v6 = *((void *)v5 + 1);
      if (v6)
      {
        if (*(void *)(v6 + 8)) {
          break;
        }
      }
      *(void *)(v4 + 8 * v2) = 0;
      WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v5, a2);
      uint64_t v7 = *((void *)this + 2);
      uint64_t v8 = *((void *)this + 3);
      if (v7 == *((unsigned int *)this + 10) - 1) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = v7 + 1;
      }
      *((void *)this + 2) = v2;
      if (v2 == v8) {
        return;
      }
    }
    WebKit::SpeechRecognitionPermissionManager::startProcessingRequest(this);
  }
}

void WebKit::SpeechRecognitionPermissionManager::startProcessingRequest(WebKit::SpeechRecognitionPermissionManager *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  uint64_t v4 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)v3);
  WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(v4);
  uint64_t v6 = *(void *)(v3 + 272);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKedouble y = (PAL *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v5);
  if (BoolValueForKey)
  {
    *((void *)this + 6) = 0x100000001;
    goto LABEL_8;
  }
  uint64_t AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeAudio(BoolValueForKey);
  uint64_t v9 = [(id)((uint64_t (*)(void))*MEMORY[0x1E4FB62D8])() authorizationStatusForMediaType:AVFoundation_AVMediaTypeAudio];
  if (v9)
  {
    *((_DWORD *)this + 12) = (unint64_t)(v9 - 3) < 0xFFFFFFFFFFFFFFFELL;
    if ((unint64_t)(v9 - 3) >= 0xFFFFFFFFFFFFFFFELL) {
      goto LABEL_28;
    }
LABEL_17:
    unint64_t v11 = (WebKit *)[(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6338])() authorizationStatus];
    if ((unint64_t)v11 - 1 >= 3)
    {
      if (!WebKit::checkUsageDescriptionStringForSpeechRecognition(v11))
      {
        *((_DWORD *)this + 13) = 0;
        goto LABEL_30;
      }
      *((_DWORD *)this + 13) = 2;
    }
    else
    {
      *((_DWORD *)this + 13) = v11 == (WebKit *)3;
      if (v11 != (WebKit *)3) {
        goto LABEL_30;
      }
    }
    uint64_t v13 = *((void *)this + 2);
    if (v13 == *((void *)this + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x198E0CE48);
    }
    uint64_t v14 = *(void *)(*(void *)(*((void *)this + 4) + 8 * v13) + 8);
    if (v14) {
      uint64_t v14 = *(void *)(v14 + 8);
    }
    if (WebKit::checkSpeechRecognitionServiceAvailability((WebKit *)(v14 + 16), v12))
    {
LABEL_8:
      if (*((_DWORD *)this + 14))
      {
        WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(this);
        if (!v2) {
          return;
        }
        goto LABEL_36;
      }
      goto LABEL_28;
    }
LABEL_30:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    char v15 = 5;
    goto LABEL_31;
  }
  if (WebKit::checkUsageDescriptionStringForType((WebKit *)1, v10))
  {
    *((_DWORD *)this + 12) = 2;
    goto LABEL_17;
  }
  *((_DWORD *)this + 12) = 0;
LABEL_28:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v15 = 4;
LABEL_31:
  v18[0] = v15;
  char v20 = 1;
  WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest(this, v18);
  if (!v20 || (v17 = v19, uint64_t v19 = 0, !v17))
  {
LABEL_35:
    if (!v2) {
      return;
    }
    goto LABEL_36;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_35;
  }
  WTF::StringImpl::destroy(v17, v16);
  if (v2) {
LABEL_36:
  }
    CFRelease(*(CFTypeRef *)(v2 - 8));
}

uint64_t WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a1 + 24))
  {
    uint64_t result = 80;
    __break(0xC471u);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(WebKit::SpeechRecognitionPermissionRequest **)(v5 + 8 * v2);
    *(void *)(v5 + 8 * v2) = 0;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(WebKit::SpeechRecognitionPermissionRequest **)(v7 + 8 * v2);
    *(void *)(v7 + 8 * v2) = 0;
    if (v8)
    {
      WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v8, a2);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    if (v2 == *(unsigned int *)(a1 + 40) - 1) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v2 + 1;
    }
    *(void *)(a1 + 16) = v9;
    uint64_t v10 = *((void *)v6 + 2);
    *((void *)v6 + 2) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v10 + 16))(v10, a2);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    WebKit::SpeechRecognitionPermissionManager::startNextRequest((WebKit::SpeechRecognitionPermissionManager *)a1, v11);
    return (uint64_t)WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v6, v12);
  }
  return result;
}

WTF::StringImpl *WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(WebKit::SpeechRecognitionPermissionManager *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 2);
  if (v1 == *((void *)this + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x198E0D358);
  }
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 4) + 8 * v1) + 8);
  if (!v3) {
    goto LABEL_38;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    goto LABEL_38;
  }
  if (*((_DWORD *)this + 13) == 2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    uint64_t v5 = *(atomic_uint **)this;
    if (*(void *)this) {
      atomic_fetch_add(v5, 1u);
    }
    uint64_t v6 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v6 = &unk_1EE9D7638;
    *((void *)v6 + 1) = this;
    *((void *)v6 + 2) = v5;
    __int16 v28 = v6;
    WebKit::requestSpeechRecognitionAccess((uint64_t *)&v28);
LABEL_12:
    uint64_t result = v28;
    if (v28) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)v28 + 8))(v28);
    }
    return result;
  }
  if (*((_DWORD *)this + 12) == 2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    uint64_t v7 = *(atomic_uint **)this;
    if (*(void *)this) {
      atomic_fetch_add(v7, 1u);
    }
    uint64_t v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v8 = &unk_1EE9D7660;
    *((void *)v8 + 1) = this;
    *((void *)v8 + 2) = v7;
    __int16 v28 = v8;
    WebKit::requestAVCaptureAccessForType((PAL *)1, (uint64_t *)&v28);
    goto LABEL_12;
  }
  if (*((_DWORD *)this + 14) == 2)
  {
    LOBYTE(v28) = 0;
    int v31 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v28, v4 + 40);
    v32[0] = 0;
    int v33 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v32, v4 + 72);
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v27, (WebCore::SecurityOriginData *)v32);
    WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v26, (WebCore::SecurityOriginData *)&v28);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    uint64_t v10 = *(atomic_uint **)this;
    if (*(void *)this) {
      atomic_fetch_add(v10, 1u);
    }
    uint64_t v11 = *(void *)(*((void *)this + 1) + 8);
    if (v11) {
      uint64_t v12 = (CFTypeRef *)(v11 - 16);
    }
    else {
      uint64_t v12 = 0;
    }
    CFRetain(v12[1]);
    uint64_t v13 = *(void *)(v4 + 104);
    uint64_t v14 = *(void *)(v4 + 112);
    uint64_t v16 = v26;
    char v15 = v27;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v17 = &unk_1EE9D7688;
    v17[1] = this;
    v17[2] = v10;
    char v25 = v17;
    WebKit::WebPageProxy::requestUserMediaPermissionForSpeechRecognition((WebCore::SpeechRecognitionCaptureSource *)v12, v13, v14, v15, (uint64_t)v16, (uint64_t *)&v25);
    uint64_t v19 = (uint64_t)v25;
    char v25 = 0;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      if (!v11) {
        goto LABEL_23;
      }
    }
    else if (!v11)
    {
LABEL_23:
      char v20 = v26;
      uint64_t v26 = 0;
      if (v20) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v20, v18);
      }
      uint64_t result = v27;
      unsigned __int16 v27 = 0;
      if (result) {
        uint64_t result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v18);
      }
      if (v33 != -1) {
        uint64_t result = (WTF::StringImpl *)((uint64_t (*)(WTF **, unsigned char *))off_1EE9D7570[v33])(&v27, v32);
      }
      int v33 = -1;
      if (v31 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1EE9D7570[v31])(&v27, &v28);
      }
      return result;
    }
    CFRelease(*(CFTypeRef *)(v11 - 8));
    goto LABEL_23;
  }
  uint64_t v21 = *(void *)(*((void *)this + 1) + 8);
  if (v21) {
    uint64_t v22 = v21 - 16;
  }
  else {
    uint64_t v22 = 0;
  }
  CFRetain(*(CFTypeRef *)(v22 + 8));
  __int16 v23 = *(_WORD *)(*(void *)(v22 + 32) + 64);
  if (v21) {
    CFRelease(*(CFTypeRef *)(v21 - 8));
  }
  if ((v23 & 4) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v28) = 4;
    char v30 = 1;
  }
  else
  {
LABEL_38:
    LOBYTE(v28) = 0;
    char v30 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest(this, &v28);
  if (v30)
  {
    uint64_t result = v29;
    __int16 v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSource::SpeechRecognitionRemoteRealtimeMediaSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebCore::RealtimeMediaSource::RealtimeMediaSource();
  __int16 v41 = 0;
  long long v40 = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_1994F5F10;
  *(void *)(v8 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a1;
  *(void *)(a1 + 30WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v8;
  *(void *)(a1 + 312) = a2;
  *(void *)a1 = &unk_1EE9D7398;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v10 = *(void *)(a3 + 8);
  if (v10) {
    atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  }
  *(void *)(a1 + 32WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v10;
  *(unsigned char *)(a1 + 42WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 34WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
  *(_OWORD *)(a1 + 36WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 46WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
  *(_OWORD *)(a1 + 48WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 51WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(void *)(a1 + 52WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(void *)(a1 + 525) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 56WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  *(_WORD *)(a1 + 58WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 4;
  *(unsigned char *)(a1 + 586) = 0;
  *(void *)(a1 + 592) = 0x3FF0000000000000;
  *(void *)(a1 + 61WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(_OWORD *)(a1 + 60WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  *(unsigned char *)(a1 + 62WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(unsigned char *)(a1 + 70WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 312);
  uint64_t v42 = v12;
  uint64_t v14 = (uint64_t *)(v11 + 32);
  uint64_t v13 = *(void *)(v11 + 32);
  if (v13
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v11 + 32)),
        (uint64_t v13 = *v14) != 0))
  {
    int v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unint64_t v16 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
  unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
  char v20 = (uint64_t *)(v13 + 24 * v19);
  uint64_t v21 = *v20;
  if (!*v20)
  {
LABEL_17:
    *char v20 = v12;
    uint64_t v24 = *(atomic_uchar **)(a1 + 304);
    if (v24) {
      uint64_t v24 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v24);
    }
    char v25 = (atomic_uchar *)v20[1];
    v20[1] = (uint64_t)v24;
    if (v25) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v25, v9);
    }
    void v20[2] = a1;
    uint64_t v26 = *v14;
    if (*v14) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v28 = *v14;
    if (*v14) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30) {
        goto LABEL_30;
      }
    }
    else if (3 * v31 > 4 * v30)
    {
      goto LABEL_30;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v11 + 32));
    goto LABEL_30;
  }
  uint64_t v22 = 0;
  int v23 = 1;
  while (v21 != v12)
  {
    if (v21 == -1) {
      uint64_t v22 = v20;
    }
    unsigned int v19 = (v19 + v23) & v15;
    char v20 = (uint64_t *)(v13 + 24 * v19);
    uint64_t v21 = *v20;
    ++v23;
    if (!*v20)
    {
      if (v22)
      {
        uint64_t *v22 = 0;
        v22[1] = 0;
        void v22[2] = 0;
        --*(_DWORD *)(*v14 - 16);
        char v20 = v22;
      }
      goto LABEL_17;
    }
  }
LABEL_30:
  long long v40 = *(WTF::StringImpl **)(a1 + 72);
  __int16 v41 = (WTF::StringImpl *)(v40 != 0);
  if (v40)
  {
    uint64_t v33 = *(void *)(v11 + 16);
    uint64_t v32 = v11 + 16;
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(v33 + 56))(v32);
    uint64_t v35 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v35 = 1479;
    *((void *)v35 + 1) = v34;
    *((void *)v35 + 66) = (char *)v35 + 16;
    *((void *)v35 + 67) = 512;
    *((void *)v35 + 68) = 0;
    *((void *)v35 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    *((void *)v35 + 69) = 0;
    IPC::Encoder::encodeHeader(v35);
    char v43 = v35;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v35, &v42);
    IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode(v35, a4);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v35, (uint64_t *)&v40);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v32 + 32))(v32, &v43, 0);
    unsigned __int8 v37 = v43;
    char v43 = 0;
    if (v37)
    {
      IPC::Encoder::~Encoder(v37, v36);
      WTF::fastFree(v38, v39);
    }
  }
  else
  {
    __break(1u);
  }
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSource::~SpeechRecognitionRemoteRealtimeMediaSource(WebKit::SpeechRecognitionRemoteRealtimeMediaSource *this, void *a2)
{
  *(void *)this = &unk_1EE9D7398;
  uint64_t v3 = *((void *)this + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 39);
      uint64_t v37 = v5;
      uint64_t v7 = (uint64_t *)(v4 + 32);
      uint64_t v6 = *(void *)(v4 + 32);
      if (v6)
      {
        int v8 = *(_DWORD *)(v6 - 8);
        unint64_t v9 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
        unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
        uint64_t v13 = (uint64_t *)(v6 + 24 * v12);
        uint64_t v14 = *v13;
        if (*v13 != v5)
        {
          int v15 = 1;
          while (v14)
          {
            unsigned int v12 = (v12 + v15) & v8;
            uint64_t v13 = (uint64_t *)(v6 + 24 * v12);
            uint64_t v14 = *v13;
            ++v15;
            if (*v13 == v5) {
              goto LABEL_10;
            }
          }
          uint64_t v13 = (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4));
        }
LABEL_10:
        if ((uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4)) != v13)
        {
          unint64_t v16 = (atomic_uchar *)v13[1];
          *uint64_t v13 = -1;
          v13[1] = 0;
          if (v16) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, a2);
          }
          ++*(_DWORD *)(*v7 - 16);
          uint64_t v17 = *v7;
          if (*v7) {
            int v18 = *(_DWORD *)(v17 - 12) - 1;
          }
          else {
            int v18 = -1;
          }
          *(_DWORD *)(v17 - 12) = v18;
          uint64_t v19 = *v7;
          if (*v7)
          {
            unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
            unsigned int v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9) {
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(v4 + 32), v21 >> 1);
            }
          }
        }
      }
      uint64_t v24 = *(void *)(v4 + 16);
      uint64_t v23 = v4 + 16;
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(v24 + 56))(v23);
      uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v26 = 1480;
      *((void *)v26 + 1) = v25;
      *((void *)v26 + 66) = (char *)v26 + 16;
      *((void *)v26 + 67) = 512;
      *((void *)v26 + 68) = 0;
      *((void *)v26 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v26 + 69) = 0;
      IPC::Encoder::encodeHeader(v26);
      uint64_t v38 = v26;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, &v37);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v23 + 32))(v23, &v38, 0);
      uint64_t v28 = v38;
      uint64_t v38 = 0;
      if (v28)
      {
        IPC::Encoder::~Encoder(v28, v27);
        WTF::fastFree(v35, v36);
      }
    }
  }
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)this + 90, 0);
  int v29 = (WebCore::CARingBuffer *)*((void *)this + 89);
  *((void *)this + 89) = 0;
  if (v29) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 712, v29);
  }
  if (*((unsigned char *)this + 704)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::SpeechRecognitionRemoteRealtimeMediaSource *)((char *)this + 624));
  }
  uint64_t v30 = (WTF::StringImpl *)*((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v29);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  unint64_t v31 = (WTF::StringImpl *)*((void *)this + 71);
  *((void *)this + 71) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v29);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t v32 = (WTF::StringImpl *)*((void *)this + 70);
  *((void *)this + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v29);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebKit::SpeechRecognitionRemoteRealtimeMediaSource *)((char *)this + 328), v29);
  uint64_t v34 = (unsigned int *)*((void *)this + 40);
  *((void *)this + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v34);
    WTF::fastFree((WTF *)v34, v33);
  }

  MEMORY[0x1F416F798](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::SpeechRecognitionRemoteRealtimeMediaSource::~SpeechRecognitionRemoteRealtimeMediaSource(this, a2);

  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::SpeechRecognitionRemoteRealtimeMediaSource::startProducingData(IPC::Encoder *this)
{
  uint64_t v1 = *((void *)this + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = (uint64_t *)((char *)this + 312);
      uint64_t v5 = *(void *)(v2 + 16);
      uint64_t v4 = v2 + 16;
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 1481;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      unint64_t v11 = v7;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, v3);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v11, 0);
      this = v11;
      unint64_t v11 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::SpeechRecognitionRemoteRealtimeMediaSource::stopProducingData(IPC::Encoder *this)
{
  uint64_t v1 = *((void *)this + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = (uint64_t *)((char *)this + 312);
      uint64_t v5 = *(void *)(v2 + 16);
      uint64_t v4 = v2 + 16;
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 1482;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      unint64_t v11 = v7;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, v3);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v11, 0);
      this = v11;
      unint64_t v11 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return this;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::remoteAudioSamplesAvailable(uint64_t a1)
{
  uint64_t v2 = *(WebCore::WebAudioBufferList **)(a1 + 720);
  if (v2)
  {
    WebCore::WebAudioBufferList::setSampleCount(v2);
    uint64_t result = WebCore::CARingBuffer::fetch();
    if (*(unsigned char *)(a1 + 704)) {
      return WebCore::RealtimeMediaSource::audioSamplesAvailable();
    }
    else {
      __break(1u);
    }
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 240);
    return v4(a1);
  }
  return result;
}

atomic_uchar *WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteAudioSamplesAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uchar *)(a1 + 32), &v8, (atomic_uchar **)v6);
  uint64_t result = (atomic_uchar *)v6[0];
  if (v6[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v6[0], (uint64_t)v6[1], &v7);
    uint64_t v4 = (atomic_uchar *)v6[0];
    v6[0] = 0;
    if (v4) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
    }
    uint64_t result = v7;
    if (v7)
    {
      uint64_t result = (atomic_uchar *)WebKit::SpeechRecognitionRemoteRealtimeMediaSource::remoteAudioSamplesAvailable((uint64_t)v7);
      uint64_t v5 = (uint64_t)v7;
      uint64_t v7 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v5 + 304));
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteCaptureFailed(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uchar *)(a1 + 32), &v8, (atomic_uchar **)v6);
  uint64_t result = (atomic_uchar *)v6[0];
  if (v6[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v6[0], (uint64_t)v6[1], &v7);
    uint64_t v4 = (atomic_uchar *)v6[0];
    v6[0] = 0;
    if (v4) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
    }
    uint64_t result = v7;
    if (v7)
    {
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v7 + 240))(v7);
      uint64_t v5 = v7;
      uint64_t v7 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*((atomic_uchar **)v5 + 38));
      }
    }
  }
  return result;
}

WebCore::RealtimeMediaSource *WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteSourceStopped(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uchar *)(a1 + 32), &v8, (atomic_uchar **)v6);
  uint64_t result = v6[0];
  if (v6[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v6[0], (uint64_t)v6[1], &v7);
    uint64_t v4 = (atomic_uchar *)v6[0];
    v6[0] = 0;
    if (v4) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
    }
    uint64_t result = v7;
    if (v7)
    {
      uint64_t result = (WebCore::RealtimeMediaSource *)WebCore::RealtimeMediaSource::stop(v7);
      uint64_t v5 = v7;
      uint64_t v7 = 0;
      if (v5) {
        return (WebCore::RealtimeMediaSource *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*((atomic_uchar **)v5 + 38));
      }
    }
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::messageSenderConnection(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 3) + 8) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::messageSenderConnection(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 1) + 8) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::messageSenderDestinationID(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::messageSenderDestinationID(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this)
{
  return 0;
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::setStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uchar *)(a1 + 32), &v21, (atomic_uchar **)v19);
  if (v19[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v19[0], (uint64_t)v19[1], &v20);
    uint64_t v6 = (atomic_uchar *)v19[0];
    v19[0] = 0;
    if (v6) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
    }
    uint64_t v7 = v20;
    if (v20)
    {
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(v20 + 720), 0);
      WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)a4, v19);
      uint64_t v8 = v19[0];
      v19[0] = 0;
      unint64_t v9 = *(WebCore::CARingBuffer **)(v7 + 712);
      *(void *)(v7 + 712) = v8;
      if (v9)
      {
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v7 + 712, v9);
        unint64_t v10 = v19[0];
        v19[0] = 0;
        if (v10) {
          std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)v19, v10);
        }
        uint64_t v8 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v7 + 712);
      }
      if (v8)
      {
        if (*(unsigned char *)(v7 + 704))
        {
          long long v11 = *(_OWORD *)(a4 + 8);
          long long v12 = *(_OWORD *)(a4 + 24);
          *(void *)(v7 + 66WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(void *)(a4 + 40);
          *(_OWORD *)(v7 + 648) = v12;
          *(_OWORD *)(v7 + 632) = v11;
          long long v13 = *(_OWORD *)(a4 + 48);
          *(void *)(v7 + 688) = *(void *)(a4 + 64);
          *(_OWORD *)(v7 + 672) = v13;
          *(_DWORD *)(v7 + 696) = *(_DWORD *)(a4 + 72);
        }
        else
        {
          *(void *)(v7 + 62WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = MEMORY[0x1E4FB6B98] + 16;
          *(_OWORD *)(v7 + 632) = *(_OWORD *)(a4 + 8);
          long long v14 = *(_OWORD *)(a4 + 24);
          long long v15 = *(_OWORD *)(a4 + 40);
          long long v16 = *(_OWORD *)(a4 + 56);
          *(_DWORD *)(v7 + 696) = *(_DWORD *)(a4 + 72);
          *(_OWORD *)(v7 + 68WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v16;
          *(_OWORD *)(v7 + 66WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v15;
          *(_OWORD *)(v7 + 648) = v14;
          *(unsigned char *)(v7 + 70WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 1;
        }
        uint64_t v17 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
        MEMORY[0x1997346F0](v17, a4);
        std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(v7 + 720), v17);
      }
      uint64_t v18 = v20;
      uint64_t v20 = 0;
      if (v18) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(atomic_uchar **)(v18 + 304));
      }
    }
  }
}

void WebKit::SpeechRecognitionServer::start(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v13 = *a3;
    *a3 = 0;
    *(void *)&long long buf = a2;
    *((void *)&buf + 1) = v13;
    char v46 = a4;
    char v47 = a5;
    uint64_t v48 = a6;
    v49[0] = 0;
    int v50 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v49, a7);
    v51[0] = 0;
    int v52 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v51, a7 + 32);
    uint64_t v53 = a9;
    uint64_t v54 = a10;
    WTF::fastMalloc((WTF *)0x78);
    uint64_t v14 = WebCore::SpeechRecognitionRequest::SpeechRecognitionRequest();
    long long v16 = (uint64_t *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 40);
    char v44 = (void *)v14;
    if (v15
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 40), 0), (uint64_t v15 = *v16) != 0))
    {
      int v17 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      int v17 = 0;
    }
    unint64_t v18 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
    uint64_t v22 = (uint64_t *)(v15 + 16 * v21);
    uint64_t v23 = *v22;
    if (*v22)
    {
      uint64_t v24 = 0;
      int v25 = 1;
      while (v23 != a2)
      {
        if (v23 == -1) {
          uint64_t v24 = v22;
        }
        unsigned int v21 = (v21 + v25) & v17;
        uint64_t v22 = (uint64_t *)(v15 + 16 * v21);
        uint64_t v23 = *v22;
        ++v25;
        if (!*v22)
        {
          if (v24)
          {
            *uint64_t v24 = 0;
            v24[1] = 0;
            --*(_DWORD *)(*v16 - 16);
            uint64_t v22 = v24;
          }
          goto LABEL_13;
        }
      }
      goto LABEL_24;
    }
LABEL_13:
    uint64_t *v22 = a2;
    uint64_t v26 = v22[1];
    uint64_t v27 = (uint64_t)v44;
    char v44 = 0;
    v22[1] = v27;
    if (v26) {
      std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)(v22 + 1), v26);
    }
    uint64_t v28 = *v16;
    if (*v16) {
      int v29 = *(_DWORD *)(v28 - 12) + 1;
    }
    else {
      int v29 = 1;
    }
    *(_DWORD *)(v28 - 12) = v29;
    uint64_t v30 = *v16;
    if (*v16) {
      int v31 = *(_DWORD *)(v30 - 12);
    }
    else {
      int v31 = 0;
    }
    uint64_t v32 = (*(_DWORD *)(v30 - 16) + v31);
    unint64_t v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32) {
        goto LABEL_24;
      }
    }
    else if (3 * v33 > 4 * v32)
    {
LABEL_24:
      uint64_t v34 = (uint64_t)v44;
      char v44 = 0;
      if (v34) {
        std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)&v44, v34);
      }
      uint64_t v35 = (unsigned int *)v22[1];
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      uint64_t v36 = *(atomic_uint **)(a1 + 8);
      if (v36) {
        atomic_fetch_add(v36, 1u);
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v35, (uint64_t)v35);
      uint64_t v37 = *(atomic_uint **)v35;
      if (*(void *)v35) {
        atomic_fetch_add(v37, 1u);
      }
      uint64_t v38 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v38 = &unk_1EE9D76B0;
      v38[1] = a1;
      v38[2] = v36;
      void v38[3] = v37;
      char v44 = v38;
      (*(void (**)(void, unsigned int *, void **))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v35, &v44);
      long long v40 = v44;
      char v44 = 0;
      if (v40) {
        (*(void (**)(void *))(*v40 + 8))(v40);
      }
      if (v52 != -1) {
        ((void (*)(void **, unsigned char *))off_1EE9D7570[v52])(&v44, v51);
      }
      int v52 = -1;
      if (v50 != -1) {
        ((void (*)(void **, unsigned char *))off_1EE9D7570[v50])(&v44, v49);
      }
      int v50 = -1;
      __int16 v41 = (WTF::StringImpl *)*((void *)&buf + 1);
      *((void *)&buf + 1) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, v39);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
      return;
    }
    uint64_t v22 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 40), v22);
    goto LABEL_24;
  }
  uint64_t v42 = off_1EB358938;
  if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = "void WebKit::SpeechRecognitionServer::start(WebCore::SpeechRecognitionConnectionClie"
                                    "ntIdentifier, String &&, BOOL, BOOL, uint64_t, WebCore::ClientOrigin &&, WebCore::FrameIdentifier)";
    _os_log_fault_impl(&dword_1985F2000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/SpeechRecognitionServer.cpp 65: Invalid message dispatched %{public}s", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 24) + 8) + 144);
  if (v43) {
    *(unsigned char *)(v43 + 98) = 1;
  }
  else {
    __break(0xC471u);
  }
}

uint64_t WebKit::SpeechRecognitionServer::messageSenderConnection(WebKit::SpeechRecognitionServer *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 3) + 8) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::SpeechRecognitionServer::sendUpdate(WebKit::SpeechRecognitionServer *this, const WebCore::SpeechRecognitionUpdate *a2)
{
  uint64_t v3 = (char *)this + 16;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2847;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::SpeechRecognitionUpdate,void>::encode(v5, (uint64_t)a2);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::SpeechRecognitionServer::stop(uint64_t *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v14 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      unint64_t v20 = "void WebKit::SpeechRecognitionServer::stop(WebCore::SpeechRecognitionConnectionClientIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/SpeechRecognitionServer.cpp 128: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v15 = *(void *)(*(void *)(a1[3] + 8) + 144);
    if (v15)
    {
      *(unsigned char *)(v15 + 98) = 1;
      return;
    }
    unint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/AuxiliaryProcessProxy.h";
    long long v11 = "IPC::Connection &WebKit::AuxiliaryProcessProxy::connection() const";
    uint64_t v13 = 130;
    uint64_t v12 = 71;
    __break(0xC471u);
    goto __ZN7WebCore16SpeechRecognizer4stopEv;
  }
  uint64_t v4 = a1[5];
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, a2);
  if (v4)
  {
    uint64_t v6 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
    if (v6 == v5) {
      goto LABEL_13;
    }
LABEL_7:
    if (v6 != v5) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1 + 5, v5);
    }
    v16[0] = 0;
    char v18 = 0;
    WebKit::SpeechRecognitionServer::sendUpdate((WebKit::SpeechRecognitionServer *)a1, a2, 10, (uint64_t)v16);
    if (v18)
    {
      uint64_t v8 = v17;
      int v17 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
    return;
  }
  if (v5)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
LABEL_13:
  unint64_t v9 = (WebCore::SpeechRecognizer *)a1[7];
  if (v9 && WebCore::SpeechRecognizer::clientIdentifier(v9) == a2)
  {
    uint64_t v13 = a1[7];
__ZN7WebCore16SpeechRecognizer4stopEv:
    MEMORY[0x1F416EB28](v13, v10, v11, v12);
  }
}

uint64_t WebKit::SpeechRecognitionServer::sendUpdate(WebKit::SpeechRecognitionServer *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = WebCore::SpeechRecognitionUpdate::create();
  if (a3 == 9)
  {
    if (!*(unsigned char *)(a4 + 16))
    {
      __break(1u);
      return result;
    }
    WebCore::SpeechRecognitionUpdate::createError();
    uint64_t v12 = v8;
    char v13 = v9;
    if (v15 != -1)
    {
      if (v11 == -1)
      {
        ((void (*)(unsigned char **, unsigned char *))off_1EE9D75A8[v15])(&v16, v14);
        int v15 = -1;
        goto LABEL_8;
      }
LABEL_7:
      long long v16 = v14;
      ((void (*)(unsigned char **))off_1EE9D75C0[v11])(&v16);
LABEL_8:
      if (v11 != -1) {
        ((void (*)(unsigned char **, uint64_t *))off_1EE9D75A8[v11])(&v16, &v10);
      }
      goto LABEL_10;
    }
    if (v11 != -1) {
      goto LABEL_7;
    }
  }
LABEL_10:
  uint64_t result = (uint64_t)WebKit::SpeechRecognitionServer::sendUpdate(a1, (const WebCore::SpeechRecognitionUpdate *)&v12);
  if (v15 != -1) {
    return ((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9D75A8[v15])(&v8, v14);
  }
  return result;
}

void WebKit::SpeechRecognitionServer::abort(uint64_t *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = a1[5];
    uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, a2);
    if (v4)
    {
      uint64_t v6 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
      if (v6 == v5)
      {
LABEL_13:
        char v9 = (WebCore::SpeechRecognizer *)a1[7];
        if (v9)
        {
          if (WebCore::SpeechRecognizer::clientIdentifier(v9) == a2)
          {
            buf[0] = 0;
            char v17 = 0;
            WebCore::SpeechRecognizer::abort();
          }
        }
        return;
      }
    }
    else
    {
      if (!v5) {
        goto LABEL_13;
      }
      uint64_t v6 = 0;
    }
    if (v6 != v5) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1 + 5, v5);
    }
    v12[0] = 0;
    char v14 = 0;
    WebKit::SpeechRecognitionServer::sendUpdate((WebKit::SpeechRecognitionServer *)a1, a2, 10, (uint64_t)v12);
    if (v14)
    {
      uint64_t v8 = v13;
      char v13 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v10 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      long long v16 = "void WebKit::SpeechRecognitionServer::abort(WebCore::SpeechRecognitionConnectionClientIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/SpeechRecognitionServer.cpp 141: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v11 = *(void *)(*(void *)(a1[3] + 8) + 144);
    if (v11) {
      *(unsigned char *)(v11 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

void WebKit::SpeechRecognitionServer::invalidate(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = *(WebCore::SpeechRecognizer **)(a1 + 56);
    if (v3)
    {
      if (WebCore::SpeechRecognizer::clientIdentifier(v3) == a2)
      {
        LOBYTE(v6) = 0;
        char v8 = 0;
        WebCore::SpeechRecognizer::abort();
      }
    }
  }
  else
  {
    uint64_t v4 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v6 = 136446210;
      uint64_t v7 = "void WebKit::SpeechRecognitionServer::invalidate(WebCore::SpeechRecognitionConnectionClientIdentifier)";
      _os_log_fault_impl(&dword_1985F2000, v4, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/SpeechRecognitionServer.cpp 153: Invalid message dispatched %{public}s", (uint8_t *)&v6, 0xCu);
    }
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 24) + 8) + 144);
    if (v5) {
      *(unsigned char *)(v5 + 98) = 1;
    }
    else {
      __break(0xC471u);
    }
  }
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionServer::messageSenderConnection(WebKit::SpeechRecognitionServer *this)
{
  uint64_t result = *(void *)(*(void *)(*((void *)this + 1) + 8) + 144);
  if (!result)
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionServer::messageSenderDestinationID(WebKit::SpeechRecognitionServer *this)
{
  return *((void *)this + 4);
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionServer::messageSenderDestinationID(WebKit::SpeechRecognitionServer *this)
{
  return *((void *)this + 2);
}

uint64_t WebKit::SuspendedPageProxy::findReusableSuspendedPageProcess@<X0>(uint64_t a1@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, WebKit::WebPreferences **a5@<X4>, void *a6@<X8>)
{
  if ((byte_1EB359BFA & 1) == 0)
  {
    *(void *)algn_1EB359C08 = 0;
    qword_1EB359C00 = 0;
    byte_1EB359BFA = 1;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&qword_1EB359C00, &v29);
  if (qword_1EB359C00)
  {
    uint64_t v11 = *(unsigned int *)(qword_1EB359C00 - 4);
    uint64_t v12 = qword_1EB359C00 + 8 * v11;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v24 = &qword_1EB359C00;
  uint64_t v25 = v12;
  uint64_t v26 = v12;
  uint64_t v27 = v12;
  uint64_t v28 = qword_1EB359C00 + 8 * v11;
  uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
  uint64_t v15 = v30;
  if (v30 == v25)
  {
LABEL_31:
    *a6 = 0;
    return result;
  }
  while (1)
  {
    uint64_t v16 = *(void *)(*(void *)(*(void *)v15 + 8) + 40);
    atomic_fetch_add((atomic_uint *volatile)(v16 + 16), 1u);
    uint64_t v17 = *(void *)(v16 + 512);
    if (!v17) {
      goto LABEL_27;
    }
    uint64_t v18 = *(void *)(v17 + 8);
    if (!v18 || v18 - 16 != a1) {
      goto LABEL_27;
    }
    if (*(unsigned char *)(v16 + 704))
    {
      unint64_t v20 = *(WTF **)(v16 + 696);
      if (v20) {
        *(_DWORD *)v20 += 2;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    uint64_t result = WTF::equal(v20, *a2, v14);
    if (!result
      || *(void *)(v16 + 752) != a3
      || *(unsigned char *)(v16 + 780)
      || (((*(unsigned char *)(v16 + 779) != 0) ^ a4) & 1) != 0
      || (uint64_t result = WebKit::AuxiliaryProcessProxy::wasTerminated((WebKit::AuxiliaryProcessProxy *)v16), (result & 1) != 0))
    {
      char v22 = 0;
      if (!v20) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t result = WebKit::WebProcessProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebProcessProxy *)v16, a5);
      char v22 = result;
      if (!v20) {
        goto LABEL_26;
      }
    }
    if (*(_DWORD *)v20 == 2) {
      uint64_t result = WTF::StringImpl::destroy(v20, v21);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
LABEL_26:
    if (v22) {
      break;
    }
LABEL_27:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v16 + 16));
    uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v29);
    uint64_t v15 = v30;
    if (v30 == v25) {
      goto LABEL_31;
    }
  }
  *a6 = v16;
  return result;
}

uint64_t WebKit::SuspendedPageProxy::SuspendedPageProxy(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char a6)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9D7548;
  *(void *)(a1 + 8) = 0;
  uint64_t v12 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  char v13 = *(atomic_uint **)(a2 + 24);
  atomic_fetch_add(v13, 1u);
  *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v13;
  *(void *)(a1 + 32) = *(void *)(*(void *)(a2 + 32) + 1928);
  uint64_t v14 = *a3;
  *a3 = 0;
  *(void *)(a1 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v14;
  uint64_t v15 = *a4;
  *a4 = 0;
  *(void *)(a1 + 48) = v15;
  uint64_t v16 = *a5;
  *a5 = 0;
  *(void *)(a1 + 56) = v16;
  *(unsigned char *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(unsigned char *)(a1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 89) = a6;
  *(_WORD *)(a1 + 9WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v17 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v12);
  uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v18 = &unk_1EE9D76D8;
  v18[1] = WebKit::SuspendedPageProxy::suspensionTimedOut;
  void v18[2] = 0;
  void v18[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 104), v17);
  *(void *)(a1 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = &unk_1EE9B3390;
  *(void *)(a1 + 128) = v18;
  uint64_t v19 = *(void *)(a1 + 40) + 200;
  uint64_t v20 = WTF::fastMalloc((WTF *)0x28);
  *(void *)(a1 + 136) = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v20, v19, "Page suspension for back/forward cache", 39, 0, 0);
  *(void *)(a1 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(void *)(a2 + 1224);
  if ((byte_1EB359BFA & 1) == 0)
  {
    *(void *)algn_1EB359C08 = 0;
    qword_1EB359C00 = 0;
    byte_1EB359BFA = 1;
  }
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteAudioSessionProxy>((uint64_t)&qword_1EB359C00, (unsigned int *)a1, (uint64_t)v22);
  WebKit::WebProcessProxy::addSuspendedPageProxy(*(WebKit::WebProcessProxy **)(a1 + 40), (WebKit::SuspendedPageProxy *)a1);
  WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)(a1 + 64), *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 32), a1);
  WTF::RunLoop::TimerBase::start();
  v22[0] = 1;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsSuspended>(*(void *)(a1 + 40), v22, *(void *)(a1 + 32), 0);
  return a1;
}

uint64_t WebKit::SuspendedPageProxy::suspensionTimedOut(WebKit::SuspendedPageProxy *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_ERROR))
  {
    int v6 = 134217984;
    uint64_t v7 = this;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - SuspendedPageProxy::suspensionTimedOut() destroying the suspended page because it failed to suspend in time", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 5) + 512) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  return WebKit::WebBackForwardCache::removeEntry(*(WebKit::WebBackForwardCache **)(v4 + 760), this);
}

void WebKit::SuspendedPageProxy::~SuspendedPageProxy(WebKit::SuspendedPageProxy *this)
{
  if ((byte_1EB359BFA & 1) == 0)
  {
    *(void *)algn_1EB359C08 = 0;
    qword_1EB359C00 = 0;
    byte_1EB359BFA = 1;
  }
  State = (WTF::RunLoop *)WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)&qword_1EB359C00, this);
  if (*((void *)this + 12))
  {
    WTF::RunLoop::main(State);
    uint64_t v3 = *((void *)this + 12);
    *((void *)this + 12) = 0;
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v4 = &unk_1EE9D7700;
    v4[1] = v3;
    uint64_t v12 = v4;
    WTF::RunLoop::dispatch();
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
  }
  if (*((unsigned char *)this + 91) != 3) {
    WebKit::SuspendedPageProxy::close((uint64_t)this);
  }
  WebKit::WebProcessProxy::removeSuspendedPageProxy(*((WebKit::WebProcessProxy **)this + 5), this);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 17, 0);
  *((void *)this + 13) = &unk_1EE9B3390;
  uint64_t v5 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::SuspendedPageProxy *)((char *)this + 104));
  uint64_t v6 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration((WebKit::SuspendedPageProxy *)((char *)this + 64));
  uint64_t v8 = (WebKit::BrowsingContextGroup *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v8) {
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v8, v7);
  }
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
  }
  uint64_t v11 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v7);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  WebKit::SuspendedPageProxy::~SuspendedPageProxy(this);
  if (*(_DWORD *)(v1 + 16))
  {
    *(void *)(v1 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

uint64_t WebKit::SuspendedPageProxy::close(uint64_t this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(this + 88))
  {
    uint64_t v1 = this;
    uint64_t v2 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 134217984;
      uint64_t v4 = v1;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - SuspendedPageProxy::close()", (uint8_t *)&v3, 0xCu);
    }
    *(unsigned char *)(v1 + 88) = 1;
    LOBYTE(v3) = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::Close>(*(void *)(v1 + 40), (uint64_t)&v3, *(void *)(v1 + 32), 0);
  }
  return this;
}

uint64_t WebKit::SuspendedPageProxy::waitUntilReadyToUnsuspend(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 96);
  if (v4)
  {
    *(void *)(result + 96) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = *(unsigned __int8 *)(v3 + 91);
  if ((v5 - 1) < 2)
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v3);
  }
  else if (v5 == 3)
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
  }
  else
  {
    if (*(unsigned char *)(v3 + 91)) {
      return result;
    }
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = *(void *)(v3 + 96);
    *(void *)(v3 + 96) = v6;
    if (!v7) {
      return result;
    }
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

void WebKit::SuspendedPageProxy::didProcessRequestToSuspend(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB358370;
  if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134218240;
    uint64_t v9 = a1;
    __int16 v10 = 1024;
    BOOL v11 = a2 == 2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - SuspendedPageProxy::didProcessRequestToSuspend() success? %d", (uint8_t *)&v8, 0x12u);
  }
  *(unsigned char *)(a1 + 91) = a2;
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 104));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 136), 0);
  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)(a1 + 64));
  if (*(unsigned char *)(a1 + 91) == 1)
  {
    int v5 = qword_1EB358370;
    if (os_log_type_enabled((os_log_t)qword_1EB358370, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 89);
      int v8 = 134218240;
      uint64_t v9 = a1;
      __int16 v10 = 1024;
      BOOL v11 = v6;
      _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "%p - SuspendedPageProxy::closeWithoutFlashing() shouldDelayClosingUntilFirstLayerFlush? %d", (uint8_t *)&v8, 0x12u);
    }
    if (*(unsigned char *)(a1 + 89)) {
      *(unsigned char *)(a1 + 9WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 1;
    }
    else {
      WebKit::SuspendedPageProxy::close(a1);
    }
  }
  uint64_t v7 = *(void *)(a1 + 96);
  if (v7)
  {
    *(void *)(a1 + 96) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a1);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
}

void WebKit::SuspendedPageProxy::didReceiveMessage(WebKit::SuspendedPageProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1910)
  {
    uint64_t v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)(*((void *)this + 3) + 8);
      if (v9) {
        uint64_t v10 = v9 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
      CFRetain(*(CFTypeRef *)(v10 + 8));
      uint64_t v11 = *((void *)this + 5);
      atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
      uint64_t v13 = v11;
      WebKit::WebPageProxy::didDestroyNavigationShared(v10, (uint64_t)&v13, v8);
      uint64_t v12 = v13;
      uint64_t v13 = 0;
      if (v12) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
      }
      if (v9) {
        CFRelease(*(CFTypeRef *)(v9 - 8));
      }
    }
  }
  else
  {
    if (v4 == 1917)
    {
      int v5 = 1;
    }
    else
    {
      if (v4 != 1953) {
        return;
      }
      int v5 = 2;
    }
    WebKit::SuspendedPageProxy::didProcessRequestToSuspend((uint64_t)this, v5);
  }
}

uint64_t WebKit::SuspendedPageProxy::didReceiveSyncMessage()
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::logger(WebCore::RealtimeMediaSource *this)
{
  return *((void *)this + 5);
}

const char *WebCore::RealtimeMediaSource::logClassName(WebCore::RealtimeMediaSource *this)
{
  return "RealtimeMediaSource";
}

uint64_t WebCore::RealtimeMediaSource::logIdentifier(WebCore::RealtimeMediaSource *this)
{
  return *((void *)this + 6);
}

uint64_t WebCore::RealtimeMediaSource::clone@<X0>(WebCore::RealtimeMediaSource *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(void *)this + 136))(this);
  *a2 = this;
  return result;
}

WTF::StringImpl *WebCore::RealtimeMediaSource::whenReady(uint64_t a1, uint64_t *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v2 + 16))(v2, v5);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  uint64_t result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::isProducingData(WebCore::RealtimeMediaSource *this)
{
  return *((unsigned __int8 *)this + 292);
}

uint64_t WebCore::RealtimeMediaSource::interrupted(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::capabilities(WebKit::SpeechRecognitionRemoteRealtimeMediaSource *this)
{
  return (uint64_t)this + 328;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::settings(WebKit::SpeechRecognitionRemoteRealtimeMediaSource *this)
{
  return (uint64_t)this + 520;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::ref(uint64_t this)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(this + 304);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    this = MEMORY[0x19972E8D0](v2);
  }
  ++*(void *)(v2 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return this;
}

atomic_uchar *WebKit::SpeechRecognitionRemoteRealtimeMediaSource::deref(atomic_uchar **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(this[38]);
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::controlBlock(WebKit::SpeechRecognitionRemoteRealtimeMediaSource *this)
{
  return *((void *)this + 38);
}

uint64_t WebCore::RealtimeMediaSource::isMockSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::isCaptureSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::deviceType(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

BOOL WebCore::RealtimeMediaSource::isSameAs(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSource *a2)
{
  return this == a2;
}

uint64_t WebCore::RealtimeMediaSource::isIncomingAudioSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::isIncomingVideoSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::setShouldApplyRotation(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

double WebCore::RealtimeMediaSource::facingModeFitnessScoreAdjustment(WebCore::RealtimeMediaSource *this)
{
  return 0.0;
}

uint64_t WebCore::RealtimeMediaSource::isPowerEfficient(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

double WebCore::RealtimeMediaSource::observedFrameRate(WebCore::RealtimeMediaSource *this)
{
  return 0.0;
}

void *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::handleRequest(WTF::UniqueRef<WebCore::SpeechRecognitionRequest> &&)::$_0,void,WebCore::SpeechRecognitionUpdate const&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7590;
  int v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::handleRequest(WTF::UniqueRef<WebCore::SpeechRecognitionRequest> &&)::$_0,void,WebCore::SpeechRecognitionUpdate const&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7590;
  int v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::handleRequest(WTF::UniqueRef<WebCore::SpeechRecognitionRequest> &&)::$_0,void,WebCore::SpeechRecognitionUpdate const&>::call(IPC::Encoder *result, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    int v4 = (WebKit::SpeechRecognitionServer *)*((void *)result + 1);
    uint64_t result = WebKit::SpeechRecognitionServer::sendUpdate(v4, (const WebCore::SpeechRecognitionUpdate *)a2);
    int v5 = a2[8];
    if (v5 == 10)
    {
      *(_DWORD *)(*((void *)v4 + 7) + 32) = 0;
    }
    else if (v5 == 9)
    {
      return (IPC::Encoder *)WebCore::SpeechRecognizer::abort();
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 16);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9D75A8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *result;
  uint64_t v5 = *(unsigned int *)(*result + 16);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE9D75A8[v5])(&v7, v4);
LABEL_7:
    *(unsigned char *)uint64_t v4 = *(unsigned char *)a3;
    uint64_t v6 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  *(unsigned char *)a2 = *(unsigned char *)a3;

  return WTF::String::operator=((uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEEOSV_EEEDcSN_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_10;
  }
  if (v5 != 2)
  {
    uint64_t result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1EE9D75A8[v5])(&v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 16) = -1;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    uint64_t v11 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v11;
    LODWORD(v11) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v11;
    LODWORD(v11) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v11;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  uint64_t v7 = a2[3];
  if (v7)
  {
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = 24 * v7;
    do
    {
      uint64_t v8 = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v8, a2)+ 24;
      v9 -= 24;
    }
    while (v9);
  }
  uint64_t result = *(WTF **)a2;
  if (*(void *)a2)
  {
    *(void *)a2 = 0;
    a2[2] = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  *(void *)a2 = v10;
  LODWORD(v1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v10;
  LODWORD(v1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v10;
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9D75E8;
  *(void *)(v8 + 8) = v1;
  *(void *)(v8 + 16) = v6;
  *(unsigned char *)(v8 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v5;
  uint64_t v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ResponsivenessTimer::*&)(void),WebKit::ResponsivenessTimer*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  char v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

WebKit::SpeechRecognitionPermissionRequest *WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(WebKit::SpeechRecognitionPermissionRequest *result, WTF::StringImpl *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::SpeechRecognitionPermissionRequest::~SpeechRecognitionPermissionRequest(result, a2);
    return (WebKit::SpeechRecognitionPermissionRequest *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::SpeechRecognitionPermissionRequest::~SpeechRecognitionPermissionRequest(WebKit::SpeechRecognitionPermissionRequest *this, WTF::StringImpl *a2)
{
  if (*((void *)this + 2))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7[0] = 4;
    char v9 = 1;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v3 + 16))(v3, v7);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (v9)
    {
      uint64_t v4 = v8;
      uint64_t v8 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
    uint64_t v5 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestSpeechRecognitionServiceAccess(void)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7638;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestSpeechRecognitionServiceAccess(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7638;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestSpeechRecognitionServiceAccess(void)::$_0,void,BOOL>::call(WTF::StringImpl *result, int a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = (WebKit::SpeechRecognitionPermissionManager *)*((void *)result + 1);
    *((_DWORD *)v3 + 13) = a2;
    if (a2)
    {
      return WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(v3);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5[0] = 5;
      char v7 = 1;
      uint64_t result = (WTF::StringImpl *)WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest((uint64_t)v3, (WTF::StringImpl *)v5);
      if (v7)
      {
        uint64_t result = v6;
        uint64_t v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestMicrophoneAccess(void)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7660;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestMicrophoneAccess(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7660;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestMicrophoneAccess(void)::$_0,void,BOOL>::call(WTF::StringImpl *result, int a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = (WebKit::SpeechRecognitionPermissionManager *)*((void *)result + 1);
    *((_DWORD *)v3 + 12) = a2;
    if (a2)
    {
      return WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(v3);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5[0] = 4;
      char v7 = 1;
      uint64_t result = (WTF::StringImpl *)WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest((uint64_t)v3, (WTF::StringImpl *)v5);
      if (v7)
      {
        uint64_t result = v6;
        uint64_t v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestUserPermission(WebCore::SpeechRecognitionRequest &)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7688;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestUserPermission(WebCore::SpeechRecognitionRequest &)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7688;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestUserPermission(WebCore::SpeechRecognitionRequest &)::$_0,void,BOOL>::call(WTF::StringImpl *result, int a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v3 = (WebKit::SpeechRecognitionPermissionManager *)*((void *)result + 1);
    *((_DWORD *)v3 + 1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a2;
    if (a2)
    {
      return WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(v3);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5[0] = 4;
      char v7 = 1;
      uint64_t result = (WTF::StringImpl *)WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest((uint64_t)v3, (WTF::StringImpl *)v5);
      if (v7)
      {
        uint64_t result = v6;
        uint64_t v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (a2) {
    bzero((void *)(v6 + 16), 24 * a2);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    while (1)
    {
      char v12 = (uint64_t *)(v3 + 24 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = (uint64_t *)(v16 + 24 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          unsigned int v25 = v23;
          uint64_t v26 = v16 + 24 * v23;
          uint64_t v29 = *(atomic_uchar **)(v26 + 8);
          uint64_t v28 = (void *)(v26 + 8);
          uint64_t v27 = v29;
          *uint64_t v28 = 0;
          if (v29) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v7);
          }
          *uint64_t v24 = *v12;
          uint64_t v30 = v3 + 24 * v10;
          *uint64_t v28 = *(void *)(v30 + 8);
          uint64_t v31 = *(void *)(v30 + 16);
          *(void *)(v30 + 8) = 0;
          *(void *)(v30 + 16) = 0;
          *(void *)(v16 + 24 * v25 + 16) = v31;
          uint64_t v15 = *(atomic_uchar **)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          if (!v15) {
            goto LABEL_21;
          }
LABEL_20:
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v15, v7);
          goto LABEL_21;
        }
        uint64_t v14 = v3 + 24 * v10;
        uint64_t v15 = *(atomic_uchar **)(v14 + 8);
        *(void *)(v14 + 8) = 0;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v10 == v11) {
        goto LABEL_24;
      }
    }
  }
  if (v3)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v3 - 16), v7);
  }
}

atomic_uchar *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(atomic_uchar *result@<X0>, void *a2@<X1>, atomic_uchar **a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (!*(void *)result)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  int v5 = *(_DWORD *)(v4 - 8);
  unint64_t v6 = *a2 + ~(*a2 << 32);
  unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  unsigned int v9 = v5 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27)));
  uint64_t v10 = *(void *)(v4 + 24 * v9);
  if (v10 != *a2)
  {
    int v11 = 1;
    while (v10)
    {
      unsigned int v9 = (v9 + v11) & v5;
      uint64_t v10 = *(void *)(v4 + 24 * v9);
      ++v11;
      if (v10 == *a2) {
        goto LABEL_6;
      }
    }
    goto LABEL_9;
  }
LABEL_6:
  uint64_t result = *(atomic_uchar **)(v4 + 24 * v9 + 8);
  if (result) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  }
  char v12 = *(atomic_uchar **)(v4 + 24 * v9 + 16);
  *a3 = result;
  a3[1] = v12;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    char v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = (uint64_t *)(v18 + 16 * v25);
          uint64_t v29 = v27 + 1;
          uint64_t v28 = v27[1];
          v27[1] = 0;
          if (v28) {
            std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v29, v28);
          }
          *uint64_t v27 = *v13;
          uint64_t v30 = v6 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          uint64_t v31 = (void **)(v30 + 8);
          *uint64_t v31 = 0;
          void *v29 = v32;
          uint64_t v10 = *v31;
          *uint64_t v31 = 0;
          if (v10) {
            std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v31, (uint64_t)v10);
          }
          if (v13 == a3) {
            char v12 = v27;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          int v17 = *(void **)(v15 + 8);
          uint64_t v16 = (void *)(v15 + 8);
          uint64_t v10 = v17;
          void *v16 = 0;
          if (v17) {
            std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v16, (uint64_t)v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    char v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::requestPermissionForRequest(WebCore::SpeechRecognitionRequest &)::$_0,void,std::optional<WebCore::SpeechRecognitionError> &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D76B0;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::requestPermissionForRequest(WebCore::SpeechRecognitionRequest &)::$_0,void,std::optional<WebCore::SpeechRecognitionError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D76B0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::requestPermissionForRequest(WebCore::SpeechRecognitionRequest &)::$_0,void,std::optional<WebCore::SpeechRecognitionError> &&>::call(void *a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16))
  {
    char v4 = *(unsigned char *)a2;
    int v2 = *(WTF::StringImpl **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    char v4 = 0;
  }
  uint64_t v5 = a1[2];
  if (!v5) {
    goto LABEL_62;
  }
  if (!*(void *)(v5 + 8)) {
    goto LABEL_62;
  }
  uint64_t v6 = a1[3];
  if (!v6) {
    goto LABEL_62;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    goto LABEL_62;
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v11 = (uint64_t *)(v8 + 40);
  uint64_t v10 = *(void *)(v8 + 40);
  char v12 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10, v9);
  if (v10) {
    uint64_t v13 = (void *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13 == v12)
  {
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  uint64_t v14 = v12[1];
  v12[1] = 0;
  if (*v11)
  {
    uint64_t v15 = *v11 + 16 * *(unsigned int *)(*v11 - 4);
    if ((void *)v15 == v12) {
      goto LABEL_20;
    }
  }
  else
  {
    if (!v12) {
      goto LABEL_20;
    }
    uint64_t v15 = 0;
  }
  if ((void *)v15 != v12) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v11, v12);
  }
LABEL_20:
  if (!v3)
  {
    uint64_t v32 = v14;
    uint64_t v33 = 0;
    int v17 = (WebCore::SpeechRecognizer **)(v8 + 56);
    if (*(void *)(v8 + 56))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v36) = 1;
      v38[0] = 1;
      WebCore::SpeechRecognizer::abort();
      int v19 = v37;
      uint64_t v37 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      WebCore::SpeechRecognizer::prepareForDestruction(*v17);
    }
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 8), v8);
    unint64_t v20 = *(atomic_uint **)(v8 + 8);
    if (v20) {
      atomic_fetch_add(v20, 1u);
    }
    uint64_t v21 = WTF::fastMalloc((WTF *)0x48);
    unint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v22 = &unk_1EE9D7590;
    v22[1] = v8;
    void v22[2] = v20;
    uint64_t v36 = v22;
    WebCore::SpeechRecognizer::SpeechRecognizer();
    unsigned int v23 = v36;
    uint64_t v36 = 0;
    if (v23) {
      (*(void (**)(void *))(*v23 + 8))(v23);
    }
    int v24 = *v17;
    void *v17 = (WebCore::SpeechRecognizer *)v21;
    if (v24) {
      std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100](v8 + 56, (uint64_t)v24);
    }
    (*(void (**)(void **__return_ptr))(**(void **)(v8 + 80) + 16))(&v40);
    if (v40)
    {
      WebKit::WebProcessProxy::muteCaptureInPagesExcept(*(void *)(v8 + 32));
      (*(void (**)(void))(**(void **)(v8 + 64) + 16))(*(void *)(v8 + 64));
      uint64_t v36 = v40;
      long long v40 = 0;
      WebCore::SpeechRecognizer::start();
      uint64_t v26 = v36;
      uint64_t v36 = 0;
      if (v26) {
        (*(void (**)(void *))(*v26 + 144))(v26);
      }
    }
    else
    {
      char v34 = 2;
      uint64_t v27 = v41;
      if (v41) {
        *(_DWORD *)v41 += 2;
      }
      uint64_t v35 = v27;
      WebCore::SpeechRecognitionUpdate::createError();
      WebKit::SpeechRecognitionServer::sendUpdate((WebKit::SpeechRecognitionServer *)v8, (const WebCore::SpeechRecognitionUpdate *)&v36);
      if (v39 != -1) {
        ((void (*)(char *, char *))off_1EE9D75A8[v39])(&v42, v38);
      }
      int v39 = -1;
      uint64_t v28 = v35;
      uint64_t v35 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v25);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }
    uint64_t v29 = v41;
    __int16 v41 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v25);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v30 = v40;
    long long v40 = 0;
    if (v30) {
      (*(void (**)(void *))(*v30 + 144))(v30);
    }
    a2 = v32;
    uint64_t v32 = 0;
    if (a2) {
      std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)&v32, a2);
    }
    uint64_t v14 = v33;
    goto LABEL_60;
  }
  LOBYTE(v36) = v4;
  uint64_t v37 = v2;
  v38[0] = 1;
  WebKit::SpeechRecognitionServer::sendUpdate((WebKit::SpeechRecognitionServer *)v8, v9, 9, (uint64_t)&v36);
  if (v38[0])
  {
    uint64_t v16 = v37;
    uint64_t v37 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        int v2 = 0;
        *(_DWORD *)v16 -= 2;
        goto LABEL_60;
      }
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    }
  }
  int v2 = 0;
LABEL_60:
  uint64_t v33 = 0;
  if (v14) {
    std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)&v33, v14);
  }
LABEL_62:
  if (v3) {
    BOOL v31 = v2 == 0;
  }
  else {
    BOOL v31 = 1;
  }
  if (!v31)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  uint64_t v5 = a2[1];
  int v3 = a2 + 1;
  uint64_t v4 = v5;
  void *v3 = 0;
  if (v5) {
    std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v3, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v10 >> 1, 0);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::SuspendedPageProxy::*&)(void),WebKit::SuspendedPageProxy*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  int v2 = (uint64_t (*)(void *))a1[1];
  int v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsSuspended>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2439;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  char v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebKit::SuspendedPageProxy::~SuspendedPageProxy()::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D7700;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SuspendedPageProxy::~SuspendedPageProxy()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D7700;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SuspendedPageProxy::~SuspendedPageProxy()::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::Close>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v7 = 2170;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  char v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_198E11650(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198E1172C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198E11858(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198E11970(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::toWKDOMNode(WebKit *this, WebCore::Node *a2)
{
  if (_MergedGlobals_92)
  {
    if (!this) {
      return 0;
    }
  }
  else
  {
    qword_1EB359C18 = 0;
    _MergedGlobals_92 = 1;
    if (!this) {
      return 0;
    }
  }
  if (!qword_1EB359C18)
  {
LABEL_10:
    unsigned int v12 = (*((unsigned __int16 *)this + 16) >> 12) - 1;
    if (v12 <= 0xA && ((0x7CFu >> v12) & 1) != 0) {
      uint64_t v13 = (objc_class *)objc_opt_class();
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v11 = (const void *)[[v13 alloc] _initWithImpl:this];
    if (v11) {
      goto LABEL_15;
    }
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(qword_1EB359C18 - 8);
  unint64_t v4 = ((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  uint64_t v7 = v3 & ((v6 >> 31) ^ v6);
  uint64_t v8 = *(WebKit **)(qword_1EB359C18 + 16 * v7);
  if (v8 != this)
  {
    int v9 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v9) & v3;
      uint64_t v8 = *(WebKit **)(qword_1EB359C18 + 16 * v7);
      ++v9;
      if (v8 == this) {
        goto LABEL_8;
      }
    }
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v10 = qword_1EB359C18 + 16 * v7;
  uint64_t v11 = *(const void **)(v10 + 8);
  if (!v11) {
    goto LABEL_10;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
LABEL_15:
  uint64_t v14 = (void *)CFMakeCollectable(v11);

  return v14;
}

id WebKit::toWKDOMRange(WebKit *this, WebCore::Range *a2)
{
  if (byte_1EB359C11)
  {
    if (!this) {
      return 0;
    }
  }
  else
  {
    qword_1EB359C20 = 0;
    byte_1EB359C11 = 1;
    if (!this) {
      return 0;
    }
  }
  if (!qword_1EB359C20)
  {
LABEL_10:
    id v10 = [[WKDOMRange alloc] _initWithImpl:this];
    if (v10) {
      goto LABEL_11;
    }
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(qword_1EB359C20 - 8);
  unint64_t v3 = ((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = *(WebKit **)(qword_1EB359C20 + 16 * v6);
  if (v7 != this)
  {
    int v8 = 1;
    while (v7)
    {
      uint64_t v6 = (v6 + v8) & v2;
      uint64_t v7 = *(WebKit **)(qword_1EB359C20 + 16 * v6);
      ++v8;
      if (v7 == this) {
        goto LABEL_8;
      }
    }
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v9 = qword_1EB359C20 + 16 * v6;
  id v10 = *(id *)(v9 + 8);
  if (!v10) {
    goto LABEL_10;
  }
  CFRetain(*(CFTypeRef *)(v9 + 8));
LABEL_11:
  uint64_t v11 = (void *)CFMakeCollectable(v10);

  return v11;
}

void sub_198E11E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198E11FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9)
{
  if (a9)
  {
    if (*((_DWORD *)a9 + 7) == 2)
    {
      if ((*((_WORD *)a9 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a9);
      }
    }
    else
    {
      *((_DWORD *)a9 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198E121F0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15)
{
  char v16 = a14;
  if (a14)
  {
    a14 = 0;
    a15 = 0;
    WTF::fastFree(v16, a2);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  _Unwind_Resume(a1);
}

uint64_t WTF::createNSArray<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t *a1, uint64_t a2)
{
  uint64_t result = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a2 + 12)];
  *a1 = result;
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = (void *)result;
    int v8 = *(WebCore **)a2;
    uint64_t v9 = 16 * v6;
    do
    {
      uint64_t result = WebCore::makeNSArrayElement(v8, v5);
      if (result) {
        uint64_t result = [v7 addObject:result];
      }
      int v8 = (WebCore *)((char *)v8 + 16);
      v9 -= 16;
    }
    while (v9);
  }
  return result;
}

void sub_198E122AC(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198E125B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a10 + 8))(a10);
    }
    else {
      --a10[2];
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198E126B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198E127BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198E12854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198E12A18(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a13);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a11);
  _Unwind_Resume(a1);
}

void sub_198E12B2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a15);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a13);
  _Unwind_Resume(a1);
}

void sub_198E12CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, WebCore::Node *a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a11)
  {
    if (*((_DWORD *)a11 + 2) == 1) {
      (*(void (**)(WebCore::Node *))(*(void *)a11 + 8))(a11);
    }
    else {
      --*((_DWORD *)a11 + 2);
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v14);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v15 - 64));
  _Unwind_Resume(a1);
}

void sub_198E12F20(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198E12FF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WTF::fastFree(v11, a2);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a11);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_198E13120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  unint64_t v4 = *(_DWORD **)(v2 - 24);
  *(void *)(v2 - 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_198E134E4(_Unwind_Exception *a1, _DWORD *a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    if (a2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a2 + 8))(a2);
    }
    else {
      --a2[2];
    }
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_198E13834(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<WebCore::TextIterator>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    unint64_t v4 = (WTF *)MEMORY[0x199731050]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t willDestroyPage(const OpaqueWKBundle *a1, OpaqueWKBundlePage *a2, void *a3)
{
  uint64_t v5 = (void *)a3[9];
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v7 = *(void *)([(OpaqueWKBundlePage *)a2 _apiObject] + 8);
    return [v5 webProcessPlugIn:a3 willDestroyBrowserContextController:v7];
  }
  return result;
}

void didStartProvisionalLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didStartProvisionalLoadForFrame:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E139B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didReceiveServerRedirectForProvisionalLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didReceiveServerRedirectForProvisionalLoadForFrame:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13A50(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didCommitLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didCommitLoadForFrame:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13AF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFinishDocumentLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFinishDocumentLoadForFrame:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13B90(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFailProvisionalLoadWithErrorForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a5 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFailProvisionalLoadWithErrorForFrame:error:", a5, *(void *)(objc_msgSend(a2, "_apiObject") + 8), *(void *)(objc_msgSend(a3, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13C44(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFailLoadWithErrorForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a5 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFailLoadWithErrorForFrame:error:", a5, *(void *)(objc_msgSend(a2, "_apiObject") + 8), *(void *)(objc_msgSend(a3, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13CF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didSameDocumentNavigationForFrame(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a5 + 2512));
  if (objc_opt_respondsToSelector())
  {
    uint64_t v9 = [a2 _apiObject];
    uint64_t v10 = (a3 - 1);
    if (v10 < 3) {
      uint64_t v11 = v10 + 1;
    }
    else {
      uint64_t v11 = 0;
    }
    [WeakRetained webProcessPlugInBrowserContextController:a5 didSameDocumentNavigation:v11 forFrame:*(void *)(v9 + 8)];
  }
  else if (objc_opt_respondsToSelector())
  {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didSameDocumentNavigationForFrame:", a5, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13DD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFinishLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFinishLoadForFrame:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13E78(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didClearWindowObjectForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didClearWindowObjectForFrame:inScriptWorld:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8), *(void *)(objc_msgSend(a3, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13F2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void globalObjectIsAvailableForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:globalObjectIsAvailableForFrame:inScriptWorld:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8), *(void *)(objc_msgSend(a3, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E13FE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void serviceWorkerGlobalObjectIsAvailableForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:serviceWorkerGlobalObjectIsAvailableForFrame:inScriptWorld:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8), *(void *)(objc_msgSend(a3, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E14094(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void willInjectUserScriptForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:willInjectUserScriptForFrame:inScriptWorld:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8), *(void *)(objc_msgSend(a3, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E14148(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didRemoveFrameFromHierarchy(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didRemoveFrameFromHierarchy:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E141E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didHandleOnloadEventsForFrame(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a3 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didHandleOnloadEventsForFrame:", a3, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E14288(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFirstVisuallyNonEmptyLayoutForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFirstVisuallyNonEmptyLayoutForFrame:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E14328(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didReachLayoutMilestone(const OpaqueWKBundlePage *a1, __int16 a2, const void **a3, id *a4)
{
  id WeakRetained = objc_loadWeakRetained(a4 + 314);
  if (objc_opt_respondsToSelector()) {
    [WeakRetained webProcessPlugInBrowserContextController:a4 renderingProgressDidChange:a2 & 0x1B7];
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E143C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *willSendRequestForFrame(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a6 + 2512));
  if (objc_opt_respondsToSelector())
  {
    unsigned int v12 = *(const void **)([a4 _apiObject] + 8);
    uint64_t v13 = *(void *)([a2 _apiObject] + 8);
    if (a5) {
      uint64_t v14 = [a5 _apiObject];
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (void *)[WeakRetained webProcessPlugInBrowserContextController:a6 frame:v13 willSendRequestForResource:a3 request:v12 redirectResponse:WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v14 + 16))];
    char v16 = v15;
    if (v15)
    {
      CFRetain(v15);
      if (v16 != v12) {
        goto LABEL_14;
      }
LABEL_15:
      CFRelease(v12);
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  if (objc_opt_respondsToSelector())
  {
    unsigned int v12 = *(const void **)([a4 _apiObject] + 8);
    uint64_t v17 = *(void *)([a2 _apiObject] + 8);
    if (a5) {
      uint64_t v18 = [a5 _apiObject];
    }
    else {
      uint64_t v18 = 0;
    }
    int v19 = (void *)[WeakRetained webProcessPlugInBrowserContextController:a6 frame:v17 willSendRequest:v12 redirectResponse:WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v18 + 16))];
    char v16 = v19;
    if (v19)
    {
      CFRetain(v19);
      if (v16 != v12)
      {
LABEL_14:
        a4 = (void *)WKURLRequestCreateWithNSURLRequest(v16);
        CFRelease(v16);
        goto LABEL_17;
      }
      goto LABEL_15;
    }
LABEL_11:
    if (v12)
    {
      a4 = 0;
      goto LABEL_17;
    }
  }
LABEL_16:
  CFRetain(*(CFTypeRef *)([a4 _apiObject] + 8));
LABEL_17:
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return a4;
}

void sub_198E14578(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void didInitiateLoadForResource(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a6 + 2512));
  if (objc_opt_respondsToSelector())
  {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didInitiateLoadForResource:request:pageIsProvisionallyLoading:", a6, *(void *)(objc_msgSend(a2, "_apiObject") + 8), a3, *(void *)(objc_msgSend(a4, "_apiObject") + 8), a5);
  }
  else if (objc_opt_respondsToSelector())
  {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didInitiateLoadForResource:request:", a6, *(void *)(objc_msgSend(a2, "_apiObject") + 8), a3, *(void *)(objc_msgSend(a4, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E146B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didReceiveResponseForResource(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a5 + 2512));
  if (objc_opt_respondsToSelector())
  {
    uint64_t v10 = *(void *)([a2 _apiObject] + 8);
    if (a4) {
      uint64_t v11 = [a4 _apiObject];
    }
    else {
      uint64_t v11 = 0;
    }
    [WeakRetained webProcessPlugInBrowserContextController:a5 frame:v10 didReceiveResponse:WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v11 + 16)) forResource:a3];
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E1478C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFinishLoadForResource(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a4 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didFinishLoadForResource:", a4, *(void *)(objc_msgSend(a2, "_apiObject") + 8), a3);
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E14834(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void didFailLoadForResource(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a5 + 2512));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didFailLoadForResource:error:", a5, *(void *)(objc_msgSend(a2, "_apiObject") + 8), a3, *(void *)(objc_msgSend(a4, "_apiObject") + 8));
  }
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_198E148FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198E14A28(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v3 + 8));
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198E14B6C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v3 + 8));
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t API::InjectedBundle::FormClient::shouldPerformActionInTextField()
{
  return 0;
}

void sub_198E14D58(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v4 + 8));
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198E14F2C(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v4 + 8));
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198E15094(_Unwind_Exception *a1)
{
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198E15164(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198E152CC(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v3 + 8));
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t API::InjectedBundle::EditorClient::shouldBeginEditing()
{
  return 1;
}

uint64_t API::InjectedBundle::EditorClient::shouldEndEditing()
{
  return 1;
}

uint64_t API::InjectedBundle::EditorClient::shouldInsertNode()
{
  return 1;
}

void sub_198E15400(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t API::InjectedBundle::EditorClient::shouldDeleteRange()
{
  return 1;
}

void sub_198E155DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::InjectedBundle::EditorClient::shouldApplyStyle()
{
  return 1;
}

void sub_198E1572C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198E157FC(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198E15A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198E15AEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198E15BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    CFRelease(v14);
  }
  CFRelease(*(CFTypeRef *)(v15 + 8));
  if (a14) {
    CFRelease(*(CFTypeRef *)(a14 + 8));
  }
  _Unwind_Resume(a1);
}

unsigned int *WebCore::SharedBuffer::create<NSData *>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, NSData *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::FragmentedSharedBuffer::create((uint64_t *)&v7, *a1, a2);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x199730FA0](v4, &v7);
  *a3 = v4;
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

void sub_198E15C94(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF::fastFree(v10, a2);
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  }
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WKDOMNode *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WKDOMNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::expand()
{
  if (qword_1EB359C18 && (int v0 = *(_DWORD *)(qword_1EB359C18 - 4)) != 0) {
    return WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WKDOMNode *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WKDOMNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB359C18 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WKDOMNode *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WKDOMNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WKDOMNode *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WKDOMNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB359C18;
  if (qword_1EB359C18)
  {
    int v3 = *(_DWORD *)(qword_1EB359C18 - 4);
    int v4 = *(_DWORD *)(qword_1EB359C18 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359C18 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(qword_1EB359C18 - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = qword_1EB359C18;
    do
    {
      uint64_t v9 = (void *)(v2 + 16 * v7);
      if ((unint64_t)(*v9 + 1) >= 2)
      {
        if (v8) {
          int v10 = *(_DWORD *)(v8 - 8);
        }
        else {
          int v10 = 0;
        }
        uint64_t v11 = (~(*v9 << 32) + *v9) ^ ((~(*v9 << 32) + *v9) >> 22);
        unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((unint64_t)(v11 + ~(v11 << 13)) >> 8));
        unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
        int v15 = 1;
        do
        {
          unsigned int v16 = v14;
          uint64_t v17 = *(void *)(v8 + 16 * v14);
          unsigned int v14 = (v14 + v15++) & v10;
        }
        while (v17);
        *(_OWORD *)(v8 + 16 * v16) = *(_OWORD *)v9;
      }
      ++v7;
    }
    while (v7 != v3);
  }
  else if (!v2)
  {
    return result;
  }

  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

_DWORD *WTF::HashTable<WebCore::Range *,WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>>,WTF::DefaultHash<WebCore::Range *>,WTF::HashMap<WebCore::Range *,WKDOMRange *,WTF::DefaultHash<WebCore::Range *>,WTF::HashTraits<WebCore::Range *>,WTF::HashTraits<WKDOMRange *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Range *>>::expand()
{
  if (qword_1EB359C20 && (int v0 = *(_DWORD *)(qword_1EB359C20 - 4)) != 0) {
    return WTF::HashTable<WebCore::Range *,WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>>,WTF::DefaultHash<WebCore::Range *>,WTF::HashMap<WebCore::Range *,WKDOMRange *,WTF::DefaultHash<WebCore::Range *>,WTF::HashTraits<WebCore::Range *>,WTF::HashTraits<WKDOMRange *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Range *>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB359C20 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WebCore::Range *,WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>>,WTF::DefaultHash<WebCore::Range *>,WTF::HashMap<WebCore::Range *,WKDOMRange *,WTF::DefaultHash<WebCore::Range *>,WTF::HashTraits<WebCore::Range *>,WTF::HashTraits<WKDOMRange *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Range *>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WebCore::Range *,WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>>,WTF::DefaultHash<WebCore::Range *>,WTF::HashMap<WebCore::Range *,WKDOMRange *,WTF::DefaultHash<WebCore::Range *>,WTF::HashTraits<WebCore::Range *>,WTF::HashTraits<WKDOMRange *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Range *>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB359C20;
  if (qword_1EB359C20)
  {
    int v3 = *(_DWORD *)(qword_1EB359C20 - 4);
    int v4 = *(_DWORD *)(qword_1EB359C20 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359C20 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  _DWORD *result = 0;
  *(_DWORD *)(qword_1EB359C20 - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = qword_1EB359C20;
    do
    {
      uint64_t v9 = (void *)(v2 + 16 * v7);
      if ((unint64_t)(*v9 + 1) >= 2)
      {
        if (v8) {
          int v10 = *(_DWORD *)(v8 - 8);
        }
        else {
          int v10 = 0;
        }
        uint64_t v11 = (~(*v9 << 32) + *v9) ^ ((~(*v9 << 32) + *v9) >> 22);
        unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((unint64_t)(v11 + ~(v11 << 13)) >> 8));
        unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
        int v15 = 1;
        do
        {
          unsigned int v16 = v14;
          uint64_t v17 = *(void *)(v8 + 16 * v14);
          unsigned int v14 = (v14 + v15++) & v10;
        }
        while (v17);
        *(_OWORD *)(v8 + 16 * v16) = *(_OWORD *)v9;
      }
      ++v7;
    }
    while (v7 != v3);
  }
  else if (!v2)
  {
    return result;
  }

  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

void WebKit::UserMediaPermissionCheckProxy::~UserMediaPermissionCheckProxy(WebKit::UserMediaPermissionCheckProxy *this)
{
  *(void *)this = &unk_1EE9D7888;
  WebKit::UserMediaPermissionCheckProxy::complete((uint64_t)this);
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v3, v2);
  }
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, v2);
  }
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

{
  uint64_t vars8;

  WebKit::UserMediaPermissionCheckProxy::~UserMediaPermissionCheckProxy(this);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::UserMediaPermissionCheckProxy::complete(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    *(void *)(result + 32) = 0;
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  return result;
}

void *WebKit::UserMediaPermissionRequestManagerProxy::forEach(void *a1)
{
  {
    WebKit::proxies(void)::set = 0;
    *(void *)&dword_1E93CFC10 = 0;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)&WebKit::proxies(void)::set, &v10);
  if (WebKit::proxies(void)::set)
  {
    uint64_t v2 = *(unsigned int *)(WebKit::proxies(void)::set - 4);
    uint64_t v3 = WebKit::proxies(void)::set + 8 * v2;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v2 = 0;
  }
  uint64_t v5 = &WebKit::proxies(void)::set;
  uint64_t v6 = v3;
  uint64_t v7 = v3;
  uint64_t v8 = v3;
  uint64_t v9 = WebKit::proxies(void)::set + 8 * v2;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v5);
  while (v11 != v6)
  {
    (*(void (**)(void, void))(*(void *)*a1 + 16))(*a1, *(void *)(*(void *)v11 + 8));
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v10);
  }
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestManagerProxy::UserMediaPermissionRequestManagerProxy(WebKit::UserMediaPermissionRequestManagerProxy *this, WebKit::WebPageProxy *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unsigned int *)((char *)this + 8);
  *(void *)this = &unk_1EE9D78B0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v5 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v6 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v6, 1u);
  *((void *)this + 8) = v6;
  uint64_t v7 = (atomic_uint *)WTF::RunLoop::main((WTF::RunLoop *)v5);
  uint64_t v8 = (unsigned int *)(v7 + 2);
  atomic_fetch_add(v7 + 2, 1u);
  WTF::RunLoop::Timer::Timer<WebKit::UserMediaPermissionRequestManagerProxy>((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 72), (WTF::RunLoop *)v7, (uint64_t)this, (uint64_t)WebKit::UserMediaPermissionRequestManagerProxy::rejectionTimerFired, 0);
  uint64_t v9 = WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v8);
  *(_OWORD *)((char *)this + 18WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  *(_OWORD *)((char *)this + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
  uint64_t v10 = (atomic_uint *)WTF::RunLoop::main((WTF::RunLoop *)v9);
  uint64_t v11 = (unsigned int *)(v10 + 2);
  atomic_fetch_add(v10 + 2, 1u);
  WTF::RunLoop::Timer::Timer<WebKit::UserMediaPermissionRequestManagerProxy>((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 200), (WTF::RunLoop *)v10, (uint64_t)this, (uint64_t)WebKit::UserMediaPermissionRequestManagerProxy::watchdogTimerFired, 0);
  WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v11);
  *((void *)this + 29) = 0;
  uint64_t v12 = WebKit::WebPageProxy::logger(a2);
  atomic_fetch_add((atomic_uint *volatile)(v12 + 8), 1u);
  *((void *)this + 3WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v12;
  *((void *)this + 31) = WTF::cryptographicallyRandomNumber<unsigned long long>();
  *((_WORD *)this + 128) = 0;
  *((void *)this + 33) = 0;
  *((_WORD *)this + 136) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  {
    WebKit::proxies(void)::set = 0;
    *(void *)&dword_1E93CFC10 = 1;
    goto LABEL_29;
  }
  if (++dword_1E93CFC10 > dword_1E93CFC14)
  {
    uint64_t v14 = WebKit::proxies(void)::set;
    if (WebKit::proxies(void)::set)
    {
      int v15 = *(_DWORD *)(WebKit::proxies(void)::set - 4);
      if (!v15) {
        goto LABEL_23;
      }
      int v16 = 0;
      unsigned int v17 = v15 - 1;
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)(v14 + 8 * v17);
        if ((unint64_t)(v19 + 1) >= 2 && !*(void *)(v19 + 8))
        {
          *(void *)(v14 + 8 * v17) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v19);
            WTF::fastFree((WTF *)v19, v13);
          }
          *(void *)(v14 + 8 * v17) = -1;
          ++v16;
        }
        --v17;
      }
      while (v18);
      uint64_t v14 = WebKit::proxies(void)::set;
      if (v16)
      {
        *(_DWORD *)(WebKit::proxies(void)::set - 16) += v16;
        if (WebKit::proxies(void)::set) {
          int v20 = *(_DWORD *)(WebKit::proxies(void)::set - 12);
        }
        else {
          int v20 = 0;
        }
        *(_DWORD *)(WebKit::proxies(void)::set - 12) = v20 - v16;
        uint64_t v14 = WebKit::proxies(void)::set;
      }
      if (v14)
      {
        unsigned int v21 = *(_DWORD *)(v14 - 4);
        if (v21 >= 9 && 6 * *(_DWORD *)(v14 - 12) < v21)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::proxies(void)::set);
          uint64_t v14 = WebKit::proxies(void)::set;
          dword_1E93CFC10 = 0;
          if (WebKit::proxies(void)::set)
          {
LABEL_25:
            unsigned int v23 = *(_DWORD *)(v14 - 12);
            int v24 = 0x7FFFFFFF;
            if (v23 >= 0x7FFFFFFF) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
          unsigned int v23 = 0;
LABEL_30:
          int v24 = v23;
LABEL_31:
          dword_1E93CFC14 = 2 * v24;
          goto LABEL_32;
        }
LABEL_23:
        dword_1E93CFC10 = 0;
        goto LABEL_25;
      }
    }
LABEL_29:
    unsigned int v23 = 0;
    dword_1E93CFC10 = 0;
    goto LABEL_30;
  }
LABEL_32:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v4, (uint64_t)this);
  unsigned int v25 = (atomic_uint *)*((void *)this + 1);
  atomic_fetch_add(v25, 1u);
  atomic_fetch_add(v25, 1u);
  uint64_t v30 = (WTF *)v25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&WebKit::proxies(void)::set, &v30, (uint64_t)&v29);
  uint64_t v27 = (unsigned int *)v30;
  uint64_t v30 = 0;
  if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v27);
    WTF::fastFree((WTF *)v27, v26);
  }
  if (v25 && atomic_fetch_add(v25, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v25);
    WTF::fastFree((WTF *)v25, v26);
  }
  WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(this);
  return this;
}

void WebKit::UserMediaPermissionRequestManagerProxy::rejectionTimerFired(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (v1 == *((void *)this + 14))
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = *(void *)(v3 + 8 * v1);
    *(void *)(v3 + 8 * v1) = 0;
    uint64_t v5 = *((void *)this + 15);
    uint64_t v6 = *(void *)(v5 + 8 * v1);
    *(void *)(v5 + 8 * v1) = 0;
    if (v6)
    {
      CFRelease(*(CFTypeRef *)(v6 + 8));
      uint64_t v1 = *((void *)this + 13);
    }
    if (v1 == *((unsigned int *)this + 32) - 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v1 + 1;
    }
    *((void *)this + 13) = v7;
    uint64_t v10 = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(this, v4, 5, (uint64_t *)&v10, 0);
    uint64_t v9 = v10;
    uint64_t v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
    if (*((void *)this + 13) != *((void *)this + 14)) {
      WebKit::UserMediaPermissionRequestManagerProxy::scheduleNextRejection(this);
    }
  }
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::UserMediaPermissionRequestManagerProxy>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v10 = &unk_1EE9D79F0;
  v10[1] = a4;
  void v10[2] = a5;
  v10[3] = a3;
  uint64_t result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(void *)a1 = &unk_1EE9B3390;
  *((void *)a1 + 3) = v10;
  return result;
}

WTF *WebKit::UserMediaPermissionRequestManagerProxy::watchdogTimerFired(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 8) + 8);
  if (v2) {
    uint64_t v3 = (WebKit::WebPageProxy *)(v2 - 16);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WebKit::WebPageProxy::logger(v3);
  uint64_t v5 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)this + 24))(this);
  uint64_t v7 = *((void *)this + 31);
  v10[0] = v5;
  v10[1] = v6;
  void v10[2] = "watchdogTimerFired";
  v10[3] = v7;
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  }
  WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 152), v6);
  uint64_t result = WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 136), v8);
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 256) = 0;
  return result;
}

void WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 8) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  if (*((unsigned char *)this + 273))
  {
    BoolValueForKedouble y = *((unsigned char *)this + 272) != 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 272);
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKedouble y = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v4);
  }
  uint64_t v7 = *(void *)(v3 + 272);
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v4))goto LABEL_15; {
  uint64_t v9 = *(void *)(v3 + 272);
  }
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v10 = (WebCore::MockRealtimeMediaSourceCenter *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v8);
  if (v10)
  {
LABEL_15:
    uint64_t v11 = *(void *)(*(void *)(*(void *)(v3 + 256) + 512) + 8);
    if (v11) {
      uint64_t v12 = (CFTypeRef *)(v11 - 16);
    }
    else {
      uint64_t v12 = 0;
    }
    CFRetain(v12[1]);
    uint64_t v13 = WebKit::WebProcessPool::ensureGPUProcess((WebKit::WebProcessPool *)v12);
    uint64_t v14 = (unsigned int *)(v13 + 16);
    atomic_fetch_add((atomic_uint *volatile)(v13 + 16), 1u);
    if (*(unsigned __int8 *)(v13 + 432) != BoolValueForKey)
    {
      *(unsigned char *)(v13 + 432) = BoolValueForKey;
      char v15 = BoolValueForKey;
      WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockCaptureDevicesEnabled>(v13, &v15, 0, 0);
    }
    uint64_t v10 = (WebCore::MockRealtimeMediaSourceCenter *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
    if (v11) {
      CFRelease(v12[1]);
    }
  }
  if (BoolValueForKey != WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(v10)) {
    WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled((WebCore::MockRealtimeMediaSourceCenter *)BoolValueForKey);
  }
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 - 8));
  }
}

void WebKit::UserMediaPermissionRequestManagerProxy::~UserMediaPermissionRequestManagerProxy(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  *(void *)this = &unk_1EE9D78B0;
  uint64_t v2 = *(void *)(*((void *)this + 8) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  uint64_t v4 = *(void *)(v3 + 256);
  uint64_t v5 = *(void *)(*((void *)this + 8) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 1928);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2500;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v81 = v8;
  IPC::ArgumentCoder<WebCore::MediaProducerMediaCaptureKind,void>::encode<IPC::Encoder>(v8, 4);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v9 = &unk_1EE9D7A18;
  v79[0] = v9;
  v79[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v80 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v81, 0, (uint64_t)v79, 1);
  if (v80)
  {
    uint64_t v11 = v79[0];
    v79[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v81;
  char v81 = 0;
  if (!v12)
  {
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  IPC::Encoder::~Encoder(v12, v10);
  WTF::fastFree(v27, v28);
  if (v5) {
LABEL_12:
  }
    CFRelease(*(CFTypeRef *)(v5 - 8));
LABEL_13:
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 - 8));
  }
  {
    qword_1E93CFBE0 = 0;
    unk_1E93CFBE8 = 0;
    WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&unk_1EE9D78F0;
    qword_1E93CFBF0 = 0;
    word_1E93CFBF8 = 1;
  }
  uint64_t v13 = *(void *)(*((void *)this + 8) + 8);
  if (v13) {
    uint64_t v14 = v13 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  char v15 = *(atomic_uint **)(v14 + 256);
  int v16 = (unsigned int *)(v15 + 4);
  atomic_fetch_add(v15 + 4, 1u);
  WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded((WebKit::UserMediaProcessManager *)v15, (WebKit::WebProcessProxy *)v10);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v16);
  {
    int v19 = dword_1E93CFC10;
    unsigned int v18 = dword_1E93CFC14;
  }
  else
  {
    unsigned int v18 = 0;
    int v19 = 0;
    WebKit::proxies(void)::set = 0;
    *(void *)&dword_1E93CFC10 = 0;
  }
  dword_1E93CFC10 = v19 + 1;
  if (v19 + 1 > v18)
  {
    uint64_t v20 = WebKit::proxies(void)::set;
    if (WebKit::proxies(void)::set)
    {
      int v21 = *(_DWORD *)(WebKit::proxies(void)::set - 4);
      if (!v21) {
        goto LABEL_45;
      }
      int v22 = 0;
      unsigned int v23 = v21 - 1;
      do
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)(v20 + 8 * v23);
        if ((unint64_t)(v25 + 1) >= 2 && !*(void *)(v25 + 8))
        {
          *(void *)(v20 + 8 * v23) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v25);
            WTF::fastFree((WTF *)v25, v17);
          }
          *(void *)(v20 + 8 * v23) = -1;
          ++v22;
        }
        --v23;
      }
      while (v24);
      uint64_t v20 = WebKit::proxies(void)::set;
      if (v22)
      {
        *(_DWORD *)(WebKit::proxies(void)::set - 16) += v22;
        if (WebKit::proxies(void)::set) {
          int v26 = *(_DWORD *)(WebKit::proxies(void)::set - 12);
        }
        else {
          int v26 = 0;
        }
        *(_DWORD *)(WebKit::proxies(void)::set - 12) = v26 - v22;
        uint64_t v20 = WebKit::proxies(void)::set;
      }
      if (v20)
      {
        unsigned int v29 = *(_DWORD *)(v20 - 4);
        if (v29 >= 9 && 6 * *(_DWORD *)(v20 - 12) < v29)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::proxies(void)::set);
          uint64_t v20 = WebKit::proxies(void)::set;
          dword_1E93CFC10 = 0;
          if (!WebKit::proxies(void)::set)
          {
            unsigned int v31 = 0;
            goto LABEL_49;
          }
          goto LABEL_48;
        }
LABEL_45:
        dword_1E93CFC10 = 0;
LABEL_48:
        unsigned int v31 = *(_DWORD *)(v20 - 12);
        int v32 = 0x7FFFFFFF;
        if (v31 >= 0x7FFFFFFF)
        {
LABEL_50:
          dword_1E93CFC14 = 2 * v32;
          goto LABEL_51;
        }
LABEL_49:
        int v32 = v31;
        goto LABEL_50;
      }
    }
    unsigned int v31 = 0;
    dword_1E93CFC10 = 0;
    goto LABEL_49;
  }
LABEL_51:
  uint64_t v33 = *((void *)this + 1);
  if (v33 && *(void *)(v33 + 8))
  {
    v79[0] = *((void *)this + 1);
    char v34 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&WebKit::proxies(void)::set, v79);
    unsigned int v17 = v34;
    if (WebKit::proxies(void)::set)
    {
      uint64_t v35 = WebKit::proxies(void)::set + 8 * *(unsigned int *)(WebKit::proxies(void)::set - 4);
      if ((unsigned int **)v35 == v34) {
        goto LABEL_60;
      }
    }
    else
    {
      if (!v34) {
        goto LABEL_60;
      }
      uint64_t v35 = 0;
    }
    if ((unsigned int **)v35 != v34) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&WebKit::proxies(void)::set, v34);
    }
  }
LABEL_60:
  WebKit::UserMediaPermissionRequestManagerProxy::invalidatePendingRequests(this, v17);
  uint64_t v37 = (const void *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v38 = (WTF::StringImpl **)*((void *)this + 36);
  if (v38) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v38, v36);
  }
  uint64_t v39 = *((void *)this + 35);
  if (v39) {
    WTF::fastFree((WTF *)(v39 - 16), v36);
  }
  long long v40 = (unsigned int *)*((void *)this + 30);
  *((void *)this + 3WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  if (v40 && atomic_fetch_add((atomic_uint *volatile)v40 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v40 + 2);
    (*(void (**)(unsigned int *))(*(void *)v40 + 8))(v40);
  }
  *((void *)this + 25) = &unk_1EE9B3390;
  uint64_t v41 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 200));
  unsigned int v43 = *((_DWORD *)this + 47);
  if (v43) {
    WTF::VectorDestructor<true,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::destruct(*((void *)this + 22), (WTF::StringImpl *)(*((void *)this + 22) + 40 * v43));
  }
  char v44 = (WTF *)*((void *)this + 22);
  if (v44)
  {
    *((void *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v44, v42);
  }
  uint64_t v45 = *((void *)this + 21);
  if (v45) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v45, (WTF::StringImpl *)v42);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, v42);
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, v46);
  unint64_t v48 = *((void *)this + 13);
  unint64_t v49 = *((void *)this + 14);
  int v50 = (WTF *)*((void *)this + 15);
  if (v48 <= v49)
  {
    if (v48 == v49) {
      goto LABEL_96;
    }
    uint64_t v57 = (uint64_t *)((char *)v50 + 8 * v48);
    uint64_t v58 = 8 * v49 - 8 * v48;
    do
    {
      uint64_t v59 = *v57;
      uint64_t *v57 = 0;
      if (v59) {
        CFRelease(*(CFTypeRef *)(v59 + 8));
      }
      ++v57;
      v58 -= 8;
    }
    while (v58);
  }
  else
  {
    if (v49)
    {
      uint64_t v51 = 8 * v49;
      do
      {
        uint64_t v52 = *(void *)v50;
        *(void *)int v50 = 0;
        if (v52) {
          CFRelease(*(CFTypeRef *)(v52 + 8));
        }
        int v50 = (WTF *)((char *)v50 + 8);
        v51 -= 8;
      }
      while (v51);
      int v50 = (WTF *)*((void *)this + 15);
      unint64_t v48 = *((void *)this + 13);
    }
    uint64_t v53 = *((unsigned int *)this + 32);
    if (v48 != v53)
    {
      uint64_t v54 = (uint64_t *)((char *)v50 + 8 * v48);
      uint64_t v55 = 8 * v53 - 8 * v48;
      do
      {
        uint64_t v56 = *v54;
        *uint64_t v54 = 0;
        if (v56) {
          CFRelease(*(CFTypeRef *)(v56 + 8));
        }
        ++v54;
        v55 -= 8;
      }
      while (v55);
    }
  }
  int v50 = (WTF *)*((void *)this + 15);
LABEL_96:
  if (v50)
  {
    *((void *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v50, v47);
  }
  *((void *)this + 9) = &unk_1EE9B3390;
  uint64_t v60 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 72));
  unsigned __int8 v62 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v62 && atomic_fetch_add((atomic_uint *volatile)v62, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v62);
    WTF::fastFree((WTF *)v62, v61);
  }
  uint64_t v63 = *((void *)this + 7);
  if (v63) {
    WTF::fastFree((WTF *)(v63 - 16), v61);
  }
  unint64_t v64 = *((void *)this + 3);
  unint64_t v65 = *((void *)this + 4);
  unsigned __int8 v66 = (WTF *)*((void *)this + 5);
  if (v64 <= v65)
  {
    if (v64 == v65) {
      goto LABEL_122;
    }
    uint64_t v73 = (uint64_t *)((char *)v66 + 8 * v64);
    uint64_t v74 = 8 * v65 - 8 * v64;
    do
    {
      uint64_t v75 = *v73;
      uint64_t *v73 = 0;
      if (v75) {
        CFRelease(*(CFTypeRef *)(v75 + 8));
      }
      ++v73;
      v74 -= 8;
    }
    while (v74);
  }
  else
  {
    if (v65)
    {
      uint64_t v67 = 8 * v65;
      do
      {
        uint64_t v68 = *(void *)v66;
        *(void *)unsigned __int8 v66 = 0;
        if (v68) {
          CFRelease(*(CFTypeRef *)(v68 + 8));
        }
        unsigned __int8 v66 = (WTF *)((char *)v66 + 8);
        v67 -= 8;
      }
      while (v67);
      unsigned __int8 v66 = (WTF *)*((void *)this + 5);
      unint64_t v64 = *((void *)this + 3);
    }
    uint64_t v69 = *((unsigned int *)this + 12);
    if (v64 != v69)
    {
      double v70 = (uint64_t *)((char *)v66 + 8 * v64);
      uint64_t v71 = 8 * v69 - 8 * v64;
      do
      {
        uint64_t v72 = *v70;
        *double v70 = 0;
        if (v72) {
          CFRelease(*(CFTypeRef *)(v72 + 8));
        }
        ++v70;
        v71 -= 8;
      }
      while (v71);
    }
  }
  unsigned __int8 v66 = (WTF *)*((void *)this + 5);
LABEL_122:
  if (v66)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v66, v61);
  }
  uint64_t v76 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v76) {
    CFRelease(*(CFTypeRef *)(v76 + 8));
  }
  uint64_t v77 = *((void *)this + 1);
  if (v77)
  {
    *(void *)(v77 + 8) = 0;
    __int16 v78 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v78)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v78, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v78);
        WTF::fastFree((WTF *)v78, v61);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::UserMediaPermissionRequestManagerProxy::~UserMediaPermissionRequestManagerProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded(WebKit::UserMediaProcessManager *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  __int16 v23 = 0;
  char v22 = 0;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v3 = &unk_1EE9D7D10;
  v3[1] = (char *)&v23 + 1;
  v3[2] = &v23;
  v3[3] = &v22;
  v3[4] = this;
  *(void *)long long buf = v3;
  WebKit::UserMediaPermissionRequestManagerProxy::forEach(buf);
  uint64_t result = (*(uint64_t (**)(void *))(*v3 + 8))(v3);
  if (!v22)
  {
    int v6 = v23;
    if (!HIBYTE(v23) || !(_BYTE)v23)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      if (!HIBYTE(v23) && (*((unsigned char *)this + 784) & 2) != 0)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>((uint64_t)&v20, (uint64_t)&WebKit::audioExtensionPath);
        int v6 = v23;
        *((_DWORD *)this + 196) &= ~2u;
      }
      if (!v6 && (*((unsigned char *)this + 784) & 1) != 0)
      {
        uint64_t v7 = HIDWORD(v21);
        if (HIDWORD(v21) == v21)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>((uint64_t)&v20, (uint64_t)&WebKit::videoExtensionPath);
        }
        else
        {
          uint64_t v8 = v20;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(void *)(v8 + 8 * v7) = *(void *)buf;
          ++HIDWORD(v21);
        }
        *((_DWORD *)this + 196) &= ~1u;
      }
      if (HIDWORD(v21))
      {
        uint64_t v9 = v20;
        uint64_t v10 = 8 * HIDWORD(v21);
        do
        {
          uint64_t v11 = qword_1EB358820;
          if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            uint64_t v12 = v24 ? (char *)v24 + 16 : 0;
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v12;
            _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "UserMediaProcessManager::endedCaptureSession - revoking extension %s", buf, 0xCu);
            uint64_t v14 = v24;
            uint64_t v24 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1) {
                WTF::fastFree(v14, v13);
              }
              else {
                --*(_DWORD *)v14;
              }
            }
          }
          v9 += 8;
          v10 -= 8;
        }
        while (v10);
        char v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v15 = 2666;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 66) = (char *)v15 + 16;
        *((void *)v15 + 67) = 512;
        *((void *)v15 + 68) = 0;
        *((void *)v15 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
        *((void *)v15 + 69) = 0;
        IPC::Encoder::encodeHeader(v15);
        uint64_t v24 = v15;
        IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v15, (uint64_t)&v20);
        buf[0] = 0;
        char v26 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v24, 0, (uint64_t)buf, 1);
        if (v26)
        {
          uint64_t v16 = *(void *)buf;
          *(void *)long long buf = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
        unsigned int v17 = v24;
        uint64_t v24 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v5);
          WTF::fastFree(v18, v19);
        }
      }
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v5);
    }
  }
  return result;
}

void WebKit::UserMediaPermissionRequestManagerProxy::invalidatePendingRequests(WebKit::UserMediaPermissionRequestManagerProxy *this, void *a2)
{
  uint64_t v3 = (CFTypeRef *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    (*((void (**)(CFTypeRef *))*v3 + 5))(v3);
    CFRelease(v3[1]);
  }
  unint64_t v4 = *((void *)this + 3);
  unint64_t v5 = *((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  int v6 = (WTF *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  unint64_t v7 = *((unsigned int *)this + 12);
  *((_DWORD *)this + 12) = 0;
  if (v4 != v5)
  {
    unint64_t v8 = v4;
    do
    {
      (*(void (**)(void))(**((void **)v6 + v8) + 40))(*((void *)v6 + v8));
      v8 += v7 + 1;
      do
        v8 -= v7;
      while (v8 >= v7);
    }
    while (v5 != v8);
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 17);
  uint64_t v25 = v9;
  int v11 = *((_DWORD *)this + 36);
  uint64_t v10 = *((unsigned int *)this + 37);
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  int v26 = v11;
  int v27 = v10;
  if (v10)
  {
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v9++;
      (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v14 = *((void *)this + 7);
  if (v14)
  {
    *((void *)this + 7) = 0;
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, a2);
  if (v4 <= v5)
  {
    if (v4 != v5)
    {
      char v22 = (uint64_t *)((char *)v6 + 8 * v4);
      uint64_t v23 = 8 * v5 - 8 * v4;
      do
      {
        uint64_t v24 = *v22;
        uint64_t *v22 = 0;
        if (v24) {
          CFRelease(*(CFTypeRef *)(v24 + 8));
        }
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    if (v5)
    {
      uint64_t v16 = 8 * v5;
      unsigned int v17 = v6;
      do
      {
        uint64_t v18 = *(void *)v17;
        *(void *)unsigned int v17 = 0;
        if (v18) {
          CFRelease(*(CFTypeRef *)(v18 + 8));
        }
        unsigned int v17 = (WTF *)((char *)v17 + 8);
        v16 -= 8;
      }
      while (v16);
    }
    if (v4 != v7)
    {
      int v19 = (uint64_t *)((char *)v6 + 8 * v4);
      uint64_t v20 = 8 * v7 - 8 * v4;
      do
      {
        uint64_t v21 = *v19;
        *int v19 = 0;
        if (v21) {
          CFRelease(*(CFTypeRef *)(v21 + 8));
        }
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
  }
  if (v6) {
    WTF::fastFree(v6, v15);
  }
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::logger(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 8) + 8);
  if (v1) {
    return WebKit::WebPageProxy::logger((WebKit::WebPageProxy *)(v1 - 16));
  }
  else {
    return WebKit::WebPageProxy::logger(0);
  }
}

char *WebKit::UserMediaPermissionRequestManagerProxy::logChannel(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  return &WebKit2LogWebRTC;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::logIdentifier(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  return *((void *)this + 31);
}

void WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8);
  if (v12) {
    uint64_t v13 = v12 - 16;
  }
  else {
    uint64_t v13 = 0;
  }
  CFRetain(*(CFTypeRef *)(v13 + 8));
  uint64_t v14 = WebKit::WebFrameProxy::webFrame(a2, a3);
  uint64_t v15 = v14;
  if (!v14) {
    goto LABEL_24;
  }
  CFRetain(*(CFTypeRef *)(v14 + 8));
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v13 + 32) + 1000), &v37);
  MEMORY[0x19972E890](v38, &v37, 0);
  WebCore::SecurityOriginData::toURL((uint64_t *)&v36, (WebCore::SecurityOriginData *)(*a5 + 8));
  int v18 = WTF::protocolHostAndPortAreEqual((WTF *)v38, &v36, v16);
  m_ptr = v36.m_string.m_impl.m_ptr;
  v36.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v17);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  uint64_t v20 = v38[0];
  v38[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v17);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = v37;
  uint64_t v37 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 != 2)
    {
      *(_DWORD *)v21 -= 2;
      goto LABEL_16;
    }
    WTF::StringImpl::destroy(v21, v17);
    if (v18) {
      goto LABEL_17;
    }
LABEL_24:
    uint64_t v32 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v32 + 16))(v32, 0);
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    if (!v15) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_16:
  if (!v18) {
    goto LABEL_24;
  }
LABEL_17:
  uint64_t v33 = a2;
  char v34 = a4;
  API::SecurityOrigin::create(&v36);
  API::SecurityOrigin::create(&v37);
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  uint64_t v35 = IdentifierInternal;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add((uint64_t *)v38, (uint64_t *)(a1 + 56), &v35);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v23 = *(atomic_uint **)(a1 + 8);
  uint64_t v24 = a3;
  if (v23)
  {
    atomic_fetch_add(v23, 1u);
    uint64_t IdentifierInternal = v35;
  }
  uint64_t v25 = *a6;
  *a6 = 0;
  int v26 = (void *)WTF::fastMalloc((WTF *)0x28);
  *int v26 = &unk_1EE9D7BD0;
  v26[1] = a1;
  void v26[2] = v23;
  v26[3] = IdentifierInternal;
  v26[4] = v25;
  uint64_t v27 = API::Object::newObject(0x38uLL, 106);
  *(void *)uint64_t v27 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v27);
  *(void *)uint64_t v27 = &unk_1EE9D7888;
  *(void *)(v27 + 16) = v33;
  *(void *)(v27 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v24;
  *(void *)(v27 + 32) = v26;
  uint64_t v28 = *v34;
  *char v34 = 0;
  *(void *)(v27 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v28;
  uint64_t v29 = *a5;
  *a5 = 0;
  *(void *)(v27 + 48) = v29;
  (*(void (**)(void))(**(void **)(v13 + 104) + 320))();
  CFRelease(*(CFTypeRef *)(v27 + 8));
  uint64_t v30 = v37;
  uint64_t v37 = 0;
  if (v30) {
    CFRelease(*((CFTypeRef *)v30 + 1));
  }
  unsigned int v31 = v36.m_string.m_impl.m_ptr;
  v36.m_string.m_impl.m_ptr = 0;
  if (v31) {
    CFRelease(*((CFTypeRef *)v31 + 1));
  }
LABEL_25:
  CFRelease(*(CFTypeRef *)(v15 + 8));
LABEL_26:
  if (v12) {
    CFRelease(*(CFTypeRef *)(v12 - 8));
  }
}

void WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(uint64_t a1, int a2)
{
  if (a2 && (a2 != 1 || *(_DWORD *)(a1 + 164)))
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 64) + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    CFRetain(*(CFTypeRef *)(v3 + 8));
    if (*(unsigned char *)(v3 + 801) || !*(unsigned char *)(v3 + 800)) {
      goto LABEL_13;
    }
    uint64_t v4 = *(void *)(v3 + 256);
    uint64_t v5 = *(void *)(*(void *)(v3 + 32) + 1928);
    int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v6 = 2158;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v14 = v6;
    LOBYTE(v12) = 0;
    char v13 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v14, 0, (uint64_t)&v12, 1);
    if (v13)
    {
      uint64_t v8 = v12;
      uint64_t v12 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
    uint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v7);
      WTF::fastFree(v10, v11);
      if (!v2) {
        return;
      }
    }
    else
    {
LABEL_13:
      if (!v2) {
        return;
      }
    }
    CFRelease(*(CFTypeRef *)(v2 - 8));
  }
}

void WebKit::UserMediaPermissionRequestManagerProxy::clearCachedState(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 8) + 8);
  if (v2) {
    uint64_t v3 = (WebKit::WebPageProxy *)(v2 - 16);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WebKit::WebPageProxy::logger(v3);
  uint64_t v5 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)this + 24))(this);
  uint64_t v7 = *((void *)this + 31);
  v8[0] = v5;
  v8[1] = v6;
  void v8[2] = "clearCachedState";
  v8[3] = v7;
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  }
  WebKit::UserMediaPermissionRequestManagerProxy::invalidatePendingRequests(this, v6);
}

void WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(WebKit::UserMediaPermissionRequestManagerProxy *a1, uint64_t a2, int a3, uint64_t *a4, char a5)
{
  uint64_t v9 = a1;
  v85[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(*((void *)a1 + 8) + 8);
  if (v10) {
    uint64_t v11 = v10 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  CFRetain(*(CFTypeRef *)(v11 + 8));
  if (!*(unsigned char *)(v11 + 801) && *(unsigned char *)(v11 + 800))
  {
    uint64_t v12 = *(void *)(*((void *)v9 + 8) + 8);
    if (v12) {
      char v13 = (WebKit::WebPageProxy *)(v12 - 16);
    }
    else {
      char v13 = 0;
    }
    uint64_t v14 = WebKit::WebPageProxy::logger(v13);
    uint64_t v15 = (IPC::Encoder *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)v9 + 24))(v9);
    unsigned int v17 = (IPC::Encoder *)*((void *)v9 + 31);
    v73[0] = v15;
    v73[1] = v16;
    v73[2] = (IPC::Encoder *)"denyRequest";
    v73[3] = v17;
    if (*(unsigned char *)(v14 + 12))
    {
      int v18 = *(WTF::String **)(a2 + 24);
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v78, (WTF::Logger::LogSiteIdentifier *)v73);
      uint64_t v72 = v18;
      WTF::String::number(v18);
      WTF::String::String((WTF::String *)&v76, ", reason: ");
      WebKit::convertEnumerationToString(&v75, a3);
      WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, &v79);
      uint64_t v20 = v75;
      uint64_t v75 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v19);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      uint64_t v21 = v76;
      uint64_t v76 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v19);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      char v22 = v77;
      uint64_t v77 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v19);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = v78;
      __int16 v78 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v19);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = qword_1EB358820;
      uint64_t v25 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        int v26 = v74[0] ? (char *)v74[0] + 16 : 0;
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v74[0];
        v74[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v16);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (WebKit2LogWebRTC)
      {
        uint64_t v27 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v28 = *v27;
          if (v28) {
            break;
          }
          int v29 = *v27;
          atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v29, v28 | 1, memory_order_acquire, memory_order_acquire);
          if (v29 == v28)
          {
            uint64_t v69 = a2;
            uint64_t v70 = v10;
            int v30 = a3;
            uint64_t v71 = v9;
            uint64_t v31 = WTF::Logger::observers(v25);
            uint64_t v32 = *(unsigned int *)(v31 + 12);
            if (v32)
            {
              uint64_t v33 = *(uint64_t **)v31;
              uint64_t v34 = *(void *)v31 + 8 * v32;
              do
              {
                uint64_t v35 = *v33;
                *(_DWORD *)long long buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v73);
                LODWORD(v81) = 0;
                WTF::String::number(v72);
                int v83 = 0;
                WTF::String::String((WTF::String *)v84, ", reason: ");
                v84[2] = 0;
                WebKit::convertEnumerationToString(v85, v30);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v74, (uint64_t)buf, 4uLL);
                (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v35 + 16))(v35, &WebKit2LogWebRTC, 0, v74);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v74, v36);
                for (uint64_t i = 56; i != -8; i -= 16)
                {
                  uint64_t v38 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2) {
                      WTF::StringImpl::destroy(v38, v16);
                    }
                    else {
                      *(_DWORD *)v38 -= 2;
                    }
                  }
                }
                ++v33;
              }
              while (v33 != (uint64_t *)v34);
            }
            int v39 = 1;
            atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
            uint64_t v9 = v71;
            a3 = v30;
            a2 = v69;
            uint64_t v10 = v70;
            if (v39 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      long long v40 = v79;
      char v79 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v16);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
    }
    if (a3 == 5)
    {
      *(_OWORD *)long long buf = *(_OWORD *)(a2 + 32);
      uint64_t v41 = *(atomic_uint **)(a2 + 64);
      atomic_fetch_add(v41, 1u);
      char v81 = (WTF *)v41;
      char v42 = *(atomic_uint **)(a2 + 72);
      atomic_fetch_add(v42, 1u);
      char v82 = (WTF *)v42;
      LOBYTE(v83) = *(_DWORD *)(a2 + 108) != 0;
      unsigned int v43 = *(unsigned __int8 *)(a2 + 112) - 1;
      BOOL v44 = v43 < 2;
      BOOL v46 = v43 > 1 && *(_DWORD *)(a2 + 92) != 0;
      BYTE1(v83) = v46;
      BYTE2(v83) = v44;
      uint64_t v47 = *((unsigned int *)v9 + 47);
      if (v47 == *((_DWORD *)v9 + 46))
      {
        unint64_t v48 = WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9 + 176, v47 + 1, (unint64_t)buf);
        uint64_t v49 = *((void *)v9 + 22) + 40 * *((unsigned int *)v9 + 47);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v48;
        uint64_t v50 = *(void *)(v48 + 16);
        *(void *)(v48 + 16) = 0;
        *(void *)(v49 + 16) = v50;
        uint64_t v51 = *(void *)(v48 + 24);
        *(void *)(v48 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        *(void *)(v49 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v51;
        LOWORD(v51) = *(_WORD *)(v48 + 32);
        *(unsigned char *)(v49 + 3WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(unsigned char *)(v48 + 34);
        *(_WORD *)(v49 + 32) = v51;
        ++*((_DWORD *)v9 + 47);
        uint64_t v52 = v82;
        char v82 = 0;
        if (v52) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v52, v16);
        }
      }
      else
      {
        uint64_t v53 = *((void *)v9 + 22) + 40 * v47;
        *(_OWORD *)uint64_t v53 = *(_OWORD *)buf;
        uint64_t v54 = v81;
        char v81 = 0;
        *(void *)(v53 + 16) = v54;
        *(void *)(v53 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v42;
        __int16 v55 = v83;
        *(unsigned char *)(v53 + 3WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = BYTE2(v83);
        *(_WORD *)(v53 + 32) = v55;
        ++*((_DWORD *)v9 + 47);
        char v82 = 0;
      }
      uint64_t v56 = v81;
      char v81 = 0;
      if (v56) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v56, v16);
      }
    }
    uint64_t v57 = *(void *)(a2 + 2096);
    *(void *)(a2 + 2096) = 0;
    if (v57)
    {
      (*(void (**)(uint64_t, void))(*(void *)v57 + 16))(v57, 0);
      (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
    }
    else
    {
      uint64_t v58 = *(void *)(v11 + 256);
      v74[0] = *(WTF **)(a2 + 24);
      if (a3 > 6) {
        uint64_t v59 = 8;
      }
      else {
        uint64_t v59 = qword_1994F6FB8[a3];
      }
      uint64_t v60 = *(void *)(*(void *)(v11 + 32) + 1928);
      char v61 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)char v61 = 2541;
      *((void *)v61 + 1) = v60;
      *((void *)v61 + 66) = (char *)v61 + 16;
      *((void *)v61 + 67) = 512;
      *((void *)v61 + 68) = 0;
      *((void *)v61 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v61 + 69) = 0;
      IPC::Encoder::encodeHeader(v61);
      v73[0] = v61;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v61, (uint64_t *)v74);
      unsigned __int8 v62 = (void *)IPC::Encoder::grow(v61, 8uLL, 8);
      if (v63 <= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x198E186F8);
      }
      *unsigned __int8 v62 = v59;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v61, a4);
      IPC::ArgumentCoder<WebCore::MediaProducerMediaCaptureKind,void>::encode<IPC::Encoder>(v61, a5);
      buf[0] = 0;
      LOBYTE(v81) = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v58, v73, 0, (uint64_t)buf, 1);
      if ((_BYTE)v81)
      {
        uint64_t v65 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v65) {
          (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
        }
      }
      unsigned __int8 v66 = v73[0];
      v73[0] = 0;
      if (v66)
      {
        IPC::Encoder::~Encoder(v66, v64);
        WTF::fastFree(v67, v68);
      }
      WebKit::UserMediaPermissionRequestManagerProxy::processNextUserMediaRequestIfNeeded(v9);
    }
  }
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 - 8));
  }
}

void WebKit::UserMediaPermissionRequestManagerProxy::processNextUserMediaRequestIfNeeded(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2 == *((void *)this + 4))
  {
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v3)
    {
      uint64_t v4 = *(const void **)(v3 + 8);
      CFRelease(v4);
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 5);
    uint64_t v6 = *(void *)(v5 + 8 * v2);
    *(void *)(v5 + 8 * v2) = 0;
    uint64_t v10 = v6;
    uint64_t v7 = *((void *)this + 5);
    uint64_t v8 = *(void *)(v7 + 8 * v2);
    *(void *)(v7 + 8 * v2) = 0;
    if (v8)
    {
      CFRelease(*(CFTypeRef *)(v8 + 8));
      uint64_t v2 = *((void *)this + 3);
    }
    if (v2 == *((unsigned int *)this + 12) - 1) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v2 + 1;
    }
    *((void *)this + 3) = v9;
    WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest((uint64_t)this, &v10);
    if (v10) {
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
  }
}

void WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestManagerProxy *this, WebKit::UserMediaPermissionRequestProxy *a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*((void *)this + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  if (!*(unsigned char *)(v5 + 801) && *(unsigned char *)(v5 + 800))
  {
    uint64_t v6 = *(void *)(*((void *)this + 8) + 8);
    if (v6) {
      uint64_t v7 = (WebKit::WebPageProxy *)(v6 - 16);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = WebKit::WebPageProxy::logger(v7);
    uint64_t v9 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)this + 24))(this);
    uint64_t v10 = *((void *)this + 31);
    v69[0] = v9;
    v69[1] = v11;
    v69[2] = "grantRequest";
    v69[3] = v10;
    uint64_t v12 = (WTF::String *)*((void *)a2 + 3);
    WebKit::UserMediaPermissionRequestProxy::videoDevice((WebKit::UserMediaPermissionRequestProxy *)v66, (uint64_t)a2);
    char v13 = (WTF::StringImpl **)WebCore::CaptureDevice::label((WebCore::CaptureDevice *)v66);
    WebKit::UserMediaPermissionRequestProxy::audioDevice((WebKit::UserMediaPermissionRequestProxy *)v63, (uint64_t)a2);
    unsigned __int8 v62 = (WTF::StringImpl **)WebCore::CaptureDevice::label((WebCore::CaptureDevice *)v63);
    if (!*(unsigned char *)(v8 + 12))
    {
LABEL_74:
      uint64_t v41 = v65;
      uint64_t v65 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, v14);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
      char v42 = v64;
      unint64_t v64 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2) {
          WTF::StringImpl::destroy(v42, v14);
        }
        else {
          *(_DWORD *)v42 -= 2;
        }
      }
      unsigned int v43 = v63[0];
      v63[0] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, v14);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
      BOOL v44 = v68;
      uint64_t v68 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, v14);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
      uint64_t v45 = v67;
      uint64_t v67 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, v14);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
      BOOL v46 = v66[0];
      v66[0] = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v14);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
      uint64_t v47 = *((void *)a2 + 262);
      *((void *)a2 + 262) = 0;
      if (v47)
      {
        unint64_t v48 = (void *)WTF::fastMalloc((WTF *)0x10);
        *unint64_t v48 = &unk_1EE9D7A68;
        v48[1] = v47;
        *(void *)long long buf = v48;
        WebKit::WebPageProxy::willStartCapture(v5, (uint64_t)a2, (uint64_t *)buf);
        uint64_t v49 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v49) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
        uint64_t v50 = *((unsigned int *)this + 41);
        if (v50 == *((_DWORD *)this + 40))
        {
          WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::UserMediaPermissionRequestProxy&>((uint64_t)this + 152, (uint64_t)a2);
        }
        else
        {
          uint64_t v59 = *((void *)this + 19);
          CFRetain(*((CFTypeRef *)a2 + 1));
          *(void *)(v59 + 8 * v5WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = a2;
          ++*((_DWORD *)this + 41);
        }
        *(_OWORD *)unsigned __int8 v66 = *((_OWORD *)a2 + 3);
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::add((uint64_t)buf, (uint64_t *)this + 35, (uint64_t *)v66);
      }
      else
      {
        uint64_t v51 = (atomic_uint *)*((void *)a2 + 8);
        atomic_fetch_add(v51, 1u);
        uint64_t v52 = (atomic_uint *)*((void *)a2 + 9);
        atomic_fetch_add(v52, 1u);
        uint64_t v53 = (atomic_uint *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(*(WebKit::WebsiteDataStore **)(v5 + 312));
        atomic_fetch_add(v53, 1u);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
        uint64_t v54 = (atomic_uint *)*((void *)this + 1);
        if (v54) {
          atomic_fetch_add(v54, 1u);
        }
        CFRetain(*((CFTypeRef *)a2 + 1));
        __int16 v55 = (void *)WTF::fastMalloc((WTF *)0x18);
        *__int16 v55 = &unk_1EE9D7A90;
        v55[1] = v54;
        v55[2] = a2;
        *(void *)long long buf = v55;
        WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin((uint64_t)v53, (uint64_t)v51, (uint64_t)v52, (uint64_t *)buf);
        uint64_t v56 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
        WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref((unsigned int *)v53);
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v52, v57);
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v51, v58);
      }
      goto LABEL_5;
    }
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v74, (WTF::Logger::LogSiteIdentifier *)v69);
    WTF::String::number(v12);
    WTF::String::String((WTF::String *)&v72, ", video: ");
    uint64_t v15 = *v13;
    if (*v13) {
      *(_DWORD *)v15 += 2;
    }
    WTF::String::String((WTF::String *)&v71, ", audio: ");
    uint64_t v16 = *v62;
    if (*v62) {
      *(_DWORD *)v16 += 2;
    }
    v70[0] = v73;
    char v79 = v72;
    *(void *)long long buf = v74;
    uint64_t v77 = v71;
    __int16 v78 = v15;
    uint64_t v76 = v16;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v70, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, &v75);
    if (!v75)
    {
      __break(0xC471u);
      return;
    }
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v17);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v18 = v71;
    uint64_t v71 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v17);
        if (!v15)
        {
LABEL_31:
          int v19 = v72;
          uint64_t v72 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v17);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
          uint64_t v20 = v73;
          uint64_t v73 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v17);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          uint64_t v21 = v74;
          uint64_t v74 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v17);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          char v22 = qword_1EB358820;
          uint64_t v23 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
          if (v23)
          {
            WTF::String::utf8();
            uint64_t v24 = v70[0] ? (char *)v70[0] + 16 : 0;
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v24;
            _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            uint64_t v23 = v70[0];
            v70[0] = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 1) {
                uint64_t v23 = (WTF *)WTF::fastFree(v23, v14);
              }
              else {
                --*(_DWORD *)v23;
              }
            }
          }
          if (WebKit2LogWebRTC)
          {
            uint64_t v25 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v26 = *v25;
              if (v26) {
                break;
              }
              int v27 = *v25;
              atomic_compare_exchange_strong_explicit(v25, (unsigned __int8 *)&v27, v26 | 1, memory_order_acquire, memory_order_acquire);
              if (v27 == v26)
              {
                char v61 = v13;
                uint64_t v60 = v4;
                int v28 = v12;
                uint64_t v29 = WTF::Logger::observers(v23);
                uint64_t v30 = *(unsigned int *)(v29 + 12);
                if (v30)
                {
                  uint64_t v31 = *(uint64_t **)v29;
                  uint64_t v32 = *(void *)v29 + 8 * v30;
                  do
                  {
                    uint64_t v33 = *v31;
                    *(_DWORD *)long long buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v69);
                    int v81 = 0;
                    WTF::String::number(v28);
                    int v82 = 0;
                    WTF::String::String((WTF::String *)v83, ", video: ");
                    v83[2] = 0;
                    uint64_t v34 = *v61;
                    if (*v61) {
                      *(_DWORD *)v34 += 2;
                    }
                    char v84 = v34;
                    int v85 = 0;
                    WTF::String::String((WTF::String *)v86, ", audio: ");
                    v86[2] = 0;
                    uint64_t v35 = *v62;
                    if (*v62) {
                      *(_DWORD *)v35 += 2;
                    }
                    double v87 = v35;
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v70, (uint64_t)buf, 6uLL);
                    (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v33 + 16))(v33, &WebKit2LogWebRTC, 0, v70);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70, v36);
                    for (uint64_t i = 88; i != -8; i -= 16)
                    {
                      uint64_t v38 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2) {
                          WTF::StringImpl::destroy(v38, v14);
                        }
                        else {
                          *(_DWORD *)v38 -= 2;
                        }
                      }
                    }
                    ++v31;
                  }
                  while (v31 != (uint64_t *)v32);
                }
                int v39 = 1;
                atomic_compare_exchange_strong_explicit(v25, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
                uint64_t v4 = v60;
                if (v39 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          long long v40 = v75;
          uint64_t v75 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v14);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
          goto LABEL_74;
        }
LABEL_28:
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v17);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
        goto LABEL_31;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
LABEL_5:
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
}

double WebKit::UserMediaPermissionRequestProxy::videoDevice(WebKit::UserMediaPermissionRequestProxy *this, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 92))
  {
    uint64_t v2 = *(void *)(a2 + 80);
    uint64_t v3 = *(_DWORD **)v2;
    if (*(void *)v2) {
      *v3 += 2;
    }
    *(void *)this = v3;
    *((unsigned char *)this + 8) = *(unsigned char *)(v2 + 8);
    uint64_t v4 = *(_DWORD **)(v2 + 16);
    if (v4) {
      *v4 += 2;
    }
    *((void *)this + 2) = v4;
    uint64_t v5 = *(_DWORD **)(v2 + 24);
    if (v5) {
      *v5 += 2;
    }
    *((void *)this + 3) = v5;
    *((_DWORD *)this + 8) = *(_DWORD *)(v2 + 32);
  }
  else
  {
    *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    double result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

double WebKit::UserMediaPermissionRequestProxy::audioDevice(WebKit::UserMediaPermissionRequestProxy *this, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 108))
  {
    uint64_t v2 = *(void *)(a2 + 96);
    uint64_t v3 = *(_DWORD **)v2;
    if (*(void *)v2) {
      *v3 += 2;
    }
    *(void *)this = v3;
    *((unsigned char *)this + 8) = *(unsigned char *)(v2 + 8);
    uint64_t v4 = *(_DWORD **)(v2 + 16);
    if (v4) {
      *v4 += 2;
    }
    *((void *)this + 2) = v4;
    uint64_t v5 = *(_DWORD **)(v2 + 24);
    if (v5) {
      *v5 += 2;
    }
    *((void *)this + 3) = v5;
    *((_DWORD *)this + 8) = *(_DWORD *)(v2 + 32);
  }
  else
  {
    *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    double result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

WTF::StringImpl *WebKit::UserMediaPermissionRequestManagerProxy::didCommitLoadForFrame(uint64_t *a1, WTF::String *a2, uint64_t a3)
{
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v5 = *(void *)(a1[8] + 8);
  if (v5) {
    uint64_t v6 = (WebKit::WebPageProxy *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = WebKit::WebPageProxy::logger(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  uint64_t v9 = a1[31];
  v15[0] = v8;
  v15[1] = v10;
  v15[2] = "didCommitLoadForFrame";
  v15[3] = v9;
  uint64_t v14 = a2;
  if (*(unsigned char *)(v7 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v15, &v14);
  }
  double result = (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1 + 21, v16);
  uint64_t v12 = a1[21];
  if (v12)
  {
    char v13 = (WTF::StringImpl *)(v12 + 24 * *(unsigned int *)(v12 - 4));
    if (v13 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    char v13 = 0;
  }
  if (v13 != result) {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(a1 + 21, result);
  }
  return result;
}

void WebKit::UserMediaPermissionRequestManagerProxy::resetAccess(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  if (v4) {
    uint64_t v5 = (WebKit::WebPageProxy *)(v4 - 16);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = WebKit::WebPageProxy::logger(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v9 = *(void *)(a1 + 248);
  v56[0] = v7;
  v56[1] = v8;
  v56[2] = "resetAccess";
  v56[3] = v9;
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v10 = *(WTF::String **)a2;
  }
  else {
    uint64_t v10 = 0;
  }
  __int16 v55 = v10;
  if (*(unsigned char *)(v6 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v56, &v55);
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    CFRetain(*(CFTypeRef *)(v11 + 8));
    if (!*(unsigned char *)(a2 + 16)
      || (uint64_t v12 = *(void *)(a1 + 16), *(void *)(v12 + 48) == *(void *)a2)
      && *(void *)(v12 + 56) == *(void *)(a2 + 8))
    {
      long long v53 = *(_OWORD *)(a1 + 24);
      uint64_t v13 = *(void *)(a1 + 40);
      int v14 = *(_DWORD *)(a1 + 48);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WebKit::UserMediaPermissionRequestProxy::deny((void *)v11, 6);
      unint64_t v17 = *(void *)(a1 + 24);
      unint64_t v16 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v53;
      int v18 = *(WTF **)(a1 + 40);
      *(void *)(a1 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v13;
      uint64_t v19 = *(unsigned int *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = v14;
      if (v17 <= v16)
      {
        if (v17 != v16)
        {
          int v26 = (uint64_t *)((char *)v18 + 8 * v17);
          uint64_t v27 = 8 * v16 - 8 * v17;
          do
          {
            uint64_t v28 = *v26;
            *int v26 = 0;
            if (v28) {
              CFRelease(*(CFTypeRef *)(v28 + 8));
            }
            ++v26;
            v27 -= 8;
          }
          while (v27);
        }
      }
      else
      {
        if (v16)
        {
          uint64_t v20 = 8 * v16;
          uint64_t v21 = v18;
          do
          {
            uint64_t v22 = *(void *)v21;
            *(void *)uint64_t v21 = 0;
            if (v22) {
              CFRelease(*(CFTypeRef *)(v22 + 8));
            }
            uint64_t v21 = (WTF *)((char *)v21 + 8);
            v20 -= 8;
          }
          while (v20);
        }
        if (v17 != v19)
        {
          uint64_t v23 = (uint64_t *)((char *)v18 + 8 * v17);
          uint64_t v24 = 8 * v19 - 8 * v17;
          do
          {
            uint64_t v25 = *v23;
            *uint64_t v23 = 0;
            if (v25) {
              CFRelease(*(CFTypeRef *)(v25 + 8));
            }
            ++v23;
            v24 -= 8;
          }
          while (v24);
        }
      }
      if (v18) {
        WTF::fastFree(v18, v15);
      }
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (!*(unsigned char *)(a2 + 16))
  {
    WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 152), v8);
    uint64_t v42 = *(void *)(a1 + 280);
    if (v42)
    {
      *(void *)(a1 + 28WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      WTF::fastFree((WTF *)(v42 - 16), v41);
    }
    uint64_t v43 = *(void *)(a1 + 168);
    if (v43)
    {
      *(void *)(a1 + 168) = 0;
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v43, (WTF::StringImpl *)v41);
    }
    goto LABEL_74;
  }
  unint64_t v29 = *(void *)(a1 + 152);
  uint64_t v30 = *(unsigned int *)(a1 + 164);
  uint64_t v31 = (char *)(v29 + 8 * v30);
  int v32 = 0;
  if (v30)
  {
    uint64_t v54 = a2;
    uint64_t v33 = *(WTF::String **)a2;
    uint64_t v34 = *(void *)(a2 + 8);
    uint64_t v35 = *(void *)(a1 + 152);
    URL v36 = (char *)(v29 + 8 * v30);
    uint64_t v37 = v36;
    while (1)
    {
      uint64_t v38 = *(void *)v29;
      if (*(WTF::String **)(*(void *)v29 + 32) != v33 || *(void *)(*(void *)v29 + 40) != v34) {
        goto LABEL_49;
      }
      long long v40 = (char *)v29;
      if (v37 != (char *)(*(void *)(a1 + 152) + 8 * *(unsigned int *)(a1 + 164)))
      {
        if ((char *)v29 != v36)
        {
          memmove(v37, v36, v35 - (void)v36);
          long long v40 = &v37[v35 - (void)v36];
          uint64_t v38 = *(void *)v29;
          *(void *)unint64_t v29 = 0;
          URL v36 = (char *)(v29 + 8);
          if (!v38) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
        long long v40 = v37;
      }
      *(void *)unint64_t v29 = 0;
      URL v36 = (char *)(v29 + 8);
LABEL_47:
      CFRelease(*(CFTypeRef *)(v38 + 8));
LABEL_48:
      ++v32;
      uint64_t v37 = v40;
LABEL_49:
      v29 += 8;
      v35 += 8;
      if (v29 >= (unint64_t)v31)
      {
        unint64_t v29 = *(void *)(a1 + 152);
        LODWORD(v3WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_DWORD *)(a1 + 164);
        uint64_t v31 = v37;
        a2 = v54;
        goto LABEL_56;
      }
    }
  }
  URL v36 = (char *)(v29 + 8 * v30);
LABEL_56:
  BOOL v44 = (char *)(v29 + 8 * v30);
  if (v36 != v44)
  {
    memmove(v31, v36, v44 - v36);
    LODWORD(v3WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_DWORD *)(a1 + 164);
  }
  *(_DWORD *)(a1 + 16WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v30 - v32;
  if (!*(unsigned char *)(a2 + 16))
  {
LABEL_80:
    __break(1u);
    return;
  }
  uint64_t v45 = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)(a1 + 280), (void *)a2);
  if (*(void *)(a1 + 280))
  {
    uint64_t v46 = *(void *)(a1 + 280) + 16 * *(unsigned int *)(*(void *)(a1 + 280) - 4);
    if ((void *)v46 == v45) {
      goto LABEL_66;
    }
  }
  else
  {
    if (!v45) {
      goto LABEL_66;
    }
    uint64_t v46 = 0;
  }
  if ((void *)v46 != v45) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove((uint64_t *)(a1 + 280), v45);
  }
LABEL_66:
  if (!*(unsigned char *)(a2 + 16)) {
    goto LABEL_80;
  }
  uint64_t v47 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a1 + 168), (void *)a2);
  uint64_t v41 = v47;
  uint64_t v48 = *(void *)(a1 + 168);
  if (v48)
  {
    uint64_t v49 = (uint64_t *)(v48 + 24 * *(unsigned int *)(v48 - 4));
    if (v49 == v47) {
      goto LABEL_74;
    }
LABEL_72:
    if (v49 != v47) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove((uint64_t *)(a1 + 168), (WTF::StringImpl *)v47);
    }
    goto LABEL_74;
  }
  if (v47)
  {
    uint64_t v49 = 0;
    goto LABEL_72;
  }
LABEL_74:
  WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 136), v41);
  if (*(_DWORD *)(a1 + 184))
  {
    unsigned int v51 = *(_DWORD *)(a1 + 188);
    if (v51)
    {
      WTF::VectorDestructor<true,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::destruct(*(void *)(a1 + 176), (WTF::StringImpl *)(*(void *)(a1 + 176) + 40 * v51));
      *(_DWORD *)(a1 + 188) = 0;
    }
    uint64_t v52 = *(WTF **)(a1 + 176);
    if (v52)
    {
      *(void *)(a1 + 176) = 0;
      *(_DWORD *)(a1 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      WTF::fastFree(v52, v50);
    }
  }
  *(unsigned char *)(a1 + 256) = 0;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::deny(void *a1, int a2)
{
  double result = (WebKit::UserMediaPermissionRequestManagerProxy *)a1[2];
  if (result)
  {
    uint64_t v6 = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(result, (uint64_t)a1, a2, (uint64_t *)&v6, 0);
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(void *))(*a1 + 40))(a1);
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::searchForGrantedRequest(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::SecurityOrigin *a4, const WebCore::SecurityOrigin *a5, char a6, int a7)
{
  uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8);
  if (v14) {
    uint64_t v15 = v14 - 16;
  }
  else {
    uint64_t v15 = 0;
  }
  CFRetain(*(CFTypeRef *)(v15 + 8));
  int v16 = *(unsigned char *)(*(void *)(v15 + 32) + 904) & 0x1E;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 - 8));
  }
  if (v16) {
    return 0;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 164);
  if (!v17) {
    return 0;
  }
  uint64_t v31 = a3;
  int v32 = a7;
  int v18 = *(uint64_t **)(a1 + 152);
  uint64_t v19 = 8 * v17;
  while (1)
  {
    uint64_t v20 = *v18;
    CFRetain(*(CFTypeRef *)(*v18 + 8));
    if (*(unsigned __int8 *)(v20 + 112) - 1 < 2) {
      goto LABEL_26;
    }
    uint64_t v21 = *(atomic_uint **)(v20 + 64);
    atomic_fetch_add(v21, 1u);
    int isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort((WebCore::SecurityOrigin *)v21, a4);
    int v24 = isSameSchemeHostPort;
    if (v21)
    {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v23);
      if (!v24) {
        goto LABEL_26;
      }
    }
    else if (!isSameSchemeHostPort)
    {
      goto LABEL_26;
    }
    uint64_t v25 = *(atomic_uint **)(v20 + 72);
    atomic_fetch_add(v25, 1u);
    int v26 = WebCore::SecurityOrigin::isSameSchemeHostPort((WebCore::SecurityOrigin *)v25, a5);
    int v28 = v26;
    if (v25) {
      break;
    }
    if (v26) {
      goto LABEL_14;
    }
LABEL_26:
    CFRelease(*(CFTypeRef *)(v20 + 8));
    ++v18;
    v19 -= 8;
    if (!v19) {
      return 0;
    }
  }
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v25, v27);
  if (!v28) {
    goto LABEL_26;
  }
LABEL_14:
  if (a2 && (*(void *)(v20 + 48) != a2 || *(void *)(v20 + 56) != v31)) {
    goto LABEL_26;
  }
  int v29 = *(unsigned __int8 *)(v20 + 112) - 1 >= 2
      ? (*(_DWORD *)(v20 + 92) == 0) & v32
      : v32;
  a6 &= *(_DWORD *)(v20 + 108) == 0;
  int v32 = v29;
  if (v29 & 1) != 0 || (a6) {
    goto LABEL_26;
  }
  CFRelease(*(CFTypeRef *)(v20 + 8));
  return v20;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::wasRequestDenied(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebKit::UserMediaPermissionRequestProxy *a2, void *a3, char a4, char a5, char a6)
{
  if (!a2) {
    return 0;
  }
  char v11 = a4 & a5;
  uint64_t v12 = 40 * a2;
  while (1)
  {
    if (!WebKit::isMatchingDeniedRequest(a3, this)) {
      goto LABEL_14;
    }
    if (*((unsigned char *)this + 34) && (a6 & 1) != 0) {
      return 1;
    }
    if (*((unsigned char *)this + 32))
    {
      if (*((unsigned char *)this + 33))
      {
        if (v11) {
          return 1;
        }
      }
      else if (a4)
      {
        return 1;
      }
    }
    else if (*((unsigned char *)this + 33) && (a5 & 1) != 0)
    {
      return 1;
    }
LABEL_14:
    this = (WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 40);
    v12 -= 40;
    if (!v12) {
      return 0;
    }
  }
}

uint64_t WebKit::isMatchingDeniedRequest(void *a1, void *a2)
{
  if (*a2 != a1[4] || a2[1] != a1[5]) {
    return 0;
  }
  uint64_t v6 = (atomic_uint *)a2[2];
  atomic_fetch_add(v6, 1u);
  uint64_t v7 = (atomic_uint *)a1[8];
  atomic_fetch_add(v7, 1u);
  if (WebCore::SecurityOrigin::isSameSchemeHostPort((WebCore::SecurityOrigin *)v6, (const WebCore::SecurityOrigin *)v7))
  {
    uint64_t v9 = (atomic_uint *)a2[3];
    atomic_fetch_add(v9, 1u);
    uint64_t v10 = (atomic_uint *)a1[9];
    atomic_fetch_add(v10, 1u);
    uint64_t isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort((WebCore::SecurityOrigin *)v9, (const WebCore::SecurityOrigin *)v10);
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v11);
    if (v9) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v9, v8);
    }
  }
  else
  {
    uint64_t isSameSchemeHostPort = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v7, v8);
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v6, v12);
  }
  return isSameSchemeHostPort;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::scheduleNextRejection(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t result = WTF::RunLoop::TimerBase::isActive((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 72));
  if ((result & 1) == 0)
  {
    WTF::cryptographicallyRandomUnitInterval((WTF *)result);
    return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::getRequestAction(WebKit::UserMediaPermissionRequestManagerProxy **this, const WebKit::UserMediaPermissionRequestProxy *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 112);
  if (v4 == 1)
  {
    uint64_t v5 = 2;
    if (!*((unsigned char *)a2 + 2056))
    {
      if (WebKit::UserMediaPermissionRequestManagerProxy::wasRequestDenied(this[22], (const WebKit::UserMediaPermissionRequestProxy *)*((unsigned int *)this + 47), a2, *((_DWORD *)a2 + 27) != 0, 0, 1))return 0; {
      else
      }
        return 2;
    }
    return v5;
  }
  BOOL v7 = v4 != 2 && *((_DWORD *)a2 + 23) != 0;
  int v8 = *((_DWORD *)a2 + 27);
  if (*((unsigned char *)a2 + 2056))
  {
    if (v4 == 2) {
      return 2;
    }
    goto LABEL_20;
  }
  int v9 = WebKit::UserMediaPermissionRequestManagerProxy::wasRequestDenied(this[22], (const WebKit::UserMediaPermissionRequestProxy *)*((unsigned int *)this + 47), a2, v8 != 0, v7, v4 == 2);
  if (v9) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 2;
  }
  if (v4 != 2 && (v9 & 1) == 0)
  {
LABEL_20:
    char v10 = v8 != 0;
    uint64_t v11 = *((void *)a2 + 6);
    uint64_t v12 = *((void *)a2 + 7);
    uint64_t v13 = (atomic_uint *)*((void *)a2 + 8);
    atomic_fetch_add(v13, 1u);
    uint64_t v14 = (atomic_uint *)*((void *)a2 + 9);
    atomic_fetch_add(v14, 1u);
    if (WebKit::UserMediaPermissionRequestManagerProxy::searchForGrantedRequest((uint64_t)this, v11, v12, (const WebCore::SecurityOrigin *)v13, (const WebCore::SecurityOrigin *)v14, v10, v7))
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v5 = 2;
    }
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v14, v15);
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v13, v16);
  }
  return v5;
}

void WebKit::UserMediaPermissionRequestManagerProxy::requestUserMediaPermissionForFrame(uint64_t *a1, WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  v66[1] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(a1[8] + 8);
  if (v14) {
    uint64_t v15 = v14 - 16;
  }
  else {
    uint64_t v15 = 0;
  }
  CFRetain(*(CFTypeRef *)(v15 + 8));
  if (!*(unsigned char *)(v15 + 801) && *(unsigned char *)(v15 + 800))
  {
    uint64_t v16 = *(void *)(a1[8] + 8);
    if (v16) {
      uint64_t v17 = (WebKit::WebPageProxy *)(v16 - 16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = WebKit::WebPageProxy::logger(v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    uint64_t v20 = a1[31];
    *(void *)long long buf = v19;
    *(void *)&buf[8] = v21;
    uint64_t v65 = "requestUserMediaPermissionForFrame";
    v66[0] = v20;
    __int16 v55 = a2;
    if (*(unsigned char *)(v18 + 12)) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)buf, &v55);
    }
    uint64_t v22 = *(void *)(v15 + 328);
    uint64_t v23 = *(void *)(v22 + 272);
    uint64_t v24 = *(void *)(v22 + 280);
    *(_OWORD *)long long buf = 0uLL;
    __int16 v55 = 0;
    uint64_t v56 = 0;
    v60[0] = 0;
    uint64_t v25 = API::Object::newObject(0x840uLL, 107);
    uint64_t v26 = WebKit::UserMediaPermissionRequestProxy::UserMediaPermissionRequestProxy(v25, (uint64_t)a1, (uint64_t)a2, v23, v24, a3, a4, a5, a6, (uint64_t *)buf, (uint64_t *)&v55, a7, (uint64_t *)v60);
    *(void *)uint64_t v26 = &unk_1EE9D5378;
    *(unsigned char *)(v26 + 210WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    uint64_t v59 = v26;
    if (v60[0]) {
      (*(void (**)(WTF *))(*(void *)v60[0] + 8))(v60[0]);
    }
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v27);
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v28);
    if (a1[2])
    {
      WTF::Deque<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul>::append(a1 + 3, &v59);
    }
    else
    {
      {
        if (!(_BYTE)word_1E93CFBF8)
        {
          uint64_t v29 = *(void *)(a1[8] + 8);
          if (v29) {
            uint64_t v30 = (WebKit::WebPageProxy *)(v29 - 16);
          }
          else {
            uint64_t v30 = 0;
          }
          uint64_t v31 = WebKit::WebPageProxy::logger(v30);
          int v32 = (WTF::String *)(*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
          uint64_t v33 = a1[31];
          __int16 v55 = v32;
          uint64_t v56 = v34;
          uint64_t v57 = "requestUserMediaPermissionForFrame";
          uint64_t v58 = v33;
          if (*(unsigned char *)(v31 + 12))
          {
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v62, (WTF::Logger::LogSiteIdentifier *)&v55);
            WTF::String::String((WTF::String *)&v61, "capture disabled");
            *(void *)long long buf = v62;
            v60[0] = v61;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v60, &v63);
            if (!v63)
            {
              __break(0xC471u);
              return;
            }
            URL v36 = v61;
            char v61 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2) {
                WTF::StringImpl::destroy(v36, v35);
              }
              else {
                *(_DWORD *)v36 -= 2;
              }
            }
            uint64_t v37 = v62;
            unsigned __int8 v62 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2) {
                WTF::StringImpl::destroy(v37, v35);
              }
              else {
                *(_DWORD *)v37 -= 2;
              }
            }
            uint64_t v38 = qword_1EB358820;
            int v39 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
            if (v39)
            {
              WTF::String::utf8();
              uint64_t v41 = v60[0] ? (char *)v60[0] + 16 : 0;
              *(_DWORD *)long long buf = 136446210;
              *(void *)&uint8_t buf[4] = v41;
              _os_log_impl(&dword_1985F2000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              int v39 = v60[0];
              v60[0] = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 1) {
                  int v39 = (WTF *)WTF::fastFree(v39, v40);
                }
                else {
                  --*(_DWORD *)v39;
                }
              }
            }
            if (WebKit2LogWebRTC)
            {
              uint64_t v42 = (atomic_uchar *)MEMORY[0x1E4F30998];
              while (1)
              {
                int v43 = *v42;
                if (v43) {
                  break;
                }
                int v44 = *v42;
                atomic_compare_exchange_strong_explicit(v42, (unsigned __int8 *)&v44, v43 | 1, memory_order_acquire, memory_order_acquire);
                if (v44 == v43)
                {
                  uint64_t v45 = WTF::Logger::observers(v39);
                  uint64_t v46 = *(unsigned int *)(v45 + 12);
                  if (v46)
                  {
                    uint64_t v47 = *(uint64_t **)v45;
                    uint64_t v48 = *(void *)v45 + 8 * v46;
                    do
                    {
                      uint64_t v49 = *v47;
                      *(_DWORD *)long long buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v55);
                      LODWORD(v65) = 0;
                      WTF::String::String((WTF::String *)v66, "capture disabled");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v60, (uint64_t)buf, 2uLL);
                      (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v49 + 16))(v49, &WebKit2LogWebRTC, 0, v60);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v50);
                      for (uint64_t i = 24; i != -8; i -= 16)
                      {
                        uint64_t v52 = *(WTF::StringImpl **)&buf[i];
                        *(void *)&buf[i] = 0;
                        if (v52)
                        {
                          if (*(_DWORD *)v52 == 2) {
                            WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v40);
                          }
                          else {
                            *(_DWORD *)v52 -= 2;
                          }
                        }
                      }
                      ++v47;
                    }
                    while (v47 != (uint64_t *)v48);
                  }
                  int v53 = 1;
                  atomic_compare_exchange_strong_explicit(v42, (unsigned __int8 *)&v53, 0, memory_order_release, memory_order_relaxed);
                  if (v53 != 1) {
                    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                  }
                  break;
                }
              }
            }
            uint64_t v54 = v63;
            unint64_t v63 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2) {
                WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v40);
              }
              else {
                *(_DWORD *)v54 -= 2;
              }
            }
          }
          WTF::Deque<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul>::append(a1 + 13, &v59);
          WebKit::UserMediaPermissionRequestManagerProxy::scheduleNextRejection((WebKit::UserMediaPermissionRequestManagerProxy *)a1);
          goto LABEL_62;
        }
      }
      else
      {
        qword_1E93CFBE0 = 0;
        unk_1E93CFBE8 = 0;
        WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&unk_1EE9D78F0;
        qword_1E93CFBF0 = 0;
        word_1E93CFBF8 = 1;
      }
      WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest((uint64_t)a1, &v59);
    }
LABEL_62:
    if (v59) {
      CFRelease(*(CFTypeRef *)(v59 + 8));
    }
  }
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 - 8));
  }
}

uint64_t *WTF::Deque<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul>::append(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (!*result)
  {
    uint64_t v5 = *((unsigned int *)result + 6);
    if (v4)
    {
      if (v4 != v5 - 1) {
        goto LABEL_20;
      }
    }
    else if (v5)
    {
      uint64_t v4 = 0;
      goto LABEL_20;
    }
LABEL_9:
    uint64_t v6 = v5;
    unint64_t v7 = ((unint64_t)v5 >> 2) + v5;
    if (v7 <= 0xF) {
      unint64_t v7 = 15;
    }
    if (v7 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      return result;
    }
    int v8 = (char *)result[2];
    int v9 = v7 + 1;
    char v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
    *((_DWORD *)v3 + 6) = v9;
    v3[2] = (uint64_t)v10;
    unint64_t v11 = v3[1];
    if (*v3 <= v11)
    {
      uint64_t result = (uint64_t *)memcpy(&v10[8 * *v3], &v8[8 * *v3], 8 * v11 - 8 * *v3);
      if (!v8)
      {
LABEL_19:
        uint64_t v4 = v3[1];
        goto LABEL_20;
      }
    }
    else
    {
      memcpy(v10, v8, 8 * v11);
      uint64_t v12 = *v3 - v6 + *((unsigned int *)v3 + 6);
      uint64_t result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v12), &v8[8 * *v3], 8 * v6 - 8 * *v3);
      uint64_t *v3 = v12;
      if (!v8) {
        goto LABEL_19;
      }
    }
    if ((char *)v3[2] == v8)
    {
      v3[2] = 0;
      *((_DWORD *)v3 + 6) = 0;
    }
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)v8, v13);
    goto LABEL_19;
  }
  if (v4 + 1 == *result)
  {
    LODWORD(v5) = *((_DWORD *)result + 6);
    goto LABEL_9;
  }
LABEL_20:
  uint64_t v14 = v3[2];
  uint64_t v15 = *a2;
  *a2 = 0;
  *(void *)(v14 + 8 * vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v15;
  if (v4 == *((unsigned int *)v3 + 6) - 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v4 + 1;
  }
  v3[1] = v16;
  return result;
}

WTF *WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  if (v4)
  {
    CFRelease(*(CFTypeRef *)(v4 + 8));
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v5 = *(atomic_uint **)(v3 + 64);
  atomic_fetch_add(v5, 1u);
  uint64_t v6 = *(atomic_uint **)(*(void *)(a1 + 16) + 72);
  atomic_fetch_add(v6, 1u);
  uint64_t v16 = (WTF *)v6;
  uint64_t v17 = (WTF *)v5;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(v7 + 56);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  char v10 = *(atomic_uint **)(a1 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11) {
    CFRetain(*(CFTypeRef *)(v11 + 8));
  }
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v12 = &unk_1EE9D7B08;
  v12[1] = a1;
  void v12[2] = v10;
  v12[3] = v11;
  uint64_t v15 = v12;
  WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(a1, v8, v9, (uint64_t *)&v17, (uint64_t *)&v16, (uint64_t *)&v15);
  if (v15) {
    (*(void (**)(void *))(*v15 + 8))(v15);
  }
  if (v16) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v16, v13);
  }
  uint64_t result = v17;
  if (v17)
  {
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v13);
  }
  return result;
}

WTF::StringImpl *WebKit::UserMediaPermissionRequestManagerProxy::ephemeralDeviceHashSaltForFrame(WTF::StringImpl **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v19[0] = a3;
  v19[1] = a4;
  uint64_t v6 = (uint64_t *)(a2 + 168);
  uint64_t result = (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)(a2 + 168), v19);
  uint64_t v8 = *(WTF::StringImpl **)(a2 + 168);
  if (v8) {
    uint64_t v8 = (WTF::StringImpl *)((char *)v8 + 24 * *((unsigned int *)v8 - 1));
  }
  if (v8 == result)
  {
    WTF::cryptographicallyRandomValues();
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    char v18 = 1;
    WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v15);
    for (uint64_t i = 0; i != 24; i += 8)
    {
      WTF::Internal::appendHex();
      int v22 = v11;
      uint64_t v20 = v21;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v15, (uint64_t)&v20);
    }
    uint64_t v12 = v15;
    if (v15
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v15),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v15),
          (uint64_t v12 = v15) != 0))
    {
      *(_DWORD *)v12 += 2;
    }
    *a1 = v12;
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(v6, (WTF::StringImpl *)v19, a1, (uint64_t)v21);
    if (!(_BYTE)v22)
    {
      __break(0xC471u);
      JUMPOUT(0x198E1A4F8);
    }
    uint64_t v14 = v16;
    uint64_t v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t result = v15;
    uint64_t v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    uint64_t v9 = (WTF::StringImpl *)*((void *)result + 2);
    if (v9) {
      *(_DWORD *)v9 += 2;
    }
    *a1 = v9;
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  unsigned int v10 = result & v8;
  int v11 = (void *)(v7 + 24 * (result & v8));
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (*(_OWORD *)v11 != 0)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    do
    {
      if (v13 == *(void *)a2 && v12 == *((void *)a2 + 1))
      {
        uint64_t v22 = *a1;
        if (*a1) {
          unsigned int v23 = *(_DWORD *)(v22 - 4);
        }
        else {
          unsigned int v23 = 0;
        }
        char v25 = 0;
        uint64_t v24 = v22 + 24 * v23;
        goto LABEL_30;
      }
      if (v12 == -1) {
        uint64_t v14 = v11;
      }
      unsigned int v10 = (v10 + v15) & v8;
      int v11 = (void *)(v7 + 24 * v10);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      ++v15;
    }
    while (*(_OWORD *)v11 != 0);
    if (v14)
    {
      *uint64_t v14 = 0;
      v14[1] = 0;
      void v14[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      int v11 = v14;
    }
  }
  uint64_t result = WTF::HashMapTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::translate<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>> WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineAdd<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String&>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String&)::{lambda(void)#1}>((uint64_t)v11, a2, &v26);
  uint64_t v16 = *a1;
  if (*a1) {
    int v17 = *(_DWORD *)(v16 - 12) + 1;
  }
  else {
    int v17 = 1;
  }
  *(_DWORD *)(v16 - 12) = v17;
  uint64_t v18 = *a1;
  if (*a1) {
    int v19 = *(_DWORD *)(v18 - 12);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = (*(_DWORD *)(v18 - 16) + v19);
  unint64_t v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
    {
LABEL_21:
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a1, v11);
      int v11 = (void *)result;
      uint64_t v18 = *a1;
      if (*a1) {
        LODWORD(v21) = *(_DWORD *)(v18 - 4);
      }
      else {
        LODWORD(v21) = 0;
      }
    }
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_21;
  }
  uint64_t v24 = v18 + 24 * v21;
  char v25 = 1;
LABEL_30:
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 16) = v25;
  return result;
}

void WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest(unsigned int *a1, _DWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7 = a1;
  uint64_t v200 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a1 + 2);
  if (v8) {
    CFRetain(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v9 = *(void *)(*((void *)v7 + 8) + 8);
  if (v9) {
    unsigned int v10 = (WebKit::WebPageProxy *)(v9 - 16);
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = WebKit::WebPageProxy::logger(v10);
  uint64_t v12 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 24))(v7);
  uint64_t v13 = *((void *)v7 + 31);
  uint64_t v175 = v12;
  uint64_t v176 = v14;
  v177 = "processUserMediaPermissionValidRequest";
  uint64_t v178 = v13;
  int v15 = (WTF::String *)a3[3];
  uint64_t v16 = (WTF::String *)a2[3];
  if (*(unsigned char *)(v11 + 12))
  {
    int v17 = *(WTF::String **)(v8 + 24);
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v184, (WTF::Logger::LogSiteIdentifier *)&v175);
    v169 = v17;
    WTF::String::number(v17);
    WTF::String::String((WTF::String *)&v182, ", video: ");
    WTF::String::number(v15);
    WTF::String::String((WTF::String *)&v180, " audio: ");
    WTF::String::number(v16);
    v186[0] = v183;
    v190 = v182;
    *(void *)long long buf = v184;
    v188 = v180;
    v189 = v181;
    v187 = v179;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v186, (uint64_t *)&v190, (uint64_t *)&v189, (uint64_t *)&v188, (uint64_t *)&v187, &v185);
    if (!v185) {
      goto LABEL_251;
    }
    int v19 = v179;
    v179 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v18);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v180;
    v180 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    unint64_t v21 = v181;
    v181 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v18);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v182;
    v182 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v18);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    unsigned int v23 = v183;
    v183 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v18);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = v184;
    v184 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v18);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    char v25 = qword_1EB358820;
    uint64_t v26 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
    if (v26)
    {
      WTF::String::utf8();
      __int16 v28 = v186[0] ? (char *)v186[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v26 = v186[0];
      v186[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          uint64_t v26 = (WTF *)WTF::fastFree(v26, v27);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
    }
    v171 = v16;
    if (WebKit2LogWebRTC)
    {
      char v29 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v30 = *v29;
        if (v30) {
          break;
        }
        int v31 = *v29;
        atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v31, v30 | 1, memory_order_acquire, memory_order_acquire);
        if (v31 == v30)
        {
          v166 = a4;
          v167 = v7;
          uint64_t v32 = WTF::Logger::observers(v26);
          uint64_t v33 = *(unsigned int *)(v32 + 12);
          if (v33)
          {
            uint64_t v34 = *(uint64_t **)v32;
            uint64_t v168 = *(void *)v32 + 8 * v33;
            do
            {
              uint64_t v35 = *v34;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v175);
              int v193 = 0;
              WTF::String::number(v169);
              int v194 = 0;
              WTF::String::String((WTF::String *)&v195, ", video: ");
              int v196 = 0;
              WTF::String::number(v15);
              int v198 = 0;
              WTF::String::String((WTF::String *)v199, " audio: ");
              v199[2] = 0;
              WTF::String::number(v171);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v186, (uint64_t)buf, 6uLL);
              (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v35 + 16))(v35, &WebKit2LogWebRTC, 0, v186);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v186, v36);
              for (uint64_t i = 88; i != -8; i -= 16)
              {
                uint64_t v38 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v168);
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          uint64_t v7 = v167;
          a4 = v166;
          if (v39 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    long long v40 = v185;
    v185 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v27);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    LODWORD(v15) = a3[3];
    LODWORD(v16) = a2[3];
  }
  if (*(unsigned __int8 *)(v8 + 112) - 3 <= 0xFFFFFFFD && v15 == 0 && v16 == 0)
  {
    *(void *)long long buf = 0;
    uint64_t v54 = (WebKit::UserMediaPermissionRequestManagerProxy *)v7;
    uint64_t v55 = v8;
    int v56 = 0;
    goto LABEL_155;
  }
  WTF::String::operator=((uint64_t *)(v8 + 2080), a4);
  WTF::String::operator=((uint64_t *)(v8 + 2088), a4 + 1);
  WebKit::UserMediaPermissionRequestProxy::setEligibleVideoDeviceUIDs(v8, a3);
  unsigned int v43 = *(_DWORD *)(v8 + 108);
  if (v43) {
    WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(*(WTF::StringImpl **)(v8 + 96), (WTF::StringImpl *)(*(void *)(v8 + 96) + 40 * v43));
  }
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v8 + 96, a2);
  int RequestAction = WebKit::UserMediaPermissionRequestManagerProxy::getRequestAction((WebKit::UserMediaPermissionRequestManagerProxy **)v7, (const WebKit::UserMediaPermissionRequestProxy *)v8);
  uint64_t v45 = *(void *)(*((void *)v7 + 8) + 8);
  if (v45) {
    uint64_t v46 = (WebKit::WebPageProxy *)(v45 - 16);
  }
  else {
    uint64_t v46 = 0;
  }
  uint64_t v47 = WebKit::WebPageProxy::logger(v46);
  uint64_t v48 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 24))(v7);
  uint64_t v49 = *((void *)v7 + 31);
  uint64_t v175 = v48;
  uint64_t v176 = v50;
  v177 = "processUserMediaPermissionValidRequest";
  uint64_t v178 = v49;
  if (!*(unsigned char *)(v47 + 12)) {
    goto LABEL_116;
  }
  unsigned int v51 = *(WTF::String **)(v8 + 24);
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v189, (WTF::Logger::LogSiteIdentifier *)&v175);
  v172 = v51;
  WTF::String::number(v51);
  WTF::String::String((WTF::String *)&v187, ", action: ");
  WebKit::convertEnumerationToString(&v185, RequestAction);
  WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v189, (uint64_t *)&v188, (uint64_t *)&v187, (uint64_t *)&v185, &v190);
  int v53 = v185;
  v185 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, v52);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  uint64_t v57 = v187;
  v187 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2) {
      WTF::StringImpl::destroy(v57, v52);
    }
    else {
      *(_DWORD *)v57 -= 2;
    }
  }
  uint64_t v58 = v188;
  v188 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2) {
      WTF::StringImpl::destroy(v58, v52);
    }
    else {
      *(_DWORD *)v58 -= 2;
    }
  }
  uint64_t v59 = v189;
  v189 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2) {
      WTF::StringImpl::destroy(v59, v52);
    }
    else {
      *(_DWORD *)v59 -= 2;
    }
  }
  uint64_t v60 = qword_1EB358820;
  char v61 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
  if (v61)
  {
    WTF::String::utf8();
    unint64_t v63 = v186[0] ? (char *)v186[0] + 16 : 0;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v63;
    _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    char v61 = v186[0];
    v186[0] = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1) {
        char v61 = (WTF *)WTF::fastFree(v61, v62);
      }
      else {
        --*(_DWORD *)v61;
      }
    }
  }
  if (WebKit2LogWebRTC)
  {
    unint64_t v64 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v65 = *v64;
      if (v65) {
        break;
      }
      int v66 = *v64;
      atomic_compare_exchange_strong_explicit(v64, (unsigned __int8 *)&v66, v65 | 1, memory_order_acquire, memory_order_acquire);
      if (v66 == v65)
      {
        int v67 = RequestAction;
        uint64_t v68 = WTF::Logger::observers(v61);
        uint64_t v69 = *(unsigned int *)(v68 + 12);
        if (v69)
        {
          uint64_t v70 = *(uint64_t **)v68;
          uint64_t v71 = *(void *)v68 + 8 * v69;
          do
          {
            uint64_t v72 = *v70;
            *(_DWORD *)long long buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v175);
            int v193 = 0;
            WTF::String::number(v172);
            int v194 = 0;
            WTF::String::String((WTF::String *)&v195, ", action: ");
            int v196 = 0;
            WebKit::convertEnumerationToString(&v197, v67);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v186, (uint64_t)buf, 4uLL);
            (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v72 + 16))(v72, &WebKit2LogWebRTC, 0, v186);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v186, v73);
            for (uint64_t j = 56; j != -8; j -= 16)
            {
              uint64_t v75 = *(WTF::StringImpl **)&buf[j];
              *(void *)&buf[j] = 0;
              if (v75)
              {
                if (*(_DWORD *)v75 == 2) {
                  WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v62);
                }
                else {
                  *(_DWORD *)v75 -= 2;
                }
              }
            }
            ++v70;
          }
          while (v70 != (uint64_t *)v71);
        }
        int v76 = 1;
        atomic_compare_exchange_strong_explicit(v64, (unsigned __int8 *)&v76, 0, memory_order_release, memory_order_relaxed);
        int RequestAction = v67;
        if (v76 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t v77 = v190;
  v190 = 0;
  if (!v77) {
    goto LABEL_116;
  }
  if (*(_DWORD *)v77 != 2)
  {
    *(_DWORD *)v77 -= 2;
LABEL_116:
    if (RequestAction) {
      goto LABEL_117;
    }
    goto LABEL_154;
  }
  WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v62);
  if (!RequestAction)
  {
LABEL_154:
    *(void *)long long buf = 0;
    uint64_t v54 = (WebKit::UserMediaPermissionRequestManagerProxy *)v7;
    uint64_t v55 = v8;
    int v56 = 5;
LABEL_155:
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v54, v55, v56, (uint64_t *)buf, 0);
    v116 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v116)
    {
      if (*(_DWORD *)v116 == 2) {
        WTF::StringImpl::destroy(v116, v115);
      }
      else {
        *(_DWORD *)v116 -= 2;
      }
    }
    goto LABEL_249;
  }
LABEL_117:
  uint64_t v78 = *(void *)(*((void *)v7 + 8) + 8);
  if (v78) {
    uint64_t v79 = v78 - 16;
  }
  else {
    uint64_t v79 = 0;
  }
  CFRetain(*(CFTypeRef *)(v79 + 8));
  if (RequestAction == 1)
  {
    if ((*(_WORD *)(*(void *)(v79 + 32) + 64) & 4) == 0)
    {
      *(void *)long long buf = v8;
      uint64_t v81 = v7[37];
      if (v81 == v7[36])
      {
        int v82 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v7 + 34), v81 + 1, (unint64_t)buf);
        uint64_t v83 = v7[37];
        uint64_t v84 = *((void *)v7 + 17);
        uint64_t v85 = *v82;
        *int v82 = 0;
        *(void *)(v84 + 8 * v83) = v85;
        uint64_t v86 = *(void *)buf;
        v7[37] = v83 + 1;
        *(void *)long long buf = 0;
        if (v86) {
          CFRelease(*(CFTypeRef *)(v86 + 8));
        }
      }
      else
      {
        *(void *)(*((void *)v7 + 17) + 8 * v81) = v8;
        v7[37] = v81 + 1;
      }
      uint64_t v8 = 0;
      goto LABEL_246;
    }
LABEL_245:
    WebKit::UserMediaPermissionRequestManagerProxy::grantRequest((WebKit::UserMediaPermissionRequestManagerProxy *)v7, (WebKit::UserMediaPermissionRequestProxy *)v8);
    goto LABEL_246;
  }
  uint64_t v87 = *(void *)(v79 + 272);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKedouble y = (WebCore::RealtimeMediaSourceCenter *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v87 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v80);
  if (BoolValueForKey
    && *(unsigned __int8 *)(v8 + 112) - 1 <= 1
    && !*(_DWORD *)(*((void *)v7 + 2) + 92))
  {
    long long v90 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(BoolValueForKey);
    uint64_t v91 = WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(v90);
    char v92 = *(uint64_t (***)(void))(*(uint64_t (**)(uint64_t))(*(void *)v91 + 24))(v91);
    uint64_t v93 = (*v92)();
    uint64_t v94 = *(unsigned int *)(v93 + 12);
    memset(buf, 0, sizeof(buf));
    int v192 = v94;
    if (!v94)
    {
LABEL_133:
      WebKit::UserMediaPermissionRequestProxy::setEligibleVideoDeviceUIDs(v8, buf);
      WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v98);
      goto LABEL_134;
    }
    if (v94 < 0x6666667)
    {
      uint64_t v95 = v93;
      int v96 = 40 * v94;
      uint64_t v97 = WTF::fastMalloc((WTF *)(40 * v94));
      *(_DWORD *)&buf[8] = (v96 & 0xFFFFFFF8) / 0x28;
      *(void *)long long buf = v97;
      WTF::VectorCopier<false,WebCore::CaptureDevice>::uninitializedCopy<WebCore::CaptureDevice>(*(void *)v95, *(void *)v95 + 40 * *(unsigned int *)(v95 + 12), v97);
      goto LABEL_133;
    }
LABEL_251:
    __break(0xC471u);
    JUMPOUT(0x198E1B998);
  }
LABEL_134:
  if (*(unsigned char *)(v79 + 898)
    && (uint64_t v99 = *(WTF::String **)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v79 + 48) + 24))
                              + 320)) != 0)
  {
    uint64_t v100 = *(void *)(*((void *)v7 + 8) + 8);
    if (v100) {
      char v101 = (WebKit::WebPageProxy *)(v100 - 16);
    }
    else {
      char v101 = 0;
    }
    uint64_t v102 = WebKit::WebPageProxy::logger(v101);
    uint64_t v103 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 24))(v7);
    uint64_t v104 = *((void *)v7 + 31);
    uint64_t v175 = v103;
    uint64_t v176 = v105;
    v177 = "processUserMediaPermissionValidRequest";
    uint64_t v178 = v104;
    if (*(unsigned char *)(v102 + 12))
    {
      uint64_t v106 = *(WTF::String **)(v8 + 24);
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v189, (WTF::Logger::LogSiteIdentifier *)&v175);
      v173 = v106;
      WTF::String::number(v106);
      WTF::String::String((WTF::String *)&v187, ", page controlled by automation");
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v189, (uint64_t *)&v188, (uint64_t *)&v187, &v190);
      BOOL v108 = v187;
      v187 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2) {
          WTF::StringImpl::destroy(v108, v107);
        }
        else {
          *(_DWORD *)v108 -= 2;
        }
      }
      uint64_t v126 = v188;
      v188 = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2) {
          WTF::StringImpl::destroy(v126, v107);
        }
        else {
          *(_DWORD *)v126 -= 2;
        }
      }
      uint64_t v127 = v189;
      v189 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2) {
          WTF::StringImpl::destroy(v127, v107);
        }
        else {
          *(_DWORD *)v127 -= 2;
        }
      }
      long long v128 = qword_1EB358820;
      uint64_t v129 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
      if (v129)
      {
        WTF::String::utf8();
        uint64_t v131 = v186[0] ? (char *)v186[0] + 16 : 0;
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = v131;
        _os_log_impl(&dword_1985F2000, v128, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v129 = v186[0];
        v186[0] = 0;
        if (v129)
        {
          if (*(_DWORD *)v129 == 1) {
            uint64_t v129 = (WTF *)WTF::fastFree(v129, v130);
          }
          else {
            --*(_DWORD *)v129;
          }
        }
      }
      if (WebKit2LogWebRTC)
      {
        uint64_t v132 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v133 = *v132;
          if (v133) {
            break;
          }
          int v134 = *v132;
          atomic_compare_exchange_strong_explicit(v132, (unsigned __int8 *)&v134, v133 | 1, memory_order_acquire, memory_order_acquire);
          if (v134 == v133)
          {
            v170 = v99;
            uint64_t v135 = WTF::Logger::observers(v129);
            uint64_t v136 = *(unsigned int *)(v135 + 12);
            if (v136)
            {
              uint64_t v137 = *(uint64_t **)v135;
              uint64_t v138 = *(void *)v135 + 8 * v136;
              do
              {
                uint64_t v139 = *v137;
                *(_DWORD *)long long buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v175);
                int v193 = 0;
                WTF::String::number(v173);
                int v194 = 0;
                WTF::String::String((WTF::String *)&v195, ", page controlled by automation");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v186, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v139 + 16))(v139, &WebKit2LogWebRTC, 0, v186);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v186, v140);
                for (uint64_t k = 40; k != -8; k -= 16)
                {
                  v142 = *(WTF::StringImpl **)&buf[k];
                  *(void *)&buf[k] = 0;
                  if (v142)
                  {
                    if (*(_DWORD *)v142 == 2) {
                      WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v130);
                    }
                    else {
                      *(_DWORD *)v142 -= 2;
                    }
                  }
                }
                ++v137;
              }
              while (v137 != (uint64_t *)v138);
            }
            int v143 = 1;
            atomic_compare_exchange_strong_explicit(v132, (unsigned __int8 *)&v143, 0, memory_order_release, memory_order_relaxed);
            uint64_t v99 = v170;
            if (v143 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v144 = v190;
      v190 = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2) {
          WTF::StringImpl::destroy(v144, (WTF::StringImpl *)v130);
        }
        else {
          *(_DWORD *)v144 -= 2;
        }
      }
    }
    if (*((unsigned char *)v99 + 272)) {
      goto LABEL_245;
    }
    *(void *)long long buf = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest((WebKit::UserMediaPermissionRequestManagerProxy *)v7, v8, 5, (uint64_t *)buf, 0);
    long long v146 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v146)
    {
      if (*(_DWORD *)v146 == 2) {
        WTF::StringImpl::destroy(v146, v145);
      }
      else {
        *(_DWORD *)v146 -= 2;
      }
    }
  }
  else
  {
    uint64_t v109 = *(void *)(v79 + 272);
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v109 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v89))
    {
      uint64_t v111 = *(void *)(v79 + 272);
      {
        WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v111 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, v110) & 1) == 0)
      {
        uint64_t v117 = *(void *)(*((void *)v7 + 8) + 8);
        if (v117) {
          uint64_t v118 = (WebKit::WebPageProxy *)(v117 - 16);
        }
        else {
          uint64_t v118 = 0;
        }
        uint64_t v119 = WebKit::WebPageProxy::logger(v118);
        uint64_t v120 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 24))(v7);
        uint64_t v121 = *((void *)v7 + 31);
        uint64_t v175 = v120;
        uint64_t v176 = v122;
        v177 = "processUserMediaPermissionValidRequest";
        uint64_t v178 = v121;
        if (*(unsigned char *)(v119 + 12))
        {
          uint64_t v123 = *(WTF::String **)(v8 + 24);
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v189, (WTF::Logger::LogSiteIdentifier *)&v175);
          v174 = v123;
          WTF::String::number(v123);
          WTF::String::String((WTF::String *)&v187, ", mock devices don't require prompt");
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v189, (uint64_t *)&v188, (uint64_t *)&v187, &v190);
          uint64_t v125 = v187;
          v187 = 0;
          if (v125)
          {
            if (*(_DWORD *)v125 == 2) {
              WTF::StringImpl::destroy(v125, v124);
            }
            else {
              *(_DWORD *)v125 -= 2;
            }
          }
          v147 = v188;
          v188 = 0;
          if (v147)
          {
            if (*(_DWORD *)v147 == 2) {
              WTF::StringImpl::destroy(v147, v124);
            }
            else {
              *(_DWORD *)v147 -= 2;
            }
          }
          v148 = v189;
          v189 = 0;
          if (v148)
          {
            if (*(_DWORD *)v148 == 2) {
              WTF::StringImpl::destroy(v148, v124);
            }
            else {
              *(_DWORD *)v148 -= 2;
            }
          }
          v149 = qword_1EB358820;
          v150 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
          if (v150)
          {
            WTF::String::utf8();
            uint64_t v152 = v186[0] ? (char *)v186[0] + 16 : 0;
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v152;
            _os_log_impl(&dword_1985F2000, v149, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v150 = v186[0];
            v186[0] = 0;
            if (v150)
            {
              if (*(_DWORD *)v150 == 1) {
                v150 = (WTF *)WTF::fastFree(v150, v151);
              }
              else {
                --*(_DWORD *)v150;
              }
            }
          }
          if (WebKit2LogWebRTC)
          {
            uint64_t v153 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v154 = *v153;
              if (v154) {
                break;
              }
              int v155 = *v153;
              atomic_compare_exchange_strong_explicit(v153, (unsigned __int8 *)&v155, v154 | 1, memory_order_acquire, memory_order_acquire);
              if (v155 == v154)
              {
                uint64_t v156 = WTF::Logger::observers(v150);
                uint64_t v157 = *(unsigned int *)(v156 + 12);
                if (v157)
                {
                  char v158 = *(uint64_t **)v156;
                  uint64_t v159 = *(void *)v156 + 8 * v157;
                  do
                  {
                    uint64_t v160 = *v158;
                    *(_DWORD *)long long buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v175);
                    int v193 = 0;
                    WTF::String::number(v174);
                    int v194 = 0;
                    WTF::String::String((WTF::String *)&v195, ", mock devices don't require prompt");
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v186, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v160 + 16))(v160, &WebKit2LogWebRTC, 0, v186);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v186, v161);
                    for (uint64_t m = 40; m != -8; m -= 16)
                    {
                      v163 = *(WTF::StringImpl **)&buf[m];
                      *(void *)&buf[m] = 0;
                      if (v163)
                      {
                        if (*(_DWORD *)v163 == 2) {
                          WTF::StringImpl::destroy(v163, (WTF::StringImpl *)v151);
                        }
                        else {
                          *(_DWORD *)v163 -= 2;
                        }
                      }
                    }
                    ++v158;
                  }
                  while (v158 != (uint64_t *)v159);
                }
                int v164 = 1;
                atomic_compare_exchange_strong_explicit(v153, (unsigned __int8 *)&v164, 0, memory_order_release, memory_order_relaxed);
                if (v164 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          v165 = v190;
          v190 = 0;
          if (v165)
          {
            if (*(_DWORD *)v165 == 2) {
              WTF::StringImpl::destroy(v165, (WTF::StringImpl *)v151);
            }
            else {
              *(_DWORD *)v165 -= 2;
            }
          }
        }
        goto LABEL_245;
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 2, (uint64_t)v7);
    uint64_t v112 = (atomic_uint *)*((void *)v7 + 1);
    if (v112) {
      atomic_fetch_add(v112, 1u);
    }
    uint64_t v113 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v113 = &unk_1EE9D7BA8;
    v113[1] = v112;
    *(void *)long long buf = v113;
    WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(v79, v8, (const WTF::StringImpl *)buf);
    uint64_t v114 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v114) {
      (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
    }
  }
LABEL_246:
  if (v78) {
    CFRelease(*(CFTypeRef *)(v78 - 8));
  }
  if (v8) {
LABEL_249:
  }
    CFRelease(*(CFTypeRef *)(v8 + 8));
}

void WebKit::UserMediaPermissionRequestManagerProxy::checkUserMediaPermissionForSpeechRecognition(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::SecurityOrigin *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
  if (v13) {
    uint64_t v14 = v13 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  CFRetain(*(CFTypeRef *)(v14 + 8));
  uint64_t v15 = WebKit::WebFrameProxy::webFrame(a2, a3);
  uint64_t v16 = v15;
  if (!v15) {
    goto LABEL_27;
  }
  CFRetain(*(CFTypeRef *)(v15 + 8));
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v14 + 32) + 1000), v67);
  MEMORY[0x19972E890](&v52, v67, 0);
  WebCore::SecurityOriginData::toURL((uint64_t *)&v70, (WebCore::SecurityOriginData *)(a5 + 8));
  int v19 = WTF::protocolHostAndPortAreEqual((WTF *)&v52, &v70, v17);
  m_ptr = v70.m_string.m_impl.m_ptr;
  v70.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v18);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  unint64_t v21 = v52;
  uint64_t v52 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v18);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = (WTF::StringImpl *)v67[0];
  v67[0] = 0;
  if (!v22) {
    goto LABEL_16;
  }
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
LABEL_16:
    if (v19) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
  WTF::StringImpl::destroy(v22, v18);
  if (v19)
  {
LABEL_17:
    WebCore::SecurityOrigin::isolatedCopy(&v69, a4);
    WebCore::SecurityOrigin::isolatedCopy(&v68, (WebCore::SecurityOrigin *)a5);
    unsigned int v23 = *(StringImpl **)a6;
    if (*(void *)a6) {
      *(_DWORD *)v23 += 2;
    }
    v70.m_string.m_impl.m_ptr = v23;
    *((unsigned char *)&v70 + 8) = *(unsigned char *)(a6 + 8);
    uint64_t v24 = *(_DWORD **)(a6 + 16);
    if (v24) {
      *v24 += 2;
    }
    *(void *)&v70.m_userEnd = v24;
    char v25 = *(_DWORD **)(a6 + 24);
    if (v25) {
      *v25 += 2;
    }
    *(void *)&v70.m_hostEnd = v25;
    v70.m_pathEnd = *(_DWORD *)(a6 + 32);
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v67, (uint64_t)&v70, 1uLL);
    v66[0] = 0;
    v66[1] = 0;
    LOBYTE(v52) = 0;
    unsigned char v64[24] = 0;
    uint64_t v65 = 0;
    bzero(&v53, 0x3C1uLL);
    bzero(&v59, 0x3C1uLL);
    uint64_t v26 = API::Object::newObject(0x840uLL, 107);
    uint64_t v27 = WebKit::UserMediaPermissionRequestProxy::UserMediaPermissionRequestProxy(v26, a1, 0, a2, a3, a2, a3, &v69, &v68, v67, v66, (uint64_t)&v52, a7);
    *(void *)uint64_t v27 = &unk_1EE9D5378;
    *(unsigned char *)(v27 + 210WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v64, v28);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v29);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v30);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v61, v31);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v32);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v33);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v57, v34);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v35);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v36);
    std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v54, v37);
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v38);
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v39);
    uint64_t v41 = *(WTF::StringImpl **)&v70.m_hostEnd;
    *(void *)&v70.m_hostEnd = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v40);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    unsigned int v43 = *(WTF::StringImpl **)&v70.m_userEnd;
    *(void *)&v70.m_userEnd = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v40);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    int v44 = v70.m_string.m_impl.m_ptr;
    v70.m_string.m_impl.m_ptr = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)v44, v40);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    uint64_t v45 = v68;
    uint64_t v68 = 0;
    if (v45) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v45, v40);
    }
    uint64_t v46 = v69;
    uint64_t v69 = 0;
    if (v46) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v46, v40);
    }
    int RequestAction = WebKit::UserMediaPermissionRequestManagerProxy::getRequestAction((WebKit::UserMediaPermissionRequestManagerProxy **)a1, (const WebKit::UserMediaPermissionRequestProxy *)v26);
    if (RequestAction == 1)
    {
      uint64_t v48 = *(void *)(v26 + 2096);
      *(void *)(v26 + 2096) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, 1);
    }
    else
    {
      if (RequestAction)
      {
        API::SecurityOrigin::create(&v52);
        API::SecurityOrigin::create(&v70);
        (*(void (**)(void))(**(void **)(v14 + 104) + 312))();
        uint64_t v49 = v70.m_string.m_impl.m_ptr;
        v70.m_string.m_impl.m_ptr = 0;
        if (v49) {
          CFRelease(*((CFTypeRef *)v49 + 1));
        }
        uint64_t v50 = v52;
        uint64_t v52 = 0;
        if (v50) {
          CFRelease(*((CFTypeRef *)v50 + 1));
        }
        goto LABEL_51;
      }
      uint64_t v48 = *(void *)(v26 + 2096);
      *(void *)(v26 + 2096) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v48 + 16))(v48, 0);
    }
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
LABEL_51:
    CFRelease(*(CFTypeRef *)(v26 + 8));
    goto LABEL_52;
  }
LABEL_27:
  uint64_t v42 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v42 + 16))(v42, 0);
  (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  if (v16) {
LABEL_52:
  }
    CFRelease(*(CFTypeRef *)(v16 + 8));
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 - 8));
  }
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::shouldChangeDeniedToPromptForCamera(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebCore::ClientOrigin *a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v5 + 32) + 1000), &v24);
  MEMORY[0x19972E890](v25, &v24, 0);
  WebCore::SecurityOriginData::toURL((uint64_t *)&v23, a2);
  int v8 = WTF::protocolHostAndPortAreEqual((WTF *)v25, &v23, v6);
  m_ptr = v23.m_string.m_impl.m_ptr;
  v23.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v7);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  unsigned int v10 = v25[0];
  v25[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v24;
  uint64_t v24 = 0;
  if (!v11)
  {
LABEL_15:
    if (!v8) {
      return 1;
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v11, v7);
  if (!v8) {
    return 1;
  }
LABEL_18:
  uint64_t v12 = *((unsigned int *)this + 47);
  if (v12)
  {
    uint64_t v13 = (unsigned __int8 *)(*((void *)this + 22) + 33);
    uint64_t v14 = 40 * v12;
    do
    {
      int v15 = *v13;
      v13 += 40;
      if (v15) {
        return 0;
      }
      v14 -= 40;
    }
    while (v14);
  }
  uint64_t v16 = *((unsigned int *)this + 37);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 17);
    uint64_t v18 = 8 * v16;
    while (*(unsigned __int8 *)(*(void *)v17 + 112) - 1 < 2 || !*(_DWORD *)(*(void *)v17 + 92))
    {
      v17 += 8;
      v18 -= 8;
      if (!v18) {
        goto LABEL_27;
      }
    }
    return 0;
  }
LABEL_27:
  uint64_t v19 = *((unsigned int *)this + 41);
  if (!v19) {
    return 1;
  }
  uint64_t v20 = *((void *)this + 19);
  uint64_t v21 = 8 * v19;
  while (*(unsigned __int8 *)(*(void *)v20 + 112) - 1 < 2 || !*(_DWORD *)(*(void *)v20 + 92))
  {
    v20 += 8;
    v21 -= 8;
    if (!v21) {
      return 1;
    }
  }
  return 0;
}

BOOL WebKit::UserMediaPermissionRequestManagerProxy::shouldChangeDeniedToPromptForMicrophone(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebCore::ClientOrigin *a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v5 + 32) + 1000), &v27);
  MEMORY[0x19972E890](v28, &v27, 0);
  WebCore::SecurityOriginData::toURL((uint64_t *)&v26, a2);
  int v8 = WTF::protocolHostAndPortAreEqual((WTF *)v28, &v26, v6);
  m_ptr = v26.m_string.m_impl.m_ptr;
  v26.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v7);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  unsigned int v10 = v28[0];
  v28[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v27;
  uint64_t v27 = 0;
  if (!v11)
  {
LABEL_15:
    if (!v8) {
      return 1;
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v11, v7);
  if (!v8) {
    return 1;
  }
LABEL_18:
  uint64_t v12 = *((unsigned int *)this + 47);
  if (v12)
  {
    uint64_t v13 = (unsigned __int8 *)(*((void *)this + 22) + 32);
    uint64_t v14 = 40 * v12;
    do
    {
      int v15 = *v13;
      v13 += 40;
      if (v15) {
        return 0;
      }
      v14 -= 40;
    }
    while (v14);
  }
  uint64_t v16 = *((unsigned int *)this + 37);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 17);
    uint64_t v18 = 8 * v16;
    while (!*(_DWORD *)(*(void *)v17 + 108))
    {
      v17 += 8;
      v18 -= 8;
      if (!v18) {
        goto LABEL_26;
      }
    }
    return 0;
  }
LABEL_26:
  uint64_t v19 = *((unsigned int *)this + 41);
  if (!v19) {
    return 1;
  }
  uint64_t v20 = (uint64_t *)*((void *)this + 19);
  uint64_t v21 = 8 * v19 - 8;
  do
  {
    uint64_t v22 = *v20++;
    int v23 = *(_DWORD *)(v22 + 108);
    BOOL result = v23 == 0;
    if (v23) {
      BOOL v25 = 1;
    }
    else {
      BOOL v25 = v21 == 0;
    }
    v21 -= 8;
  }
  while (!v25);
  return result;
}

BOOL WebKit::UserMediaPermissionRequestManagerProxy::shouldChangePromptToGrantForCamera(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebCore::ClientOrigin *a2)
{
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v11, (const WebCore::ClientOrigin *)((char *)a2 + 32));
  uint64_t v4 = v11;
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v10, a2);
  uint64_t v6 = WebKit::UserMediaPermissionRequestManagerProxy::searchForGrantedRequest((uint64_t)this, 0, 0, v4, v10, 0, 1);
  uint64_t v7 = v10;
  unsigned int v10 = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v7, v5);
  }
  int v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v8, v5);
  }
  return v6 != 0;
}

BOOL WebKit::UserMediaPermissionRequestManagerProxy::shouldChangePromptToGrantForMicrophone(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebCore::ClientOrigin *a2)
{
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v11, (const WebCore::ClientOrigin *)((char *)a2 + 32));
  uint64_t v4 = v11;
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v10, a2);
  uint64_t v6 = WebKit::UserMediaPermissionRequestManagerProxy::searchForGrantedRequest((uint64_t)this, 0, 0, v4, v10, 1, 0);
  uint64_t v7 = v10;
  unsigned int v10 = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v7, v5);
  }
  int v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v8, v5);
  }
  return v6 != 0;
}

void WebKit::UserMediaPermissionRequestManagerProxy::clearUserMediaPermissionRequestHistory(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 176);
  unsigned int v5 = *(_DWORD *)(a1 + 188);
  unint64_t v6 = v4 + 40 * v5;
  int v7 = 0;
  if (v5)
  {
    unint64_t v8 = v4 + 40;
    unint64_t v9 = v4 + 40 * v5;
    unint64_t v10 = v9;
    do
    {
      if (a2 == 8 && *(unsigned char *)(v8 - 8) || a2 == 3 && *(unsigned char *)(v8 - 7))
      {
        uint64_t v11 = (WTF::StringImpl *)(v8 - 40);
        if (v10 == *(void *)(a1 + 176) + 40 * *(unsigned int *)(a1 + 188))
        {
          unint64_t v10 = v8 - 40;
        }
        else if (v11 != (WTF::StringImpl *)v9)
        {
          WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(v9, v11, v10);
          v10 += v4 - v9;
        }
        uint64_t v12 = *(void *)(v8 - 16);
        *(void *)(v8 - 16) = 0;
        if (v12) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v12, v11);
        }
        uint64_t v13 = *(void *)(v8 - 24);
        *(void *)(v8 - 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
        if (v13) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v13, v11);
        }
        ++v7;
        unint64_t v9 = v8;
      }
      v4 += 40;
      BOOL v14 = v8 >= v6;
      v8 += 40;
    }
    while (!v14);
    uint64_t v4 = *(void *)(a1 + 176);
    unsigned int v5 = *(_DWORD *)(a1 + 188);
    unint64_t v6 = v10;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 176);
  }
  int v15 = (WTF::StringImpl *)(v4 + 40 * v5);
  if ((WTF::StringImpl *)v9 != v15)
  {
    WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(v9, v15, v6);
    unsigned int v5 = *(_DWORD *)(a1 + 188);
  }
  *(_DWORD *)(a1 + 188) = v5 - v7;
  uint64_t v16 = *(char **)(a1 + 152);
  uint64_t v17 = *(unsigned int *)(a1 + 164);
  uint64_t v18 = &v16[8 * v17];
  int v19 = 0;
  if (v17)
  {
    uint64_t v20 = *(void *)(a1 + 152);
    uint64_t v21 = &v16[8 * v17];
    uint64_t v22 = v21;
    while (1)
    {
      uint64_t v23 = *(void *)v16;
      if ((a2 != 8 || !*(_DWORD *)(v23 + 108))
        && (*(unsigned __int8 *)(v23 + 112) - 1 < 2 || a2 != 3 || !*(_DWORD *)(v23 + 92)))
      {
        goto LABEL_37;
      }
      uint64_t v24 = v16;
      if (v22 != (char *)(*(void *)(a1 + 152) + 8 * *(unsigned int *)(a1 + 164)))
      {
        if (v16 != v21)
        {
          memmove(v22, v21, v20 - (void)v21);
          uint64_t v24 = &v22[v20 - (void)v21];
          uint64_t v23 = *(void *)v16;
          *(void *)uint64_t v16 = 0;
          uint64_t v21 = v16 + 8;
          if (!v23) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        uint64_t v24 = v22;
      }
      *(void *)uint64_t v16 = 0;
      uint64_t v21 = v16 + 8;
LABEL_35:
      CFRelease(*(CFTypeRef *)(v23 + 8));
LABEL_36:
      ++v19;
      uint64_t v22 = v24;
LABEL_37:
      v16 += 8;
      v20 += 8;
      if (v16 >= v18)
      {
        uint64_t v16 = *(char **)(a1 + 152);
        LODWORD(v17) = *(_DWORD *)(a1 + 164);
        uint64_t v18 = v22;
        goto LABEL_40;
      }
    }
  }
  uint64_t v21 = &v16[8 * v17];
LABEL_40:
  BOOL v25 = &v16[8 * v17];
  if (v21 != v25)
  {
    memmove(v18, v21, v25 - v21);
    LODWORD(v17) = *(_DWORD *)(a1 + 164);
  }
  *(_DWORD *)(a1 + 16WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v17 - v19;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(void *a1, uint64_t a2, uint64_t a3, atomic_uint *volatile *a4, atomic_uint *volatile *a5, uint64_t *a6)
{
  uint64_t v12 = *(void *)(a1[8] + 8);
  if (v12) {
    uint64_t v13 = (WebKit::WebPageProxy *)(v12 - 16);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = WebKit::WebPageProxy::logger(v13);
  uint64_t v15 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v16 = a1[31];
  v23[0] = v15;
  v23[1] = v17;
  uint64_t v23[2] = (uint64_t)"enumerateMediaDevicesForFrame";
  v23[3] = v16;
  if (*(unsigned char *)(v14 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v23);
  }
  atomic_uint *volatile v18 = *a4;
  atomic_fetch_add(*a4, 1u);
  atomic_uint *volatile v19 = *a5;
  atomic_fetch_add(*a5, 1u);
  uint64_t v20 = *a6;
  *a6 = 0;
  uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x38);
  void *v21 = &unk_1EE9D7C48;
  v21[1] = a1;
  void v21[2] = a2;
  v21[3] = a3;
  void v21[4] = v18;
  v21[5] = v19;
  v21[6] = v20;
  v23[0] = (uint64_t)v21;
  WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo((uint64_t)a1, a2, a3, (uint64_t *)a4, (uint64_t *)a5, v23);
  uint64_t result = v23[0];
  if (v23[0]) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v23[0] + 8))(v23[0]);
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::mockCaptureDevicesEnabled(WebKit::UserMediaPermissionRequestManagerProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  if (*((unsigned char *)this + 273)) {
    return *((unsigned __int8 *)this + 272);
  }
  uint64_t v4 = *(void *)(*((void *)this + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 272);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
}

void WebKit::UserMediaPermissionRequestManagerProxy::captureStateChanged(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  if (!*(unsigned char *)(v6 + 801) && *(unsigned char *)(v6 + 800))
  {
    if (!*(void *)(a1 + 264))
    {
      {
        qword_1E93CFBE0 = 0;
        unk_1E93CFBE8 = 0;
        WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&unk_1EE9D78F0;
        qword_1E93CFBF0 = 0;
        word_1E93CFBF8 = 1;
      }
      unint64_t v8 = *(atomic_uint **)(v6 + 256);
      unint64_t v9 = (unsigned int *)(v8 + 4);
      atomic_fetch_add(v8 + 4, 1u);
      WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded((WebKit::UserMediaProcessManager *)v8, v7);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
    }
    if (*(_DWORD *)(a1 + 192) != (a3 & 0x1800))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
      if (v10) {
        uint64_t v11 = (WebKit::WebPageProxy *)(v10 - 16);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = WebKit::WebPageProxy::logger(v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v14 = *(void *)(a1 + 248);
      uint64_t v75 = v13;
      uint64_t v76 = v15;
      uint64_t v77 = "captureStateChanged";
      uint64_t v78 = v14;
      if (*(unsigned char *)(v12 + 12))
      {
        uint64_t v16 = (WTF::String *)*(unsigned int *)(a1 + 192);
        WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v83, (WTF::Logger::LogSiteIdentifier *)&v75);
        WTF::String::String((WTF::String *)&v82, "state was: ");
        unsigned int v74 = v16;
        WTF::String::number(v16);
        WTF::String::String((WTF::String *)&v80, ", is now: ");
        WTF::String::number((WTF::String *)(a3 & 0x1800));
        v84[0] = v82;
        uint64_t v88 = v81;
        *(void *)long long buf = v83;
        uint64_t v86 = v79;
        uint64_t v87 = v80;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v84, (uint64_t *)&v88, (uint64_t *)&v87, (uint64_t *)&v86, &v85);
        if (!v85)
        {
          __break(0xC471u);
          return;
        }
        atomic_uint *volatile v18 = v79;
        uint64_t v79 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v17);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        atomic_uint *volatile v19 = v80;
        char v80 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v17);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        uint64_t v20 = v81;
        uint64_t v81 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v17);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        uint64_t v21 = v82;
        int v82 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v17);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
        uint64_t v22 = v83;
        uint64_t v83 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v17);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        uint64_t v23 = qword_1EB358820;
        uint64_t v24 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
        if (v24)
        {
          WTF::String::utf8();
          URL v26 = v84[0] ? (char *)v84[0] + 16 : 0;
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v26;
          _os_log_impl(&dword_1985F2000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          uint64_t v24 = v84[0];
          v84[0] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1) {
              uint64_t v24 = (WTF *)WTF::fastFree(v24, v25);
            }
            else {
              --*(_DWORD *)v24;
            }
          }
        }
        if (WebKit2LogWebRTC)
        {
          uint64_t v27 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v28 = *v27;
            if (v28) {
              break;
            }
            int v29 = *v27;
            atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v29, v28 | 1, memory_order_acquire, memory_order_acquire);
            if (v29 == v28)
            {
              uint64_t v30 = WTF::Logger::observers(v24);
              uint64_t v31 = *(unsigned int *)(v30 + 12);
              if (v31)
              {
                uint64_t v32 = *(uint64_t **)v30;
                uint64_t v73 = *(void *)v30 + 8 * v31;
                do
                {
                  uint64_t v33 = *v32;
                  *(_DWORD *)long long buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v75);
                  int v90 = 0;
                  WTF::String::String((WTF::String *)&v91, "state was: ");
                  int v92 = 0;
                  WTF::String::number((WTF::String *)v74);
                  int v94 = 0;
                  WTF::String::String((WTF::String *)v95, ", is now: ");
                  v95[2] = 0;
                  WTF::String::number((WTF::String *)(a3 & 0x1800));
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v84, (uint64_t)buf, 5uLL);
                  (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v33 + 16))(v33, &WebKit2LogWebRTC, 0, v84);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v84, v34);
                  for (uint64_t i = 72; i != -8; i -= 16)
                  {
                    URL v36 = *(WTF::StringImpl **)&buf[i];
                    *(void *)&buf[i] = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2) {
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v25);
                      }
                      else {
                        *(_DWORD *)v36 -= 2;
                      }
                    }
                  }
                  ++v32;
                }
                while (v32 != (uint64_t *)v73);
              }
              int v37 = 1;
              atomic_compare_exchange_strong_explicit(v27, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
              if (v37 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        uint64_t v38 = v85;
        uint64_t v85 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2) {
            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v25);
          }
          else {
            *(_DWORD *)v38 -= 2;
          }
        }
      }
      *(_DWORD *)(a1 + 192) = a3 & 0x1800;
      uint64_t v39 = *(void *)(v6 + 272);
      if ((a3 & 0x1800) != 0)
      {
        long long v40 = &WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key;
        {
          double v41 = 3600.0;
          goto LABEL_71;
        }
        WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl;
        double v41 = 3600.0;
      }
      else
      {
        long long v40 = &WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::key;
        {
          double v41 = 60.0;
          goto LABEL_71;
        }
        WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureStreamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
        double v41 = 60.0;
      }
      *uint64_t v72 = 1;
LABEL_71:
      double v42 = WebKit::valueForKey<double>(v39 + 40, v39 + 64, (WTF::StringImpl **)v40) * v41;
      if (v42 != *(double *)(a1 + 232))
      {
        uint64_t v43 = *(void *)(*(void *)(a1 + 64) + 8);
        if (v43) {
          int v44 = (WebKit::WebPageProxy *)(v43 - 16);
        }
        else {
          int v44 = 0;
        }
        uint64_t v45 = WebKit::WebPageProxy::logger(v44);
        uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        uint64_t v47 = *(void *)(a1 + 248);
        uint64_t v75 = v46;
        uint64_t v76 = v48;
        uint64_t v77 = "captureStateChanged";
        uint64_t v78 = v47;
        if (*(unsigned char *)(v45 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v87, (WTF::Logger::LogSiteIdentifier *)&v75);
          uint64_t v49 = (WTF::String *)WTF::String::String((WTF::String *)&v86, "watchdog set to ");
          WTF::String::number((uint64_t *)&v85, v49, v42);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, &v88);
          unsigned int v51 = v85;
          uint64_t v85 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2) {
              WTF::StringImpl::destroy(v51, v50);
            }
            else {
              *(_DWORD *)v51 -= 2;
            }
          }
          uint64_t v52 = v86;
          uint64_t v86 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2) {
              WTF::StringImpl::destroy(v52, v50);
            }
            else {
              *(_DWORD *)v52 -= 2;
            }
          }
          uint64_t v53 = v87;
          uint64_t v87 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2) {
              WTF::StringImpl::destroy(v53, v50);
            }
            else {
              *(_DWORD *)v53 -= 2;
            }
          }
          uint64_t v54 = qword_1EB358820;
          uint64_t v55 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
          if (v55)
          {
            WTF::String::utf8();
            uint64_t v57 = v84[0] ? (char *)v84[0] + 16 : 0;
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v57;
            _os_log_impl(&dword_1985F2000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            uint64_t v55 = v84[0];
            v84[0] = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 1) {
                uint64_t v55 = (WTF *)WTF::fastFree(v55, v56);
              }
              else {
                --*(_DWORD *)v55;
              }
            }
          }
          if (WebKit2LogWebRTC)
          {
            uint64_t v58 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v59 = *v58;
              if (v59) {
                break;
              }
              int v60 = *v58;
              atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v60, v59 | 1, memory_order_acquire, memory_order_acquire);
              if (v60 == v59)
              {
                uint64_t v61 = WTF::Logger::observers(v55);
                uint64_t v62 = *(unsigned int *)(v61 + 12);
                if (v62)
                {
                  uint64_t v63 = *(uint64_t **)v61;
                  uint64_t v64 = *(void *)v61 + 8 * v62;
                  do
                  {
                    uint64_t v65 = *v63;
                    *(_DWORD *)long long buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v75);
                    int v90 = 0;
                    int v66 = (WTF::String *)WTF::String::String((WTF::String *)&v91, "watchdog set to ");
                    int v92 = 0;
                    WTF::String::number(&v93, v66, v42);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v84, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v65 + 16))(v65, &WebKit2LogWebRTC, 0, v84);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v84, v67);
                    for (uint64_t j = 40; j != -8; j -= 16)
                    {
                      uint64_t v69 = *(WTF::StringImpl **)&buf[j];
                      *(void *)&buf[j] = 0;
                      if (v69)
                      {
                        if (*(_DWORD *)v69 == 2) {
                          WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v56);
                        }
                        else {
                          *(_DWORD *)v69 -= 2;
                        }
                      }
                    }
                    ++v63;
                  }
                  while (v63 != (uint64_t *)v64);
                }
                int v70 = 1;
                atomic_compare_exchange_strong_explicit(v58, (unsigned __int8 *)&v70, 0, memory_order_release, memory_order_relaxed);
                if (v70 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          uint64_t v71 = v88;
          uint64_t v88 = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 2) {
              WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v56);
            }
            else {
              *(_DWORD *)v71 -= 2;
            }
          }
        }
        *(double *)(a1 + 232) = v42;
        WTF::RunLoop::TimerBase::start();
      }
    }
  }
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::viewIsBecomingVisible(WebKit::UserMediaPermissionRequestManagerProxy *this, void *a2)
{
  uint64_t v2 = (WebKit::UserMediaPermissionRequestProxy **)*((void *)this + 17);
  unint64_t v9 = v2;
  int v4 = *((_DWORD *)this + 36);
  uint64_t v3 = *((unsigned int *)this + 37);
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  int v10 = v4;
  int v11 = v3;
  if (v3)
  {
    uint64_t v6 = 8 * v3;
    do
    {
      int v7 = *v2++;
      WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(this, v7);
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
}

void *WebKit::convertEnumerationToString(void *result, int a2)
{
  if ((_MergedGlobals_217[0] & 1) == 0)
  {
    _MergedGlobals_32 += 2;
    dword_1EB353040 += 2;
    qword_1E93CF8D8 = (uint64_t)&_MergedGlobals_32;
    unk_1E93CF8E0 = &dword_1EB353040;
    dword_1EB353060 += 2;
    qword_1E93CF8E8 = (uint64_t)&dword_1EB353060;
    _MergedGlobals_217[0] = 1;
  }
  uint64_t v2 = *(_DWORD **)&_MergedGlobals_217[8 * a2 + 8];
  if (v2) {
    *v2 += 2;
  }
  WTF::StringImpl *result = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1E93CF8D1 & 1) == 0)
  {
    dword_1EB353080 += 2;
    unk_1E93CF8F0 = &dword_1EB353080;
    dword_1EB3530A0 += 2;
    unk_1E93CF8F8 = &dword_1EB3530A0;
    dword_1EB3530C0 += 2;
    unk_1E93CF900 = &dword_1EB3530C0;
    dword_1EB3530E0 += 2;
    unk_1E93CF908 = &dword_1EB3530E0;
    dword_1EB353100 += 2;
    unk_1E93CF910 = &dword_1EB353100;
    dword_1EB353120 += 2;
    unk_1E93CF918 = &dword_1EB353120;
    dword_1EB353140 += 2;
    unk_1E93CF920 = &dword_1EB353140;
    byte_1E93CF8D1 = 1;
  }
  uint64_t v2 = *(_DWORD **)&_MergedGlobals_217[8 * a2 + 32];
  if (v2) {
    *v2 += 2;
  }
  WTF::StringImpl *result = v2;
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::UserMediaPermissionRequestProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t *a13)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9D7E78;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = a5;
  *(void *)(a1 + 48) = a6;
  *(void *)(a1 + 56) = a7;
  uint64_t v19 = *a8;
  *a8 = 0;
  *(void *)(a1 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v19;
  uint64_t v20 = *a9;
  *a9 = 0;
  *(void *)(a1 + 72) = v20;
  *(_OWORD *)(a1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  uint64_t v21 = *a11;
  *a11 = 0;
  *(void *)(a1 + 8WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v21;
  LODWORD(v21) = *((_DWORD *)a11 + 2);
  *((_DWORD *)a11 + 2) = 0;
  *(_DWORD *)(a1 + 88) = v21;
  LODWORD(v21) = *((_DWORD *)a11 + 3);
  *((_DWORD *)a11 + 3) = 0;
  *(_DWORD *)(a1 + 92) = v21;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v22 = *a10;
  *a10 = 0;
  *(void *)(a1 + 96) = v22;
  LODWORD(v22) = *((_DWORD *)a10 + 2);
  *((_DWORD *)a10 + 2) = 0;
  *(_DWORD *)(a1 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v22;
  LODWORD(v22) = *((_DWORD *)a10 + 3);
  *((_DWORD *)a10 + 3) = 0;
  *(_DWORD *)(a1 + 108) = v22;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)a12;
  uint64_t v23 = WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a1 + 120, a12 + 8);
  *(_OWORD *)(v23 + 94WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0u;
  uint64_t v24 = *(void *)(a12 + 952);
  *(void *)(a12 + 952) = 0;
  *(void *)(v23 + 94WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v24;
  LODWORD(v2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_DWORD *)(a12 + 960);
  *(_DWORD *)(a12 + 96WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(_DWORD *)(a1 + 1072) = v24;
  LODWORD(v2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_DWORD *)(a12 + 964);
  *(_DWORD *)(a12 + 96WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(_DWORD *)(a1 + 1076) = v24;
  *(unsigned char *)(a1 + 108WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(unsigned char *)(a12 + 968);
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a1 + 1088, a12 + 976);
  *(_OWORD *)(a1 + 2032) = 0u;
  uint64_t v25 = *(void *)(a12 + 1920);
  *(void *)(a12 + 192WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *(void *)(a1 + 2032) = v25;
  LODWORD(v25) = *(_DWORD *)(a12 + 1928);
  *(_DWORD *)(a12 + 1928) = 0;
  *(_DWORD *)(a1 + 204WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v25;
  LODWORD(v25) = *(_DWORD *)(a12 + 1932);
  *(_DWORD *)(a12 + 1932) = 0;
  *(_DWORD *)(a1 + 204WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v25;
  *(unsigned char *)(a1 + 2048) = *(unsigned char *)(a12 + 1936);
  *(_OWORD *)(a1 + 2056) = *(_OWORD *)(a12 + 1944);
  *(unsigned char *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 208WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0u;
  uint64_t v26 = *a13;
  *a13 = 0;
  *(void *)(a1 + 2096) = v26;
  return a1;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::allow(WebKit::UserMediaPermissionRequestProxy *this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  if (*a2 && *((_DWORD *)*a2 + 1)) {
    WebKit::setDeviceAsFirst((uint64_t)this + 96, a2, a3);
  }
  if (*(void *)a3 && *(_DWORD *)(*(void *)a3 + 4)) {
    WebKit::setDeviceAsFirst((uint64_t)this + 80, (const WTF::StringImpl **)a3, a3);
  }

  return WebKit::UserMediaPermissionRequestProxy::allow(this);
}

uint64_t WebKit::setDeviceAsFirst(uint64_t result, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (!*(_DWORD *)(result + 12)) {
    goto LABEL_41;
  }
  uint64_t v4 = result;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t result = WTF::equal(*(WTF **)(*(void *)v4 + v5), *a2, a3);
    if (result) {
      break;
    }
    ++v6;
    v5 += 40;
    if (v6 >= *(unsigned int *)(v4 + 12)) {
      goto LABEL_41;
    }
  }
  if (v5)
  {
    if (v6 < *(unsigned int *)(v4 + 12))
    {
      unint64_t v8 = *(WTF::StringImpl **)v4;
      unint64_t v9 = *(void *)v4 + v5;
      int v10 = *(WTF::StringImpl **)v9;
      if (*(void *)v9) {
        *(_DWORD *)v10 += 2;
      }
      uint64_t v26 = v10;
      char v27 = *(unsigned char *)(v9 + 8);
      int v11 = *(WTF::StringImpl **)(v9 + 16);
      if (v11) {
        *(_DWORD *)v11 += 2;
      }
      int v28 = v11;
      uint64_t v12 = (char *)v8 + v5;
      uint64_t v13 = *(WTF::StringImpl **)((char *)v8 + v5 + 24);
      if (v13)
      {
        int v14 = *(_DWORD *)v13;
        *(_DWORD *)v13 += 2;
        int v29 = v13;
        int v30 = *((_DWORD *)v12 + 8);
        *((void *)v12 + 3) = 0;
        if (v14)
        {
          *(_DWORD *)uint64_t v13 = v14;
        }
        else
        {
          WTF::StringImpl::destroy(v13, v7);
          int v11 = *(WTF::StringImpl **)(v9 + 16);
        }
      }
      else
      {
        int v29 = 0;
        int v30 = *((_DWORD *)v12 + 8);
        *((void *)v12 + 3) = 0;
      }
      *(void *)(v9 + 16) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v15 = *(WTF::StringImpl **)v9;
      *(void *)unint64_t v9 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v7);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping((WTF::StringImpl *)((char *)v8 + v5 + 40), (WTF::StringImpl *)(*(void *)v4 + 40 * *(unsigned int *)(v4 + 12)), v9);
      int v16 = *(_DWORD *)(v4 + 8);
      uint64_t v17 = (*(_DWORD *)(v4 + 12) - 1);
      *(_DWORD *)(v4 + 12) = v17;
      if (v17 == v16)
      {
        unint64_t v18 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v17 + 1, (unint64_t)&v26);
        LODWORD(v17) = *(_DWORD *)(v4 + 12);
      }
      else
      {
        unint64_t v18 = (unint64_t)&v26;
      }
      uint64_t v19 = *(WTF::StringImpl **)v4;
      WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping(*(WTF::StringImpl **)v4, (WTF::StringImpl *)(*(void *)v4 + 40 * v17), *(void *)v4 + 40);
      uint64_t v21 = *(void *)v18;
      *(void *)unint64_t v18 = 0;
      *(void *)uint64_t v19 = v21;
      *((unsigned char *)v19 + 8) = *(unsigned char *)(v18 + 8);
      uint64_t v22 = *(void *)(v18 + 16);
      *(void *)(v18 + 16) = 0;
      *((void *)v19 + 2) = v22;
      uint64_t v23 = *(void *)(v18 + 24);
      *(void *)(v18 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *((void *)v19 + 3) = v23;
      *((_DWORD *)v19 + 8) = *(_DWORD *)(v18 + 32);
      ++*(_DWORD *)(v4 + 12);
      uint64_t v24 = v29;
      int v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v20);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      uint64_t v25 = v28;
      int v28 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v20);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      uint64_t result = (uint64_t)v26;
      uint64_t v26 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      return result;
    }
LABEL_41:
    __break(0xC471u);
  }
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::allow(WebKit::UserMediaPermissionRequestProxy *this)
{
  uint64_t result = (WebKit::UserMediaPermissionRequestManagerProxy *)*((void *)this + 2);
  if (result)
  {
    WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(result, this);
    uint64_t v3 = *(uint64_t (**)(WebKit::UserMediaPermissionRequestProxy *))(*(void *)this + 40);
    return (WebKit::UserMediaPermissionRequestManagerProxy *)v3(this);
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::invalidate(uint64_t this)
{
  *(void *)(this + 16) = 0;
  uint64_t v1 = *(void *)(this + 2096);
  if (v1)
  {
    *(void *)(this + 2096) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v2(v1);
  }
  return this;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::videoDeviceUIDs@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = *(unsigned int *)(this + 92);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(void *)a2 = this;
      uint64_t v5 = *(unsigned int *)(v4 + 92);
      if (v5)
      {
        uint64_t v6 = 0;
        int v7 = *(_DWORD ***)(v4 + 80);
        uint64_t v8 = 40 * v5;
        do
        {
          unint64_t v9 = *v7;
          if (*v7) {
            *v9 += 2;
          }
          int v10 = v6 + 1;
          *(void *)(this + 8 * v6) = v9;
          v7 += 5;
          ++v6;
          v8 -= 40;
        }
        while (v8);
        *(_DWORD *)(a2 + 12) = v10;
      }
    }
  }
  return this;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::audioDeviceUIDs@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = *(unsigned int *)(this + 108);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(void *)a2 = this;
      uint64_t v5 = *(unsigned int *)(v4 + 108);
      if (v5)
      {
        uint64_t v6 = 0;
        int v7 = *(_DWORD ***)(v4 + 96);
        uint64_t v8 = 40 * v5;
        do
        {
          unint64_t v9 = *v7;
          if (*v7) {
            *v9 += 2;
          }
          int v10 = v6 + 1;
          *(void *)(this + 8 * v6) = v9;
          v7 += 5;
          ++v6;
          v8 -= 40;
        }
        while (v8);
        *(_DWORD *)(a2 + 12) = v10;
      }
    }
  }
  return this;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::promptForGetDisplayMedia(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16)
    && (char v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1), a2 == 2)
    && (v4 & 1) != 0)
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 16) + 64) + 8);
    if (v5) {
      uint64_t v6 = (WebKit::WebPageProxy *)(v5 - 16);
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = (_DWORD *)(*(void *)(a1 + 72) + 8);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    uint64_t v8 = (WebKit::UserMediaPermissionRequestManagerProxy *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v8 = &unk_1EE9D7CC0;
    *((void *)v8 + 1) = a1;
    *((void *)v8 + 2) = a1;
    int v10 = v8;
    WebKit::alertForPermission(v6, (__CFString *)6, v7, (uint64_t *)&v10);
    uint64_t result = v10;
    int v10 = 0;
    if (result) {
      return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return WebKit::UserMediaPermissionRequestProxy::deny((void *)a1, 5);
  }
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(WebKit::UserMediaPermissionRequestProxy *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    if (*((_DWORD *)this + 27))
    {
      if (*((unsigned __int8 *)this + 112) - 1 >= 2)
      {
        if (*((_DWORD *)this + 23)) {
          uint64_t v3 = 1;
        }
        else {
          uint64_t v3 = 2;
        }
      }
      else
      {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 64) + 8);
    if (v5) {
      uint64_t v6 = (WebKit::WebPageProxy *)(v5 - 16);
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = (_DWORD *)(*((void *)this + 9) + 8);
    CFRetain(*((CFTypeRef *)this + 1));
    uint64_t v8 = (WebKit::UserMediaPermissionRequestManagerProxy *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v8 = &unk_1EE9D7CE8;
    *((void *)v8 + 1) = this;
    *((void *)v8 + 2) = this;
    unint64_t v9 = v8;
    WebKit::alertForPermission(v6, (__CFString *)v3, v7, (uint64_t *)&v9);
    uint64_t result = v9;
    unint64_t v9 = 0;
    if (result) {
      return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return WebKit::UserMediaPermissionRequestProxy::deny(this, 5);
  }
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::doDefaultAction(WebKit::UserMediaPermissionRequestProxy *this)
{
  if (*((unsigned __int8 *)this + 112) - 1 > 1) {
    return WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(this);
  }
  else {
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestProxy *, uint64_t))(*(void *)this + 24))(this, 2);
  }
}

uint64_t WebKit::UserMediaPermissionRequestProxy::canRequestDisplayCapturePermission(WebKit::UserMediaPermissionRequestProxy *this)
{
  return 1;
}

uint64_t WebKit::UserMediaProcessManager::setCaptureEnabled(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 32) != a2)
  {
    *(unsigned char *)(this + 32) = a2;
    if ((a2 & 1) == 0)
    {
      uint64_t v2 = WTF::fastMalloc((WTF *)0x10);
      *(void *)uint64_t v2 = &unk_1EE9D7D38;
      uint64_t v3 = v2;
      WebKit::UserMediaPermissionRequestManagerProxy::forEach(&v3);
      return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  return this;
}

uint64_t WebKit::UserMediaProcessManager::updateCaptureDevices(WebCore::RealtimeMediaSourceCenter *a1, char a2)
{
  WebCore::RealtimeMediaSourceCenter::singleton(a1);
  uint64_t v4 = *((void *)a1 + 1);
  if (v4) {
    goto LABEL_6;
  }
  uint64_t v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v4 = 1;
  *(void *)(v4 + 8) = a1;
  uint64_t v6 = (unsigned int *)*((void *)a1 + 1);
  *((void *)a1 + 1) = v4;
  if (!v6) {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  uint64_t v4 = *((void *)a1 + 1);
  if (v4) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  uint64_t v7 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v7 = &unk_1EE9D7D88;
  *(void *)(v7 + 8) = v4;
  *(void *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a2;
  uint64_t v9 = v7;
  WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices();
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::UserMediaProcessManager::devicesChanged(WebKit::UserMediaProcessManager *this)
{
  return WebKit::UserMediaProcessManager::updateCaptureDevices(this, 1);
}

void WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(WebKit::UserMediaProcessManager *this)
{
  uint64_t v1 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(void)::onceFlag, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(void)::$_0 &&>>);
  }
}

void WebKit::VisitedLinkStore::~VisitedLinkStore(WebKit::VisitedLinkStore *this)
{
  uint64_t v2 = (unsigned int ***)((char *)this + 48);
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)this + 6))
  {
    *((void *)this + 15) = &unk_1EE9B3390;
    uint64_t v3 = *((void *)this + 18);
    *((void *)this + 18) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    WTF::RunLoop::TimerBase::~TimerBase((WebKit::VisitedLinkStore *)((char *)this + 120));
    uint64_t v5 = (WTF *)*((void *)this + 13);
    if (v5)
    {
      *((void *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v5, v4);
    }
    uint64_t v6 = (unsigned int *)*((void *)this + 10);
    *((void *)this + 1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v6);
    }
    if (*v2) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v2, v4);
    }
    *((void *)this + 2) = &unk_1EE9B71B0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v4);
  }
  else
  {
    __break(0xC471u);
  }
}

{
  uint64_t vars8;

  WebKit::VisitedLinkStore::~VisitedLinkStore(this);

  JUMPOUT(0x199740C10);
}

void non-virtual thunk to'WebKit::VisitedLinkStore::~VisitedLinkStore(WebKit::VisitedLinkStore *this)
{
}

{
  WebKit::VisitedLinkStore::~VisitedLinkStore((WebKit::VisitedLinkStore *)((char *)this - 40));
}

{
  uint64_t vars8;

  WebKit::VisitedLinkStore::~VisitedLinkStore((WebKit::VisitedLinkStore *)((char *)this - 16));

  JUMPOUT(0x199740C10);
}

{
  uint64_t vars8;

  WebKit::VisitedLinkStore::~VisitedLinkStore((WebKit::VisitedLinkStore *)((char *)this - 40));

  JUMPOUT(0x199740C10);
}

void WebKit::VisitedLinkStore::sendStoreHandleToProcess(WebKit::VisitedLinkStore *this, WebKit::WebProcessProxy *a2)
{
  WebCore::SharedMemory::createHandle();
  if (v6)
  {
    uint64_t v4 = v5;
    WebKit::AuxiliaryProcessProxy::send<Messages::VisitedLinkTableController::SetVisitedLinkTable>((uint64_t)a2, (unint64_t *)&v4, *((void *)this + 4), 0);
    if (v6) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
    }
  }
}

unsigned __int8 *WebKit::VisitedLinkStore::removeProcess(WebKit::VisitedLinkStore *this, WebKit::WebProcessProxy *a2)
{
  uint64_t result = (unsigned __int8 *)WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)this + 48, a2);
  if (result)
  {
    uint64_t v5 = *((void *)this + 4);
    return IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)a2 + 152, 0x9Cu, v5);
  }
  return result;
}

void *WebKit::VisitedLinkStore::removeAll(WebKit::VisitedLinkStore *this)
{
  WebKit::SharedStringHashStore::clear((WebKit::VisitedLinkStore *)((char *)this + 64));
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 6, &v13);
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    uint64_t v4 = v2 + 8 * v3;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v8 = (char *)this + 48;
  uint64_t v9 = v4;
  uint64_t v10 = v4;
  uint64_t v11 = v4;
  uint64_t v12 = v2 + 8 * v3;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v8);
  while (v14 != v9)
  {
    uint64_t v6 = *(void *)(*(void *)v14 + 8);
    char v7 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::VisitedLinkTableController::RemoveAllVisitedLinks>(v6, (uint64_t)&v7, *((void *)this + 4), 0);
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v13);
  }
  return result;
}

void WebKit::VisitedLinkStore::addVisitedLinkHashFromPage(uint64_t a1, uint64_t a2, int a3)
{
  WebKit::WebProcessProxy::webPage(a2, &v6);
  if (!v6 || (int v5 = *(unsigned __int8 *)(v6 + 897), CFRelease(*(CFTypeRef *)(v6 + 8)), v5))
  {
    WebKit::SharedStringHashStore::scheduleAddition((WebKit::SharedStringHashStore *)(a1 + 64), a3);
  }
}

void *WebKit::VisitedLinkStore::didInvalidateSharedMemory(WebKit::VisitedLinkStore *this)
{
  uint64_t v2 = (char *)this + 48;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 6, &v12);
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  char v7 = v2;
  uint64_t v8 = v5;
  uint64_t v9 = v5;
  uint64_t v10 = v5;
  uint64_t v11 = v3 + 8 * v4;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    WebKit::VisitedLinkStore::sendStoreHandleToProcess(this, *(WebKit::WebProcessProxy **)(*(void *)v13 + 8));
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return result;
}

void *non-virtual thunk to'WebKit::VisitedLinkStore::didInvalidateSharedMemory(WebKit::VisitedLinkStore *this)
{
  return WebKit::VisitedLinkStore::didInvalidateSharedMemory((WebKit::VisitedLinkStore *)((char *)this - 40));
}

void *WebKit::VisitedLinkStore::didUpdateSharedStringHashes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 48;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 48), &v27);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = v7 + 8 * v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v22 = v6;
  uint64_t v23 = v9;
  uint64_t v24 = v9;
  uint64_t v25 = v9;
  uint64_t v26 = v7 + 8 * v8;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v22);
  for (uint64_t i = v28; v28 != v23; uint64_t i = v28)
  {
    uint64_t v12 = *(void *)(*(void *)i + 8);
    uint64_t v13 = *(void *)(a1 + 32);
    if (*(_DWORD *)(a2 + 12) <= 0x14u && *(_DWORD *)(a3 + 12) == 0)
    {
      int v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v16 = 1554;
      *((void *)v16 + 1) = v13;
      *((void *)v16 + 66) = (char *)v16 + 16;
      *((void *)v16 + 67) = 512;
      *((void *)v16 + 68) = 0;
      *((void *)v16 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v16 + 69) = 0;
      IPC::Encoder::encodeHeader(v16);
      uint64_t v31 = v16;
      IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v16, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    else
    {
      uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v15 = 1551;
      *((void *)v15 + 1) = v13;
      *((void *)v15 + 66) = (char *)v15 + 16;
      *((void *)v15 + 67) = 512;
      *((void *)v15 + 68) = 0;
      *((void *)v15 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v15 + 69) = 0;
      IPC::Encoder::encodeHeader(v15);
      uint64_t v31 = v15;
    }
    LOBYTE(v29) = 0;
    char v30 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v31, 0, (uint64_t)&v29, 1);
    if (v30)
    {
      uint64_t v18 = v29;
      uint64_t v29 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
    }
    uint64_t v19 = v31;
    uint64_t v31 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v17);
      WTF::fastFree(v20, v21);
    }
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v27);
  }
  return result;
}

void *non-virtual thunk to'WebKit::VisitedLinkStore::didUpdateSharedStringHashes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::VisitedLinkStore::didUpdateSharedStringHashes(a1 - 40, a2, a3);
}

void WebKit::WebBackForwardCache::~WebBackForwardCache(WebKit::WebBackForwardCache *this)
{
  WebKit::WebBackForwardCache::clear(this);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)this + 24, v2);
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
}

uint64_t WebKit::WebBackForwardCache::clear(WebKit::WebBackForwardCache *this)
{
  uint64_t v2 = qword_1EB357C90;
  if (os_log_type_enabled((os_log_t)qword_1EB357C90, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::clear", (uint8_t *)&v10, 2u);
  }
  uint64_t v10 = *((void *)this + 3);
  long long v4 = *((_OWORD *)this + 2);
  *((void *)this + 3) = 0;
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *((void *)this + 5) = 0;
  long long v11 = v4;
  uint64_t v5 = *((void *)this + 6);
  uint64_t v12 = v5;
  uint64_t v6 = (void *)v4;
  if ((void)v4)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(*v6 + 8);
      if (v7) {
        break;
      }
      uint64_t v6 = (void *)v6[2];
      if (!v6) {
        goto LABEL_12;
      }
    }
LABEL_7:
    std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v7 + 416), 0);
    while (1)
    {
      uint64_t v6 = (void *)v6[2];
      if (!v6) {
        break;
      }
      uint64_t v7 = *(void *)(*v6 + 8);
      if (v7)
      {
        LODWORD(v5) = v5 + 1;
        goto LABEL_7;
      }
    }
    LODWORD(v12) = v5 + 1;
  }
LABEL_12:
  uint64_t result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)&v10, v3);
  if (v10) {
    return WTF::fastFree((WTF *)(v10 - 16), v9);
  }
  return result;
}

WTF::StringImpl *WebKit::WebBackForwardCache::addEntry(uint64_t a1, uint64_t a2, WebKit::WebBackForwardCacheEntry **a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (WebKit::WebBackForwardCacheEntry **)(a2 + 416);
  if (*(void *)(a2 + 416)) {
    WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebBackForwardListItem>(a1 + 24, a2);
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100](v6, v7);
  uint64_t v8 = (uint64_t *)(a1 + 24);
  unsigned int v9 = *(_DWORD *)(a1 + 52);
  unsigned int v10 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v10;
  if (v10 > v9) {
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1 + 24);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  long long v11 = *(atomic_uint **)(a2 + 16);
  atomic_fetch_add(v11, 1u);
  atomic_fetch_add(v11, 1u);
  uint64_t v28 = (WTF *)v11;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)(a1 + 24), (uint64_t *)&v28, (uint64_t)buf);
  uint64_t v13 = (unsigned int *)v28;
  uint64_t v28 = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  if (v11 && atomic_fetch_add(v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v11);
    WTF::fastFree((WTF *)v11, v12);
  }
  WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1 + 24);
  if (*v8)
  {
    unsigned int v20 = *(_DWORD *)(a1 + 16);
    uint64_t v14 = (int *)(a1 + 16);
    if (*(_DWORD *)(*v8 - 12) > v20)
    {
      uint64_t v21 = WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::tryTakeFirst((uint64_t)v8);
      if (v21)
      {
        uint64_t v22 = v21;
        CFRetain(*(CFTypeRef *)(v21 + 8));
        std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v22 + 416), 0);
        CFRelease(*(CFTypeRef *)(v22 + 8));
      }
    }
  }
  else
  {
    uint64_t v14 = (int *)(a1 + 16);
  }
  uint64_t v15 = qword_1EB357C90;
  uint64_t result = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB357C90, OS_LOG_TYPE_DEFAULT);
  if (result)
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*(void *)(a2 + 40), 45, *(void *)(a2 + 32), &v27);
    WTF::String::utf8();
    if (v28) {
      uint64_t v17 = (char *)v28 + 16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(void *)(a2 + 416);
    if (v18) {
      BOOL v19 = *(void *)(v18 + 32) != 0;
    }
    else {
      BOOL v19 = 0;
    }
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)v8);
    uint64_t v23 = *v8;
    if (*v8) {
      LODWORD(v23) = *(_DWORD *)(v23 - 12);
    }
    int v24 = *v14;
    *(_DWORD *)long long buf = 136315906;
    char v30 = v17;
    __int16 v31 = 1024;
    BOOL v32 = v19;
    __int16 v33 = 1024;
    int v34 = v23;
    __int16 v35 = 1024;
    int v36 = v24;
    _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::addEntry: item=%s, hasSuspendedPage=%d, size=%u/%u", buf, 0x1Eu);
    uint64_t v26 = v28;
    uint64_t v28 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1) {
        WTF::fastFree(v26, v25);
      }
      else {
        --*(_DWORD *)v26;
      }
    }
    uint64_t result = v27;
    uint64_t v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebBackForwardListItem>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)result;
  unsigned int v4 = *(_DWORD *)(result + 28);
  unsigned int v5 = *(_DWORD *)(result + 24) + 1;
  *(_DWORD *)(result + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v5;
  if (v5 > v4) {
    uint64_t result = WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(result);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 && *(void *)(v6 + 8))
  {
    unsigned int v9 = *(WTF **)(a2 + 16);
    uint64_t result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, (uint64_t *)&v9);
    uint64_t v7 = *v3;
    if (*v3) {
      v7 += 8 * *(unsigned int *)(v7 - 4);
    }
    if (v7 != result)
    {
      uint64_t v8 = *(WTF **)result;
      if (*(void *)result)
      {
        unsigned int v9 = *(WTF **)result;
        WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(v3, (void **)&v9);
        return WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete((uint64_t)v3, v8);
      }
    }
  }
  return result;
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCache::addEntry(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(*(void *)(*a3 + 40) + 176);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x48);
  long long v11 = (WebKit::WebBackForwardCacheEntry *)WebKit::WebBackForwardCacheEntry::WebBackForwardCacheEntry(v7, a1, *(void *)(a2 + 32), *(void *)(a2 + 40), v6, a3);
  WebKit::WebBackForwardCache::addEntry(a1, a2, &v11);
  uint64_t result = v11;
  if (v11)
  {
    WebKit::WebBackForwardCacheEntry::~WebBackForwardCacheEntry(v11);
    return (WebKit::WebBackForwardCacheEntry *)WTF::fastFree(v9, v10);
  }
  return result;
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCache::addEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x48);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v13 = 0;
  uint64_t v12 = (WebKit::WebBackForwardCacheEntry *)WebKit::WebBackForwardCacheEntry::WebBackForwardCacheEntry(v6, a1, v7, v8, a3, &v13);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  WebKit::WebBackForwardCache::addEntry(a1, a2, &v12);
  uint64_t result = v12;
  if (v12)
  {
    WebKit::WebBackForwardCacheEntry::~WebBackForwardCacheEntry(v12);
    return (WebKit::WebBackForwardCacheEntry *)WTF::fastFree(v10, v11);
  }
  return result;
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCache::removeEntry(WebKit::WebBackForwardCache *this, WebKit::WebBackForwardListItem *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (void *)((char *)this + 24);
  WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebBackForwardListItem>((uint64_t)this + 24, (uint64_t)a2);
  unsigned int v5 = qword_1EB357C90;
  if (os_log_type_enabled((os_log_t)qword_1EB357C90, OS_LOG_TYPE_DEFAULT))
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*((void *)a2 + 5), 45, *((void *)a2 + 4), &v13);
    WTF::String::utf8();
    if (v14) {
      uint64_t v6 = (char *)v14 + 16;
    }
    else {
      uint64_t v6 = 0;
    }
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)v4);
    int v7 = 0;
    if (*v4) {
      int v7 = *(_DWORD *)(*v4 - 12);
    }
    int v8 = *((_DWORD *)this + 4);
    *(_DWORD *)long long buf = 136315650;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    __int16 v19 = 1024;
    int v20 = v8;
    _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::removeEntry: item=%s, size=%u/%u", buf, 0x18u);
    unsigned int v10 = v14;
    uint64_t v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        WTF::fastFree(v10, v9);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
    long long v11 = v13;
    uint64_t v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  return std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)a2 + 52, 0);
}

uint64_t WebKit::WebBackForwardCache::removeEntry(WebKit::WebBackForwardCache *this, WebKit::SuspendedPageProxy *a2)
{
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v4 = &unk_1EE9D7DB0;
  v4[1] = a2;
  int v7 = v4;
  WebKit::WebBackForwardCache::removeEntriesMatching((uint64_t)this, &v7);
  unsigned int v5 = *(uint64_t (**)(void *))(*v4 + 8);

  return v5(v4);
}

uint64_t WebKit::WebBackForwardCache::removeEntriesMatching(uint64_t a1, void *a2)
{
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v5 = a1 + 24;
    while (1)
    {
      uint64_t v6 = *(void *)(*v2 + 8);
      if (v6) {
        break;
      }
      uint64_t v2 = (void *)v2[2];
      if (!v2) {
        return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, a2);
      }
    }
LABEL_6:
    if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v6))
    {
      uint64_t v7 = HIDWORD(v17);
      if (HIDWORD(v17) == v17)
      {
        unint64_t v8 = HIDWORD(v17) + ((unint64_t)HIDWORD(v17) >> 2);
        if (v8 >= 0x10) {
          unint64_t v9 = v8 + 1;
        }
        else {
          unint64_t v9 = 16;
        }
        if (v9 <= (unint64_t)HIDWORD(v17) + 1) {
          unint64_t v10 = HIDWORD(v17) + 1;
        }
        else {
          unint64_t v10 = v9;
        }
        WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v16, v10);
        uint64_t v7 = HIDWORD(v17);
      }
      long long v11 = &v16[v7];
      CFRetain(*(CFTypeRef *)(v6 + 8));
      uint64_t *v11 = v6;
      ++HIDWORD(v17);
    }
    while (1)
    {
      uint64_t v2 = (void *)v2[2];
      if (!v2) {
        break;
      }
      uint64_t v6 = *(void *)(*v2 + 8);
      if (v6)
      {
        ++*(_DWORD *)(a1 + 48);
        goto LABEL_6;
      }
    }
    ++*(_DWORD *)(a1 + 48);
    if (HIDWORD(v17))
    {
      uint64_t v12 = v16;
      uint64_t v13 = 8 * HIDWORD(v17);
      do
      {
        WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebBackForwardListItem>(v5, *v12);
        uint64_t v14 = *v12++;
        std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v14 + 416), 0);
        v13 -= 8;
      }
      while (v13);
    }
  }
  return WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, a2);
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCache::takeSuspendedPage@<X0>(WebKit::WebBackForwardCache *this@<X0>, WebKit::WebBackForwardListItem *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = qword_1EB357C90;
  if (os_log_type_enabled((os_log_t)qword_1EB357C90, OS_LOG_TYPE_DEFAULT))
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*((void *)a2 + 5), 45, *((void *)a2 + 4), &v13);
    WTF::String::utf8();
    if (v14) {
      uint64_t v7 = (char *)v14 + 16;
    }
    else {
      uint64_t v7 = 0;
    }
    *(_DWORD *)long long buf = 136315138;
    int v16 = v7;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::takeSuspendedPage: item=%s", buf, 0xCu);
    unint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1) {
        WTF::fastFree(v9, v8);
      }
      else {
        --*(_DWORD *)v9;
      }
    }
    unint64_t v10 = v13;
    uint64_t v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  long long v11 = (void *)*((void *)a2 + 52);
  void v11[2] = 0;
  v11[3] = 0;
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v11 + 5));
  *a3 = v11[4];
  v11[4] = 0;
  return WebKit::WebBackForwardCache::removeEntry(this, a2);
}

uint64_t WebKit::WebBackForwardCache::removeEntriesForProcess(WebKit::WebBackForwardCache *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v3 = *((void *)a2 + 22);
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v4 = &unk_1EE9D7DD8;
  v4[1] = v3;
  uint64_t v7 = v4;
  WebKit::WebBackForwardCache::removeEntriesMatching((uint64_t)this, &v7);
  uint64_t v5 = *(uint64_t (**)(void *))(*v4 + 8);

  return v5(v4);
}

uint64_t WebKit::WebBackForwardCache::removeEntriesForSession(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v4 = &unk_1EE9D7E00;
  v4[1] = a2;
  uint64_t v7 = v4;
  WebKit::WebBackForwardCache::removeEntriesMatching(a1, &v7);
  uint64_t v5 = *(uint64_t (**)(void *))(*v4 + 8);

  return v5(v4);
}

uint64_t WebKit::WebBackForwardCache::removeEntriesForPage(WebKit::WebBackForwardCache *this, WebKit::WebPageProxy *a2)
{
  uint64_t v3 = *(void *)(*((void *)a2 + 4) + 760);
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v4 = &unk_1EE9D7E28;
  v4[1] = v3;
  uint64_t v7 = v4;
  WebKit::WebBackForwardCache::removeEntriesMatching((uint64_t)this, &v7);
  uint64_t v5 = *(uint64_t (**)(void *))(*v4 + 8);

  return v5(v4);
}

uint64_t WebKit::WebBackForwardCache::removeEntriesForPageAndProcess(WebKit::WebBackForwardCache *this, WebKit::WebPageProxy *a2, WebKit::WebProcessProxy *a3)
{
  uint64_t v4 = *(void *)(*((void *)a2 + 4) + 760);
  uint64_t v5 = *((void *)a3 + 22);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v6 = &unk_1EE9D7E50;
  v6[1] = v4;
  _DWORD v6[2] = v5;
  unint64_t v9 = v6;
  WebKit::WebBackForwardCache::removeEntriesMatching((uint64_t)this, &v9);
  uint64_t v7 = *(uint64_t (**)(void *))(*v6 + 8);

  return v7(v6);
}

uint64_t WebKit::WebBackForwardCache::pruneToSize(WebKit::WebBackForwardCache *this, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB357C90;
  if (os_log_type_enabled((os_log_t)qword_1EB357C90, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::pruneToSize(%u)", (uint8_t *)v10, 8u);
  }
  uint64_t v5 = (uint64_t *)((char *)this + 24);
  uint64_t result = WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)this + 24);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    do
    {
      if (*(_DWORD *)(v7 - 12) <= a2) {
        break;
      }
      uint64_t v8 = WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::tryTakeFirst((uint64_t)v5);
      if (v8)
      {
        uint64_t v9 = v8;
        CFRetain(*(CFTypeRef *)(v8 + 8));
        std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v9 + 416), 0);
        CFRelease(*(CFTypeRef *)(v9 + 8));
      }
      uint64_t result = WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)v5);
      uint64_t v7 = *v5;
    }
    while (*v5);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)106>::type()
{
  return 106;
}

const char *WebKit::UserMediaPermissionRequestManagerProxy::logClassName(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  return "UserMediaPermissionRequestManagerProxy";
}

void WebKit::UserMediaProcessManager::~UserMediaProcessManager(WebKit::UserMediaProcessManager *this, void *a2)
{
  *(void *)this = &unk_1EE9D78F0;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);

  WebCore::RealtimeMediaSourceCenterObserver::~RealtimeMediaSourceCenterObserver(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE9D78F0;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WebCore::RealtimeMediaSourceCenterObserver::~RealtimeMediaSourceCenterObserver(this);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)109>::type()
{
  return 109;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl *)-1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  uint64_t v4 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (char *)(a3 + a2 - result);
      do
      {
        uint64_t v7 = (char *)a2 + v5;
        uint64_t v8 = &v6[v5];
        uint64_t v9 = *(void *)((char *)a2 + v5 - 40);
        *((void *)v7 - 5) = 0;
        *((void *)v8 - 5) = v9;
        *(v8 - 32) = *((unsigned char *)a2 + v5 - 32);
        uint64_t v10 = *(void *)((char *)a2 + v5 - 24);
        *((void *)v7 - 3) = 0;
        *((void *)v8 - 3) = v10;
        uint64_t v11 = *(void *)((char *)a2 + v5 - 16);
        *((void *)v7 - 2) = 0;
        *((void *)v8 - 2) = v11;
        *((_DWORD *)v8 - 2) = *(_DWORD *)((char *)a2 + v5 - 8);
        uint64_t v12 = *(WTF::StringImpl **)((char *)a2 + v5 - 16);
        *((void *)v7 - 2) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, a2);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        uint64_t v13 = (WTF::StringImpl *)*((void *)v7 - 3);
        *((void *)v7 - 3) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, a2);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
        uint64_t result = (WTF::StringImpl *)*((void *)v7 - 5);
        *((void *)v7 - 5) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        v5 -= 40;
      }
      while ((WTF::StringImpl *)((char *)a2 + v5) != v4);
    }
  }
  else
  {
    return WTF::VectorMover<false,WebCore::CaptureDevice>::move(result, a2, a3);
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CaptureDevice>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      *(unsigned char *)(a3 + 8) = *((unsigned char *)v5 + 8);
      uint64_t v7 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v7;
      uint64_t v8 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v8;
      *(_DWORD *)(a3 + 32) = *((_DWORD *)v5 + 8);
      uint64_t v9 = (WTF::StringImpl *)*((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v10 = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x6666667)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 40 * *(unsigned int *)(result + 12));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,WebCore::CaptureDevice>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void API::ObjectImpl<(API::Object::Type)109>::~ObjectImpl()
{
}

uint64_t WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::tryTakeFirst(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(void *)(*v2 + 8);
    if (v3) {
      break;
    }
    uint64_t v2 = (void *)v2[2];
    if (!v2) {
      return 0;
    }
  }
  v5[0] = a1;
  v5[1] = a1;
  int v5[2] = v2;
  void v5[3] = a1;
  v5[4] = v1;
  v5[5] = a1;
  v5[6] = 0;
  WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(a1, (uint64_t)v5);
  return v3;
}

BOOL WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WTF **)(a2 + 16);
  if (v2)
  {
    unint64_t v7 = *(void **)(a2 + 16);
    WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)a1, &v7);
    WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(a1, v2);
    unsigned int v4 = *(_DWORD *)(a1 + 28);
    unsigned int v5 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v5;
    if (v5 > v4) {
      WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
    }
  }
  return v2 != 0;
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t v1 = (WTF *)MEMORY[0x19972EC70](result - 2);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::UserMediaPermissionRequestManagerProxy::*&)(void),WebKit::UserMediaPermissionRequestManagerProxy*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::VectorDestructor<true,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  if ((WTF::StringImpl *)result != a2)
  {
    uint64_t v3 = (uint64_t *)result;
    do
    {
      uint64_t v4 = v3[3];
      v3[3] = 0;
      if (v4) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
      }
      uint64_t result = v3[2];
      v3[2] = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, a2);
      }
      v3 += 5;
    }
    while (v3 != (uint64_t *)a2);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::MediaProducerMediaCaptureKind,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(void)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D7A40;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(void)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D7A40;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(void)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::call(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(v3, a2);
    }
  }
}

unint64_t WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x198E1FC70);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 40 * *(unsigned int *)(result + 12));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    unint64_t result = WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  if ((WTF::StringImpl *)result != a2)
  {
    uint64_t v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      uint64_t v6 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(a3 + 16) = v6;
      uint64_t v7 = *(void *)(v5 + 24);
      *(void *)(v5 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v7;
      LOWORD(v7) = *(_WORD *)(v5 + 32);
      *(unsigned char *)(a3 + 3WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(unsigned char *)(v5 + 34);
      *(_WORD *)(a3 + 32) = v7;
      uint64_t v8 = *(void *)(v5 + 24);
      *(void *)(v5 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      if (v8) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, a2);
      }
      unint64_t result = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      if (result) {
        unint64_t result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, a2);
      }
      v5 += 40;
      a3 += 40;
    }
    while ((WTF::StringImpl *)v5 != a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9D7A68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9D7A68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, 1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

CFTypeRef WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::UserMediaPermissionRequestProxy&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  unint64_t v9 = *(void **)a1;
  CFTypeRef result = CFRetain(*(CFTypeRef *)(a2 + 8));
  v9[v8] = a2;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v27 = -1640531527;
  __int16 v28 = 0;
  char v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v27, a3);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  unsigned int v9 = result & v7;
  unint64_t v10 = (void *)(v6 + 16 * (result & v7));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = *a3;
  if (*(_OWORD *)v10 != 0)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    do
    {
      if (v12 == v13 && v11 == a3[1])
      {
        uint64_t v23 = *a2;
        if (*a2) {
          uint64_t v24 = *(unsigned int *)(v23 - 4);
        }
        else {
          uint64_t v24 = 0;
        }
        char v26 = 0;
        uint64_t v25 = v23 + 16 * v24;
        goto LABEL_30;
      }
      if (v11 == -1) {
        uint64_t v14 = v10;
      }
      unsigned int v9 = (v9 + v15) & v7;
      unint64_t v10 = (void *)(v6 + 16 * v9);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      ++v15;
    }
    while (*(_OWORD *)v10 != 0);
    if (v14)
    {
      *uint64_t v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = *a3;
      unint64_t v10 = v14;
    }
  }
  uint64_t v16 = a3[1];
  void *v10 = v13;
  v10[1] = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12) + 1;
  }
  else {
    int v18 = 1;
  }
  *(_DWORD *)(v17 - 12) = v18;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12);
  }
  else {
    int v20 = 0;
  }
  uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
  unint64_t v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(a2, v10);
      unint64_t v10 = (void *)result;
      uint64_t v19 = *a2;
      if (*a2) {
        unint64_t v22 = *(unsigned int *)(v19 - 4);
      }
      else {
        unint64_t v22 = 0;
      }
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  uint64_t v25 = v19 + 16 * v22;
  char v26 = 1;
LABEL_30:
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v26;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_1,void,WTF::String &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7A90;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_1,void,WTF::String &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7A90;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_1,void,WTF::String &&>::call(uint64_t a1)
{
  v94[2] = *(const char ***)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return;
  }
  uint64_t v2 = *(WebKit::UserMediaPermissionRequestManagerProxy **)(v1 + 8);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(*((void *)v2 + 8) + 8);
  if (v4) {
    unint64_t v5 = (WebKit::WebPageProxy *)(v4 - 16);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = WebKit::WebPageProxy::logger(v5);
  uint64_t v7 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)v2 + 24))(v2);
  uint64_t v9 = *((void *)v2 + 31);
  *(void *)&long long buf = v7;
  *((void *)&buf + 1) = v10;
  v93[0] = "finishGrantingRequest";
  v93[1] = v9;
  v89[0] = *(WTF **)(v3 + 24);
  if (*(unsigned char *)(v6 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, v89);
  }
  if (!*(unsigned char *)(v3 + 112))
  {
    uint64_t v11 = *((unsigned int *)v2 + 41);
    if (v11 == *((_DWORD *)v2 + 40))
    {
      WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::UserMediaPermissionRequestProxy&>((uint64_t)v2 + 152, v3);
    }
    else
    {
      uint64_t v12 = *((void *)v2 + 19);
      CFRetain(*(CFTypeRef *)(v3 + 8));
      *(void *)(v12 + 8 * v11) = v3;
      ++*((_DWORD *)v2 + 41);
    }
    *(_OWORD *)unsigned __int8 v89 = *(_OWORD *)(v3 + 48);
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::add((uint64_t)&buf, (uint64_t *)v2 + 35, (uint64_t *)v89);
  }
  uint64_t v13 = *((void *)v2 + 22);
  unsigned int v14 = *((_DWORD *)v2 + 47);
  unint64_t v15 = v13 + 40 * v14;
  if (v14)
  {
    uint64_t v16 = 0;
    int v17 = 0;
    unint64_t v18 = v13 + 40 * v14;
    unint64_t v19 = v18;
    do
    {
      uint64_t v20 = v13 + v16;
      if (WebKit::isMatchingDeniedRequest((void *)v3, (void *)(v13 + v16)))
      {
        BOOL v22 = !*(unsigned char *)(v20 + 32) || *(_DWORD *)(v3 + 108) == 0;
        if (!v22
          || *(unsigned char *)(v13 + v16 + 33)
          && (*(unsigned __int8 *)(v3 + 112) - 1 >= 2 ? (BOOL v23 = *(_DWORD *)(v3 + 92) == 0) : (BOOL v23 = 1), !v23)
          || *(unsigned char *)(v13 + v16 + 34) && *(unsigned __int8 *)(v3 + 112) - 1 <= 1)
        {
          if (v19 == *((void *)v2 + 22) + 40 * *((unsigned int *)v2 + 47))
          {
            unint64_t v19 = v13 + v16;
          }
          else if (v20 != v18)
          {
            WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(v18, (WTF::StringImpl *)(v13 + v16), v19);
            v19 += v13 + v16 - v18;
          }
          uint64_t v24 = v13 + v16;
          uint64_t v25 = *(void *)(v13 + v16 + 24);
          *(void *)(v13 + v16 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
          if (v25) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v25, v21);
          }
          uint64_t v26 = *(void *)(v24 + 16);
          *(void *)(v24 + 16) = 0;
          if (v26) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v26, v21);
          }
          unint64_t v18 = v24 + 40;
          ++v17;
        }
      }
      v16 += 40;
    }
    while (v13 + v16 < v15);
    uint64_t v13 = *((void *)v2 + 22);
    unsigned int v14 = *((_DWORD *)v2 + 47);
    unint64_t v15 = v19;
  }
  else
  {
    int v17 = 0;
    unint64_t v18 = *((void *)v2 + 22);
  }
  unsigned int v27 = (WTF::StringImpl *)(v13 + 40 * v14);
  if ((WTF::StringImpl *)v18 != v27)
  {
    WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(v18, v27, v15);
    unsigned int v14 = *((_DWORD *)v2 + 47);
  }
  *((_DWORD *)v2 + 47) = v14 - v17;
  {
    if (HIBYTE(word_1E93CFBF8))
    {
      HIBYTE(word_1E93CFBF8) = 0;
      goto LABEL_46;
    }
  }
  else
  {
    qword_1E93CFBE0 = 0;
    unk_1E93CFBE8 = 0;
    WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&unk_1EE9D78F0;
    qword_1E93CFBF0 = 0;
    word_1E93CFBF8 = 1;
  }
  if (*(unsigned char *)(v3 + 112) == 1)
  {
LABEL_139:
    uint64_t v73 = *(void *)(*((void *)v2 + 8) + 8);
    if (v73) {
      uint64_t v74 = v73 - 16;
    }
    else {
      uint64_t v74 = 0;
    }
    CFRetain(*(CFTypeRef *)(v74 + 8));
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v2 + 2, (uint64_t)v2);
    uint64_t v75 = (atomic_uint *)*((void *)v2 + 1);
    if (v75) {
      atomic_fetch_add(v75, 1u);
    }
    CFRetain(*(CFTypeRef *)(v3 + 8));
    uint64_t v76 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v76 = &unk_1EE9D7AB8;
    v76[1] = v2;
    v76[2] = v75;
    v76[3] = v3;
    *(void *)&long long buf = v76;
    WebKit::WebPageProxy::willStartCapture(v74, v3, (uint64_t *)&buf);
    uint64_t v77 = buf;
    *(void *)&long long buf = 0;
    if (v77)
    {
      (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
      if (!v73) {
        return;
      }
    }
    else if (!v73)
    {
      return;
    }
    CFRelease(*(CFTypeRef *)(v73 - 8));
    return;
  }
  uint64_t v30 = *(void *)(*((void *)v2 + 8) + 8);
  if (v30) {
    uint64_t v31 = v30 - 16;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(void *)(v31 + 256);
  __int16 v33 = (unsigned int *)(v32 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v32 + 16), 1u);
  if (!*(_DWORD *)(v3 + 108) || (*(unsigned char *)(v32 + 784) & 2) != 0) {
    goto LABEL_63;
  }
  uint64_t v34 = *(void *)(*((void *)v2 + 8) + 8);
  if (v34) {
    uint64_t v35 = v34 - 16;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = *(void *)(v35 + 272);
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v36 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v8))
  {
LABEL_63:
    unsigned int v37 = 0;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v51 = *(void *)(*((void *)v2 + 8) + 8);
    if (v51) {
      uint64_t v52 = v51 - 16;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = *(void *)(v52 + 272);
    {
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    unsigned int v37 = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v53 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v8) ^ 1;
    uint64_t v38 = v37;
  }
  if (!*(_DWORD *)(v3 + 92) || (*(unsigned char *)(v32 + 784) & 1) != 0) {
    goto LABEL_78;
  }
  uint64_t v39 = *(void *)(*((void *)v2 + 8) + 8);
  if (v39) {
    uint64_t v40 = v39 - 16;
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = *(void *)(v40 + 272);
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v41 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, v8))goto LABEL_78; {
  uint64_t v42 = *(void *)(*((void *)v2 + 8) + 8);
  }
  if (v42) {
    uint64_t v43 = v42 - 16;
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v44 = *(void *)(v43 + 272);
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v44 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v8))
  {
LABEL_78:
    if (!v38)
    {
LABEL_137:
      if (v32) {
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v33);
      }
      goto LABEL_139;
    }
    int v82 = 0;
    uint64_t v45 = 1;
  }
  else
  {
    uint64_t v45 = v38 + 1;
    int v82 = 1;
  }
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v84 = 0;
  uint64_t v46 = *(void *)(*((void *)v2 + 8) + 8);
  if (v46) {
    uint64_t v47 = v46 - 16;
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v48 = *(void *)(v47 + 272);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v48 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v8))
  {
LABEL_127:
    if (v37) {
      *(_DWORD *)(v32 + 784) |= 2u;
    }
    if (v82) {
      *(_DWORD *)(v32 + 784) |= 1u;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v83, (uint64_t)&v85);
    WebKit::MediaDeviceSandboxExtensions::MediaDeviceSandboxExtensions((uint64_t)&buf, (uint64_t)v83, &v87, (uint64_t *)&v84);
    uint64_t v64 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v64 = 2640;
    *((void *)v64 + 1) = 0;
    *((void *)v64 + 66) = (char *)v64 + 16;
    *((void *)v64 + 67) = 512;
    *((void *)v64 + 68) = 0;
    *((void *)v64 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    *((void *)v64 + 69) = 0;
    IPC::Encoder::encodeHeader(v64);
    uint64_t v91 = v64;
    IPC::ArgumentCoder<WebKit::MediaDeviceSandboxExtensions,void>::encode(v64, (const char ***)&buf);
    LOBYTE(v89[0]) = 0;
    char v90 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v32, &v91, 0, (uint64_t)v89, 1);
    if (v90)
    {
      int v66 = v89[0];
      v89[0] = 0;
      if (v66) {
        (*(void (**)(WTF *))(*(void *)v66 + 8))(v66);
      }
    }
    int v67 = v91;
    uint64_t v91 = 0;
    __int16 v33 = (unsigned int *)(v32 + 16);
    if (v67)
    {
      IPC::Encoder::~Encoder(v67, v65);
      WTF::fastFree(v80, v81);
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v94);
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v93, v68);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v69);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v83, v70);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v84);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v71);
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v72);
    goto LABEL_137;
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v87, 0x10uLL);
  if (v87 && v45 != HIDWORD(v88)) {
    bzero((void *)(v87 + 8 * HIDWORD(v88)), 8 * (v45 - HIDWORD(v88)));
  }
  HIDWORD(v88) = v45;
  LODWORD(v86) = v45;
  uint64_t v85 = WTF::fastMalloc((WTF *)(8 * v45));
  if (v37
    && (WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.microphone", &buf),
        BYTE8(buf)))
  {
    if (--v45 >= (unint64_t)HIDWORD(v88))
    {
      __break(0xC471u);
      goto LABEL_153;
    }
    uint64_t v49 = (const char **)buf;
    *(void *)&long long buf = 0;
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(v87 + 8 * v45), v49);
    if (HIDWORD(v86) == v86)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>((uint64_t)&v85, (uint64_t)&WebKit::audioExtensionPath);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(WTF **)(v85 + 8 * HIDWORD(v86)) = v89[0];
      ++HIDWORD(v86);
    }
    uint64_t v50 = (unsigned int *)(v32 + 16);
    if (BYTE8(buf)) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&buf);
    }
  }
  else
  {
    uint64_t v50 = (unsigned int *)(v32 + 16);
  }
  if (!v82) {
    goto LABEL_112;
  }
  WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.camera", &buf);
  if (!BYTE8(buf)) {
    goto LABEL_112;
  }
  if (v45 - 1 >= (unint64_t)HIDWORD(v88))
  {
    __break(0xC471u);
LABEL_153:
    JUMPOUT(0x198E20C48);
  }
  uint64_t v54 = (const char **)buf;
  *(void *)&long long buf = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(v87 + 8 * (v45 - 1)), v54);
  uint64_t v55 = HIDWORD(v86);
  if (HIDWORD(v86) == v86)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>((uint64_t)&v85, (uint64_t)&WebKit::videoExtensionPath);
  }
  else
  {
    uint64_t v56 = v85;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(WTF **)(v56 + 8 * v55) = v89[0];
    ++HIDWORD(v86);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&buf);
LABEL_112:
  uint64_t v57 = *(void *)(v32 + 144);
  if (v57 && *(void *)(v57 + 352)) {
    xpc_connection_get_audit_token();
  }
  if (HIDWORD(v86) == HIDWORD(v88))
  {
    if (HIDWORD(v86))
    {
      uint64_t v58 = v85;
      uint64_t v59 = 8 * HIDWORD(v86);
      do
      {
        int v60 = qword_1EB358820;
        if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::utf8();
          uint64_t v61 = v89[0] ? (char *)v89[0] + 16 : 0;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v61;
          _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_DEFAULT, "UserMediaProcessManager::willCreateMediaStream - granting extension %s", (uint8_t *)&buf, 0xCu);
          uint64_t v63 = v89[0];
          v89[0] = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 1) {
              WTF::fastFree(v63, v62);
            }
            else {
              --*(_DWORD *)v63;
            }
          }
        }
        v58 += 8;
        v59 -= 8;
      }
      while (v59);
    }
    goto LABEL_127;
  }
  WTFLogAlways();
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v84);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v78);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v79);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v50);
LABEL_46:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v2, v3, 6, (uint64_t *)&buf, 0);
  char v29 = (WTF::StringImpl *)buf;
  *(void *)&long long buf = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7AB8;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7AB8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[2];
  if (!v1 || !*(void *)(v1 + 8)) {
    return;
  }
  uint64_t v3 = a1[1];
  if (*(unsigned char *)(v3 + 256)) {
    WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(a1[1], 2);
  }
  *(unsigned char *)(v3 + 256) = 0;
  ++*(void *)(v3 + 264);
  uint64_t v4 = *(void *)(*(void *)(v3 + 64) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  if (!*(unsigned char *)(v3 + 257))
  {
    uint64_t v7 = *(void *)(v5 + 272);
    {
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v6) & 1) == 0)
    {
      uint64_t v9 = *(void *)(v5 + 272);
      {
        WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v8))goto LABEL_18; {
    }
      }
    uint64_t v10 = *(void *)(v5 + 272);
    {
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::kedouble y = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v10 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v8) & 1) == 0)
    {
LABEL_18:
      uint64_t v50 = "com.apple.tccd";
      uint64_t v51 = 15;
      uint64_t v11 = *(void *)(*(void *)(v5 + 256) + 144);
      if (v11)
      {
        if (*(void *)(v11 + 352))
        {
          xpc_connection_get_audit_token();
          LOBYTE(v11) = v43[0];
          v49[0] = *(_OWORD *)&v43[1];
          *(_OWORD *)((char *)v49 + 15) = *(_OWORD *)&v43[16];
          char v12 = 1;
LABEL_23:
          v43[0] = v11;
          *(_OWORD *)&v43[1] = v49[0];
          *(_OWORD *)&v43[16] = *(_OWORD *)((char *)v49 + 15);
          char v44 = v12;
          WebKit::SandboxExtension::createHandlesForMachLookup((uint64_t *)&v50, 1uLL, (long long *)v43, 1, 0, (uint64_t)&v39);
          if (HIDWORD(v47))
          {
            unsigned int v14 = (const char ***)v46;
            uint64_t v15 = 8 * HIDWORD(v47);
            do
            {
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v14);
              unsigned int v14 = (const char ***)(v16 + 8);
              v15 -= 8;
            }
            while (v15);
          }
          int v17 = v46;
          if (v46)
          {
            uint64_t v46 = 0;
            LODWORD(v47) = 0;
            WTF::fastFree(v17, v13);
          }
          uint64_t v46 = v39;
          uint64_t v18 = v40;
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          uint64_t v47 = v18;
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v13);
          *(unsigned char *)(v3 + 257) = 1;
          goto LABEL_29;
        }
        LOBYTE(v11) = 0;
      }
      char v12 = 0;
      goto LABEL_23;
    }
  }
LABEL_29:
  uint64_t v19 = *(void *)(v5 + 256);
  uint64_t v20 = a1[3];
  uint64_t v45 = *(void *)(v20 + 24);
  WebKit::UserMediaPermissionRequestProxy::audioDevice((WebKit::UserMediaPermissionRequestProxy *)v43, v20);
  WebKit::UserMediaPermissionRequestProxy::videoDevice((WebKit::UserMediaPermissionRequestProxy *)&v39, a1[3]);
  uint64_t v21 = a1[2];
  uint64_t v22 = a1[3];
  a1[2] = 0;
  uint64_t v23 = *(void *)(*(void *)(v5 + 32) + 1928);
  uint64_t v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v24 = 2542;
  *((void *)v24 + 1) = v23;
  *((void *)v24 + 66) = (char *)v24 + 16;
  *((void *)v24 + 67) = 512;
  *((void *)v24 + 68) = 0;
  *((void *)v24 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v24 + 69) = 0;
  IPC::Encoder::encodeHeader(v24);
  uint64_t v48 = v24;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v24, &v45);
  IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode(v24, (uint64_t)v43);
  IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode(v24, (uint64_t)&v39);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v24, (uint64_t *)(v22 + 2080));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v24, (uint64_t *)(v22 + 2088));
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v24, (uint64_t)&v46);
  uint64_t v25 = (char *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v25 = &unk_1EE9D7AE0;
  *((void *)v25 + 1) = v3;
  *((void *)v25 + 2) = v21;
  uint64_t v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v50 = v25;
  uint64_t v51 = v26;
  char v52 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v48, 0, (uint64_t)&v50, 1);
  if (v52)
  {
    __int16 v28 = v50;
    uint64_t v50 = 0;
    if (v28) {
      (*(void (**)(const char *))(*(void *)v28 + 8))(v28);
    }
  }
  char v29 = v48;
  uint64_t v48 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v27);
    WTF::fastFree(v37, v38);
  }
  uint64_t v30 = v42;
  uint64_t v42 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v27);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t v31 = v41;
  uint64_t v41 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v27);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t v32 = v39;
  uint64_t v39 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v27);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  __int16 v33 = *(WTF::StringImpl **)&v43[24];
  *(void *)&v43[24] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v27);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  uint64_t v34 = *(WTF::StringImpl **)&v43[16];
  *(void *)&v43[16] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v27);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  uint64_t v35 = *(WTF::StringImpl **)v43;
  *(void *)uint64_t v43 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v27);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  WebKit::UserMediaPermissionRequestManagerProxy::processNextUserMediaRequestIfNeeded((WebKit::UserMediaPermissionRequestManagerProxy *)v3);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v36);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UserMediaAccessWasGranted,WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7AE0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UserMediaAccessWasGranted,WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7AE0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UserMediaAccessWasGranted,WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(unsigned int *result, WebKit::WebProcessProxy *a2)
{
  uint64_t v2 = *((void *)result + 2);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      uint64_t v3 = *((void *)result + 1);
      uint64_t v4 = *(void *)(v3 + 264) - 1;
      *(void *)(v3 + 26WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v4;
      if (!v4)
      {
        {
          qword_1E93CFBE0 = 0;
          unk_1E93CFBE8 = 0;
          WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&unk_1EE9D78F0;
          qword_1E93CFBF0 = 0;
          word_1E93CFBF8 = 1;
        }
        uint64_t v5 = *(void *)(*(void *)(v3 + 64) + 8);
        if (v5) {
          uint64_t v6 = v5 - 16;
        }
        else {
          uint64_t v6 = 0;
        }
        uint64_t v7 = *(atomic_uint **)(v6 + 256);
        uint64_t v8 = (unsigned int *)(v7 + 4);
        atomic_fetch_add(v7 + 4, 1u);
        WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded((WebKit::UserMediaProcessManager *)v7, a2);
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(void *a1, WTF::StringImpl *a2)
{
  *a1 = -1;
  a1[1] = -1;
  uint64_t result = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = (void *)v6;
    do
    {
      if (v13[1] != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          uint64_t v16 = (WTF::StringImpl *)v13[2];
          void v13[2] = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v10);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
        else
        {
          unsigned int v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::lookupForReinsert(a1, v13);
          uint64_t v15 = (WTF::StringImpl *)*((void *)v14 + 2);
          *((void *)v14 + 2) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v10);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          *unsigned int v14 = *(_OWORD *)v13;
          uint64_t v17 = v13[2];
          void v13[2] = 0;
          *((void *)v14 + 2) = v17;
          uint64_t v18 = (WTF::StringImpl *)v13[2];
          void v13[2] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v10);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v14;
          }
        }
      }
      v13 += 3;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

WTF *WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  if (*((_DWORD *)result + 2))
  {
    uint64_t v2 = result;
    uint64_t v3 = *((unsigned int *)result + 3);
    if (v3)
    {
      uint64_t v4 = *(uint64_t **)result;
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4;
        *uint64_t v4 = 0;
        if (v6) {
          CFRelease(*(CFTypeRef *)(v6 + 8));
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    uint64_t result = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

unint64_t WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(unint64_t result, WTF::StringImpl *a2, unint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = result;
  if (result <= a3)
  {
    if (a2 != (WTF::StringImpl *)result)
    {
      uint64_t v5 = a3 + 40 * ((uint64_t)((uint64_t)a2 - result) / 40) - 16;
      do
      {
        *(_OWORD *)(v5 - 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(_OWORD *)((char *)v3 - 40);
        uint64_t v6 = *((void *)v3 - 3);
        *((void *)v3 - 3) = 0;
        *(void *)(v5 - 8) = v6;
        uint64_t v7 = *((void *)v3 - 2);
        *((void *)v3 - 2) = 0;
        *(void *)uint64_t v5 = v7;
        LOWORD(v7) = *((_WORD *)v3 - 4);
        *(unsigned char *)(v5 + 1WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *((unsigned char *)v3 - 6);
        *(_WORD *)(v5 + 8) = v7;
        uint64_t v8 = *((void *)v3 - 2);
        *((void *)v3 - 2) = 0;
        if (v8) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, a2);
        }
        uint64_t result = *((void *)v3 - 3);
        *((void *)v3 - 3) = 0;
        if (result) {
          uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, a2);
        }
        uint64_t v3 = (WTF::StringImpl *)((char *)v3 - 40);
        v5 -= 40;
      }
      while (v3 != (WTF::StringImpl *)v4);
    }
  }
  else
  {
    return WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::move(result, a2, a3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest(WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7B08;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  unint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest(WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7B08;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest(WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::call(void *a1, int a2)
{
  v61[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[2];
  if (!v2 || !*(void *)(v2 + 8) || !*(void *)(a1[3] + 16)) {
    return;
  }
  uint64_t v3 = a1[1];
  if (a2 == 2)
  {
    uint64_t v7 = *(void *)(v3 + 16);
    CFRetain(*(CFTypeRef *)(v7 + 8));
    *(unsigned char *)(v7 + 2072) = 1;
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else if (!a2)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    CFRetain(*(CFTypeRef *)(v4 + 8));
    *(void *)long long buf = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest((WebKit::UserMediaPermissionRequestManagerProxy *)v3, v4, 6, (uint64_t *)buf, 0);
    uint64_t v6 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
    return;
  }
  uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 8);
  if (v8) {
    uint64_t v9 = (WebKit::WebPageProxy *)(v8 - 16);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = WebKit::WebPageProxy::logger(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  uint64_t v12 = *(void *)(v3 + 248);
  v50[0] = v11;
  v50[1] = v13;
  v50[2] = "processUserMediaPermissionRequest";
  v50[3] = v12;
  uint64_t v14 = *(void *)(v3 + 16);
  if (*(unsigned char *)(v10 + 12))
  {
    uint64_t v15 = *(WTF::String **)(v14 + 24);
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v55, (WTF::Logger::LogSiteIdentifier *)v50);
    uint64_t v49 = v15;
    WTF::String::number(v15);
    WTF::String::String((WTF::String *)&v53, ", persistent access: ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v52);
    WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, &v56);
    uint64_t v17 = v52;
    char v52 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = v53;
    uint64_t v53 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = v54;
    uint64_t v54 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v16);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t v20 = v55;
    uint64_t v55 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t v21 = qword_1EB358820;
    uint64_t v22 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      WTF::String::utf8();
      uint64_t v24 = v51[0] ? (char *)v51[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v22 = v51[0];
      v51[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1) {
          uint64_t v22 = (WTF *)WTF::fastFree(v22, v23);
        }
        else {
          --*(_DWORD *)v22;
        }
      }
    }
    if (WebKit2LogWebRTC)
    {
      uint64_t v25 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v26 = *v25;
        if (v26) {
          break;
        }
        int v27 = *v25;
        atomic_compare_exchange_strong_explicit(v25, (unsigned __int8 *)&v27, v26 | 1, memory_order_acquire, memory_order_acquire);
        if (v27 == v26)
        {
          uint64_t v28 = WTF::Logger::observers(v22);
          uint64_t v29 = *(unsigned int *)(v28 + 12);
          if (v29)
          {
            uint64_t v30 = *(uint64_t **)v28;
            uint64_t v48 = *(void *)v28 + 8 * v29;
            do
            {
              uint64_t v31 = *v30;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v50);
              int v58 = 0;
              WTF::String::number(v49);
              int v59 = 0;
              WTF::String::String((WTF::String *)v60, ", persistent access: ");
              v60[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(v61);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v51, (uint64_t)buf, 4uLL);
              (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v31 + 16))(v31, &WebKit2LogWebRTC, 0, v51);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v51, v32);
              for (uint64_t i = 56; i != -8; i -= 16)
              {
                uint64_t v34 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2) {
                    WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v23);
                  }
                  else {
                    *(_DWORD *)v34 -= 2;
                  }
                }
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v48);
          }
          int v35 = 1;
          atomic_compare_exchange_strong_explicit(v25, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
          if (v35 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v36 = v56;
    uint64_t v56 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
    uint64_t v14 = *(void *)(v3 + 16);
  }
  unsigned int v37 = *(atomic_uint **)(v14 + 64);
  atomic_fetch_add(v37, 1u);
  uint64_t v38 = *(atomic_uint **)(*(void *)(v3 + 16) + 72);
  atomic_fetch_add(v38, 1u);
  uint64_t v39 = *(void *)(*(void *)(v3 + 64) + 8);
  if (v39) {
    uint64_t v40 = v39 - 16;
  }
  else {
    uint64_t v40 = 0;
  }
  CFRetain(*(CFTypeRef *)(v40 + 8));
  uint64_t v41 = (atomic_uint *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(*(WebKit::WebsiteDataStore **)(v40 + 312));
  atomic_fetch_add(v41, 1u);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
  uint64_t v42 = *(atomic_uint **)(v3 + 8);
  if (v42) {
    atomic_fetch_add(v42, 1u);
  }
  uint64_t v43 = *(void *)(v3 + 16);
  if (v43) {
    CFRetain(*(CFTypeRef *)(v43 + 8));
  }
  char v44 = (void *)WTF::fastMalloc((WTF *)0x20);
  *char v44 = &unk_1EE9D7B30;
  v44[1] = v3;
  CFTypeRef v44[2] = v42;
  v44[3] = v43;
  *(void *)long long buf = v44;
  WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin((uint64_t)v41, (uint64_t)v37, (uint64_t)v38, (uint64_t *)buf);
  uint64_t v45 = *(void *)buf;
  *(void *)long long buf = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref((unsigned int *)v41);
  if (v39) {
    CFRelease(*(CFTypeRef *)(v39 - 8));
  }
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v38, v46);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v37, v47);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::translate<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>> WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineAdd<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String&>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String&)::{lambda(void)#1}>(uint64_t result, WTF::StringImpl *a2, void **a3)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  uint64_t v3 = (_DWORD *)**a3;
  if (v3) {
    *v3 += 2;
  }
  int v4 = *(WTF::StringImpl **)(result + 16);
  *(void *)(result + 16) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      return WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0,void,WTF::String &&>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7B30;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  int v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0,void,WTF::String &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7B30;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  int v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0,void,WTF::String &&>::call(void *result, WTF::StringImpl **a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      uint64_t v3 = result;
      uint64_t v4 = result[3];
      if (*(void *)(v4 + 16))
      {
        uint64_t v6 = (WebKit::UserMediaPermissionRequestManagerProxy *)result[1];
        CFRetain(*(CFTypeRef *)(v4 + 8));
        uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v7 = &unk_1EE9D7B58;
        v7[1] = v6;
        _DWORD v7[2] = v4;
        int v35 = v7;
        uint64_t v8 = *a2;
        if (*a2) {
          *(_DWORD *)v8 += 2;
        }
        __int16 v33 = v8;
        WebKit::UserMediaPermissionRequestManagerProxy::ephemeralDeviceHashSaltForFrame(&v34, (uint64_t)v6, *(void *)(v3[3] + 48), *(void *)(v3[3] + 56));
        void v29[2] = v6;
        uint64_t v9 = v3[3];
        if (v9) {
          CFRetain(*(CFTypeRef *)(v9 + 8));
        }
        uint64_t v30 = v9;
        uint64_t v10 = v33;
        if (v33) {
          *(_DWORD *)v33 += 2;
        }
        uint64_t v31 = v10;
        uint64_t v11 = v34;
        if (v34) {
          *(_DWORD *)v34 += 2;
        }
        uint64_t v32 = v11;
        WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(v6);
        uint64_t v13 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(v12);
        uint64_t v14 = WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(v13);
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
        if (((*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15) & 1) != 0
          || *(unsigned __int8 *)(v3[3] + 112) - 1 >= 2)
        {
          uint64_t v22 = (WebCore::RealtimeMediaSourceCenter *)WTF::fastMalloc((WTF *)0x28);
          *(void *)uint64_t v22 = &unk_1EE9D7B80;
          *((void *)v22 + 1) = v6;
          *((void *)v22 + 2) = v9;
          *((void *)v22 + 3) = v10;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          *((void *)v22 + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v11;
          v29[0] = v22;
          WebCore::RealtimeMediaSourceCenter::singleton(v22);
          WebCore::RealtimeMediaSourceCenter::validateRequestConstraints();
          uint64_t v23 = v29[0];
          v29[0] = 0;
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          }
          uint64_t v32 = 0;
        }
        else
        {
          v29[0] = 0;
          v29[1] = 0;
          v28[0] = 0;
          v28[1] = 0;
          if (*(void *)(v9 + 16))
          {
            uint64_t v17 = *(void *)(*((void *)v6 + 8) + 8);
            if (v17) {
              uint64_t v18 = v17 - 16;
            }
            else {
              uint64_t v18 = 0;
            }
            CFRetain(*(CFTypeRef *)(v18 + 8));
            if (!*(unsigned char *)(v18 + 801) && *(unsigned char *)(v18 + 800) && *(void *)(v18 + 328)) {
              WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest((unsigned int *)v6, v29, v28, (uint64_t *)&v31);
            }
            if (v17) {
              CFRelease(*(CFTypeRef *)(v17 - 8));
            }
          }
          WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v16);
          WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v19);
          uint64_t v21 = v32;
          uint64_t v32 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v20);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
        }
        uint64_t v24 = v31;
        uint64_t v31 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v20);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        uint64_t v25 = v30;
        uint64_t v30 = 0;
        if (v25) {
          CFRelease(*(CFTypeRef *)(v25 + 8));
        }
        int v26 = v34;
        uint64_t v34 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2) {
            WTF::StringImpl::destroy(v26, v20);
          }
          else {
            *(_DWORD *)v26 -= 2;
          }
        }
        int v27 = v33;
        __int16 v33 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v20);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
        uint64_t result = v35;
        int v35 = 0;
        if (result) {
          return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
      }
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit38UserMediaPermissionRequestManagerProxy33processUserMediaPermissionRequestEvEN3__0clEONS_6StringEEUlT_E_vJN7WebCore19MediaConstraintTypeEEED1Ev(void *a1)
{
  *a1 = &unk_1EE9D7B58;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit38UserMediaPermissionRequestManagerProxy33processUserMediaPermissionRequestEvEN3__0clEONS_6StringEEUlT_E_vJN7WebCore19MediaConstraintTypeEEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7B58;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit38UserMediaPermissionRequestManagerProxy33processUserMediaPermissionRequestEvEN3__0clEONS_6StringEEUlT_E_vJN7WebCore19MediaConstraintTypeEEE4callESA_(uint64_t a1, char a2)
{
  if (!*(void *)(*(void *)(a1 + 16) + 16)) {
    return;
  }
  uint64_t v3 = *(WebKit::UserMediaPermissionRequestManagerProxy **)(a1 + 8);
  uint64_t v4 = *(void *)(*((void *)v3 + 8) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  if (*(unsigned char *)(v5 + 801))
  {
    BOOL v6 = 0;
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  BOOL v6 = *(unsigned char *)(v5 + 800) != 0;
  if (v4) {
LABEL_7:
  }
    CFRelease(*(CFTypeRef *)(v4 - 8));
LABEL_8:
  if (v6)
  {
    uint64_t v7 = *(void *)(*((void *)v3 + 8) + 8);
    if (v7) {
      uint64_t v8 = (WebKit::WebPageProxy *)(v7 - 16);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = WebKit::WebPageProxy::logger(v8);
    uint64_t v10 = (WTF::StringImpl *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)v3 + 24))(v3);
    uint64_t v11 = *((void *)v3 + 31);
    v17[0] = v10;
    v17[1] = v12;
    uint64_t v18 = "processUserMediaPermissionInvalidRequest";
    uint64_t v19 = v11;
    uint64_t v13 = *((void *)v3 + 2);
    uint64_t v16 = *(WTF::String **)(v13 + 24);
    if (*(unsigned char *)(v9 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v17, &v16);
      uint64_t v13 = *((void *)v3 + 2);
    }
    if (!*(unsigned char *)(v13 + 2072))
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)(v13 + 48);
      if (!WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(*((void *)v3 + 35), v17))a2 = 0; {
      uint64_t v13 = *((void *)v3 + 2);
      }
    }
    CFRetain(*(CFTypeRef *)(v13 + 8));
    v17[0] = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v3, v13, 3, (uint64_t *)v17, a2);
    uint64_t v15 = v17[0];
    v17[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0::operator()(WTF::String &&)::{lambda(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)#1},void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D7B80;
  uint64_t v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0::operator()(WTF::String &&)::{lambda(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)#1},void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D7B80;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0::operator()(WTF::String &&)::{lambda(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)#1},void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(void *a1, _DWORD *a2, _DWORD *a3)
{
  if (*(void *)(a1[2] + 16))
  {
    uint64_t v6 = a1[1];
    uint64_t v7 = *(void *)(*(void *)(v6 + 64) + 8);
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
    CFRetain(*(CFTypeRef *)(v8 + 8));
    if (!*(unsigned char *)(v8 + 801) && *(unsigned char *)(v8 + 800) && *(void *)(v8 + 328)) {
      WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest((unsigned int *)v6, a2, a3, a1 + 3);
    }
    if (v7)
    {
      uint64_t v9 = *(const void **)(v7 - 8);
      CFRelease(v9);
    }
  }
}

uint64_t WTF::VectorCopier<false,WebCore::CaptureDevice>::uninitializedCopy<WebCore::CaptureDevice>(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (result != a2)
  {
    uint64_t v3 = *(_DWORD **)result;
    if (*(void *)result) {
      *v3 += 2;
    }
    *(void *)a3 = v3;
    *(unsigned char *)(a3 + 8) = *(unsigned char *)(result + 8);
    uint64_t v4 = *(_DWORD **)(result + 16);
    if (v4) {
      *v4 += 2;
    }
    *(void *)(a3 + 16) = v4;
    uint64_t v5 = *(_DWORD **)(result + 24);
    if (v5) {
      *v5 += 2;
    }
    *(void *)(a3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v5;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(result + 32);
    result += 40;
    a3 += 40;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::MediaDeviceHashSalts &&)::$_0,void,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D7BA8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::MediaDeviceHashSalts &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D7BA8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::MediaDeviceHashSalts &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(WebKit::UserMediaPermissionRequestManagerProxy **)(v2 + 8);
  if (!v3) {
    return;
  }
  uint64_t v4 = *((void *)v3 + 2);
  if ((a2 & 1) == 0)
  {
    uint64_t v13 = (CFTypeRef *)(v4 + 8);
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v30[0] = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v3, v4, 5, (uint64_t *)v30, 0);
    uint64_t v15 = v30[0];
    v30[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    goto LABEL_42;
  }
  if (!v4) {
    return;
  }
  uint64_t v5 = WebKit::WebFrameProxy::webFrame(*(void *)(v4 + 48), *(void *)(v4 + 56));
  uint64_t v6 = v5;
  if (v5) {
    CFRetain(*(CFTypeRef *)(v5 + 8));
  }
  uint64_t v7 = *(void *)(*((void *)v3 + 8) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  if (!v6) {
    goto LABEL_32;
  }
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(void *)(v8 + 32) + 1000), &v29);
  MEMORY[0x19972E890](v30, &v29, 0);
  WebCore::SecurityOriginData::toURL((uint64_t *)&v28, (WebCore::SecurityOriginData *)(*(void *)(*((void *)v3 + 2) + 72) + 8));
  char v11 = WTF::protocolHostAndPortAreEqual((WTF *)v30, &v28, v9);
  m_ptr = v28.m_string.m_impl.m_ptr;
  v28.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v10);
    }
    else {
      *(_DWORD *)m_ptr -= 2;
    }
  }
  uint64_t v16 = v30[0];
  v30[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v10);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v29;
  uint64_t v29 = 0;
  if (!v17) {
    goto LABEL_26;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
LABEL_26:
    if (v11) {
      goto LABEL_27;
    }
LABEL_32:
    uint64_t v25 = *((void *)v3 + 2);
    CFRetain(*(CFTypeRef *)(v25 + 8));
    v30[0] = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v3, v25, 0, (uint64_t *)v30, 0);
    int v27 = v30[0];
    v30[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v26);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    uint64_t v24 = *(const void **)(v25 + 8);
    goto LABEL_37;
  }
  WTF::StringImpl::destroy(v17, v10);
  if ((v11 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_27:
  uint64_t v18 = *(atomic_uint **)(*((void *)v3 + 2) + 64);
  atomic_fetch_add(v18, 1u);
  API::SecurityOrigin::create(v30);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v18, v19);
  uint64_t v20 = *(atomic_uint **)(*((void *)v3 + 2) + 72);
  atomic_fetch_add(v20, 1u);
  API::SecurityOrigin::create(&v28);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v20, v21);
  (*(void (**)(void))(**(void **)(v8 + 104) + 312))();
  uint64_t v22 = v28.m_string.m_impl.m_ptr;
  v28.m_string.m_impl.m_ptr = 0;
  if (v22) {
    CFRelease(*((CFTypeRef *)v22 + 1));
  }
  uint64_t v23 = v30[0];
  v30[0] = 0;
  if (v23)
  {
    uint64_t v24 = (const void *)*((void *)v23 + 1);
LABEL_37:
    CFRelease(v24);
  }
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  if (v6)
  {
    uint64_t v13 = (CFTypeRef *)(v6 + 8);
LABEL_42:
    CFRelease(*v13);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a3;
  unint64_t v10 = *a3 + ~(*a3 << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v26 = v6 + 8 * v20;
        goto LABEL_29;
      }
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      uint64_t *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v9 = *a3;
      uint64_t v14 = v16;
    }
  }
  *uint64_t v14 = v9;
  uint64_t v18 = *a2;
  if (*a2) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_22:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v14);
      uint64_t v14 = result;
      uint64_t v21 = *a2;
      if (*a2) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_22;
  }
  uint64_t v26 = v21 + 8 * v24;
  char v25 = 1;
LABEL_29:
  uint64_t *v5 = (uint64_t)v14;
  v5[1] = v26;
  *((unsigned char *)v5 + 16) = v25;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7BD0;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7BD0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy>::call(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  if (!v3 || !*(void *)(v3 + 8)) {
    goto LABEL_10;
  }
  uint64_t v5 = a1[1];
  uint64_t v8 = *(void *)(v5 + 56);
  uint64_t v6 = (uint64_t *)(v5 + 56);
  uint64_t v7 = v8;
  uint64_t v9 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8, a1[3]);
  if (v8)
  {
    unint64_t v10 = (void *)(v7 + 8 * *(unsigned int *)(v7 - 4));
    if (v10 == v9) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
LABEL_10:
      a2 = 0;
      goto LABEL_11;
    }
    unint64_t v10 = 0;
  }
  if (v10 != v9) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v6, v9);
  }
LABEL_11:
  uint64_t v11 = a1[4];
  a1[4] = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2);
  unint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);

  return v12(v11);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = *(void *)(result + 8 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 8 * v6;
    }
    else
    {
      int v8 = 1;
      while (v7)
      {
        uint64_t v6 = (v6 + v8) & v2;
        uint64_t v7 = *(void *)(result + 8 * v6);
        ++v8;
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
      result += 8 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    unsigned int v16 = -1640531527;
    __int16 v17 = 0;
    char v18 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v16, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
    uint64_t v6 = a2[1];
    unsigned int v7 = v5 & v4;
    int v8 = (uint64_t *)(v3 + 16 * (v5 & v4));
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
      return 1;
    }
    else
    {
      int v12 = 1;
      do
      {
        uint64_t v13 = v9 | v10;
        uint64_t result = v13 != 0;
        if (!v13) {
          break;
        }
        unsigned int v7 = (v7 + v12) & v4;
        uint64_t v14 = (uint64_t *)(v3 + 16 * v7);
        uint64_t v9 = *v14;
        uint64_t v10 = v14[1];
        ++v12;
      }
      while (v9 != *a2 || v10 != v6);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::platformGetMediaStreamDevices(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D7BF8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::platformGetMediaStreamDevices(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7BF8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::platformGetMediaStreamDevices(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t **a2)
{
  uint64_t v2 = result;
  int v3 = *(unsigned __int8 *)(result + 8);
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  unsigned int v4 = *((_DWORD *)a2 + 3);
  if (v4)
  {
    if (v4 >= 0x11A7B97)
    {
      __break(0xC471u);
      return result;
    }
    int v6 = 232 * v4;
    unsigned int v7 = (WebCore::RealtimeMediaSourceCenter *)WTF::fastMalloc((WTF *)(232 * v4));
    LODWORD(v65) = (v6 & 0xFFFFFFF8) / 0xE8;
    uint64_t v64 = v7;
    uint64_t v8 = *((unsigned int *)a2 + 3);
    if (v8)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = 40 * v8;
      int v63 = v3;
      while (1)
      {
        char v101 = 0;
        long long __n_4 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long __src = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v102 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        memset(v106, 0, 22);
        if (!v3 || (v9[1] & 0xFD) != 1) {
          break;
        }
        WebCore::RealtimeMediaSourceCenter::singleton(v7);
        WebCore::RealtimeMediaSourceCenter::getCapabilities();
        if ((_BYTE)v93)
        {
          long long v95 = v84;
          long long v96 = v85;
          long long v97 = *(_OWORD *)v86;
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&__src, (uint64_t)&v86[16]);
          long long __n_4 = *(_OWORD *)&v87[8];
          long long v100 = *(_OWORD *)&v87[24];
          char v101 = v87[40];
          WTF::String::operator=((uint64_t *)&v102, (WTF::StringImpl **)&v88);
          WTF::String::operator=((uint64_t *)&v102 + 1, (WTF::StringImpl **)&v88 + 1);
          long long v103 = v89;
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v104, (uint64_t)v90);
          long long v105 = *(_OWORD *)v92;
          v106[0] = *(_OWORD *)&v92[16];
          *(void *)((char *)v106 + 1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *(void *)&v92[30];
          if ((_BYTE)v93) {
            WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v84, v12);
          }
          uint64_t v13 = (WTF *)HIDWORD(__src);
          goto LABEL_12;
        }
        LOBYTE(v66) = 0;
        char v83 = 0;
LABEL_33:
        WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v95, v11);
        if (v83)
        {
          uint64_t v26 = v66;
          uint64_t v66 = 0;
          *(void *)&long long v84 = v26;
          BYTE8(v8WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v67;
          long long v27 = v68;
          long long v68 = 0u;
          long long v85 = v27;
          *(_OWORD *)&v86[8] = v70;
          *(_OWORD *)uint64_t v87 = v71;
          *(_OWORD *)&v87[16] = v72;
          int v28 = v74[0];
          *(_OWORD *)&v87[32] = 0u;
          *(_DWORD *)uint64_t v86 = v69;
          *(_DWORD *)&v87[44] = v74[0];
          if (v74[0])
          {
            uint64_t v29 = (void *)WTF::fastMalloc((WTF *)v74[0]);
            *(_DWORD *)&v87[40] = v28;
            *(void *)&v87[32] = v29;
            memcpy(v29, v73, v74[0]);
          }
          long long v88 = *(_OWORD *)&v74[1];
          long long v89 = v75;
          v90[0] = v76;
          uint64_t v30 = v77;
          if (v77) {
            *v77 += 2;
          }
          uint64_t v91 = v30;
          uint64_t v31 = v78;
          if (v78) {
            *v78 += 2;
          }
          *(void *)int v92 = v31;
          *(_OWORD *)&v92[8] = v79;
          int v32 = v81[0];
          *(void *)&v92[24] = 0;
          *(_DWORD *)&v92[32] = 0;
          *(_DWORD *)&v92[36] = v81[0];
          if (v81[0])
          {
            __int16 v33 = (void *)WTF::fastMalloc((WTF *)v81[0]);
            *(_DWORD *)&v92[32] = v32;
            *(void *)&v92[24] = v33;
            memcpy(v33, v80, v81[0]);
          }
          long long v93 = *(_OWORD *)&v81[1];
          *(_OWORD *)int v94 = *(_OWORD *)v82;
          *(void *)&v94[14] = *(void *)&v82[14];
          unsigned int v34 = HIDWORD(v65);
          if (HIDWORD(v65) == v65)
          {
            WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v64, (unint64_t)&v84);
          }
          else
          {
            int v35 = v64;
            uint64_t v36 = (char *)v64 + 232 * HIDWORD(v65);
            uint64_t v37 = v84;
            *(void *)&long long v84 = 0;
            *(void *)uint64_t v36 = v37;
            v36[8] = BYTE8(v84);
            uint64_t v38 = v85;
            *(void *)&long long v85 = 0;
            *((void *)v36 + 2) = v38;
            uint64_t v39 = *((void *)&v85 + 1);
            *((void *)&v85 + 1) = 0;
            *((void *)v36 + 3) = v39;
            *((_DWORD *)v36 + 8) = *(_DWORD *)v86;
            long long v40 = *(_OWORD *)&v86[8];
            long long v41 = *(_OWORD *)v87;
            *(_OWORD *)(v36 + 72) = *(_OWORD *)&v87[16];
            *(_OWORD *)(v36 + 56) = v41;
            *(_OWORD *)(v36 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v40;
            uint64_t v42 = (WTF *)*(unsigned int *)&v87[44];
            *((void *)v36 + 11) = 0;
            *((void *)v36 + 12) = 0;
            uint64_t v43 = v36 + 88;
            *((_DWORD *)v43 + 3) = v42;
            if (v42)
            {
              char v44 = (void *)WTF::fastMalloc(v42);
              *((_DWORD *)v35 + 58 * v34 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v42;
              *(void *)uint64_t v43 = v44;
              memcpy(v44, *(const void **)&v87[32], *(unsigned int *)&v87[44]);
            }
            uint64_t v45 = (uint64_t)v35 + 232 * v34;
            long long v46 = v88;
            long long v47 = v89;
            *(unsigned char *)(v45 + 136) = v90[0];
            *(_OWORD *)(v45 + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v47;
            *(_OWORD *)(v45 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v46;
            uint64_t v48 = v91;
            if (v91) {
              *v91 += 2;
            }
            *(void *)(v45 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v48;
            uint64_t v49 = *(void *)v92;
            if (*(void *)v92) {
              **(_DWORD **)v92 += 2;
            }
            *((void *)v35 + 29 * v34 + 19) = v49;
            uint64_t v50 = (uint64_t)v35 + 232 * v34;
            *(_OWORD *)(v50 + 16WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_OWORD *)&v92[8];
            uint64_t v51 = (WTF *)*(unsigned int *)&v92[36];
            *(void *)(v50 + 176) = 0;
            *(void *)(v50 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
            uint64_t v52 = v50 + 176;
            *(_DWORD *)(v52 + 12) = v51;
            if (v51)
            {
              uint64_t v53 = (void *)WTF::fastMalloc(v51);
              *((_DWORD *)v35 + 58 * v34 + 46) = v51;
              *(void *)uint64_t v52 = v53;
              memcpy(v53, *(const void **)&v92[24], *(unsigned int *)&v92[36]);
            }
            uint64_t v54 = (uint64_t)v35 + 232 * v34;
            long long v56 = v93;
            long long v55 = *(_OWORD *)v94;
            *(void *)(v54 + 222) = *(void *)&v94[14];
            *(_OWORD *)(v54 + 192) = v56;
            *(_OWORD *)(v54 + 208) = v55;
            ++HIDWORD(v65);
            int v3 = v63;
          }
          WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v86[8], v25);
          uint64_t v57 = (WTF::StringImpl *)*((void *)&v85 + 1);
          *((void *)&v85 + 1) = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2) {
              WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v57 -= 2;
            }
          }
          int v58 = (WTF::StringImpl *)v85;
          *(void *)&long long v85 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2) {
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v58 -= 2;
            }
          }
          int v59 = (WTF::StringImpl *)v84;
          *(void *)&long long v84 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2) {
              WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v25);
            }
            else {
              *(_DWORD *)v59 -= 2;
            }
          }
        }
        unsigned int v7 = (WebCore::RealtimeMediaSourceCenter *)std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v25);
        v9 += 5;
        v10 -= 40;
        if (!v10)
        {
          unint64_t v60 = HIDWORD(v65);
          goto LABEL_68;
        }
      }
      uint64_t v13 = 0;
LABEL_12:
      uint64_t v14 = *v9;
      *uint64_t v9 = 0;
      *(void *)&long long v84 = v14;
      BYTE8(v8WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *((unsigned char *)v9 + 8);
      long long v15 = *((_OWORD *)v9 + 1);
      *((_OWORD *)v9 + 1) = 0u;
      long long v85 = v15;
      LODWORD(v1WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = *((_DWORD *)v9 + 8);
      *(_OWORD *)&v86[8] = v95;
      *(_OWORD *)uint64_t v87 = v96;
      *(_OWORD *)&v87[16] = v97;
      *(_OWORD *)&v87[32] = 0u;
      *(_DWORD *)uint64_t v86 = v14;
      *(_DWORD *)&v87[44] = v13;
      if (v13)
      {
        unsigned int v16 = (void *)WTF::fastMalloc(v13);
        *(_DWORD *)&v87[40] = v13;
        *(void *)&v87[32] = v16;
        memcpy(v16, (const void *)__src, HIDWORD(__src));
      }
      long long v88 = __n_4;
      long long v89 = v100;
      v90[0] = v101;
      __int16 v17 = (_DWORD *)v102;
      if ((void)v102) {
        *(_DWORD *)v102 += 2;
      }
      uint64_t v91 = v17;
      uint64_t v18 = *((void *)&v102 + 1);
      if (*((void *)&v102 + 1)) {
        **((_DWORD **)&v102 + 1) += 2;
      }
      *(void *)int v92 = v18;
      *(_OWORD *)&v92[8] = v103;
      int v19 = HIDWORD(v104);
      *(void *)&v92[24] = 0;
      *(_DWORD *)&v92[32] = 0;
      *(_DWORD *)&v92[36] = HIDWORD(v104);
      if (HIDWORD(v104))
      {
        uint64_t v20 = (void *)WTF::fastMalloc((WTF *)HIDWORD(v104));
        *(_DWORD *)&v92[32] = v19;
        *(void *)&v92[24] = v20;
        memcpy(v20, (const void *)v104, HIDWORD(v104));
      }
      long long v93 = v105;
      *(_OWORD *)int v94 = v106[0];
      *(void *)&v94[14] = *(void *)((char *)v106 + 14);
      std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::__optional_destruct_base[abi:sn180100]<WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v66, (uint64_t *)&v84);
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v86[8], v21);
      int v22 = (WTF::StringImpl *)*((void *)&v85 + 1);
      *((void *)&v85 + 1) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v11);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = (WTF::StringImpl *)v85;
      *(void *)&long long v85 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      unint64_t v24 = (WTF::StringImpl *)v84;
      *(void *)&long long v84 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v11);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_33;
    }
  }
  unint64_t v60 = 0;
LABEL_68:
  WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v64, v60);
  uint64_t v61 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  (*(void (**)(uint64_t, WebCore::RealtimeMediaSourceCenter **))(*(void *)v61 + 16))(v61, &v64);
  (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  return WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v62);
}

uint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 232 * v4;
  uint64_t v7 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v6 = v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v3 + 8);
  uint64_t v8 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v6 + 16) = v8;
  uint64_t v9 = *(void *)(v3 + 24);
  *(void *)(v3 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(void *)(v6 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v9;
  *(_DWORD *)(v6 + 32) = *(_DWORD *)(v3 + 32);
  long long v10 = *(_OWORD *)(v3 + 56);
  long long v11 = *(_OWORD *)(v3 + 72);
  *(_OWORD *)(v6 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v6 + 72) = v11;
  *(_OWORD *)(v6 + 56) = v10;
  int v12 = (WTF *)*(unsigned int *)(v3 + 100);
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 96) = 0;
  uint64_t v13 = v6 + 88;
  *(_DWORD *)(v13 + 12) = v12;
  if (v12)
  {
    uint64_t v14 = (void *)WTF::fastMalloc(v12);
    *(_DWORD *)(v5 + 232 * v4 + 96) = v12;
    *(void *)uint64_t v13 = v14;
    memcpy(v14, *(const void **)(v3 + 88), *(unsigned int *)(v3 + 100));
  }
  uint64_t v15 = v5 + 232 * v4;
  long long v16 = *(_OWORD *)(v3 + 104);
  long long v17 = *(_OWORD *)(v3 + 120);
  *(unsigned char *)(v15 + 136) = *(unsigned char *)(v3 + 136);
  *(_OWORD *)(v15 + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v17;
  *(_OWORD *)(v15 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v16;
  uint64_t v18 = (void *)(v15 + 144);
  int v19 = *(_DWORD **)(v3 + 144);
  if (v19) {
    *v19 += 2;
  }
  *uint64_t v18 = v19;
  uint64_t v20 = *(_DWORD **)(v3 + 152);
  if (v20) {
    *v20 += 2;
  }
  *(void *)(v5 + 232 * v4 + 152) = v20;
  uint64_t v21 = v5 + 232 * v4;
  *(_OWORD *)(v21 + 16WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_OWORD *)(v3 + 160);
  int v22 = (WTF *)*(unsigned int *)(v3 + 188);
  *(void *)(v21 + 176) = 0;
  *(void *)(v21 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  uint64_t v23 = v21 + 176;
  *(_DWORD *)(v23 + 12) = v22;
  if (v22)
  {
    unint64_t v24 = (void *)WTF::fastMalloc(v22);
    *(_DWORD *)(v5 + 232 * v4 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v22;
    *(void *)uint64_t v23 = v24;
    memcpy(v24, *(const void **)(v3 + 176), *(unsigned int *)(v3 + 188));
  }
  uint64_t v25 = v5 + 232 * v4;
  long long v26 = *(_OWORD *)(v3 + 192);
  long long v27 = *(_OWORD *)(v3 + 208);
  *(void *)(v25 + 222) = *(void *)(v3 + 222);
  *(_OWORD *)(v25 + 192) = v26;
  *(_OWORD *)(v25 + 208) = v27;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 232 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x11A7B97)
    {
      __break(0xC471u);
      JUMPOUT(0x198E23BE8);
    }
    unint64_t v3 = *(WTF::StringImpl **)a1;
    unsigned int v4 = (WTF::StringImpl *)(*(void *)a1 + 232 * *(unsigned int *)(a1 + 12));
    int v5 = 232 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(232 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0xE8;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::CaptureDeviceWithCapabilities>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CaptureDeviceWithCapabilities>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (char *)v5 + v6;
      uint64_t v8 = a3 + v6;
      uint64_t v9 = *(void *)((char *)v5 + v6);
      *(void *)unint64_t v7 = 0;
      *(void *)uint64_t v8 = v9;
      *(unsigned char *)(v8 + 8) = *((unsigned char *)v5 + v6 + 8);
      uint64_t v10 = *(void *)((char *)v5 + v6 + 16);
      *((void *)v7 + 2) = 0;
      *(void *)(v8 + 16) = v10;
      uint64_t v11 = *(void *)((char *)v5 + v6 + 24);
      *((void *)v7 + 3) = 0;
      *(void *)(v8 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v11;
      *(_DWORD *)(v8 + 32) = *(_DWORD *)((char *)v5 + v6 + 32);
      long long v12 = *(_OWORD *)((char *)v5 + v6 + 40);
      long long v13 = *(_OWORD *)((char *)v5 + v6 + 56);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)((char *)v5 + v6 + 72);
      *(_OWORD *)(v8 + 56) = v13;
      *(_OWORD *)(v8 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v12;
      uint64_t v14 = (WTF *)*(unsigned int *)((char *)v5 + v6 + 100);
      uint64_t v15 = a3 + v6;
      *(void *)(v15 + 88) = 0;
      *(void *)(v15 + 96) = 0;
      *(_DWORD *)(a3 + v6 + 10WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v14;
      if (v14)
      {
        long long v16 = (void *)WTF::fastMalloc(v14);
        *(_DWORD *)(v8 + 96) = v14;
        *(void *)(a3 + v6 + 88) = v16;
        memcpy(v16, *((const void **)v7 + 11), *((unsigned int *)v7 + 25));
      }
      long long v17 = *(_OWORD *)(v7 + 104);
      long long v18 = *(_OWORD *)(v7 + 120);
      *(unsigned char *)(v8 + 136) = v7[136];
      *(_OWORD *)(v8 + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v18;
      *(_OWORD *)(v8 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v17;
      int v19 = (_DWORD *)*((void *)v7 + 18);
      if (v19) {
        *v19 += 2;
      }
      *(void *)(v8 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v19;
      uint64_t v20 = (char *)v5 + v6;
      uint64_t v21 = *(_DWORD **)((char *)v5 + v6 + 152);
      if (v21) {
        *v21 += 2;
      }
      uint64_t v22 = a3 + v6;
      *(void *)(v22 + 152) = v21;
      *(_OWORD *)(v22 + 16WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *((_OWORD *)v20 + 10);
      uint64_t v23 = (WTF *)*((unsigned int *)v20 + 47);
      *(void *)(v22 + 176) = 0;
      *(void *)(v22 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
      *(_DWORD *)(a3 + v6 + 188) = v23;
      if (v23)
      {
        unint64_t v24 = (void *)WTF::fastMalloc(v23);
        *(_DWORD *)(a3 + v6 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v23;
        *(void *)(a3 + v6 + 176) = v24;
        memcpy(v24, *(const void **)((char *)v5 + v6 + 176), *((unsigned int *)v20 + 47));
      }
      uint64_t v25 = a3 + v6;
      long long v26 = *(_OWORD *)((char *)v5 + v6 + 192);
      long long v27 = *(_OWORD *)((char *)v5 + v6 + 208);
      *(void *)(v25 + 222) = *(void *)((char *)v5 + v6 + 222);
      *(_OWORD *)(v25 + 192) = v26;
      *(_OWORD *)(v25 + 208) = v27;
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)(v7 + 40), a2);
      int v28 = (WTF::StringImpl *)*((void *)v7 + 3);
      *((void *)v7 + 3) = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, a2);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
      uint64_t v29 = (WTF::StringImpl *)*((void *)v7 + 2);
      *((void *)v7 + 2) = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, a2);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)((char *)v5 + v6);
      *(void *)((char *)v5 + v6) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v6 += 232;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 232))
  {
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)(a1 + 40), a2);
    unsigned int v4 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    int v5 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v3);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::CaptureDeviceWithCapabilities>::destruct((WTF::StringImpl *)(*(void *)result + 232 * a2), (WTF::StringImpl *)(*(void *)result + 232 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(vWebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = a2;
    }
    int v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0x11A7B97)
      {
        __break(0xC471u);
        JUMPOUT(0x198E23F90);
      }
      uint64_t v6 = (WTF *)(232 * a2);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0xE8;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::CaptureDeviceWithCapabilities>::move(v5, (WTF::StringImpl *)((char *)v5 + 232 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::CaptureDeviceWithCapabilities>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)(v3 + 5), a2);
      unint64_t v4 = v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      int v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t result = *v3;
      WTF::StringImpl *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 29;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::CaptureDeviceWithCapabilities>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 232 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::computeFilteredDeviceList(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9D7C20;
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::computeFilteredDeviceList(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7C20;
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::computeFilteredDeviceList(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(void *a1, _DWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = a1;
  v150[13] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[6];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v121 = (WTF::Logger::LogSiteIdentifier *)a1[5];
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    unsigned int v6 = a2[3];
    if (v6)
    {
      int v7 = 0;
      int v8 = 0;
      int v123 = 0;
      int v119 = 0;
      unint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)a2 + 232 * v6;
      do
      {
        if (!*(unsigned char *)(v9 + 32)) {
          goto LABEL_58;
        }
        int v11 = *(unsigned __int8 *)(v9 + 8);
        if ((v11 - 1) > 2) {
          goto LABEL_58;
        }
        int v12 = v8 | (v11 == 3);
        int v13 = v7 | (v11 == 1);
        if (*((unsigned char *)v3 + 56))
        {
          if (v11 == 2)
          {
            uint64_t v15 = (const WTF::StringImpl **)(v9 + 24);
            uint64_t v14 = *(void *)(v9 + 24);
            if (!v14 || !*(_DWORD *)(v14 + 4)) {
              uint64_t v15 = (const WTF::StringImpl **)v9;
            }
            unsigned int v16 = a2[3];
            if (!v16) {
              goto LABEL_57;
            }
            int v17 = v8 | (v11 == 3);
            uint64_t v18 = *(void *)a2;
            uint64_t v19 = *(void *)a2 + 232 * v16;
            while (!WTF::equal(*(WTF **)v18, *v15, a3) || *(unsigned char *)(v18 + 8) != 1)
            {
              v18 += 232;
              if (v18 == v19)
              {
                int v7 = v13;
                int v8 = v17;
                goto LABEL_58;
              }
            }
            uint64_t v22 = v126;
            uint64_t v23 = HIDWORD(v126);
            if (!*((unsigned char *)v3 + 56))
            {
              LOBYTE(v11) = *(unsigned char *)(v9 + 8);
              int v12 = v17;
              goto LABEL_34;
            }
            int v12 = v17;
          }
          else
          {
            uint64_t v22 = v126;
            uint64_t v23 = HIDWORD(v126);
          }
          if (v23 == v22)
          {
            unint64_t v24 = WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v125, v22 + 1, v9);
            uint64_t v25 = v125 + 232 * HIDWORD(v126);
          }
          else
          {
            uint64_t v25 = v125 + 232 * v23;
            unint64_t v24 = v9;
          }
          WebCore::CaptureDeviceWithCapabilities::CaptureDeviceWithCapabilities(v25, v24);
          ++HIDWORD(v126);
        }
        else
        {
          if (v11 == 3)
          {
            unsigned int v21 = ++v123;
          }
          else
          {
            if (v11 != 1) {
              goto LABEL_57;
            }
            unsigned int v21 = ++v119;
          }
          if (v21 <= 1)
          {
            uint64_t v22 = v126;
            uint64_t v23 = HIDWORD(v126);
LABEL_34:
            *(void *)long long buf = 0;
            buf[8] = v11;
            uint64_t v141 = 0;
            v142 = 0;
            int v143 = 0;
            long long v144 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long __src = 0u;
            long long __n_4 = 0u;
            long long v149 = 0u;
            memset(v150, 0, 96);
            if (v23 == v22)
            {
              WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v125, (unint64_t)buf);
            }
            else
            {
              int v124 = v12;
              uint64_t v26 = v125;
              uint64_t v27 = v125 + 232 * v23;
              *(void *)uint64_t v27 = 0;
              *(unsigned char *)(v27 + 8) = v11;
              int v28 = v141;
              uint64_t v141 = 0;
              *(void *)(v27 + 16) = v28;
              uint64_t v29 = v142;
              v142 = 0;
              *(void *)(v27 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v29;
              *(_DWORD *)(v27 + 32) = v143;
              long long v30 = v144;
              long long v31 = v145;
              *(_OWORD *)(v27 + 72) = v146;
              *(_OWORD *)(v27 + 56) = v31;
              *(_OWORD *)(v27 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v30;
              int v32 = (WTF *)HIDWORD(__src);
              *(void *)(v27 + 88) = 0;
              *(void *)(v27 + 96) = 0;
              uint64_t v33 = v27 + 88;
              *(_DWORD *)(v33 + 12) = v32;
              if (v32)
              {
                unsigned int v34 = (void *)WTF::fastMalloc(v32);
                *(_DWORD *)(v26 + 232 * v23 + 96) = v32;
                *(void *)uint64_t v33 = v34;
                memcpy(v34, (const void *)__src, HIDWORD(__src));
              }
              uint64_t v35 = v26 + 232 * v23;
              long long v36 = __n_4;
              long long v37 = v149;
              *(unsigned char *)(v35 + 136) = v150[0];
              *(_OWORD *)(v35 + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v37;
              *(_OWORD *)(v35 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v36;
              uint64_t v38 = v150[1];
              if (v150[1]) {
                *(_DWORD *)v150[1] += 2;
              }
              *(void *)(v35 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v38;
              uint64_t v39 = v150[2];
              if (v150[2]) {
                *(_DWORD *)v150[2] += 2;
              }
              *(void *)(v26 + 232 * v23 + 152) = v39;
              uint64_t v40 = v26 + 232 * v23;
              *(_OWORD *)(v40 + 16WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_OWORD *)&v150[3];
              long long v41 = (WTF *)HIDWORD(v150[6]);
              *(void *)(v40 + 176) = 0;
              *(void *)(v40 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
              uint64_t v42 = v40 + 176;
              *(_DWORD *)(v42 + 12) = v41;
              if (v41)
              {
                uint64_t v43 = (void *)WTF::fastMalloc(v41);
                *(_DWORD *)(v26 + 232 * v23 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v41;
                *(void *)uint64_t v42 = v43;
                memcpy(v43, (const void *)v150[5], HIDWORD(v150[6]));
              }
              uint64_t v44 = v26 + 232 * v23;
              long long v46 = *(_OWORD *)&v150[7];
              long long v45 = *(_OWORD *)&v150[9];
              *(void *)(v44 + 222) = *(void *)((char *)&v150[10] + 6);
              *(_OWORD *)(v44 + 192) = v46;
              *(_OWORD *)(v44 + 208) = v45;
              ++HIDWORD(v126);
              uint64_t v3 = a1;
              int v12 = v124;
            }
            WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v144, a2);
            long long v47 = v142;
            v142 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2) {
                WTF::StringImpl::destroy(v47, (WTF::StringImpl *)a2);
              }
              else {
                *(_DWORD *)v47 -= 2;
              }
            }
            uint64_t v48 = v141;
            uint64_t v141 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2) {
                WTF::StringImpl::destroy(v48, (WTF::StringImpl *)a2);
              }
              else {
                *(_DWORD *)v48 -= 2;
              }
            }
            uint64_t v49 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2) {
                WTF::StringImpl::destroy(v49, (WTF::StringImpl *)a2);
              }
              else {
                *(_DWORD *)v49 -= 2;
              }
            }
          }
        }
LABEL_57:
        int v7 = v13;
        int v8 = v12;
LABEL_58:
        v9 += 232;
      }
      while (v9 != v10);
    }
    *((unsigned char *)v121 + 256) = *((unsigned char *)v3 + 56) ^ 1;
    uint64_t v50 = *(void *)(*((void *)v121 + 8) + 8);
    if (v50) {
      uint64_t v51 = (WebKit::WebPageProxy *)(v50 - 16);
    }
    else {
      uint64_t v51 = 0;
    }
    if (!*(unsigned char *)(WebKit::WebPageProxy::logger(v51) + 12)) {
      goto LABEL_197;
    }
    uint64_t v52 = (WTF::String *)HIDWORD(v126);
    uint64_t v122 = (WTF::Logger::LogSiteIdentifier *)(v3 + 1);
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v136, (WTF::Logger::LogSiteIdentifier *)(v3 + 1));
    uint64_t v120 = v52;
    WTF::String::number(v52);
    WTF::String::String((WTF::String *)&v134, " devices revealed, has filtering = ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v133);
    WTF::String::String((WTF::String *)&v132, " has camerCGFloat a = ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v131);
    WTF::String::String((WTF::String *)&v130, ", has microphone = ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v129);
    WTF::String::String((WTF::String *)&v128, " ");
    uint64_t v53 = v135;
    uint64_t v54 = v136;
    long long v55 = v134;
    if (v136) {
      int v56 = *((_DWORD *)v136 + 1);
    }
    else {
      int v56 = 0;
    }
    uint64_t v57 = v133;
    if (v135) {
      int v58 = *((_DWORD *)v135 + 1);
    }
    else {
      int v58 = 0;
    }
    int v59 = v132;
    if (v134) {
      uint64_t v60 = *((unsigned int *)v134 + 1);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = v131;
    if (v133) {
      int v62 = *((_DWORD *)v133 + 1);
    }
    else {
      int v62 = 0;
    }
    int v63 = v130;
    if (v132) {
      int v64 = *((_DWORD *)v132 + 1);
    }
    else {
      int v64 = 0;
    }
    if (v131) {
      int v65 = *((_DWORD *)v131 + 1);
    }
    else {
      int v65 = 0;
    }
    uint64_t v66 = v128;
    if (v130)
    {
      int v67 = *((_DWORD *)v130 + 1);
      if (v129)
      {
LABEL_77:
        int v68 = *((_DWORD *)v129 + 1);
        goto LABEL_78;
      }
    }
    else
    {
      int v67 = 0;
      if (v129) {
        goto LABEL_77;
      }
    }
    int v68 = 0;
LABEL_78:
    uint64_t v117 = v129;
    if (v128) {
      int v69 = *((_DWORD *)v128 + 1);
    }
    else {
      int v69 = 0;
    }
    WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v56, v58, v60, v62, v64, v65, v67, v68, (uint64_t)v137, v69);
    if (v137[0]) {
      goto LABEL_132;
    }
    if (v54 && (*((unsigned char *)v54 + 16) & 4) == 0
      || v53 && (*((unsigned char *)v53 + 16) & 4) == 0
      || v55 && (*((unsigned char *)v55 + 16) & 4) == 0
      || v57 && (*((unsigned char *)v57 + 16) & 4) == 0
      || v59 && (*((unsigned char *)v59 + 16) & 4) == 0
      || v61 && (*((unsigned char *)v61 + 16) & 4) == 0
      || v63 && (*((unsigned char *)v63 + 16) & 4) == 0
      || v117 && (*((unsigned char *)v117 + 16) & 4) == 0)
    {
      uint64_t v71 = v138;
      goto LABEL_98;
    }
    if (v66)
    {
      uint64_t v71 = v138;
      if ((*((unsigned char *)v66 + 16) & 4) == 0)
      {
LABEL_98:
        if (v71)
        {
          if (v71 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v71 + 20));
            uint64_t v72 = *(void *)buf;
            if (*(void *)buf)
            {
              uint64_t v116 = (uint64_t)v66;
              uint64_t v73 = (uint64_t)v63;
              **(_DWORD **)long long buf = 2;
              *(_DWORD *)(v72 + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v71;
              *(void *)(v72 + 8) = v72 + 20;
              *(_DWORD *)(v72 + 16) = 0;
              uint64_t v139 = v54;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v139, (char *)(v72 + 20));
              uint64_t v74 = v139;
              if (v139) {
                uint64_t v74 = (WTF::StringImpl *)*((unsigned int *)v139 + 1);
              }
              uint64_t v3 = a1;
              long long v75 = (char *)(v72 + 20 + 2 * (void)v74);
              v127[0] = v53;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v127, v75);
              unint64_t v76 = (unint64_t)v127[0];
              if (v127[0]) {
                unint64_t v76 = *((unsigned int *)v127[0] + 1);
              }
              uint64_t v77 = &v75[2 * v76];
              *(void *)long long buf = v55;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, v77);
              uint64_t v78 = *(void *)buf;
              if (*(void *)buf) {
                uint64_t v78 = *(unsigned int *)(*(void *)buf + 4);
              }
              WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v77[2 * v78], (uint64_t)v57, (uint64_t)v59, (uint64_t)v61, v73, (uint64_t)v117, v116);
              goto LABEL_134;
            }
          }
LABEL_132:
          __break(0xC471u);
          JUMPOUT(0x198E249FCLL);
        }
LABEL_133:
        uint64_t v72 = MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
        uint64_t v3 = a1;
LABEL_134:
        uint64_t v139 = (WTF::StringImpl *)v72;
        uint64_t v87 = v128;
        long long v128 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2) {
            WTF::StringImpl::destroy(v87, v70);
          }
          else {
            *(_DWORD *)v87 -= 2;
          }
        }
        long long v88 = v129;
        uint64_t v129 = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 2) {
            WTF::StringImpl::destroy(v88, v70);
          }
          else {
            *(_DWORD *)v88 -= 2;
          }
        }
        long long v89 = v130;
        uint64_t v130 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2) {
            WTF::StringImpl::destroy(v89, v70);
          }
          else {
            *(_DWORD *)v89 -= 2;
          }
        }
        char v90 = v131;
        uint64_t v131 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2) {
            WTF::StringImpl::destroy(v90, v70);
          }
          else {
            *(_DWORD *)v90 -= 2;
          }
        }
        uint64_t v91 = v132;
        uint64_t v132 = 0;
        if (v91)
        {
          if (*(_DWORD *)v91 == 2) {
            WTF::StringImpl::destroy(v91, v70);
          }
          else {
            *(_DWORD *)v91 -= 2;
          }
        }
        int v92 = v133;
        int v133 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2) {
            WTF::StringImpl::destroy(v92, v70);
          }
          else {
            *(_DWORD *)v92 -= 2;
          }
        }
        long long v93 = v134;
        int v134 = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 2) {
            WTF::StringImpl::destroy(v93, v70);
          }
          else {
            *(_DWORD *)v93 -= 2;
          }
        }
        int v94 = v135;
        uint64_t v135 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2) {
            WTF::StringImpl::destroy(v94, v70);
          }
          else {
            *(_DWORD *)v94 -= 2;
          }
        }
        long long v95 = v136;
        uint64_t v136 = 0;
        if (v95)
        {
          if (*(_DWORD *)v95 == 2) {
            WTF::StringImpl::destroy(v95, v70);
          }
          else {
            *(_DWORD *)v95 -= 2;
          }
        }
        long long v96 = qword_1EB358820;
        long long v97 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT);
        if (v97)
        {
          WTF::String::utf8();
          uint64_t v99 = v127[0] ? (char *)v127[0] + 16 : 0;
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v99;
          _os_log_impl(&dword_1985F2000, v96, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          long long v97 = v127[0];
          v127[0] = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 1) {
              long long v97 = (WTF *)WTF::fastFree(v97, v98);
            }
            else {
              --*(_DWORD *)v97;
            }
          }
        }
        if (WebKit2LogWebRTC)
        {
          long long v100 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v101 = *v100;
            if (v101) {
              break;
            }
            int v102 = *v100;
            atomic_compare_exchange_strong_explicit(v100, (unsigned __int8 *)&v102, v101 | 1, memory_order_acquire, memory_order_acquire);
            if (v102 == v101)
            {
              uint64_t v103 = WTF::Logger::observers(v97);
              uint64_t v104 = *(unsigned int *)(v103 + 12);
              if (v104)
              {
                long long v105 = *(uint64_t **)v103;
                uint64_t v118 = *(void *)v103 + 8 * v104;
                do
                {
                  uint64_t v106 = *v105;
                  *(_DWORD *)long long buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], v122);
                  LODWORD(v141) = 0;
                  WTF::String::number(v120);
                  int v143 = 0;
                  WTF::String::String((WTF::String *)&v144, " devices revealed, has filtering = ");
                  DWORD2(v14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v145);
                  DWORD2(v145) = 0;
                  WTF::String::String((WTF::String *)&v146, " has camerCGFloat a = ");
                  DWORD2(v146) = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&__src);
                  DWORD2(__src) = 0;
                  WTF::String::String((WTF::String *)&__n_4, ", has microphone = ");
                  DWORD2(__n_WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v149);
                  DWORD2(v149) = 0;
                  WTF::String::String((WTF::String *)v150, " ");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v127, (uint64_t)buf, 9uLL);
                  (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v106 + 16))(v106, &WebKit2LogWebRTC, 0, v127);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v127, v107);
                  for (uint64_t i = 136; i != -8; i -= 16)
                  {
                    uint64_t v109 = *(WTF::StringImpl **)&buf[i];
                    *(void *)&buf[i] = 0;
                    if (v109)
                    {
                      if (*(_DWORD *)v109 == 2) {
                        WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v98);
                      }
                      else {
                        *(_DWORD *)v109 -= 2;
                      }
                    }
                  }
                  ++v105;
                }
                while (v105 != (uint64_t *)v118);
              }
              int v110 = 1;
              atomic_compare_exchange_strong_explicit(v100, (unsigned __int8 *)&v110, 0, memory_order_release, memory_order_relaxed);
              uint64_t v3 = a1;
              if (v110 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        uint64_t v111 = v139;
        uint64_t v139 = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 2) {
            WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v98);
          }
          else {
            *(_DWORD *)v111 -= 2;
          }
        }
LABEL_197:
        uint64_t v112 = v3[8];
        v3[8] = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v112 + 16))(v112, &v125);
        (*(void (**)(uint64_t))(*(void *)v112 + 8))(v112);
        uint64_t v81 = (uint8_t *)&v125;
        return WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v81, v80);
      }
      if (!v138) {
        goto LABEL_133;
      }
      if ((v138 & 0x80000000) != 0) {
        goto LABEL_132;
      }
    }
    else
    {
      uint64_t v71 = v138;
      if (!v138) {
        goto LABEL_133;
      }
      uint64_t v66 = 0;
      if ((v138 & 0x80000000) != 0) {
        goto LABEL_132;
      }
    }
    WTF::tryFastCompactMalloc((WTF *)(v71 + 20));
    uint64_t v72 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v115 = (uint64_t)v63;
      **(_DWORD **)long long buf = 2;
      *(_DWORD *)(v72 + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v71;
      *(void *)(v72 + 8) = v72 + 20;
      *(_DWORD *)(v72 + 16) = 4;
      uint64_t v139 = v54;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v139, (char *)(v72 + 20));
      int v82 = v139;
      if (v139) {
        int v82 = (WTF::StringImpl *)*((unsigned int *)v139 + 1);
      }
      uint64_t v3 = a1;
      char v83 = (char *)v82 + v72 + 20;
      v127[0] = v53;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)v127, v83);
      long long v84 = v127[0];
      if (v127[0]) {
        long long v84 = (WTF *)*((unsigned int *)v127[0] + 1);
      }
      long long v85 = (char *)v84 + (void)v83;
      *(void *)long long buf = v55;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)buf, v85);
      uint64_t v86 = *(void *)buf;
      if (*(void *)buf) {
        uint64_t v86 = *(unsigned int *)(*(void *)buf + 4);
      }
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v85[v86], (uint64_t)v57, (uint64_t)v59, (uint64_t)v61, v115, (uint64_t)v117, (uint64_t)v66);
      goto LABEL_134;
    }
    goto LABEL_132;
  }
  *(_OWORD *)long long buf = 0uLL;
  uint64_t v79 = a1[8];
  a1[8] = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v79 + 16))(v79, buf);
  (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  uint64_t v81 = buf;
  return WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v81, v80);
}

uint64_t WebCore::CaptureDeviceWithCapabilities::CaptureDeviceWithCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v5 = *(_DWORD **)(a2 + 16);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 16) = v5;
  unsigned int v6 = *(_DWORD **)(a2 + 24);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v7;
  unint64_t v9 = (WTF *)*(unsigned int *)(a2 + 100);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 10WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v9;
  if (v9)
  {
    uint64_t v10 = (void *)WTF::fastMalloc(v9);
    *(_DWORD *)(a1 + 96) = v9;
    *(void *)(a1 + 88) = v10;
    memcpy(v10, *(const void **)(a2 + 88), *(unsigned int *)(a2 + 100));
  }
  long long v11 = *(_OWORD *)(a2 + 104);
  long long v12 = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 12WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v12;
  *(_OWORD *)(a1 + 10WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v11;
  int v13 = *(_DWORD **)(a2 + 144);
  if (v13) {
    *v13 += 2;
  }
  *(void *)(a1 + 14WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v13;
  uint64_t v14 = *(_DWORD **)(a2 + 152);
  if (v14) {
    *v14 += 2;
  }
  *(void *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 16WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = *(_OWORD *)(a2 + 160);
  uint64_t v15 = (WTF *)*(unsigned int *)(a2 + 188);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  *(_DWORD *)(a1 + 188) = v15;
  if (v15)
  {
    unsigned int v16 = (void *)WTF::fastMalloc(v15);
    *(_DWORD *)(a1 + 18WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v15;
    *(void *)(a1 + 176) = v16;
    memcpy(v16, *(const void **)(a2 + 176), *(unsigned int *)(a2 + 188));
  }
  long long v17 = *(_OWORD *)(a2 + 192);
  long long v18 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 222) = *(void *)(a2 + 222);
  *(_OWORD *)(a1 + 192) = v17;
  *(_OWORD *)(a1 + 208) = v18;
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D7C48;
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[5];
  a1[5] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = a1[4];
  a1[4] = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D7C48;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::call(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    BOOL v4 = a2 == 2;
    uint64_t v5 = *(void *)(*(void *)(v3 + 64) + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    if (*(unsigned char *)(v6 + 801) || !*(unsigned char *)(v6 + 800))
    {
      char v7 = 0;
      if (!v5) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add(v23, (uint64_t *)(v3 + 56), (uint64_t *)&IdentifierInternal);
      long long v11 = (atomic_uint *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(*(WebKit::WebsiteDataStore **)(v6 + 312));
      atomic_fetch_add(v11, 1u);
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 32);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
      long long v12 = *(atomic_uint **)(v3 + 8);
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      int v13 = IdentifierInternal;
      *(_OWORD *)uint64_t v23 = *(_OWORD *)(a1 + 16);
      uint64_t v14 = *(atomic_uint **)(a1 + 32);
      atomic_fetch_add(v14, 1u);
      uint64_t v15 = *(atomic_uint **)(a1 + 40);
      atomic_fetch_add(v15, 1u);
      uint64_t v16 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = 0;
      uint64_t v17 = WTF::fastMalloc((WTF *)0x50);
      *(void *)uint64_t v17 = &unk_1EE9D7C70;
      *(void *)(v17 + 8) = v3;
      *(void *)(v17 + 16) = v12;
      *(void *)(v17 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v13;
      *(_OWORD *)(v17 + 32) = *(_OWORD *)v23;
      *(void *)(v17 + 48) = v14;
      *(void *)(v17 + 56) = v15;
      *(unsigned char *)(v17 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v4;
      *(void *)(v17 + 72) = v16;
      uint64_t v22 = v17;
      WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin((uint64_t)v11, v21, v20, &v22);
      uint64_t v18 = v22;
      uint64_t v22 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref((unsigned int *)v11);
      char v7 = 1;
      if (!v5)
      {
LABEL_8:
        if (v7) {
          return;
        }
        goto LABEL_9;
      }
    }
    CFRelease(*(CFTypeRef *)(v5 - 8));
    goto LABEL_8;
  }
LABEL_9:
  *(_OWORD *)uint64_t v23 = 0uLL;
  uint64_t IdentifierInternal = 0;
  uint64_t v25 = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(void *)v8 + 16))(v8, v23, &IdentifierInternal);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t v10 = v25;
  uint64_t v25 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v19 = IdentifierInternal;
  uint64_t IdentifierInternal = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v9);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v9);
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0::operator()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)::{lambda(WTF::String &&)#1},void,WebKit::UserMediaPermissionCheckProxy>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D7C70;
  uint64_t v3 = a1[9];
  a1[9] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[7];
  a1[7] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = a1[6];
  a1[6] = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  }
  uint64_t v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0::operator()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)::{lambda(WTF::String &&)#1},void,WebKit::UserMediaPermissionCheckProxy>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D7C70;
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0::operator()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)::{lambda(WTF::String &&)#1},void,WebKit::UserMediaPermissionCheckProxy>::call(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !*(void *)(v3 + 8)) {
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v5 + 56);
  char v7 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v6, *(void *)(a1 + 24));
  if (v6)
  {
    uint64_t v8 = (void *)(v6 + 8 * *(unsigned int *)(v6 - 4));
    if (v8 == v7) {
      goto LABEL_21;
    }
  }
  else
  {
    if (!v7)
    {
LABEL_21:
      long long v33 = 0uLL;
      v32[0] = 0;
      v32[1] = 0;
      uint64_t v14 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = 0;
      (*(void (**)(uint64_t, long long *, WTF::StringImpl **))(*(void *)v14 + 16))(v14, &v33, v32);
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      uint64_t v16 = v32[1];
      v32[1] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v15);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
      uint64_t v17 = v32[0];
      v32[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v15);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      return (WTF::StringImpl *)WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v15);
    }
    uint64_t v8 = 0;
  }
  if (v8 != v7) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove((uint64_t *)(v5 + 56), v7);
  }
  uint64_t v9 = *(void *)(*(void *)(v5 + 64) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  if (*(unsigned char *)(v10 + 801))
  {
    BOOL v11 = 0;
    if (!v9) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  BOOL v11 = *(unsigned char *)(v10 + 800) != 0;
  if (v9) {
LABEL_15:
  }
    CFRelease(*(CFTypeRef *)(v9 - 8));
LABEL_16:
  if (!v11) {
    goto LABEL_21;
  }
  WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs((WebKit::UserMediaPermissionRequestManagerProxy *)v5);
  long long v12 = *a2;
  if (*a2) {
    *(_DWORD *)v12 += 2;
  }
  v32[0] = v12;
  WebKit::UserMediaPermissionRequestManagerProxy::ephemeralDeviceHashSaltForFrame(&v32[1], v5, *(void *)(a1 + 32), *(void *)(a1 + 40));
  if (*(unsigned char *)(a1 + 64))
  {
    char v13 = 1;
  }
  else
  {
    long long v33 = *(_OWORD *)(a1 + 32);
    char v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(*(void *)(v5 + 280), &v33);
  }
  uint64_t v19 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  long long v31 = *(_OWORD *)v32;
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v20 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v20 = &unk_1EE9D7C98;
  *(void *)(v20 + 8) = v19;
  *(_OWORD *)(v20 + 16) = v31;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v5 + 248);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
  uint64_t v25 = *(atomic_uint **)(v5 + 8);
  if (v25) {
    atomic_fetch_add(v25, 1u);
  }
  uint64_t v26 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v26 = &unk_1EE9D7C20;
  *(void *)(v26 + 8) = v21;
  *(void *)(v26 + 16) = v23;
  *(void *)(v26 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = "computeFilteredDeviceList";
  *(void *)(v26 + 32) = v24;
  *(void *)(v26 + 4WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = v5;
  *(void *)(v26 + 48) = v25;
  *(unsigned char *)(v26 + 56) = v13;
  *(void *)(v26 + 6WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v20;
  WebCore::RealtimeMediaSourceCenter::singleton((WebCore::RealtimeMediaSourceCenter *)v26);
  uint64_t v27 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v27 = &unk_1EE9D7BF8;
  *(unsigned char *)(v27 + 8) = v13;
  *(void *)(v27 + 16) = v26;
  *(void *)&long long v33 = v27;
  WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices();
  uint64_t v29 = v33;
  *(void *)&long long v33 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  long long v30 = v32[1];
  v32[1] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t result = v32[0];
  v32[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit38UserMediaPermissionRequestManagerProxy29enumerateMediaDevicesForFrameEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_3RefINS4_14SecurityOriginENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEESK_ONS_17CompletionHandlerIFvRKNS_6VectorINS4_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS4_20MediaDeviceHashSaltsEEEEEN3__0clENS2_29UserMediaPermissionCheckProxy14PermissionInfoEENUlONS_6StringEE_clES12_EUlOT_E_vJOSQ_EED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9D7C98;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit38UserMediaPermissionRequestManagerProxy29enumerateMediaDevicesForFrameEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_3RefINS4_14SecurityOriginENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEESK_ONS_17CompletionHandlerIFvRKNS_6VectorINS4_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS4_20MediaDeviceHashSaltsEEEEEN3__0clENS2_29UserMediaPermissionCheckProxy14PermissionInfoEENUlONS_6StringEE_clES12_EUlOT_E_vJOSQ_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D7C98;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit38UserMediaPermissionRequestManagerProxy29enumerateMediaDevicesForFrameEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_3RefINS4_14SecurityOriginENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEESK_ONS_17CompletionHandlerIFvRKNS_6VectorINS4_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS4_20MediaDeviceHashSaltsEEEEEN3__0clENS2_29UserMediaPermissionCheckProxy14PermissionInfoEENUlONS_6StringEE_clES12_EUlOT_E_vJOSQ_EE4callES17_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 16))(v2, a2, a1 + 16);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  uint64_t v9 = *(void *)result;
  if (*(void *)result) {
    int v10 = *(_DWORD *)(v9 + 4);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = *a2;
  if (*a2) {
    int v12 = *(_DWORD *)(v11 + 4);
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = *a3;
  if (*a3) {
    int v14 = *(_DWORD *)(v13 + 4);
  }
  else {
    int v14 = 0;
  }
  uint64_t v15 = *a4;
  if (*a4) {
    int v16 = *(_DWORD *)(v15 + 4);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = *a5;
  if (*a5) {
    int v18 = *(_DWORD *)(v17 + 4);
  }
  else {
    int v18 = 0;
  }
  if (((v18 | v16) & 0x80000000) == 0)
  {
    BOOL v19 = __OFADD__(v16, v18);
    int v20 = v16 + v18;
    BOOL v21 = v19;
    if ((v14 & 0x80000000) == 0 && !v21)
    {
      BOOL v19 = __OFADD__(v14, v20);
      int v22 = v14 + v20;
      BOOL v23 = v19;
      if ((v12 & 0x80000000) == 0 && !v23)
      {
        BOOL v19 = __OFADD__(v12, v22);
        int v24 = v12 + v22;
        BOOL v25 = v19;
        if ((v10 & 0x80000000) == 0 && !v25)
        {
          uint64_t result = (v10 + v24);
          if (!__OFADD__(v10, v24))
          {
            if ((!v9 || (*(unsigned char *)(v9 + 16) & 4) != 0)
              && (!v11 || (*(unsigned char *)(v11 + 16) & 4) != 0)
              && (!v13 || (*(unsigned char *)(v13 + 16) & 4) != 0))
            {
              if (v15)
              {
                unsigned int v27 = *(_DWORD *)(v15 + 16);
                int v26 = (v27 >> 2) & 1;
                if (!v17 || (v27 & 4) == 0) {
                  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v26, v9, v11, v13, v15, (_DWORD *)v17, a6);
                }
              }
              else if (!v17)
              {
                int v26 = 1;
                return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v26, v9, v11, v13, v15, (_DWORD *)v17, a6);
              }
              int v26 = (*(unsigned __int8 *)(v17 + 16) >> 2) & 1;
            }
            else
            {
              int v26 = 0;
            }
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v26, v9, v11, v13, v15, (_DWORD *)v17, a6);
          }
        }
      }
    }
  }
  *a6 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _DWORD *a7@<X6>, void *a8@<X8>)
{
  int v13 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v15 = v36;
        if (v36)
        {
          int v16 = (char *)(v36 + 5);
          *long long v36 = 2;
          v15[1] = v13;
          *((void *)v15 + 1) = v15 + 5;
          void v15[4] = 4;
          uint64_t v32 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v32, (char *)v15 + 20);
          uint64_t v17 = v32;
          if (v32) {
            uint64_t v17 = *(unsigned int *)(v32 + 4);
          }
          int v18 = &v16[v17];
          uint64_t v33 = a4;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v33, &v16[v17]);
          uint64_t v19 = v33;
          if (v33) {
            uint64_t v19 = *(unsigned int *)(v33 + 4);
          }
          int v20 = &v18[v19];
          uint64_t v34 = a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v34, &v18[v19]);
          uint64_t v21 = v34;
          if (v34) {
            uint64_t v21 = *(unsigned int *)(v34 + 4);
          }
          int v22 = &v20[v21];
          uint64_t v35 = a6;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v35, &v20[v21]);
          uint64_t v23 = v35;
          if (v35) {
            uint64_t v23 = *(unsigned int *)(v35 + 4);
          }
          long long v36 = a7;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v36, &v22[v23]);
        }
        goto LABEL_28;
      }
LABEL_16:
      uint64_t v15 = 0;
      goto LABEL_28;
    }
LABEL_17:
    uint64_t v15 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_28;
  }
  if (!result) {
    goto LABEL_17;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_16;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v15 = v36;
  if (v36)
  {
    int v24 = v36 + 5;
    *long long v36 = 2;
    v15[1] = v13;
    *((void *)v15 + 1) = v15 + 5;
    void v15[4] = 0;
    uint64_t v32 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v32, (char *)v15 + 20);
    uint64_t v25 = v32;
    if (v32) {
      uint64_t v25 = *(unsigned int *)(v32 + 4);
    }
    int v26 = (char *)v24 + 2 * v25;
    uint64_t v33 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v33, v26);
    uint64_t v27 = v33;
    if (v33) {
      uint64_t v27 = *(unsigned int *)(v33 + 4);
    }
    int v28 = &v26[2 * v27];
    uint64_t v34 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v34, v28);
    uint64_t v29 = v34;
    if (v34) {
      uint64_t v29 = *(unsigned int *)(v34 + 4);
    }
    long long v30 = &v28[2 * v29];
    uint64_t v35 = a6;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v35, v30);
    uint64_t v31 = v35;
    if (v35) {
      uint64_t v31 = *(unsigned int *)(v35 + 4);
    }
    long long v36 = a7;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v36, &v30[2 * v31]);
  }
LABEL_28:
  *a8 = v15;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D7CC0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7CC0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2 = *(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8);
  if (a2) {
    return WebKit::UserMediaPermissionRequestProxy::allow(v2);
  }
  else {
    return WebKit::UserMediaPermissionRequestProxy::deny(v2, 5);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(void)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9D7CE8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7CE8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(void)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2 = *(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8);
  if (a2) {
    return WebKit::UserMediaPermissionRequestProxy::allow(v2);
  }
  else {
    return WebKit::UserMediaPermissionRequestProxy::deny(v2, 5);
  }
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  uint64_t v9 = *(unsigned int *)(a1 + 12);
  int v10 = *(_DWORD *)(a1 + 12);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a2 + 8);
  if (v12)
  {
    if (v12 == 1)
    {
      uint64_t v13 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v13 = v14;
      int v10 = *(_DWORD *)(a1 + 12);
    }
    *(void *)(v11 + 8 * v9) = v13;
  }
  else
  {
    *(void *)(v11 + 8 * v9) = 0;
  }
  *(_DWORD *)(a1 + 12) = v10 + 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded(WebKit::WebProcessProxy &)::$_0,void,WebKit::UserMediaPermissionRequestManagerProxy &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 64) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(void *)(result + 32) == *(void *)(v3 + 256))
  {
    int v4 = *(_DWORD *)(*(void *)(v3 + 32) + 824);
    unint64_t v5 = *(unsigned char **)(result + 16);
    **(unsigned char **)(result + 8) |= (v4 & 0x700A800) != 0;
    *v5 |= (v4 & 0x6D5000) != 0;
    **(unsigned char **)(result + 24) |= *(void *)(a2 + 264) != 0;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::setCaptureEnabled(BOOL)::$_0,void,WebKit::UserMediaPermissionRequestManagerProxy &>::call(uint64_t a1, WebKit::UserMediaPermissionRequestManagerProxy *a2)
{
  uint64_t v3 = *(void *)(*((void *)a2 + 8) + 8);
  if (v3) {
    int v4 = (WebKit::WebPageProxy *)(v3 - 16);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = WebKit::WebPageProxy::logger(v4);
  uint64_t v6 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(void *)a2 + 24))(a2);
  uint64_t v8 = *((void *)a2 + 31);
  v11[0] = v6;
  v11[1] = v7;
  void v11[2] = "stopCapture";
  v11[3] = v8;
  if (*(unsigned char *)(v5 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  WebKit::UserMediaPermissionRequestManagerProxy::invalidatePendingRequests(a2, v7);
  uint64_t v9 = *(void *)(*((void *)a2 + 8) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  WebKit::WebPageProxy::stopMediaCapture(v10, 4);
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 - 8));
  }
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::captureDevicesChanged(void)::$_0,void,WebKit::UserMediaPermissionRequestManagerProxy &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 64) + 8);
  if (v3) {
    int v4 = (WebKit::WebPageProxy *)(v3 - 16);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = WebKit::WebPageProxy::logger(v4);
  uint64_t v6 = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unint64_t v7 = *(WTF **)(a2 + 248);
  v23[0] = v6;
  v23[1] = v8;
  uint64_t v23[2] = (WTF *)"captureDevicesChanged";
  v23[3] = v7;
  if (*(unsigned char *)(v5 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v23);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 64) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  if (!*(unsigned char *)(v10 + 801))
  {
    if (*(unsigned char *)(v10 + 800))
    {
      uint64_t v12 = *(void *)(v10 + 328);
      if (v12)
      {
        WebCore::SecurityOrigin::create((uint64_t *)v23, (WebCore::SecurityOrigin *)(v12 + 48), v11);
        uint64_t v13 = *(void *)(v10 + 328);
        uint64_t v14 = *(void *)(v13 + 272);
        uint64_t v15 = *(void *)(v13 + 280);
        int v16 = v23[0];
        atomic_fetch_add((atomic_uint *volatile)v23[0], 1u);
        int v22 = v16;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
        uint64_t v17 = *(atomic_uint **)(a2 + 8);
        if (v17) {
          atomic_fetch_add(v17, 1u);
        }
        int v18 = (void *)WTF::fastMalloc((WTF *)0x10);
        *int v18 = &unk_1EE9D7A40;
        v18[1] = v17;
        uint64_t v21 = v18;
        WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(a2, v14, v15, (uint64_t *)&v22, (uint64_t *)v23, (uint64_t *)&v21);
        if (v21) {
          (*(void (**)(void *))(*v21 + 8))(v21);
        }
        if (v22) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v22, v19);
        }
        int v20 = v23[0];
        v23[0] = 0;
        if (v20) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v20, v19);
        }
      }
    }
  }
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 - 8));
  }
}

void *WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::updateCaptureDevices(WebKit::UserMediaProcessManager::ShouldNotify)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9D7D88;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::updateCaptureDevices(WebKit::UserMediaProcessManager::ShouldNotify)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9D7D88;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::updateCaptureDevices(WebKit::UserMediaProcessManager::ShouldNotify)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(WTF *result, _DWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *((void *)result + 1);
  if (v3 && *(void *)(v3 + 8))
  {
    uint64_t v5 = result;
    uint64_t v6 = *((void *)result + 2);
    unint64_t v7 = (WTF::StringImpl **)(v6 + 16);
    LODWORD(v8) = *(_DWORD *)(v6 + 28);
    if (v8 == a2[3])
    {
      if (v8)
      {
        uint64_t v9 = *(void *)a2;
        uint64_t v10 = *(void *)a2 + 40 * v8;
        do
        {
          if ((*(unsigned __int8 *)(v9 + 8) | 2) == 3)
          {
            if (!*(_DWORD *)(v6 + 28)) {
              goto LABEL_17;
            }
            uint64_t v11 = 0;
            unint64_t v12 = 0;
            while (1)
            {
              uint64_t v13 = *v7;
              uint64_t result = (WTF *)WTF::equal(*(WTF **)v9, *(const WTF::StringImpl **)((char *)*v7 + v11), a3);
              if (result)
              {
                if ((*(unsigned char *)(v9 + 32) != 0) != (*((unsigned char *)v13 + v11 + 32) != 0)) {
                  break;
                }
              }
              ++v12;
              unint64_t v8 = *(unsigned int *)(v6 + 28);
              v11 += 40;
              if (v12 >= v8) {
                goto LABEL_15;
              }
            }
          }
          v9 += 40;
        }
        while (v9 != v10);
      }
    }
    else
    {
LABEL_15:
      if (v8) {
        WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(*v7, (WTF::StringImpl *)((char *)*v7 + 40 * v8));
      }
LABEL_17:
      uint64_t result = WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v6 + 16, a2);
      if (*((unsigned char *)v5 + 24))
      {
        uint64_t v14 = WTF::fastMalloc((WTF *)0x10);
        *(void *)uint64_t v14 = &unk_1EE9D7D60;
        uint64_t v15 = v14;
        WebKit::UserMediaPermissionRequestManagerProxy::forEach(&v15);
        return (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(void)::$_0 &&>>(WebCore::RealtimeMediaSourceCenter ****a1)
{
  uint64_t v1 = ***a1;
  updated = (WebCore::RealtimeMediaSourceCenter *)WebKit::UserMediaProcessManager::updateCaptureDevices(v1, 0);
  uint64_t v3 = WebCore::RealtimeMediaSourceCenter::singleton(updated);

  return MEMORY[0x1F41714D8](v3, v1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::VisitedLinkTableController::RemoveAllVisitedLinks>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 1552;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::VisitedLinkTableController::SetVisitedLinkTable>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 1553;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetBackForwardCacheCapacity>(uint64_t a1, int **a2, uint64_t a3, char a4)
{
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 2670;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  int v18 = v8;
  IPC::Encoder::operator<<<int>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntry(WebKit::SuspendedPageProxy &)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 416);
  if (v2) {
    uint64_t v2 = *(void *)(v2 + 32);
  }
  return v2 == *(void *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntriesForProcess(WebKit::WebProcessProxy &)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 416) + 8) == *(void *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntriesForSession(PAL::SessionID)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(*(void *)(a2 + 416) + 8);
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  uint64_t v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v6);
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
  }
  uint64_t v4 = *(void *)(v3 + 752);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return v4 && *(void *)(v4 + 24) == *(void *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntriesForPage(WebKit::WebPageProxy &)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 384) == *(void *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntriesForPageAndProcess(WebKit::WebPageProxy &,WebKit::WebProcessProxy &)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 384) == *(void *)(a1 + 8)
      && *(void *)(*(void *)(a2 + 416) + 8) == *(void *)(a1 + 16);
}

void WebKit::InjectedBundle::setBundleParameters(WebKit::InjectedBundle *a1, uint64_t a2, uint64_t a3)
{
  WebKit::createUnarchiver(&v9, a2, a3);
  id v4 = v9;
  uint64_t v5 = [v9 decodeObjectOfClasses:WebKit::InjectedBundle::classesForCoder(a1) forKey:@"parameters"];
  if (v5)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v6 = (void *)*((void *)a1 + 6);
    if (v6)
    {
      [v6 setParametersForKeyWithDictionary:v5];
    }
    else
    {
      unint64_t v7 = [[WKWebProcessBundleParameters alloc] initWithDictionary:v5];
      unint64_t v8 = (const void *)*((void *)a1 + 6);
      *((void *)a1 + 6) = v7;
      if (v8) {
        CFRelease(v8);
      }
    }
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_198E26B70(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ARKitInlinePreviewModelPlayer::ARKitInlinePreviewModelPlayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9D7EB8;
  uint64_t v5 = (atomic_uint **)(a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v6 = *v5;
  if (*v5) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 2WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = v6;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  unint64_t v7 = *(atomic_uint **)(a3 + 8);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *(void *)(a1 + 32) = v7;
  return a1;
}

void sub_198E26C4C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = (unsigned int *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WebCore::ModelPlayer::~ModelPlayer(v2);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::~ARKitInlinePreviewModelPlayer(WebKit::ARKitInlinePreviewModelPlayer *this, void *a2)
{
  *(void *)this = &unk_1EE9D7EB8;
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + WebKit::PageClientImpl::unlockFullscreenOrientation(this - 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  id v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);

  WebCore::ModelPlayer::~ModelPlayer(this);
}

uint64_t WebKit::ARKitInlinePreviewModelPlayer::layer(WebKit::ARKitInlinePreviewModelPlayer *this)
{
  return 0;
}

uint64_t WebKit::ARKitInlinePreviewModelPlayer::layerHostingContextIdentifier(WebKit::ARKitInlinePreviewModelPlayer *this)
{
  return 0;
}

void WebKit::ARKitInlinePreviewModelPlayer::getCamera(void *a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v19);
  if (v20 && (uint64_t v4 = a1[3]) != 0 && (v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    unint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9D80C8;
    v7[1] = v6;
    if (v20)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 56))(v5 + 16);
      id v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)id v9 = 2007;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      uint64_t v21 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v19);
      v17[0] = v19[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v17);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EE9D8100;
      v10[1] = v7;
      uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v17[0] = (uint64_t)v10;
      v17[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v5 + 16) + 40))(v5 + 16, &v21, v17, 0);
      uint64_t v13 = v17[0];
      v17[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v14 = v21;
      uint64_t v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOBYTE(v17[0]) = 0;
    char v18 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)>::operator()(a2);
  }
}

void sub_198E26F88(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198E27130(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setCamera(void *a1, uint64_t *a2, double a3, double a4, double a5)
{
  v22[0] = a3;
  v22[1] = a4;
  void v22[2] = a5;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v20);
  if (v21 && (v7 = a1[3]) != 0 && (uint64_t v8 = *(void *)(v7 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v8 - 8));
    uint64_t v9 = *a2;
    *a2 = 0;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EE9D8128;
    v10[1] = v9;
    if (v21)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 16) + 56))(v8 + 16);
      unint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v12 = 2014;
      *((void *)v12 + 1) = v11;
      *((void *)v12 + 66) = (char *)v12 + 16;
      *((void *)v12 + 67) = 512;
      *((void *)v12 + 68) = 0;
      *((void *)v12 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v12 + 69) = 0;
      IPC::Encoder::encodeHeader(v12);
      int v24 = v12;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, v20);
      v23[0] = v20[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, v23);
      IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode(v12, v22);
      uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v13 = &unk_1EE9D8150;
      v13[1] = v10;
      uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v23[0] = (uint64_t)v13;
      v23[1] = v14;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v8 + 16) + 40))(v8 + 16, &v24, v23, 0);
      uint64_t v16 = v23[0];
      v23[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      char v17 = v24;
      int v24 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v15);
        WTF::fastFree(v18, v19);
      }
      CFRelease(*(CFTypeRef *)(v8 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
  }
}

void sub_198E2738C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  uint64_t v19 = *(IPC::Encoder **)(v17 - 56);
  *(void *)(v17 - 56) = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, a2);
    WTF::fastFree(v20, v21);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::isPlayingAnimation(void *a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v17);
  if (v18 && (uint64_t v4 = a1[3]) != 0 && (v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9D8178;
    v7[1] = v6;
    if (v18)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 56))(v5 + 16);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 2011;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      char v20 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v17);
      v19[0] = v17[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v19);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EE9D81B0;
      v10[1] = v7;
      uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v19[0] = (uint64_t)v10;
      v19[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v5 + 16) + 40))(v5 + 16, &v20, v19, 0);
      uint64_t v13 = v19[0];
      v19[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v14 = v20;
      char v20 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOWORD(v19[0]) = 0;
    WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(a2);
  }
}

void sub_198E276AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setAnimationIsPlaying(void *a1, char a2, uint64_t *a3)
{
  (*(void (**)(void *__return_ptr))(*a1 + 240))(v21);
  if (v22 && (uint64_t v6 = a1[3]) != 0 && (v7 = *(void *)(v6 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v7 - 8));
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EE9D81D8;
    v9[1] = v8;
    if (v22)
    {
      uint64_t v19 = v21;
      char v20 = a2;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 56))(v7 + 16);
      uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v11 = 2013;
      *((void *)v11 + 1) = v10;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      int v24 = v11;
      IPC::ArgumentCoder<std::tuple<WebKit::ModelIdentifier const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebKit::ModelIdentifier const&,BOOL>,0ul,1ul>(v11, (uint64_t)&v19);
      unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v12 = &unk_1EE9D8200;
      v12[1] = v9;
      uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v23[0] = v12;
      v23[1] = v13;
      (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v7 + 16) + 40))(v7 + 16, &v24, v23, 0);
      uint64_t v15 = v23[0];
      v23[0] = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      uint64_t v16 = v24;
      int v24 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v14);
        WTF::fastFree(v17, v18);
      }
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
  }
}

void sub_198E279E4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::isLoopingAnimation(void *a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v17);
  if (v18 && (uint64_t v4 = a1[3]) != 0 && (v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9D8228;
    v7[1] = v6;
    if (v18)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 56))(v5 + 16);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 2009;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      char v20 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v17);
      v19[0] = v17[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v19);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EE9D8250;
      v10[1] = v7;
      uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v19[0] = (uint64_t)v10;
      v19[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v5 + 16) + 40))(v5 + 16, &v20, v19, 0);
      uint64_t v13 = v19[0];
      v19[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v14 = v20;
      char v20 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOWORD(v19[0]) = 0;
    WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(a2);
  }
}

void sub_198E27D04(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setIsLoopingAnimation(void *a1, char a2, uint64_t *a3)
{
  (*(void (**)(void *__return_ptr))(*a1 + 240))(v21);
  if (v22 && (uint64_t v6 = a1[3]) != 0 && (v7 = *(void *)(v6 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v7 - 8));
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EE9D8278;
    v9[1] = v8;
    if (v22)
    {
      uint64_t v19 = v21;
      char v20 = a2;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 56))(v7 + 16);
      uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v11 = 2016;
      *((void *)v11 + 1) = v10;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      int v24 = v11;
      IPC::ArgumentCoder<std::tuple<WebKit::ModelIdentifier const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebKit::ModelIdentifier const&,BOOL>,0ul,1ul>(v11, (uint64_t)&v19);
      unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v12 = &unk_1EE9D82A0;
      v12[1] = v9;
      uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v23[0] = v12;
      v23[1] = v13;
      (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v7 + 16) + 40))(v7 + 16, &v24, v23, 0);
      uint64_t v15 = v23[0];
      v23[0] = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      uint64_t v16 = v24;
      int v24 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v14);
        WTF::fastFree(v17, v18);
      }
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
  }
}

void sub_198E2803C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::animationDuration(void *a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v17);
  if (v18 && (uint64_t v4 = a1[3]) != 0 && (v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9D82C8;
    v7[1] = v6;
    if (v18)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 56))(v5 + 16);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 2006;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      char v21 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v17);
      uint64_t v19 = (void *)v17[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, (uint64_t *)&v19);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EE9D8300;
      v10[1] = v7;
      uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v19 = v10;
      uint64_t v20 = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, void **, void))(*(void *)(v5 + 16) + 40))(v5 + 16, &v21, &v19, 0);
      uint64_t v13 = (uint64_t)v19;
      uint64_t v19 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v14 = v21;
      char v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOBYTE(v19) = 0;
    LOBYTE(v2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)>::operator()(a2);
  }
}

void sub_198E28360(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198E28508(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::animationCurrentTime(void *a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v17);
  if (v18 && (uint64_t v4 = a1[3]) != 0 && (v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9D8328;
    v7[1] = v6;
    if (v18)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 56))(v5 + 16);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 2005;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      char v21 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v17);
      uint64_t v19 = (void *)v17[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, (uint64_t *)&v19);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EE9D8350;
      v10[1] = v7;
      uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v19 = v10;
      uint64_t v20 = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, void **, void))(*(void *)(v5 + 16) + 40))(v5 + 16, &v21, &v19, 0);
      uint64_t v13 = (uint64_t)v19;
      uint64_t v19 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v14 = v21;
      char v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOBYTE(v19) = 0;
    LOBYTE(v2WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)>::operator()(a2);
  }
}

void sub_198E28760(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setAnimationCurrentTime(void *a1, uint64_t *a2, double a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v19);
  if (v20 && (uint64_t v6 = a1[3]) != 0 && (v7 = *(void *)(v6 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v7 - 8));
    uint64_t v8 = *a2;
    *a2 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EE9D8378;
    v9[1] = v8;
    if (v20)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 56))(v7 + 16);
      uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v11 = 2012;
      *((void *)v11 + 1) = v10;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      char v22 = v11;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, v19);
      v21[0] = v19[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, v21);
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v11, a3);
      unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v12 = &unk_1EE9D83A0;
      v12[1] = v9;
      uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v21[0] = (uint64_t)v12;
      v21[1] = v13;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v7 + 16) + 40))(v7 + 16, &v22, v21, 0);
      uint64_t v15 = v21[0];
      v21[0] = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      uint64_t v16 = v22;
      char v22 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v14);
        WTF::fastFree(v17, v18);
      }
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
  }
}

void sub_198E28AB4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::hasAudio(void *a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v17);
  if (v18 && (uint64_t v4 = a1[3]) != 0 && (v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9D83C8;
    v7[1] = v6;
    if (v18)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 56))(v5 + 16);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 2008;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      char v20 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v17);
      v19[0] = v17[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v19);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EE9D83F0;
      v10[1] = v7;
      uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v19[0] = (uint64_t)v10;
      v19[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v5 + 16) + 40))(v5 + 16, &v20, v19, 0);
      uint64_t v13 = v19[0];
      v19[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v14 = v20;
      char v20 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOWORD(v19[0]) = 0;
    WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(a2);
  }
}

void sub_198E28DD4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::isMuted(void *a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v17);
  if (v18 && (uint64_t v4 = a1[3]) != 0 && (v5 = *(void *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v7 = &unk_1EE9D8418;
    v7[1] = v6;
    if (v18)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 16) + 56))(v5 + 16);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 2010;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      char v20 = v9;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v17);
      v19[0] = v17[1];
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, v19);
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EE9D8440;
      v10[1] = v7;
      uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v19[0] = (uint64_t)v10;
      v19[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, void))(*(void *)(v5 + 16) + 40))(v5 + 16, &v20, v19, 0);
      uint64_t v13 = v19[0];
      v19[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v14 = v20;
      char v20 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOWORD(v19[0]) = 0;
    WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>::operator()(a2);
  }
}

void sub_198E2911C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  CFRelease(*(CFTypeRef *)(v14 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setIsMuted(void *a1, char a2, uint64_t *a3)
{
  (*(void (**)(void *__return_ptr))(*a1 + 240))(v21);
  if (v22 && (uint64_t v6 = a1[3]) != 0 && (v7 = *(void *)(v6 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v7 - 8));
    uint64_t v8 = *a3;
    *a3 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EE9D8468;
    v9[1] = v8;
    if (v22)
    {
      uint64_t v19 = v21;
      char v20 = a2;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 56))(v7 + 16);
      uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v11 = 2017;
      *((void *)v11 + 1) = v10;
      *((void *)v11 + 66) = (char *)v11 + 16;
      *((void *)v11 + 67) = 512;
      *((void *)v11 + 68) = 0;
      *((void *)v11 + 7WebKit::PageLoadState::callObserverCallback((uint64_t)this, (void (*)(void *))WebKit::PageLoadStateObserverBase::didChangeWebProcessIsResponsive, 0) = 0;
      *((void *)v11 + 69) = 0;
      IPC::Encoder::encodeHeader(v11);
      int v24 = v11;
      IPC::ArgumentCoder<std::tuple<WebKit::ModelIdentifier const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebKit::ModelIdentifier const&,BOOL>,0ul,1ul>(v11, (uint64_t)&v19);
      unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v12 = &unk_1EE9D8490;
      v12[1] = v9;
      uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      v23[0] = v12;
      v23[1] = v13;
      (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v7 + 16) + 40))(v7 + 16, &v24, v23, 0);
      uint64_t v15 = v23[0];
      v23[0] = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      uint64_t v16 = v24;
      int v24 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v14);
        WTF::fastFree(v17, v18);
      }
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a3);
  }
}

void sub_198E29454(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }
  CFRelease(*(CFTypeRef *)(v16 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::accessibilityChildren(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void *WebKit::ARKitInlinePreviewModelPlayerIOS::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::ARKitInlinePreviewModelPlayerIOS::ARKitInlinePreviewModelPlayerIOS(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_198E295A8(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void *WebKit::ARKitInlinePreviewModelPlayerIOS::ARKitInlinePreviewModelPlayerIOS(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)WebKit::ARKitInlinePreviewModelPlayer::ARKitInlinePreviewModelPlayer((uint64_t)a1, a2, a3) = &unk_1EE9D7FC0;
  {
    WebKit::instances(void)::instances = 0;
    *(void *)&dword_1E93CFC28 = 0;
  }
  WTF::WeakHashSet<WebKit::ARKitInlinePreviewModelPlayerIOS,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ARKitInlinePreviewModelPlayerIOS>((uint64_t)&WebKit::instances(void)::instances, a1, (uint64_t)v5);
  return a1;
}

void sub_198E29640(_Unwind_Exception *a1, void *a2)
{
  WebKit::ARKitInlinePreviewModelPlayer::~ARKitInlinePreviewModelPlayer(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *WTF::WeakHashSet<WebKit::ARKitInlinePreviewModelPlayerIOS,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ARKitInlinePreviewModelPlayerIOS>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v20 = a2[2];
  if (!v20)
  {
    uint64_t v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = a2;
    char v22 = (unsigned int *)a2[2];
    a2[2] = v20;
    if (v22)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      uint64_t v20 = a2[2];
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  atomic_fetch_add((atomic_uint *volatile)v20, 1u);
  uint64_t v25 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v25, a3);
  uint64_t result = (unsigned int *)v25;
  uint64_t v25 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
  }
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

void sub_198E29880(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10 && atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a10);
    WTF::fastFree(a10, a2);
  }
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ARKitInlinePreviewModelPlayerIOS::~ARKitInlinePreviewModelPlayerIOS(WebKit::ARKitInlinePreviewModelPlayerIOS *this, unsigned int **a2)
{
  {
    WebKit::instances(void)::instances = 0;
    *(void *)&dword_1E93CFC28 = 1;
    goto LABEL_29;
  }
  if (++dword_1E93CFC28 > dword_1E93CFC2C)
  {
    uint64_t v3 = WebKit::instances(void)::instances;
    if (WebKit::instances(void)::instances)
    {
      int v4 = *(_DWORD *)(WebKit::instances(void)::instances - 4);
      if (!v4) {
        goto LABEL_23;
      }
      int v5 = 0;
      unsigned int v6 = v4 - 1;
      do
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)(v3 + 8 * v6);
        if ((unint64_t)(v8 + 1) >= 2 && !*(void *)(v8 + 8))
        {
          *(void *)(v3 + 8 * v6) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v8);
            WTF::fastFree((WTF *)v8, a2);
          }
          *(void *)(v3 + 8 * v6) = -1;
          ++v5;
        }
        --v6;
      }
      while (v7);
      uint64_t v3 = WebKit::instances(void)::instances;
      if (v5)
      {
        *(_DWORD *)(WebKit::instances(void)::instances - 16) += v5;
        if (WebKit::instances(void)::instances) {
          int v9 = *(_DWORD *)(WebKit::instances(void)::instances - 12);
        }
        else {
          int v9 = 0;
        }
        *(_DWORD *)(WebKit::instances(void)::instances - 12) = v9 - v5;
        uint64_t v3 = WebKit::instances(void)::instances;
      }
      if (v3)
      {
        unsigned int v10 = *(_DWORD *)(v3 - 4);
        if (v10 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v10)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::instances(void)::instances);
          uint64_t v3 = WebKit::instances(void)::instances;
          dword_1E93CFC28 = 0;
          if (WebKit::instances(void)::instances)
          {
LABEL_25:
            unsigned int v12 = *(_DWORD *)(v3 - 12);
            int v13 = 0x7FFFFFFF;
            if (v12 >= 0x7FFFFFFF) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
          unsigned int v12 = 0;
LABEL_30:
          int v13 = v12;
LABEL_31:
          dword_1E93CFC2C = 2 * v13;
          goto LABEL_32;
        }
LABEL_23:
        dword_1E93CFC28 = 0;
        goto LABEL_25;
      }
    }
LABEL_29:
    unsigned int v12 = 0;
    dword_1E93CFC28 = 0;
    goto LABEL_30;
  }
LABEL_32:
  uint64_t v14 = *((void *)this + 2);
  if (v14 && *(void *)(v14 + 8))
  {
    uint64_t v17 = *((void *)this + 2);
    int v15 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&WebKit::instances(void)::instances, &v17);
    a2 = v15;
    if (WebKit::instances(void)::instances)
    {
      uint64_t v16 = WebKit::instances(void)::instances + 8 * *(unsigned int *)(WebKit::instances(void)::instances - 4);
      if ((unsigned int **)v16 == v15) {
        goto LABEL_41;
      }
    }
    else
    {
      if (!v15) {
        goto LABEL_41;
      }
      uint64_t v16 = 0;
    }
    if ((unsigned int **)v16 != v15) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&WebKit::instances(void)::instances, v15);
    }
  }
LABEL_41:

  WebKit::ARKitInlinePreviewModelPlayer::~ARKitInlinePreviewModelPlayer(this, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::ARKitInlinePreviewModelPlayerIOS::~ARKitInlinePreviewModelPlayerIOS(this, a2);

  WTF::fastFree(v2, v3);
}