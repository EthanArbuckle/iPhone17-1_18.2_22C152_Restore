WebKit::RemoteImageBufferSetProxy *WebKit::RemoteImageBufferSetProxy::RemoteImageBufferSetProxy(WebKit::RemoteImageBufferSetProxy *this, WebKit::RemoteRenderingBackendProxy *a2)
{
  uint64_t v4;
  atomic_uint *v5;
  WebCore::DestinationColorSpace *v6;
  const void *v7;

  *(void *)this = &unk_1EE9B71B0;
  *((void *)this + 1) = 0;
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1994F5F10;
  *(void *)(v4 + 24) = this;
  *((void *)this + 2) = v4;
  *(void *)this = &unk_1EE9B7178;
  *((void *)this + 3) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)this = &unk_1EE9E9780;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v5 = (atomic_uint *)*((void *)a2 + 1);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  *((void *)this + 4) = v5;
  v6 = (WebCore::DestinationColorSpace *)WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  *((void *)this + 5) = v6;
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 17) = 1065353216;
  v7 = *(const void **)WebCore::DestinationColorSpace::SRGB(v6);
  *((void *)this + 9) = v7;
  if (v7) {
    CFRetain(v7);
  }
  *(_WORD *)((char *)this + 81) = 0;
  *((_DWORD *)this + 21) = 0;
  *((_WORD *)this + 44) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((_WORD *)this + 56) = 0;
  return this;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

WebKit::RemoteLayerBackingStore *WebKit::RemoteLayerBackingStore::RemoteLayerBackingStore(WebKit::RemoteLayerBackingStore *this, WebKit::PlatformCALayerRemote *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9BFCC8;
  *((void *)this + 2) = a2;
  *((unsigned char *)this + 24) = 1;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  v3 = *(const void **)WebCore::DestinationColorSpace::SRGB(this);
  *((void *)this + 5) = v3;
  if (v3) {
    CFRetain(v3);
  }
  *((_DWORD *)this + 12) = 1065353216;
  *((_WORD *)this + 26) = 0;
  WebCore::Region::Region((WebKit::RemoteLayerBackingStore *)((char *)this + 56));
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 192) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = (char *)this + 232;
  *((void *)this + 28) = 5;
  *((void *)this + 39) = 0xFFF0000000000000;
  uint64_t v4 = *(void *)(*((void *)this + 2) + 832);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 88);
      if (v6) {
        (*(void (**)(uint64_t, WebKit::RemoteLayerBackingStore *))(*(void *)v6 + 16))(v6, this);
      }
    }
  }
  return this;
}

void sub_19866BFA8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  v19 = v17;
  v21 = *(WTF **)(v14 + 216);
  if (v19 != v21 && v21)
  {
    *(void *)(v14 + 216) = 0;
    *(_DWORD *)(v14 + 224) = 0;
    WTF::fastFree(v21, a2);
  }
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, a2);
  if (*(unsigned char *)(v14 + 176))
  {
    uint64_t v22 = *(unsigned int *)(v14 + 168);
    if (v22 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v22]((int)&a13, v16);
    }
    *(_DWORD *)(v14 + 168) = -1;
  }
  WebCore::Region::~Region(v15);
  v24 = *(const void **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
  if (v24) {
    CFRelease(v24);
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v13, v23);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::RemoteLayerBackingStoreCollection::backingStoreWasCreated(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  return WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 24, (unsigned int *)a2, (uint64_t)v3);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>> &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v28 = v8 + 16 * v30;
        goto LABEL_23;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  if (v20)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v20 + 8), v20);
    v21 = *(atomic_uint **)(v20 + 8);
    if (v21) {
      atomic_fetch_add(v21, 1u);
    }
  }
  else
  {
    v21 = 0;
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26) {
      goto LABEL_22;
    }
LABEL_25:
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
    v16 = result;
    uint64_t v24 = *v6;
    if (*v6) {
      unint64_t v27 = *(unsigned int *)(v24 - 4);
    }
    else {
      unint64_t v27 = 0;
    }
    goto LABEL_22;
  }
  if (3 * v27 <= 4 * v26) {
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v28 = v24 + 16 * v27;
  char v29 = 1;
LABEL_23:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

unsigned int *WebKit::RemoteRenderingBackend::createDisplayListRecorder(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a3;
  if (a2)
  {
    uint64_t v3 = a1 + 14;
    WebKit::RemoteDisplayListRecorder::create((uint64_t *)&v12, a2, a3, (uint64_t)a1);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((uint64_t)&v9, v3, &v13, (unsigned int **)&v12);
    uint64_t result = (unsigned int *)v12;
    unint64_t v12 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    v7 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    WebCore::ImageBuffer::create<WebCore::NullImageBufferBackend,WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>((uint64_t *)&v12, 0, *v7);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v10 + 4));
    WebKit::RemoteDisplayListRecorder::create((uint64_t *)&v11, (uint64_t)v12, a3, (uint64_t)a1);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((uint64_t)&v9, a1 + 14, &v13, &v11);
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
    if (v12) {
      return (unsigned int *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v12 + 1, v8);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteRenderingBackend::createRemoteImageBufferSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 128);
  WebKit::RemoteImageBufferSet::create(a2, a3, a1, (uint64_t *)&v6);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>(v3, &v7, &v6, (uint64_t)v5);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::StreamServerConnection::startReceivingMessages(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  char v6 = 0;
  v11[0] = a3;
  v11[1] = a4;
  uint64_t v7 = (atomic_uchar *)(a1 + 136);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 136), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](a1 + 136);
  }
  uint64_t result = WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::add<IPC::StreamMessageReceiver&>((uint64_t *)(a1 + 144), (unsigned __int8 *)v11, a2, (uint64_t)v10);
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

unsigned int *WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::add<IPC::StreamMessageReceiver&>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4 = a2;
  uint64_t v7 = *a1;
  if (*a1
    || (uint64_t v34 = a3,
        WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(a1, 0), unsigned int v4 = a2, a3 = v34, (v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  int v9 = *v4;
  uint64_t v10 = (unsigned int *)*((void *)v4 + 1);
  unsigned int v11 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  unsigned int v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
  unint64_t v13 = ((unint64_t)v10 + ~((void)v10 << 32)) ^ (((unint64_t)v10 + ~((void)v10 << 32)) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = v8 & ((0xD7862706ELL
             * (unint64_t)(277951225 * (v12 ^ HIWORD(v12))
                                + 95187966 * ((v15 >> 31) ^ v15))) >> 4);
  uint64_t v17 = (unsigned int *)(v7 + 24 * v16);
  int v18 = *(unsigned __int8 *)v17;
  uint64_t result = (unsigned int *)*((void *)v17 + 1);
  if (*(unsigned char *)v17) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = result == 0;
  }
  if (!v20)
  {
    v21 = 0;
    int v22 = 1;
    do
    {
      if (v18 == v9 && result == v10)
      {
        char v31 = 0;
        uint64_t v30 = v7 + 24 * *(unsigned int *)(v7 - 4);
        goto LABEL_27;
      }
      if (v18 == 255) {
        v21 = v17;
      }
      unsigned int v16 = (v16 + v22) & v8;
      uint64_t v17 = (unsigned int *)(v7 + 24 * v16);
      int v18 = *(unsigned __int8 *)v17;
      uint64_t result = (unsigned int *)*((void *)v17 + 1);
      ++v22;
      if (*(unsigned char *)v17) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = result == 0;
      }
    }
    while (!v23);
    if (v21)
    {
      *(void *)v21 = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 2) = 0;
      --*(_DWORD *)(*a1 - 16);
      LOBYTE(v9) = *v4;
      uint64_t v10 = (unsigned int *)*((void *)v4 + 1);
      uint64_t v17 = v21;
    }
  }
  *(unsigned char *)uint64_t v17 = v9;
  *((void *)v17 + 1) = v10;
  atomic_fetch_add((atomic_uint *volatile)(a3 + 8), 1u);
  uint64_t result = (unsigned int *)*((void *)v17 + 2);
  *((void *)v17 + 2) = a3;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    v33 = v17;
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    uint64_t v17 = v33;
  }
  uint64_t v24 = *a1;
  if (*a1) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v26 = *a1;
  if (*a1) {
    int v27 = *(_DWORD *)(v26 - 12);
  }
  else {
    int v27 = 0;
  }
  uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
  unint64_t v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28) {
      goto LABEL_26;
    }
LABEL_31:
    uint64_t result = (unsigned int *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(a1, (unsigned __int8 *)v17);
    uint64_t v17 = result;
    uint64_t v26 = *a1;
    if (*a1) {
      LODWORD(v29) = *(_DWORD *)(v26 - 4);
    }
    else {
      LODWORD(v29) = 0;
    }
    goto LABEL_26;
  }
  if (3 * v29 <= 4 * v28) {
    goto LABEL_31;
  }
LABEL_26:
  uint64_t v30 = v26 + 24 * v29;
  char v31 = 1;
LABEL_27:
  *(void *)a4 = v17;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v31;
  return result;
}

unsigned int *WebKit::RemoteImageBufferSet::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x78);
  uint64_t v9 = WebKit::RemoteImageBufferSet::RemoteImageBufferSet(v8, a1, a2, a3);
  *a4 = v9;
  uint64_t v10 = *(void *)(*(void *)(v9 + 32) + 40);
  uint64_t v11 = *(void *)(v8 + 16);

  return IPC::StreamServerConnection::startReceivingMessages(v10, v8, 0x56u, v11);
}

uint64_t WebKit::RemoteImageBufferSet::RemoteImageBufferSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9BF208;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  atomic_fetch_add((atomic_uint *volatile)(a4 + 16), 1u);
  *(void *)(a1 + 32) = a4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 84) = 1065353216;
  int v5 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  *(void *)(a1 + 88) = v5;
  if (v5) {
    CFRetain(v5);
  }
  *(_WORD *)(a1 + 97) = 0;
  *(unsigned char *)(a1 + 100) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  return a1;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    int v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v28 = v8 + 16 * v32;
        goto LABEL_21;
      }
      if (v17 == -1) {
        int v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *int v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      unsigned int v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  BOOL v20 = (unsigned int **)(v16 + 1);
  v21 = *a3;
  *a3 = 0;
  v33 = v21;
  if (v16 + 1 != (uint64_t *)&v33)
  {
    if (*v20)
    {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>((unsigned int **)v16 + 1);
      uint64_t v30 = *v20;
      char v31 = v33;
      v33 = 0;
      *BOOL v20 = v31;
      if (v30 && atomic_fetch_add((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(void *)v30 + 8))(v30);
      }
    }
    else
    {
      v33 = 0;
      *BOOL v20 = v21;
    }
  }
  uint64_t result = (uint64_t *)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(&v33);
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26) {
      goto LABEL_20;
    }
LABEL_26:
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
    unsigned int v16 = result;
    uint64_t v24 = *v6;
    if (*v6) {
      unint64_t v27 = *(unsigned int *)(v24 - 4);
    }
    else {
      unint64_t v27 = 0;
    }
    goto LABEL_20;
  }
  if (3 * v27 <= 4 * v26) {
    goto LABEL_26;
  }
LABEL_20:
  uint64_t v28 = v24 + 16 * v27;
  char v29 = 1;
LABEL_21:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>(a1);
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int *WebKit::RemoteDisplayListRecorder::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)(v8 + 16) = 0;
  *(void *)uint64_t v8 = &unk_1EE9BF148;
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref((void *)(v8 + 24), a2);
  *(void *)(v8 + 32) = a3;
  atomic_fetch_add((atomic_uint *volatile)(a4 + 16), 1u);
  *(void *)(v8 + 40) = a4;
  uint64_t v9 = *(void *)(a4 + 56);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 1u);
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 48) = v9;
  *a1 = v8;
  uint64_t v10 = *(void *)(v8 + 32);
  uint64_t v11 = *(void *)(*(void *)(v8 + 40) + 40);

  return IPC::StreamServerConnection::startReceivingMessages(v11, v8, 0x4Du, v10);
}

void WebKit::RemoteRenderingBackend::allocateImageBuffer(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4, int a5, const void **a6, char a7, atomic_uint **a8, float a9, uint64_t a10)
{
  if (a5 == 1)
  {
    unint64_t v30 = atomic_load((unint64_t *)(*(void *)(a2 + 56) + 72));
    if (v30 >> 4 > 0xC34 || (unint64_t v31 = atomic_load(&WebKit::globalImageBufferForCanvasCount), v31 >> 6 > 0xC34))
    {
      uint64_t v29 = 0;
      goto LABEL_23;
    }
  }
  *a8 = *(atomic_uint **)(*(void *)(a2 + 56) + 56);
  WebCore::ProcessIdentity::operator=();
  if (!a4 || a5 == 1 && (unint64_t v32 = atomic_load((unint64_t *)(*(void *)(a2 + 56) + 64)), v32 >> 3 >= 0x271))
  {
    *a1 = 0;
    uint64_t v54 = a10;
    goto LABEL_29;
  }
  unint64_t v19 = atomic_load(&WebKit::globalAcceleratedImageBufferCount);
  *a1 = 0;
  uint64_t v54 = a10;
  if (v19 >> 4 > 0x270)
  {
LABEL_29:
    v33 = *a6;
    uint64_t v69 = *a3;
    float v70 = a9;
    CFTypeRef v71 = v33;
    if (v33) {
      CFRetain(v33);
    }
    LOBYTE(v72) = a7;
    HIBYTE(v72) = a5;
    WebCore::ImageBuffer::backendParameters();
    WebKit::ImageBufferShareableBitmapBackend::create((uint64_t)v67, (uint64_t)a8, v34, (uint64_t *)&v66);
    if (v66)
    {
      LOBYTE(v60) = 0;
      WebCore::ImageBufferBackend::calculateBaseTransform();
      uint64_t v65 = (uint64_t)WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(v67, v35, v36);
      uint64_t v56 = v69;
      float v57 = v70;
      CFTypeRef v37 = v71;
      CFTypeRef v58 = v71;
      if (v71) {
        CFRetain(v71);
      }
      __int16 v59 = v72;
      v38 = v66;
      v66 = 0;
      v55 = v38;
      WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>(&v53, (uint64_t)&v56);
      v39 = v55;
      v55 = 0;
      if (v39) {
        (*(void (**)(WebCore::ImageBufferIOSurfaceBackend *))(*(void *)v39 + 8))(v39);
      }
      if (v37) {
        CFRelease(v37);
      }
      v40 = v66;
      v66 = 0;
      if (v40)
      {
        WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend(v40);
        WebKit::ImageBufferShareableBitmapBackend::operator delete(v44);
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    CFTypeRef v41 = cf;
    CFTypeRef cf = 0;
    if (v41) {
      CFRelease(v41);
    }
    CFTypeRef v42 = v71;
    CFTypeRef v71 = 0;
    if (v42) {
      CFRelease(v42);
    }
    uint64_t v29 = v53;
    goto LABEL_23;
  }
  uint64_t v60 = *a3;
  float v61 = a9;
  BOOL v20 = *a6;
  v62 = v20;
  if (v20)
  {
    CFRetain(v20);
    char v63 = a7;
    char v64 = a5;
    BOOL isSmallLayerBacking = WebKit::isSmallLayerBacking((uint64_t)&v60);
    CFRelease(v20);
    if (!isSmallLayerBacking) {
      goto LABEL_7;
    }
LABEL_48:
    v45 = *a6;
    uint64_t v69 = *a3;
    float v70 = a9;
    CFTypeRef v71 = v45;
    if (v45) {
      CFRetain(v45);
    }
    LOBYTE(v72) = a7;
    HIBYTE(v72) = a5;
    WebCore::ImageBuffer::backendParameters();
    WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::create((uint64_t)v67, a8, &v66);
    if (v66)
    {
      LOBYTE(v60) = 1;
      WebCore::ImageBufferBackend::calculateBaseTransform();
      uint64_t v65 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
      uint64_t v56 = v69;
      float v57 = v70;
      CFTypeRef v46 = v71;
      CFTypeRef v58 = v71;
      if (v71) {
        CFRetain(v71);
      }
      __int16 v59 = v72;
      v47 = v66;
      v66 = 0;
      v55 = v47;
      WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>(&v53, (uint64_t)&v56);
      v48 = v55;
      v55 = 0;
      if (v48) {
        (*(void (**)(WebCore::ImageBufferIOSurfaceBackend *))(*(void *)v48 + 8))(v48);
      }
      if (v46) {
        CFRelease(v46);
      }
      v49 = v66;
      v66 = 0;
      if (v49)
      {
        WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(v49);
        WebKit::ImageBufferShareableBitmapBackend::operator delete(v52);
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    CFTypeRef v50 = cf;
    CFTypeRef cf = 0;
    if (v50) {
      CFRelease(v50);
    }
    CFTypeRef v51 = v71;
    CFTypeRef v71 = 0;
    if (v51) {
      CFRelease(v51);
    }
    uint64_t v29 = v53;
    if (v53) {
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  char v63 = a7;
  char v64 = a5;
  if (WebKit::isSmallLayerBacking((uint64_t)&v60)) {
    goto LABEL_48;
  }
LABEL_7:
  uint64_t v22 = *a6;
  uint64_t v69 = *a3;
  float v70 = a9;
  CFTypeRef v71 = v22;
  if (v22) {
    CFRetain(v22);
  }
  LOBYTE(v72) = a7;
  HIBYTE(v72) = a5;
  WebCore::ImageBuffer::backendParameters();
  WebKit::ImageBufferShareableMappedIOSurfaceBackend::create((uint64_t)v67, &v66);
  if (v66)
  {
    LOBYTE(v60) = 1;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    uint64_t v65 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
    uint64_t v56 = v69;
    float v57 = v70;
    CFTypeRef v23 = v71;
    CFTypeRef v58 = v71;
    if (v71) {
      CFRetain(v71);
    }
    __int16 v59 = v72;
    uint64_t v24 = v66;
    v66 = 0;
    v55 = v24;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>(&v53, (uint64_t)&v56);
    int v25 = v55;
    v55 = 0;
    if (v25) {
      (*(void (**)(WebCore::ImageBufferIOSurfaceBackend *))(*(void *)v25 + 8))(v25);
    }
    if (v23) {
      CFRelease(v23);
    }
    uint64_t v26 = v66;
    v66 = 0;
    if (v26)
    {
      WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(v26);
      WebKit::ImageBufferShareableBitmapBackend::operator delete(v43);
    }
  }
  else
  {
    uint64_t v53 = 0;
  }
  CFTypeRef v27 = cf;
  CFTypeRef cf = 0;
  if (v27) {
    CFRelease(v27);
  }
  CFTypeRef v28 = v71;
  CFTypeRef v71 = 0;
  if (v28) {
    CFRelease(v28);
  }
  uint64_t v29 = v53;
  if (!v53) {
    goto LABEL_29;
  }
LABEL_23:
  *a1 = v29;
}

void WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x88);
  int v5 = *(const void **)(a2 + 16);
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  WebCore::ImageBuffer::ImageBuffer();
  *a1 = v4;
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t WebKit::ImageBufferShareableMappedIOSurfaceBackend::create@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize();
  if ((int)result < 1 || result <= 0) {
    goto LABEL_12;
  }
  WebCore::IOSurface::nameForRenderingPurpose();
  if ((unint64_t)*(char *)(a1 + 24) >= 4)
  {
    uint64_t result = 74;
    __break(0xC471u);
    return result;
  }
  uint64_t result = WebCore::IOSurface::create();
  if (!v13)
  {
LABEL_12:
    *a2 = 0;
    return result;
  }
  if (WebCore::ProcessIdentity::operator BOOL()) {
    WebCore::IOSurface::setOwnershipIdentity();
  }
  WebCore::IOSurface::createPlatformContext(v13);
  if (cf)
  {
    WebCore::FloatRect::operator CGRect();
    CGContextClearRect(cf, v14);
    bmalloc::api::isoAllocate();
    int v5 = v13;
    unint64_t v13 = 0;
    uint64_t v11 = v5;
    char v6 = (void *)WebCore::ImageBufferIOSurfaceBackend::ImageBufferIOSurfaceBackend();
    *char v6 = &unk_1EE9EBF18;
    v6[11] = &unk_1EE9EBFF8;
    *a2 = v6;
    CFRelease(cf);
    WebCore::IOSurface::~IOSurface(v11);
    WTF::fastFree(v7, v8);
  }
  else
  {
    *a2 = 0;
  }
  uint64_t result = (uint64_t)v13;
  if (v13)
  {
    WebCore::IOSurface::~IOSurface(v13);
    return WTF::fastFree(v9, v10);
  }
  return result;
}

BOOL WebKit::isSmallLayerBacking(uint64_t a1)
{
  unint64_t v2 = WebCore::ImageBuffer::calculateBackendSize();
  BOOL result = 0;
  unint64_t v4 = HIDWORD(v2);
  if ((v2 & 0x80000000) != 0) {
    LODWORD(v2) = -(int)v2;
  }
  if ((v4 & 0x80000000) != 0) {
    LODWORD(v4) = -(int)v4;
  }
  unint64_t v5 = v2 * (unint64_t)v4;
  if (*(unsigned __int8 *)(a1 + 25) - 5 >= 0xFFFFFFFE
    && (v5 & 0xFFFFFFFF00000000) == 0
    && v5 <= 0x1000)
  {
    return *(unsigned char *)(a1 + 24) == 1 || *(unsigned char *)(a1 + 24) == 0;
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 24 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = v4 + 24 * v11;
      if (*(void *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          uint64_t v14 = v4 + 24 * v11;
          unsigned int v15 = *(unsigned int **)(v14 + 16);
          *(void *)(v14 + 16) = 0;
          if (v15)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v8);
            }
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v32 = -1640531527;
          __int16 v33 = 0;
          char v34 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v32, (void *)(v4 + 24 * v11));
          int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v32);
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v17;
            v21 = (_OWORD *)(v16 + 24 * (v18 & v17));
            int v18 = ++v19 + (v18 & v17);
          }
          while (*v21 != 0);
          uint64_t v22 = v16 + 24 * v20;
          int v25 = *(unsigned int **)(v22 + 16);
          uint64_t v24 = (void *)(v22 + 16);
          CFTypeRef v23 = v25;
          void *v24 = 0;
          if (v25 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v8);
          }
          _OWORD *v21 = *(_OWORD *)v13;
          uint64_t v26 = v4 + 24 * v11;
          uint64_t v27 = *(void *)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          void *v24 = v27;
          CFTypeRef v28 = *(unsigned int **)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v8);
          }
          if (v13 == a3) {
            unint64_t v12 = v21;
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
    goto LABEL_25;
  }
  unint64_t v12 = 0;
  BOOL result = 0;
  if (v4)
  {
LABEL_25:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::PlatformCALayerRemote,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 72;
    do
    {
      if (*(void *)(v4 - 64) != -1)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 16);
        if (v5 != -1) {
          ((void (*)(char *, uint64_t))off_1EE9DF240[v5])(&v7, v4);
        }
        *(_DWORD *)(v4 + 16) = -1;
      }
      v4 += 96;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

float WebCore::GraphicsLayerClient::deviceScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 1.0;
}

uint64_t non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerContainsBitmapOnly(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 - 584) + 224))(*(void *)(a1 - 584), a1 - 608);
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::processModel(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  return 1;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::PlatformCALayerRemoteTiledBacking(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)WebKit::PlatformCALayerRemote::PlatformCALayerRemote(a1, a2, a3, a4) = &unk_1EE9F8A28;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x158);
  int v6 = (WebCore::TileController *)MEMORY[0x1997324E0](v5, a1, 1);
  *(void *)(a1 + 840) = v6;
  *(_OWORD *)(a1 + 848) = 0u;
  WebCore::TileController::contentsScale(v6);
  if (*(unsigned char *)(a1 + 12) != 3)
  {
    *(_DWORD *)(a1 + 612) = v7;
    *(int8x16_t *)(a1 + 64) = vorrq_s8(*(int8x16_t *)(a1 + 64), (int8x16_t)vdupq_n_s64(0x20000uLL));
    WebKit::PlatformCALayerRemote::updateBackingStore((WebKit::PlatformCALayerRemote *)a1);
  }
  return a1;
}

uint64_t WebKit::PlatformCALayerRemoteTiledBacking::setWantsDeepColorBackingStore(WebKit::PlatformCALayerRemoteTiledBacking *this)
{
  return MEMORY[0x1F416DEA0](*((void *)this + 105));
}

void WebKit::RemoteRenderingBackendProxy::create(WebKit::RemoteRenderingBackendProxy *this@<X0>, WTF::RunLoop **a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x100);
  uint64_t v6 = WTF::RunLoop::main(v5);
  WebKit::RemoteRenderingBackendProxy::RemoteRenderingBackendProxy((uint64_t)v5, v6);
  *a2 = v5;
  int v7 = off_1EB3583E8;
  if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *((void *)v5 + 8);
    uint64_t v9 = *((void *)this + 265);
    uint64_t v10 = *((void *)this + 5);
    int v11 = 134218496;
    uint64_t v12 = v8;
    __int16 v13 = 2048;
    uint64_t v14 = v9;
    __int16 v15 = 2048;
    uint64_t v16 = v10;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] Created rendering backend for pageProxyID=%llu, webPageID=%llu", (uint8_t *)&v11, 0x20u);
  }
}

uint64_t WebKit::RemoteRenderingBackendProxy::RemoteRenderingBackendProxy(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE9E98D8;
  *(void *)(a1 + 8) = 0;
  WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)(a1 + 24));
  *(void *)a1 = &unk_1EE9E9800;
  *(void *)(a1 + 24) = &unk_1EE9E9860;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = IdentifierInternal;
  *(void *)(a1 + 72) = &unk_1EE9E9890;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1;
  *(void *)(a1 + 144) = 0;
  WebCore::Timer::Timer<WebKit::RemoteRenderingBackendProxy,WebKit::RemoteRenderingBackendProxy>((WebCore::TimerBase *)(a1 + 152), a1);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  WTF::WorkQueue::create();
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 1;
  return a1;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::RemoteRenderingBackendProxy,WebKit::RemoteRenderingBackendProxy>(WebCore::TimerBase *a1, uint64_t a2)
{
  *(void *)WebCore::TimerBase::TimerBase(a1) = &unk_1EE9BA5F0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9EA3F8;
  v4[1] = WebKit::RemoteRenderingBackendProxy::destroyGetPixelBufferSharedMemory;
  v4[2] = 0;
  v4[3] = a2;
  *((void *)a1 + 6) = v4;
  return a1;
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    do
    {
      __int16 v13 = (unsigned __int8 *)(v5 + 24 * v10);
      int v14 = *v13;
      if (v14 != 255)
      {
        uint64_t v9 = (void *)*((void *)v13 + 1);
        if (*v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v9 == 0;
        }
        if (v15)
        {
          uint64_t v16 = v5 + 24 * v10;
          uint64_t v17 = *(unsigned int **)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17 + 2);
            (*(void (**)(unsigned int *))(*(void *)v17 + 8))(v17);
          }
        }
        else
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v20 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(v14, (uint64_t)v9);
          int v21 = 0;
          do
          {
            unsigned int v22 = v20 & v19;
            uint64_t v23 = v18 + 24 * (v20 & v19);
            int v20 = ++v21 + (v20 & v19);
            if (*(unsigned char *)v23) {
              BOOL v24 = 0;
            }
            else {
              BOOL v24 = *(void *)(v23 + 8) == 0;
            }
          }
          while (!v24);
          uint64_t v25 = v18 + 24 * v22;
          CFTypeRef v28 = *(unsigned int **)(v25 + 16);
          uint64_t v27 = (void *)(v25 + 16);
          uint64_t v26 = v28;
          *uint64_t v27 = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v26 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26 + 2);
            (*(void (**)(unsigned int *))(*(void *)v26 + 8))(v26);
          }
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v13;
          uint64_t v29 = v5 + 24 * v10;
          uint64_t v30 = *(void *)(v29 + 16);
          *(void *)(v29 + 16) = 0;
          *uint64_t v27 = v30;
          unint64_t v31 = *(unsigned int **)(v29 + 16);
          *(void *)(v29 + 16) = 0;
          if (v31 && atomic_fetch_add((atomic_uint *volatile)v31 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v31 + 2);
            (*(void (**)(unsigned int *))(*(void *)v31 + 8))(v31);
          }
          if (v13 == a3) {
            uint64_t v11 = v23;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 16 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    __int16 v13 = 0;
    int v14 = a3;
    do
    {
      BOOL v15 = (uint64_t *)(v5 + 16 * v12);
      uint64_t v16 = *v15;
      if (*v15)
      {
        if (v16 != -1)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = (unsigned int *)v26[1];
          v26[1] = 0;
          if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v9);
            int v14 = a3;
          }
          *uint64_t v26 = *v15;
          uint64_t v28 = v5 + 16 * v12;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(unsigned int **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v9);
            int v14 = a3;
          }
          if (v15 == v14) {
            __int16 v13 = v26;
          }
        }
      }
      else
      {
        unint64_t v31 = (unsigned int *)v15[1];
        v15[1] = 0;
        if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, v9);
          int v14 = a3;
        }
      }
      ++v12;
    }
    while (v12 != v6);
    goto LABEL_26;
  }
  __int16 v13 = 0;
  uint64_t result = 0;
  if (v5)
  {
LABEL_26:
    WTF::fastFree((WTF *)(v5 - 16), v9);
    return v13;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      uint64_t v16 = (unsigned int **)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16)
      {
        if (v17 != (unsigned int *)-1)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unint64_t v20 = ((unint64_t)v17 + ~((void)v17 << 32)) ^ (((unint64_t)v17 + ~((void)v17 << 32)) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
          int v24 = 1;
          do
          {
            unsigned int v25 = v23;
            uint64_t v26 = *(void *)(v18 + 16 * v23);
            unsigned int v23 = (v23 + v24++) & v19;
          }
          while (v26);
          uint64_t v27 = v18 + 16 * v25;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(v27 + 8));
          *(void *)uint64_t v27 = *v16;
          uint64_t v28 = v6 + 16 * v13;
          uint64_t v29 = *(void *)(v28 + 8);
          v28 += 8;
          *(void *)(v27 + 8) = v29;
          *(void *)uint64_t v28 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)v28);
          if (v16 == (unsigned int **)a3) {
            uint64_t v14 = v27;
          }
        }
      }
      else
      {
        IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(v16 + 1);
      }
      ++v13;
    }
    while (v13 != v15);
    goto LABEL_18;
  }
  uint64_t v14 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_18:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>(unsigned int **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 4);
  *((void *)*a1 + 4) = 0;
  if (v3)
  {
    IPC::StreamServerConnection::stopReceivingMessages(*(void *)(v3 + 40), 0x56u, *((void *)v2 + 2));
    if (atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v3 + 16));
      (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 8))(v3 + 8);
    }
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    unsigned int v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v5();
  }
  return result;
}

uint64_t WebKit::WebPageProxy::didChangeContentSize(WebKit::WebPageProxy *this, const IntSize *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t, const IntSize *))(*(void *)v4 + 240))(v4, a2);
  unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 1600);

  return v5(v4);
}

void WebKit::WebPageProxy::creationParameters(void *a1@<X0>, WebKit::WebProcessProxy *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14 = a9 + 260;
  uint64_t v15 = a1[35];
  CFRetain(*(CFTypeRef *)(v15 + 8));
  if (*(void *)a8 && (uint64_t v16 = *(void *)(*(void *)a8 + 152)) != 0)
  {
    uint64_t v17 = v14;
    CFRetain(*(CFTypeRef *)(v16 + 8));
    CFRelease(*(CFTypeRef *)(v15 + 8));
    uint64_t v15 = v16;
  }
  else
  {
    uint64_t v17 = v14;
  }
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)a2 + 640, (unsigned int *)v15, (uint64_t)&v190);
  v185 = (WebKit::WebUserContentControllerProxy *)v15;
  WebKit::WebUserContentControllerProxy::addProcess((WebKit::WebUserContentControllerProxy *)v15, a2);
  *(_OWORD *)(a9 + 16) = 0u;
  *(_WORD *)(a9 + 8) = 0;
  *(void *)a9 = 0;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(unsigned char *)(a9 + 64) = 0;
  *(void *)(a9 + 72) = 0;
  *(void *)(a9 + 80) = 0;
  v188 = a1;
  uint64_t v18 = a1[33];
  int v19 = *(_DWORD **)(v18 + 24);
  if (v19) {
    *v19 += 2;
  }
  *(void *)(a9 + 88) = v19;
  uint64_t v20 = *(void *)(v18 + 32);
  uint64_t v187 = a9;
  *(_OWORD *)(a9 + 232) = 0uLL;
  *(void *)(a9 + 96) = v20;
  *(unsigned char *)(a9 + 104) = 0;
  *(void *)(a9 + 112) = 0;
  *(unsigned char *)(a9 + 120) = 0;
  *(unsigned char *)(a9 + 156) = 0;
  *(unsigned char *)(a9 + 176) = 0;
  *(unsigned char *)(a9 + 172) = 0;
  *(unsigned char *)(a9 + 180) = 0;
  *(unsigned char *)(a9 + 184) = 0;
  *(unsigned char *)(a9 + 188) = 0;
  *(void *)uint64_t v17 = 0;
  *(_OWORD *)(a9 + 124) = 0uLL;
  *(_OWORD *)(a9 + 140) = 0uLL;
  *(_DWORD *)(a9 + 192) = 0;
  *(unsigned char *)(a9 + 196) = 0;
  *(void *)(a9 + 200) = 0;
  *(_OWORD *)(a9 + 208) = 0uLL;
  *(unsigned char *)(a9 + 224) = 0;
  *(void *)(a9 + 248) = 0;
  *(_WORD *)(a9 + 256) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a9 + 272) = _Q0;
  *(unsigned char *)(a9 + 320) = 0;
  *(unsigned char *)(a9 + 328) = 0;
  *(unsigned char *)(a9 + 332) = 0;
  *(unsigned char *)(a9 + 336) = 0;
  *(unsigned char *)(a9 + 340) = 0;
  *(_WORD *)(a9 + 344) = 0;
  *(unsigned char *)(a9 + 346) = 0;
  *(unsigned char *)(a9 + 448) = 0;
  *(void *)(a9 + 504) = 0;
  *(unsigned char *)(a9 + 512) = 0;
  *(unsigned char *)(a9 + 592) = 0;
  *(unsigned char *)(a9 + 896) = 0;
  *(unsigned char *)(a9 + 904) = 0;
  *(void *)(a9 + 304) = 0;
  *(void *)(a9 + 309) = 0;
  *(_OWORD *)(a9 + 288) = 0u;
  *(void *)(a9 + 365) = 0;
  *(_OWORD *)(a9 + 352) = 0u;
  *(unsigned char *)(a9 + 408) = 0;
  *(_OWORD *)(a9 + 376) = 0u;
  *(_OWORD *)(a9 + 392) = 0u;
  *(_OWORD *)(a9 + 481) = 0u;
  *(_OWORD *)(a9 + 468) = 0u;
  *(_OWORD *)(a9 + 452) = 0u;
  *(_DWORD *)(a9 + 568) = 0;
  *(_OWORD *)(a9 + 536) = 0u;
  *(_OWORD *)(a9 + 552) = 0u;
  *(_OWORD *)(a9 + 520) = 0u;
  *(unsigned char *)(a9 + 584) = 0;
  *(void *)(a9 + 576) = 0;
  *(unsigned char *)(a9 + 624) = 0;
  *(_OWORD *)(a9 + 600) = 0u;
  *(_WORD *)(a9 + 905) = 1;
  *(void *)(a9 + 616) = 0;
  WebKit::WebUserContentControllerProxy::parameters((WebKit::WebUserContentControllerProxy *)v15, a9 + 912);
  *(unsigned char *)(a9 + 1000) = 0;
  *(unsigned char *)(a9 + 1032) = 0;
  *(unsigned char *)(a9 + 1040) = 0;
  *(unsigned char *)(a9 + 1048) = 0;
  *(unsigned char *)(a9 + 1056) = 0;
  *(unsigned char *)(a9 + 1064) = 0;
  *(_OWORD *)(a9 + 1072) = 0u;
  *(_OWORD *)(a9 + 1088) = 0u;
  *(_WORD *)(a9 + 1104) = 257;
  *(unsigned char *)(a9 + 1112) = 0;
  *(unsigned char *)(a9 + 1136) = 0;
  *(unsigned char *)(a9 + 1144) = 0;
  *(unsigned char *)(a9 + 1148) = 0;
  *(unsigned char *)(a9 + 1150) = 1;
  *(_OWORD *)(a9 + 1152) = 0u;
  *(void *)(a9 + 1165) = 0;
  *(_DWORD *)(v17 + 913) = 16777473;
  *(unsigned char *)(a9 + 1184) = 0;
  *(unsigned char *)(a9 + 1392) = 0;
  *(unsigned char *)(a9 + 1400) = 0;
  *(unsigned char *)(a9 + 1416) = 0;
  *(_DWORD *)(v17 + 917) = 0;
  *(_OWORD *)(a9 + 1424) = 0u;
  *(_OWORD *)(a9 + 1440) = 0u;
  uint64_t v183 = a9 + 1456;
  *(_OWORD *)(a9 + 1456) = 0u;
  uint64_t v26 = (WTF::StringImpl **)(a1[6] + 376);
  uint64_t v186 = a9 + 232;
  *(void *)(a9 + 1472) = 0;
  WTF::String::operator=((uint64_t *)(a9 + 1152), v26);
  std::__optional_storage_base<WebKit::RemotePageParameters,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemotePageParameters,false>>(a9 + 1184, a6);
  uint64_t v28 = a1[42];
  if (v28)
  {
    uint64_t v29 = *(void *)(v28 + 272);
    uint64_t v27 = *(void *)(v28 + 280);
    unint64_t v30 = v29 & 0xFFFFFFFFFFFFFF00;
    LOBYTE(v28) = 1;
  }
  else
  {
    LOBYTE(v29) = 0;
    unint64_t v30 = 0;
  }
  *(void *)(a9 + 1400) = v30 | v29;
  *(void *)(a9 + 1408) = v27;
  *(unsigned char *)(a9 + 1416) = v28;
  *(void *)(a9 + 1424) = a4;
  *(void *)(a9 + 1432) = a5;
  uint64_t v31 = a1[5];
  v181 = (uint64_t *)(a9 + 1072);
  uint64_t v182 = a9 + 1440;
  if (v31) {
    uint64_t v32 = *(void *)(v31 + 8);
  }
  else {
    uint64_t v32 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v32 + 1592))(v32);
  *(void *)a9 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
  (*(void (**)(uint64_t))(*(void *)v32 + 1600))(v32);
  uint64_t v33 = a1[4];
  *(_WORD *)(a9 + 8) = *(_WORD *)(v33 + 64);
  *(unsigned char *)(a9 + 64) = *(unsigned char *)(a3 + 36);
  *(void *)(a9 + 72) = *(void *)(a3 + 24);
  *(void *)(a9 + 80) = *(void *)(v33 + 760);
  uint64_t v34 = a1[34];
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(a9 + 16, (uint64_t *)(v34 + 40));
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(a9 + 40, (uint64_t *)(v34 + 64));
  *(unsigned char *)(a9 + 104) = *((unsigned char *)v188 + 688);
  WebCore::Color::operator=();
  *(unsigned char *)(a9 + 120) = *((unsigned char *)v188 + 777);
  uint64_t v35 = v188[4];
  *(void *)(a9 + 124) = *(void *)(v35 + 720);
  *(void *)(a9 + 132) = *(void *)(v35 + 232);
  *(void *)(a9 + 140) = *(void *)(v35 + 844);
  *(void *)(a9 + 148) = *(void *)(v35 + 816);
  long long v36 = *(_OWORD *)(v35 + 1872);
  *(unsigned char *)(a9 + 172) = *(unsigned char *)(v35 + 1888);
  *(_OWORD *)(a9 + 156) = v36;
  if (*((unsigned char *)v188 + 828))
  {
    *(_DWORD *)(a9 + 176) = *((_DWORD *)v188 + 206);
    *(unsigned char *)(a9 + 180) = *((unsigned char *)v188 + 828);
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 80))(a3);
    *(_DWORD *)(a9 + 184) = v37;
    *(unsigned char *)(a9 + 188) = BYTE4(v37);
  }
  *(_DWORD *)(a9 + 192) = *(_DWORD *)((char *)v188 + 778);
  *(unsigned char *)(a9 + 196) = *((unsigned char *)v188 + 782);
  *(_OWORD *)(a9 + 200) = *((_OWORD *)v188 + 49);
  WTF::String::operator=((uint64_t *)(a9 + 216), (WTF::StringImpl **)v188 + 44);
  *(unsigned char *)(a9 + 224) = *((unsigned char *)v188 + 1264);
  WebKit::WebBackForwardList::itemStates((WebKit::WebBackForwardList *)v188[83], (uint64_t)&v190);
  unsigned int v39 = *(_DWORD *)(a9 + 244);
  if (v39) {
    WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(*(WTF::StringImpl **)v186, (WTF::StringImpl *)(*(void *)v186 + 312 * v39));
  }
  v40 = *(WTF **)v186;
  if (*(void *)v186)
  {
    *(void *)(a9 + 232) = 0;
    *(_DWORD *)(a9 + 240) = 0;
    WTF::fastFree(v40, v38);
  }
  *(void *)(a9 + 232) = v190;
  uint64_t v41 = v191;
  v190 = 0;
  uint64_t v191 = 0;
  *(void *)(a9 + 240) = v41;
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v190, v38);
  *(void *)(a9 + 248) = *(void *)(v188[38] + 32);
  *(unsigned char *)(a9 + 256) = (*(uint64_t (**)(void))(*(void *)v188[13] + 232))(v188[13]);
  *(unsigned char *)(a9 + 257) = *((unsigned char *)v188 + 802);
  uint64_t v42 = 764;
  if (!*((unsigned char *)v188 + 768)) {
    uint64_t v42 = 760;
  }
  *(_DWORD *)(a9 + 260) = *(_DWORD *)((char *)v188 + v42);
  float v43 = *((double *)v188 + 94);
  *(float *)(a9 + 264) = v43;
  *(_OWORD *)(a9 + 272) = *(_OWORD *)(v188 + 87);
  *(_DWORD *)(a9 + 288) = *((_DWORD *)v188 + 193);
  *(_DWORD *)(a9 + 292) = *((_DWORD *)v188 + 239);
  uint64_t v44 = v188[4];
  *(unsigned char *)(a9 + 296) = *(unsigned char *)(v44 + 904);
  *(unsigned char *)(a9 + 297) = *((unsigned char *)v188 + 1120);
  *(unsigned char *)(a9 + 298) = *((unsigned char *)v188 + 960);
  *(unsigned char *)(a9 + 299) = *((unsigned char *)v188 + 961);
  *(void *)(v17 + 40) = *(void *)(v44 + 836);
  *(void *)(v17 + 48) = *(void *)(v44 + 1764);
  *(unsigned char *)(a9 + 316) = *((unsigned char *)v188 + 954);
  char v45 = *(unsigned char *)(v44 + 1900);
  *(void *)(a9 + 320) = *(void *)(v44 + 1892);
  *(unsigned char *)(a9 + 328) = v45;
  *(unsigned char *)(a9 + 332) = *(unsigned char *)(v44 + 1760);
  if (*((unsigned char *)v188 + 1017))
  {
    int v46 = *((unsigned __int8 *)v188 + 1016);
    char v47 = a7;
    if (!*(unsigned char *)(a9 + 340)) {
      *(unsigned char *)(a9 + 340) = 1;
    }
    *(_DWORD *)(a9 + 336) = v46;
  }
  else
  {
    char v47 = a7;
    if (*(unsigned char *)(a9 + 340)) {
      *(unsigned char *)(a9 + 340) = 0;
    }
  }
  *(unsigned char *)(a9 + 344) = *((unsigned char *)v188 + 926);
  *(unsigned char *)(a9 + 345) = *(unsigned char *)(v44 + 800);
  *(unsigned char *)(a9 + 368) = *((unsigned char *)v188 + 898);
  *(unsigned char *)(a9 + 369) = v47;
  *(unsigned char *)(a9 + 370) = WebKit::WebPageProxy::useDarkAppearance((WebKit::WebPageProxy *)v188);
  v48 = (WebCore *)WebKit::WebPageProxy::useElevatedUserInterfaceLevel((WebKit::WebPageProxy *)v188);
  *(unsigned char *)(a9 + 371) = (_BYTE)v48;
  *(unsigned char *)(a9 + 372) = *((unsigned char *)v188 + 1077);
  v49 = (long long *)v188[4];
  *(void *)(a9 + 376) = *(void *)((char *)v49 + 2132);
  *(_OWORD *)(a9 + 384) = *(_OWORD *)(v188 + 135);
  v49 = (long long *)((char *)v49 + 2088);
  long long v50 = *v49;
  long long v51 = v49[1];
  *(_OWORD *)(a9 + 433) = *(long long *)((char *)v49 + 25);
  *(_OWORD *)(a9 + 408) = v50;
  *(_OWORD *)(a9 + 424) = v51;
  v52 = (WebCore *)WebCore::screenSize(v48);
  *(_DWORD *)(a9 + 452) = v53;
  *(_DWORD *)(a9 + 456) = v54;
  v55 = (WebCore *)WebCore::availableScreenSize(v52);
  *(_DWORD *)(a9 + 460) = v56;
  *(_DWORD *)(a9 + 464) = v57;
  CFTypeRef v58 = (WebCore *)WebCore::overrideScreenSize(v55);
  *(_DWORD *)(a9 + 468) = v59;
  *(_DWORD *)(a9 + 472) = v60;
  float v61 = (WebCore *)WebCore::overrideAvailableScreenSize(v58);
  *(_DWORD *)(a9 + 476) = v62;
  *(_DWORD *)(a9 + 480) = v63;
  WebCore::screenSize(v61);
  *(_DWORD *)(a9 + 484) = v64;
  uint64_t v65 = v188[5];
  if (v65) {
    uint64_t v66 = *(void *)(v65 + 8);
  }
  else {
    uint64_t v66 = 0;
  }
  v67 = (WTF::StringImpl **)(a9 + 352);
  (*(void (**)(uint64_t))(*(void *)v66 + 1592))(v66);
  (*(void (**)(WTF::StringImpl ***__return_ptr, uint64_t))(*(void *)v66 + 1056))(&v190, v66);
  uint64_t v69 = *(unsigned int *)(a9 + 364);
  if (v69) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*v67, (WTF::StringImpl *)((char *)*v67 + 8 * v69));
  }
  float v70 = *v67;
  if (*v67)
  {
    *(void *)(a9 + 352) = 0;
    *(_DWORD *)(a9 + 360) = 0;
    WTF::fastFree(v70, v68);
  }
  *(void *)(a9 + 352) = v190;
  uint64_t v71 = v191;
  v190 = 0;
  uint64_t v191 = 0;
  *(void *)(a9 + 360) = v71;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v190, v68);
  (*(void (**)(uint64_t))(*(void *)v66 + 1600))(v66);
  *(_DWORD *)(a9 + 488) = *((_DWORD *)v188 + 111);
  uint64_t v72 = *(void *)(*(void *)(v188[32] + 512) + 8);
  if (v72) {
    v73 = (WebKit::WebProcessPool *)(v72 - 16);
  }
  else {
    v73 = 0;
  }
  uint64_t v74 = WebKit::WebProcessPool::cachedHardwareKeyboardState(v73);
  *(_WORD *)(v17 + 232) = v74;
  *(unsigned char *)(v17 + 234) = BYTE2(v74);
  uint64_t v75 = v188[5];
  *(unsigned char *)(a9 + 495) = *(unsigned char *)(v188[6] + 208);
  if (v75) {
    uint64_t v76 = *(void *)(v75 + 8);
  }
  else {
    uint64_t v76 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v76 + 1592))(v76);
  (*(void (**)(WTF::StringImpl ***__return_ptr, uint64_t))(*(void *)v76 + 1144))(&v190, v76);
  WebCore::Color::operator=();
  if (((unint64_t)v190 & 0x8000000000000) != 0)
  {
    v176 = (unsigned int *)((unint64_t)v190 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v190 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v176);
      WTF::fastFree((WTF *)v176, v77);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v76 + 1600))(v76);
  *(unsigned char *)(a9 + 512) = *((unsigned char *)v188 + 904);
  uint64_t v79 = v188[6];
  uint64_t v194 = 0;
  uint64_t v195 = 0;
  if (*(unsigned char *)(v79 + 304))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v190, v79 + 288);
  }
  else
  {
    v190 = 0;
    uint64_t v195 = 0;
    uint64_t v191 = 0;
  }
  v80 = (WTF::StringImpl **)(a9 + 520);
  uint64_t v81 = *(unsigned int *)(a9 + 532);
  if (v81) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*v80, (WTF::StringImpl *)((char *)*v80 + 8 * v81));
  }
  v82 = *v80;
  if (*v80)
  {
    *(void *)(a9 + 520) = 0;
    *(_DWORD *)(a9 + 528) = 0;
    WTF::fastFree(v82, v78);
  }
  *(void *)(a9 + 520) = v190;
  uint64_t v83 = v191;
  v190 = 0;
  uint64_t v191 = 0;
  *(void *)(a9 + 528) = v83;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v190, v78);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v194, v84);
  *(unsigned char *)(a9 + 568) = *((unsigned char *)v188 + 964);
  uint64_t v85 = v188[5];
  if (v85) {
    uint64_t v86 = *(void *)(v85 + 8);
  }
  else {
    uint64_t v86 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v86 + 1592))(v86);
  *(unsigned char *)(a9 + 569) = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 1632))(v86);
  (*(void (**)(uint64_t))(*(void *)v86 + 1600))(v86);
  *(_WORD *)(a9 + 570) = *(_WORD *)(v188[4] + 936);
  WTF::String::operator=((uint64_t *)(a9 + 576), (WTF::StringImpl **)v188 + 49);
  *(unsigned char *)(a9 + 1180) = *(unsigned char *)(v188[6] + 528);
  *(unsigned char *)(a9 + 592) = *((unsigned char *)v188 + 656);
  *(void *)(a9 + 584) = v188[81];
  v87 = (void *)v188[141];
  v88 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v87);
  v90 = v88;
  v92 = v91;
  if (v87) {
    v93 = (WTF::StringImpl **)&v87[2 * *((unsigned int *)v87 - 1)];
  }
  else {
    v93 = 0;
  }
  if (v93 == v88) {
    goto LABEL_89;
  }
  v94 = (uint64_t *)(a9 + 600);
  v189 = v93;
  do
  {
    uint64_t v95 = *((void *)v90[1] + 2);
    uint64_t v96 = *v94;
    if (*v94
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v94, 0), (uint64_t v96 = *v94) != 0))
    {
      int v97 = *(_DWORD *)(v96 - 8);
    }
    else
    {
      int v97 = 0;
    }
    unsigned int v98 = *((_DWORD *)*v90 + 4);
    if (v98 >= 0x100) {
      unsigned int v99 = v98 >> 8;
    }
    else {
      unsigned int v99 = WTF::StringImpl::hashSlowCase(*v90);
    }
    v100 = 0;
    for (int i = 1; ; ++i)
    {
      uint64_t v102 = v99 & v97;
      v103 = (uint64_t *)(v96 + 16 * v102);
      v104 = (WTF *)*v103;
      if (*v103 == -1)
      {
        v100 = (uint64_t *)(v96 + 16 * v102);
        goto LABEL_68;
      }
      if (!v104) {
        break;
      }
      if (WTF::equal(v104, *v90, v89))
      {
        *(void *)(v96 + 16 * v102 + 8) = v95;
        v111 = v189;
        goto LABEL_78;
      }
LABEL_68:
      unsigned int v99 = i + v102;
    }
    if (v100)
    {
      uint64_t *v100 = 0;
      v100[1] = 0;
      --*(_DWORD *)(*v94 - 16);
      v103 = v100;
    }
    WTF::String::operator=(v103, v90);
    v103[1] = v95;
    uint64_t v105 = *v94;
    v111 = v189;
    if (*v94) {
      int v106 = *(_DWORD *)(v105 - 12) + 1;
    }
    else {
      int v106 = 1;
    }
    *(_DWORD *)(v105 - 12) = v106;
    uint64_t v107 = *v94;
    if (*v94) {
      int v108 = *(_DWORD *)(v107 - 12);
    }
    else {
      int v108 = 0;
    }
    uint64_t v109 = (*(_DWORD *)(v107 - 16) + v108);
    unint64_t v110 = *(unsigned int *)(v107 - 4);
    if (v110 <= 0x400)
    {
      if (3 * v110 > 4 * v109) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    if (v110 <= 2 * v109) {
LABEL_77:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v94, (uint64_t)v103);
LABEL_78:
    while (1)
    {
      v90 += 2;
      if (v90 == v92) {
        break;
      }
      if ((unint64_t)*v90 + 1 > 1) {
        goto LABEL_82;
      }
    }
    v90 = v92;
LABEL_82:
    ;
  }
  while (v90 != v111);
LABEL_89:
  {
    WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set = 0;
  }
  v190 = 0;
  uint64_t v191 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v190, (uint64_t **)&WebKit::globalURLSchemesWithCustomProtocolHandlers(void)::set);
  uint64_t v113 = *(unsigned int *)(v187 + 620);
  if (v113) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v187 + 608), (WTF::StringImpl *)(*(void *)(v187 + 608) + 8 * v113));
  }
  v114 = *(WTF **)(v187 + 608);
  if (v114)
  {
    *(void *)(v187 + 608) = 0;
    *(_DWORD *)(v187 + 616) = 0;
    WTF::fastFree(v114, v112);
  }
  *(void *)(v187 + 608) = v190;
  uint64_t v115 = v191;
  v190 = 0;
  uint64_t v191 = 0;
  *(void *)(v187 + 616) = v115;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v190, v112);
  uint64_t v117 = v188[34];
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 905) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v117 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, v116);
  uint64_t v119 = v188[34];
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 906) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v119 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, v118);
  uint64_t v120 = *(void *)(v188[6] + 328);
  if (v120)
  {
    WebCore::ApplicationManifest::ApplicationManifest((uint64_t)&v190, v120 + 16);
    LOBYTE(v120) = 1;
  }
  else
  {
    LOBYTE(v190) = 0;
  }
  char v193 = v120;
  std::__optional_storage_base<WebCore::ApplicationManifest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplicationManifest,false>>((WebCore::ApplicationManifest *)(v186 + 392), (unsigned __int8 *)&v190);
  if (v193) {
    WebCore::ApplicationManifest::~ApplicationManifest((WebCore::ApplicationManifest *)&v190, v121);
  }
  *(unsigned char *)(v187 + 904) = *((unsigned char *)v188 + 1188);
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>((WebCore::Color *)(v186 + 808), v188[4] + 104);
  WTF::String::operator=(v181, (WTF::StringImpl **)v188 + 159);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v186 + 848), (uint64_t)(v188 + 160));
  API::PageConfiguration::maskedURLSchemes((uint64_t *)v188[6], (uint64_t *)&v190);
  v123 = v190;
  v190 = 0;
  v124 = *(WTF::StringImpl ***)(v187 + 1096);
  *(void *)(v187 + 1096) = v123;
  if (v124)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v124, v122);
    if (v190) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v190, v177);
    }
  }
  uint64_t v125 = v188[6];
  *(unsigned char *)(v187 + 1104) = *(unsigned char *)(v125 + 369);
  std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false> const&>((WTF::StringImpl *)(v186 + 880), v125 + 392);
  uint64_t v127 = v188[6];
  *(unsigned char *)(v187 + 1105) = *(unsigned char *)(v127 + 384);
  *(unsigned char *)(v187 + 1150) = *(unsigned char *)(v127 + 370);
  *(unsigned char *)(v187 + 346) = v188[17] != 0;
  int v128 = *(_DWORD *)(v127 + 264);
  if (*(unsigned __int8 *)(v187 + 1148) == *(_WORD *)(v127 + 268))
  {
    if (*(unsigned char *)(v187 + 1148)) {
      *(_DWORD *)(v187 + 1144) = v128;
    }
  }
  else if (*(unsigned char *)(v187 + 1148))
  {
    *(unsigned char *)(v187 + 1148) = 0;
  }
  else
  {
    *(_DWORD *)(v187 + 1144) = v128;
    *(unsigned char *)(v187 + 1148) = 1;
  }
  uint64_t v129 = v188[36];
  if (v129)
  {
    WebKit::WebExtensionController::parameters(v129, (uint64_t)&v190);
    std::optional<WebKit::WebExtensionControllerParameters>::operator=[abi:sn180100]<WebKit::WebExtensionControllerParameters,void>(v186 + 768, &v190);
    WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v192, v130);
  }
  uint64_t v131 = v188[37];
  if (v131)
  {
    uint64_t v132 = *(void *)(v131 + 8);
    if (v132)
    {
      WebKit::WebExtensionController::parameters(v132 - 16, (uint64_t)&v190);
      std::optional<WebKit::WebExtensionControllerParameters>::operator=[abi:sn180100]<WebKit::WebExtensionControllerParameters,void>(v186 + 768, &v190);
      WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v192, v133);
    }
  }
  uint64_t v134 = v188[34];
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1160) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v134 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v126);
  uint64_t v136 = v188[34];
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1161) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v136 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v135);
  uint64_t v138 = v188[34];
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1162) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v138 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, v137);
  uint64_t v140 = v188[34];
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1163) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v140 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v139);
  uint64_t v142 = v188[34];
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1166) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v142 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, v141);
  *(unsigned char *)(v187 + 1167) = WebKit::WebPageProxy::useGPUProcessForDOMRenderingEnabled((WebKit::WebPageProxy *)v188);
  uint64_t v144 = v188[34];
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1168) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v144 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, v143);
  uint64_t v146 = v188[34];
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1169) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v146 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, v145);
  uint64_t v148 = v188[34];
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1171) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v148 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, v147);
  uint64_t v150 = v188[34];
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1170) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v150 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, v149);
  uint64_t v152 = *(void *)(*(void *)(v188[32] + 512) + 8);
  if (v152) {
    uint64_t v153 = v152 - 16;
  }
  else {
    uint64_t v153 = 0;
  }
  *(unsigned char *)(v187 + 1164) = *(unsigned char *)(*(void *)(v153 + 48) + 78);
  uint64_t v154 = v188[34];
  {
    WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(v187 + 1165) = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v154 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::key, v151);
  *(unsigned char *)(v187 + 1172) = *((unsigned char *)v188 + 1333);
  *(unsigned char *)(v187 + 1173) = *((unsigned char *)v188 + 1360);
  *(unsigned char *)(v187 + 1175) = *(unsigned char *)(v188[6] + 516);
  *(unsigned char *)(v187 + 1174) = *((unsigned char *)v188 + 1336);
  uint64_t v156 = v188[34];
  {
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (WebKit *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v156 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeKnownHostsToHTTPSEnabledKey(void)::key, v155);
  if (BoolValueForKey)
  {
    v158 = v188;
    BOOL v159 = *(unsigned char *)(v188[6] + 427) != 0;
  }
  else
  {
    BOOL v159 = 0;
    v158 = v188;
  }
  *(unsigned char *)(v187 + 1176) = v159;
  *(unsigned char *)(v187 + 1177) = WebKit::allowsDeprecatedSynchronousXMLHttpRequestDuringUnload(BoolValueForKey);
  *(unsigned char *)(v187 + 1178) = [(id)v158[173] isVisible];
  uint64_t v160 = v158[5];
  if (v160) {
    uint64_t v161 = *(void *)(v160 + 8);
  }
  else {
    uint64_t v161 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v161 + 1592))(v161);
  *(unsigned char *)(v187 + 1179) = (*(uint64_t (**)(uint64_t))(*(void *)v161 + 1472))(v161);
  (*(void (**)(uint64_t))(*(void *)v161 + 1600))(v161);
  {
    qword_1EB35A4F0 = 0;
    WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
    unk_1EB35A4E0 = 0u;
  }
  v162 = (WebKit::WebPageProxy *)WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v182, (uint64_t)&WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance + 8);
  WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(v162, v163);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v183, (uint64_t)&qword_1EB359C88);
  uint64_t v165 = v188[34];
  {
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  int v166 = *(unsigned __int8 *)(a3 + 36);
  v167 = (WebKit::WebPreferencesStore *)(v165 + 40);
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v165 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, v164))goto LABEL_177;
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey(v167, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v168) & 1) == 0)
  {
    {
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (!WebKit::WebPreferencesStore::getBoolValueForKey(v167, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, v169))goto LABEL_177; {
  }
    }
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey(v167, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v169) & 1) == 0)
  {
    {
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (!WebKit::WebPreferencesStore::getBoolValueForKey(v167, (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v170))goto LABEL_177; {
  }
    }
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey(v167, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, v170))goto LABEL_177;
  {
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey(v167, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, v171))goto LABEL_177;
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey(v167, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v172))goto LABEL_177;
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  char v174 = WebKit::WebPreferencesStore::getBoolValueForKey(v167, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, v173);
  if (v166 || (v174 & 1) == 0)
  {
LABEL_177:
    WebKit::SandboxExtension::createHandleForMachBootstrapExtension((const char ***)&v190);
    v175 = (const char **)v190;
    v190 = 0;
    std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(v186 + 1240), v175);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v190);
  }
  CFRelease(*((CFTypeRef *)v185 + 1));
}

unsigned int *WebKit::WebPageProxy::platformUnderPageBackgroundColor@<X0>(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 1592))(v4);
  (*(void (**)(uint64_t))(*(void *)v4 + 1136))(v4);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 1600))(v4);
  uint64_t v7 = *a2;
  if ((*a2 & 0x4000000000000) == 0)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
      }
    }
    *a2 = 0x11040000FFFFFFFFLL;
  }
  return result;
}

void sub_19866FBE0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

float WebKit::WebPageProxy::computeLayoutViewportRect(void *a1, long long *a2, FloatRect *a3, const FloatRect *a4, int a5, double a6)
{
  long long v48 = *a2;
  uint64_t v12 = a1[5];
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v13 + 1592))(v13);
  v47.m_location.m_x = (*(float (**)(uint64_t))(*(void *)v13 + 1024))(v13);
  v47.m_location.m_y = v14;
  v47.m_size.m_width = v15;
  v47.m_size.m_height = v16;
  (*(void (**)(uint64_t))(*(void *)v13 + 1600))(v13);
  if (a5) {
    WebCore::FloatRect::intersect((WebCore::FloatRect *)&v48, (const WebCore::FloatRect *)&v47);
  }
  uint64_t v17 = a1[5];
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v18 + 1592))(v18);
  double v19 = (*(double (**)(uint64_t))(*(void *)v18 + 1016))(v18);
  uint64_t v20 = (WebKit *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 1600))(v18);
  if (v19 <= a6 || (v21 = a6, float v22 = v19, WebKit::scalesAreEssentiallyEqual(v20, v21, v22)))
  {
    float32x2_t v23 = *(float32x2_t *)((char *)a2 + 8);
  }
  else
  {
    double v24 = (v19 - a6) * -12.0 + 1.0;
    if (v24 < 0.0) {
      double v24 = 0.0;
    }
    *(float *)&double v24 = v24;
    float32x2_t v25 = vadd_f32((float32x2_t)v47.m_location, (float32x2_t)v47.m_size);
    *(int8x8_t *)&long long v26 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v47.m_location, *(float32x2_t *)&v48), (int8x8_t)vmls_lane_f32((float32x2_t)v47.m_location, vsub_f32((float32x2_t)v47.m_location, *(float32x2_t *)&v48), *(float32x2_t *)&v24, 0), *(int8x8_t *)&v48);
    float32x2_t v27 = vadd_f32(*(float32x2_t *)&v26, *(float32x2_t *)((char *)&v48 + 8));
    float32x2_t v23 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v27, v25), (int8x8_t)vmla_n_f32(v25, vsub_f32(v27, v25), *(float *)&v24), (int8x8_t)v27), *(float32x2_t *)&v26);
    *((float32x2_t *)&v26 + 1) = v23;
    long long v48 = v26;
    a3 = (FloatRect *)&v48;
  }
  FloatRect v46 = *a3;
  float32x2_t v39 = v23;
  if (*(unsigned char *)(a1[4] + 2608))
  {
    uint64_t v28 = a1[34];
    {
      WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::valueForKey<double>(v28 + 40, v28 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key);
  }
  double v29 = v47.m_size.m_width * 64.0;
  if (v29 > -2147483650.0) {
    int v30 = (int)v29;
  }
  else {
    int v30 = 0x80000000;
  }
  if (v29 < 2147483650.0) {
    int v31 = v30;
  }
  else {
    int v31 = 0x7FFFFFFF;
  }
  v44[0] = v31;
  double v32 = v47.m_size.m_height * 64.0;
  if (v32 >= 2147483650.0)
  {
    int v33 = 0x7FFFFFFF;
  }
  else if (v32 <= -2147483650.0)
  {
    int v33 = 0x80000000;
  }
  else
  {
    int v33 = (int)v32;
  }
  v44[1] = v33;
  uint64_t v45 = WebCore::LocalFrameView::expandedLayoutViewportSize();
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v44, a4);
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v43, &v47);
  double v34 = v39.f32[0] * 64.0;
  if (v34 >= 2147483650.0)
  {
    int v35 = 0x7FFFFFFF;
  }
  else if (v34 <= -2147483650.0)
  {
    int v35 = 0x80000000;
  }
  else
  {
    int v35 = (int)v34;
  }
  double v36 = v39.f32[1] * 64.0;
  if (v36 > -2147483650.0) {
    int v37 = (int)v36;
  }
  else {
    int v37 = 0x80000000;
  }
  if (v36 >= 2147483650.0) {
    int v37 = 0x7FFFFFFF;
  }
  int v41 = v35;
  int v42 = v37;
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v40, &v46);
  return (float)(int)WebCore::LocalFrameView::computeUpdatedLayoutViewportRect() * 0.015625;
}

void sub_19867006C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

id WebKit::PageClientImpl::refView(id *this)
{
  id v2 = objc_loadWeak(this + 5);
  id Weak = objc_loadWeak(this + 2);

  return Weak;
}

void WebKit::PageClientImpl::derefView(id *this)
{
  id Weak = objc_loadWeak(this + 2);
}

double WebKit::PageClientImpl::minimumZoomScale(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  id v2 = (void *)[WeakRetained scrollView];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  if (!v2) {
    return 1.0;
  }

  [v2 minimumZoomScale];
  return result;
}

void sub_198670198(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

float WebKit::PageClientImpl::documentRect(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained bounds];
  v7.origin.x = v2;
  v7.origin.y = v3;
  v7.size.width = v4;
  v7.size.height = v5;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v8, &v7);
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v8;
}

void sub_19867021C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::contentViewBackgroundColor(id *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  id WeakRetained = objc_loadWeakRetained(this + 2);
  CGFloat v5 = (void *)[WeakRetained traitCollection];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3321888768;
  v6[2] = ___ZN6WebKit14PageClientImpl26contentViewBackgroundColorEv_block_invoke;
  v6[3] = &__block_descriptor_48_e8_32c65_ZTSKZN6WebKit14PageClientImpl26contentViewBackgroundColorEvE3__0_e5_v8__0l;
  v6[4] = a2;
  v6[5] = this;
  [v5 performAsCurrentTraitCollection:v6];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
}

void sub_1986702D8(_Unwind_Exception *exception_object, void *a2)
{
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v5 = *v2;
  if ((*v2 & 0x8000000000000) != 0)
  {
    uint64_t v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t scrollViewBackgroundColor(void *a1, void *a2, char a3)
{
  uint64_t v11 = a2;
  char v10 = a3;
  uint64_t result = [a2 isOpaque];
  if (result)
  {
    *a1 = 0;
    uint64_t v6 = (WebCore *)[a2 traitCollection];
    float v8 = (void *)WebCore::traitCollectionWithAdjustedIdiomForSystemColors(v6, v7);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3321888768;
    v9[2] = ___ZL25scrollViewBackgroundColorP9WKWebView32AllowPageBackgroundColorOverride_block_invoke;
    v9[3] = &__block_descriptor_56_e8_32c84_ZTSKZL25scrollViewBackgroundColorP9WKWebView32AllowPageBackgroundColorOverrideE3__0_e5_v8__0l;
    v9[4] = a1;
    v9[5] = &v11;
    v9[6] = &v10;
    return [v8 performAsCurrentTraitCollection:v9];
  }
  else
  {
    *a1 = 0x1104000000000000;
  }
  return result;
}

void sub_1986703DC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *v2;
  if ((*v2 & 0x8000000000000) != 0)
  {
    uint64_t v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::defaultDisallowSyncXHRDuringPageDismissalEnabled(WebKit *this)
{
  BOOL v1 = WebKit::allowsDeprecatedSynchronousXMLHttpRequestDuringUnload(this);
  if (v1) {
    WTFLogAlways();
  }
  return !v1;
}

BOOL WebKit::allowsDeprecatedSynchronousXMLHttpRequestDuringUnload(WebKit *this)
{
  {
    if (HIBYTE(WebKit::cachedAllowsRequest(void)::allowsRequest)) {
      return (_BYTE)WebKit::cachedAllowsRequest(void)::allowsRequest != 0;
    }
  }
  else
  {
    WebKit::cachedAllowsRequest(void)::allowsRequest = 0;
  }
  int v2 = objc_msgSend((id)objc_msgSend((id)((uint64_t (*)(WebKit *))*MEMORY[0x1E4FB6348])(this), "sharedConnection"), "effectiveBoolValueForSetting:", @"allowDeprecatedWebKitSynchronousXHRLoads");
  BOOL result = v2 == 1;
  WebKit::cachedAllowsRequest(void)::allowsRequest = (v2 == 1) | 0x100;
  return result;
}

uint64_t WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct((WTF::StringImpl *)(*(void *)a1 + 24 * v5), (WTF::StringImpl *)(*(void *)a1 + 24 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    uint64_t v6 = *(WTF::StringImpl ***)a2;
    if (v4)
    {
      CGRect v7 = &v6[3 * v4];
      float v8 = *(uint64_t **)a1;
      do
      {
        WTF::String::operator=(v8, v6);
        WTF::String::operator=(v8 + 1, v6 + 1);
        WTF::String::operator=(v8 + 2, v6 + 2);
        v6 += 3;
        v8 += 3;
      }
      while (v6 != v7);
      uint64_t v6 = *(WTF::StringImpl ***)a2;
      unsigned int v4 = *(_DWORD *)(a1 + 12);
    }
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    if (v4 != v9)
    {
      char v10 = (void *)(*(void *)a1 + 24 * v4);
      uint64_t v11 = (uint64_t)&v6[3 * v4];
      uint64_t v12 = 24 * v9 - 24 * v4;
      do
      {
        char v10 = WebCore::LinkDecorationFilteringData::LinkDecorationFilteringData(v10, v11) + 3;
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
      unsigned int v4 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(uint64_t a1, uint64_t *a2)
{
  WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)&v7, a2);
  CGFloat v3 = *(WTF **)a1;
  *(void *)a1 = v7;
  CGRect v7 = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  uint64_t v8 = v4;
  int v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v9;
  int v9 = v5;
  LOBYTE(v5) = *(unsigned char *)(a1 + 20);
  *(unsigned char *)(a1 + 20) = v10;
  char v10 = v5;
  if (v3) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)v4);
  }
  return a1;
}

void std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::Color,false> const&>(WebCore::Color *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*((unsigned char *)a1 + 8))
    {
      WebCore::Color::operator=();
    }
  }
  else if (*((unsigned char *)a1 + 8))
  {
    WebCore::Color::~Color(a1, (void *)a2);
    *(unsigned char *)(v2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)(WebCore::Color::Color(a1, (const Color *)a2) + 8) = 1;
  }
}

uint64_t WebKit::WebPageProxy::cachedAllowedQueryParametersForAdvancedPrivacyProtections(WebKit::WebPageProxy *this, void *a2)
{
  if ((byte_1EB359C44 & 1) == 0)
  {
    v3[0] = 0;
    qword_1EB359C88 = 0;
    v3[1] = 0;
    unk_1EB359C90 = 0;
    uint64_t result = WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, a2);
    byte_1EB359C44 = 1;
  }
  return result;
}

uint64_t *WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, uint64_t **a2)
{
  CGFloat v3 = result;
  if (*a2)
  {
    uint64_t v4 = *((unsigned int *)*a2 - 3);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *((_DWORD *)v3 + 2) = v4;
      uint64_t *v3 = v5;
    }
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  CGRect v7 = *a2;
  if (*a2) {
    v7 += *((unsigned int *)v7 - 1);
  }
  if (v7 != result)
  {
    uint64_t v8 = *v3;
    unsigned int v9 = *((_DWORD *)v3 + 3);
    do
    {
      char v10 = (_DWORD *)*result;
      if (*result) {
        *v10 += 2;
      }
      *(void *)(v8 + 8 * v9) = v10;
      while (++result != v6)
      {
        if ((unint64_t)(*result + 1) > 1) {
          goto LABEL_16;
        }
      }
      uint64_t result = v6;
LABEL_16:
      ++v9;
    }
    while (result != v7);
    *((_DWORD *)v3 + 3) = v9;
  }
  return result;
}

void *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  CGFloat v3 = &result[v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[v2];
  }
  if (v2)
  {
    uint64_t v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t std::optional<WebKit::WebExtensionControllerParameters>::operator=[abi:sn180100]<WebKit::WebExtensionControllerParameters,void>(uint64_t a1, _DWORD *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  char v5 = *((unsigned char *)a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = (WebKit::WebExtensionContextParameters **)(a1 + 16);
  if (v4)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 28);
    if (v7)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = 152 * v7;
      do
      {
        WebKit::WebExtensionContextParameters::~WebExtensionContextParameters(v8, a2);
        uint64_t v8 = (WebKit::WebExtensionContextParameters *)(v10 + 152);
        v9 -= 152;
      }
      while (v9);
    }
    WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt((uint64_t)v6, a2 + 4);
  }
  else
  {
    *uint64_t v6 = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v11 = *((void *)a2 + 2);
    *((void *)a2 + 2) = 0;
    *(void *)(a1 + 16) = v11;
    LODWORD(v11) = a2[6];
    a2[6] = 0;
    *(_DWORD *)(a1 + 24) = v11;
    LODWORD(v11) = a2[7];
    a2[7] = 0;
    *(_DWORD *)(a1 + 28) = v11;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

void std::__optional_storage_base<WebCore::ApplicationManifest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplicationManifest,false>>(WebCore::ApplicationManifest *this, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)this + 272) == a2[272])
  {
    if (*((unsigned char *)this + 272))
    {
      WebCore::ApplicationManifest::operator=((uint64_t)this, (uint64_t)a2);
    }
  }
  else if (*((unsigned char *)this + 272))
  {
    WebCore::ApplicationManifest::~ApplicationManifest(this, a2);
    *((unsigned char *)this + 272) = 0;
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::ApplicationManifest,WebCore::ApplicationManifest,WebCore::ApplicationManifest*>((uint64_t)this, (uint64_t *)a2);
    *((unsigned char *)this + 272) = 1;
  }
}

void std::__optional_storage_base<WebKit::RemotePageParameters,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemotePageParameters,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 208) == *(unsigned __int8 *)(a2 + 208))
  {
    if (*(unsigned char *)(a1 + 208))
    {
      WTF::URL::operator=(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      WTF::String::operator=((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
      uint64_t v5 = *(unsigned int *)(a1 + 76);
      if (v5)
      {
        uint64_t v6 = 40 * v5;
        uint64_t v7 = *(void *)(a1 + 64) + 24;
        do
        {
          WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, v4);
          uint64_t v8 = *(WTF::StringImpl **)(v7 - 8);
          *(void *)(v7 - 8) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
          v7 += 40;
          v6 -= 40;
        }
        while (v6);
      }
      WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 64, (_DWORD *)(a2 + 64));
      std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)(a1 + 80), a2 + 80);
    }
  }
  else if (*(unsigned char *)(a1 + 208))
  {
    std::__optional_destruct_base<WebKit::RemotePageParameters,false>::reset[abi:sn180100]((unsigned char *)a1, (WTF::StringImpl *)a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::RemotePageParameters,WebKit::RemotePageParameters,WebKit::RemotePageParameters*>(a1, a2);
    *(unsigned char *)(a1 + 208) = 1;
  }
}

uint64_t WebKit::WebUserContentControllerProxy::parameters@<X0>(WebKit::WebUserContentControllerProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  int v4 = (void *)*((void *)this + 10);
  if (!v4)
  {
    uint64_t v75 = 0;
    LODWORD(v5) = 0;
    goto LABEL_11;
  }
  uint64_t v5 = *((unsigned int *)v4 - 3);
  if (v5)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198671198);
    }
    LODWORD(v99) = *((_DWORD *)v4 - 3);
    uint64_t v75 = WTF::fastMalloc((WTF *)(16 * v5));
    uint64_t v98 = v75;
    int v4 = (void *)*((void *)this + 10);
    if (v4) {
      goto LABEL_4;
    }
LABEL_11:
    unsigned int v76 = 0;
    goto LABEL_12;
  }
  uint64_t v75 = 0;
LABEL_4:
  if (!*((_DWORD *)v4 - 3)) {
    goto LABEL_11;
  }
  uint64_t v6 = *((unsigned int *)v4 - 1);
  uint64_t v7 = v4;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v7 = v4;
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v8 -= 8;
      if (!v8) {
        goto LABEL_11;
      }
    }
  }
  long long v50 = &v4[v6];
  if (v50 == v7) {
    goto LABEL_11;
  }
  unsigned int v76 = 0;
  do
  {
    *(void *)&long long v77 = *v7;
    {
      API::sharedWorldIdentifierMap(void)::sharedMap = 0;
    }
    uint64_t v51 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(&API::sharedWorldIdentifierMap(void)::sharedMap, &v77);
    if (!v51) {
      goto LABEL_98;
    }
    uint64_t v53 = *(void *)(v51 + 24);
    v52 = *(_DWORD **)(v51 + 32);
    if (v52) {
      *v52 += 2;
    }
    int v54 = (void *)(v75 + 16 * v76);
    *int v54 = v53;
    v54[1] = v52;
    ++v76;
    do
    {
      if (++v7 == v50) {
        goto LABEL_88;
      }
    }
    while ((unint64_t)(*v7 + 1) <= 1);
  }
  while (v7 != v50);
LABEL_88:
  HIDWORD(v99) = v76;
LABEL_12:
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  API::Array::elementsOfType<API::UserScript>((uint64_t)v92, *((void *)this + 7));
  uint64_t v9 = v93;
  uint64_t v10 = v95;
  if (v93 != v95)
  {
    uint64_t v11 = v94;
    do
    {
      uint64_t v12 = *v9;
      uint64_t v13 = *(void *)(*(void *)(*v9 + 112) + 24);
      *(void *)&long long v77 = *(void *)(*v9 + 16);
      *((void *)&v77 + 1) = v13;
      WebCore::UserScript::UserScript((uint64_t)&v78, v12 + 24);
      if (HIDWORD(v97) == v97)
      {
        WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserScriptData>((uint64_t)&v96, (unint64_t)&v77);
      }
      else
      {
        float v15 = (_OWORD *)(v96 + 104 * HIDWORD(v97));
        _OWORD *v15 = v77;
        WebCore::UserScript::UserScript((uint64_t)(v15 + 1), (uint64_t *)&v78);
        ++HIDWORD(v97);
      }
      WebCore::UserScript::~UserScript((WebCore::UserScript *)&v78, v14);
      float v16 = v9 + 1;
      while (v16 - 1 != v11 && v16 != v11)
      {
        uint64_t v18 = *v16++;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18) == 28)
        {
          uint64_t v9 = v16 - 1;
          goto LABEL_25;
        }
      }
      uint64_t v9 = v11;
LABEL_25:
      ;
    }
    while (v9 != v10);
  }
  int v72 = v5;
  uint64_t v73 = a2;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v74 = this;
  API::Array::elementsOfType<API::UserStyleSheet>((uint64_t)v92, *((void *)this + 8));
  double v19 = v93;
  uint64_t v20 = v95;
  if (v93 != v95)
  {
    float v21 = v94;
    do
    {
      uint64_t v22 = *v19;
      uint64_t v23 = *(void *)(*(void *)(*v19 + 128) + 24);
      double v24 = *(WTF::StringImpl **)(*v19 + 24);
      *(void *)&long long v77 = *(void *)(*v19 + 16);
      *((void *)&v77 + 1) = v23;
      if (v24) {
        *(_DWORD *)v24 += 2;
      }
      v78 = v24;
      float32x2_t v25 = *(WTF::StringImpl **)(v22 + 32);
      if (v25) {
        *(_DWORD *)v25 += 2;
      }
      uint64_t v79 = v25;
      long long v26 = *(_OWORD *)(v22 + 56);
      long long v80 = *(_OWORD *)(v22 + 40);
      long long v81 = v26;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v82, v22 + 72);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v85, v22 + 88);
      long long v27 = *(_OWORD *)(v22 + 104);
      char v89 = *(unsigned char *)(v22 + 120);
      long long v88 = v27;
      if (HIDWORD(v91) == v91)
      {
        WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserStyleSheetData>((uint64_t)&v90, (unint64_t)&v77);
      }
      else
      {
        uint64_t v29 = v90 + 120 * HIDWORD(v91);
        *(_OWORD *)uint64_t v29 = v77;
        int v30 = v78;
        v78 = 0;
        *(void *)(v29 + 16) = v30;
        WTF::URL::URL(v29 + 24, (uint64_t *)&v79);
        *(void *)(v29 + 64) = 0;
        *(void *)(v29 + 72) = 0;
        uint64_t v31 = v82;
        uint64_t v82 = 0;
        *(void *)(v29 + 64) = v31;
        LODWORD(v31) = v83;
        int v83 = 0;
        *(_DWORD *)(v29 + 72) = v31;
        LODWORD(v31) = v84;
        int v84 = 0;
        *(_DWORD *)(v29 + 76) = v31;
        *(void *)(v29 + 80) = 0;
        *(void *)(v29 + 88) = 0;
        uint64_t v32 = v85;
        uint64_t v85 = 0;
        *(void *)(v29 + 80) = v32;
        LODWORD(v32) = v86;
        int v86 = 0;
        *(_DWORD *)(v29 + 88) = v32;
        LODWORD(v32) = v87;
        int v87 = 0;
        *(_DWORD *)(v29 + 92) = v32;
        LOBYTE(v32) = v89;
        *(_OWORD *)(v29 + 96) = v88;
        *(unsigned char *)(v29 + 112) = v32;
        ++HIDWORD(v91);
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v28);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v33);
      int v35 = v79;
      uint64_t v79 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2) {
          WTF::StringImpl::destroy(v35, v34);
        }
        else {
          *(_DWORD *)v35 -= 2;
        }
      }
      double v36 = v78;
      v78 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v34);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
      int v37 = v19 + 1;
      while (v37 - 1 != v21 && v37 != v21)
      {
        uint64_t v39 = *v37++;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39) == 29)
        {
          double v19 = v37 - 1;
          goto LABEL_51;
        }
      }
      double v19 = v21;
LABEL_51:
      ;
    }
    while (v19 != v20);
  }
  v40 = (void *)*((void *)this + 9);
  if (!v40)
  {
    uint64_t v44 = 0;
    unsigned int v45 = 0;
    unsigned int v49 = 0;
    int v43 = v72;
    uint64_t v42 = v73;
    goto LABEL_95;
  }
  uint64_t v41 = *((unsigned int *)v40 - 3);
  int v43 = v72;
  uint64_t v42 = v73;
  if (v41)
  {
    if (v41 >= 0xAAAAAAB)
    {
LABEL_98:
      __break(0xC471u);
      JUMPOUT(0x198671190);
    }
    int v61 = 24 * v41;
    uint64_t v44 = WTF::fastMalloc((WTF *)(24 * v41));
    unsigned int v45 = (v61 & 0xFFFFFFF8) / 0x18;
    v40 = (void *)*((void *)v74 + 9);
    if (!v40) {
      goto LABEL_94;
    }
  }
  else
  {
    uint64_t v44 = 0;
    unsigned int v45 = 0;
  }
  if (!*((_DWORD *)v40 - 3)) {
    goto LABEL_94;
  }
  uint64_t v46 = *((unsigned int *)v40 - 1);
  FloatRect v47 = v40;
  if (v46)
  {
    uint64_t v48 = 16 * v46;
    FloatRect v47 = v40;
    while ((unint64_t)(*v47 + 1) <= 1)
    {
      v47 += 2;
      v48 -= 16;
      if (!v48) {
        goto LABEL_94;
      }
    }
  }
  v55 = &v40[2 * v46];
  if (v55 == v47)
  {
LABEL_94:
    unsigned int v49 = 0;
    goto LABEL_95;
  }
  unsigned int v49 = 0;
LABEL_76:
  uint64_t v56 = v47[1];
  if (v56) {
    ++*(_DWORD *)(v56 + 8);
  }
  uint64_t v57 = *(void *)(v56 + 16);
  CFTypeRef v58 = *(_DWORD **)(v56 + 32);
  uint64_t v59 = *(void *)(*(void *)(v56 + 40) + 24);
  if (v58) {
    *v58 += 2;
  }
  int v60 = (void *)(v44 + 24 * v49);
  *int v60 = v57;
  v60[1] = v59;
  v60[2] = v58;
  if (*(_DWORD *)(v56 + 8) == 1) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  else {
    --*(_DWORD *)(v56 + 8);
  }
  ++v49;
  while (1)
  {
    v47 += 2;
    if (v47 == v55) {
      break;
    }
    if ((unint64_t)(*v47 + 1) > 1)
    {
      if (v47 != v55) {
        goto LABEL_76;
      }
      break;
    }
  }
LABEL_95:
  uint64_t v62 = *((void *)v74 + 4);
  uint64_t v98 = 0;
  *(void *)uint64_t v42 = v62;
  *(void *)(v42 + 8) = v75;
  uint64_t v99 = 0;
  *(_DWORD *)(v42 + 16) = v43;
  *(_DWORD *)(v42 + 20) = v76;
  uint64_t v63 = v96;
  uint64_t v96 = 0;
  *(void *)(v42 + 24) = v63;
  uint64_t v64 = v97;
  uint64_t v97 = 0;
  *(void *)(v42 + 32) = v64;
  uint64_t v65 = v90;
  uint64_t v90 = 0;
  *(void *)(v42 + 40) = v65;
  uint64_t v66 = v91;
  uint64_t v91 = 0;
  *(void *)(v42 + 48) = v66;
  *(void *)&long long v77 = 0;
  *(void *)(v42 + 56) = v44;
  *((void *)&v77 + 1) = 0;
  *(_DWORD *)(v42 + 64) = v45;
  *(_DWORD *)(v42 + 68) = v49;
  WebKit::WebUserContentControllerProxy::contentRuleListData(v74, v42 + 72);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v77, v67);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v68);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v96, v69);
  return WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v98, v70);
}

void *WebKit::WebUserContentControllerProxy::contentRuleListData@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = (void **)(this + 13);
  uint64_t v3 = this[13];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (v3)
  {
    uint64_t v5 = *(unsigned int *)(v3 - 12);
    if (v5)
    {
      if (v5 >= 0x2222223)
      {
        __break(0xC471u);
        return this;
      }
      int v6 = 120 * v5;
      uint64_t v7 = WTF::fastMalloc((WTF *)(120 * v5));
      *(_DWORD *)(a2 + 8) = (v6 & 0xFFFFFFF8) / 0x78;
      *(void *)a2 = v7;
    }
  }
  this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::Ref<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,WTF::URL>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  uint64_t v8 = (uint64_t)this;
  uint64_t v10 = v9;
  if (*v4) {
    uint64_t v11 = (uint64_t)&(*v4)[7 * *((unsigned int *)*v4 - 1)];
  }
  else {
    uint64_t v11 = 0;
  }
  if ((void *)v11 != this)
  {
    do
    {
      uint64_t v12 = *(void *)(*(void *)(v8 + 8) + 16);
      uint64_t v13 = *(WTF::StringImpl **)(v12 + 16);
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      float v21 = v13;
      float v14 = *(atomic_uint **)(v12 + 24);
      if (v14) {
        atomic_fetch_add(v14, 1u);
      }
      long long v24 = *(_OWORD *)(v12 + 64);
      long long v25 = *(_OWORD *)(v12 + 80);
      long long v22 = *(_OWORD *)(v12 + 32);
      long long v23 = *(_OWORD *)(v12 + 48);
      float v15 = *(WTF::StringImpl **)(v8 + 16);
      if (v15) {
        *(_DWORD *)v15 += 2;
      }
      long long v26 = v15;
      long long v16 = *(_OWORD *)(v8 + 40);
      long long v27 = *(_OWORD *)(v8 + 24);
      long long v28 = v16;
      unsigned int v17 = *(_DWORD *)(a2 + 12);
      uint64_t v18 = *(void *)a2 + 120 * v17;
      *(void *)uint64_t v18 = v21;
      *(void *)(v18 + 8) = v14;
      *(_OWORD *)(v18 + 48) = v24;
      *(_OWORD *)(v18 + 64) = v25;
      *(_OWORD *)(v18 + 16) = v22;
      *(_OWORD *)(v18 + 32) = v23;
      WTF::URL::URL(v18 + 80, (uint64_t *)&v26);
      *(_DWORD *)(a2 + 12) = v17 + 1;
      uint64_t v20 = v26;
      long long v26 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v19);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      this = 0;
      while (1)
      {
        v8 += 56;
        if (v8 == v10) {
          break;
        }
        if ((unint64_t)(*(void *)v8 + 1) > 1) {
          goto LABEL_24;
        }
      }
      uint64_t v8 = v10;
LABEL_24:
      ;
    }
    while (v8 != v11);
  }
  return this;
}

uint64_t WebKit::WebExtensionController::parameters@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = *(void *)(this + 32);
  *(unsigned char *)(a2 + 8) = (*(unsigned char *)(this + 176) & 2) != 0;
  int v4 = (void **)(this + 56);
  uint64_t v3 = *(void *)(this + 56);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v3 && (unsigned int v5 = *(_DWORD *)(v3 - 12)) != 0)
  {
    if (v5 >= 0x1AF286C)
    {
      __break(0xC471u);
      return this;
    }
    unsigned int v16 = 152 * v5;
    uint64_t v6 = WTF::fastMalloc((WTF *)(152 * v5));
    unsigned int v7 = v16 / 0x98;
    LODWORD(v18) = v16 / 0x98;
    uint64_t v17 = v6;
  }
  else
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
  }
  uint64_t v8 = (WebKit::WebExtensionContext **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(v4);
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  if (*v4) {
    uint64_t v12 = (uint64_t)&(*v4)[*((unsigned int *)*v4 - 1)];
  }
  else {
    uint64_t v12 = 0;
  }
  if ((WebKit::WebExtensionContext **)v12 == v8)
  {
    uint64_t v15 = v7;
  }
  else
  {
    do
    {
      uint64_t v13 = *v10++;
      WebKit::WebExtensionContext::parameters(v13, (uint64_t)v19);
      WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v17, (uint64_t)v19);
      WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)v19, v14);
      while (v10 != v11)
      {
        if ((unint64_t)*v10 + 1 > 1) {
          goto LABEL_13;
        }
        ++v10;
      }
      uint64_t v10 = v11;
LABEL_13:
      ;
    }
    while (v10 != (WebKit::WebExtensionContext **)v12);
    uint64_t v15 = v18;
    uint64_t v6 = v17;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v15;
  return WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v9);
}

uint64_t WebKit::WebBackForwardList::itemStates@<X0>(WebKit::WebBackForwardList *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v4 = &unk_1EE9D85A0;
  uint64_t v7 = v4;
  WebKit::WebBackForwardList::filteredItemStates((uint64_t)this, &v7, a2);
  unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebKit::WebBackForwardList::filteredItemStates@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 36);
  if (!v6) {
    return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, v5);
  }
  if (v6 < 0xD20D21)
  {
    uint64_t v7 = result;
    unsigned int v8 = 312 * v6;
    uint64_t v9 = WTF::fastMalloc((WTF *)(312 * v6));
    *(_DWORD *)(a3 + 8) = v8 / 0x138;
    *(void *)a3 = v9;
    uint64_t v10 = *(unsigned int *)(v7 + 36);
    if (v10)
    {
      uint64_t v11 = *(void **)(v7 + 24);
      uint64_t v12 = 8 * v10;
      do
      {
        if ((*(uint64_t (**)(void, void))(*(void *)*a2 + 16))(*a2, *v11))
        {
          uint64_t v13 = *v11;
          long long v36 = *(_OWORD *)(*v11 + 32);
          float v14 = *(WTF::StringImpl **)(v13 + 48);
          if (v14) {
            *(_DWORD *)v14 += 2;
          }
          int v37 = v14;
          WebKit::FrameState::FrameState((WebKit::FrameState *)v38, (const WebKit::FrameState *)(v13 + 56));
          char v39 = *(unsigned char *)(v13 + 304);
          uint64_t v15 = *(atomic_uint **)(v13 + 312);
          if (v15) {
            atomic_fetch_add(v15, 1u);
          }
          v40 = v15;
          char v41 = *(unsigned char *)(v13 + 320);
          char v42 = *(unsigned char *)(v13 + 328);
          unsigned int v16 = *(WebKit::ViewSnapshot **)(v13 + 336);
          if (v16) {
            ++*(_DWORD *)v16;
          }
          char v44 = 1;
          long long v28 = v36;
          uint64_t v17 = v37;
          int v43 = v16;
          int v37 = 0;
          uint64_t v29 = v17;
          WebKit::FrameState::FrameState((uint64_t)v30, v38);
          char v31 = v39;
          uint64_t v32 = (unsigned int *)v40;
          char v33 = v41;
          char v34 = v42;
          uint64_t v18 = v43;
          v40 = 0;
          int v43 = 0;
          int v35 = v18;
          unsigned int v19 = *(_DWORD *)(a3 + 12);
          if (v19 == *(_DWORD *)(a3 + 8))
          {
            WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::BackForwardListItemState>(a3, (unint64_t)&v28);
          }
          else
          {
            uint64_t v20 = *(void *)a3 + 312 * v19;
            *(_OWORD *)uint64_t v20 = v28;
            float v21 = v29;
            uint64_t v29 = 0;
            *(void *)(v20 + 16) = v21;
            WebKit::FrameState::FrameState(v20 + 24, (uint64_t *)v30);
            *(unsigned char *)(v20 + 272) = v31;
            long long v22 = v32;
            uint64_t v32 = 0;
            *(void *)(v20 + 280) = v22;
            *(unsigned char *)(v20 + 288) = v33;
            *(unsigned char *)(v20 + 296) = v34;
            long long v23 = v35;
            int v35 = 0;
            *(void *)(v20 + 304) = v23;
            ++*(_DWORD *)(a3 + 12);
          }
          long long v24 = v35;
          int v35 = 0;
          if (v24) {
            WTF::RefCounted<WebKit::ViewSnapshot>::deref(v24);
          }
          long long v25 = v32;
          uint64_t v32 = 0;
          if (v25) {
            WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v25);
          }
          WebKit::FrameState::~FrameState(v30);
          long long v27 = v29;
          uint64_t v29 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v26);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
        }
        else
        {
          LOBYTE(v36) = 0;
          char v44 = 0;
        }
        std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
        ++v11;
        v12 -= 8;
      }
      while (v12);
      unint64_t v5 = *(unsigned int *)(a3 + 12);
    }
    else
    {
      unint64_t v5 = 0;
    }
    return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, v5);
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebProcessPool::cachedHardwareKeyboardState(WebKit::WebProcessPool *this)
{
  if (WTF::isMainRunLoop(this)) {
    return *(unsigned __int16 *)((char *)this + 945) | (*((unsigned __int8 *)this + 947) << 16);
  }
  uint64_t result = 1324;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebPageProxy::useGPUProcessForDOMRenderingEnabled(WebKit::WebPageProxy *this)
{
  uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"WebKit2GPUProcessForDOMRendering");
  if (v2)
  {
    return [v2 BOOLValue];
  }
  else
  {
    uint64_t v5 = *((void *)this + 34);
    {
      WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v3))return 1; {
    long long v22 = 0;
    }
    CFRetain(*((CFTypeRef *)this + 1));
    float v21 = this;
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)v20, (uint64_t *)&v22, (uint64_t *)&v21);
    if (v21) {
      CFRelease(*((CFTypeRef *)v21 + 1));
    }
    uint64_t v9 = *(void *)(*((void *)this + 6) + 136);
    if (v9 && (uint64_t v10 = *(void *)(v9 + 8)) != 0)
    {
      while (1)
      {
        uint64_t v11 = v10 - 16;
        if (v22)
        {
          int v12 = *((_DWORD *)v22 - 2);
          unint64_t v13 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          int v16 = v12 & ((v15 >> 31) ^ v15);
          uint64_t v17 = v22[v16];
          if (v17 == v11) {
            goto LABEL_26;
          }
          int v18 = 1;
          while (v17)
          {
            int v16 = (v16 + v18) & v12;
            uint64_t v17 = v22[v16];
            ++v18;
            if (v17 == v11) {
              goto LABEL_26;
            }
          }
        }
        {
          WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(void *)(v10 + 256) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v8))break; {
        CFRetain(*(CFTypeRef *)(v10 - 8));
        }
        float v21 = (WebKit::WebPageProxy *)(v10 - 16);
        WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::add((uint64_t)v20, (uint64_t *)&v22, (uint64_t *)&v21);
        if (v21) {
          CFRelease(*((CFTypeRef *)v21 + 1));
        }
        uint64_t v19 = *(void *)(*(void *)(v10 + 32) + 136);
        if (v19)
        {
          uint64_t v10 = *(void *)(v19 + 8);
          if (v10) {
            continue;
          }
        }
        goto LABEL_26;
      }
      uint64_t v6 = 1;
    }
    else
    {
LABEL_26:
      uint64_t v6 = 0;
    }
    if (v22) {
      WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(v22, v7);
    }
    return v6;
  }
}

void sub_198671B3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a13) {
    CFRelease(*(CFTypeRef *)(a13 + 8));
  }
  if (a14) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a14, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::useElevatedUserInterfaceLevel(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 728))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1600))(v2);
  return v3;
}

uint64_t WebKit::PageClientImpl::effectiveUserInterfaceLevelIsElevated(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  uint64_t v2 = [WeakRetained _effectiveUserInterfaceLevelIsElevated];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v2;
}

void sub_198671C88(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::useDarkAppearance(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 720))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 1600))(v2);
  return v3;
}

uint64_t WebKit::PageClientImpl::effectiveAppearanceIsDark(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  uint64_t v2 = [WeakRetained _effectiveAppearanceIsDark];
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  return v2;
}

void sub_198671DB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::UIClient::canRunBeforeUnloadConfirmPanel(API::UIClient *this)
{
  return 0;
}

uint64_t API::Array::elementsOfType<API::UserStyleSheet>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 28);
  uint64_t v5 = v3 + 8 * v4;
  if (v4)
  {
    uint64_t v7 = 8 * v4;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 16))();
      if (result == 29) {
        break;
      }
      v3 += 8;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v3 = v5;
        break;
      }
    }
    uint64_t v8 = v3;
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v9 = *(unsigned int *)(a2 + 28);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  v2[2] = v8;
  v2[3] = v5;
  uint64_t v10 = v3 + 8 * v9;
  v2[6] = v10;
  v2[7] = v10;
  return result;
}

uint64_t API::Array::elementsOfType<API::UserScript>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 28);
  uint64_t v5 = v3 + 8 * v4;
  if (v4)
  {
    uint64_t v7 = 8 * v4;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 16))();
      if (result == 28) {
        break;
      }
      v3 += 8;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v3 = v5;
        break;
      }
    }
    uint64_t v8 = v3;
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v9 = *(unsigned int *)(a2 + 28);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  v2[2] = v8;
  v2[3] = v5;
  uint64_t v10 = v3 + 8 * v9;
  v2[6] = v10;
  v2[7] = v10;
  return result;
}

uint64_t *API::PageConfiguration::maskedURLSchemes@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((unsigned char *)this + 368))
  {
    uint64_t v3 = this + 45;
  }
  else
  {
    if (!this[14])
    {
      uint64_t v4 = this[15];
      if (!v4 || !*(void *)(v4 + 8))
      {
        *a2 = 0;
        return this;
      }
    }
    uint64_t v3 = WebKit::WebExtensionMatchPattern::extensionSchemes((WebKit::WebExtensionMatchPattern *)this);
  }

  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(a2, (void **)v3);
}

void WebCore::Color::~Color(WebCore::Color *this, void *a2)
{
  if ((*(void *)this & 0x8000000000000) != 0)
  {
    uint64_t v2 = (unsigned int *)(*(void *)this & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

unsigned __int8 *WebKit::WebUserContentControllerProxy::addProcess(WebKit::WebUserContentControllerProxy *this, WebKit::WebProcessProxy *a2)
{
  uint64_t result = (unsigned __int8 *)WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)this + 40, (unsigned int *)a2, (uint64_t)v6);
  if (v7)
  {
    uint64_t v5 = *((void *)this + 4);
    v8[0] = 211;
    v8[1] = v5;
    return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)a2 + 20, (unsigned __int8 *)v8, (uint64_t)this + 16, v6);
  }
  return result;
}

void WebKit::PageClientImpl::mimeTypesWithCustomContentProviders(id *this@<X0>, void *a2@<X8>)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  uint64_t v4 = (void *)[WeakRetained _contentProviderRegistry];
  if (v4)
  {
    [v4 _mimeTypesWithCustomContentProviders];
    if (!WeakRetained) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    if (!WeakRetained) {
      return;
    }
  }

  CFRelease(WeakRetained);
}

void sub_1986720B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::PageClientImpl::userInterfaceLayoutDirection(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  if (!WeakRetained) {
    return 0;
  }
  uint64_t v2 = WeakRetained;
  BOOL v3 = objc_msgSend(MEMORY[0x1E4F42FF0], "userInterfaceLayoutDirectionForSemanticContentAttribute:", objc_msgSend(WeakRetained, "semanticContentAttribute")) != 0;
  CFRelease(v2);
  return v3;
}

void sub_198672130(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198672224(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct((WTF::StringImpl *)(*(void *)result + 312 * a2), (WTF::StringImpl *)(*(void *)result + 312 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0xD20D21)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(312 * a2);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = v6 / 0x138;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebKit::BackForwardListItemState>::move(v5, (WTF::StringImpl *)((char *)v5 + 312 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

void sub_1986724B4(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    unint64_t v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1)
      {
        uint64_t v5 = *v4;
        *unint64_t v4 = 0;
        if (v5) {
          WTF::fastFree(v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::RemoteDisplayListRecorderProxy::recordSave(WebKit::RemoteDisplayListRecorderProxy *this)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 481);
  if (v1)
  {
    uint64_t v3 = *(WebKit::RemoteRenderingBackendProxy **)(v1 + 8);
    if (v3)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v3, &v56);
      unint64_t v4 = v56;
      if (v56)
      {
        uint64_t v5 = (WebKit::RemoteImageBufferProxy *)*((void *)this + 479);
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, *((void *)this + 480), &v55);
          uint64_t v5 = v55;
          if (v55 && !*((unsigned char *)v55 + 4016))
          {
            *((unsigned char *)v55 + 4016) = 1;
            uint64_t v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        else
        {
          v55 = 0;
        }
        uint64_t v6 = *((void *)this + 478);
        double v7 = *((double *)v4 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v5);
          double v8 = v7 + v9;
        }
        if (*((void *)v4 + 7) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v4 + 16), buf, v8);
            if (!buf[16]) {
              goto LABEL_86;
            }
            unint64_t v13 = *(void **)buf;
            unint64_t v14 = *(void *)&buf[8];
            unint64_t v15 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = v15 - *(void *)buf;
            if (v15 < *(void *)buf)
            {
              unint64_t v17 = 0;
            }
            else
            {
              if (v16 > 0xFFFFFFFFFFFFFFFDLL) {
                goto LABEL_83;
              }
              unint64_t v17 = v16 + 2;
              if (v16 + 2 > *(void *)&buf[8]) {
                goto LABEL_83;
              }
              char v10 = 102;
              *(_WORD *)(*(void *)buf + v16) = 870;
            }
            if (v14)
            {
              unint64_t v18 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v19 = *((void *)v4 + 8);
              if (v18 + 16 >= v19) {
                unint64_t v18 = 0;
              }
              if (v17 <= 0x10) {
                unint64_t v17 = 16;
              }
              unint64_t v20 = v18 + v17;
              if (v19 <= v20) {
                unint64_t v20 = 0;
              }
              *((void *)v4 + 10) = v20;
              unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v20);
              atomic_uint v22 = v4[29];
              if (v21 == 0x80000000 || v22 != 0)
              {
                unsigned int v25 = v22 + 1;
                v4[29] = v25;
                if (v25 >= v4[28])
                {
                  if (*((unsigned char *)v4 + 104)) {
                    MEMORY[0x1997420B0](v4[23]);
                  }
                  v4[29] = 0;
                }
              }
              goto LABEL_26;
            }
            uint64_t v26 = buf[16];
            if (buf[16])
            {
              unint64_t v13 = *(void **)buf;
              unint64_t v14 = *(void *)&buf[8];
LABEL_83:
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, (unint64_t)v13, v14);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)v4 + 1);
              char v44 = v57;
              unsigned int v45 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)unsigned int v45 = 870;
              *((void *)v45 + 1) = v6;
              *((void *)v45 + 66) = (char *)v45 + 16;
              *((void *)v45 + 67) = 512;
              *((void *)v45 + 68) = 0;
              *((void *)v45 + 70) = 0;
              *((void *)v45 + 69) = 0;
              IPC::Encoder::encodeHeader(v45);
              CFTypeRef v58 = v45;
              int v47 = IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v58, 1, 0);
              uint64_t v48 = v58;
              CFTypeRef v58 = 0;
              if (v48)
              {
                IPC::Encoder::~Encoder(v48, v46);
                WTF::fastFree(v53, v54);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
              if (!v47) {
                goto LABEL_26;
              }
              goto LABEL_86;
            }
            __break(1u);
LABEL_75:
            if ((v10 & 1) == 0) {
              break;
            }
            unint64_t v31 = 0;
            if (v12 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v28 = 0;
            }
            else
            {
              unint64_t v28 = 0;
              if (v12 + 2 <= v11)
              {
                unint64_t v28 = v12 + 2;
LABEL_44:
                *(_WORD *)(v26 + v12) = 2871;
                goto LABEL_45;
              }
            }
LABEL_46:
            uint64_t v32 = (void *)((v26 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v32 >= v26 + v28)
            {
              char v33 = (char *)v32 - v26;
              if ((unint64_t)v32 - v26 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_86;
              }
              unint64_t v28 = (unint64_t)(v33 + 8);
              if ((unint64_t)(v33 + 8) > v31) {
                goto LABEL_86;
              }
              *uint64_t v32 = v6;
            }
            if (!v31) {
              goto LABEL_86;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v28 <= 0x10) {
              unint64_t v28 = 16;
            }
            unint64_t v36 = v34 + v28;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            unint64_t v38 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37);
            atomic_uint v39 = v4[29];
            if (v38 == 0x80000000 || v39 != 0)
            {
              unsigned int v41 = v39 + 1;
              v4[29] = v41;
              if (v41 >= v4[28])
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](v4[23]);
                }
                v4[29] = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          unint64_t v28 = 0;
LABEL_45:
          unint64_t v31 = v11;
          goto LABEL_46;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v4 + 16), buf, v8);
        if (buf[16])
        {
          uint64_t v26 = *(void *)buf;
          unint64_t v11 = *(void *)&buf[8];
          unint64_t v27 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v12 = v27 - *(void *)buf;
          char v10 = v27 >= *(void *)buf;
          unint64_t v28 = v27 - *(void *)buf + 2;
          BOOL v30 = v12 < 0xFFFFFFFFFFFFFFFELL && v28 <= *(void *)&buf[8];
          if ((v10 & 1) == 0 || !v30) {
            goto LABEL_75;
          }
          goto LABEL_44;
        }
LABEL_86:
        unsigned int v49 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          long long v50 = IPC::errorAsString();
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "RemoteDisplayListRecorder_Save";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v50;
          _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v51 = *((void *)this + 481);
        if (v51)
        {
          v52 = *(unsigned char **)(v51 + 8);
          if (v52) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
          }
        }
LABEL_26:
        long long v24 = v55;
        v55 = 0;
        if (v24) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v24 + 1, v13);
        }
        uint64_t v56 = 0;
        if (atomic_fetch_add(v4, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v4);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v4, v13);
          WTF::fastFree(v42, v43);
        }
      }
    }
  }
}

unsigned int *WebKit::RemoteRenderingBackendProxy::prepareImageBufferSetsForDisplay@<X0>(unsigned int *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *((unsigned int *)a2 + 3);
  if (v9)
  {
    uint64_t v135 = 0;
    if (v9 >= 0x6666667)
    {
      __break(0xC471u);
      goto LABEL_177;
    }
    unint64_t v4 = (uint64_t *)result;
    int v11 = 40 * v9;
    uint64_t v12 = WTF::fastMalloc((WTF *)(40 * v9));
    LODWORD(v135) = (v11 & 0xFFFFFFF8) / 0x28;
    uint64_t v134 = v12;
    unsigned int v13 = *((_DWORD *)a2 + 3);
    if (v13)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = *a2;
      uint64_t v5 = (atomic_uint *)(*a2 + 40 * v13);
      v133 = v5;
      uint64_t v17 = v12 + 32;
      uint64_t v6 = v16 + 8;
      uint64_t v132 = v4;
      while (1)
      {
        unint64_t v4 = (uint64_t *)(v6 - 8);
        uint64_t v18 = *(void *)(v6 - 8);
        if (*(unsigned char *)(v18 + 56)) {
          int v15 = 1;
        }
        *(_WORD *)(v18 + 56) = 0;
        uint64_t v19 = *v4;
        uint64_t v20 = *(void *)(*v4 + 32);
        if (!v20) {
          goto LABEL_18;
        }
        unint64_t v21 = *(WebKit::RemoteRenderingBackendProxy **)(v20 + 8);
        if (!v21) {
          goto LABEL_18;
        }
        WebKit::RemoteRenderingBackendProxy::connection(v21, &v139);
        if (!v139) {
          goto LABEL_18;
        }
        if (*(unsigned char *)(v19 + 88)) {
          break;
        }
LABEL_11:
        char v23 = 0;
        *(unsigned char *)(v19 + 88) = 0;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v19 + 89), (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
        if (v23) {
          MEMORY[0x19972E8D0](v19 + 89);
        }
        if (!*(void *)(v19 + 104))
        {
          uint64_t v64 = a3;
          uint64_t v65 = v139;
          if (v139)
          {
            int v66 = v15;
            atomic_fetch_add(v139, 1u);
            v67 = *(unsigned int **)(v19 + 104);
            *(void *)(v19 + 104) = v65;
            if (v67)
            {
              WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v67, v22);
              uint64_t v65 = *(atomic_uint **)(v19 + 104);
            }
          }
          else
          {
            int v66 = v15;
            *(void *)(v19 + 104) = 0;
          }
          uint64_t v68 = *(void *)(*(void *)(*(void *)(v19 + 32) + 8) + 224);
          (*(void (**)(uint64_t))(*(void *)v68 + 48))(v68);
          IPC::StreamClientConnection::addWorkQueueMessageReceiver((uint64_t)v65, 0x57u, v68, v19, *(void *)(v19 + 24));
          (*(void (**)(uint64_t))(*(void *)v68 + 56))(v68);
          int v15 = v66;
          a3 = v64;
          uint64_t v5 = v133;
        }
        *(unsigned char *)(v19 + 112) = 1;
        int v24 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v19 + 89), (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
        if (v24 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)(v19 + 89));
        }
        if (v139) {
          WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v139, v22);
        }
LABEL_18:
        uint64_t v136 = *(atomic_uint **)(*(void *)(v6 - 8) + 24);
        WebCore::Region::Region((WebCore::Region *)v137, (const WebCore::Region *)v6);
        v138[0] = *(unsigned char *)(v6 + 24);
        *(_WORD *)&v138[1] = *(_WORD *)(v6 + 25);
        *(void *)(v17 - 32) = v136;
        WebCore::Region::Region();
        __int16 v25 = *(_WORD *)v138;
        *(unsigned char *)(v17 + 2) = v138[2];
        *(_WORD *)uint64_t v17 = v25;
        v17 += 40;
        WebCore::Region::~Region((WebCore::Region *)v137);
        ++v14;
        v6 += 40;
        if (v4 + 5 == (uint64_t *)v5)
        {
          HIDWORD(v135) = v14;
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          unint64_t v4 = v132;
          if (!v15) {
            goto LABEL_66;
          }
          v141 = &v134;
          WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)buf, (WebKit::RemoteRenderingBackendProxy *)v132, (uint64_t *)&v141, v132[8]);
          if (v151)
          {
            WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a3, (WTF *)HIDWORD(v135));
            size_t v79 = *(unsigned int *)(a3 + 12);
            if (v79) {
              bzero(*(void **)a3, v79);
            }
          }
          else
          {
            uint64_t v124 = *(void *)&buf[8];
            uint64_t v125 = *(void *)&buf[16];
            *(void *)&buf[8] = 0;
            *(void *)&buf[16] = 0;
            v126 = *(WTF **)a3;
            if (*(void *)a3)
            {
              *(void *)a3 = 0;
              *(_DWORD *)(a3 + 8) = 0;
              WTF::fastFree(v126, (void *)v79);
            }
            *(void *)a3 = v124;
            *(void *)(a3 + 8) = v125;
          }
          if (v151 != -1) {
            ((void (*)(uint64_t **, unsigned char *))off_1EE9E9E50[v151])(&v141, buf);
          }
          return WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v134, (void *)v79);
        }
      }
      int v128 = v15;
      v130 = (float *)(v19 + 60);
      uint64_t v131 = (CFTypeRef *)(v19 + 72);
      uint64_t v26 = *(void *)(v19 + 32);
      uint64_t v129 = a3;
      if (!v26)
      {
        uint64_t v51 = 0;
        char v50 = *(unsigned char *)(v19 + 81);
LABEL_51:
        uint64_t v52 = *(void *)(v19 + 40);
        char v53 = *(unsigned char *)(v19 + 82);
        int v54 = *(_DWORD *)(v19 + 68);
        char v55 = *(unsigned char *)(v19 + 80);
        uint64_t v144 = *(uint64_t **)(v19 + 60);
        int v145 = v54;
        uint64_t v56 = *(const void **)(v19 + 72);
        CFTypeRef v146 = v56;
        if (v56) {
          CFRetain(v56);
        }
        char v147 = v55;
        char v148 = v53;
        WebCore::ImageBuffer::backendParameters();
        WebCore::ImageBufferBackend::calculateBaseTransform();
        uint64_t v57 = *(const void **)&buf[16];
        *(void *)&buf[16] = 0;
        if (v57) {
          CFRelease(v57);
        }
        CFTypeRef v58 = *(atomic_uint **)v130;
        v140[0] = 0;
        v140[1] = v58;
        uint64_t v59 = WTF::fastMalloc((WTF *)0xF20);
        int v149 = 0;
        WebCore::GraphicsContextState::GraphicsContextState();
        WebCore::DisplayList::Recorder::Recorder();
        WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)buf, v60);
        *(void *)uint64_t v59 = &unk_1EE9E7EB8;
        *(void *)(v59 + 3824) = v52;
        *(_OWORD *)(v59 + 3832) = 0u;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v51 + 8), v51);
        int v61 = *(atomic_uint **)(v51 + 8);
        if (v61) {
          atomic_fetch_add(v61, 1u);
        }
        *(void *)(v59 + 3848) = v61;
        *(unsigned char *)(v59 + 3856) = v50;
        *(unsigned char *)(v59 + 3857) = 0;
        *(void *)(v59 + 3864) = 0;
        CFTypeRef v62 = v146;
        CFTypeRef v146 = 0;
        a3 = v129;
        int v15 = v128;
        if (v62) {
          CFRelease(v62);
        }
        uint64_t v63 = *(void *)(v19 + 48);
        *(void *)(v19 + 48) = v59;
        uint64_t v5 = v133;
        if (v63) {
          (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
        }
        goto LABEL_11;
      }
      unint64_t v27 = *(WebKit::RemoteRenderingBackendProxy **)(v26 + 8);
      if (!v27
        || (LODWORD(v7) = *(_DWORD *)(v19 + 68),
            char v28 = *(unsigned char *)(v19 + 80),
            uint64_t v29 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(v27, v140),
            (BOOL v30 = v140[0]) == 0))
      {
LABEL_49:
        uint64_t v49 = *(void *)(v19 + 32);
        char v50 = *(unsigned char *)(v19 + 81);
        if (v49) {
          uint64_t v51 = *(void *)(v49 + 8);
        }
        else {
          uint64_t v51 = 0;
        }
        goto LABEL_51;
      }
      uint64_t v31 = *(void *)(v19 + 24);
      double v32 = *((double *)v140[0] + 15);
      double v33 = INFINITY;
      if (fabs(v32) != INFINITY)
      {
        WTF::ApproximateTime::now(v29);
        double v33 = v32 + v34;
      }
      if (*((void *)v30 + 7) != v31)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v30 + 16), buf, v33);
        if (!buf[16]) {
          goto LABEL_146;
        }
        uint64_t v91 = *(void *)buf;
        unint64_t v92 = *(void *)&buf[8];
        unint64_t v93 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v94 = v93 - *(void *)buf;
        if (v93 < *(void *)buf)
        {
          unint64_t v96 = 0;
          unint64_t v95 = *(void *)&buf[8];
        }
        else
        {
          unint64_t v95 = 0;
          if (v94 > 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v96 = 0;
          }
          else
          {
            unint64_t v96 = 0;
            if (v94 + 2 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v94) = 2871;
              unint64_t v95 = v92;
              unint64_t v96 = v94 + 2;
            }
          }
        }
        uint64_t v97 = (void *)((v91 + v96 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v97 >= v91 + v96)
        {
          uint64_t v98 = (char *)v97 - v91;
          if ((unint64_t)v97 - v91 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_146;
          }
          unint64_t v96 = (unint64_t)(v98 + 8);
          if ((unint64_t)(v98 + 8) > v95) {
            goto LABEL_146;
          }
          *uint64_t v97 = v31;
        }
        if (!v95)
        {
LABEL_146:
          v114 = off_1EB3583E8;
          if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v115 = IPC::errorAsString();
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "RemoteImageBufferSet_UpdateConfiguration";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v115;
            _os_log_impl(&dword_1985F2000, v114, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferSetProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
          }
          uint64_t v116 = *(void *)(v19 + 32);
          if (v116)
          {
            uint64_t v117 = *(unsigned char **)(v116 + 8);
            if (v117) {
              WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v117);
            }
          }
          goto LABEL_48;
        }
        unint64_t v99 = (*((void *)v30 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v100 = *((void *)v30 + 8);
        if (v99 + 16 >= v100) {
          unint64_t v99 = 0;
        }
        if (v96 <= 0x10) {
          unint64_t v96 = 16;
        }
        unint64_t v101 = v99 + v96;
        if (v100 <= v101) {
          unint64_t v102 = 0;
        }
        else {
          unint64_t v102 = v101;
        }
        *((void *)v30 + 10) = v102;
        IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v30, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v30 + 9) + 16) + 128), v102) == 0x80000000);
        *((void *)v30 + 7) = v31;
      }
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v30 + 16), &v141, v33);
      if (v143)
      {
        *(void *)buf = v141;
        *(void *)&buf[8] = v142;
        *(void *)&buf[16] = 0;
        unint64_t v35 = ((unint64_t)v141 + 1) & 0xFFFFFFFFFFFFFFFELL;
        BOOL v36 = v35 >= (unint64_t)v141;
        unint64_t v37 = v35 - (void)v141;
        if (v36)
        {
          if (v37 > 0xFFFFFFFFFFFFFFFDLL || v37 + 2 > v142)
          {
            *(void *)&buf[8] = 0;
          }
          else
          {
            *(_WORD *)((char *)v141 + v37) = 1120;
            *(void *)&buf[16] = v37 + 2;
          }
        }
        IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, v130);
        unint64_t v38 = *(void *)&buf[8];
        uint64_t v39 = *(void *)&buf[16];
        if (*(void *)&buf[16] >= *(void *)&buf[8])
        {
          unint64_t v38 = 0;
          *(void *)&buf[8] = 0;
          uint64_t v40 = *(void *)buf;
        }
        else
        {
          uint64_t v40 = *(void *)buf;
          *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = *(unsigned char *)(v19 + 81);
          *(void *)&buf[16] = ++v39;
        }
        unsigned int v41 = (_DWORD *)((v40 + v39 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v41 >= v40 + v39)
        {
          char v42 = (char *)v41 - v40;
          if ((unint64_t)v41 - v40 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v42 + 4) > v38)
          {
            *(void *)&buf[8] = 0;
          }
          else
          {
            *unsigned int v41 = LODWORD(v7);
            *(void *)&buf[16] = v42 + 4;
          }
        }
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)buf, v131);
        uint64_t v44 = *(void *)&buf[16];
        if (*(void *)&buf[16] < *(void *)&buf[8])
        {
          unint64_t v45 = *(void *)&buf[16] + 1;
          *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = v28;
          *(void *)&buf[16] = v44 + 1;
          if (*(void *)&buf[8])
          {
            unint64_t v46 = (*((void *)v30 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v47 = *((void *)v30 + 8);
            if (v46 + 16 >= v47) {
              unint64_t v46 = 0;
            }
            if (v45 <= 0x10) {
              unint64_t v45 = 16;
            }
            unint64_t v48 = v46 + v45;
            if (v47 <= v48) {
              unint64_t v48 = 0;
            }
            *((void *)v30 + 10) = v48;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v30 + 9) + 16) + 128), v48) == 0x80000000
              || v30[29])
            {
              if (*((unsigned char *)v30 + 104)) {
                MEMORY[0x1997420B0](v30[23]);
              }
              v30[29] = 0;
            }
LABEL_48:
            WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v30, v43);
            goto LABEL_49;
          }
        }
        uint64_t v9 = v143;
        if (!v143) {
          goto LABEL_177;
        }
        unint64_t v103 = ((unint64_t)v141 + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v104 = v103 - (void)v141;
        if (v103 < (unint64_t)v141)
        {
          unint64_t v105 = 0;
        }
        else
        {
          unint64_t v105 = 0;
          if (v104 <= 0xFFFFFFFFFFFFFFFDLL && v104 + 2 <= v142)
          {
            *(_WORD *)((char *)v141 + v104) = 2870;
            unint64_t v105 = v104 + 2;
          }
        }
        unint64_t v106 = (*((void *)v30 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v107 = *((void *)v30 + 8);
        if (v106 + 16 >= v107) {
          unint64_t v106 = 0;
        }
        if (v105 <= 0x10) {
          unint64_t v105 = 16;
        }
        unint64_t v108 = v106 + v105;
        if (v107 <= v108) {
          unint64_t v108 = 0;
        }
        *((void *)v30 + 10) = v108;
        atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v30 + 9) + 16) + 128), v108);
        v30[29] = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v144, (uint64_t **)v30 + 1);
        uint64_t v127 = v144;
        uint64_t v109 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v109 = 1120;
        *((void *)v109 + 1) = v31;
        *((void *)v109 + 66) = (char *)v109 + 16;
        *((void *)v109 + 67) = 512;
        *((void *)v109 + 68) = 0;
        *((void *)v109 + 70) = 0;
        *((void *)v109 + 69) = 0;
        unint64_t v110 = v109;
        IPC::Encoder::encodeHeader(v109);
        *(void *)buf = v110;
        IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v110, v130);
        IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v110, *(unsigned char *)(v19 + 81));
        IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v110, *(float *)&v7);
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v110, v131);
        LOBYTE(v149) = v28;
        IPC::Encoder::operator<<<BOOL>(v110, (char *)&v149);
        int v112 = IPC::Connection::sendMessageImpl((uint64_t)v127, (uint64_t *)buf, 1, 0);
        uint64_t v113 = *(IPC::Encoder **)buf;
        *(void *)buf = 0;
        if (v113)
        {
          IPC::Encoder::~Encoder(v113, v111);
          WTF::fastFree(v118, v119);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v144);
        if (!v112) {
          goto LABEL_48;
        }
      }
      goto LABEL_146;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
LABEL_66:
    uint64_t v144 = &v134;
    uint64_t v6 = v4[8];
    uint64_t v69 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)v4, &v136);
    uint64_t v5 = v136;
    if (v136)
    {
      double v70 = *((double *)v136 + 15);
      double v7 = INFINITY;
      if (fabs(v70) != INFINITY)
      {
        WTF::ApproximateTime::now(v69);
        double v7 = v70 + v71;
      }
      if (*((void *)v5 + 7) == v6)
      {
        while (1)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), &v141, v7);
          if (!v143) {
            break;
          }
          *(void *)buf = v141;
          *(void *)&buf[8] = v142;
          *(void *)&buf[16] = 0;
          unint64_t v72 = ((unint64_t)v141 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v36 = v72 >= (unint64_t)v141;
          unint64_t v73 = v72 - (void)v141;
          if (v36)
          {
            if (v73 > 0xFFFFFFFFFFFFFFFDLL || v73 + 2 > v142)
            {
              *(void *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)((char *)v141 + v73) = 1339;
              *(void *)&buf[16] = v73 + 2;
            }
          }
          IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((WTF *)buf, (uint64_t)v144);
          if (*(void *)&buf[8])
          {
            uint64_t v75 = *(void *)&buf[16];
            unint64_t v76 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v77 = *((void *)v5 + 8);
            if (v76 + 16 >= v77) {
              unint64_t v76 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v75 = 16;
            }
            unint64_t v78 = v76 + v75;
            if (v77 <= v78) {
              unint64_t v78 = 0;
            }
            *((void *)v5 + 10) = v78;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v78) == 0x80000000
              || v5[29])
            {
              if (*((unsigned char *)v5 + 104)) {
                MEMORY[0x1997420B0](v5[23]);
              }
              v5[29] = 0;
            }
            goto LABEL_85;
          }
          uint64_t v9 = v143;
          if (v143)
          {
            IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, (unint64_t)v141, v142);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
            int v120 = IPC::Connection::send<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplay>(*(uint64_t *)buf, (uint64_t *)&v144, v6);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
            if (!v120) {
              goto LABEL_85;
            }
            break;
          }
LABEL_177:
          __break(1u);
LABEL_178:
          unint64_t v84 = 0;
          unint64_t v83 = v3;
LABEL_101:
          uint64_t v85 = (void *)((v9 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v85 >= v9 + v84)
          {
            int v86 = (char *)v85 - v9;
            if ((unint64_t)v85 - v9 > 0xFFFFFFFFFFFFFFF7) {
              break;
            }
            unint64_t v84 = (unint64_t)(v86 + 8);
            if ((unint64_t)(v86 + 8) > v83) {
              break;
            }
            *uint64_t v85 = v6;
          }
          if (!v83) {
            break;
          }
          unint64_t v87 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v88 = *((void *)v5 + 8);
          if (v87 + 16 >= v88) {
            unint64_t v87 = 0;
          }
          if (v84 <= 0x10) {
            unint64_t v84 = 16;
          }
          unint64_t v89 = v87 + v84;
          if (v88 <= v89) {
            unint64_t v90 = 0;
          }
          else {
            unint64_t v90 = v89;
          }
          *((void *)v5 + 10) = v90;
          IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v5, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v90) == 0x80000000);
          *((void *)v5 + 7) = v6;
        }
      }
      else
      {
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 16), buf, v7);
        if (buf[16])
        {
          uint64_t v9 = *(void *)buf;
          unint64_t v3 = *(void *)&buf[8];
          unint64_t v81 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v82 = v81 - *(void *)buf;
          if (v81 < *(void *)buf) {
            goto LABEL_178;
          }
          unint64_t v83 = 0;
          if (v82 > 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v84 = 0;
          }
          else
          {
            unint64_t v84 = 0;
            if (v82 + 2 <= *(void *)&buf[8])
            {
              *(_WORD *)(*(void *)buf + v82) = 2871;
              unint64_t v83 = v3;
              unint64_t v84 = v82 + 2;
            }
          }
          goto LABEL_101;
        }
      }
      v121 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v122 = v4[8];
        v123 = IPC::errorAsString();
        *(_DWORD *)buf = 134218498;
        *(void *)&buf[4] = v122;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "RemoteRenderingBackend_PrepareImageBufferSetsForDisplay";
        *(_WORD *)&unsigned char buf[22] = 2082;
        v151 = v123;
        _os_log_impl(&dword_1985F2000, v121, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v4);
LABEL_85:
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v5, v74);
    }
    WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a3, (WTF *)HIDWORD(v135));
    size_t v80 = *(unsigned int *)(a3 + 12);
    if (v80) {
      memset(*(void **)a3, 1, v80);
    }
    return WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v134, (void *)v79);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t IPC::StreamClientConnectionBuffer::tryAcquire@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>, double a3@<D0>)
{
  unint64_t explicit = atomic_load_explicit(*(atomic_ullong *volatile *)(*(void *)(result + 8) + 16), memory_order_acquire);
  while (1)
  {
    if (explicit != 0x80000000)
    {
      unint64_t v4 = *(void *)(result + 16);
      unint64_t v5 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v6 = *(void *)result;
      if (v5 + 16 >= *(void *)result) {
        unint64_t v5 = 0;
      }
      if (v4 >= explicit)
      {
        if (v5 < v4)
        {
          if (v5 >= explicit)
          {
            unint64_t v6 = 0;
            goto LABEL_10;
          }
        }
        else if (!explicit)
        {
          goto LABEL_26;
        }
        v6 -= v5;
        if (v5 < explicit) {
          unint64_t v6 = explicit + ~v5;
        }
        goto LABEL_10;
      }
      BOOL v13 = v5 < v4 || v5 >= explicit;
      unint64_t v6 = explicit + ~v5;
      if (v13) {
        unint64_t v6 = 0;
      }
LABEL_10:
      while (1)
      {
        uint64_t v7 = *(void *)(result + 8);
        unint64_t v8 = *(void *)(v7 + 8);
        if (v8 > 0xFF)
        {
          unint64_t v9 = v8 - 256;
          BOOL v13 = v9 >= v5;
          unint64_t v10 = v9 - v5;
          if (v13)
          {
            uint64_t v11 = *(void *)(v7 + 16);
            if (v6 == -1) {
              break;
            }
            BOOL v13 = v10 >= v6;
            unint64_t v10 = v6;
            if (v13) {
              break;
            }
          }
        }
        __break(1u);
LABEL_26:
        v6 += ~v5;
      }
      if (v10 >= 0x10)
      {
        *(void *)a2 = v11 + v5 + 256;
        *((void *)a2 + 1) = v10;
        char v12 = 1;
        goto LABEL_18;
      }
    }
    unint64_t v18 = explicit;
    uint64_t v19 = a2;
    uint64_t v20 = result;
    double v14 = a3;
    uint64_t result = WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    if (v15 >= v14) {
      break;
    }
    uint64_t result = v20;
    unint64_t v16 = v18;
    unint64_t v17 = v18;
    atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(*(void *)(v20 + 8) + 16), &v17, 0x80000000uLL);
    unint64_t explicit = v17;
    a2 = v19;
    a3 = v14;
    if (v16 == v17)
    {
      if (!*(unsigned char *)(v20 + 40)) {
        break;
      }
      uint64_t result = IPC::Semaphore::waitFor((semaphore_t *)(v20 + 32), v14);
      if ((result & 1) == 0) {
        break;
      }
      uint64_t result = v20;
      unint64_t explicit = atomic_load_explicit(*(atomic_ullong *volatile *)(*(void *)(v20 + 8) + 16), memory_order_acquire);
      a2 = v19;
      a3 = v14;
    }
  }
  char v12 = 0;
  a2 = v19;
  unsigned char *v19 = 0;
LABEL_18:
  a2[16] = v12;
  return result;
}

uint64_t IPC::StreamClientConnection::wakeUpServerBatched(uint64_t result, char a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 116);
  if ((a2 & 1) != 0 || v3)
  {
    unsigned int v4 = v3 + 1;
    *(_DWORD *)(result + 116) = v4;
    if (v4 >= *(_DWORD *)(result + 112))
    {
      if (*(unsigned char *)(result + 104)) {
        uint64_t result = MEMORY[0x1997420B0](*(unsigned int *)(result + 92));
      }
      *(_DWORD *)(v2 + 116) = 0;
    }
  }
  return result;
}

void WebKit::RemoteDisplayListRecorderProxy::recordRestore(WebKit::RemoteDisplayListRecorderProxy *this)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 481);
  if (v1)
  {
    int v3 = *(WebKit::RemoteRenderingBackendProxy **)(v1 + 8);
    if (v3)
    {
      WebKit::RemoteRenderingBackendProxy::connection(v3, &v56);
      unsigned int v4 = v56;
      if (v56)
      {
        unint64_t v5 = (WebKit::RemoteImageBufferProxy *)*((void *)this + 479);
        if (v5)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v5, *((void *)this + 480), &v55);
          unint64_t v5 = v55;
          if (v55 && !*((unsigned char *)v55 + 4016))
          {
            *((unsigned char *)v55 + 4016) = 1;
            unint64_t v5 = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v5);
          }
        }
        else
        {
          char v55 = 0;
        }
        uint64_t v6 = *((void *)this + 478);
        double v7 = *((double *)v4 + 15);
        double v8 = INFINITY;
        if (fabs(v7) != INFINITY)
        {
          WTF::ApproximateTime::now(v5);
          double v8 = v7 + v9;
        }
        if (*((void *)v4 + 7) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v4 + 16), buf, v8);
            if (!buf[16]) {
              goto LABEL_86;
            }
            BOOL v13 = *(void **)buf;
            unint64_t v14 = *(void *)&buf[8];
            unint64_t v15 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v16 = v15 - *(void *)buf;
            if (v15 < *(void *)buf)
            {
              unint64_t v17 = 0;
            }
            else
            {
              if (v16 > 0xFFFFFFFFFFFFFFFDLL) {
                goto LABEL_83;
              }
              unint64_t v17 = v16 + 2;
              if (v16 + 2 > *(void *)&buf[8]) {
                goto LABEL_83;
              }
              char v10 = 100;
              *(_WORD *)(*(void *)buf + v16) = 868;
            }
            if (v14)
            {
              unint64_t v18 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v19 = *((void *)v4 + 8);
              if (v18 + 16 >= v19) {
                unint64_t v18 = 0;
              }
              if (v17 <= 0x10) {
                unint64_t v17 = 16;
              }
              unint64_t v20 = v18 + v17;
              if (v19 <= v20) {
                unint64_t v20 = 0;
              }
              *((void *)v4 + 10) = v20;
              unint64_t v21 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v20);
              atomic_uint v22 = v4[29];
              if (v21 == 0x80000000 || v22 != 0)
              {
                unsigned int v25 = v22 + 1;
                v4[29] = v25;
                if (v25 >= v4[28])
                {
                  if (*((unsigned char *)v4 + 104)) {
                    MEMORY[0x1997420B0](v4[23]);
                  }
                  v4[29] = 0;
                }
              }
              goto LABEL_26;
            }
            uint64_t v26 = buf[16];
            if (buf[16])
            {
              BOOL v13 = *(void **)buf;
              unint64_t v14 = *(void *)&buf[8];
LABEL_83:
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v4, (unint64_t)v13, v14);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)v4 + 1);
              uint64_t v44 = v57;
              unint64_t v45 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)unint64_t v45 = 868;
              *((void *)v45 + 1) = v6;
              *((void *)v45 + 66) = (char *)v45 + 16;
              *((void *)v45 + 67) = 512;
              *((void *)v45 + 68) = 0;
              *((void *)v45 + 70) = 0;
              *((void *)v45 + 69) = 0;
              IPC::Encoder::encodeHeader(v45);
              CFTypeRef v58 = v45;
              int v47 = IPC::Connection::sendMessageImpl((uint64_t)v44, (uint64_t *)&v58, 1, 0);
              unint64_t v48 = v58;
              CFTypeRef v58 = 0;
              if (v48)
              {
                IPC::Encoder::~Encoder(v48, v46);
                WTF::fastFree(v53, v54);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v57);
              if (!v47) {
                goto LABEL_26;
              }
              goto LABEL_86;
            }
            __break(1u);
LABEL_75:
            if ((v10 & 1) == 0) {
              break;
            }
            unint64_t v31 = 0;
            if (v12 > 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v28 = 0;
            }
            else
            {
              unint64_t v28 = 0;
              if (v12 + 2 <= v11)
              {
                unint64_t v28 = v12 + 2;
LABEL_44:
                *(_WORD *)(v26 + v12) = 2871;
                goto LABEL_45;
              }
            }
LABEL_46:
            double v32 = (void *)((v26 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v32 >= v26 + v28)
            {
              double v33 = (char *)v32 - v26;
              if ((unint64_t)v32 - v26 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_86;
              }
              unint64_t v28 = (unint64_t)(v33 + 8);
              if ((unint64_t)(v33 + 8) > v31) {
                goto LABEL_86;
              }
              *double v32 = v6;
            }
            if (!v31) {
              goto LABEL_86;
            }
            unint64_t v34 = (*((void *)v4 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v35 = *((void *)v4 + 8);
            if (v34 + 16 >= v35) {
              unint64_t v34 = 0;
            }
            if (v28 <= 0x10) {
              unint64_t v28 = 16;
            }
            unint64_t v36 = v34 + v28;
            if (v35 <= v36) {
              unint64_t v37 = 0;
            }
            else {
              unint64_t v37 = v36;
            }
            *((void *)v4 + 10) = v37;
            unint64_t v38 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v4 + 9) + 16) + 128), v37);
            atomic_uint v39 = v4[29];
            if (v38 == 0x80000000 || v39 != 0)
            {
              unsigned int v41 = v39 + 1;
              v4[29] = v41;
              if (v41 >= v4[28])
              {
                if (*((unsigned char *)v4 + 104)) {
                  MEMORY[0x1997420B0](v4[23]);
                }
                v4[29] = 0;
              }
            }
            *((void *)v4 + 7) = v6;
          }
          unint64_t v28 = 0;
LABEL_45:
          unint64_t v31 = v11;
          goto LABEL_46;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v4 + 16), buf, v8);
        if (buf[16])
        {
          uint64_t v26 = *(void *)buf;
          unint64_t v11 = *(void *)&buf[8];
          unint64_t v27 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v12 = v27 - *(void *)buf;
          char v10 = v27 >= *(void *)buf;
          unint64_t v28 = v27 - *(void *)buf + 2;
          BOOL v30 = v12 < 0xFFFFFFFFFFFFFFFELL && v28 <= *(void *)&buf[8];
          if ((v10 & 1) == 0 || !v30) {
            goto LABEL_75;
          }
          goto LABEL_44;
        }
LABEL_86:
        uint64_t v49 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          char v50 = IPC::errorAsString();
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "RemoteDisplayListRecorder_Restore";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v50;
          _os_log_impl(&dword_1985F2000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v51 = *((void *)this + 481);
        if (v51)
        {
          uint64_t v52 = *(unsigned char **)(v51 + 8);
          if (v52) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
          }
        }
LABEL_26:
        int v24 = v55;
        char v55 = 0;
        if (v24) {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ImageBuffer,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)v24 + 1, v13);
        }
        uint64_t v56 = 0;
        if (atomic_fetch_add(v4, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v4);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v4, v13);
          WTF::fastFree(v42, v43);
        }
      }
    }
  }
}

uint64_t WebKit::RemoteRenderingBackendProxy::connection@<X0>(WebKit::RemoteRenderingBackendProxy *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(this);
  if (!*((unsigned char *)this + 248)) {
    goto LABEL_11;
  }
  uint64_t result = *((void *)this + 6);
  if (!*(unsigned char *)(result + 104))
  {
    uint64_t result = IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteRenderingBackendProxy::DidInitialize,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(result, *((void *)this + 8));
    if (result)
    {
      uint64_t v6 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *((void *)this + 8);
        *(_DWORD *)buf = 134218242;
        uint64_t v9 = v7;
        __int16 v10 = 2082;
        unint64_t v11 = IPC::errorAsString();
        _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::connection() - waitForAndDispatchImmediately returned error: %{public}s", buf, 0x16u);
      }
      uint64_t result = (uint64_t)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(this);
    }
  }
  if (*((unsigned char *)this + 248))
  {
    unint64_t v5 = (atomic_uint *)*((void *)this + 6);
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
  }
  else
  {
LABEL_11:
    unint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

WebKit::WebProcess *WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(WebKit::WebProcess *this)
{
  if (!*((void *)this + 6))
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(this);
    double v3 = WebKit::WebProcess::gpuProcessTimeoutDuration(v2);
    this = (WebKit::WebProcess *)IPC::StreamClientConnection::create(21, v13, v3);
    if (v14)
    {
      IPC::StreamClientConnection::StreamConnectionPair::StreamConnectionPair(&v11, v13);
      unint64_t v5 = v11;
      unint64_t v11 = 0;
      uint64_t v6 = *(unsigned int **)(v1 + 48);
      *(void *)(v1 + 48) = v5;
      if (v6)
      {
        WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v6, v4);
        unint64_t v5 = *(unsigned int **)(v1 + 48);
      }
      IPC::StreamClientConnection::open((uint64_t)v5, (void *)v1, (_OWORD *)(v1 + 24));
      *(unsigned char *)(v1 + 248) = 1;
      IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)&v8, (uint64_t)&v12);
      v9[2] = v1;
      WTF::Function<void ()(void)>::Function<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>(&v10, (uint64_t)&v8);
      WTF::callOnMainRunLoopAndWait();
      uint64_t v7 = v10;
      uint64_t v10 = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v8);
      IPC::StreamClientConnection::StreamConnectionPair::~StreamConnectionPair(&v11);
      return (WebKit::WebProcess *)std::optional<IPC::StreamClientConnection::StreamConnectionPair>::~optional((uint64_t)v13);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v11 >= v2 + v3)
  {
    unint64_t v12 = (unint64_t)v11 - v2 + 4;
    if ((unint64_t)v11 - v2 > 0xFFFFFFFFFFFFFFFBLL || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v11 = a2[1];
      result[2] = v12;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t result, WTF *a2)
{
  int v2 = (int)a2;
  uint64_t v3 = result;
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 < (unint64_t)a2)
  {
    unint64_t v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = 16;
    }
    if (v6 > (unint64_t)a2) {
      a2 = (WTF *)v6;
    }
    uint64_t result = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, a2);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

unsigned int *IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, IPC::Decoder *this)
{
  unint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)this;
  unint64_t v6 = ((*((void *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)this;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v20 = *((void *)this + 3);
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v5, v4);
        uint64_t v19 = *(void *)this;
        unint64_t v18 = *((void *)this + 1);
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_19;
  }
  unint64_t v8 = (unint64_t *)(v5 + v6);
  *((void *)this + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v18 = v4;
    uint64_t v19 = 0;
LABEL_19:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v21 = *((void *)this + 3);
    if (v21 && v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
    }
    goto LABEL_30;
  }
  unint64_t v9 = *v8;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (v9 >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::ImageBufferSetPrepareBufferForDisplayInputData>((uint64_t)&v32, (uint64_t *)this);
      if (!v36) {
        goto LABEL_29;
      }
      int v22 = HIDWORD(v38);
      if (HIDWORD(v38) == v38)
      {
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>((uint64_t)&v37, (unint64_t)&v32);
      }
      else
      {
        uint64_t v23 = v37 + 40 * HIDWORD(v38);
        *(void *)uint64_t v23 = v32;
        WebCore::Region::Region();
        __int16 v24 = v34;
        *(unsigned char *)(v23 + 34) = v35;
        *(_WORD *)(v23 + 32) = v24;
        HIDWORD(v38) = v22 + 1;
      }
      if (v36) {
        WebCore::Region::~Region((WebCore::Region *)v33);
      }
      if (!--v9)
      {
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v37, HIDWORD(v38));
LABEL_16:
        uint64_t v14 = v37;
        uint64_t v15 = v38;
        goto LABEL_17;
      }
    }
  }
  if (v9)
  {
    LODWORD(v38) = 40 * (int)v9 / 0x28u;
    uint64_t v37 = WTF::fastMalloc((WTF *)(40 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::ImageBufferSetPrepareBufferForDisplayInputData>((uint64_t)&v32, (uint64_t *)this);
      if (!v36) {
        break;
      }
      int v11 = HIDWORD(v38);
      if (HIDWORD(v38) == v38)
      {
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>((uint64_t)&v37, (unint64_t)&v32);
      }
      else
      {
        uint64_t v12 = v37 + 40 * HIDWORD(v38);
        *(void *)uint64_t v12 = v32;
        WebCore::Region::Region();
        __int16 v13 = v34;
        *(unsigned char *)(v12 + 34) = v35;
        *(_WORD *)(v12 + 32) = v13;
        HIDWORD(v38) = v11 + 1;
      }
      if (v36) {
        WebCore::Region::~Region((WebCore::Region *)v33);
      }
      if (!--v9) {
        goto LABEL_16;
      }
    }
LABEL_29:
    WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v37, v10);
LABEL_30:
    uint64_t v25 = *(void *)this;
    uint64_t v26 = *((void *)this + 1);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v27 = *((void *)this + 3);
    if (v27) {
      BOOL v28 = v26 == 0;
    }
    else {
      BOOL v28 = 1;
    }
    if (!v28) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return (unsigned int *)IPC::Decoder::markInvalid(this);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
LABEL_17:
  uint64_t v29 = v15;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  char v31 = 1;
  WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v37, this);
  v30[0] = 0;
  v30[1] = 0;
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v29;
  uint64_t result = WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v30, v16);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

unsigned int *WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v6 = 40 * v3;
    unint64_t v7 = (WebCore::Region *)(*(void *)a1 + 8);
    do
    {
      WebCore::Region::~Region(v7);
      unint64_t v7 = (WebCore::Region *)(v8 + 40);
      v6 -= 40;
    }
    while (v6);
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void IPC::Decoder::decode<WebKit::ImageBufferSetPrepareBufferForDisplayInputData>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v5 = a2[3];
    if (v5 && v4 != 0)
    {
      unint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

atomic_uchar *volatile **IPC::StreamClientConnection::addWorkQueueMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, (uint64_t **)(a1 + 8));
  IPC::Connection::addWorkQueueMessageReceiver((uint64_t)v10, a2, a3, a4, a5);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v10);
}

WTF *IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(WTF *result, uint64_t a2)
{
  int v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = *((void *)result + 2);
  unint64_t v5 = *(void *)result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > *((void *)result + 1))
    {
      *((void *)result + 1) = 0;
    }
    else
    {
      *(void *)(*(void *)result + v9) = v3;
      *((void *)result + 2) = v10;
      uint64_t v3 = *(unsigned int *)(a2 + 12);
    }
  }
  if (v3)
  {
    uint64_t v12 = *(void *)a2;
    uint64_t v13 = 40 * v3;
    do
    {
      uint64_t result = IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::encode(v2, v12);
      v12 += 40;
      v13 -= 40;
    }
    while (v13);
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(WTF::StringImpl *a1, CFTypeRef *a2)
{
  uint64_t v3 = (CGColorSpace *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  IPC::ArgumentCoder<CGColorSpace *,void>::encode(a1, v3);
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198674698(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<CGColorSpace *,void>::encode(WTF::StringImpl *a1, CGColorSpace *a2)
{
  WebKit::CoreIPCCGColorSpace::CoreIPCCGColorSpace((WebKit::CoreIPCCGColorSpace *)v4, a2);
  uint64_t result = IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, (uint64_t)v4);
  if (v5 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
  }
                                                                        + v5))(&v6, v4);
  return result;
}

void sub_198674710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, unsigned int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
  }
                                           + a12))(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCCGColorSpace *WebKit::CoreIPCCGColorSpace::CoreIPCCGColorSpace(WebKit::CoreIPCCGColorSpace *this, CGColorSpace *a2)
{
  *(unsigned char *)this = 0;
  *((_DWORD *)this + 2) = 0;
  unsigned __int16 v4 = WebCore::colorSpaceForCGColorSpace(a2, a2);
  if (v4 < 0x100u)
  {
    CFStringRef Name = CGColorSpaceGetName(a2);
    CFTypeRef cf = Name;
    if (Name)
    {
      CFRetain(Name);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<__CFString const*>>((uint64_t)this, (const void **)this, &cf);
      CFTypeRef v8 = cf;
      CFTypeRef cf = 0;
      if (!v8) {
        return this;
      }
    }
    else
    {
      CFPropertyListRef v11 = CGColorSpaceCopyPropertyList(a2);
      if (!v11)
      {
        uint64_t v10 = *((unsigned int *)this + 2);
        if (!v10)
        {
          *(unsigned char *)this = 17;
          return this;
        }
        if (v10 != -1) {
          ((void (*)(char *, WebKit::CoreIPCCGColorSpace *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v10])(&v13, this);
        }
        *(unsigned char *)this = 17;
        goto LABEL_14;
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>((uint64_t)this, (const void **)this, &v11);
      CFTypeRef v8 = v11;
      CFPropertyListRef v11 = 0;
      if (!v8) {
        return this;
      }
    }
    CFRelease(v8);
    return this;
  }
  uint64_t v5 = *((unsigned int *)this + 2);
  if (v5)
  {
    char v9 = v4;
    if (v5 != -1) {
      ((void (*)(CFTypeRef *, WebKit::CoreIPCCGColorSpace *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&cf, this);
    }
    *(unsigned char *)this = v9;
LABEL_14:
    *((_DWORD *)this + 2) = 0;
    return this;
  }
  *(unsigned char *)this = v4;
  return this;
}

void sub_198674870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *(unsigned int *)(v11 + 8);
  if (v14 != -1) {
    ((void (*)(CFTypeRef *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v14])(&cf, v11);
  }
  *(_DWORD *)(v11 + 8) = -1;
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::DestinationColorSpace>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 8))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6 && v5 != 0)
    {
      CFTypeRef v8 = *(void (**)(void))(*(void *)v6 + 16);
      v8();
    }
  }
}

void IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WTF::RetainPtr<CGColorSpace *>>(a1, a2, (uint64_t)&cf);
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return;
    }
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    BOOL v7 = v5;
    WebCore::DestinationColorSpace::DestinationColorSpace();
    *(void *)a3 = v8;
    *(unsigned char *)(a3 + 8) = 1;
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
  }
  if (v10)
  {
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_198674A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::RetainPtr<CGColorSpace *>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::ArgumentCoder<WTF::RetainPtr<CGColorSpace *>,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 8))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6 && v5 != 0)
    {
      uint64_t v8 = *(void (**)(void))(*(void *)v6 + 16);
      v8();
    }
  }
}

void IPC::ArgumentCoder<WTF::RetainPtr<CGColorSpace *>,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WebKit::CoreIPCCGColorSpace>(a1, a2, v6);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCCGColorSpace::toCF((WebKit::CoreIPCCGColorSpace *)v6, &v5);
    *(void *)a3 = v5;
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
  }
  if (v8)
  {
    if (v7 != -1) {
      ((void (*)(CGColorSpaceRef *, unsigned char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
    }
                                                        + v7))(&v5, v6);
  }
}

void sub_198674B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, unsigned int a12, int a13, char a14)
{
  if (a14)
  {
    if (a12 != -1) {
      ((void (*)(uint64_t *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
    }
                                               + a12))(&a9, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCCGColorSpace::toCF(WebKit::CoreIPCCGColorSpace *this@<X0>, CGColorSpaceRef *a2@<X8>)
{
  int v3 = *((_DWORD *)this + 2);
  if (v3 == -1) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = *((unsigned int *)this + 2);
  }
  if (v4)
  {
    if (v4 == 2)
    {
      if (v3 != 2) {
        goto LABEL_15;
      }
      std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WebCore::ColorSpace)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<__CFString const*>)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<void const*>)#1}>,WTF::RetainPtr<void const*> const&>((CFTypeRef *)this, &v8);
    }
    else
    {
      if (v3 != 1) {
        goto LABEL_15;
      }
      std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WebCore::ColorSpace)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<__CFString const*>)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<void const*>)#1}>,WTF::RetainPtr<__CFString const*> const&>((CFTypeRef *)this, &v8);
    }
    CGColorSpaceRef v6 = v8;
LABEL_8:
    *a2 = v6;
    return;
  }
  if (!v3)
  {
    CGColorSpaceRef v5 = (CGColorSpace *)WebCore::cachedNullableCGColorSpace((WebCore *)*(unsigned __int8 *)this);
    CGColorSpaceRef v6 = v5;
    if (v5) {
      CFRetain(v5);
    }
    goto LABEL_8;
  }
LABEL_15:
  unsigned int v7 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::cachedNullableCGColorSpace(v7);
}

uint64_t WebCore::cachedNullableCGColorSpace(WebCore *a1)
{
  if (a1 == 17) {
    return WebCore::sRGBColorSpaceRef(a1);
  }
  switch((int)a1)
  {
    case 0:
      uint64_t result = MEMORY[0x1F4171538]();
      break;
    case 1:
      uint64_t result = MEMORY[0x1F4170F18]();
      break;
    case 2:
      uint64_t result = MEMORY[0x1F4172160]();
      break;
    case 3:
      uint64_t result = MEMORY[0x1F4171E88]();
      break;
    case 4:
      uint64_t result = MEMORY[0x1F4171FA8]();
      break;
    case 5:
      uint64_t result = MEMORY[0x1F4171BA0]();
      break;
    case 6:
      uint64_t result = MEMORY[0x1F4171E90]();
      break;
    case 7:
      uint64_t result = WebCore::extendedSRGBColorSpaceRef(a1);
      break;
    case 12:
      uint64_t result = MEMORY[0x1F41710F0]();
      break;
    case 15:
      uint64_t result = MEMORY[0x1F416FBC0]();
      break;
    case 16:
      uint64_t result = MEMORY[0x1F4170DE0]();
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void IPC::Decoder::decode<WebKit::CoreIPCCGColorSpace>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::ArgumentCoder<WebKit::CoreIPCCGColorSpace,void>::decode(a1, a2, a3);
  if (!a3[16])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
}

void sub_198674D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 16))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCGColorSpace,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7) {
    goto LABEL_26;
  }
  BOOL v8 = (unsigned char *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    unint64_t v13 = v5;
    uint64_t v14 = 0;
    goto LABEL_27;
  }
  unsigned int v9 = *v8;
  if (v9 > 2) {
    goto LABEL_28;
  }
  if (*v8)
  {
    if (v9 == 1)
    {
      IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>((IPC::Decoder *)a1, (uint64_t)&v25);
      int v12 = v26;
      if ((_BYTE)v26)
      {
        uint64_t v22 = v25;
        int v12 = 1;
        unsigned int v23 = 1;
        goto LABEL_21;
      }
    }
    else
    {
      IPC::Decoder::decode<WTF::RetainPtr<void const*>>(a1, a2, (uint64_t)&v25);
      int v12 = v26;
      if ((_BYTE)v26)
      {
        uint64_t v22 = v25;
        unsigned int v23 = 2;
        int v12 = 1;
LABEL_21:
        unsigned __int8 v24 = v12;
        if (!v12) {
          goto LABEL_29;
        }
        unint64_t v5 = 0;
        uint64_t v6 = 1;
        goto LABEL_23;
      }
    }
    LOBYTE(v22) = 0;
    goto LABEL_21;
  }
  unsigned __int16 v10 = IPC::Decoder::decode<WebCore::ColorSpace>(a1);
  if (v10 < 0x100u)
  {
LABEL_28:
    while (1)
    {
      LOBYTE(v22) = 0;
      unsigned __int8 v24 = 0;
LABEL_29:
      uint64_t v17 = *a1;
      uint64_t v18 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v19 = a1[3];
      if (v19 && v18) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
      uint64_t v6 = 0;
      unint64_t v5 = 1;
LABEL_23:
      if (!*a1) {
        goto LABEL_31;
      }
      if (!v5) {
        goto LABEL_7;
      }
      __break(1u);
LABEL_26:
      unint64_t v13 = 0;
      uint64_t v14 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v15 = a1[3];
      if (v15)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v6, v5);
          uint64_t v14 = *a1;
          unint64_t v13 = a1[1];
        }
        else
        {
          unint64_t v13 = 0;
          uint64_t v14 = 0;
        }
      }
LABEL_27:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v16 = a1[3];
      if (v16 && v13) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
      }
    }
  }
  LOBYTE(v22) = v10;
  unsigned int v23 = 0;
  LODWORD(v6) = 1;
  unsigned __int8 v24 = 1;
  if (!*a1)
  {
LABEL_31:
    *a3 = 0;
    a3[16] = 0;
    goto LABEL_14;
  }
LABEL_7:
  std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100]((uint64_t)&v20, (uint64_t)&v22);
  LOBYTE(v25) = 0;
  unsigned int v26 = -1;
  unsigned int v11 = v21;
  if (v21 != -1)
  {
    ((void (*)(char *, uint64_t *, uint64_t *))*(&off_1EEA10538 + v21))(&v27, &v25, &v20);
    unsigned int v26 = v11;
  }
  std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100]((uint64_t)a3, (uint64_t)&v25);
  a3[16] = 1;
  if (v26 != -1) {
    ((void (*)(char *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
  }
                                             + v26))(&v27, &v25);
  unsigned int v26 = -1;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
  }
                                             + v21))(&v27, &v20);
  unsigned int v21 = -1;
  LODWORD(v6) = v24;
LABEL_14:
  if (v6)
  {
    if (v23 != -1) {
      ((void (*)(uint64_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
    }
                                                  + v23))(&v25, &v22);
  }
}

void sub_198675028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10, int a11, char a12, int a13, unsigned int a14, int a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,unsigned int a22)
{
  if (a22 != -1) {
    ((void (*)(uint64_t, __int16 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
  }
                                              + a22))(v22 - 18, &a18);
  a22 = -1;
  if (a10 != -1) {
    ((void (*)(uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
  }
                                              + a10))(v22 - 18, &a9);
  a10 = -1;
  if (a16)
  {
    if (a14 != -1) {
      ((void (*)(__int16 *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
    }
                                               + a14))(&a18, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986750D8()
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t IPC::Decoder::decode<WebCore::ColorSpace>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        uint64_t v10 = *v18;
        unint64_t v9 = v18[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_8;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v9 = v1;
    uint64_t v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12 && v9)
    {
      uint64_t v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  unsigned int v5 = *v4;
  if (v5 >= 0x14)
  {
LABEL_9:
    unsigned int v5 = 0;
    int v6 = 0;
    goto LABEL_5;
  }
  int v6 = 1;
LABEL_5:
  uint64_t v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        unsigned int v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(result, a2, a3);
  }
  else if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(v4);
  }
  else
  {
    unint64_t v3 = *((void *)result + 2);
    if (v3 >= *((void *)result + 1))
    {
      *((void *)result + 1) = 0;
    }
    else
    {
      *(unsigned char *)(*(void *)result + v3) = *(unsigned char *)a2;
      *((void *)result + 2) = v3 + 1;
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 8);
  unint64_t v3 = *((void *)a1 + 2);
  if (v3 >= *((void *)a1 + 1))
  {
    *((void *)a1 + 1) = 0;
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v3) = v2;
    *((void *)a1 + 2) = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, a2, v2);
}

WTF *IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::encode(void *a1, uint64_t a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, (void *)a2);
  uint64_t result = IPC::ArgumentCoder<WebCore::Region,void>::encode(a1, a2 + 8);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1]
    || (*(unsigned char *)(*a1 + v5) = *(unsigned char *)(a2 + 32), a1[2] = v5 + 1, v5 + 1 >= a1[1])
    || (*(unsigned char *)(*a1 + v5 + 1) = *(unsigned char *)(a2 + 33), a1[2] = v5 + 2, v5 + 2 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5 + 2) = *(unsigned char *)(a2 + 34);
    a1[2] = v5 + 3;
  }
  return result;
}

void *IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(void *result, void *a2)
{
  uint64_t v2 = result[2];
  unint64_t v3 = *result + v2;
  unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v9 = v4 >= v3;
  unint64_t v5 = v4 - v3;
  if (v9)
  {
    unint64_t v6 = v5 + v2;
    unint64_t v7 = v6 + 8;
    unint64_t v8 = result[1];
    if (v6 <= 0xFFFFFFFFFFFFFFF7)
    {
      BOOL v9 = v7 >= v8;
      BOOL v10 = v7 == v8;
    }
    else
    {
      BOOL v9 = 1;
      BOOL v10 = 0;
    }
    if (!v10 && v9)
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(*result + v6) = *a2;
      result[2] = v7;
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::Region,void>::encode(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, *(void *)(a2 + 16));
    WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v11, v3 + 144);
  }
  else
  {
    WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v7, (const IntRect *)a2);
  }
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, v7, v9);
  IPC::VectorArgumentCoder<false,WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)&v11);
  unint64_t v5 = v11;
  if (&v13 != (uint64_t *)v11 && v11)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    WTF::fastFree(v5, v4);
  }
  uint64_t result = v7;
  if (&v10 != (uint64_t *)v7)
  {
    if (v7)
    {
      unint64_t v7 = 0;
      int v8 = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

void sub_1986754A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if ((WTF *)(v10 + 16) != a9 && a9 != 0) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  uint64_t v11 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v11 >= v2 + v3)
  {
    unint64_t v12 = (unint64_t)v11 - v2 + 4;
    if ((unint64_t)v11 - v2 > 0xFFFFFFFFFFFFFFFBLL || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *uint64_t v11 = a2[1];
      result[2] = v12;
    }
  }
  return result;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0::operator()(WebKit::WebProcess *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 3);
  unint64_t v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(a1);
  uint64_t v4 = WebKit::WebProcess::ensureGPUProcessConnection(v3);
  WebKit::GPUProcessConnection::createRenderingBackend(v4, v2[8], (uint64_t)a1);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  BOOL v6 = *(atomic_uint **)(v4 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  unint64_t v7 = (unsigned int *)v2[5];
  v2[5] = v6;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v5);
  }
  WebKit::GPUProcessConnection::sharedResourceCache(v4, &v10);
  unint64_t v8 = v10;
  uint64_t v10 = 0;
  uint64_t result = (unsigned int *)v2[7];
  v2[7] = v8;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      (*(void (**)(unsigned int *))(*(void *)result + 8))(result);
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t std::optional<IPC::StreamClientConnection::StreamConnectionPair>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
    WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref((unsigned int **)a1, v2);
  }
  return a1;
}

double WebKit::WebProcess::gpuProcessTimeoutDuration(WebKit::WebProcess *this)
{
  double result = INFINITY;
  if (!*((unsigned char *)this + 760)) {
    return 15.0;
  }
  return result;
}

IPC::Encoder **WebKit::GPUProcessConnection::createRenderingBackend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  v5[0] = &v6;
  v5[1] = a3;
  return IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateRenderingBackend>(v3, (uint64_t)v5);
}

uint64_t WebKit::GPUProcessConnection::sharedResourceCache@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  if (!*(void *)(this + 72))
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v4 + 8) = 1;
    *(void *)uint64_t v4 = &unk_1EE9E7B38;
    this = *(void *)(v2 + 72);
    *(void *)(v2 + 72) = v4;
    if (this)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(this + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(this + 8));
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
  }
  uint64_t v5 = *(void *)(v2 + 72);
  atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  *a2 = v5;
  return this;
}

void *WTF::Function<void ()(void)>::Function<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v4 = &unk_1EE9EA448;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  uint64_t v5 = *(void *)(a2 + 24);
  v4[3] = *(void *)(a2 + 16);
  v4[4] = v5;
  *a1 = v4;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EA448;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0::operator()((WebKit::WebProcess *)(a1 + 8));
}

uint64_t **IPC::StreamClientConnection::open(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v5 = a1 + 16;
  std::optional<IPC::StreamClientConnection::DedicatedConnectionClient>::emplace[abi:sn180100]<IPC::Connection::Client &,void>(a1 + 16, a2);
  double result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v7, (uint64_t **)(a1 + 8));
  if (*(unsigned char *)(a1 + 48))
  {
    IPC::Connection::open(v7, v5, a3);
    return (uint64_t **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::optional<IPC::StreamClientConnection::DedicatedConnectionClient>::emplace[abi:sn180100]<IPC::Connection::Client &,void>(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    *(void *)a1 = &unk_1EE9B71B0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 8), a2);
  }
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EEA103A0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 32) = 1;
  return a1;
}

uint64_t IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteRenderingBackendProxy::DidInitialize,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 120);
  double v5 = INFINITY;
  if (fabs(v4) != INFINITY)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
    double v5 = v4 + v6;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, (uint64_t **)(a1 + 8));
  uint64_t v7 = IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteRenderingBackendProxy::DidInitialize>((uint64_t)v9, a2, v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v9);
  return v7;
}

void *IPC::StreamClientConnection::StreamConnectionPair::StreamConnectionPair(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  a1[3] = a2[3];
  return a1;
}

IPC::Encoder **IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateRenderingBackend>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 43;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v7 = v4;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul>(v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 1, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

IPC::Encoder *IPC::Encoder::operator<<<WebCore::SharedMemoryHandle>(IPC::Encoder *a1, unint64_t a2)
{
  return a1;
}

IPC::Encoder *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v6 = **(void **)a2;
  IPC::Encoder::operator<<<unsigned long long>(a1, &v6);
  uint64_t v4 = *(void *)(a2 + 8);
  IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, v4);

  return IPC::Encoder::operator<<<WebCore::SharedMemoryHandle>(a1, v4 + 8);
}

uint64_t IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteRenderingBackendProxy::DidInitialize>(uint64_t a1, uint64_t a2, double a3)
{
  IPC::Connection::waitForMessage((atomic_uchar *volatile **)a1, 0x527u, a2, 0, (uint64_t)&v9, a3);
  int v4 = v10;
  if (!v10)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 33));
    int v4 = v10;
    if (v5)
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1, v9);
      uint64_t v6 = 0;
      int v4 = v10;
    }
    else
    {
      uint64_t v6 = 1;
    }
    if (v4 == -1) {
      return v6;
    }
    goto LABEL_5;
  }
  if (v10 == 1)
  {
    uint64_t v6 = v9;
LABEL_5:
    ((void (*)(char *, uint64_t *))off_1EE9E9D68[v4])(&v11, &v9);
    return v6;
  }
  uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
  return IPC::StreamClientConnection::DedicatedConnectionClient::didReceiveMessage(v8);
}

uint64_t IPC::StreamClientConnection::DedicatedConnectionClient::didReceiveMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder,IPC::Semaphore>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<IPC::Semaphore>(a2, v5);
  if (v6)
  {
    IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder,IPC::Semaphore,IPC::Semaphore>((uint64_t)a1, a3, (uint64_t)v5);
    if (v6)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v5);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
    }
  }
  else
  {
    *a1 = 0;
    a1[16] = 0;
  }
}

void IPC::StreamClientConnectionBuffer::setSemaphores(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::MachSendRight::MachSendRight();
  int v6 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = 0;
  v8[1] = v6;
  WTF::MachSendRight::MachSendRight();
  int v7 = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a3 + 4) = 0;
  v8[3] = v7;
  std::optional<IPC::StreamClientConnectionBuffer::Semaphores>::operator=[abi:sn180100]<IPC::StreamClientConnectionBuffer::Semaphores,void>((IPC::Semaphore *)(a1 + 24), (uint64_t)v8);
  IPC::StreamClientConnectionBuffer::Semaphores::~Semaphores((IPC::StreamClientConnectionBuffer::Semaphores *)v8);
  if (*(unsigned char *)(a1 + 40)) {
    MEMORY[0x1997420B0](*(unsigned int *)(a1 + 28));
  }
  else {
    __break(1u);
  }
}

IPC::Semaphore *std::optional<IPC::StreamClientConnectionBuffer::Semaphores>::operator=[abi:sn180100]<IPC::StreamClientConnectionBuffer::Semaphores,void>(IPC::Semaphore *this, uint64_t a2)
{
  if (*((unsigned char *)this + 16))
  {
    IPC::Semaphore::operator=(this, (IPC::Semaphore *)a2);
    IPC::Semaphore::operator=((IPC::Semaphore *)((char *)this + 8), (IPC::Semaphore *)(a2 + 8));
  }
  else
  {
    IPC::StreamClientConnectionBuffer::Semaphores::Semaphores((uint64_t)this, a2);
    *((unsigned char *)this + 16) = 1;
  }
  return this;
}

uint64_t IPC::StreamClientConnectionBuffer::Semaphores::Semaphores(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WTF::MachSendRight::MachSendRight();
  int v5 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(v4 + 4) = v5;
  WTF::MachSendRight::MachSendRight();
  int v6 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  return a1;
}

unsigned char *IPC::handleMessage<Messages::RemoteRenderingBackendProxy::DidInitialize,WebKit::RemoteRenderingBackendProxy,WebKit::RemoteRenderingBackendProxy,void ()(IPC::Semaphore &&,IPC::Semaphore &)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<IPC::Semaphore,IPC::Semaphore>>(v4, a1);
  if (v5[8]) {
    WebKit::RemoteRenderingBackendProxy::didInitialize(a2, (uint64_t)v4, (uint64_t)v5);
  }
  return std::__optional_destruct_base<std::tuple<IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100](v4);
}

void IPC::Decoder::decode<std::tuple<IPC::Semaphore,IPC::Semaphore>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[16])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

void IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<IPC::Semaphore>(a2, v4);
  if (v5)
  {
    IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder,IPC::Semaphore>(a1, a2, (uint64_t)v4);
    if (v5)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v4);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    *a1 = 0;
    a1[16] = 0;
  }
}

void IPC::Decoder::decode<IPC::Semaphore>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<IPC::Semaphore,void>::decode(a1, a2);
  if (!a2[8])
  {
    IPC::Decoder::markInvalid(a1);
  }
}

void IPC::ArgumentCoder<IPC::Semaphore,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::takeLastAttachment(a1, v5);
  if (*(void *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    IPC::Semaphore::Semaphore();
    IPC::Semaphore::Semaphore((uint64_t)a2, (uint64_t)&v4);
    a2[8] = 1;
    IPC::Semaphore::~Semaphore((IPC::Semaphore *)&v4);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v6) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
}

void sub_19867608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  }
  _Unwind_Resume(a1);
}

void IPC::Semaphore::~Semaphore(IPC::Semaphore *this)
{
  IPC::Semaphore::destroy(this);

  WTF::MachSendRight::~MachSendRight(this);
}

uint64_t IPC::Semaphore::Semaphore(uint64_t a1, uint64_t a2)
{
  uint64_t result = WTF::MachSendRight::MachSendRight();
  int v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(result + 4) = v4;
  return result;
}

_DWORD *IPC::Semaphore::Semaphore()
{
  uint64_t result = (_DWORD *)WTF::MachSendRight::MachSendRight();
  result[1] = *result;
  return result;
}

void IPC::StreamClientConnectionBuffer::Semaphores::~Semaphores(IPC::StreamClientConnectionBuffer::Semaphores *this)
{
  uint64_t v2 = (IPC::StreamClientConnectionBuffer::Semaphores *)((char *)this + 8);
  IPC::Semaphore::destroy((IPC::StreamClientConnectionBuffer::Semaphores *)((char *)this + 8));
  WTF::MachSendRight::~MachSendRight(v2);
  IPC::Semaphore::destroy(this);

  WTF::MachSendRight::~MachSendRight(this);
}

unsigned char *std::__optional_destruct_base<std::tuple<IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100](unsigned char *a1)
{
  if (a1[16])
  {
    IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 8));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
    IPC::Semaphore::destroy((IPC::Semaphore *)a1);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)a1);
  }
  return a1;
}

void IPC::Semaphore::destroy(IPC::Semaphore *this)
{
  if (*(_DWORD *)this)
  {
    int v3 = 0;
    WTF::MachSendRight::operator=();
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v3);
    uint64_t v2 = (_DWORD *)((char *)this + 4);
  }
  else
  {
    uint64_t v2 = (_DWORD *)((char *)this + 4);
    if (!*((_DWORD *)this + 1)) {
      return;
    }
    semaphore_destroy(*MEMORY[0x1E4F14960], *((_DWORD *)this + 1));
  }
  *uint64_t v2 = 0;
}

uint64_t WebKit::RemoteDisplayListRecorder::setState(uint64_t a1, WebCore::SourceBrush *this)
{
  uint64_t v14 = a1;
  uint64_t v4 = WebCore::SourceBrush::pattern(this);
  if (v4)
  {
    uint64_t v8 = v4;
    uint64_t v9 = v4 + 8;
    uint64_t v10 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(v4 + 8));
    WebKit::RemoteDisplayListRecorder::sourceImage(a1, v10, v15);
    if (!v17) {
      return std::optional<WebCore::SourceImage>::~optional((uint64_t)v15);
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v15);
    std::__optional_storage_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>>(v8 + 24, (uint64_t)v16);
    std::optional<WebCore::SourceImage>::~optional((uint64_t)v15);
  }
  uint64_t result = WebKit::RemoteDisplayListRecorder::setState(WebCore::DisplayList::SetState &&)::$_1::operator()(&v14, this);
  if (!result) {
    return result;
  }
  uint64_t v6 = WebCore::SourceBrush::pattern((WebCore::SourceBrush *)((char *)this + 88));
  if (v6)
  {
    uint64_t v13 = v6;
    uint64_t v11 = v6 + 8;
    uint64_t v12 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(v6 + 8));
    WebKit::RemoteDisplayListRecorder::sourceImage(a1, v12, v15);
    if (v17)
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,(std::__variant_detail::_Trait)1>>(v11, (uint64_t)v15);
      std::__optional_storage_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>>(v13 + 24, (uint64_t)v16);
      std::optional<WebCore::SourceImage>::~optional((uint64_t)v15);
      goto LABEL_4;
    }
    return std::optional<WebCore::SourceImage>::~optional((uint64_t)v15);
  }
LABEL_4:
  uint64_t result = WebKit::RemoteDisplayListRecorder::setState(WebCore::DisplayList::SetState &&)::$_1::operator()(&v14, (WebCore::SourceBrush *)((char *)this + 88));
  if (result)
  {
    int v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    return WebCore::DisplayList::SetState::apply(this, v7);
  }
  return result;
}

BOOL WebKit::RemoteDisplayListRecorder::setState(WebCore::DisplayList::SetState &&)::$_1::operator()(uint64_t *a1, WebCore::SourceBrush *this)
{
  uint64_t v3 = *a1;
  uint64_t v4 = WebCore::SourceBrush::gradientIdentifier(this);
  if (!v5) {
    return 1;
  }
  WebKit::RemoteResourceCache::cachedGradient((uint64_t *)(*(void *)(v3 + 40) + 64), v4, &v21);
  uint64_t v8 = v21;
  BOOL v6 = v21 != 0;
  if (v21)
  {
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v20, v21);
    WebCore::SourceBrush::gradientSpaceTransform(this);
    WebCore::SourceBrush::setGradient();
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v20, v9);
    char v11 = 0;
    uint64_t v21 = 0;
    uint64_t v12 = *(void *)(v8 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11) {
      MEMORY[0x19972E8D0](v12);
    }
    int v13 = 1;
    uint64_t v14 = *(void *)(v12 + 8) - 1;
    *(void *)(v12 + 8) = v14;
    if (v14)
    {
      uint64_t v15 = 0;
      BOOL v16 = 1;
    }
    else
    {
      uint64_t v17 = *(void *)(v12 + 16);
      uint64_t v15 = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = 0;
      BOOL v16 = v17 != 0;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1)
    {
      uint64_t v18 = v14;
      uint64_t v19 = v15;
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      uint64_t v14 = v18;
      uint64_t v15 = v19;
    }
    if (!v14)
    {
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      if (!v16) {
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  return v6;
}

void ___ZN6WebKit16WebsiteDataStore37tempDirectoryFileSystemRepresentationERKN3WTF6StringENS0_21ShouldCreateDirectoryE_block_invoke()
{
  v0 = (WebKit *)[MEMORY[0x1E4F1CB10] fileURLWithPath:NSTemporaryDirectory() isDirectory:1];
  if (v0)
  {
    unint64_t v1 = v0;
    BOOL HasContainer = WebKit::processHasContainer(v0);
    if (!HasContainer) {
      unint64_t v1 = (WebKit *)[(WebKit *)v1 URLByAppendingPathComponent:WebKit::applicationOrProcessIdentifier((WebKit *)HasContainer) isDirectory:1];
    }
    uint64_t v3 = (const void *)[(WebKit *)v1 URLByAppendingPathComponent:@"WebKit" isDirectory:1];
    uint64_t v4 = (uint64_t)v3;
    if (v3) {
      CFRetain(v3);
    }
    char v5 = (const void *)qword_1EB359B68;
    qword_1EB359B68 = v4;
    if (v5)
    {
      CFRelease(v5);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

WebKit::NetworkSessionCocoa *WebKit::NetworkSessionCocoa::NetworkSessionCocoa(WebKit::NetworkSessionCocoa *this, WebKit::NetworkProcess *a2, const WebKit::NetworkSessionCreationParameters *a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(void *)WebKit::NetworkSession::NetworkSession(this, (atomic_uint *)a2, a3) = &unk_1EE9BBF38;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)uint64_t v6 = 1;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(void *)(v6 + 120) = 0;
  *((void *)this + 138) = v6;
  *(_OWORD *)((char *)this + 1112) = 0u;
  int v7 = (_DWORD *)*((void *)a3 + 4);
  if (v7) {
    *v7 += 2;
  }
  *((void *)this + 141) = v7;
  uint64_t v8 = (_DWORD *)*((void *)a3 + 7);
  if (v8) {
    *v8 += 2;
  }
  *((void *)this + 142) = v8;
  uint64_t v9 = (_DWORD *)*((void *)a3 + 8);
  if (v9) {
    *v9 += 2;
  }
  *((void *)this + 143) = v9;
  uint64_t v10 = (const void *)*((void *)a3 + 6);
  *((void *)this + 144) = v10;
  if (v10) {
    CFRetain(v10);
  }
  *((_WORD *)this + 592) = 0;
  *((void *)this + 147) = 0;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((unsigned char *)this + 1186) = *((unsigned char *)a3 + 72);
  *((unsigned char *)this + 1187) = *((unsigned char *)a3 + 296);
  char v11 = (_DWORD *)*((void *)a3 + 36);
  if (v11) {
    *v11 += 2;
  }
  *((void *)this + 149) = v11;
  *((unsigned char *)this + 1200) = *((unsigned char *)a3 + 316);
  *(_OWORD *)((char *)this + 1208) = 0uLL;
  unint64_t v12 = *((void *)this + 3);
  unint64_t v13 = 0x1E4F18000uLL;
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_109;
  }
LABEL_12:
  uint64_t v14 = (NSURLSessionConfiguration *)[*(id *)(v13 + 3536) defaultSessionConfiguration];
  uint64_t v15 = 3;
  BOOL v16 = "sensitive";
  while (1)
  {
    [(NSURLSessionConfiguration *)v14 set_shouldSkipPreferredClientCertificateLookup:1];
    uint64_t v17 = NSSelectorFromString(&cfstr_SetLoggingpriv.isa);
    if (objc_opt_respondsToSelector())
    {
      objc_msgSend(v14, v17, v15);
      uint64_t v18 = qword_1EB3581B8;
      if (os_log_type_enabled((os_log_t)qword_1EB3581B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = "Regular";
        if ((v12 & 0x8000000000000000) != 0 && v12 != -1) {
          uint64_t v19 = "Ephemeral";
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v12;
        __int16 v71 = 2082;
        unint64_t v72 = v16;
        _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "Setting logging level for %{public}s session %llu to %{public}s", buf, 0x20u);
      }
    }
    [(NSURLSessionConfiguration *)v14 set_connectionCacheNumPriorityLevels:5];
    [(NSURLSessionConfiguration *)v14 set_connectionCacheMinimumFastLanePriority:2];
    [(NSURLSessionConfiguration *)v14 set_connectionCacheNumFastLanes:1];
    if (objc_opt_respondsToSelector()) {
      [(NSURLSessionConfiguration *)v14 set_skipsStackTraceCapture:1];
    }
    uint64_t v21 = *((void *)this + 3);
    if ((v21 & 0x8000000000000000) == 0 || v21 == -1)
    {
      uint64_t TemporaryDirectory = WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)@"BlobRegistryFiles", v20);
      MEMORY[0x19972EAD0](buf, TemporaryDirectory);
      uint64_t v23 = *(void *)buf;
      *(void *)buf = 0;
      unsigned __int8 v24 = (WTF::StringImpl *)*((void *)this + 88);
      *((void *)this + 88) = v23;
      if (v24)
      {
        int v25 = *(_DWORD *)v24 - 2;
        if (*(_DWORD *)v24 != 2) {
          goto LABEL_24;
        }
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
        unsigned __int8 v24 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (!v24) {
          goto LABEL_25;
        }
        int v25 = *(_DWORD *)v24 - 2;
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
        }
        else {
LABEL_24:
        }
          *(_DWORD *)unsigned __int8 v24 = v25;
      }
    }
LABEL_25:
    unint64_t v12 = 0x1E4F1C000uLL;
    if (*((void *)a3 + 22))
    {
      uint64_t v26 = *((void *)this + 3);
      if ((v26 & 0x8000000000000000) == 0 || v26 == -1)
      {
        WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 23, (const WebKit::SandboxExtensionHandle *)v20);
        id v27 = objc_alloc(MEMORY[0x1E4F18E28]);
        BOOL v28 = (void *)MEMORY[0x1E4F1CB10];
        uint64_t v29 = *((void *)a3 + 22) ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
        BOOL v30 = (const void *)objc_msgSend(v27, "initPersistentStoreWithURL:", objc_msgSend(v28, "fileURLWithPath:isDirectory:", v29, 1));
        [(NSURLSessionConfiguration *)v14 set_hstsStorage:v30];
        if (v30) {
          CFRelease(v30);
        }
      }
    }
    if (*((_OWORD *)a3 + 1) != 0)
    {
      uint64_t v31 = *((void *)this + 3);
      if ((v31 & 0x8000000000000000) == 0 || v31 == -1)
      {
        id v32 = objc_alloc(MEMORY[0x1E4F18D90]);
        unint64_t v13 = *((void *)a3 + 2) | *((void *)a3 + 3);
        if (*((_OWORD *)a3 + 1) == 0)
        {
          __break(0xC471u);
          goto LABEL_108;
        }
        double v33 = v32;
        WTF::UUID::toString((uint64_t *)buf, (const WebKit::NetworkSessionCreationParameters *)((char *)a3 + 16));
        if (*(void *)buf) {
          __int16 v34 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          __int16 v34 = &stru_1EEA10550;
        }
        char v35 = (const void *)[v33 _initWithIdentifier:v34 private:0];
        [(NSURLSessionConfiguration *)v14 setURLCredentialStorage:v35];
        if (v35) {
          CFRelease(v35);
        }
        uint64_t v37 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2) {
            WTF::StringImpl::destroy(v37, v36);
          }
          else {
            *(_DWORD *)v37 -= 2;
          }
        }
      }
    }
    if (!*((unsigned char *)a3 + 318)) {
      goto LABEL_49;
    }
    int v38 = *((unsigned __int8 *)a3 + 317);
    if (!*((unsigned char *)a3 + 317)) {
      goto LABEL_48;
    }
    atomic_uint v39 = qword_1EB3581B8;
    if (!os_log_type_enabled((os_log_t)qword_1EB3581B8, OS_LOG_TYPE_DEFAULT)) {
      break;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1985F2000, v39, OS_LOG_TYPE_DEFAULT, "Using experimental network loader.", buf, 2u);
    unint64_t v13 = *((unsigned __int8 *)a3 + 318);
    if (*((unsigned char *)a3 + 318))
    {
      int v38 = *((unsigned __int8 *)a3 + 317);
      goto LABEL_48;
    }
LABEL_108:
    __break(1u);
LABEL_109:
    if (v12 == -1) {
      goto LABEL_12;
    }
    int v67 = *((unsigned __int8 *)a2 + 420);
    uint64_t v14 = (NSURLSessionConfiguration *)[*(id *)(v13 + 3536) ephemeralSessionConfiguration];
    if (v67) {
      BOOL v16 = "silent";
    }
    else {
      BOOL v16 = "sensitive";
    }
    if (v67) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = 3;
    }
  }
  int v38 = 1;
LABEL_48:
  [(NSURLSessionConfiguration *)v14 set_usesNWLoader:v38 != 0];
LABEL_49:
  if (*((unsigned char *)a3 + 319) && (objc_opt_respondsToSelector() & 1) != 0) {
    [(NSURLSessionConfiguration *)v14 set_allowsHSTSWithUntrustedRootCertificate:1];
  }
  [(NSURLSessionConfiguration *)v14 set_preventsAppSSO:1];
  -[NSURLSessionConfiguration set_suppressedAutoAddedHTTPHeaders:](v14, "set_suppressedAutoAddedHTTPHeaders:", [MEMORY[0x1E4F1CAD0] setWithObject:@"Content-Type"]);
  if (!*((unsigned char *)a3 + 40)) {
    [(NSURLSessionConfiguration *)v14 setAllowsCellularAccess:0];
  }
  [(NSURLSessionConfiguration *)v14 setURLCache:0];
  WebKit::NetworkProcess::sourceApplicationAuditData((WebKit::NetworkProcess *)buf, *((void *)a2 + 5));
  unsigned int v41 = *(const void **)buf;
  if (*(void *)buf)
  {
    [(NSURLSessionConfiguration *)v14 set_sourceApplicationAuditTokenData:*(void *)buf];
    CFRelease(v41);
  }
  uint64_t v42 = *((void *)this + 142);
  if (v42 && *(_DWORD *)(v42 + 4))
  {
    [(NSURLSessionConfiguration *)v14 set_sourceApplicationBundleIdentifier:WTF::StringImpl::operator NSString *()];
    [(NSURLSessionConfiguration *)v14 set_sourceApplicationAuditTokenData:0];
  }
  uint64_t v43 = *((void *)this + 143);
  if (v43 && *(_DWORD *)(v43 + 4)) {
    [(NSURLSessionConfiguration *)v14 set_sourceApplicationSecondaryIdentifier:WTF::StringImpl::operator NSString *()];
  }
  uint64_t v44 = *((void *)a3 + 20);
  if (v44 && *(_DWORD *)(v44 + 4))
  {
    WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 21, v40);
    id v45 = objc_alloc(MEMORY[0x1E4F18E40]);
    unint64_t v46 = (void *)MEMORY[0x1E4F1CB10];
    if (*((void *)a3 + 20)) {
      int v47 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      int v47 = &stru_1EEA10550;
    }
    unint64_t v48 = (const void *)objc_msgSend(v45, "initPersistentStoreWithURL:", objc_msgSend((id)objc_msgSend(v46, "fileURLWithPath:isDirectory:", v47, 1), "URLByAppendingPathComponent:isDirectory:", @"AlternativeService.sqlite", 0));
    [(NSURLSessionConfiguration *)v14 set_alternativeServicesStorage:v48];
    if (v48) {
      CFRelease(v48);
    }
    [(NSURLSessionConfiguration *)v14 _alternativeServicesStorage];
    if (objc_opt_respondsToSelector()) {
      objc_msgSend((id)-[NSURLSessionConfiguration _alternativeServicesStorage](v14, "_alternativeServicesStorage"), "setCanSuspendLocked:", 1);
    }
  }
  [(NSURLSessionConfiguration *)v14 set_preventsSystemHTTPProxyAuthentication:*((unsigned __int8 *)a3 + 316)];
  [(NSURLSessionConfiguration *)v14 set_requiresSecureHTTPSProxyConnection:*((unsigned __int8 *)a3 + 306)];
  uint64_t v49 = (const void *)*((void *)a3 + 6);
  char v50 = v49;
  if (!v49)
  {
    WebKit::proxyDictionary((uint64_t)&v69, (const WebKit::NetworkSessionCreationParameters *)((char *)a3 + 80), (const WebKit::NetworkSessionCreationParameters *)((char *)a3 + 120));
    char v50 = v69;
  }
  [(NSURLSessionConfiguration *)v14 setConnectionProxyDictionary:v50];
  if (!v49 && v50) {
    CFRelease(v50);
  }
  uint64_t v51 = *((void *)this + 149);
  if (v51 && *(_DWORD *)(v51 + 4)) {
    [(NSURLSessionConfiguration *)v14 set_CTDataConnectionServiceType:WTF::StringImpl::operator NSString *()];
  }
  *(void *)buf = "LegacyCustomProtocolManager";
  *(void *)&buf[8] = 28;
  uint64_t v52 = (WebKit::LegacyCustomProtocolManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)a2 + 26, (WTF::ASCIILiteralHash *)buf);
  WebKit::LegacyCustomProtocolManager::registerProtocolClass(v52, v14);
  [(NSURLSessionConfiguration *)v14 set_timingDataOptions:1];
  if (*((unsigned char *)a3 + 304)) {
    [(NSURLSessionConfiguration *)v14 set_socketStreamProperties:&unk_1EEA531D8];
  }
  *(void *)buf = *(void *)a3;
  char v53 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)a2 + 29, buf);
  if (!v53)
  {
    __break(0xC471u);
    JUMPOUT(0x198676EC8);
  }
  int v54 = v53;
  WebCore::NetworkStorageSession::cookieStorage((uint64_t *)buf, v53);
  char v55 = *(const void **)buf;
  *(void *)buf = 0;
  if (v55)
  {
    CFRelease(v55);
    uint64_t v56 = (void *)[objc_alloc(MEMORY[0x1E4F18D30]) _initWithCFHTTPCookieStorage:v55];
    [(NSURLSessionConfiguration *)v14 setHTTPCookieStorage:v56];
  }
  else
  {
    WebCore::NetworkStorageSession::nsCookieStorage((uint64_t *)buf, v54);
    uint64_t v56 = *(void **)buf;
  }
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v56, "set_overrideSessionCookieAcceptPolicy:", 1);
  }
  WebKit::NetworkSessionCocoa::initializeNSURLSessionsInSet((WebKit **)this, *((WebKit::SessionSet **)this + 138), v14);
  *((_WORD *)this + 592) = *((_WORD *)a3 + 96);
  uint64_t v57 = *((void *)this + 9);
  if (v57)
  {
    uint64_t v58 = *((void *)a3 + 71);
    if (!v58 || !*(_DWORD *)(v58 - 12)) {
      goto LABEL_94;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)buf, (uint64_t *)a3 + 71);
    uint64_t v59 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v59 = &unk_1EE9BC4D8;
    uint64_t v68 = v59;
    WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(v57, (uint64_t *)buf, (const WTF::StringImpl *)&v68);
    int v61 = v68;
    uint64_t v68 = 0;
    if (v61) {
      (*(void (**)(void *))(*v61 + 8))(v61);
    }
    if (*(void *)buf) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v60);
    }
    uint64_t v57 = *((void *)this + 9);
    if (v57)
    {
LABEL_94:
      uint64_t v62 = *((void *)a3 + 72);
      if (v62 && *(_DWORD *)(v62 - 12))
      {
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)buf, (uint64_t *)a3 + 72);
        uint64_t v63 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v63 = &unk_1EE9BC500;
        uint64_t v68 = v63;
        WebKit::WebResourceLoadStatisticsStore::setManagedDomains(v57, (uint64_t *)buf, (const WTF::StringImpl *)&v68);
        uint64_t v65 = v68;
        uint64_t v68 = 0;
        if (v65) {
          (*(void (**)(void *))(*v65 + 8))(v65);
        }
        if (*(void *)buf) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v64);
        }
      }
    }
  }
  if (*((unsigned char *)a3 + 528)) {
    WebKit::NetworkSessionCocoa::setProxyConfigData((uint64_t)this, (uint64_t *)a3 + 64);
  }
  if (v56) {
    CFRelease(v56);
  }
  return this;
}

void sub_198676F88(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  }
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v18 = *((void *)v13 + 152);
  if (v18) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v18, a2);
  }
  if (*v16) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(*v16, a2);
  }
  uint64_t v19 = (WTF::StringImpl *)*((void *)v13 + 149);
  *((void *)v13 + 149) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, a2);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = (const void *)*((void *)v13 + 147);
  *((void *)v13 + 147) = 0;
  if (v20) {
    CFRelease(v20);
  }
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, a2);
  uint64_t v22 = (const void *)*((void *)v13 + 144);
  *((void *)v13 + 144) = 0;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = (WTF::StringImpl *)*((void *)v13 + 143);
  *((void *)v13 + 143) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v21);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  unsigned __int8 v24 = (WTF::StringImpl *)*((void *)v13 + 142);
  *((void *)v13 + 142) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v21);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  int v25 = (WTF::StringImpl *)*((void *)v13 + 141);
  *((void *)v13 + 141) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v21);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = *((void *)v13 + 140);
  if (v26) {
    WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::deallocateTable(v26, v21);
  }
  if (*a10) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(*a10, v21);
  }
  id v27 = (WebKit::SessionSet *)*((void *)v13 + 138);
  *((void *)v13 + 138) = 0;
  if (v27) {
    WTF::RefCounted<WebKit::SessionSet>::deref(v27, v21);
  }
  WebKit::NetworkSession::~NetworkSession(v13);
  _Unwind_Resume(a1);
}

CFDataRef WebKit::NetworkProcess::sourceApplicationAuditData(WebKit::NetworkProcess *this, uint64_t a2)
{
  if (a2 && *(void *)(a2 + 352))
  {
    xpc_connection_get_audit_token();
    bytes[32] = 1;
    CFDataRef result = CFDataCreate(0, bytes, 32);
  }
  else
  {
    CFDataRef result = 0;
  }
  *(void *)this = result;
  return result;
}

const char *WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(uint64_t *a1, WTF::ASCIILiteralHash *this)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  uint64_t v5 = WTF::ASCIILiteralHash::hash(this, this) & v4;
  CFDataRef result = *(const char **)(v2 + 24 * v5);
  if (result)
  {
    int v7 = *(const char **)this;
    int v8 = 1;
    while (result == (const char *)-1 || !v7 || strcmp(result, v7))
    {
      uint64_t v5 = (v5 + v8) & v4;
      CFDataRef result = *(const char **)(v2 + 24 * v5);
      ++v8;
      if (!result) {
        return result;
      }
    }
    return *(const char **)(v2 + 24 * v5 + 16);
  }
  return result;
}

uint64_t WebKit::proxyDictionary(uint64_t this, const WTF::URL *a2, const WTF::URL *a3)
{
  uint64_t v5 = (void *)this;
  if (*((unsigned char *)a2 + 8) & 1) != 0 || (*((unsigned char *)a3 + 8))
  {
    this = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v6 = (void *)this;
    if (*((unsigned char *)a2 + 8))
    {
      uint64_t v13 = WTF::URL::host(a2);
      uint64_t v14 = v10;
      WTF::StringView::createNSString((uint64_t *)&cf, (WTF::StringView *)&v13);
      [v6 setObject:cf forKey:*MEMORY[0x1E4F190C0]];
      CFTypeRef v11 = cf;
      CFTypeRef cf = 0;
      if (v11) {
        CFRelease(v11);
      }
      this = WTF::URL::port(a2);
      if ((this & 0xFF0000) != 0)
      {
        uint64_t v12 = [NSNumber numberWithUnsignedShort:(unsigned __int16)this];
        this = [v6 setObject:v12 forKey:*MEMORY[0x1E4F190C8]];
      }
    }
    if (*((unsigned char *)a3 + 8))
    {
      uint64_t v13 = WTF::URL::host(a3);
      uint64_t v14 = v7;
      WTF::StringView::createNSString((uint64_t *)&cf, (WTF::StringView *)&v13);
      [v6 setObject:cf forKey:*MEMORY[0x1E4F190D8]];
      CFTypeRef v8 = cf;
      CFTypeRef cf = 0;
      if (v8) {
        CFRelease(v8);
      }
      this = WTF::URL::port(a3);
      if ((this & 0xFF0000) != 0)
      {
        uint64_t v9 = [NSNumber numberWithUnsignedShort:(unsigned __int16)this];
        this = [v6 setObject:v9 forKey:*MEMORY[0x1E4F190E0]];
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  *uint64_t v5 = v6;
  return this;
}

void sub_198677438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LegacyCustomProtocolManager::registerProtocolClass(WebKit::LegacyCustomProtocolManager *this, NSURLSessionConfiguration *a2)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = objc_opt_class();
  return -[NSURLSessionConfiguration setProtocolClasses:](a2, "setProtocolClasses:", [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1]);
}

void WebKit::NetworkSessionCocoa::initializeNSURLSessionsInSet(WebKit **this, WebKit::SessionSet *a2, NSURLSessionConfiguration *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  WebKit::SessionWrapper::initialize((uint64_t)a2 + 32, (WebKit::AuxiliaryProcess *)a3, this, 1);
  if ([(NSHTTPCookieStorage *)[(NSURLSessionConfiguration *)a3 HTTPCookieStorage] cookieAcceptPolicy] == NSHTTPCookieAcceptPolicyNever)
  {
    uint64_t v5 = qword_1EB3581B8;
    if (os_log_type_enabled((os_log_t)qword_1EB3581B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = this[3];
      int v7 = 134217984;
      CFTypeRef v8 = v6;
      _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "Creating network session with ID %llu that will not accept cookies.", (uint8_t *)&v7, 0xCu);
    }
  }
}

id WebKit::supportedRichTextPasteboardTypesForPasteConfiguration(WebKit *this)
{
  if (byte_1E93CF9CB == 1) {
    return (id)qword_1E93CF9D8;
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  objc_msgSend(v2, "addObject:", objc_msgSend((id)*MEMORY[0x1E4F44538], "identifier"));
  objc_msgSend(v2, "addObjectsFromArray:", WebKit::supportedPlainTextPasteboardTypes((WebKit *)objc_msgSend(v2, "addObjectsFromArray:", *MEMORY[0x1E4F43C10])));
  id result = v2;
  qword_1E93CF9D8 = (uint64_t)v2;
  byte_1E93CF9CB = 1;
  return result;
}

void sub_198677708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

id WebKit::supportedPlainTextPasteboardTypes(WebKit *this)
{
  if (byte_1E93CF9CD == 1) {
    return (id)qword_1E93CFA10;
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  objc_msgSend(v2, "addObject:", objc_msgSend(NSString, "stringWithUTF8String:", WebCore::PasteboardCustomData::cocoaType((WebCore::PasteboardCustomData *)v2)));
  objc_msgSend(v2, "addObject:", objc_msgSend((id)*MEMORY[0x1E4F444F8], "identifier"));
  [v2 addObjectsFromArray:*MEMORY[0x1E4F43C18]];
  id result = v2;
  qword_1E93CFA10 = (uint64_t)v2;
  byte_1E93CF9CD = 1;
  return result;
}

void sub_1986777E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986778D8(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198677B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::~pair((uint64_t)&a9);
  uint64_t v14 = a12;
  a12 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198677B68()
{
  if (v0) {
    CFRelease(v0);
  }
  JUMPOUT(0x198677B3CLL);
}

void sub_198677B7C()
{
}

uint64_t std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::~pair(uint64_t a1)
{
  id v2 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = v5;
    uint64_t v10 = (WTF::StringImpl *)v4;
    do
    {
      if (*(void *)v10 != -1)
      {
        if (*(void *)v10) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v10);
        }
        WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>::~KeyValuePair((uint64_t)v10, v8);
      }
      uint64_t v10 = (WTF::StringImpl *)((char *)v10 + 24);
      --v9;
    }
    while (v9);
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    CFRelease(v4);
  }
  unsigned int v5 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)a2;
  if (a1) {
    unsigned int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    unsigned int v5 = 0;
  }
  unsigned int v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100) {
    int v7 = v6 >> 8;
  }
  else {
    int v7 = WTF::StringImpl::hashSlowCase(v4);
  }
  int v8 = 0;
  do
  {
    unsigned int v9 = v7 & v5;
    uint64_t v10 = (WTF::StringImpl **)(a1 + 24 * (v7 & v5));
    int v7 = ++v8 + (v7 & v5);
  }
  while (*v10);
  uint64_t v11 = a1 + 24 * v9;
  uint64_t v14 = *(const void **)(v11 + 16);
  uint64_t v13 = (void *)(v11 + 16);
  uint64_t v12 = v14;
  uint64_t v15 = (const void **)(v13 - 1);
  *uint64_t v13 = 0;
  if (v14) {
    CFRelease(v12);
  }
  BOOL v16 = *v15;
  const void *v15 = 0;
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *v10;
  *uint64_t v10 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  *uint64_t v10 = v18;
  uint64_t v19 = (const void *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  const void *v15 = v19;
  uint64_t v20 = *((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  *uint64_t v13 = v20;
  return v10;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v3);
}

void sub_19867814C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,objc_class  {objcproto24WKWebViewContentProvider}*>,WTF::KeyValuePairKeyExtractor<objc_class  {objcproto24WKWebViewContentProvider}*>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,objc_class  {objcproto24WKWebViewContentProvider},WTF::KeyValuePairKeyExtractor<objc_class  {objcproto24WKWebViewContentProvider}*>,WTF::HashTraits<WTF::String>,WTF::HashMap<objc_class  {objcproto24WKWebViewContentProvider}>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      unsigned int v9 = (WTF::ASCIICaseInsensitiveHash **)(v2 + 16 * i);
      uint64_t v10 = *v9;
      if (*v9 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            unsigned int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            unsigned int v12 = 0;
          }
          int v13 = WTF::ASCIICaseInsensitiveHash::hash(v10, v7);
          int v14 = 0;
          do
          {
            uint64_t v15 = v13 & v12;
            int v13 = ++v14 + v15;
          }
          while (*(void *)(v11 + 16 * v15));
          BOOL v16 = (void *)(v11 + 16 * v15);
          void *v16 = 0;
          long long v17 = *(_OWORD *)v9;
          *unsigned int v9 = 0;
          *(_OWORD *)BOOL v16 = v17;
          uint64_t v18 = *v9;
          *unsigned int v9 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v7);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        else
        {
          *unsigned int v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

const void **WTF::RetainPtr<NSURLSession>::operator=(const void **a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v4 = *a1;
  *a1 = cf;
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

uint64_t WebKit::NetworkProcess::getResourceLoadStatisticsDataSummary(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v9[0] = a2;
  uint64_t v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v9);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 72);
    if (v5) {
      return WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(v5, a3);
    }
  }
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v9);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v8);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::aggregatedThirdPartyData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v4 = &unk_1EE9C8DE0;
  v4[1] = a1;
  void v4[2] = v3;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t result = 172;
    __break(0xC471u);
  }
  else
  {
    uint64_t v5 = v4;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)a1);
    unsigned int v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unsigned int v6 = &unk_1EE9C7620;
    v6[1] = a1;
    v6[2] = v5;
    int v8 = v6;
    WTF::SuspendableWorkQueue::dispatch();
    uint64_t result = (uint64_t)v8;
    if (v8) {
      return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setInspectionForServiceWorkersAllowed(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v5);
  if (result && *(unsigned __int8 *)(result + 792) != a3)
  {
    *(unsigned char *)(result + 792) = a3;
    uint64_t result = *(void *)(result + 776);
    if (result) {
      return WebCore::SWServer::setInspectable();
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ViewUpdateDispatcher::visibleContentRectUpdate(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::VisibleContentRectUpdateInfo const&)::$_0,void>::call(uint64_t result, void *a2)
{
  char v2 = 0;
  uint64_t v3 = *(void *)(result + 8);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 24), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](v3 + 24);
  }
  uint64_t v5 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 24), (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1)
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
    if (v5) {
      goto LABEL_5;
    }
LABEL_14:
    int v8 = 0;
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  if (!v5) {
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v6 = *(unsigned int *)(v5 - 4);
  uint64_t v7 = (uint64_t *)(v5 + 16 * v6);
  if (*(_DWORD *)(v5 - 12))
  {
    int v8 = (uint64_t *)v5;
    if (v6)
    {
      uint64_t v9 = 16 * v6;
      int v8 = (uint64_t *)v5;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        v9 -= 16;
        if (!v9)
        {
          int v8 = v7;
          goto LABEL_11;
        }
      }
    }
    goto LABEL_11;
  }
  int v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_15:
  uint64_t v7 = (uint64_t *)(v5 + 16 * v6);
  if (v5)
  {
LABEL_11:
    uint64_t v10 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    goto LABEL_17;
  }
  uint64_t v10 = 0;
LABEL_17:
  while (v8 != v10)
  {
    {
      unsigned int v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v12);
    }
    uint64_t v13 = *v8;
    uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v13);
    if (result) {
      uint64_t result = WebKit::WebPage::updateVisibleContentRects(result, v8[1], *(double *)(v8[1] + 176));
    }
    uint64_t v11 = v8 + 2;
    int v8 = v7;
    if (v11 != v7)
    {
      int v8 = v11;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          int v8 = v7;
          break;
        }
      }
    }
  }
  if (v5)
  {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::UniqueRef<WebKit::ViewUpdateDispatcher::UpdateData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(v5, a2);
  }
  return result;
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::updateRendering(void)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t result = (WTF::MonotonicTime *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v10);
  if (result)
  {
    uint64_t v3 = *((void *)result + 9);
    if (v3)
    {
      if (!*(unsigned char *)(v3 + 24))
      {
        char v4 = *(unsigned char *)(a1 + 16);
        uint64_t v5 = *(void *)(*(void *)(v3 + 40) + 8);
        if (v5) {
          uint64_t v6 = (double *)(v5 - 16);
        }
        else {
          uint64_t v6 = 0;
        }
        WTF::MonotonicTime::now(result);
        WebKit::WebPage::didFlushLayerTreeAtTime(v6, v4, v7);
        (*(void (**)(uint64_t))(*(void *)v3 + 296))(v3);
        int v8 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 304);
        return (WTF::MonotonicTime *)v8(v3);
      }
    }
  }
  return result;
}

uint64_t WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
    unint64_t v4 = *a2 + ~(*a2 << 32);
    unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    if (v8 == *a2) {
      return *(void *)(v2 + 16 * v7 + 8);
    }
    int v10 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v10) & v3;
      uint64_t v8 = *(void *)(v2 + 16 * v7);
      ++v10;
      if (v8 == *a2) {
        return *(void *)(v2 + 16 * v7 + 8);
      }
    }
  }
  return 0;
}

double *WebKit::WebPage::didFlushLayerTreeAtTime(double *result, char a2, double a3)
{
  double v3 = result[161];
  if (v3 == 0.0)
  {
    if (a2) {
      return result;
    }
  }
  else
  {
    result[161] = 0.0;
    result[162] = (a3 - v3) * 0.2 + result[162] * 0.8;
    if (a2) {
      return result;
    }
  }
  uint64_t result = (double *)*((void *)result + 300);
  if (result) {
    return (double *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(result);
  }
  return result;
}

void WebKit::DrawingArea::didCompleteRenderingUpdateDisplay(WebKit::DrawingArea *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (!*(unsigned char *)(v2 + 186)) {
    WebCore::Page::didCompleteRenderingUpdateDisplay(*(WebCore::Page **)(v2 + 48));
  }
  if (v1)
  {
    double v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

uint64_t WebKit::WebPage::updateVisibleContentRects(uint64_t result, uint64_t a2, double a3)
{
  unint64_t v3 = *(void *)(a2 + 152);
  BOOL v4 = v3 < *(void *)(*(void *)(result + 88) + 96) && *(unsigned char *)(a2 + 169) == 0;
  if (v4) {
    return result;
  }
  uint64_t v7 = result;
  int v8 = 1;
  *(unsigned char *)(result + 1280) = 1;
  int v9 = *(unsigned __int8 *)(a2 + 168);
  int v10 = *(unsigned char *)(a2 + 168) == 0;
  *(unsigned char *)(result + 1285) = v10;
  float v11 = 0.0;
  if (*(void *)(result + 1568) <= v3)
  {
    float v12 = *(double *)(a2 + 160);
    float v13 = *(float *)(*(void *)(result + 48) + 356);
    if (v9 && vabds_f32(v12, v13) < 0.005) {
      float v12 = *(float *)(*(void *)(result + 48) + 356);
    }
    if (*(unsigned char *)(result + 1169))
    {
      WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor(result + 952);
      double v15 = v14 * 5.0;
    }
    else
    {
      double v15 = *(double *)(result + 992);
    }
    float v16 = v15;
    long long v17 = (WebKit *)WebCore::ViewportConfiguration::minimumScale((WebCore::ViewportConfiguration *)(v7 + 952));
    float v19 = v18;
    if (v12 > v19) {
      float v19 = v12;
    }
    float v20 = v19 >= v16 ? v16 : v19;
    BOOL v21 = WebKit::scalesAreEssentiallyEqual(v17, v13, v20);
    int v10 = *(unsigned __int8 *)(v7 + 1285);
    if (!v21)
    {
      if (*(unsigned char *)(v7 + 1285))
      {
        int v8 = 0;
        float v11 = v20;
      }
      else
      {
        uint64_t result = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v21);
        int v37 = atomic_load((unsigned __int8 *)(result + 4));
        if (v37 == 2 || *(unsigned char *)(result + 7)) {
          return result;
        }
        int v8 = 0;
        float v11 = v20;
        if (!*(unsigned char *)(v7 + 1285)) {
          goto LABEL_19;
        }
      }
LABEL_23:
      *(unsigned char *)(v7 + 1284) = 1;
      goto LABEL_24;
    }
  }
  if (v10) {
    goto LABEL_23;
  }
LABEL_19:
  if (*(double *)(v7 + 1288) == 0.0) {
    *(double *)(v7 + 1288) = a3;
  }
LABEL_24:
  uint64_t v22 = *(void *)(v7 + 48);
  float v23 = *(float *)(v22 + 356);
  if (v8) {
    float v24 = *(float *)(v22 + 356);
  }
  else {
    float v24 = v11;
  }
  float32x2_t v25 = *(float32x2_t *)a2;
  float32x2_t v26 = *(float32x2_t *)(a2 + 8);
  double v27 = *(double *)(a2 + 160);
  if (v27 != v24)
  {
    float64x2_t v28 = vcvtq_f64_f32(v26);
    float32x2_t v29 = vmul_f32(vcvt_f32_f64(vsubq_f64(vdivq_f64(vmulq_n_f64(v28, v27), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v24), 0)), v28)), (float32x2_t)0x3F0000003F000000);
    float32x2_t v25 = vsub_f32(v25, v29);
    float32x2_t v26 = vadd_f32(v29, vadd_f32(v26, v29));
  }
  v94[0] = v25;
  v94[1] = v26;
  (*(void (**)(void, void *))(**(void **)(v7 + 72) + 168))(*(void *)(v7 + 72), v94);
  uint64_t result = *(void *)(v7 + 48);
  uint64_t v30 = *(void *)(result + 160);
  if (!v30 || *(unsigned char *)(v30 + 144)) {
    return result;
  }
  uint64_t v31 = *(WebCore::LocalFrameView **)(v30 + 288);
  id v32 = (void *)WebCore::Page::scrollingCoordinator((WebCore::Page *)result);
  if (v32)
  {
    __int16 v34 = v32;
    if (((*(uint64_t (**)(void *))(*v32 + 32))(v32) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198679720);
    }
    id v32 = (void *)WebCore::LocalFrameView::scrollingNodeID(v31);
    if (v32)
    {
      char v35 = v34 + 20;
      if ((*(unsigned char *)(a2 + 168) & 4) != 0)
      {
        *(void *)&long long v91 = v32;
        *((void *)&v91 + 1) = v33;
        id v32 = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add(v35, (uint64_t *)&v91, (uint64_t)v81);
        goto LABEL_47;
      }
      *(void *)unint64_t v81 = v32;
      *(void *)&v81[8] = v33;
      id v32 = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v35, v81);
      double v33 = v32;
      if (*v35)
      {
        uint64_t v36 = *v35 + 16 * *(unsigned int *)(*v35 - 4);
        if ((void *)v36 == v32) {
          goto LABEL_47;
        }
      }
      else
      {
        if (!v32) {
          goto LABEL_47;
        }
        uint64_t v36 = 0;
      }
      if ((void *)v36 != v32) {
        id v32 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(v35, v32);
      }
    }
  }
LABEL_47:
  float v38 = roundf(*(float *)(a2 + 16));
  if (v38 >= 2147500000.0)
  {
    uint64_t v39 = 0x7FFFFFFFLL;
  }
  else
  {
    uint64_t v39 = 0x80000000;
    if (v38 > -2147500000.0) {
      uint64_t v39 = (int)v38;
    }
  }
  float v40 = roundf(*(float *)(a2 + 20));
  if (v40 >= 2147500000.0)
  {
    unint64_t v41 = 0x7FFFFFFF00000000;
  }
  else if (v40 <= -2147500000.0)
  {
    unint64_t v41 = 0x8000000000000000;
  }
  else
  {
    unint64_t v41 = (unint64_t)(int)v40 << 32;
  }
  IntPoint v93 = (IntPoint)(v41 | v39);
  if (!*(unsigned char *)(v7 + 1664)
    || (BOOL v42 = WebKit::scalesAreEssentiallyEqual((WebKit *)v32, v24, *(float *)(*(void *)(v7 + 48) + 356)))
    || (float v43 = *(double *)(v7 + 1656), !WebKit::scalesAreEssentiallyEqual((WebKit *)v42, v43, v24))
    || *(void *)(v7 + 1648) < *(void *)(a2 + 152))
  {
    if (v8)
    {
      if (*(unsigned char *)(v7 + 1285)) {
        WebCore::Page::setPageScaleFactor(*(WebCore::Page **)(v7 + 48), v23, &v93);
      }
    }
    else
    {
      *(unsigned char *)(v7 + 1282) = 1;
      *(unsigned char *)(v7 + 1284) = *(unsigned char *)(v7 + 1285);
      uint64_t v44 = *(void *)(v7 + 1488);
      if (v44)
      {
        *(void *)(v7 + 1488) = 0;
        WTF::fastFree((WTF *)(v44 - 16), v33);
      }
      WebCore::Page::setPageScaleFactor(*(WebCore::Page **)(v7 + 48), v11, &v93);
      uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 32) + 56))(v7 + 32);
      unint64_t v46 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v46 = 2023;
      *((void *)v46 + 1) = v45;
      *((void *)v46 + 66) = (char *)v46 + 16;
      *((void *)v46 + 67) = 512;
      *((void *)v46 + 68) = 0;
      *((void *)v46 + 70) = 0;
      *((void *)v46 + 69) = 0;
      IPC::Encoder::encodeHeader(v46);
      *(void *)unint64_t v81 = v46;
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v46, v11);
      (*(void (**)(uint64_t, unsigned char *, void))(*(void *)(v7 + 32) + 32))(v7 + 32, v81, 0);
      unint64_t v48 = *(IPC::Encoder **)v81;
      *(void *)unint64_t v81 = 0;
      if (v48)
      {
        IPC::Encoder::~Encoder(v48, v47);
        WTF::fastFree(v70, v71);
      }
    }
  }
  if (v93 != WebCore::ScrollableArea::visibleContentRect())
  {
    uint64_t v50 = *(void *)(v7 + 1488);
    if (v50)
    {
      *(void *)(v7 + 1488) = 0;
      WTF::fastFree((WTF *)(v50 - 16), v49);
    }
  }
  if (WebCore::ViewportConfiguration::setCanIgnoreScalingConstraints((WebCore::ViewportConfiguration *)(v7 + 952))) {
    WebKit::WebPage::viewportConfigurationChanged(v7, 0);
  }
  uint64_t v51 = *(void *)(v30 + 296);
  if (v51)
  {
    *(_DWORD *)(v51 + 28) += 2;
    uint64_t v52 = *(WebCore::Quirks **)(v51 + 720);
    if (!v52) {
      uint64_t v52 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v51);
    }
    if (WebCore::Quirks::shouldLayOutAtMinimumWindowWidthWhenIgnoringScalingConstraints(v52)) {
      int v53 = 500;
    }
    else {
      int v53 = 0;
    }
    if (*(_DWORD *)(v51 + 28) == 2)
    {
      if ((*(_WORD *)(v51 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v51);
      }
    }
    else
    {
      *(_DWORD *)(v51 + 28) -= 2;
    }
  }
  else
  {
    int v53 = 0;
  }
  if (WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthWhenIgnoringScalingConstraints((WebCore::ViewportConfiguration *)(v7 + 952), (double)v53))WebKit::WebPage::viewportConfigurationChanged(v7, 0); {
  *(void *)unint64_t v81 = *(void *)(a2 + 24);
  }
  WebCore::ScrollView::setUnobscuredContentSize(v31, (const WebCore::FloatSize *)v81);
  *(_OWORD *)(*(void *)(v7 + 48) + 392) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(*(void *)(v7 + 48) + 376) = *(_OWORD *)(a2 + 96);
  WebCore::Page::setUnobscuredSafeAreaInsets();
  *(unsigned char *)(*(void *)(v7 + 48) + 448) = *(unsigned char *)(a2 + 171);
  long long v91 = *(_OWORD *)(a2 + 128);
  uint64_t v92 = *(void *)(a2 + 144);
  double v54 = *(double *)(a2 + 160);
  char v55 = (WebKit *)WebCore::ViewportConfiguration::minimumScale((WebCore::ViewportConfiguration *)(v7 + 952));
  double v57 = v56;
  if (*(unsigned char *)(v7 + 1169))
  {
    char v55 = (WebKit *)WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor(v7 + 952);
    double v59 = v58 * 5.0;
  }
  else
  {
    double v59 = *(double *)(v7 + 992);
  }
  if (*((float *)&v91 + 2) != 0.0) {
    *(void *)&long long v91 = 0;
  }
  if (v54 <= v57
    || v54 >= v59
    || (float v60 = v54, v61 = v57, v62 = WebKit::scalesAreEssentiallyEqual(v55, v60, v61))
    || (float v63 = v59, WebKit::scalesAreEssentiallyEqual((WebKit *)v62, v60, v63)))
  {
    DWORD2(v91) = 0;
  }
  WebCore::LocalFrameView::setScrollVelocity();
  if (*(float *)(a2 + 16) == *(float *)(a2 + 48)
    && *(float *)(a2 + 20) == *(float *)(a2 + 52)
    && *(float *)(a2 + 24) == *(float *)(a2 + 56)
    && *(float *)(a2 + 28) == *(float *)(a2 + 60))
  {
    if (*(unsigned char *)(v7 + 1285))
    {
      char v87 = 0;
      char v88 = 0;
      WebCore::LocalFrameView::setVisualViewportOverrideRect();
      int v64 = 1;
    }
    else
    {
      int v64 = 0;
    }
  }
  else
  {
    WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v81, (const FloatRect *)(a2 + 48));
    long long v89 = *(_OWORD *)v81;
    int v64 = 1;
    char v90 = 1;
    WebCore::LocalFrameView::setVisualViewportOverrideRect();
  }
  char v65 = *(unsigned char *)(a2 + 168);
  int v66 = (_OWORD *)(a2 + 80);
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v81, (const FloatRect *)(a2 + 80));
  long long v85 = *(_OWORD *)v81;
  char v86 = 1;
  WebCore::LocalFrameView::setLayoutViewportOverrideRect();
  if (!*(unsigned char *)(v7 + 1285)) {
    goto LABEL_110;
  }
  int v67 = *(unsigned __int8 **)(*(void *)(v30 + 296) + 3096);
  int v68 = v67[153];
  if (!v67[153]) {
    goto LABEL_110;
  }
  v84[0] = 0;
  if (v68 == 1)
  {
    WebCore::FrameSelection::absoluteCaretBounds((WebCore::FrameSelection *)v67, v84);
  }
  else
  {
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v81, v84);
    uint64_t v69 = *(void *)v81;
    *(void *)unint64_t v81 = 0;
    if (v69)
    {
      if (*(_DWORD *)(v69 + 28) == 2)
      {
        if ((*(_WORD *)(v69 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v69);
        }
      }
      else
      {
        *(_DWORD *)(v69 + 28) -= 2;
      }
    }
    if (v84[0]) {
      goto LABEL_109;
    }
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v81, v84);
    uint64_t v72 = *(void *)v81;
    *(void *)unint64_t v81 = 0;
    if (v72)
    {
      if (*(_DWORD *)(v72 + 28) == 2)
      {
        if ((*(_WORD *)(v72 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v72);
        }
      }
      else
      {
        *(_DWORD *)(v72 + 28) -= 2;
      }
    }
  }
  if (v84[0])
  {
LABEL_109:
    *(unsigned char *)(*(void *)(*(void *)(WebCore::LocalFrameView::frame(v31) + 296) + 3096) + 24) = 1;
    WebKit::WebPage::scheduleFullEditorStateUpdate((unsigned char *)v7);
  }
LABEL_110:
  if (v64) {
    WebCore::LocalFrameView::layoutOrVisualViewportChanged(v31);
  }
  if ((v65 & 8) != 0)
  {
    uint64_t result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v7 + 48));
    if (!result) {
      return result;
    }
    uint64_t v78 = result;
    unsigned __int8 v80 = 1;
    uint64_t v79 = 2;
    goto LABEL_125;
  }
  float v73 = ceilf(*(float *)(a2 + 72));
  if (v73 >= 2147500000.0)
  {
    uint64_t v74 = 0x7FFFFFFFLL;
  }
  else if (v73 <= -2147500000.0)
  {
    uint64_t v74 = 0x80000000;
  }
  else
  {
    uint64_t v74 = (int)v73;
  }
  float v75 = ceilf(*(float *)(a2 + 76));
  if (v75 >= 2147500000.0)
  {
    unint64_t v76 = 0x7FFFFFFF00000000;
  }
  else if (v75 <= -2147500000.0)
  {
    unint64_t v76 = 0x8000000000000000;
  }
  else
  {
    unint64_t v76 = (unint64_t)(int)v75 << 32;
  }
  IntSize v77 = (IntSize)(v76 | v74);
  WebCore::LocalFrameView::setCustomSizeForResizeEvent(v31, v77);
  uint64_t result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v7 + 48));
  if (result)
  {
    uint64_t v78 = result;
    BOOL v4 = *(unsigned char *)(v7 + 1285) == 0;
    uint64_t v79 = *(unsigned char *)(v7 + 1285) == 0;
    if (v4) {
      unsigned __int8 v80 = 1;
    }
    else {
      unsigned __int8 v80 = 2;
    }
LABEL_125:
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v84, &v93);
    *(_OWORD *)&v81[4] = *v66;
    char v82 = 1;
    int v83 = 1;
    return (*(uint64_t (**)(uint64_t, WebCore::LocalFrameView *, BOOL *, unsigned char *, void, uint64_t, void))(*(void *)v78 + 72))(v78, v31, v84, v81, 0, v79, v80);
  }
  return result;
}

void sub_19867977C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 7) == 2)
    {
      if ((*((_WORD *)a10 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(a10);
      }
    }
    else
    {
      *((_DWORD *)a10 + 7) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::scalesAreEssentiallyEqual(WebKit *this, float a2, float a3)
{
  if (a2 == a3) {
    return 1;
  }
  float v4 = vabds_f32(a2, a3);
  float v5 = fabsf(a2);
  if (v5 < 1.0 && (float)(v5 * 3.4028e38) < v4) {
    return 0;
  }
  BOOL v7 = (float)(v5 * 1.1755e-38) <= v4 || v5 <= 1.0;
  if (v7 && (float)(v4 / v5) > 0.01) {
    return 0;
  }
  float v8 = fabsf(a3);
  if (v8 < 1.0 && (float)(v8 * 3.4028e38) < v4) {
    return 0;
  }
  if (v8 > 1.0 && (float)(v8 * 1.1755e-38) > v4) {
    return 1;
  }
  return (float)(v4 / v8) <= 0.01;
}

uint64_t WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor(uint64_t this)
{
  uint64_t v1 = (WebCore::ViewportConfiguration *)this;
  if (*(float *)(this + 128) != 0.0)
  {
    double v2 = *(double *)(this + 192);
    this = WebCore::ViewportConfiguration::shouldIgnoreMinimumEffectiveDeviceWidthForShrinkToFit((WebCore::ViewportConfiguration *)this);
    if ((this & 1) == 0)
    {
      uint64_t v3 = 208;
      if (!*((unsigned char *)v1 + 216)) {
        uint64_t v3 = 200;
      }
      if (v2 < *(double *)((char *)v1 + v3)) {
        double v2 = *(double *)((char *)v1 + v3);
      }
    }
    if (v2 != 0.0) {
      return WebCore::ViewportConfiguration::shouldIgnoreMinimumEffectiveDeviceWidthForShrinkToFit(v1);
    }
  }
  return this;
}

uint64_t WebCore::ViewportConfiguration::shouldIgnoreMinimumEffectiveDeviceWidthForShrinkToFit(WebCore::ViewportConfiguration *this)
{
  if (*((unsigned char *)this + 216))
  {
    if (*((double *)this + 26) == 0.0) {
      return 1;
    }
  }
  else
  {
    v9[0] = 0;
    __asm { FMOV            V0.4S, #-1.0 }
    long long v10 = _Q0;
    long long v11 = _Q0;
    __int16 v12 = 0;
    BOOL v8 = WebCore::ViewportArguments::operator==((uint64_t)this + 136, (uint64_t)v9);
    uint64_t result = 0;
    if (v8) {
      return result;
    }
    if ((*((float *)this + 37) == 1.0 || *((float *)this + 35) == -2.0) && !*((unsigned char *)this + 218)) {
      return 1;
    }
  }
  return 0;
}

BOOL WebCore::ViewportArguments::operator==(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36)
      && *(unsigned __int8 *)(a1 + 37) == *(unsigned __int8 *)(a2 + 37);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v17 = -1640531527;
  __int16 v18 = 0;
  char v19 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v17, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v17);
  uint64_t v7 = a2[1];
  uint64_t v8 = v6 & v5;
  int v9 = (uint64_t *)(v2 + 16 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (*v9 == *a2 && v11 == v7) {
    return v2 + 16 * v8;
  }
  int v13 = 1;
  while (v10 | v11)
  {
    uint64_t v8 = (v8 + v13) & v5;
    double v14 = (uint64_t *)(v2 + 16 * v8);
    uint64_t v10 = *v14;
    uint64_t v11 = v14[1];
    ++v13;
    if (v10 == *a2 && v11 == v7) {
      return v2 + 16 * v8;
    }
  }
  if (*a1) {
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

void IPC::Connection::dispatchIncomingMessages(IPC::Connection *this)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 33);
  if ((v1 & 1) == 0) {
    return;
  }
  uint64_t v3 = (os_unfair_lock_s *)((char *)this + 104);
  os_unfair_lock_lock((os_unfair_lock_t)this + 26);
  uint64_t v4 = *((void *)this + 14);
  if (v4 == *((void *)this + 15))
  {
    os_unfair_lock_unlock(v3);
    return;
  }
  uint64_t v5 = *((void *)this + 16);
  int v6 = *(unsigned __int16 **)(v5 + 8 * v4);
  *(void *)(v5 + 8 * v4) = 0;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(*((void *)this + 16) + 8 * v4));
  uint64_t v7 = *((unsigned int *)this + 34);
  uint64_t v8 = *((void *)this + 14);
  unint64_t v9 = *((void *)this + 15);
  if (v8 == v7 - 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v8 + 1;
  }
  *((void *)this + 14) = v10;
  BOOL v11 = v9 >= v10;
  unint64_t v12 = v9 - v10;
  if (v11) {
    uint64_t v7 = 0;
  }
  if (!*((unsigned char *)this + 100))
  {
    __break(1u);
    goto LABEL_49;
  }
  unint64_t v13 = v12 + v7;
  int v14 = *((unsigned __int8 *)this + 99);
  if (v13 < 0x259)
  {
    if (*((unsigned char *)this + 99)) {
      *((unsigned char *)this + 99) = v14 - 1;
    }
  }
  else
  {
    unsigned int v15 = (v14 + 1);
    if (v15 >= 9) {
      LOWORD(v15) = 9;
    }
    *(_WORD *)((char *)this + 99) = v15 | 0x100;
  }
  unint64_t v16 = 0x258u / (v14 + 1);
  if (v16 >= v13) {
    unint64_t v17 = v13;
  }
  else {
    unint64_t v17 = v16;
  }
  if (v13 > v16)
  {
    __int16 v18 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      *(void *)&uint8_t buf[4] = this;
      __int16 v42 = 2048;
      unint64_t v43 = v13;
      __int16 v44 = 2048;
      unint64_t v45 = v17;
      _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "%p - Connection::dispatchIncomingMessages: IPC throttling was triggered (has %zu pending incoming messages, will only process %zu before yielding)", buf, 0x20u);
      __int16 v18 = off_1EB358938;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      unsigned int v36 = v6[25];
      if (v36 >= 0xEF4) {
        unsigned int v36 = 3828;
      }
      int v37 = (&IPC::Detail::messageDescriptions)[3 * v36];
      *(_DWORD *)buf = 134218242;
      *(void *)&uint8_t buf[4] = this;
      __int16 v42 = 2082;
      unint64_t v43 = (unint64_t)v37;
      _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, "%p - Connection::dispatchIncomingMessages: first IPC message in queue is %{public}s", buf, 0x16u);
    }
  }
  if (*((void *)this + 14) != *((void *)this + 15))
  {
    uint64_t v19 = *((void *)this + 2);
    if (v19)
    {
      uint64_t v20 = *(void *)(v19 + 80);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v40, (atomic_uchar *volatile *)this);
      BOOL v21 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v21 = &unk_1EEA102C0;
      uint64_t v22 = v40;
      float v40 = 0;
      *(void *)buf = v21;
      v21[1] = v22;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v20 + 16))(v20, buf);
      uint64_t v23 = *(void *)buf;
      *(void *)buf = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v40);
      goto LABEL_32;
    }
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x198679FA4);
  }
LABEL_32:
  os_unfair_lock_unlock(v3);
  uint64_t v39 = (IPC::Decoder *)v6;
  IPC::Connection::dispatchMessage((uint64_t)this, &v39);
  float v24 = v39;
  uint64_t v39 = 0;
  if (v24)
  {
    IPC::Decoder::~Decoder(v24);
    WTF::fastFree(v34, v35);
  }
  if (v17 >= 2)
  {
    unint64_t v25 = v17 - 1;
    while (1)
    {
      os_unfair_lock_lock(v3);
      uint64_t v26 = *((void *)this + 14);
      if (v26 == *((void *)this + 15)) {
        break;
      }
      uint64_t v27 = *((void *)this + 16);
      float64x2_t v28 = *(IPC::Decoder **)(v27 + 8 * v26);
      *(void *)(v27 + 8 * v26) = 0;
      std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(*((void *)this + 16) + 8 * v26));
      uint64_t v29 = *((void *)this + 14);
      if (v29 == *((unsigned int *)this + 34) - 1) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v29 + 1;
      }
      *((void *)this + 14) = v30;
      os_unfair_lock_unlock(v3);
      float v38 = v28;
      IPC::Connection::dispatchMessage((uint64_t)this, &v38);
      uint64_t v31 = v38;
      float v38 = 0;
      if (v31)
      {
        IPC::Decoder::~Decoder(v31);
        WTF::fastFree(v32, v33);
      }
      if (!--v25) {
        return;
      }
    }
    os_unfair_lock_unlock(v3);
  }
}

void WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 104));
  uint64_t v2 = *(void *)(v1 + 112);
  if (v2 == *(void *)(v1 + 120))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 104));
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 128);
    uint64_t v4 = *(IPC::Decoder **)(v3 + 8 * v2);
    *(void *)(v3 + 8 * v2) = 0;
    std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(*(void *)(v1 + 128) + 8 * v2));
    uint64_t v5 = *(void *)(v1 + 112);
    if (v5 == *(unsigned int *)(v1 + 136) - 1) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5 + 1;
    }
    *(void *)(v1 + 112) = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 104));
    unint64_t v10 = v4;
    IPC::Connection::dispatchMessage(v1, &v10);
    uint64_t v7 = v10;
    unint64_t v10 = 0;
    if (v7)
    {
      IPC::Decoder::~Decoder(v7);
      WTF::fastFree(v8, v9);
    }
  }
}

void IPC::Decoder::~Decoder(IPC::Decoder *this)
{
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    uint64_t v4 = *((void *)this + 3);
    if (v4 && v3 != 0) {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  uint64_t v6 = (const void **)*((void *)this + 7);
  if (v6) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v6, v2);
  }
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, v2);
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
}

IPC::Decoder *std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](IPC::Decoder **a1, IPC::Decoder *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    IPC::Decoder::~Decoder(result);
    return (IPC::Decoder *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Decoder::create(std::span<unsigned char const,18446744073709551615ul>,WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(int a1, WTF *this)
{
  return WTF::fastFree(this, this);
}

void IPC::Connection::dispatchMessage(uint64_t a1, const IPC::Decoder **a2)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  uint64_t v5 = IPC::MessageReceiveQueueMap::get((IPC::MessageReceiveQueueMap *)(a1 + 144), *a2);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t, const IPC::Decoder **))(*(void *)v5 + 16))(v5, a1, a2);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    os_unfair_lock_unlock(v4);
    uint64_t v6 = *a2;
    if ((*((unsigned char *)*a2 + 48) & 4) == 0)
    {
LABEL_4:
      ++*(_DWORD *)(a1 + 80);
      char v7 = *((unsigned char *)v6 + 48);
      if (v7) {
        int v8 = 1;
      }
      else {
        int v8 = v7 & 2;
      }
      if (v8 == 1
        || v8 == 2 && (unsigned int v18 = atomic_load(&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount)) != 0)
      {
        ++*(_DWORD *)(a1 + 88);
        int v9 = 1;
      }
      else
      {
        int v9 = 0;
      }
      char v10 = *(unsigned char *)(a1 + 98);
      *(unsigned char *)(a1 + 98) = 0;
      BOOL v11 = *a2;
      if (*((unsigned __int16 *)*a2 + 25) >= 0xE09uLL)
      {
        IPC::Connection::dispatchSyncMessage((IPC::Connection *)a1, *a2);
      }
      else
      {
        if (!*(void *)(a1 + 16))
        {
          __break(0xC471u);
          JUMPOUT(0x19867A39CLL);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x19867A3BCLL);
        }
        if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * *((unsigned __int16 *)*a2 + 25) + 2]) == 213)
        {
          uint64_t v15 = *((void *)v11 + 8);
          if (v15 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x19867A3FCLL);
          }
          IPC::Connection::takeAsyncReplyHandler((os_unfair_lock_s *)a1, v15, &v21);
          uint64_t v16 = v21;
          if (v21)
          {
            uint64_t v21 = 0;
            (*(void (**)(uint64_t, const IPC::Decoder *))(*(void *)v16 + 16))(v16, v11);
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            uint64_t v17 = v21;
            uint64_t v21 = 0;
            if (v17) {
              (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
            }
          }
          else
          {
            *(unsigned char *)(a1 + 98) = 1;
          }
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, const IPC::Decoder *))(*(void *)v12 + 16))(v12, a1, *a2);
        }
      }
      unint64_t v13 = *a2;
      char v14 = *(unsigned char *)(a1 + 98) | (*(void *)*a2 == 0);
      *(unsigned char *)(a1 + 98) = v14;
      --*(_DWORD *)(a1 + 80);
      if (v9) {
        --*(_DWORD *)(a1 + 88);
      }
      if ((*((unsigned char *)v13 + 48) & 4) != 0) {
        --*(_DWORD *)(a1 + 92);
      }
      if (v14)
      {
        unsigned __int8 v19 = atomic_load((unsigned __int8 *)(a1 + 33));
        if (v19) {
          (*(void (**)(void, uint64_t, void, void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1, *((unsigned __int16 *)*a2 + 25), *((unsigned int *)*a2 + 18));
        }
      }
      *(unsigned char *)(a1 + 98) = v10;
      return;
    }
    if (*(unsigned char *)(a1 + 96))
    {
      ++*(_DWORD *)(a1 + 92);
      goto LABEL_4;
    }
    uint64_t v20 = *(void (**)(void))(**(void **)(a1 + 8) + 48);
    v20();
  }
}

char *IPC::Connection::sendOutgoingMessages(char *this, void *a2)
{
  if (this[72])
  {
    uint64_t v2 = (uint64_t)this;
    if (!*((void *)this + 43) && (*((_DWORD *)this + 78) - 1) <= 0xFFFFFFFD)
    {
      uint64_t v3 = this + 184;
      uint64_t v4 = (unsigned __int8 *)(this + 224);
      do
      {
        char v5 = 0;
        atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
        if (v5) {
          this = (char *)MEMORY[0x19972E8D0](v2 + 184);
        }
        uint64_t v6 = *(void *)(v2 + 192);
        uint64_t v7 = *(void *)(v2 + 200);
        if (v6 == v7)
        {
          unsigned __int8 v15 = atomic_load(v4);
          if (v15)
          {
            atomic_store(0, v4);
            this = (char *)WTF::ParkingLot::unparkAll((WTF::ParkingLot *)(v2 + 224), a2);
          }
          int v9 = 0;
          int v10 = 3;
        }
        else
        {
          uint64_t v8 = *(void *)(v2 + 208);
          int v9 = *(IPC::Encoder **)(v8 + 8 * v6);
          *(void *)(v8 + 8 * v6) = 0;
          this = (char *)std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(*(void *)(v2 + 208) + 8 * v6), a2);
          int v10 = 0;
          uint64_t v11 = *(void *)(v2 + 192);
          if (v11 == *(unsigned int *)(v2 + 216) - 1) {
            uint64_t v12 = 0;
          }
          else {
            uint64_t v12 = v11 + 1;
          }
          *(void *)(v2 + 192) = v12;
        }
        int v13 = 1;
        atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
        if (v13 != 1) {
          this = (char *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 184));
        }
        if (v6 == v7)
        {
          if (v9)
          {
            IPC::Encoder::~Encoder(v9, a2);
            this = (char *)WTF::fastFree(v16, v17);
          }
        }
        else
        {
          uint64_t v20 = v9;
          this = (char *)IPC::Connection::sendOutgoingMessage((WTF *)v2, (__int16 **)&v20);
          char v14 = (char)this;
          if (v9)
          {
            IPC::Encoder::~Encoder(v9, a2);
            this = (char *)WTF::fastFree(v18, v19);
          }
          if ((v14 & 1) == 0) {
            return this;
          }
          int v10 = 0;
        }
      }
      while (!v10);
    }
  }
  return this;
}

IPC::Encoder *std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](IPC::Encoder **a1, IPC::Encoder *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    IPC::Encoder::~Encoder(result, a2);
    return (IPC::Encoder *)WTF::fastFree(v4, v5);
  }
  return result;
}

void IPC::Encoder::~Encoder(IPC::Encoder *this, void *a2)
{
  uint64_t v3 = (char *)*((void *)this + 66);
  if (v3 != (char *)this + 16) {
    munmap(v3, *((void *)this + 67));
  }
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 552, a2);
}

WTF *IPC::Connection::sendOutgoingMessage(WTF *a1, __int16 **a2)
{
  char v5 = *a2;
  uint64_t v31 = (WTF::MachSendRight *)*((void *)*a2 + 69);
  uint64_t v6 = *((unsigned int *)v5 + 141);
  int v32 = *((_DWORD *)v5 + 140);
  unsigned int v33 = v6;
  v34[0] = 0;
  *((void *)v5 + 69) = 0;
  v34[1] = 0;
  *((void *)v5 + 70) = 0;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, a2);
  unint64_t v8 = *((void *)*a2 + 68);
  if (*((void *)*a2 + 67) < v8) {
    goto LABEL_42;
  }
  BOOL v9 = __CFADD__(v8, 24);
  unint64_t v10 = v8 + 24;
  BOOL v11 = v8 >= 0xFFFFFFFFFFFFFFE8;
  if (v9) {
    unint64_t v10 = 24;
  }
  if (!v6) {
    goto LABEL_47;
  }
  uint64_t v2 = 0;
  BOOL v28 = v10 >= 0xFFFFFFFFFFFFFFFCLL;
  if (v10 < 0xFFFFFFFFFFFFFFFCLL) {
    v10 += 4;
  }
  BOOL v29 = __CFADD__(v10, 12 * v6);
  if (!__CFADD__(v10, 12 * v6)) {
    v10 += 12 * v6;
  }
  if (!v28 && !v29)
  {
LABEL_47:
    if (v11 || (unint64_t v12 = v10 + 3, v10 >= 0xFFFFFFFFFFFFFFFDLL))
    {
      uint64_t v2 = 0;
      goto LABEL_21;
    }
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v12 & 0xFFFFFFFFFFFFFFFCLL) <= 0x1000) {
      unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    else {
      unint64_t v14 = (12 * v6 + 47) & 0x1FFFFFFFFCLL;
    }
    __int16 v15 = **a2;
    if (v13 <= 0x1000) {
      int v16 = 230297018;
    }
    else {
      int v16 = 230301114;
    }
    uint64_t v17 = WTF::fastZeroedMalloc((WTF *)(v14 + 24));
    uint64_t v2 = (WTF *)v17;
    *(_WORD *)uint64_t v17 = v15;
    *(void *)(v17 + 8) = v14;
    *(_DWORD *)(v17 + 20) = 19;
    *(unsigned char *)(v17 + 16) = 1;
    *(_DWORD *)(v17 + 24) = v14;
    *(void *)(v17 + 28) = *((unsigned int *)a1 + 78);
    *(_DWORD *)(v17 + 40) = v16;
    if (v6 || v13 > 0x1000)
    {
      *(_DWORD *)(v17 + 20) = -2147483629;
      if (v13 <= 0x1000) {
        int v21 = v6;
      }
      else {
        int v21 = v6 + 1;
      }
      *(_DWORD *)(v17 + 44) = v21;
      unsigned int v18 = (char *)(v17 + 48);
      if (v33)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v31;
        uint64_t v24 = 12 * v33;
        do
        {
          int v25 = WTF::MachSendRight::leakSendRight(v23);
          uint64_t v26 = &v18[v22];
          *(_DWORD *)uint64_t v26 = v25;
          *((_WORD *)v26 + 5) = 17;
          uint64_t v23 = (WTF::MachSendRight *)((char *)v23 + 4);
          v22 += 12;
        }
        while (v24 != v22);
        v18 += v22;
      }
      if (v13 > 0x1000)
      {
        unint64_t v27 = *((void *)*a2 + 68);
        if (*((void *)*a2 + 67) >= v27)
        {
          *(void *)unsigned int v18 = *((void *)*a2 + 66);
          *((_DWORD *)v18 + 2) = (v18[10] << 16) | 0x1000100;
          *((_DWORD *)v18 + 3) = v27;
LABEL_18:
          uint64_t v30 = v2;
          uint64_t v2 = (WTF *)IPC::Connection::sendMessage((uint64_t *)a1, (unsigned __int16 **)&v30);
          a1 = v30;
          if (!v30) {
            goto LABEL_21;
          }
          if (!*((unsigned char *)v30 + 16))
          {
LABEL_20:
            WTF::fastFree(a1, v7);
            goto LABEL_21;
          }
LABEL_43:
          mach_msg_destroy((mach_msg_header_t *)((char *)a1 + 20));
          goto LABEL_20;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    else
    {
      unsigned int v18 = (char *)(v17 + 44);
    }
    size_t v19 = *((void *)*a2 + 68);
    if (*((void *)*a2 + 67) >= v19)
    {
      memcpy(v18, *((const void **)*a2 + 66), v19);
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_21:
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v7);
  return v2;
}

void sub_19867A998(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*((unsigned char *)v11 + 16)) {
    mach_msg_destroy(v12);
  }
  WTF::fastFree(v11, a2);
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v14);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WTF::MachSendRight **)a1;
    uint64_t v7 = 4 * v3;
    do
    {
      WTF::MachSendRight::~MachSendRight(v6);
      uint64_t v6 = (WTF::MachSendRight *)(v8 + 4);
      v7 -= 4;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t IPC::Connection::sendMessage(uint64_t *a1, unsigned __int16 **a2)
{
  mach_msg_return_t v4;
  void *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  WTF *v10;
  const char *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  unsigned char v15[16];
  int v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mach_msg((mach_msg_header_t *)(*a2 + 10), 145, *((_DWORD *)*a2 + 2), 0, 0, 0, 0);
  if (v4)
  {
    if (v4 == 268435460)
    {
      uint64_t v6 = *a2;
      *a2 = 0;
      std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100](a1 + 43, v6);
    }
    else
    {
      if (v4 != 268435459)
      {
        uint64_t v7 = **a2;
        WTF::Internal::appendHex();
        int v16 = v8;
        if (v7 >= 0xEF4) {
          BOOL v9 = 3828;
        }
        else {
          BOOL v9 = v7;
        }
        WTF::makeString<WTF::ASCIILiteral,WTF::HexNumberBuffer,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,IPC::MessageName,char>(&v14, (uint64_t)v15, (&IPC::Detail::messageDescriptions)[3 * v9], (uint64_t)(&IPC::Detail::messageDescriptions)[3 * v9 + 1], v7);
        WTF::String::utf8();
        if (v13) {
          unint64_t v10 = (WTF *)((char *)v13 + 16);
        }
        else {
          unint64_t v10 = 0;
        }
        WTFLogAlways();
        WTF::setCrashLogMessage(v10, v11);
        if (v13)
        {
          if (*(_DWORD *)v13 == 1) {
            WTF::fastFree(v13, v12);
          }
          else {
            --*(_DWORD *)v13;
          }
        }
        WTFCrashWithInfoImpl(257, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Platform/IPC/cocoa/ConnectionCocoa.mm", "BOOL IPC::Connection::sendMessage(std::unique_ptr<MachMessage>)");
        __break(1u);
      }
      IPC::Connection::cancelSendSource((IPC::Connection *)a1);
    }
    return 0;
  }
  else
  {
    *((unsigned char *)*a2 + 16) = 0;
    return 1;
  }
}

void sub_19867ABFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebProcess::didReceiveMessage(WebKit::WebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  BOOL v6 = IPC::MessageReceiverMap::dispatchMessage((WebKit::WebProcess *)((char *)this + 48), a2, a3);
  if (!v6)
  {
    unsigned int v7 = *((unsigned __int16 *)a3 + 25);
    if (v7 >= 0xEF4) {
      unsigned int v7 = 3828;
    }
    int v8 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v7 + 2]);
    switch(v8)
    {
      case 191:
        WebKit::WebProcess::didReceiveWebProcessMessage(this, (atomic_uchar *volatile *)a2, (WTF::StringImpl **)a3);
        break;
      case 3:
        WebKit::AuxiliaryProcess::didReceiveMessage(this, (atomic_uchar *volatile *)a2, a3);
        break;
      case 198:
        BOOL v9 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton((WebCore::SWContextManager *)v6);
        unint64_t v10 = (atomic_uchar *volatile *)WebCore::SWContextManager::connection(v9);
        if (v10)
        {
          WebKit::WebSWContextManagerConnection::didReceiveMessage(v10, (atomic_uchar *volatile *)a2, a3);
        }
        break;
      case 203:
        BOOL v11 = (WebCore::SharedWorkerContextManager *)WebCore::SharedWorkerContextManager::singleton((WebCore::SharedWorkerContextManager *)v6);
        unint64_t v12 = (WTF::StringImpl **)WebCore::SharedWorkerContextManager::connection(v11);
        if (v12)
        {
          WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(v12, (atomic_uchar *volatile *)a2, a3);
        }
        break;
    }
  }
}

BOOL IPC::MessageReceiverMap::dispatchMessage(IPC::MessageReceiverMap *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 >= 0xEF4) {
    unsigned int v6 = 3828;
  }
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>((atomic_uint **)&v15, *(void *)this, (&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
  int v8 = (unsigned int *)v15;
  if (v15)
  {
    uint64_t v13 = *((void *)v15 + 1);
    if (v13) {
      (*(void (**)(void, IPC::Connection *, IPC::Decoder *))(*(void *)v13 + 16))(*((void *)v15 + 1), a2, a3);
    }
    __int16 v15 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
    if (v13) {
      return 1;
    }
  }
  unsigned int v9 = *((unsigned __int16 *)a3 + 25);
  if (v9 >= 0xEF4) {
    unsigned int v9 = 3828;
  }
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>((unint64_t)&v15, *((void *)this + 1), (&IPC::Detail::messageDescriptions)[3 * v9 + 2], *((void *)a3 + 8));
  BOOL v11 = (unsigned int *)v15;
  if (!v15) {
    return 0;
  }
  uint64_t v14 = *((void *)v15 + 1);
  if (v14) {
    (*(void (**)(void, IPC::Connection *, IPC::Decoder *))(*(void *)v14 + 16))(*((void *)v15 + 1), a2, a3);
  }
  __int16 v15 = 0;
  if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  return v14 != 0;
}

atomic_uint **WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>(atomic_uint **result, uint64_t a2, unsigned __int8 a3)
{
  if (!a2)
  {
LABEL_8:
    unsigned int v9 = 0;
    goto LABEL_9;
  }
  unsigned int v3 = *(_DWORD *)(a2 - 8);
  unsigned int v4 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  uint64_t v6 = v3 & (v5 ^ HIWORD(v5));
  int v7 = *(unsigned __int8 *)(a2 + 16 * v6);
  if (v7 != a3)
  {
    int v8 = 1;
    while (v7 != 255)
    {
      uint64_t v6 = (v6 + v8) & v3;
      int v7 = *(unsigned __int8 *)(a2 + 16 * v6);
      ++v8;
      if (v7 == a3) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  unsigned int v9 = *(atomic_uint **)(a2 + 16 * v6 + 8);
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
LABEL_9:
  *uint64_t result = v9;
  return result;
}

unint64_t WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>(unint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unsigned int v4 = (void *)result;
  if (!a2)
  {
LABEL_19:
    uint64_t v14 = 0;
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)(a2 - 8);
  uint64_t result = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(a3, a4);
  unsigned int v9 = result & v8;
  unint64_t v10 = (unsigned __int8 *)(a2 + 24 * (result & v8));
  int v11 = *v10;
  uint64_t v12 = *((void *)v10 + 1);
  if (v11 != a3 || v12 != a4)
  {
    int v15 = 1;
    while ((_BYTE)v11 != 0xFF || v12 != 0)
    {
      unsigned int v9 = (v9 + v15) & v8;
      uint64_t v17 = (unsigned __int8 *)(a2 + 24 * v9);
      int v11 = *v17;
      uint64_t v12 = *((void *)v17 + 1);
      ++v15;
      if (v11 == a3 && v12 == a4) {
        goto LABEL_7;
      }
    }
    goto LABEL_19;
  }
LABEL_7:
  uint64_t v14 = *(atomic_uint **)(a2 + 24 * v9 + 16);
  if (v14) {
    atomic_fetch_add(v14, 1u);
  }
LABEL_9:
  *unsigned int v4 = v14;
  return result;
}

unint64_t WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(unsigned __int8 a1, uint64_t a2)
{
  unsigned int v2 = ~(a1 << 15) + a1;
  unsigned int v3 = (9 * (v2 ^ (v2 >> 10))) ^ ((9 * (v2 ^ (v2 >> 10))) >> 6);
  unint64_t v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v3 + ~(v3 << 11)) ^ ((v3 + ~(v3 << 11)) >> 16))
                           + 95187966 * ((v6 >> 31) ^ v6))) >> 4;
}

void non-virtual thunk to'WebKit::WebProcessProxy::didReceiveMessage(WebKit::WebProcessProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

void WebKit::WebProcessProxy::didReceiveMessage(WebKit::WebProcessProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (!IPC::MessageReceiverMap::dispatchMessage((WebKit::WebProcessProxy *)((char *)this + 152), a2, a3))
  {
    uint64_t v6 = *((void *)this + 64);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      uint64_t v8 = v7 ? v7 - 16 : 0;
    }
    else
    {
      uint64_t v8 = 0;
    }
    CFRetain(*(CFTypeRef *)(v8 + 8));
    BOOL v9 = IPC::MessageReceiverMap::dispatchMessage((IPC::MessageReceiverMap *)(v8 + 56), a2, a3);
    CFRelease(*(CFTypeRef *)(v8 + 8));
    if (!v9)
    {
      unsigned int v10 = *((unsigned __int16 *)a3 + 25);
      if (v10 >= 0xEF4) {
        unsigned int v10 = 3828;
      }
      if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * v10 + 2]) == 193)
      {
        WebKit::WebProcessProxy::didReceiveWebProcessProxyMessage((atomic_uint *)this, a2, (atomic_uchar *volatile **)a3);
      }
    }
  }
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebPage::didReceiveMessage(WebKit::WebPage *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebPage::didReceiveMessage((WebKit::WebPage *)((char *)this - 16), a2, a3);
}

#error "19867B20C: too big function (funcsize=0)"

WTF::StringImpl *WebKit::WebPage::didReceiveMessage(WebKit::WebPage *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 >= 0xEF4) {
    unsigned int v5 = 3828;
  }
  int v6 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v5 + 2]);
  if (v6 <= 174)
  {
    if (v6 == 131)
    {
      uint64_t result = WebKit::WebPage::remoteInspectorUI(this);
      if (result)
      {
        return (WTF::StringImpl *)WebKit::RemoteWebInspectorUI::didReceiveMessage(result, a2, a3);
      }
    }
    else
    {
      if (v6 != 170)
      {
LABEL_12:
        return (WTF::StringImpl *)WebKit::WebPage::didReceiveWebPageMessage(this, a2, a3);
      }
      BOOL v9 = WebKit::WebPage::fullScreenManager(this);
      return (WTF::StringImpl *)WebKit::WebFullScreenManager::didReceiveMessage(v9, a2, a3);
    }
  }
  else
  {
    if (v6 != 175)
    {
      if (v6 == 177)
      {
        uint64_t result = WebKit::WebPage::inspectorUI(this);
        if (result)
        {
          return WebKit::WebInspectorUI::didReceiveMessage(result, a2, (WTF::StringImpl **)a3);
        }
        return result;
      }
      goto LABEL_12;
    }
    uint64_t result = (WTF::StringImpl *)WebKit::WebPage::inspector((uint64_t)this, 1);
    if (result)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v8();
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::WebPageProxy::didReceiveMessage(WebKit::WebPageProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

void WebKit::WebPageProxy::didReceiveMessage(WebKit::WebPageProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v6 = (WebKit::BrowsingContextGroup **)MEMORY[0x1F4188790](this, a2, a3);
  uint64_t v8 = v7;
  uint64_t v10 = (uint64_t)v9;
  unint64_t v11 = (unint64_t)v6;
  uint64_t v12 = v1364;
  uint64_t v1416 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = WebKit::WebPageProxy::sharedPreferencesForWebProcess(v6, v9);
  CFRetain(*(CFTypeRef *)(v11 + 8));
  unsigned int v15 = *((unsigned __int16 *)v8 + 25);
  if (v15 <= 0x811)
  {
    if (*((unsigned __int16 *)v8 + 25) <= 0x7C5u)
    {
      if (*((unsigned __int16 *)v8 + 25) > 0x793u)
      {
        if (v15 != 1940)
        {
          if (v15 == 1971)
          {
            uint64_t v50 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
            if (v51)
            {
              v1322.request.point = (IntPoint)v50;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
              uint64_t v52 = WTF::fastMalloc((WTF *)0x18);
              *(void *)uint64_t v52 = &unk_1EEA02A60;
              *(IntPoint *)(v52 + 8) = v1322.request.point;
              uint64_t v53 = *(void *)&v1322.request.includeSnapshot;
              *(void *)&v1322.request.includeSnapshot = 0;
              *(void *)(v52 + 16) = v53;
              *(void *)v1364 = v52;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
              WebKit::WebPageProxy::focusFromServiceWorker(v11, (uint64_t *)v1364);
              uint64_t v54 = *(void *)v1364;
              *(void *)v1364 = 0;
              if (v54) {
                (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
              }
            }
            goto LABEL_283;
          }
          if (v15 == 1974)
          {
            IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((IPC::Decoder *)v8, (uint64_t)&v1322);
            if (v1322.isLink) {
              WebKit::WebPageProxy::focusedFrameChanged((void *)v11, v10, (uint64_t *)&v1322.request.point);
            }
            goto LABEL_283;
          }
          goto LABEL_95;
        }
        unsigned __int16 v55 = IPC::Decoder::decode<WebCore::FilterOperation::Type>((uint64_t *)v8);
        if (v55 < 0x100u) {
          goto LABEL_282;
        }
        unint64_t v56 = *((void *)v8 + 1);
        double v57 = *(WTF::StringImpl **)v8;
        unint64_t v58 = *((void *)v8 + 2) - *(void *)v8;
        if (v56 <= v58)
        {
          unint64_t v133 = 0;
          uint64_t v134 = 0;
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v135 = *((void *)v8 + 3);
          if (v135)
          {
            if (v56)
            {
              (*(void (**)(uint64_t))(*(void *)v135 + 16))(v135);
              uint64_t v134 = *(WTF::StringImpl **)v8;
              unint64_t v133 = *((void *)v8 + 1);
            }
            else
            {
              unint64_t v133 = 0;
              uint64_t v134 = 0;
            }
          }
        }
        else
        {
          double v59 = (unsigned __int8 *)v57 + v58;
          *((void *)v8 + 2) = v59 + 1;
          if (v57)
          {
            unsigned int v60 = *v59;
            if (v60 < 2)
            {
              unsigned __int8 v61 = v55;
              IPC::Decoder::decode<std::optional<WebCore::RemoteUserInputEventData>>((unint64_t *)v8, (uint64_t)&v1322);
              if (v1322.isContentEditable)
              {
                *(InteractionInformationRequest *)&v1364[6] = v1322.request;
                *(_OWORD *)&v1364[22] = *(_OWORD *)&v1322.canBeValid;
                WebKit::WebPageProxy::didReceiveEvent(v11, v61, v60 != 0, (uint64_t)&v1322);
                goto LABEL_283;
              }
              goto LABEL_282;
            }
            goto LABEL_281;
          }
          unint64_t v133 = v56;
          uint64_t v134 = 0;
        }
        unint64_t v56 = 0;
        double v57 = 0;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v136 = *((void *)v8 + 3);
        if (v136)
        {
          if (v133)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v136 + 16))(v136, v134, v133);
            double v57 = *(WTF::StringImpl **)v8;
            unint64_t v56 = *((void *)v8 + 1);
          }
          else
          {
            unint64_t v56 = 0;
            double v57 = 0;
          }
        }
LABEL_281:
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v137 = *((void *)v8 + 3);
        if (v137 && v56) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v137 + 16))(v137, v57);
        }
        goto LABEL_282;
      }
      if (v15 == 1879)
      {
        WebKit::WebPageProxy::closePage(v11);
        goto LABEL_283;
      }
      if (v15 != 1904) {
        goto LABEL_95;
      }
      IPC::ArgumentCoder<WebCore::ViewportAttributes,void>::decode((unint64_t *)v8, (uint64_t)&v1322);
      if (*(&v1322.isContentEditable + 4))
      {
        *(InteractionInformationRequest *)v1364 = v1322.request;
        *(_OWORD *)&v1364[16] = *(_OWORD *)&v1322.canBeValid;
        *(_DWORD *)&v1364[32] = *(_DWORD *)&v1322.isContentEditable;
        v1364[36] = 1;
        WebKit::WebPageProxy::didChangeViewportProperties(v11, (uint64_t)v1364);
        goto LABEL_283;
      }
      unint64_t v107 = *(WTF::StringImpl **)v8;
      uint64_t v108 = *((void *)v8 + 1);
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v109 = *((void *)v8 + 3);
      if (v109)
      {
        if (v108)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v109 + 16))(v109, v107);
          unint64_t v110 = *(WTF::StringImpl **)v8;
          uint64_t v108 = *((void *)v8 + 1);
          uint64_t v109 = *((void *)v8 + 3);
LABEL_246:
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          if (!v109) {
            goto LABEL_283;
          }
          goto LABEL_247;
        }
      }
      else
      {
        uint64_t v108 = 0;
      }
      unint64_t v110 = 0;
      goto LABEL_246;
    }
    if (*((unsigned __int16 *)v8 + 25) <= 0x7E4u)
    {
      if (v15 == 1990)
      {
        int v47 = *(_DWORD **)(v11 + 888);
        *(void *)(v11 + 888) = 0;
        if (v47) {
          WTF::RefCounted<WebCore::ValidationBubble>::deref(v47);
        }
        goto LABEL_283;
      }
      if (v15 == 2018)
      {
        IPC::Decoder::decode<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>>((IPC::Decoder *)v8, &v1322);
        if (v1342) {
          WebKit::WebPageProxy::mouseDidMoveOverElement(v11, (uint64_t)&v1322, v1340[8], &v1341);
        }
        std::__optional_destruct_base<std::tuple<WebKit::WebHitTestResultData,WTF::OptionSet<WebKit::WebEventModifier>,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::WebHitTestResultData *)&v1322);
        goto LABEL_283;
      }
    }
    else
    {
      switch(v15)
      {
        case 0x7E5u:
          v1322.request.point = (IntPoint)IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)v8);
          *(_DWORD *)&v1322.request.includeSnapshot = v62;
          if ((_BYTE)v62) {
            WebKit::WebPageProxy::pageDidScroll((WebKit::WebPageProxy *)v11, &v1322.request.point);
          }
          goto LABEL_283;
        case 0x7F6u:
          IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>((IPC::Decoder *)v8, &v1322);
          if (!v1322.isLink) {
            goto LABEL_283;
          }
          WebKit::WebPageProxy::relayAccessibilityNotification(v11, (uint64_t)&v1322, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid);
          if (!v1322.isLink) {
            goto LABEL_283;
          }
          goto LABEL_85;
        case 0x807u:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1306);
          if ((_BYTE)v1307)
          {
            IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)v8, (uint64_t)v1364);
            if (LOBYTE(v1376.m_location.m_x)
              && ((IPC::ArgumentCoder<WebCore::FileChooserSettings,void>::decode((IPC::Decoder *)v8, (uint64_t)v1315),
                   v1320)
               || (uint64_t v17 = *(WTF::StringImpl **)v8,
                   uint64_t v125 = *((void *)v8 + 1),
                   *(void *)uint64_t v8 = 0,
                   *((void *)v8 + 1) = 0,
                   (uint64_t v126 = *((void *)v8 + 3)) != 0)
               && v125
               && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v126 + 16))(v126, v17), v1320)))
            {
              if (!(_BYTE)v1307 || !LOBYTE(v1376.m_location.m_x)) {
                goto LABEL_2796;
              }
              v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1306;
              std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1322.canBeValid, (uint64_t)v1364);
              LOWORD(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_location.m_x) = *(_WORD *)v1315;
              FloatSize v18 = *(FloatSize *)&v1315[8];
              *(void *)&v1315[8] = 0;
              v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size = v18;
              size_t v19 = *(FloatRect **)&v1315[16];
              *(void *)&v1315[16] = 0;
              v1322.linkIndicator.textRectsInBoundingRectCoordinates.m_buffer = v19;
              uint64_t v20 = *((void *)&v1316 + 1);
              *(void *)&v1322.linkIndicator.textRectsInBoundingRectCoordinates.m_capacity = v1316;
              long long v1316 = 0uLL;
              *(void *)&v1322.linkIndicator.contentImageScaleFactor = v20;
              int v21 = v1317;
              v1317 = 0;
              v1322.linkIndicator.contentImageWithHighlight.m_ptr = v21;
              uint64_t v22 = v1318;
              v1318 = 0;
              v1322.linkIndicator.contentImageWithoutSelection.m_ptr = v22;
              LOBYTE(v1322.linkIndicator.contentImage.m_ptr) = v1319;
              LOBYTE(v1322.linkIndicator.estimatedBackgroundColor.m_colorAndFlags) = 1;
              if (v1320)
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1317, v17);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1316, v23);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1315[8], v24);
              }
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
              LOBYTE(v1322.linkIndicator.estimatedBackgroundColor.m_colorAndFlags) = 0;
            }
            std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v17);
            if (LOBYTE(v1322.linkIndicator.estimatedBackgroundColor.m_colorAndFlags)) {
              goto LABEL_268;
            }
          }
          else
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1322.linkIndicator.estimatedBackgroundColor.m_colorAndFlags) = 0;
          }
          uint64_t v122 = *(WTF::StringImpl **)v8;
          uint64_t v123 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v124 = *((void *)v8 + 3);
          if (!v124) {
            goto LABEL_283;
          }
          if (!v123) {
            goto LABEL_283;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v124 + 16))(v124, v122);
          if (!LOBYTE(v1322.linkIndicator.estimatedBackgroundColor.m_colorAndFlags)) {
            goto LABEL_283;
          }
LABEL_268:
          WebKit::WebPageProxy::runOpenPanel(v11, (unsigned char *)v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (uint64_t)&v1322.canBeValid, (uint64_t)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates);
          if (!LOBYTE(v1322.linkIndicator.estimatedBackgroundColor.m_colorAndFlags)) {
            goto LABEL_283;
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.linkIndicator.contentImageWithHighlight, v127);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.linkIndicator.textRectsInBoundingRectCoordinates.m_capacity, v128);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size, v129);
          goto LABEL_270;
      }
    }
LABEL_95:
    if (v15 == 2087 && *(unsigned char *)(v13 + 16))
    {
      IPC::ArgumentCoder<WebCore::ContactsRequestData,void>::decode((WTF::StringImpl **)v8, (uint64_t)&v1322);
      if (!v1322.isContentEditable)
      {
        uint64_t v138 = *(WTF::StringImpl **)v8;
        uint64_t v139 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v140 = *((void *)v8 + 3);
        if (!v140 || !v139) {
          goto LABEL_285;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v140 + 16))(v140, v138);
        if (!v1322.isContentEditable) {
          goto LABEL_698;
        }
      }
      *(IntPoint *)v1364 = v1322.request.point;
      *(void *)&v1364[8] = *(void *)&v1322.request.includeSnapshot;
      v1364[16] = v1322.canBeValid;
      float v63 = *(WTF::StringImpl **)&v1322.isLink;
      *(void *)&v1364[24] = *(void *)&v1322.isLink;
      v1364[32] = 1;
      uint64_t v64 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
      if ((_BYTE)v65)
      {
        v1322.request.point = (IntPoint)v64;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
        uint64_t v66 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v66 = &unk_1EEA02AB0;
        *(IntPoint *)(v66 + 8) = v1322.request.point;
        uint64_t v67 = *(void *)&v1322.request.includeSnapshot;
        *(void *)&v1322.request.includeSnapshot = 0;
        *(void *)(v66 + 16) = v67;
        *(void *)v1315 = v66;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
        WebKit::WebPageProxy::showContactPicker(v11, v10, (const WTF::StringImpl *)v1364, (uint64_t)v1315);
        uint64_t v68 = *(void *)v1315;
        *(void *)v1315 = 0;
        if (v68) {
          (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
        }
        if (!v1364[32]) {
          goto LABEL_283;
        }
        float v63 = *(WTF::StringImpl **)&v1364[24];
      }
      *(void *)&v1364[24] = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2) {
          WTF::StringImpl::destroy(v63, v65);
        }
        else {
          *(_DWORD *)v63 -= 2;
        }
      }
      m_identifier = *(WTF **)v1364;
      if (!*(void *)v1364) {
        goto LABEL_283;
      }
      *(void *)v1364 = 0;
      *(_DWORD *)&v1364[8] = 0;
LABEL_158:
      WTF::fastFree(m_identifier, v65);
      goto LABEL_283;
    }
    if (*((unsigned __int16 *)v8 + 25) <= 0x7E2u)
    {
      switch(*((_WORD *)v8 + 25))
      {
        case 0x767:
          v1322.request.point = (IntPoint)IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)v8);
          *(_DWORD *)&v1322.request.includeSnapshot = v80;
          if ((_BYTE)v80) {
            WebKit::WebPageProxy::didChangeContentSize((WebKit::WebPageProxy *)v11, (const IntSize *)&v1322);
          }
          goto LABEL_283;
        case 0x769:
          IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)v8);
          goto LABEL_283;
        case 0x76B:
          uint64_t v88 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v8);
          if ((v88 & 0xFF00000000) != 0) {
            *(_DWORD *)(v11 + 932) = v88;
          }
          goto LABEL_283;
        case 0x76E:
          unint64_t v85 = IPC::Decoder::decode<WebCore::RectEdges<BOOL>>((uint64_t *)v8);
          if (!BYTE4(v85))
          {
            v151 = *(WTF::StringImpl **)v8;
            uint64_t v152 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v153 = *((void *)v8 + 3);
            if (v153)
            {
              if (v152) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v153 + 16))(v153, v151);
              }
            }
          }
          unint64_t v86 = v85 & 0xFFFFFFFFFFLL;
          unint64_t v87 = v85 & 0xFFFFFF00 | 0x100000000;
          if (!BYTE4(v85)) {
            unint64_t v87 = 0;
          }
          if (v86 <= 0x100000000) {
            LOBYTE(v86) = 0;
          }
          if (HIDWORD(v87)) {
            WebKit::WebPageProxy::didChangeScrollOffsetPinningForMainFrame(v11, v87 & 0xFFFFFF00 | v86);
          }
          goto LABEL_283;
        case 0x76F:
          uint64_t v84 = IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)v8);
          if ((v84 & 0xFFFFFF) >= 0x10000)
          {
            *(unsigned char *)(v11 + 920) = v84 != 0;
            *(unsigned char *)(v11 + 921) = (v84 & 0xFF00) != 0;
          }
          goto LABEL_283;
        default:
          goto LABEL_181;
      }
    }
    if (*((unsigned __int16 *)v8 + 25) > 0x805u)
    {
      switch(v15)
      {
        case 0x810u:
          unsigned __int16 v89 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
          if (v89 > 0xFFu)
          {
            *(unsigned char *)(v11 + 922) = v89 != 0;
            goto LABEL_283;
          }
          unint64_t v104 = *(WTF::StringImpl **)v8;
          uint64_t v105 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v106 = *((void *)v8 + 3);
          if (!v106) {
            goto LABEL_283;
          }
          goto LABEL_258;
        case 0x808u:
          IPC::Decoder::decode<std::tuple<WebCore::Color>>((uint64_t *)v8, &v1322);
          if (!v1322.request.includeSnapshot) {
            goto LABEL_283;
          }
          WebKit::WebPageProxy::sampledPageTopColorChanged(v11, (const WebCore::Color *)&v1322);
          if (!v1322.request.includeSnapshot) {
            goto LABEL_283;
          }
          goto LABEL_201;
        case 0x806u:
          WebKit::WebPageProxy::runModal((WebKit::WebPageProxy *)v11);
          goto LABEL_283;
      }
    }
    else
    {
      switch(v15)
      {
        case 0x7E3u:
          IPC::Decoder::decode<std::tuple<WebCore::IntRect>>((unint64_t *)v8, (uint64_t)&v1322);
          if (v1322.canBeValid) {
            *(InteractionInformationRequest *)(*(void *)(v11 + 32) + 1912) = v1322.request;
          }
          goto LABEL_283;
        case 0x7E6u:
          IPC::Decoder::decode<std::tuple<WebCore::Color>>((uint64_t *)v8, &v1322);
          if (!v1322.request.includeSnapshot) {
            goto LABEL_283;
          }
          WebKit::WebPageProxy::pageExtendedBackgroundColorDidChange((WebKit::WebPageProxy *)v11, (const WebCore::Color *)&v1322);
          if (!v1322.request.includeSnapshot) {
            goto LABEL_283;
          }
          goto LABEL_201;
        case 0x7EEu:
          IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v8);
          goto LABEL_283;
      }
    }
LABEL_181:
    if (v15 == 2086 && *(unsigned char *)(v13 + 15))
    {
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v8, v1306);
      if (!LOBYTE(v1306[1]))
      {
        v236 = *(WTF::StringImpl **)v8;
        uint64_t v237 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v238 = *((void *)v8 + 3);
        if (!v238
          || !v237
          || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v238 + 16))(v238, v236),
              !LOBYTE(v1306[1])))
        {
          LOBYTE(v1322.request.point.m_x) = 0;
          LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
LABEL_198:
          if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier))
          {
            v239 = *(WTF::StringImpl **)v8;
            uint64_t v240 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v241 = *((void *)v8 + 3);
            if (!v241) {
              goto LABEL_283;
            }
            if (!v240) {
              goto LABEL_283;
            }
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v241 + 16))(v241, v239);
            if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)) {
              goto LABEL_283;
            }
          }
          WebKit::WebPageProxy::showColorPicker(v11, (uint64_t)&v1322, (uint64_t)&v1322.request.includeSnapshot, (uint64_t)&v1322.isLink);
          if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)) {
            goto LABEL_283;
          }
          WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.isLink, v93);
          goto LABEL_201;
        }
      }
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v8, (uint64_t)v1315);
      if (!v1315[16]
        || (IPC::Decoder::decode<WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)v8, (uint64_t)v1364), !v1364[16]))
      {
        LOBYTE(v1322.request.point.m_x) = 0;
        LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
LABEL_196:
        if (LOBYTE(v1306[1]))
        {
          if (((unint64_t)v1306[0] & 0x8000000000000) != 0)
          {
            uint64_t v154 = (unsigned int *)((unint64_t)v1306[0] & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v1306[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v154);
              WTF::fastFree((WTF *)v154, v90);
            }
          }
        }
        goto LABEL_198;
      }
      if (LOBYTE(v1306[1]) && v1315[16])
      {
        WebCore::Color::Color();
        *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)v1315;
        uint64_t v91 = *(void *)v1364;
        *(void *)v1364 = 0;
        *(void *)&v1322.int isLink = v91;
        uint64_t v92 = *(void *)&v1364[8];
        *(void *)&v1364[8] = 0;
        *(void *)&v1322.isContentEditable = v92;
        LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 1;
        if (v1364[16]) {
          WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1364, v90);
        }
        goto LABEL_196;
      }
LABEL_2796:
      __break(1u);
LABEL_2797:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, (uint64_t)&v1322);
      if (v1322.canBeValid) {
        WebKit::WebPageProxy::focusRemoteFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot);
      }
      goto LABEL_283;
    }
    if (v15 == 2065 && *(unsigned char *)(v13 + 15))
    {
      IPC::Decoder::decode<std::tuple<WebCore::Color>>((uint64_t *)v8, &v1322);
      if (!v1322.request.includeSnapshot) {
        goto LABEL_283;
      }
      WebKit::WebPageProxy::setColorPickerColor(v11, (const Color *)&v1322);
      if (!v1322.request.includeSnapshot) {
        goto LABEL_283;
      }
LABEL_201:
      if ((*(void *)&v1322.request.point & 0x8000000000000) == 0) {
        goto LABEL_283;
      }
      m_identifier = (WTF *)(*(void *)&v1322.request.point & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v1322.request.point & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) != 1) {
        goto LABEL_283;
      }
      atomic_store(1u, (unsigned int *)m_identifier);
      goto LABEL_158;
    }
    if (v15 == 1965 && *(unsigned char *)(v13 + 15))
    {
      WebKit::WebPageProxy::endColorPicker(v11);
      goto LABEL_283;
    }
    if (v15 == 2089 && *(unsigned char *)(v13 + 18))
    {
      IPC::ArgumentCoder<WebCore::DataListSuggestionInformation,void>::decode((uint64_t *)v8, (uint64_t)&v1322);
      if (LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier))
      {
        char m_x = v1322.request.point.m_x;
        *(void *)&v1364[8] = *(void *)&v1322.request.includeSnapshot;
        uint64_t v96 = *(void *)&v1322.canBeValid;
        *(void *)&v1322.request.includeSnapshot = 0;
        *(void *)&v1322.canBeValid = 0;
        *(void *)&v1364[16] = v96;
        *(_OWORD *)&v1364[24] = *(_OWORD *)&v1322.isLink;
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.request.includeSnapshot, v94);
        v1364[0] = m_x;
        v1364[40] = 1;
        WebKit::WebPageProxy::showDataListSuggestions(v11, (uint64_t)v1364);
        if (v1364[40]) {
          WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1364[8], v97);
        }
        goto LABEL_283;
      }
      v290 = *(WTF::StringImpl **)v8;
      uint64_t v291 = *((void *)v8 + 1);
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v292 = *((void *)v8 + 3);
      if (!v292 || !v291) {
        goto LABEL_285;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v292 + 16))(v292, v290);
LABEL_698:
      unint64_t v110 = *(WTF::StringImpl **)v8;
      uint64_t v114 = *((void *)v8 + 1);
      uint64_t v109 = *((void *)v8 + 3);
LABEL_699:
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      if (!v109) {
        goto LABEL_283;
      }
LABEL_700:
      if (!v114) {
        goto LABEL_283;
      }
LABEL_701:
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v109 + 16))(v109, v110);
      goto LABEL_283;
    }
    if (v15 == 1982 && *(unsigned char *)(v13 + 18))
    {
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
      if (!v1322.request.includeSnapshot) {
        goto LABEL_283;
      }
      WebKit::WebPageProxy::handleKeydownInDataList(v11, (const WTF::String *)&v1322);
      if (!v1322.request.includeSnapshot) {
        goto LABEL_283;
      }
LABEL_85:
      point = (WTF::StringImpl *)v1322.request.point;
      v1322.request.point = 0;
      if (!point) {
        goto LABEL_283;
      }
      goto LABEL_147;
    }
    if (v15 == 1966 && *(unsigned char *)(v13 + 18))
    {
      WebKit::WebPageProxy::endDataListSuggestions(v11);
      goto LABEL_283;
    }
    uint64_t v98 = &v1322;
    if (*((unsigned __int16 *)v8 + 25) <= 0x7AEu)
    {
      switch(*((_WORD *)v8 + 25))
      {
        case 0x75F:
          IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>((IPC::Decoder *)v8, &v1322);
          if (!(_BYTE)v1360) {
            goto LABEL_283;
          }
          uint64_t v99 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
          if (!v100) {
            goto LABEL_227;
          }
          *(void *)v1364 = v99;
          uint64_t v8 = &v1364[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
          unint64_t v101 = (void *)WTF::fastMalloc((WTF *)0x18);
          *unint64_t v101 = &unk_1EEA02B00;
          v101[1] = *(void *)v1364;
          uint64_t v102 = *(void *)&v1364[8];
          *(void *)&v1364[8] = 0;
          v101[2] = v102;
          *(void *)v1315 = v101;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
          if (!(_BYTE)v1360) {
            goto LABEL_2796;
          }
          WebKit::WebPageProxy::decidePolicyForNavigationActionAsync(v11, (uint64_t *)&v1322.request.point, (uint64_t *)v1315);
          uint64_t v103 = *(void *)v1315;
          *(void *)v1315 = 0;
          if (v103) {
            (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
          }
LABEL_227:
          if (!(_BYTE)v1360) {
            goto LABEL_283;
          }
          goto LABEL_609;
        case 0x760:
          IPC::Decoder::decode<WebKit::NavigationActionData>((IPC::Decoder *)v8, (uint64_t)v1364);
          if (v1415)
          {
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
            int v195 = v1315[8];
            if (v1315[8])
            {
              if (!v1415) {
                goto LABEL_2796;
              }
              WebKit::NavigationActionData::NavigationActionData((uint64_t)&v1322, (uint64_t)v1364);
              v1360 = *(WTF::StringImpl **)v1315;
              int v195 = 1;
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
            }
            unsigned __int8 v1361 = v195;
            if (v1415)
            {
              WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v1364);
              int v195 = v1361;
            }
            if (v195) {
              goto LABEL_409;
            }
          }
          else
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            unsigned __int8 v1361 = 0;
          }
          v250 = *(WTF::StringImpl **)v8;
          uint64_t v251 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v252 = *((void *)v8 + 3);
          if (!v252) {
            goto LABEL_283;
          }
          if (!v251) {
            goto LABEL_283;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v252 + 16))(v252, v250);
          if (!v1361) {
            goto LABEL_283;
          }
LABEL_409:
          uint64_t v196 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
          if ((_BYTE)v197)
          {
            *(void *)v1364 = v196;
            uint64_t v8 = &v1364[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
            v198 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v198 = &unk_1EEA02B28;
            v198[1] = *(void *)v1364;
            uint64_t v199 = *(void *)&v1364[8];
            *(void *)&v1364[8] = 0;
            v198[2] = v199;
            *(void *)v1315 = v198;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
            if (!v1361) {
              goto LABEL_2796;
            }
            WebKit::WebPageProxy::decidePolicyForNewWindowAction(v11, v10, (uint64_t)&v1322, (_DWORD **)&v1360, (uint64_t *)v1315);
            uint64_t v200 = *(void *)v1315;
            *(void *)v1315 = 0;
            if (v200) {
              (*(void (**)(uint64_t))(*(void *)v200 + 8))(v200);
            }
          }
          if (v1361)
          {
            v201 = v1360;
            v1360 = 0;
            if (v201)
            {
              if (*(_DWORD *)v201 == 2) {
                WTF::StringImpl::destroy(v201, v197);
              }
              else {
                *(_DWORD *)v201 -= 2;
              }
            }
LABEL_609:
            WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v1322);
          }
          goto LABEL_283;
        case 0x761:
          IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>>((IPC::Decoder *)v8, &v1322);
          if (!v1347) {
            goto LABEL_283;
          }
          uint64_t v181 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
          if (!(_BYTE)v182) {
            goto LABEL_379;
          }
          *(void *)v1364 = v181;
          uint64_t v8 = &v1364[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
          uint64_t v183 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v183 = &unk_1EEA02AD8;
          v183[1] = *(void *)v1364;
          uint64_t v184 = *(void *)&v1364[8];
          *(void *)&v1364[8] = 0;
          v183[2] = v184;
          *(void *)v1315 = v183;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
          if (!v1347) {
            goto LABEL_2796;
          }
          WebKit::WebPageProxy::decidePolicyForResponse(v11, (WebKit::AuxiliaryProcessProxy *)v10, (uint64_t)&v1322, *(void *)&v1322.linkIndicator.textBoundingRectInRootViewCoordinates.m_location, SLOBYTE(v1322.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width), (uint64_t)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, (WebCore::ResourceRequestBase *)((char *)&v1330 + 8), v1344[0], &v1345, v1346, (uint64_t *)v1315);
          uint64_t v185 = *(void *)v1315;
          *(void *)v1315 = 0;
          if (v185) {
            (*(void (**)(uint64_t))(*(void *)v185 + 8))(v185);
          }
LABEL_379:
          if (v1347) {
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>::~__tuple_impl((uint64_t)&v1322, v182);
          }
          goto LABEL_283;
        case 0x766:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, (uint64_t)&v1322);
          if (v1322.canBeValid) {
            WebKit::WebPageProxy::didCancelClientRedirectForFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot);
          }
          goto LABEL_283;
        case 0x76A:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, (uint64_t)&v1322);
          if (v1322.canBeValid) {
            WebKit::WebPageProxy::didChangeMainDocument(v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot);
          }
          goto LABEL_283;
        case 0x76C:
          double v179 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)v8));
          if (v180) {
            WebKit::WebPageProxy::didChangeProgress((WebKit::WebPageProxy *)v11, v179);
          }
          goto LABEL_283;
        case 0x76D:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL>>((IPC::Decoder *)v8, &v1322);
          if (!LOBYTE(v1322.url.m_string.m_impl.m_ptr)) {
            goto LABEL_283;
          }
          WebKit::WebPageProxy::didChangeProvisionalURLForFrame((WebKit::WebPageProxy *)v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, *(uint64_t *)&v1322.isLink, (WTF::StringImpl **)&v1322.isContentEditable);
          if (!LOBYTE(v1322.url.m_string.m_impl.m_ptr)) {
            goto LABEL_283;
          }
          goto LABEL_393;
        case 0x771:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>>((IPC::Decoder *)v8, &v1322);
          if (BYTE8(v1330))
          {
            WebKit::WebPageProxy::didCommitLoadForFrame(v11, (WTF::String *)v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, &v1322.canBeValid, (uint64_t)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, v1327, *((uint64_t *)&v1327 + 1), (WTF::StringImpl **)v1328, (__int16)v1328[1], (const void **)&v1329, SWORD4(v1329), SBYTE10(v1329), SBYTE11(v1329), BYTE12(v1329), (CFTypeRef **)&v1330);
            if (BYTE8(v1330)) {
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>::~__tuple_impl((uint64_t)&v1322, v192);
            }
          }
          goto LABEL_283;
        case 0x775:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>((IPC::Decoder *)v8, &v1322);
          if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)) {
            goto LABEL_283;
          }
          WebKit::WebPageProxy::didCreateSubframe(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, *(uint64_t *)&v1322.isLink, (WTF::StringImpl **)&v1322.isContentEditable);
          if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)) {
            goto LABEL_283;
          }
LABEL_393:
          point = *(WTF::StringImpl **)&v1322.isContentEditable;
          *(void *)&v1322.isContentEditable = 0;
          if (!point) {
            goto LABEL_283;
          }
          goto LABEL_147;
        case 0x776:
          uint64_t v193 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((IPC::Decoder *)v8);
          if (v194) {
            WebKit::WebPageProxy::didDestroyNavigation(v11, v193);
          }
          goto LABEL_283;
        case 0x778:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::UserData>>((uint64_t)&v1322, (IPC::Decoder *)v8);
          if (!v1322.isLink) {
            goto LABEL_283;
          }
          WebKit::WebPageProxy::didDisplayInsecureContentForFrame((void *)v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (CFTypeRef **)&v1322.canBeValid);
          goto LABEL_419;
        case 0x77A:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315);
          if (!v1315[16]) {
            goto LABEL_1191;
          }
          IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1364);
          if (!v1364[40]) {
            goto LABEL_1191;
          }
          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1306);
          if (!LOBYTE(v1306[1]))
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) = 0;
            if (v1364[40])
            {
              v499 = *(WTF::StringImpl **)v1364;
              *(void *)v1364 = 0;
              if (v499)
              {
                if (*(_DWORD *)v499 == 2) {
                  WTF::StringImpl::destroy(v499, v210);
                }
                else {
                  *(_DWORD *)v499 -= 2;
                }
              }
            }
            goto LABEL_1191;
          }
          if (!v1315[16] || !v1364[40]) {
            goto LABEL_2796;
          }
          v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1315;
          *(_OWORD *)&v1322.int isLink = *(_OWORD *)&v1364[8];
          v1322.containerScrollingNodeID = *(Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes>>::MarkableTraits> *)&v1364[24];
          *(void *)&v1322.canBeValid = *(void *)v1364;
          *(WTF::StringImpl **)&v1322.BOOL isDataDetectorLink = v1306[0];
          LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) = 1;
          WebKit::WebPageProxy::didExplicitOpenForFrame(v11, v10, *(uint64_t *)v1315, *(uint64_t *)&v1315[8], (WTF::StringImpl **)&v1322.canBeValid, (uint64_t *)&v1322.isDataDetectorLink);
          if (!LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x)) {
            goto LABEL_283;
          }
          v211 = *(WTF::StringImpl **)&v1322.isDataDetectorLink;
          *(void *)&v1322.BOOL isDataDetectorLink = 0;
          if (v211)
          {
            if (*(_DWORD *)v211 == 2) {
              WTF::StringImpl::destroy(v211, v48);
            }
            else {
              *(_DWORD *)v211 -= 2;
            }
          }
          goto LABEL_589;
        case 0x77B:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1294);
          if (v1295)
          {
            IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)v8, (uint64_t)v1364);
            if (LOBYTE(v1376.m_location.m_x))
            {
              IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v8, (uint64_t)v1315);
              if (v1321
                && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1296), v1297))
              {
                IPC::Decoder::decode<WebCore::ResourceError>((IPC::Decoder *)v8, (uint64_t)v1306);
                if (v1314 && (IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)&v1304), v1305))
                {
                  if (!v1295 || !LOBYTE(v1376.m_location.m_x) || !v1321 || !v1297 || !v1314) {
                    goto LABEL_2796;
                  }
                  v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1294;
                  std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1322.canBeValid, (uint64_t)v1364);
                  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, (uint64_t)v1315);
                  long long v206 = *(_OWORD *)v1306;
                  v1306[0] = 0;
                  v1306[1] = 0;
                  long long v1327 = *(_OWORD *)v1296;
                  *(_OWORD *)v1328 = v206;
                  long long v1329 = v1307;
                  long long v1330 = v1308;
                  LODWORD(v1307) = v1307 & 0xFFFFFFFE;
                  v1331 = v1309;
                  int v1332 = v1310;
                  __int16 v1333 = v1311;
                  v207 = v1312;
                  v1309 = 0;
                  v1312 = 0;
                  CFTypeRef v1334 = v207;
                  char v1335 = v1313;
                  v208 = (CFTypeRef *)v1304;
                  if (v1304) {
                    CFRetain(*((CFTypeRef *)v1304 + 1));
                  }
                  v1336 = v208;
                  LOBYTE(v1337) = 1;
                  if (v1305)
                  {
                    v209 = v1304;
                    v1304 = 0;
                    if (v209) {
                      CFRelease(*((CFTypeRef *)v209 + 1));
                    }
                  }
                }
                else
                {
                  LOBYTE(v1322.request.point.m_x) = 0;
                  LOBYTE(v1337) = 0;
                }
                std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1306, v205);
              }
              else
              {
                LOBYTE(v1322.request.point.m_x) = 0;
                LOBYTE(v1337) = 0;
              }
              std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v1315);
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
              LOBYTE(v1337) = 0;
            }
            std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v204);
            if (LOBYTE(v1337))
            {
LABEL_624:
              WebKit::WebPageProxy::didFailLoadForFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, &v1322.canBeValid, (WebCore::ResourceRequestBase *)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, v1327, SBYTE8(v1327), (const WebCore::ResourceError *)v1328, &v1336);
              if (!LOBYTE(v1337)) {
                goto LABEL_283;
              }
              v277 = v1336;
              v1336 = 0;
              if (v277) {
                CFRelease(v277[1]);
              }
              CFTypeRef v278 = v1334;
              CFTypeRef v1334 = 0;
              if (v278) {
                CFRelease(v278);
              }
              v279 = v1331;
              v1331 = 0;
              if (v279)
              {
                if (*(_DWORD *)v279 == 2) {
                  WTF::StringImpl::destroy(v279, v276);
                }
                else {
                  *(_DWORD *)v279 -= 2;
                }
              }
              v280 = (WTF::StringImpl *)v1328[1];
              v1328[1] = 0;
              if (v280)
              {
                if (*(_DWORD *)v280 == 2) {
                  WTF::StringImpl::destroy(v280, v276);
                }
                else {
                  *(_DWORD *)v280 -= 2;
                }
              }
              v281 = (WTF::StringImpl *)v1328[0];
              v1328[0] = 0;
              if (v281)
              {
                if (*(_DWORD *)v281 == 2) {
                  WTF::StringImpl::destroy(v281, v276);
                }
                else {
                  *(_DWORD *)v281 -= 2;
                }
              }
LABEL_641:
              CFTypeRef v282 = v1326;
              CFTypeRef v1326 = 0;
              if (v282) {
                CFRelease(v282);
              }
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates);
LABEL_270:
              m_hotSpot = (WTF::StringImpl *)v1322.cursor.var0.__val_.m_hotSpot;
              v1322.cursor.var0.__val_.m_hotSpot = 0;
              if (m_hotSpot)
              {
                if (*(_DWORD *)m_hotSpot == 2) {
                  WTF::StringImpl::destroy(m_hotSpot, v130);
                }
                else {
                  *(_DWORD *)m_hotSpot -= 2;
                }
              }
              if (LODWORD(v1322.cursor.var0.__val_.m_image.m_ptr) != -1) {
                ((void (*)(unsigned char *, float *))off_1EEA02A40[LODWORD(v1322.cursor.var0.__val_.m_image.m_ptr)])(v1364, &v1322.lineCaretExtent.m_location.m_y);
              }
              LODWORD(v1322.cursor.var0.__val_.m_image.m_ptr) = -1;
              uint64_t v132 = *(const void **)&v1322.caretLength;
              *(void *)&v1322.caretLength = 0;
              if (v132) {
                CFRelease(v132);
              }
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v1322.isLink);
              goto LABEL_283;
            }
          }
          else
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1337) = 0;
          }
          v531 = *(WTF::StringImpl **)v8;
          uint64_t v532 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v533 = *((void *)v8 + 3);
          if (!v533) {
            goto LABEL_283;
          }
          if (!v532) {
            goto LABEL_283;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v533 + 16))(v533, v531);
          if (!LOBYTE(v1337)) {
            goto LABEL_283;
          }
          goto LABEL_624;
        case 0x77C:
          IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>>((IPC::Decoder *)v8, &v1322);
          if (v1338)
          {
            WebKit::WebPageProxy::didFailProvisionalLoadForFrame(v11, v10, (uint64_t)&v1322, (uint64_t)&v1322.linkIndicator.textBoundingRectInRootViewCoordinates, v1325, (char)v1326, (WTF::StringImpl **)&v1327, (uint64_t)&v1327 + 8, v1335, (uint64_t *)&v1336, LOBYTE(v1337));
            if (v1338) {
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>::~__tuple_impl((uint64_t)&v1322, v203);
            }
          }
          goto LABEL_283;
        case 0x77F:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315);
          if (v1315[16]
            && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1364), v1364[16])&& (IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)v1306), LOBYTE(v1306[1])))
          {
            uint64_t v216 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)v8);
            uint64_t v218 = v217;
            if (v217)
            {
              if (!v1315[16] || !v1364[16] || !LOBYTE(v1306[1])) {
                goto LABEL_2796;
              }
              unint64_t v219 = v216;
              v220 = v1306[0];
              v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1315;
              *(_OWORD *)&v1322.canBeValid = *(_OWORD *)v1364;
              if (v1306[0]) {
                CFRetain(*((CFTypeRef *)v1306[0] + 1));
              }
              *(void *)&v1322.isContentEditable = v220;
              v1322.containerScrollingNodeID.m_value.m_object.m_identifier = v219;
              double v3 = *(double *)&v219;
              int v221 = 1;
            }
            else
            {
              int v221 = 0;
              LOBYTE(v1322.request.point.m_x) = 0;
            }
            LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v221;
            if (LOBYTE(v1306[1]))
            {
              v272 = v1306[0];
              v1306[0] = 0;
              if (v272) {
                CFRelease(*((CFTypeRef *)v272 + 1));
              }
            }
            if (v218)
            {
LABEL_604:
              if (v221)
              {
                WebKit::WebPageProxy::didFinishDocumentLoadForFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, v1322.isLink, (CFTypeRef **)&v1322.isContentEditable, v3);
                if (LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                {
                  uint64_t v273 = *(void *)&v1322.isContentEditable;
                  *(void *)&v1322.isContentEditable = 0;
                  if (v273) {
                    CFRelease(*(CFTypeRef *)(v273 + 8));
                  }
                }
              }
              goto LABEL_283;
            }
          }
          else
          {
            int v221 = 0;
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
          }
          v233 = *(WTF::StringImpl **)v8;
          uint64_t v234 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v235 = *((void *)v8 + 3);
          if (v235 && v234) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v235 + 16))(v235, v233);
          }
          goto LABEL_604;
        case 0x780:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1296);
          if (v1297)
          {
            IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)v8, (uint64_t)v1364);
            if (LOBYTE(v1376.m_location.m_x))
            {
              IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v8, (uint64_t)v1315);
              if (v1321
                && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1306), (_BYTE)v1307)&& (IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)v1294), LOBYTE(v1294[1])))
              {
                if (!v1297 || !LOBYTE(v1376.m_location.m_x) || !v1321 || !(_BYTE)v1307) {
                  goto LABEL_2796;
                }
                v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1296;
                std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1322.canBeValid, (uint64_t)v1364);
                std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, (uint64_t)v1315);
                long long v1327 = *(_OWORD *)v1306;
                v162 = v1294[0];
                if (v1294[0]) {
                  CFRetain(*((CFTypeRef *)v1294[0] + 1));
                }
                v1328[0] = v162;
                LOBYTE(v1328[1]) = 1;
                if (LOBYTE(v1294[1]))
                {
                  v163 = v1294[0];
                  v1294[0] = 0;
                  if (v163) {
                    CFRelease(*((CFTypeRef *)v163 + 1));
                  }
                }
              }
              else
              {
                LOBYTE(v1322.request.point.m_x) = 0;
                LOBYTE(v1328[1]) = 0;
              }
              std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v1315);
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
              LOBYTE(v1328[1]) = 0;
            }
            std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v161);
            if (LOBYTE(v1328[1]))
            {
LABEL_533:
              WebKit::WebPageProxy::didFinishLoadForFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, &v1322.canBeValid, (uint64_t)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, v1327, SBYTE8(v1327), (CFTypeRef **)v1328);
              if (!LOBYTE(v1328[1])) {
                goto LABEL_283;
              }
              v256 = (CFTypeRef *)v1328[0];
              v1328[0] = 0;
              if (v256) {
                CFRelease(v256[1]);
              }
              goto LABEL_641;
            }
          }
          else
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1328[1]) = 0;
          }
          v528 = *(WTF::StringImpl **)v8;
          uint64_t v529 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v530 = *((void *)v8 + 3);
          if (!v530) {
            goto LABEL_283;
          }
          if (!v529) {
            goto LABEL_283;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v530 + 16))(v530, v528);
          if (!LOBYTE(v1328[1])) {
            goto LABEL_283;
          }
          goto LABEL_533;
        case 0x783:
          WebKit::WebPageProxy::didFinishProgress((WebKit::WebPageProxy *)v11);
          goto LABEL_283;
        case 0x785:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::UserData>>((uint64_t)&v1322, (IPC::Decoder *)v8);
          if (!v1322.isLink) {
            goto LABEL_283;
          }
          WTF::isIntegralOrPointerType((WTF *)v11);
          goto LABEL_419;
        case 0x786:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1364);
          if (v1364[16] && (IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)v1315), v1315[8]))
          {
            uint64_t v186 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)v8);
            uint64_t v188 = v187;
            if (v187)
            {
              if (!v1364[16] || !v1315[8]) {
                goto LABEL_2796;
              }
              double v189 = *(double *)&v186;
              uint64_t v190 = *(void *)v1315;
              v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1364;
              if (*(void *)v1315) {
                CFRetain(*(CFTypeRef *)(*(void *)v1315 + 8));
              }
              *(void *)&v1322.canBeValid = v190;
              *(double *)&v1322.int isLink = v189;
              double v3 = v189;
              BOOL v191 = 1;
            }
            else
            {
              BOOL v191 = 0;
              LOBYTE(v1322.request.point.m_x) = 0;
            }
            v1322.isContentEditable = v191;
            if (v1315[8])
            {
              uint64_t v268 = *(void *)v1315;
              *(void *)v1315 = 0;
              if (v268) {
                CFRelease(*(CFTypeRef *)(v268 + 8));
              }
            }
            if (v188)
            {
LABEL_572:
              if (!v191) {
                goto LABEL_283;
              }
              WebKit::WebPageProxy::didFirstVisuallyNonEmptyLayoutForFrame((WebKit::WebPageProxy *)v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (CFTypeRef **)&v1322.canBeValid, v3);
              if (!v1322.isContentEditable) {
                goto LABEL_283;
              }
LABEL_574:
              uint64_t v269 = *(void *)&v1322.canBeValid;
              *(void *)&v1322.canBeValid = 0;
              if (!v269) {
                goto LABEL_283;
              }
              v270 = *(const void **)(v269 + 8);
              goto LABEL_576;
            }
          }
          else
          {
            BOOL v191 = 0;
            LOBYTE(v1322.request.point.m_x) = 0;
            v1322.isContentEditable = 0;
          }
          v244 = *(WTF::StringImpl **)v8;
          uint64_t v245 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v246 = *((void *)v8 + 3);
          if (v246 && v245) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v246 + 16))(v246, v244);
          }
          goto LABEL_572;
        case 0x792:
          uint64_t v212 = IPC::Decoder::decode<WTF::OptionSet<WebCore::LayoutMilestone>>((IPC::Decoder *)v8);
          if ((v212 & 0xFF0000) != 0)
          {
            unsigned __int16 v213 = v212;
            uint64_t v214 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)v8);
            if (v215)
            {
              WebKit::WebPageProxy::didReachLayoutMilestone(v11, v213, *(double *)&v214);
              goto LABEL_283;
            }
          }
          unint64_t v104 = *(WTF::StringImpl **)v8;
          uint64_t v105 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v106 = *((void *)v8 + 3);
          if (v106) {
            goto LABEL_258;
          }
          goto LABEL_283;
        case 0x796:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>>((IPC::Decoder *)v8, &v1322);
          if (v1322.cursor.var0.__null_state_) {
            WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrame((WebKit::WebPageProxy *)v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, v1322.isLink, (WebCore::ResourceRequestBase *)&v1322.isContentEditable, (CFTypeRef **)&v1322.lineCaretExtent.m_size.m_height);
          }
          std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ResourceRequest,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322);
          goto LABEL_283;
        case 0x797:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1364);
          if (v1364[16] && (IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1306), LOBYTE(v1306[1])))
          {
            IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)v1315);
            int v165 = v1315[8];
            if (v1315[8])
            {
              if (!v1364[16] || !LOBYTE(v1306[1])) {
                goto LABEL_2796;
              }
              v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1364;
              int v166 = v1306[0];
              v1306[0] = 0;
              *(void *)&v1322.canBeValid = v166;
              uint64_t v167 = *(void *)v1315;
              if (*(void *)v1315)
              {
                CFRetain(*(CFTypeRef *)(*(void *)v1315 + 8));
                *(void *)&v1322.int isLink = v167;
                int v168 = 1;
                v1322.isContentEditable = 1;
                if (v1315[8])
                {
                  uint64_t v169 = *(void *)v1315;
                  *(void *)v1315 = 0;
                  if (v169) {
                    CFRelease(*(CFTypeRef *)(v169 + 8));
                  }
                }
              }
              else
              {
                *(void *)&v1322.int isLink = 0;
                int v168 = 1;
                v1322.isContentEditable = 1;
              }
            }
            else
            {
              int v168 = 0;
              LOBYTE(v1322.request.point.m_x) = 0;
              v1322.isContentEditable = 0;
            }
            if (LOBYTE(v1306[1]))
            {
              v170 = v1306[0];
              v1306[0] = 0;
              if (v170)
              {
                if (*(_DWORD *)v170 == 2) {
                  WTF::StringImpl::destroy(v170, v164);
                }
                else {
                  *(_DWORD *)v170 -= 2;
                }
              }
            }
            if (v165)
            {
LABEL_585:
              if (!v168) {
                goto LABEL_283;
              }
              WebKit::WebPageProxy::didReceiveTitleForFrame((const char *)v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (WTF::StringImpl **)&v1322.canBeValid);
              if (!v1322.isContentEditable) {
                goto LABEL_283;
              }
              uint64_t v271 = *(void *)&v1322.isLink;
              *(void *)&v1322.int isLink = 0;
              if (v271) {
                CFRelease(*(CFTypeRef *)(v271 + 8));
              }
LABEL_589:
              point = *(WTF::StringImpl **)&v1322.canBeValid;
              *(void *)&v1322.canBeValid = 0;
              if (!point) {
                goto LABEL_283;
              }
              goto LABEL_147;
            }
          }
          else
          {
            int v168 = 0;
            LOBYTE(v1322.request.point.m_x) = 0;
            v1322.isContentEditable = 0;
          }
          v247 = *(WTF::StringImpl **)v8;
          uint64_t v248 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v249 = *((void *)v8 + 3);
          if (v249 && v248) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v249 + 16))(v249, v247);
          }
          goto LABEL_585;
        case 0x79B:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::UserData>>((uint64_t)&v1322, (IPC::Decoder *)v8);
          if (!v1322.isLink) {
            goto LABEL_283;
          }
          WebKit::WebPageProxy::didRunInsecureContentForFrame((void *)v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (CFTypeRef **)&v1322.canBeValid);
LABEL_419:
          if (!v1322.isLink) {
            goto LABEL_283;
          }
          goto LABEL_574;
        case 0x79C:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1306);
          if (!(_BYTE)v1307) {
            goto LABEL_1191;
          }
          IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315);
          if (!v1315[16]) {
            goto LABEL_1191;
          }
          unsigned __int16 v171 = IPC::Decoder::decode<WebCore::VideoCodecType>(v8);
          if (v171 < 0x100u) {
            goto LABEL_1191;
          }
          BOOL v172 = v171;
          IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1364);
          if (!v1364[40]) {
            goto LABEL_1191;
          }
          IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)v1296);
          int v174 = LOBYTE(v1296[1]);
          if (LOBYTE(v1296[1]))
          {
            if (!(_BYTE)v1307 || !v1315[16] || !v1364[40]) {
              goto LABEL_2796;
            }
            v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1306;
            *(_OWORD *)&v1322.canBeValid = *(_OWORD *)v1315;
            v1322.isContentEditable = v172;
            unint64_t v175 = *(void *)v1364;
            *(void *)v1364 = 0;
            v1322.containerScrollingNodeID.m_value.m_object.m_identifier = v175;
            *(_OWORD *)&v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = *(_OWORD *)&v1364[8];
            *(_OWORD *)&v1322.adjustedPointForNodeRespondingToClickEvents.char m_x = *(_OWORD *)&v1364[24];
            *(_DWORD *)&v1364[8] &= ~1u;
            v176 = v1296[0];
            if (v1296[0])
            {
              CFRetain(*((CFTypeRef *)v1296[0] + 1));
              *((void *)&v1322.url + 1) = v176;
              LOBYTE(v1322.url.m_userEnd) = 1;
              if (LOBYTE(v1296[1]))
              {
                v177 = v1296[0];
                v1296[0] = 0;
                if (v177) {
                  CFRelease(*((CFTypeRef *)v177 + 1));
                }
              }
            }
            else
            {
              *((void *)&v1322.url + 1) = 0;
              LOBYTE(v1322.url.m_userEnd) = 1;
            }
          }
          else
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1322.url.m_userEnd) = 0;
          }
          if (v1364[40])
          {
            v178 = *(WTF::StringImpl **)v1364;
            *(void *)v1364 = 0;
            if (v178)
            {
              if (*(_DWORD *)v178 == 2) {
                WTF::StringImpl::destroy(v178, v173);
              }
              else {
                *(_DWORD *)v178 -= 2;
              }
            }
          }
          if (!v174)
          {
LABEL_1191:
            unint64_t v110 = *(WTF::StringImpl **)v8;
            uint64_t v464 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v109 = *((void *)v8 + 3);
            if (!v109) {
              goto LABEL_283;
            }
            goto LABEL_1192;
          }
          WebKit::WebPageProxy::didSameDocumentNavigationForFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, v1322.isLink, v172, (WTF::StringImpl **)&v1322.containerScrollingNodeID, (CFTypeRef **)&v1322.url + 1);
          if (LOBYTE(v1322.url.m_userEnd))
          {
            uint64_t v293 = *((void *)&v1322.url + 1);
            *((void *)&v1322.url + 1) = 0;
            if (v293) {
              CFRelease(*(CFTypeRef *)(v293 + 8));
            }
            point = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
            v1322.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
            if (point) {
              goto LABEL_147;
            }
          }
          goto LABEL_283;
        case 0x79D:
          unsigned __int16 v155 = IPC::Decoder::decode<WebCore::VideoCodecType>(v8);
          if (v155 <= 0xFFu)
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            char v1363 = 0;
          }
          else
          {
            char v156 = v155;
            IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1315);
            if ((_BYTE)v1317)
            {
              IPC::Decoder::decode<WebKit::NavigationActionData>((IPC::Decoder *)v8, (uint64_t)v1364);
              if (v1415)
              {
                IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)v1306);
                if (LOBYTE(v1306[1]))
                {
                  if (!(_BYTE)v1317 || !v1415) {
                    goto LABEL_2796;
                  }
                  LOBYTE(v1322.request.point.m_x) = v156;
                  uint64_t v158 = *(void *)v1315;
                  *(void *)v1315 = 0;
                  *(void *)&v1322.request.includeSnapshot = v158;
                  *(_OWORD *)&v1322.canBeValid = *(_OWORD *)&v1315[8];
                  *(_OWORD *)&v1322.isContentEditable = v1316;
                  *(_DWORD *)&v1315[8] &= ~1u;
                  WebKit::NavigationActionData::NavigationActionData((uint64_t)&v1322.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t)v1364);
                  BOOL v159 = (CFTypeRef *)v1306[0];
                  if (v1306[0]) {
                    CFRetain(*((CFTypeRef *)v1306[0] + 1));
                  }
                  v1362 = v159;
                  char v1363 = 1;
                  if (LOBYTE(v1306[1]))
                  {
                    uint64_t v160 = v1306[0];
                    v1306[0] = 0;
                    if (v160) {
                      CFRelease(*((CFTypeRef *)v160 + 1));
                    }
                  }
                }
                else
                {
                  LOBYTE(v1322.request.point.m_x) = 0;
                  char v1363 = 0;
                }
                if (v1415) {
                  WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v1364);
                }
              }
              else
              {
                LOBYTE(v1322.request.point.m_x) = 0;
                char v1363 = 0;
              }
              if ((_BYTE)v1317)
              {
                v257 = *(WTF::StringImpl **)v1315;
                *(void *)v1315 = 0;
                if (v257)
                {
                  if (*(_DWORD *)v257 == 2) {
                    WTF::StringImpl::destroy(v257, v157);
                  }
                  else {
                    *(_DWORD *)v257 -= 2;
                  }
                }
              }
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
              char v1363 = 0;
            }
            if (v1363)
            {
LABEL_544:
              uint64_t v258 = *(void *)&v1322.request.includeSnapshot;
              *(void *)&v1322.request.includeSnapshot = 0;
              *(void *)v1364 = v258;
              *(_OWORD *)&v1364[8] = *(_OWORD *)&v1322.canBeValid;
              *(_OWORD *)&v1364[24] = *(_OWORD *)&v1322.isContentEditable;
              *(_DWORD *)&v1322.canBeValid &= ~1u;
              WebKit::WebPageProxy::didSameDocumentNavigationForFrameViaJSHistoryAPI(v11, v10, LOBYTE(v1322.request.point.m_x), (WTF::StringImpl **)v1364, (uint64_t)&v1322.containerScrollingNodeID.m_value.m_processIdentifier, &v1362);
              v260 = *(WTF::StringImpl **)v1364;
              *(void *)v1364 = 0;
              if (v260)
              {
                if (*(_DWORD *)v260 == 2) {
                  WTF::StringImpl::destroy(v260, v259);
                }
                else {
                  *(_DWORD *)v260 -= 2;
                }
              }
              if (!v1363) {
                goto LABEL_283;
              }
              v261 = v1362;
              v1362 = 0;
              if (v261) {
                CFRelease(v261[1]);
              }
              WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v1322.containerScrollingNodeID.m_value.m_processIdentifier);
LABEL_552:
              point = *(WTF::StringImpl **)&v1322.request.includeSnapshot;
              *(void *)&v1322.request.includeSnapshot = 0;
              if (!point) {
                goto LABEL_283;
              }
              goto LABEL_147;
            }
          }
          v525 = *(WTF::StringImpl **)v8;
          uint64_t v526 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v527 = *((void *)v8 + 3);
          if (!v527) {
            goto LABEL_283;
          }
          if (!v526) {
            goto LABEL_283;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v527 + 16))(v527, v525);
          if (!v1363) {
            goto LABEL_283;
          }
          goto LABEL_544;
        case 0x79F:
          WebKit::WebPageProxy::didStartProgress((WebKit::WebPageProxy *)v11);
          goto LABEL_283;
        case 0x7A0:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>>((IPC::Decoder *)v8, &v1322);
          if (v1338)
          {
            WebKit::WebPageProxy::didStartProvisionalLoadForFrame((void *)v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, &v1322.canBeValid, (uint64_t)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates, v1327, SBYTE8(v1327), (const WTF::URL *)v1328, v1337, (WTF::URL *)((char *)&v1330 + 8), &v1336);
            if (v1338) {
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::FrameInfoData,WebCore::ResourceRequest,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::URL,WTF::URL,WebKit::UserData,WTF::WallTime>::~__tuple_impl((uint64_t)&v1322, v202);
            }
          }
          goto LABEL_283;
        default:
          goto LABEL_487;
      }
    }
    if (*((unsigned __int16 *)v8 + 25) <= 0x829u)
    {
      switch(v15)
      {
        case 0x7AFu:
          WebKit::WebPageProxy::endDateTimePicker(v11);
          goto LABEL_283;
        case 0x7B0u:
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)&v1322);
          if (v1322.canBeValid)
          {
            uint64_t v222 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)v8);
            if (v223)
            {
              if (v1322.canBeValid)
              {
                WebKit::WebPageProxy::endNetworkRequestsForPageLoadTiming((uint64_t *)v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(double *)&v222);
                goto LABEL_283;
              }
              goto LABEL_2796;
            }
          }
          unint64_t v104 = *(WTF::StringImpl **)v8;
          uint64_t v105 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v106 = *((void *)v8 + 3);
          if (!v106) {
            goto LABEL_283;
          }
          goto LABEL_258;
        case 0x81Du:
          unsigned __int16 v141 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
          if (v141 > 0xFFu)
          {
            WebKit::WebPageProxy::setNetworkRequestsInProgress((WebKit::WebPageProxy *)v11, v141 != 0, v142);
            goto LABEL_283;
          }
          unint64_t v104 = *(WTF::StringImpl **)v8;
          uint64_t v105 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v106 = *((void *)v8 + 3);
          if (!v106) {
            goto LABEL_283;
          }
LABEL_258:
          if (!v105) {
            goto LABEL_283;
          }
          goto LABEL_259;
      }
LABEL_487:
      if (v15 == 2116 && *(unsigned char *)(v13 + 30))
      {
        IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntPoint>>((IPC::Decoder *)v8, &v1322);
        if (v1322.isLink) {
          WebKit::WebPageProxy::updateRemoteFrameSize(v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid);
        }
        goto LABEL_283;
      }
      if (*((unsigned __int16 *)v8 + 25) <= 0x7BCu)
      {
        if (*((unsigned __int16 *)v8 + 25) <= 0x781u)
        {
          switch(*((_WORD *)v8 + 25))
          {
            case 0x74A:
              IPC::Decoder::decode<std::tuple<WTF::UUID,WebCore::TextAnimationData,WebCore::TextIndicatorData>>((uint64_t)&v1322, (IPC::Decoder *)v8);
              if (!LOBYTE(v1322.image.m_ptr)) {
                goto LABEL_283;
              }
              WebKit::WebPageProxy::addTextAnimationForAnimationID((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::UUID *)&v1322, (const TextAnimationData *)&v1322.canBeValid, (const WebCore::TextIndicatorData *)((char *)&v1322.url + 8));
              if (!LOBYTE(v1322.image.m_ptr)) {
                goto LABEL_283;
              }
              goto LABEL_764;
            case 0x74B:
              IPC::Decoder::decode<std::tuple<WTF::UUID,WebCore::TextAnimationData,WebCore::TextIndicatorData>>((uint64_t)&v1322, (IPC::Decoder *)v8);
              if (!LOBYTE(v1322.image.m_ptr)) {
                goto LABEL_283;
              }
              uint64_t v317 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
              if (!(_BYTE)v65) {
                goto LABEL_763;
              }
              *(void *)v1364 = v317;
              uint64_t v8 = &v1364[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
              v318 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v318 = &unk_1EEA02BA0;
              v318[1] = *(void *)v1364;
              uint64_t v319 = *(void *)&v1364[8];
              *(void *)&v1364[8] = 0;
              v318[2] = v319;
              *(void *)v1315 = v318;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
              if (!LOBYTE(v1322.image.m_ptr)) {
                goto LABEL_2796;
              }
              WebKit::WebPageProxy::addTextAnimationForAnimationIDWithCompletionHandler(v11, v10, (unint64_t *)&v1322, (unsigned __int8 *)&v1322.canBeValid, (const WebCore::TextIndicatorData *)((char *)&v1322.url + 8), (uint64_t *)v1315);
              uint64_t v320 = *(void *)v1315;
              *(void *)v1315 = 0;
              if (v320) {
                (*(void (**)(uint64_t))(*(void *)v320 + 8))(v320);
              }
LABEL_763:
              if (!LOBYTE(v1322.image.m_ptr)) {
                goto LABEL_283;
              }
LABEL_764:
              if ((*(void *)&v1322.bounds.m_location & 0x8000000000000) != 0)
              {
                v627 = (unsigned int *)(*(void *)&v1322.bounds.m_location & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v1322.bounds.m_location & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v627);
                  WTF::fastFree((WTF *)v627, v65);
                }
              }
              m_ptr = v1322.idAttribute.m_impl.m_ptr;
              v1322.idAttribute.m_impl.m_ptr = 0;
              if (m_ptr)
              {
                if (*((_DWORD *)m_ptr + 2) == 1) {
                  (*(void (**)(StringImpl *))(*(void *)m_ptr + 8))(m_ptr);
                }
                else {
                  --*((_DWORD *)m_ptr + 2);
                }
              }
              v445 = v1322.title.m_impl.m_ptr;
              v1322.title.m_impl.m_ptr = 0;
              if (v445)
              {
                if (*((_DWORD *)v445 + 2) == 1) {
                  (*(void (**)(StringImpl *))(*(void *)v445 + 8))(v445);
                }
                else {
                  --*((_DWORD *)v445 + 2);
                }
              }
              v446 = v1322.imageMIMEType.m_impl.m_ptr;
              v1322.imageMIMEType.m_impl.m_ptr = 0;
              if (v446)
              {
                if (*((_DWORD *)v446 + 2) == 1) {
                  (*(void (**)(StringImpl *))(*(void *)v446 + 8))(v446);
                }
                else {
                  --*((_DWORD *)v446 + 2);
                }
              }
              m_identifier = *(WTF **)&v1322.imageURL.m_userEnd;
              if (!*(void *)&v1322.imageURL.m_userEnd) {
                goto LABEL_283;
              }
              *(void *)&v1322.imageURL.m_userEnd = 0;
              v1322.imageURL.m_hostEnd = 0;
              goto LABEL_158;
            case 0x74C:
            case 0x74F:
            case 0x750:
            case 0x751:
            case 0x752:
            case 0x753:
            case 0x756:
            case 0x757:
              goto LABEL_915;
            case 0x74D:
              IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>>((IPC::Decoder *)v8, &v1322);
              if (LOBYTE(v1322.linkIndicator.textRectsInBoundingRectCoordinates.m_buffer)) {
                WebKit::WebPageProxy::backForwardAddItem(v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (WTF::StringImpl **)&v1322.canBeValid);
              }
              std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::BackForwardListItemState>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322);
              goto LABEL_283;
            case 0x74E:
              WebKit::WebPageProxy::backForwardClear((WebKit::WebPageProxy *)v11);
              goto LABEL_283;
            case 0x754:
              WebKit::WebPageProxy::clearAllEditCommands((WebKit::WebPageProxy *)v11);
              goto LABEL_283;
            case 0x755:
              WebKit::WebPageProxy::clearTextIndicator((WebKit::WebPageProxy *)v11);
              goto LABEL_283;
            case 0x758:
              WebKit::WebPageProxy::commitPotentialTapFailed((WebKit::WebPageProxy *)v11);
              goto LABEL_283;
            case 0x759:
              WebKit::WebPageProxy::compositionWasCanceled((WebKit::WebPageProxy *)v11);
              goto LABEL_283;
            default:
              if (v15 == 1906)
              {
                WebKit::WebPageProxy::didCompleteSyntheticClick((WebKit::WebPageProxy *)v11);
                goto LABEL_283;
              }
              if (v15 != 1913) {
                goto LABEL_915;
              }
              WebKit::WebPageProxy::didEndPartialIntelligenceTextAnimationImpl((WebKit::WebPageProxy *)v11);
              break;
          }
          goto LABEL_283;
        }
        if (*((unsigned __int16 *)v8 + 25) <= 0x7A2u)
        {
          switch(*((_WORD *)v8 + 25))
          {
            case 0x782:
              IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>((IPC::Decoder *)v8, &v1322);
              if (!v1322.isLink) {
                goto LABEL_283;
              }
              WebKit::WebPageProxy::didFinishLoadingDataForCustomContentProvider(v11, (WebCore::ResourceResponseBase *)&v1322, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid);
              if (!v1322.isLink) {
                goto LABEL_283;
              }
              goto LABEL_1035;
            case 0x787:
              IPC::Decoder::decode<WebCore::ImageBufferParameters>((unint64_t *)v8, (uint64_t)v1315);
              if (!BYTE8(v1316))
              {
                LOBYTE(v1322.request.point.m_x) = 0;
                LOBYTE(v1322.url.m_pathEnd) = 0;
                goto LABEL_1623;
              }
              IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)v8, v1364);
              char v381 = v1365[0];
              if (!v1365[0]) {
                goto LABEL_1619;
              }
              unint64_t v382 = *((void *)v8 + 1);
              v383 = *(WTF::StringImpl **)v8;
              unint64_t v384 = ((*((void *)v8 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v8;
              if (v382 < v384 || v382 - v384 <= 3)
              {
                unint64_t v719 = 0;
                v720 = 0;
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v721 = *((void *)v8 + 3);
                if (v721)
                {
                  if (v382)
                  {
                    (*(void (**)(uint64_t))(*(void *)v721 + 16))(v721);
                    v720 = *(WTF::StringImpl **)v8;
                    unint64_t v719 = *((void *)v8 + 1);
                  }
                  else
                  {
                    unint64_t v719 = 0;
                    v720 = 0;
                  }
                }
              }
              else
              {
                v385 = (unsigned int *)((char *)v383 + v384);
                *((void *)v8 + 2) = v385 + 1;
                if (v383)
                {
                  if (!BYTE8(v1316)) {
                    goto LABEL_2796;
                  }
                  unsigned int v386 = *v385;
                  v1322.request.point = *(IntPoint *)v1315;
                  *(_DWORD *)&v1322.request.includeSnapshot = *(_DWORD *)&v1315[8];
                  uint64_t v387 = *(void *)&v1315[16];
                  *(void *)&v1315[16] = 0;
                  *(void *)&v1322.canBeValid = v387;
                  *(_WORD *)&v1322.int isLink = v1316;
                  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v1322.isContentEditable, (uint64_t)v1364);
                  v1322.url.m_hostEnd = v386;
                  char v381 = 1;
                  goto LABEL_1620;
                }
                unint64_t v719 = v382;
                v720 = 0;
              }
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v722 = *((void *)v8 + 3);
              if (v722 && v719) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v722 + 16))(v722, v720);
              }
              char v381 = 0;
LABEL_1619:
              LOBYTE(v1322.request.point.m_x) = 0;
LABEL_1620:
              LOBYTE(v1322.url.m_pathEnd) = v381;
              std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v1364);
              if (BYTE8(v1316))
              {
                v723 = *(const void **)&v1315[16];
                *(void *)&v1315[16] = 0;
                if (v723) {
                  CFRelease(v723);
                }
              }
LABEL_1623:
              if (LOBYTE(v1322.url.m_pathEnd)
                || (v725 = *(WTF::StringImpl **)v8,
                    uint64_t v726 = *((void *)v8 + 1),
                    *(void *)uint64_t v8 = 0,
                    *((void *)v8 + 1) = 0,
                    (uint64_t v727 = *((void *)v8 + 3)) != 0)
                && v726
                && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v727 + 16))(v727, v725),
                    LOBYTE(v1322.url.m_pathEnd)))
              {
                WebKit::WebPageProxy::didGetImageForFindMatch(v11, (uint64_t)&v1322, (uint64_t)&v1322.isContentEditable);
                if (LOBYTE(v1322.url.m_pathEnd))
                {
                  if (LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x))
                  {
                    v724 = *(const void **)&v1322.isDataDetectorLink;
                    *(void *)&v1322.BOOL isDataDetectorLink = 0;
                    if (v724) {
                      CFRelease(v724);
                    }
                  }
                  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1322.isContentEditable);
                  v270 = *(const void **)&v1322.canBeValid;
                  *(void *)&v1322.canBeValid = 0;
                  if (v270) {
                    goto LABEL_576;
                  }
                }
              }
              goto LABEL_283;
            case 0x78B:
              WebKit::WebPageProxy::didHandleTapAsHover((WebKit::WebPageProxy *)v11);
              goto LABEL_283;
            case 0x78D:
              IPC::Decoder::decode<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, &v1322);
              if (v1324[0]) {
                WebKit::WebPageProxy::didNavigateWithNavigationData(v11, (uint64_t)&v1322, *(uint64_t *)&v1322.__engaged_, v1323);
              }
              std::__optional_destruct_base<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v390);
              goto LABEL_283;
            case 0x78E:
              v1322.request.point = (IntPoint)IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)v8);
              *(_DWORD *)&v1322.request.includeSnapshot = v379;
              if ((_BYTE)v379) {
                WebKit::WebPageProxy::didNotHandleTapAsClick((WebKit::WebPageProxy *)v11, &v1322.request.point);
              }
              goto LABEL_283;
            case 0x78F:
              IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, &v1322);
              if (v1322.isContentEditable) {
                WebKit::WebPageProxy::didPerformClientRedirect(v11, (WTF::StringImpl **)&v1322, (WTF::StringImpl **)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, *(uint64_t *)&v1322.isLink);
              }
              goto LABEL_876;
            case 0x791:
              IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, &v1322);
              if (v1322.isContentEditable) {
                WebKit::WebPageProxy::didPerformServerRedirect(v11, (WTF::StringImpl **)&v1322, (WTF::StringImpl **)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, *(uint64_t *)&v1322.isLink);
              }
              goto LABEL_876;
            case 0x795:
              IPC::Decoder::decode<std::tuple<WebKit::InteractionInformationAtPosition>>(&v1322, (unint64_t *)v8);
              if (v1339)
              {
                WebKit::WebPageProxy::didReceivePositionInformation((WebKit::WebPageProxy *)v11, &v1322);
                if (v1339) {
LABEL_846:
                }
                  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&v1322, v380);
              }
              goto LABEL_283;
            default:
              goto LABEL_915;
          }
        }
        switch(v15)
        {
          case 0x7A3u:
            IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, &v1322);
            if (v1322.isContentEditable) {
              WebKit::WebPageProxy::didUpdateHistoryTitle(v11, v10, (uint64_t)&v1322, (WTF::StringImpl **)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, *(uint64_t *)&v1322.isLink);
            }
LABEL_876:
            std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v378);
            goto LABEL_283;
          case 0x7A5u:
            uint64_t v398 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
            if (v399)
            {
              WebKit::WebPageProxy::disableDoubleTapGesturesDuringTapIfNecessary(v11, v398);
              goto LABEL_283;
            }
            unint64_t v110 = *(WTF::StringImpl **)v8;
            uint64_t v108 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v109 = *((void *)v8 + 3);
            if (!v109) {
              goto LABEL_283;
            }
            goto LABEL_247;
          case 0x7A9u:
            IPC::Decoder::decode<WebKit::EditorState>((uint64_t *)v8, &v1322);
            char v295 = v1323;
            if ((_BYTE)v1323)
            {
              std::__tuple_leaf<0ul,WebKit::EditorState,false>::__tuple_leaf[abi:sn180100]<WebKit::EditorState,void>((uint64_t)v1364, (long long *)&v1322.request.point);
              char v295 = 1;
            }
            else
            {
              v1364[0] = 0;
            }
            LOBYTE(v1395) = v295;
            std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](&v1322, v294);
            if ((_BYTE)v1395
              || (v666 = *(WTF::StringImpl **)v8,
                  uint64_t v667 = *((void *)v8 + 1),
                  *(void *)uint64_t v8 = 0,
                  *((void *)v8 + 1) = 0,
                  (uint64_t v668 = *((void *)v8 + 3)) != 0)
              && v667
              && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v668 + 16))(v668, v666), (_BYTE)v1395))
            {
              WebKit::WebPageProxy::editorStateChanged((WebKit::WebPageProxy *)v11, v1364);
              if ((_BYTE)v1395)
              {
                std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1381, v451);
                if ((_BYTE)v1379) {
                  WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v1364[32], v452);
                }
              }
            }
            goto LABEL_283;
        }
LABEL_915:
        if (v15 == 1924 && *(unsigned char *)(v13 + 28))
        {
          if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8) > 0xFFu)
          {
            WebKit::WebPageProxy::didFinishServiceWorkerPageRegistration(v11);
            goto LABEL_283;
          }
          unint64_t v110 = *(WTF::StringImpl **)v8;
          uint64_t v108 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v109 = *((void *)v8 + 3);
          if (!v109) {
            goto LABEL_283;
          }
          goto LABEL_247;
        }
        if (*((unsigned __int16 *)v8 + 25) > 0x801u)
        {
          if (*((unsigned __int16 *)v8 + 25) <= 0x81Fu)
          {
            if (v15 != 2050)
            {
              if (v15 == 2053)
              {
                IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                if (!v1322.request.includeSnapshot) {
                  goto LABEL_283;
                }
                WebKit::WebPageProxy::revokeGeolocationAuthorizationToken((WebKit::WebPageProxy *)v11, (const WTF::StringImpl **)&v1322, v447);
                goto LABEL_962;
              }
              goto LABEL_1098;
            }
            uint64_t v506 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
            if (v507
              && (IntPoint v508 = (IntPoint)v506,
                  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1296), v1297))
            {
              IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v8, v1306);
              if ((_BYTE)v1308)
              {
                IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v8, v1315);
                if (BYTE8(v1316))
                {
                  IPC::ArgumentCoder<WebCore::MediaStreamRequest,void>::decode((uint64_t *)v8, (uint64_t)v1364);
                  if (v1414
                    || (v905 = *(WTF::StringImpl **)v8,
                        uint64_t v906 = *((void *)v8 + 1),
                        *(void *)uint64_t v8 = 0,
                        *((void *)v8 + 1) = 0,
                        (uint64_t v907 = *((void *)v8 + 3)) != 0)
                    && v906
                    && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v907 + 16))(v907, v905), v1414))
                  {
                    if (!v1297 || !(_BYTE)v1308 || !BYTE8(v1316)) {
                      goto LABEL_2796;
                    }
                    v1322.request.point = v508;
                    *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)v1296;
                    v1322.int isLink = 0;
                    LODWORD(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.isLink, (uint64_t)v1306);
                    v1322.BOOL isDataDetectorLink = 0;
                    *((_DWORD *)&v1322.url + 2) = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.isDataDetectorLink, (uint64_t)v1315);
                    LOBYTE(v1322.url.m_userEnd) = v1364[0];
                    WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)&v1322.url.m_hostEnd, (uint64_t)&v1364[8]);
                    uint64_t v509 = v1402;
                    uint64_t v1402 = 0;
                    v1349[0] = v509;
                    uint64_t v510 = v1403;
                    uint64_t v1403 = 0;
                    v1349[1] = v510;
                    char v1350 = v1404;
                    WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)&v1351, (uint64_t)&v1405);
                    uint64_t v512 = v1410;
                    uint64_t v1410 = 0;
                    v1356[0] = v512;
                    uint64_t v513 = v1411;
                    uint64_t v1411 = 0;
                    v1356[1] = v513;
                    char v1357 = v1412;
                    long long v1358 = v1413;
                    char v1359 = 1;
                    if (v1414)
                    {
                      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1410, v511);
                      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1409, v514);
                      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1408, v515);
                      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1407, v516);
                      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1406, v517);
                      WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1402, v518);
                      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1401, v519);
                      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1400, v520);
                      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1399, v521);
                      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1398, v522);
                    }
                  }
                  else
                  {
                    LOBYTE(v1322.request.point.m_x) = 0;
                    char v1359 = 0;
                  }
                  if (BYTE8(v1316) && v1316 != -1) {
                    ((void (*)(unsigned char *, unsigned char *))off_1EEA02A40[v1316])(v1364, v1315);
                  }
                }
                else
                {
                  LOBYTE(v1322.request.point.m_x) = 0;
                  char v1359 = 0;
                }
                if ((_BYTE)v1308 && DWORD2(v1307) != -1) {
                  ((void (*)(unsigned char *, WTF::StringImpl **))off_1EEA02A40[DWORD2(v1307)])(v1364, v1306);
                }
              }
              else
              {
                LOBYTE(v1322.request.point.m_x) = 0;
                char v1359 = 0;
              }
              if (v1359) {
                goto LABEL_1253;
              }
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
              char v1359 = 0;
            }
            v543 = *(WTF::StringImpl **)v8;
            uint64_t v544 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v545 = *((void *)v8 + 3);
            if (!v545) {
              goto LABEL_283;
            }
            if (!v544) {
              goto LABEL_283;
            }
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v545 + 16))(v545, v543);
            if (!v1359) {
              goto LABEL_283;
            }
LABEL_1253:
            WebKit::WebPageProxy::requestUserMediaPermissionForFrame((WebKit::WebPageProxy *)v11, v10, *(WTF::String **)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, (WebCore::SecurityOriginData *)&v1322.isLink, (WebCore::SecurityOriginData *)&v1322.isDataDetectorLink, (uint64_t)&v1322.url.m_userEnd);
            if (!v1359) {
              goto LABEL_283;
            }
            WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1356, v566);
            std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1355, v567);
            std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1354, v568);
            std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1353, v569);
            std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1352, v570);
            WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1349, v571);
            std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1348, v572);
            std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1344, v573);
            std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1343, v574);
            std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1340, v575);
            if (*((_DWORD *)&v1322.url + 2) != -1) {
              ((void (*)(unsigned char *, BOOL *))off_1EEA02A40[*((unsigned int *)&v1322.url + 2)])(v1364, &v1322.isDataDetectorLink);
            }
            *((_DWORD *)&v1322.url + 2) = -1;
LABEL_1257:
            if (LODWORD(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) != -1) {
              ((void (*)(unsigned char *, BOOL *))off_1EEA02A40[LODWORD(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)])(v1364, &v1322.isLink);
            }
            goto LABEL_283;
          }
          if (v15 == 2080)
          {
            unsigned __int16 v523 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
            if (v523 > 0xFFu)
            {
              WebKit::WebPageProxy::setShouldListenToVoiceActivity((unsigned int *)v11, v523 != 0, v524);
              goto LABEL_283;
            }
            unint64_t v110 = *(WTF::StringImpl **)v8;
            uint64_t v108 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v109 = *((void *)v8 + 3);
            if (!v109) {
              goto LABEL_283;
            }
            goto LABEL_247;
          }
          if (v15 != 2121)
          {
LABEL_1098:
            if (v15 == 2045 && *(unsigned char *)(v13 + 11))
            {
              uint64_t v500 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
              if (v501
                && (IntPoint v502 = (IntPoint)v500,
                    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315), v1315[16])&& (IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v8, v1364), v1364[32]))
              {
                IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1306);
                int m_x_low = LOBYTE(v1306[1]);
                if (LOBYTE(v1306[1]))
                {
                  if (!v1315[16] || !v1364[32]) {
                    goto LABEL_2796;
                  }
                  v1322.request.point = v502;
                  *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)v1315;
                  v1322.int isLink = 0;
                  LODWORD(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.isLink, (uint64_t)v1364);
                  *(WTF::StringImpl **)&v1322.BOOL isDataDetectorLink = v1306[0];
                  int m_x_low = 1;
                }
                else
                {
                  LOBYTE(v1322.request.point.m_x) = 0;
                }
                LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) = m_x_low;
                if (v1364[32] && *(_DWORD *)&v1364[24] != -1)
                {
                  ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA02A40[*(unsigned int *)&v1364[24]])(v1306, v1364);
                  int m_x_low = LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x);
                }
                if (m_x_low) {
                  goto LABEL_1111;
                }
              }
              else
              {
                LOBYTE(v1322.request.point.m_x) = 0;
                LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) = 0;
              }
              v546 = *(WTF::StringImpl **)v8;
              uint64_t v547 = *((void *)v8 + 1);
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v548 = *((void *)v8 + 3);
              if (!v548) {
                goto LABEL_283;
              }
              if (!v547) {
                goto LABEL_283;
              }
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v548 + 16))(v548, v546);
              if (!LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x)) {
                goto LABEL_283;
              }
LABEL_1111:
              WebKit::WebPageProxy::requestMediaKeySystemPermissionForFrame(v11, v10, *(_DWORD **)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, (WebCore::SecurityOriginData *)&v1322.isLink, (_DWORD **)&v1322.isDataDetectorLink);
              if (!LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x)) {
                goto LABEL_283;
              }
              v505 = *(WTF::StringImpl **)&v1322.isDataDetectorLink;
              *(void *)&v1322.BOOL isDataDetectorLink = 0;
              if (v505)
              {
                if (*(_DWORD *)v505 == 2) {
                  WTF::StringImpl::destroy(v505, v504);
                }
                else {
                  *(_DWORD *)v505 -= 2;
                }
              }
              goto LABEL_1257;
            }
            if (*((unsigned __int16 *)v8 + 25) <= 0x7F4u)
            {
              if (*((unsigned __int16 *)v8 + 25) <= 0x792u)
              {
                if (*((unsigned __int16 *)v8 + 25) > 0x789u)
                {
                  if (v15 == 1930)
                  {
                    unsigned __int16 v626 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
                    if (v626 > 0xFFu)
                    {
                      WebKit::WebPageProxy::didHandleDragStartRequest((WebKit::WebPageProxy *)v11, v626 != 0);
                      goto LABEL_283;
                    }
                    unint64_t v110 = *(WTF::StringImpl **)v8;
                    uint64_t v108 = *((void *)v8 + 1);
                    *(void *)uint64_t v8 = 0;
                    *((void *)v8 + 1) = 0;
                    uint64_t v109 = *((void *)v8 + 3);
                    if (!v109) {
                      goto LABEL_283;
                    }
                    goto LABEL_247;
                  }
                  if (v15 == 1936)
                  {
                    IPC::Decoder::decode<WebCore::DictionaryPopupInfo>((unint64_t *)v8, &v1322);
                    char v597 = (char)v1322.title.m_impl.m_ptr;
                    if (LOBYTE(v1322.title.m_impl.m_ptr))
                    {
                      *(_OWORD *)&v1364[8] = *(_OWORD *)&v1322.request.includeSnapshot;
                      *(_OWORD *)&v1364[24] = *(_OWORD *)&v1322.isLink;
                      *(Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes>>::MarkableTraits> *)&v1364[40] = v1322.containerScrollingNodeID;
                      uint64_t v598 = *(void *)&v1322.isDataDetectorLink;
                      *(void *)&v1322.BOOL isDataDetectorLink = 0;
                      *(IntPoint *)v1364 = v1322.request.point;
                      *(void *)&v1364[56] = v598;
                      FloatPoint adjustedPointForNodeRespondingToClickEvents = v1322.adjustedPointForNodeRespondingToClickEvents;
                      v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = 0;
                      *(FloatPoint *)v1365 = adjustedPointForNodeRespondingToClickEvents;
                      *(_DWORD *)&v1365[8] = v1322.url.m_string.m_impl.m_ptr;
                      long long v600 = *(_OWORD *)((char *)&v1322.url + 8);
                      memset((char *)&v1322.url + 8, 0, 24);
                      *(_OWORD *)&v1365[16] = v600;
                      *(void *)&v1365[32] = *(void *)&v1322.url.m_hostEnd;
                      WebCore::Color::Color();
                      *(_DWORD *)&v1365[48] = v1322.imageURL.m_string.m_impl.m_ptr;
                      WebCore::AttributedString::AttributedString();
                      char v597 = 1;
                    }
                    else
                    {
                      v1364[0] = 0;
                    }
                    char v1369 = v597;
                    std::__optional_destruct_base<WebCore::DictionaryPopupInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322);
                    if (!v1369)
                    {
                      v943 = *(WTF::StringImpl **)v8;
                      uint64_t v944 = *((void *)v8 + 1);
                      *(void *)uint64_t v8 = 0;
                      *((void *)v8 + 1) = 0;
                      uint64_t v945 = *((void *)v8 + 3);
                      if (!v945) {
                        goto LABEL_283;
                      }
                      if (!v944) {
                        goto LABEL_283;
                      }
                      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v945 + 16))(v945, v943);
                      if (!v1369) {
                        goto LABEL_283;
                      }
                    }
                    WebKit::WebPageProxy::didPerformDictionaryLookup(v11, (uint64_t)v1364);
                    if (!v1369) {
                      goto LABEL_283;
                    }
                    MEMORY[0x199732DE0](&v1365[56]);
                    if ((*(void *)&v1365[40] & 0x8000000000000) != 0)
                    {
                      v935 = (unsigned int *)(*(void *)&v1365[40] & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v1365[40] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, v935);
                        WTF::fastFree((WTF *)v935, v65);
                      }
                    }
                    v669 = *(_DWORD **)&v1365[32];
                    *(void *)&v1365[32] = 0;
                    if (v669)
                    {
                      if (v669[2] == 1) {
                        (*(void (**)(_DWORD *))(*(void *)v669 + 8))(v669);
                      }
                      else {
                        --v669[2];
                      }
                    }
                    v690 = *(_DWORD **)&v1365[24];
                    *(void *)&v1365[24] = 0;
                    if (v690)
                    {
                      if (v690[2] == 1) {
                        (*(void (**)(_DWORD *))(*(void *)v690 + 8))(v690);
                      }
                      else {
                        --v690[2];
                      }
                    }
                    v692 = *(_DWORD **)&v1365[16];
                    *(void *)&v1365[16] = 0;
                    if (v692)
                    {
                      if (v692[2] == 1) {
                        (*(void (**)(_DWORD *))(*(void *)v692 + 8))(v692);
                      }
                      else {
                        --v692[2];
                      }
                    }
                    m_identifier = *(WTF **)&v1364[56];
                    if (!*(void *)&v1364[56]) {
                      goto LABEL_283;
                    }
                    *(void *)&v1364[56] = 0;
                    *(_DWORD *)v1365 = 0;
                    goto LABEL_158;
                  }
                }
                else
                {
                  if (v15 == 1868)
                  {
                    WebKit::WebPageProxy::assistiveTechnologyMakeFirstResponder((WebKit::WebPageProxy *)v11);
                    goto LABEL_283;
                  }
                  if (v15 == 1929)
                  {
                    unsigned __int16 v565 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
                    if (v565 > 0xFFu)
                    {
                      WebKit::WebPageProxy::didHandleAdditionalDragItemsRequest((WebKit::WebPageProxy *)v11, v565 != 0);
                      goto LABEL_283;
                    }
                    unint64_t v110 = *(WTF::StringImpl **)v8;
                    uint64_t v108 = *((void *)v8 + 1);
                    *(void *)uint64_t v8 = 0;
                    *((void *)v8 + 1) = 0;
                    uint64_t v109 = *((void *)v8 + 3);
                    if (!v109) {
                      goto LABEL_283;
                    }
                    goto LABEL_247;
                  }
                }
                goto LABEL_1343;
              }
              if (*((unsigned __int16 *)v8 + 25) <= 0x7C6u)
              {
                if (v15 == 1939)
                {
                  IPC::Decoder::decode<std::tuple<std::optional<WebCore::TextIndicatorData>>>((unint64_t *)v8, &v1322);
                  if (!*((unsigned char *)&v1322.imageURL + 8)) {
                    goto LABEL_283;
                  }
                  v1364[0] = 0;
                  v1365[48] = 0;
                  if (LOBYTE(v1322.imageURL.m_string.m_impl.m_ptr))
                  {
                    std::construct_at[abi:sn180100]<WebCore::TextIndicatorData,WebCore::TextIndicatorData,WebCore::TextIndicatorData*>((uint64_t)v1364, (long long *)&v1322.request.point);
                    v1365[48] = 1;
                  }
                  WebKit::WebPageProxy::didReceiveEditDragSnapshot(v11, (const WebCore::TextIndicatorData *)v1364);
                  if (v1365[48])
                  {
                    if ((*(void *)&v1365[32] & 0x8000000000000) != 0)
                    {
                      v934 = (unsigned int *)(*(void *)&v1365[32] & 0xFFFFFFFFFFFFLL);
                      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v1365[32] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, v934);
                        WTF::fastFree((WTF *)v934, v65);
                      }
                    }
                    v623 = *(_DWORD **)&v1365[24];
                    *(void *)&v1365[24] = 0;
                    if (v623)
                    {
                      if (v623[2] == 1) {
                        (*(void (**)(_DWORD *))(*(void *)v623 + 8))(v623);
                      }
                      else {
                        --v623[2];
                      }
                    }
                    v689 = *(_DWORD **)&v1365[16];
                    *(void *)&v1365[16] = 0;
                    if (v689)
                    {
                      if (v689[2] == 1) {
                        (*(void (**)(_DWORD *))(*(void *)v689 + 8))(v689);
                      }
                      else {
                        --v689[2];
                      }
                    }
                    v691 = *(_DWORD **)&v1365[8];
                    *(void *)&v1365[8] = 0;
                    if (v691)
                    {
                      if (v691[2] == 1) {
                        (*(void (**)(_DWORD *))(*(void *)v691 + 8))(v691);
                      }
                      else {
                        --v691[2];
                      }
                    }
                    v693 = *(WTF **)&v1364[48];
                    if (*(void *)&v1364[48])
                    {
                      *(void *)&v1364[48] = 0;
                      *(_DWORD *)&v1364[56] = 0;
                      WTF::fastFree(v693, v65);
                    }
                  }
                  if (!*((unsigned char *)&v1322.imageURL + 8) || !LOBYTE(v1322.imageURL.m_string.m_impl.m_ptr)) {
                    goto LABEL_283;
                  }
                  if ((*(void *)&v1322.url.m_hostEnd & 0x8000000000000) != 0)
                  {
                    v949 = (unsigned int *)(*(void *)&v1322.url.m_hostEnd & 0xFFFFFFFFFFFFLL);
                    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v1322.url.m_hostEnd & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                    {
                      atomic_store(1u, v949);
                      WTF::fastFree((WTF *)v949, v65);
                    }
                  }
                  v694 = *(_DWORD **)&v1322.url.m_userEnd;
                  *(void *)&v1322.url.m_userEnd = 0;
                  if (v694)
                  {
                    if (v694[2] == 1) {
                      (*(void (**)(_DWORD *))(*(void *)v694 + 8))(v694);
                    }
                    else {
                      --v694[2];
                    }
                  }
                  v703 = (_DWORD *)*((void *)&v1322.url + 1);
                  *((void *)&v1322.url + 1) = 0;
                  if (v703)
                  {
                    if (v703[2] == 1) {
                      (*(void (**)(_DWORD *))(*(void *)v703 + 8))(v703);
                    }
                    else {
                      --v703[2];
                    }
                  }
                  v704 = v1322.url.m_string.m_impl.m_ptr;
                  v1322.url.m_string.m_impl.m_ptr = 0;
                  if (v704)
                  {
                    if (*((_DWORD *)v704 + 2) == 1) {
                      (*(void (**)(StringImpl *))(*(void *)v704 + 8))(v704);
                    }
                    else {
                      --*((_DWORD *)v704 + 2);
                    }
                  }
                  m_identifier = (WTF *)v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
                  if (!v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) {
                    goto LABEL_283;
                  }
                  v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
                  *(_DWORD *)&v1322.BOOL isDataDetectorLink = 0;
                  goto LABEL_158;
                }
                if (v15 == 1956)
                {
                  if (!*(unsigned char *)(v11 + 805))
                  {
                    *(unsigned char *)(v11 + 805) = 1;
                    WebKit::WebPageProxy::stopMakingViewBlankDueToLackOfRenderingUpdateIfNecessary(v11);
                  }
                  goto LABEL_283;
                }
                goto LABEL_1343;
              }
              switch(v15)
              {
                case 0x7C7u:
                  IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                  if (!v1322.request.includeSnapshot) {
                    goto LABEL_283;
                  }
                  WebKit::WebPageProxy::ignoreWord((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::String *)&v1322);
                  break;
                case 0x7CBu:
                  IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                  if (!v1322.request.includeSnapshot) {
                    goto LABEL_283;
                  }
                  WebKit::WebPageProxy::learnWord((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::String *)&v1322);
                  break;
                case 0x7D4u:
                  goto LABEL_283;
                default:
                  goto LABEL_1343;
              }
              goto LABEL_962;
            }
            if (*((unsigned __int16 *)v8 + 25) <= 0x82Au)
            {
              switch(*((_WORD *)v8 + 25))
              {
                case 0x7F5:
                  IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, &v1322);
                  if (v1322.isContentEditable) {
                    WebKit::WebPageProxy::registerWebProcessAccessibilityToken(v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, *(uint64_t *)&v1322.isLink);
                  }
                  goto LABEL_283;
                case 0x7F6:
                case 0x7F8:
                case 0x7F9:
                case 0x7FB:
                case 0x7FC:
                case 0x7FD:
                  goto LABEL_1343;
                case 0x7F7:
                  uint64_t v601 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)v8);
                  if (v602) {
                    WebKit::WebPageProxy::removeDictationAlternatives(v11, v601);
                  }
                  goto LABEL_283;
                case 0x7FA:
                  uint64_t v603 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
                  if (!v604) {
                    goto LABEL_2106;
                  }
                  uint64_t v605 = v603;
                  IPC::ArgumentCoder<WebCore::TextCheckingRequestData,void>::decode((IPC::Decoder *)v8, (uint64_t)v1364);
                  if (!v1364[32])
                  {
                    v953 = *(WTF::StringImpl **)v8;
                    uint64_t v954 = *((void *)v8 + 1);
                    *(void *)uint64_t v8 = 0;
                    *((void *)v8 + 1) = 0;
                    uint64_t v955 = *((void *)v8 + 3);
                    if (!v955) {
                      goto LABEL_2106;
                    }
                    if (!v954) {
                      goto LABEL_2106;
                    }
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v955 + 16))(v955, v953);
                    if (!v1364[32]) {
                      goto LABEL_2106;
                    }
                  }
                  unint64_t v606 = *((void *)v8 + 1);
                  v607 = *(WTF::StringImpl **)v8;
                  unint64_t v608 = ((*((void *)v8 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v8;
                  if (v606 < v608 || v606 - v608 <= 3)
                  {
                    unint64_t v956 = 0;
                    v957 = 0;
                    *(void *)uint64_t v8 = 0;
                    *((void *)v8 + 1) = 0;
                    uint64_t v958 = *((void *)v8 + 3);
                    if (v958)
                    {
                      if (v606)
                      {
                        (*(void (**)(uint64_t))(*(void *)v958 + 16))(v958);
                        v957 = *(WTF::StringImpl **)v8;
                        unint64_t v956 = *((void *)v8 + 1);
                      }
                      else
                      {
                        unint64_t v956 = 0;
                        v957 = 0;
                      }
                    }
                  }
                  else
                  {
                    v609 = (int *)((char *)v607 + v608);
                    *((void *)v8 + 2) = v609 + 1;
                    if (v607)
                    {
                      int v610 = *v609;
                      v1322.request.point = (IntPoint)v605;
                      *(void *)&v1322.request.includeSnapshot = *(void *)v1364;
                      *(_OWORD *)&v1322.canBeValid = *(_OWORD *)&v1364[8];
                      *(_WORD *)&v1322.isContentEditable = *(_WORD *)&v1364[24];
                      LODWORD(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = v610;
                      LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 1;
                      WebKit::WebPageProxy::requestCheckingOfString(v11, v605, (uint64_t)&v1322.request.includeSnapshot);
                      if (LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                      {
                        v449 = *(WTF::StringImpl **)&v1322.request.includeSnapshot;
                        *(void *)&v1322.request.includeSnapshot = 0;
                        if (v449) {
                          goto LABEL_964;
                        }
                      }
                      goto LABEL_283;
                    }
                    unint64_t v956 = v606;
                    v957 = 0;
                  }
                  *(void *)uint64_t v8 = 0;
                  *((void *)v8 + 1) = 0;
                  uint64_t v959 = *((void *)v8 + 3);
                  if (v959 && v956) {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v959 + 16))(v959, v957);
                  }
                  if (v1364[32])
                  {
                    v960 = *(WTF::StringImpl **)v1364;
                    *(void *)v1364 = 0;
                    if (v960)
                    {
                      if (*(_DWORD *)v960 == 2) {
                        WTF::StringImpl::destroy(v960, v607);
                      }
                      else {
                        *(_DWORD *)v960 -= 2;
                      }
                    }
                  }
                  goto LABEL_2106;
                case 0x7FE:
                  IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                  if (!v1322.request.includeSnapshot) {
                    goto LABEL_283;
                  }
                  uint64_t v611 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                  if (!(_BYTE)v448) {
                    break;
                  }
                  *(void *)v1364 = v611;
                  uint64_t v8 = &v1364[8];
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                  v612 = (void *)WTF::fastMalloc((WTF *)0x18);
                  void *v612 = &unk_1EEA02C40;
                  v612[1] = *(void *)v1364;
                  uint64_t v613 = *(void *)&v1364[8];
                  *(void *)&v1364[8] = 0;
                  v612[2] = v613;
                  *(void *)v1315 = v612;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                  if (!v1322.request.includeSnapshot) {
                    goto LABEL_2796;
                  }
                  WebKit::WebPageProxy::requestNotificationPermission(v11, (WTF::StringImpl **)&v1322, (uint64_t *)v1315);
                  uint64_t v614 = *(void *)v1315;
                  *(void *)v1315 = 0;
                  if (v614) {
                    (*(void (**)(uint64_t))(*(void *)v614 + 8))(v614);
                  }
                  break;
                default:
                  if (v15 != 2061)
                  {
                    if (v15 == 2078)
                    {
                      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)&v1298);
                      if (v1299)
                      {
                        IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)v8, (uint64_t)v1315);
                        if (v1315[16])
                        {
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)&v1300);
                          if (v1301)
                          {
                            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)&v1302);
                            if (v1303)
                            {
                              IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)&v1304);
                              if (v1305)
                              {
                                IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1294);
                                if (LOBYTE(v1294[1]))
                                {
                                  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1296);
                                  if (LOBYTE(v1296[1]))
                                  {
                                    IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)v8, (uint64_t)v1364);
                                    if (v1364[16])
                                    {
                                      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1306);
                                      char v577 = (char)v1306[1];
                                      if (LOBYTE(v1306[1]))
                                      {
                                        if (!v1299
                                          || !v1315[16]
                                          || !v1301
                                          || !v1303
                                          || !v1305
                                          || !LOBYTE(v1294[1])
                                          || !LOBYTE(v1296[1])
                                          || !v1364[16])
                                        {
                                          goto LABEL_2796;
                                        }
                                        v578 = v1298;
                                        v1298 = 0;
                                        v1322.request.point = (IntPoint)v578;
                                        WTF::MachSendRight::MachSendRight();
                                        v579 = v1300;
                                        v1300 = 0;
                                        *(void *)&v1322.canBeValid = *(void *)&v1315[8];
                                        *(void *)&v1322.int isLink = v579;
                                        v580 = v1302;
                                        v1302 = 0;
                                        v581 = v1304;
                                        v1304 = 0;
                                        *(void *)&v1322.isContentEditable = v580;
                                        v1322.containerScrollingNodeID.m_value.m_object.m_identifier = (unint64_t)v581;
                                        v582 = v1294[0];
                                        v1294[0] = 0;
                                        v583 = v1296[0];
                                        v1296[0] = 0;
                                        v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = (unint64_t)v582;
                                        *(void *)&v1322.BOOL isDataDetectorLink = v583;
                                        WTF::MachSendRight::MachSendRight();
                                        v1322.url.m_string.m_impl.m_ptr = *(StringImpl **)&v1364[8];
                                        *((WTF::StringImpl **)&v1322.url + 1) = v1306[0];
                                        char v577 = 1;
                                      }
                                      else
                                      {
                                        LOBYTE(v1322.request.point.m_x) = 0;
                                      }
                                      LOBYTE(v1322.url.m_userEnd) = v577;
                                      if (v1364[16]) {
                                        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1364);
                                      }
                                    }
                                    else
                                    {
                                      LOBYTE(v1322.request.point.m_x) = 0;
                                      LOBYTE(v1322.url.m_userEnd) = 0;
                                    }
                                    if (LOBYTE(v1296[1]))
                                    {
                                      v695 = v1296[0];
                                      v1296[0] = 0;
                                      if (v695)
                                      {
                                        if (*(_DWORD *)v695 == 2) {
                                          WTF::StringImpl::destroy(v695, v576);
                                        }
                                        else {
                                          *(_DWORD *)v695 -= 2;
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    LOBYTE(v1322.request.point.m_x) = 0;
                                    LOBYTE(v1322.url.m_userEnd) = 0;
                                  }
                                  if (LOBYTE(v1294[1]))
                                  {
                                    v696 = v1294[0];
                                    v1294[0] = 0;
                                    if (v696)
                                    {
                                      if (*(_DWORD *)v696 == 2) {
                                        WTF::StringImpl::destroy(v696, v576);
                                      }
                                      else {
                                        *(_DWORD *)v696 -= 2;
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  LOBYTE(v1322.request.point.m_x) = 0;
                                  LOBYTE(v1322.url.m_userEnd) = 0;
                                }
                                if (v1305)
                                {
                                  v697 = v1304;
                                  v1304 = 0;
                                  if (v697)
                                  {
                                    if (*(_DWORD *)v697 == 2) {
                                      WTF::StringImpl::destroy(v697, v576);
                                    }
                                    else {
                                      *(_DWORD *)v697 -= 2;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                LOBYTE(v1322.request.point.m_x) = 0;
                                LOBYTE(v1322.url.m_userEnd) = 0;
                              }
                              if (v1303)
                              {
                                v698 = v1302;
                                v1302 = 0;
                                if (v698)
                                {
                                  if (*(_DWORD *)v698 == 2) {
                                    WTF::StringImpl::destroy(v698, v576);
                                  }
                                  else {
                                    *(_DWORD *)v698 -= 2;
                                  }
                                }
                              }
                            }
                            else
                            {
                              LOBYTE(v1322.request.point.m_x) = 0;
                              LOBYTE(v1322.url.m_userEnd) = 0;
                            }
                            if (v1301)
                            {
                              v699 = v1300;
                              v1300 = 0;
                              if (v699)
                              {
                                if (*(_DWORD *)v699 == 2) {
                                  WTF::StringImpl::destroy(v699, v576);
                                }
                                else {
                                  *(_DWORD *)v699 -= 2;
                                }
                              }
                            }
                          }
                          else
                          {
                            LOBYTE(v1322.request.point.m_x) = 0;
                            LOBYTE(v1322.url.m_userEnd) = 0;
                          }
                          if (v1315[16]) {
                            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1315);
                          }
                        }
                        else
                        {
                          LOBYTE(v1322.request.point.m_x) = 0;
                          LOBYTE(v1322.url.m_userEnd) = 0;
                        }
                        if (v1299)
                        {
                          v700 = v1298;
                          v1298 = 0;
                          if (v700)
                          {
                            if (*(_DWORD *)v700 == 2) {
                              WTF::StringImpl::destroy(v700, v576);
                            }
                            else {
                              *(_DWORD *)v700 -= 2;
                            }
                          }
                        }
                      }
                      else
                      {
                        LOBYTE(v1322.request.point.m_x) = 0;
                        LOBYTE(v1322.url.m_userEnd) = 0;
                      }
                      if (!LOBYTE(v1322.url.m_userEnd))
                      {
                        v950 = *(WTF::StringImpl **)v8;
                        uint64_t v951 = *((void *)v8 + 1);
                        *(void *)uint64_t v8 = 0;
                        *((void *)v8 + 1) = 0;
                        uint64_t v952 = *((void *)v8 + 3);
                        if (!v952) {
                          goto LABEL_283;
                        }
                        if (!v951) {
                          goto LABEL_283;
                        }
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v952 + 16))(v952, v950);
                        if (!LOBYTE(v1322.url.m_userEnd)) {
                          goto LABEL_283;
                        }
                      }
                      WTF::isIntegralOrPointerType((WTF *)v11);
                      if (!LOBYTE(v1322.url.m_userEnd)) {
                        goto LABEL_283;
                      }
                      v702 = (WTF::StringImpl *)*((void *)&v1322.url + 1);
                      *((void *)&v1322.url + 1) = 0;
                      if (v702)
                      {
                        if (*(_DWORD *)v702 == 2) {
                          WTF::StringImpl::destroy(v702, v701);
                        }
                        else {
                          *(_DWORD *)v702 -= 2;
                        }
                      }
                      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1322.adjustedPointForNodeRespondingToClickEvents);
                      v714 = *(WTF::StringImpl **)&v1322.isDataDetectorLink;
                      *(void *)&v1322.BOOL isDataDetectorLink = 0;
                      if (v714)
                      {
                        if (*(_DWORD *)v714 == 2) {
                          WTF::StringImpl::destroy(v714, v713);
                        }
                        else {
                          *(_DWORD *)v714 -= 2;
                        }
                      }
                      v715 = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
                      v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
                      if (v715)
                      {
                        if (*(_DWORD *)v715 == 2) {
                          WTF::StringImpl::destroy(v715, v713);
                        }
                        else {
                          *(_DWORD *)v715 -= 2;
                        }
                      }
                      v716 = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
                      v1322.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
                      if (v716)
                      {
                        if (*(_DWORD *)v716 == 2) {
                          WTF::StringImpl::destroy(v716, v713);
                        }
                        else {
                          *(_DWORD *)v716 -= 2;
                        }
                      }
                      v717 = *(WTF::StringImpl **)&v1322.isContentEditable;
                      *(void *)&v1322.isContentEditable = 0;
                      if (v717)
                      {
                        if (*(_DWORD *)v717 == 2) {
                          WTF::StringImpl::destroy(v717, v713);
                        }
                        else {
                          *(_DWORD *)v717 -= 2;
                        }
                      }
                      v718 = *(WTF::StringImpl **)&v1322.isLink;
                      *(void *)&v1322.int isLink = 0;
                      if (v718)
                      {
                        if (*(_DWORD *)v718 == 2) {
                          WTF::StringImpl::destroy(v718, v713);
                        }
                        else {
                          *(_DWORD *)v718 -= 2;
                        }
                      }
                      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1322.request.includeSnapshot);
                      goto LABEL_963;
                    }
LABEL_1343:
                    if (v15 == 1873 && *(unsigned char *)(v13 + 33))
                    {
                      uint64_t v615 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
                      if (v616)
                      {
                        uint64_t v617 = v615;
                        IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v8, (uint64_t)&v1322);
                        if (v1322.canBeValid)
                        {
                          WebKit::WebPageProxy::beginTextRecognitionForVideoInElementFullScreen(v11, v617, *(float *)&v1322.request.point.m_x, *(float *)&v1322.request.point.m_y, *(float *)&v1322.request.includeSnapshot, *(float *)&v1322.request.includeImageData);
                          goto LABEL_283;
                        }
                        v961 = *(WTF::StringImpl **)v8;
                        uint64_t v962 = *((void *)v8 + 1);
                        *(void *)uint64_t v8 = 0;
                        *((void *)v8 + 1) = 0;
                        uint64_t v963 = *((void *)v8 + 3);
                        if (v963 && v962) {
                          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v963 + 16))(v963, v961);
                        }
                      }
                      unint64_t v110 = *(WTF::StringImpl **)v8;
                      uint64_t v108 = *((void *)v8 + 1);
                      *(void *)uint64_t v8 = 0;
                      *((void *)v8 + 1) = 0;
                      uint64_t v109 = *((void *)v8 + 3);
                      if (!v109) {
                        goto LABEL_283;
                      }
                      goto LABEL_247;
                    }
                    if (v15 == 1875 && *(unsigned char *)(v13 + 33))
                    {
                      WebKit::WebPageProxy::cancelTextRecognitionForVideoInElementFullScreen((WebKit::WebPageProxy *)v11);
                      goto LABEL_283;
                    }
                    if (*((unsigned __int16 *)v8 + 25) <= 0x7E7u)
                    {
                      if (*((unsigned __int16 *)v8 + 25) > 0x787u)
                      {
                        switch(*((_WORD *)v8 + 25))
                        {
                          case 0x799:
                            IPC::Decoder::decode<std::tuple<WebKit::UserData>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                            if (!v1322.request.includeSnapshot) {
                              goto LABEL_283;
                            }
                            WebKit::WebPageProxy::didResignInputElementStrongPasswordAppearance(v11, (CFTypeRef **)&v1322);
                            goto LABEL_1862;
                          case 0x79A:
                            WebKit::WebPageProxy::didRestoreScrollPosition((WebKit::WebPageProxy *)v11);
                            goto LABEL_283;
                          case 0x79B:
                          case 0x79C:
                          case 0x79D:
                          case 0x79F:
                          case 0x7A0:
                          case 0x7A3:
                          case 0x7A4:
                          case 0x7A5:
                          case 0x7A7:
                          case 0x7A8:
                          case 0x7A9:
                          case 0x7AD:
                          case 0x7AE:
                          case 0x7AF:
                          case 0x7B0:
                          case 0x7B1:
                          case 0x7B3:
                          case 0x7B4:
                          case 0x7B6:
                          case 0x7B7:
                          case 0x7B8:
                          case 0x7BD:
                          case 0x7BE:
                          case 0x7C1:
                          case 0x7C2:
                          case 0x7C5:
                          case 0x7C6:
                          case 0x7C7:
                            goto LABEL_1820;
                          case 0x79E:
                            IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((IPC::Decoder *)v8, &v1322);
                            if (v1322.canBeValid) {
                              WebKit::WebPageProxy::didStartLoadForQuickLookDocumentInMainFrame((WebKit::WebPageProxy *)v11, (WTF::StringImpl **)&v1322, (const WTF::String *)&v1322.request.includeSnapshot);
                            }
                            goto LABEL_1833;
                          case 0x7A1:
                            goto LABEL_283;
                          case 0x7A2:
                            *(unsigned char *)(v11 + 963) = 0;
                            goto LABEL_283;
                          case 0x7A6:
                            WebKit::WebPageProxy::disableInspectorNodeSearch((WebKit::WebPageProxy *)v11);
                            goto LABEL_283;
                          case 0x7AA:
                            WebKit::WebPageProxy::elementDidBlur((WebKit::WebPageProxy *)v11);
                            goto LABEL_283;
                          case 0x7AB:
                            IPC::Decoder::decode<WebKit::FocusedElementInformation>((unint64_t *)v8, v1364);
                            if (!v1387)
                            {
                              LOBYTE(v1322.request.point.m_x) = 0;
                              *((unsigned char *)&v1322.elementContext.var0.var2 + 8) = 0;
                              goto LABEL_2291;
                            }
                            unint64_t v867 = *((void *)v8 + 1);
                            v868 = *(WTF::StringImpl **)v8;
                            unint64_t v869 = *((void *)v8 + 2) - *(void *)v8;
                            if (v867 <= v869)
                            {
                              unint64_t v1067 = 0;
                              v1068 = 0;
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1069 = *((void *)v8 + 3);
                              if (v1069)
                              {
                                if (v867)
                                {
                                  (*(void (**)(uint64_t))(*(void *)v1069 + 16))(v1069);
                                  v1068 = *(WTF::StringImpl **)v8;
                                  unint64_t v1067 = *((void *)v8 + 1);
                                }
                                else
                                {
                                  unint64_t v1067 = 0;
                                  v1068 = 0;
                                }
                              }
                            }
                            else
                            {
                              v870 = (unsigned __int8 *)v868 + v869;
                              *((void *)v8 + 2) = v870 + 1;
                              if (v868)
                              {
                                unsigned int v871 = *v870;
                                if (v871 < 2)
                                {
                                  BOOL v872 = v871 != 0;
                                  if (v867 <= v870 + 1 - (unsigned __int8 *)v868)
                                  {
                                    unint64_t v1072 = 0;
                                    v1073 = 0;
                                    *(void *)uint64_t v8 = 0;
                                    *((void *)v8 + 1) = 0;
                                    uint64_t v1074 = *((void *)v8 + 3);
                                    if (v1074)
                                    {
                                      (*(void (**)(uint64_t))(*(void *)v1074 + 16))(v1074);
                                      unint64_t v1072 = 0;
                                      v868 = *(WTF::StringImpl **)v8;
                                      uint64_t v1211 = *((void *)v8 + 1);
                                      uint64_t v1212 = *((void *)v8 + 3);
                                      *(void *)uint64_t v8 = 0;
                                      *((void *)v8 + 1) = 0;
                                      v1073 = 0;
                                      if (v1212)
                                      {
                                        if (v1211)
                                        {
                                          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1212 + 16))(v1212, v868);
                                          v1073 = *(WTF::StringImpl **)v8;
                                          unint64_t v1072 = *((void *)v8 + 1);
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    *((void *)v8 + 2) = v870 + 2;
                                    unsigned int v873 = v870[1];
                                    if (v873 < 2)
                                    {
                                      BOOL v874 = v873 != 0;
                                      uint64_t v875 = IPC::Decoder::decode<WTF::OptionSet<WebCore::ActivityState>>((IPC::Decoder *)v8);
                                      if ((v875 & 0xFF0000) != 0)
                                      {
                                        uint64_t v10 = v875;
                                        IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)v1315);
                                        if (v1315[8])
                                        {
                                          if (!v1387) {
                                            goto LABEL_2796;
                                          }
                                          std::__tuple_leaf<0ul,WebKit::FocusedElementInformation,false>::__tuple_leaf[abi:sn180100]<WebKit::FocusedElementInformation,void>((uint64_t)&v1322, (long long *)v1364);
                                          LOBYTE(v1322.dataDetectorBounds.m_size.m_width) = v872;
                                          BYTE1(v1322.dataDetectorBounds.m_size.m_width) = v874;
                                          HIWORD(v1322.dataDetectorBounds.m_size.m_width) = v10;
                                          unint64_t v876 = *(void *)v1315;
                                          if (*(void *)v1315) {
                                            CFRetain(*(CFTypeRef *)(*(void *)v1315 + 8));
                                          }
                                          v1322.elementContext.var0.var2.m_value.m_identifier = v876;
                                          *((unsigned char *)&v1322.elementContext.var0.var2 + 8) = 1;
                                          if (v1315[8])
                                          {
                                            uint64_t v877 = *(void *)v1315;
                                            *(void *)v1315 = 0;
                                            if (v877) {
                                              CFRelease(*(CFTypeRef *)(v877 + 8));
                                            }
                                          }
LABEL_2289:
                                          if (v1387) {
                                            WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v1364, v868);
                                          }
LABEL_2291:
                                          if (*((unsigned char *)&v1322.elementContext.var0.var2 + 8)
                                            || (v1077 = *(WTF::StringImpl **)v8,
                                                uint64_t v1078 = *((void *)v8 + 1),
                                                *(void *)uint64_t v8 = 0,
                                                *((void *)v8 + 1) = 0,
                                                (uint64_t v1079 = *((void *)v8 + 3)) != 0)
                                            && v1078
                                            && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1079 + 16))(v1079, v1077), *((unsigned char *)&v1322.elementContext.var0.var2 + 8)))
                                          {
                                            WebKit::WebPageProxy::elementDidFocus(v11, (uint64_t)&v1322, LOBYTE(v1322.dataDetectorBounds.m_size.m_width), BYTE1(v1322.dataDetectorBounds.m_size.m_width), HIWORD(v1322.dataDetectorBounds.m_size.m_width), (API::Object **)&v1322.elementContext);
                                            if (*((unsigned char *)&v1322.elementContext.var0.var2 + 8))
                                            {
                                              unint64_t v1076 = v1322.elementContext.var0.var2.m_value.m_identifier;
                                              v1322.elementContext.var0.var2.m_value.m_identifier = 0;
                                              if (v1076) {
                                                CFRelease(*(CFTypeRef *)(v1076 + 8));
                                              }
                                              v828 = (WebKit::FocusedElementInformation *)&v1322;
LABEL_2296:
                                              WebKit::FocusedElementInformation::~FocusedElementInformation(v828, v827);
                                            }
                                          }
                                          goto LABEL_283;
                                        }
                                      }
LABEL_2288:
                                      LOBYTE(v1322.request.point.m_x) = 0;
                                      *((unsigned char *)&v1322.elementContext.var0.var2 + 8) = 0;
                                      goto LABEL_2289;
                                    }
                                    unint64_t v1072 = v867;
                                    v1073 = v868;
                                  }
                                  *(void *)uint64_t v8 = 0;
                                  *((void *)v8 + 1) = 0;
                                  uint64_t v1075 = *((void *)v8 + 3);
                                  if (v1075 && v1072) {
                                    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1075 + 16))(v1075, v1073, v1072);
                                  }
                                  goto LABEL_2288;
                                }
LABEL_2283:
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1071 = *((void *)v8 + 3);
                                if (v1071 && v867) {
                                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1071 + 16))(v1071, v868);
                                }
                                goto LABEL_2288;
                              }
                              unint64_t v1067 = v867;
                              v1068 = 0;
                            }
                            unint64_t v867 = 0;
                            v868 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1070 = *((void *)v8 + 3);
                            if (v1070)
                            {
                              if (v1067)
                              {
                                (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1070 + 16))(v1070, v1068, v1067);
                                v868 = *(WTF::StringImpl **)v8;
                                unint64_t v867 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v867 = 0;
                                v868 = 0;
                              }
                            }
                            goto LABEL_2283;
                          case 0x7AC:
                            WebKit::WebPageProxy::enableInspectorNodeSearch((WebKit::WebPageProxy *)v11);
                            goto LABEL_283;
                          case 0x7B2:
                            v878 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)v8);
                            if (v879) {
                              *(void *)(*(void *)(v11 + 32) + 720) = v878;
                            }
                            goto LABEL_283;
                          case 0x7B5:
                            unsigned __int16 v880 = IPC::Decoder::decode<WebCore::InputMode>((uint64_t *)v8);
                            if (v880 > 0xFFu)
                            {
                              WebKit::WebPageProxy::focusedElementDidChangeInputMode(v11, v880);
                              goto LABEL_283;
                            }
                            unint64_t v110 = *(WTF::StringImpl **)v8;
                            uint64_t v108 = *((void *)v8 + 1);
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v109 = *((void *)v8 + 3);
                            if (v109) {
                              goto LABEL_247;
                            }
                            goto LABEL_283;
                          case 0x7B9:
                            IPC::ArgumentCoder<WebCore::LinkIcon,void>::decode((IPC::Decoder *)v8, (uint64_t)v1364);
                            if (!v1365[16])
                            {
                              v1034 = *(WTF::StringImpl **)v8;
                              uint64_t v1035 = *((void *)v8 + 1);
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1036 = *((void *)v8 + 3);
                              if (!v1036) {
                                goto LABEL_1655;
                              }
                              if (!v1035) {
                                goto LABEL_1655;
                              }
                              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1036 + 16))(v1036, v1034);
                              if (!v1365[16]) {
                                goto LABEL_1655;
                              }
                            }
                            IPC::Decoder::decode<WebKit::CallbackID>((IPC::Decoder *)v8, v1315);
                            uint64_t v10 = v1315[8];
                            if (v1315[8])
                            {
                              if (!v1365[16]) {
                                goto LABEL_2796;
                              }
                              IntPoint v882 = *(IntPoint *)v1364;
                              *(void *)v1364 = 0;
                              v1322.request.point = v882;
                              *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)&v1364[8];
                              *(_OWORD *)&v1322.int isLink = *(_OWORD *)&v1364[24];
                              *(_DWORD *)&v1364[8] &= ~1u;
                              LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = v1364[40];
                              *(_OWORD *)&v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = *(_OWORD *)&v1364[48];
                              FloatPoint v883 = *(FloatPoint *)v1365;
                              *(void *)&v1364[48] = 0;
                              *(void *)v1365 = 0;
                              v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = v883;
                              v884 = *(StringImpl **)&v1365[8];
                              *(void *)&v1365[8] = 0;
                              v1322.url.m_string.m_impl.m_ptr = v884;
                              uint64_t v13 = *(void *)v1315;
                              *((void *)&v1322.url + 1) = *(void *)v1315;
                              LOBYTE(v1322.url.m_userEnd) = 1;
                            }
                            else
                            {
                              LOBYTE(v1322.request.point.m_x) = 0;
                              LOBYTE(v1322.url.m_userEnd) = 0;
                              if (!v1365[16]) {
                                goto LABEL_1655;
                              }
                            }
                            WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1365, v881);
                            v911 = *(WTF::StringImpl **)&v1364[48];
                            *(void *)&v1364[48] = 0;
                            if (v911)
                            {
                              if (*(_DWORD *)v911 == 2) {
                                WTF::StringImpl::destroy(v911, v910);
                              }
                              else {
                                *(_DWORD *)v911 -= 2;
                              }
                            }
                            v917 = *(WTF::StringImpl **)v1364;
                            *(void *)v1364 = 0;
                            if (v917)
                            {
                              if (*(_DWORD *)v917 == 2) {
                                WTF::StringImpl::destroy(v917, v910);
                              }
                              else {
                                *(_DWORD *)v917 -= 2;
                              }
                            }
                            if (!v10) {
                              goto LABEL_1655;
                            }
                            *(void *)v1364 = v13;
                            WebKit::WebPageProxy::getLoadDecisionForIcon(v11, (uint64_t)&v1322, (uint64_t *)v1364);
                            if (!LOBYTE(v1322.url.m_userEnd)) {
                              goto LABEL_283;
                            }
                            WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.adjustedPointForNodeRespondingToClickEvents, v918);
                            v919 = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
                            v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
                            if (!v919) {
                              goto LABEL_2060;
                            }
                            goto LABEL_2057;
                          case 0x7BA:
                            IPC::Decoder::decode<std::tuple<WebKit::UserData>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                            if (!v1322.request.includeSnapshot) {
                              goto LABEL_283;
                            }
                            WebKit::WebPageProxy::handleAutoFillButtonClick(v11, (CFTypeRef **)&v1322);
LABEL_1862:
                            if (v1322.request.includeSnapshot)
                            {
                              IntPoint v885 = v1322.request.point;
                              v1322.request.point = 0;
                              if (v885) {
                                CFRelease(*(CFTypeRef *)(*(void *)&v885 + 8));
                              }
                            }
                            goto LABEL_283;
                          case 0x7BB:
                            IPC::ArgumentCoder<WebKit::WebAutocorrectionContext,void>::decode((IPC::Decoder *)v8, (uint64_t)&v1322);
                            if (LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)) {
                              goto LABEL_1866;
                            }
                            v1037 = *(WTF::StringImpl **)v8;
                            uint64_t v1038 = *((void *)v8 + 1);
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1039 = *((void *)v8 + 3);
                            if (!v1039 || !v1038) {
                              goto LABEL_2235;
                            }
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1039 + 16))(v1039, v1037);
                            if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)) {
                              goto LABEL_2598;
                            }
LABEL_1866:
                            *(InteractionInformationRequest *)v1364 = v1322.request;
                            *(_OWORD *)&v1364[16] = *(_OWORD *)&v1322.canBeValid;
                            *(_OWORD *)&v1364[32] = *(_OWORD *)&v1322.isContentEditable;
                            v1364[48] = 1;
                            WebKit::WebPageProxy::handleAutocorrectionContext((WebKit::WebPageProxy *)v11, (const WebAutocorrectionContext *)v1364);
                            if (!v1364[48]) {
                              goto LABEL_283;
                            }
                            v886 = *(WTF::StringImpl **)&v1364[24];
                            *(void *)&v1364[24] = 0;
                            if (v886)
                            {
                              if (*(_DWORD *)v886 == 2) {
                                WTF::StringImpl::destroy(v886, v448);
                              }
                              else {
                                *(_DWORD *)v886 -= 2;
                              }
                            }
                            v924 = *(WTF::StringImpl **)&v1364[16];
                            *(void *)&v1364[16] = 0;
                            if (v924)
                            {
                              if (*(_DWORD *)v924 == 2) {
                                WTF::StringImpl::destroy(v924, v448);
                              }
                              else {
                                *(_DWORD *)v924 -= 2;
                              }
                            }
                            v925 = *(WTF::StringImpl **)&v1364[8];
                            *(void *)&v1364[8] = 0;
                            if (v925)
                            {
                              if (*(_DWORD *)v925 == 2) {
                                WTF::StringImpl::destroy(v925, v448);
                              }
                              else {
                                *(_DWORD *)v925 -= 2;
                              }
                            }
                            v449 = *(WTF::StringImpl **)v1364;
                            *(void *)v1364 = 0;
                            if (!v449) {
                              goto LABEL_283;
                            }
                            int v450 = *(_DWORD *)v449 - 2;
                            if (*(_DWORD *)v449 == 2) {
                              goto LABEL_1189;
                            }
                            goto LABEL_965;
                          case 0x7BC:
                            unint64_t v887 = *((void *)v8 + 1);
                            v888 = *(WTF::StringImpl **)v8;
                            unint64_t v889 = *((void *)v8 + 2) - *(void *)v8;
                            if (v887 <= v889)
                            {
                              unint64_t v1040 = 0;
                              v1041 = 0;
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1042 = *((void *)v8 + 3);
                              if (v1042)
                              {
                                if (v887)
                                {
                                  (*(void (**)(uint64_t))(*(void *)v1042 + 16))(v1042);
                                  v1041 = *(WTF::StringImpl **)v8;
                                  unint64_t v1040 = *((void *)v8 + 1);
                                }
                                else
                                {
                                  unint64_t v1040 = 0;
                                  v1041 = 0;
                                }
                              }
                            }
                            else
                            {
                              v890 = (unsigned __int8 *)v888 + v889;
                              uint64_t v891 = (uint64_t)v888 + v889 + 1;
                              *((void *)v8 + 2) = v891;
                              if (v888)
                              {
                                uint64_t v892 = *v890;
                                if (v892 >= 4) {
                                  goto LABEL_2313;
                                }
                                if (v887 <= v891 - (uint64_t)v888)
                                {
                                  *(void *)uint64_t v8 = 0;
                                  *((void *)v8 + 1) = 0;
                                  uint64_t v1085 = *((void *)v8 + 3);
                                  if (v1085)
                                  {
                                    (*(void (**)(uint64_t))(*(void *)v1085 + 16))(v1085);
                                    v1213 = *(WTF::StringImpl **)v8;
                                    uint64_t v1214 = *((void *)v8 + 1);
                                    uint64_t v1215 = *((void *)v8 + 3);
                                    *(void *)uint64_t v8 = 0;
                                    *((void *)v8 + 1) = 0;
                                    if (v1215)
                                    {
                                      if (v1214) {
                                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1215 + 16))(v1215, v1213);
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  *((void *)v8 + 2) = v890 + 2;
                                  if (v890[1] < 8uLL)
                                  {
                                    (*(void (**)(void, unint64_t, uint64_t))(**(void **)(v11 + 104)
                                                                                              + 440))(*(void *)(v11 + 104), v11, v892);
                                    goto LABEL_283;
                                  }
                                }
                                goto LABEL_2312;
                              }
                              unint64_t v1040 = v887;
                              v1041 = 0;
                            }
                            unint64_t v887 = 0;
                            v888 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1043 = *((void *)v8 + 3);
                            if (!v1043) {
                              goto LABEL_2313;
                            }
                            if (!v1040)
                            {
                              unint64_t v887 = 0;
                              v888 = 0;
LABEL_2313:
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1086 = *((void *)v8 + 3);
                              if (v1086 && v887) {
                                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1086 + 16))(v1086, v888);
                              }
                              unint64_t v110 = *(WTF::StringImpl **)v8;
                              uint64_t v108 = *((void *)v8 + 1);
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v109 = *((void *)v8 + 3);
                              if (!v109) {
                                goto LABEL_283;
                              }
                              goto LABEL_247;
                            }
                            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1043
                                                                                                 + 16))(v1043, v1041, v1040);
LABEL_2312:
                            v888 = *(WTF::StringImpl **)v8;
                            unint64_t v887 = *((void *)v8 + 1);
                            goto LABEL_2313;
                          case 0x7BF:
                            IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((IPC::Decoder *)v8, &v1322);
                            if (v1322.canBeValid) {
                              WebKit::WebPageProxy::handleMessage((WebKit::WebProcessProxy **)v11, v10, (WTF::StringImpl **)&v1322, (CFTypeRef **)&v1322.request.includeSnapshot);
                            }
                            goto LABEL_1883;
                          case 0x7C0:
                            IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((IPC::Decoder *)v8, &v1322);
                            if (!v1322.canBeValid) {
                              goto LABEL_1883;
                            }
                            uint64_t v894 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                            if (!(_BYTE)v893) {
                              goto LABEL_1883;
                            }
                            *(void *)v1364 = v894;
                            uint64_t v8 = &v1364[8];
                            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                            v895 = (void *)WTF::fastMalloc((WTF *)0x18);
                            void *v895 = &unk_1EEA02C90;
                            v895[1] = *(void *)v1364;
                            uint64_t v896 = *(void *)&v1364[8];
                            *(void *)&v1364[8] = 0;
                            v895[2] = v896;
                            *(void *)v1315 = v895;
                            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                            if (!v1322.canBeValid) {
                              goto LABEL_2796;
                            }
                            WebKit::WebPageProxy::handleMessageWithAsyncReply(v11, (WTF::StringImpl **)&v1322, (uint64_t *)&v1322.request.includeSnapshot, (uint64_t *)v1315);
                            uint64_t v897 = *(void *)v1315;
                            *(void *)v1315 = 0;
                            if (v897) {
                              (*(void (**)(uint64_t))(*(void *)v897 + 8))(v897);
                            }
LABEL_1883:
                            std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v893);
                            goto LABEL_283;
                          case 0x7C3:
                            WebKit::WebPageProxy::hideInspectorHighlight((WebKit::WebPageProxy *)v11);
                            goto LABEL_283;
                          case 0x7C4:
                            WebKit::WebPageProxy::hideInspectorIndication((WebKit::WebPageProxy *)v11);
                            goto LABEL_283;
                          case 0x7C8:
                            v1322.request.point = (IntPoint)IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)v8);
                            *(_DWORD *)&v1322.request.includeSnapshot = v898;
                            if ((_BYTE)v898) {
                              (*(void (**)(void, InteractionInformationAtPosition *))(**(void **)(v11 + 104)
                            }
                                                                                                 + 528))(*(void *)(v11 + 104), &v1322);
                            goto LABEL_283;
                          case 0x7C9:
                            unsigned __int16 v899 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
                            if (v899 > 0xFFu)
                            {
                              *(unsigned char *)(v11 + 1056) = v899 != 0;
                              goto LABEL_283;
                            }
                            unint64_t v110 = *(WTF::StringImpl **)v8;
                            uint64_t v108 = *((void *)v8 + 1);
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v109 = *((void *)v8 + 3);
                            if (v109) {
                              goto LABEL_247;
                            }
                            goto LABEL_283;
                          case 0x7CA:
                            unint64_t v900 = *((void *)v8 + 1);
                            v901 = *(WTF::StringImpl **)v8;
                            unint64_t v902 = ((*((void *)v8 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v8;
                            if (v900 < v902 || v900 - v902 <= 3)
                            {
                              unint64_t v1029 = 0;
                              v1030 = 0;
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1031 = *((void *)v8 + 3);
                              if (v1031)
                              {
                                if (v900)
                                {
                                  (*(void (**)(uint64_t))(*(void *)v1031 + 16))(v1031);
                                  v1030 = *(WTF::StringImpl **)v8;
                                  unint64_t v1029 = *((void *)v8 + 1);
                                }
                                else
                                {
                                  unint64_t v1029 = 0;
                                  v1030 = 0;
                                }
                              }
                            }
                            else
                            {
                              v903 = (unsigned int *)((char *)v901 + v902);
                              *((void *)v8 + 2) = v903 + 1;
                              if (v901)
                              {
                                unsigned int v904 = *v903;
                                if (!(v904 >> 28))
                                {
                                  WebKit::WebPageProxy::isPlayingMediaDidChange(v11, v904);
                                  goto LABEL_283;
                                }
LABEL_2226:
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1033 = *((void *)v8 + 3);
                                if (!v1033) {
                                  goto LABEL_283;
                                }
                                if (!v900) {
                                  goto LABEL_283;
                                }
                                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1033 + 16))(v1033, v901);
                                unint64_t v110 = *(WTF::StringImpl **)v8;
                                uint64_t v108 = *((void *)v8 + 1);
                                uint64_t v109 = *((void *)v8 + 3);
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                if (!v109) {
                                  goto LABEL_283;
                                }
                                goto LABEL_247;
                              }
                              unint64_t v1029 = v900;
                              v1030 = 0;
                            }
                            unint64_t v900 = 0;
                            v901 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1032 = *((void *)v8 + 3);
                            if (v1032)
                            {
                              if (v1029)
                              {
                                (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1032 + 16))(v1032, v1030, v1029);
                                v901 = *(WTF::StringImpl **)v8;
                                unint64_t v900 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v900 = 0;
                                v901 = 0;
                              }
                            }
                            goto LABEL_2226;
                          default:
                            if (v15 != 1928) {
                              goto LABEL_1820;
                            }
                            uint64_t v797 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
                            if (!v798)
                            {
                              LOBYTE(v1322.request.point.m_x) = 0;
                              LOBYTE(v1322.url.m_string.m_impl.m_ptr) = 0;
                              goto LABEL_2246;
                            }
                            uint64_t v10 = v797;
                            IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v8, v1315);
                            if (!v1315[8])
                            {
                              v1048 = *(WTF::StringImpl **)v8;
                              uint64_t v1049 = *((void *)v8 + 1);
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1050 = *((void *)v8 + 3);
                              if (!v1050
                                || !v1049
                                || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1050 + 16))(v1050, v1048), !v1315[8]))
                              {
                                LOBYTE(v1322.request.point.m_x) = 0;
                                LOBYTE(v1322.url.m_string.m_impl.m_ptr) = 0;
                                goto LABEL_1927;
                              }
                            }
                            IPC::Decoder::decode<WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)v8, (uint64_t)v1364);
                            if (!v1364[16])
                            {
                              LOBYTE(v1322.request.point.m_x) = 0;
                              LOBYTE(v1322.url.m_string.m_impl.m_ptr) = 0;
                              goto LABEL_1925;
                            }
                            v800 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v8);
                            if (!v801) {
                              goto LABEL_2305;
                            }
                            v802 = v800;
                            v803 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v8);
                            if (!v804) {
                              goto LABEL_2305;
                            }
                            unint64_t v805 = (unint64_t)v803;
                            v806 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v8);
                            if (!v807) {
                              goto LABEL_2305;
                            }
                            unint64_t v808 = (unint64_t)v806;
                            v809 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v8);
                            if (!v810) {
                              goto LABEL_2305;
                            }
                            unint64_t v811 = *((void *)v8 + 1);
                            v799 = *(WTF::StringImpl **)v8;
                            unint64_t v812 = *((void *)v8 + 2) - *(void *)v8;
                            if (v811 <= v812)
                            {
                              unint64_t v1080 = 0;
                              v1081 = 0;
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1082 = *((void *)v8 + 3);
                              if (v1082)
                              {
                                if (v811)
                                {
                                  (*(void (**)(uint64_t))(*(void *)v1082 + 16))(v1082);
                                  v1081 = *(WTF::StringImpl **)v8;
                                  unint64_t v1080 = *((void *)v8 + 1);
                                }
                                else
                                {
                                  unint64_t v1080 = 0;
                                  v1081 = 0;
                                }
                              }
                            }
                            else
                            {
                              v813 = (unsigned __int8 *)v799 + v812;
                              *((void *)v8 + 2) = v813 + 1;
                              if (v799)
                              {
                                unsigned int v814 = *v813;
                                if (v814 < 2)
                                {
                                  BOOL v815 = v814 != 0;
                                  if (!v1315[8] || !v1364[16]) {
                                    goto LABEL_2796;
                                  }
                                  v816 = v809;
                                  v1322.request.point = (IntPoint)v10;
                                  WebCore::Color::Color();
                                  uint64_t v817 = *(void *)v1364;
                                  *(void *)v1364 = 0;
                                  *(void *)&v1322.canBeValid = v817;
                                  uint64_t v818 = *(void *)&v1364[8];
                                  *(void *)&v1364[8] = 0;
                                  *(void *)&v1322.int isLink = v818;
                                  *(void *)&v1322.isContentEditable = v802;
                                  v1322.containerScrollingNodeID.m_value.m_object.m_identifier = v805;
                                  v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = v808;
                                  *(void *)&v1322.BOOL isDataDetectorLink = v816;
                                  char v819 = 1;
                                  LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) = v815;
LABEL_1771:
                                  LOBYTE(v1322.url.m_string.m_impl.m_ptr) = v819;
                                  if (v1364[16])
                                  {
                                    v820 = *(WTF **)v1364;
                                    if (*(void *)v1364)
                                    {
                                      *(void *)v1364 = 0;
                                      *(_DWORD *)&v1364[8] = 0;
                                      WTF::fastFree(v820, v799);
                                    }
                                  }
LABEL_1925:
                                  if (v1315[8])
                                  {
                                    if ((*(void *)v1315 & 0x8000000000000) != 0)
                                    {
                                      v1011 = (unsigned int *)(*(void *)v1315 & 0xFFFFFFFFFFFFLL);
                                      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v1315 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                                      {
                                        atomic_store(1u, v1011);
                                        WTF::fastFree((WTF *)v1011, v799);
                                      }
                                    }
                                  }
LABEL_1927:
                                  if (LOBYTE(v1322.url.m_string.m_impl.m_ptr)) {
                                    goto LABEL_1928;
                                  }
LABEL_2246:
                                  v1045 = *(WTF::StringImpl **)v8;
                                  uint64_t v1046 = *((void *)v8 + 1);
                                  *(void *)uint64_t v8 = 0;
                                  *((void *)v8 + 1) = 0;
                                  uint64_t v1047 = *((void *)v8 + 3);
                                  if (!v1047) {
                                    goto LABEL_283;
                                  }
                                  if (!v1046) {
                                    goto LABEL_283;
                                  }
                                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1047 + 16))(v1047, v1045);
                                  if (!LOBYTE(v1322.url.m_string.m_impl.m_ptr)) {
                                    goto LABEL_283;
                                  }
LABEL_1928:
                                  WebKit::WebPageProxy::didGetTapHighlightGeometries(v11, *(void *)&v1322.request.point, (uint64_t)&v1322.request.includeSnapshot, (uint64_t)&v1322.canBeValid, (uint64_t)&v1322.isContentEditable, (uint64_t)&v1322.containerScrollingNodeID, (uint64_t)&v1322.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t)&v1322.isDataDetectorLink, SLOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x));
                                  if (LOBYTE(v1322.url.m_string.m_impl.m_ptr))
                                  {
                                    v912 = *(WTF **)&v1322.canBeValid;
                                    if (*(void *)&v1322.canBeValid)
                                    {
                                      *(void *)&v1322.canBeValid = 0;
                                      *(_DWORD *)&v1322.int isLink = 0;
                                      WTF::fastFree(v912, v65);
                                    }
                                    if ((*(void *)&v1322.request.includeSnapshot & 0x8000000000000) != 0)
                                    {
                                      m_identifier = (WTF *)(*(void *)&v1322.request.includeSnapshot & 0xFFFFFFFFFFFFLL);
                                      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v1322.request.includeSnapshot & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                                      {
                                        atomic_store(1u, (unsigned int *)m_identifier);
                                        goto LABEL_158;
                                      }
                                    }
                                  }
                                  goto LABEL_283;
                                }
LABEL_2306:
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1084 = *((void *)v8 + 3);
                                if (v1084 && v811) {
                                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1084 + 16))(v1084, v799);
                                }
                                char v819 = 0;
                                LOBYTE(v1322.request.point.m_x) = 0;
                                goto LABEL_1771;
                              }
                              unint64_t v1080 = v811;
                              v1081 = 0;
                            }
                            unint64_t v811 = 0;
                            v799 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1083 = *((void *)v8 + 3);
                            if (v1083)
                            {
                              if (v1080)
                              {
                                (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1083 + 16))(v1083, v1081, v1080);
LABEL_2305:
                                v799 = *(WTF::StringImpl **)v8;
                                unint64_t v811 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v811 = 0;
                                v799 = 0;
                              }
                            }
                            goto LABEL_2306;
                        }
                      }
                      switch(*((_WORD *)v8 + 25))
                      {
                        case 0x75B:
                          IPC::Decoder::decode<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, &v1322);
                          if (LOBYTE(v1322.imageURL.m_string.m_impl.m_ptr)) {
                            WebKit::WebPageProxy::contentFilterDidBlockLoadForFrame(v11, (WebKit::AuxiliaryProcessProxy *)v10, (uint64_t)&v1322, *(uint64_t *)&v1322.url.m_hostEnd, *(uint64_t *)&v1322.url.m_pathEnd);
                          }
                          std::__optional_destruct_base<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322);
                          goto LABEL_283;
                        case 0x75C:
                          IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1315);
                          if (!(_BYTE)v1317) {
                            goto LABEL_1655;
                          }
                          IPC::ArgumentCoder<WebCore::ContentRuleListResults,void>::decode((IPC::Decoder *)v8, (uint64_t)v1364);
                          if (v1364[56]
                            || (v784 = *(WTF::StringImpl **)v8,
                                uint64_t v1012 = *((void *)v8 + 1),
                                *(void *)uint64_t v8 = 0,
                                *((void *)v8 + 1) = 0,
                                (uint64_t v1013 = *((void *)v8 + 3)) != 0)
                            && v1012
                            && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1013 + 16))(v1013, v784), v1364[56]))
                          {
                            if (!(_BYTE)v1317) {
                              goto LABEL_2796;
                            }
                            IntPoint v785 = *(IntPoint *)v1315;
                            *(void *)v1315 = 0;
                            v1322.request.point = v785;
                            *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)&v1315[8];
                            *(_OWORD *)&v1322.int isLink = v1316;
                            *(_DWORD *)&v1315[8] &= ~1u;
                            LODWORD(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = *(_DWORD *)v1364;
                            unint64_t v786 = *(void *)&v1364[8];
                            memset(&v1364[8], 0, 48);
                            v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = v786;
                            *(void *)&v1322.BOOL isDataDetectorLink = *(void *)&v1364[16];
                            v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = *(FloatPoint *)&v1364[24];
                            v1322.url.m_string.m_impl.m_ptr = *(StringImpl **)&v1364[32];
                            *((void *)&v1322.url + 1) = *(void *)&v1364[40];
                            *(void *)&v1322.url.m_userEnd = *(void *)&v1364[48];
                            LOBYTE(v1322.url.m_hostEnd) = 1;
                            WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1364[40], v784);
                            WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1364[24], v787);
                            WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1364[8], v788);
                            int v789 = 0;
                          }
                          else
                          {
                            LOBYTE(v1322.request.point.m_x) = 0;
                            LOBYTE(v1322.url.m_hostEnd) = 0;
                            int v789 = 1;
                          }
                          if ((_BYTE)v1317)
                          {
                            v790 = *(WTF::StringImpl **)v1315;
                            *(void *)v1315 = 0;
                            if (v790)
                            {
                              if (*(_DWORD *)v790 == 2) {
                                WTF::StringImpl::destroy(v790, v784);
                              }
                              else {
                                *(_DWORD *)v790 -= 2;
                              }
                            }
                          }
                          if (v789) {
                            goto LABEL_1655;
                          }
                          WebKit::WebPageProxy::contentRuleListNotification(v11, (uint64_t)&v1322, (uint64_t)&v1322.containerScrollingNodeID);
                          if (!LOBYTE(v1322.url.m_hostEnd)) {
                            goto LABEL_283;
                          }
                          WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.url + 8, v913);
                          WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.adjustedPointForNodeRespondingToClickEvents, v914);
                          WTF::Vector<WebCore::ContentExtensions::ModifyHeadersAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.containerScrollingNodeID.m_value.m_processIdentifier, v915);
                          break;
                        case 0x75D:
                          WebKit::WebPageProxy::couldNotRestorePageState((WebKit::WebPageProxy *)v11);
                          goto LABEL_283;
                        case 0x75E:
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1364);
                          if (!v1364[8]) {
                            goto LABEL_1655;
                          }
                          unint64_t v791 = *((void *)v8 + 1);
                          v792 = *(WTF::StringImpl **)v8;
                          unint64_t v793 = *((void *)v8 + 2) - *(void *)v8;
                          if (v791 <= v793) {
                            goto LABEL_2818;
                          }
                          v794 = (unsigned __int8 *)v792 + v793;
                          *((void *)v8 + 2) = v794 + 1;
                          if (!v792) {
                            goto LABEL_2828;
                          }
                          unsigned int v795 = *v794;
                          if (v795 >= 3) {
                            goto LABEL_2820;
                          }
                          v1322.request.point = *(IntPoint *)v1364;
                          v1322.request.includeSnapshot = v795;
                          v1322.canBeValid = 1;
                          WebKit::WebPageProxy::createInspectorTarget(v11, v10, &v1322, v795);
                          goto LABEL_1749;
                        case 0x75F:
                        case 0x760:
                        case 0x761:
                        case 0x763:
                        case 0x764:
                        case 0x765:
                        case 0x766:
                        case 0x767:
                          goto LABEL_1820;
                        case 0x762:
                          IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                          if (!v1322.request.includeSnapshot) {
                            goto LABEL_283;
                          }
                          WebKit::WebPageProxy::destroyInspectorTarget((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (WTF::StringImpl **)&v1322);
                          goto LABEL_1753;
                        case 0x768:
                          uint64_t v796 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v8);
                          if ((v796 & 0xFF00000000) != 0) {
                            *(_DWORD *)(v11 + 900) = v796;
                          }
                          goto LABEL_283;
                        default:
                          if (v15 == 1917) {
                            goto LABEL_283;
                          }
                          if (v15 != 1921) {
                            goto LABEL_1820;
                          }
                          IPC::Decoder::decode<std::tuple<WebCore::ShareableResourceHandle>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                          if (v1322.isLink)
                          {
                            WebKit::WebPageProxy::didFinishLoadForQuickLookDocumentInMainFrame(v11);
                            if (v1322.isLink) {
                              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1322);
                            }
                          }
                          goto LABEL_283;
                      }
                      goto LABEL_2060;
                    }
                    if (*((unsigned __int16 *)v8 + 25) <= 0x824u)
                    {
                      switch(*((_WORD *)v8 + 25))
                      {
                        case 0x7FF:
                          IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                          if (!v1322.request.includeSnapshot) {
                            goto LABEL_283;
                          }
                          uint64_t v757 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!(_BYTE)v448) {
                            goto LABEL_1753;
                          }
                          *(void *)v1364 = v757;
                          uint64_t v8 = &v1364[8];
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v758 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v758 = &unk_1EEA02C68;
                          v758[1] = *(void *)v1364;
                          uint64_t v759 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v758[2] = v759;
                          *(void *)v1315 = v758;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          if (!v1322.request.includeSnapshot) {
                            goto LABEL_2796;
                          }
                          WebKit::WebPageProxy::requestPasswordForQuickLookDocumentInMainFrame(v11, &v1322, v1315);
                          uint64_t v760 = *(void *)v1315;
                          *(void *)v1315 = 0;
                          if (v760) {
                            (*(void (**)(uint64_t))(*(void *)v760 + 8))(v760);
                          }
                          goto LABEL_1753;
                        case 0x800:
                          IPC::Decoder::decode<std::tuple<WebCore::FloatRect,WebCore::FloatPoint>>((unint64_t *)v8, &v1322);
                          if (v1322.isLink) {
                            WebKit::WebPageProxy::requestScrollToRect((WebKit::WebPageProxy *)v11, (const FloatRect *)&v1322, (const FloatPoint *)&v1322.canBeValid);
                          }
                          goto LABEL_283;
                        case 0x801:
                        case 0x802:
                        case 0x805:
                        case 0x806:
                        case 0x807:
                        case 0x808:
                        case 0x809:
                        case 0x80D:
                          goto LABEL_1820;
                        case 0x803:
                          unint64_t v830 = IPC::Decoder::decode<std::optional<WebCore::FloatPoint>>((unint64_t *)v8);
                          if ((v831 & 0xFF00000000) == 0) {
                            goto LABEL_2258;
                          }
                          unsigned int v832 = v831;
                          v833 = *(WTF::StringImpl **)v8;
                          unint64_t v834 = *((void *)v8 + 1);
                          unint64_t v835 = ((*((void *)v8 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v8;
                          if (v834 < v835 || v834 - v835 <= 7)
                          {
                            unint64_t v1051 = 0;
                            v1052 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1053 = *((void *)v8 + 3);
                            if (v1053)
                            {
                              if (v834)
                              {
                                (*(void (**)(uint64_t))(*(void *)v1053 + 16))(v1053);
                                v1052 = *(WTF::StringImpl **)v8;
                                unint64_t v1051 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v1051 = 0;
                                v1052 = 0;
                              }
                            }
                          }
                          else
                          {
                            v836 = (double *)((char *)v833 + v835);
                            *((void *)v8 + 2) = v836 + 1;
                            if (v833)
                            {
                              WebKit::WebPageProxy::restorePageCenterAndScale(v11, v830, v832, *v836);
                              goto LABEL_283;
                            }
                            unint64_t v1051 = v834;
                            v1052 = 0;
                          }
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v1054 = *((void *)v8 + 3);
                          if (v1054 && v1051) {
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1054 + 16))(v1054, v1052);
                          }
LABEL_2258:
                          unint64_t v110 = *(WTF::StringImpl **)v8;
                          uint64_t v108 = *((void *)v8 + 1);
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v109 = *((void *)v8 + 3);
                          if (v109) {
                            goto LABEL_247;
                          }
                          goto LABEL_283;
                        case 0x804:
                          unint64_t v837 = IPC::Decoder::decode<std::optional<WebCore::FloatPoint>>((unint64_t *)v8);
                          if ((v838 & 0xFF00000000) == 0) {
                            goto LABEL_2106;
                          }
                          uint64_t v839 = v837;
                          unsigned int v840 = v838;
                          v841 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v8);
                          if (!v842) {
                            goto LABEL_2031;
                          }
                          v843 = v841;
                          IPC::Decoder::decode<WebCore::RectEdges<float>>((uint64_t *)v8, (uint64_t)v1364);
                          if (!v1364[16]) {
                            goto LABEL_2106;
                          }
                          unint64_t v844 = *((void *)v8 + 1);
                          v845 = *(WTF::StringImpl **)v8;
                          unint64_t v846 = ((*((void *)v8 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v8;
                          if (v844 < v846 || v844 - v846 <= 7)
                          {
                            unint64_t v1091 = 0;
                            v1092 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1093 = *((void *)v8 + 3);
                            if (v1093)
                            {
                              if (v844)
                              {
                                (*(void (**)(uint64_t))(*(void *)v1093 + 16))(v1093);
                                v1092 = *(WTF::StringImpl **)v8;
                                unint64_t v1091 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v1091 = 0;
                                v1092 = 0;
                              }
                            }
                          }
                          else
                          {
                            v847 = (double *)((char *)v845 + v846);
                            *((void *)v8 + 2) = v847 + 1;
                            if (v845)
                            {
                              double v848 = *v847;
                              v1322.request.point = (IntPoint)v839;
                              *(_DWORD *)&v1322.request.includeSnapshot = v840;
                              *(void *)&v1322.request.includeImageData = v843;
                              *(_OWORD *)&v1322.isSelected = *(_OWORD *)v1364;
                              *(double *)&v1322.containerScrollingNodeID.m_value.m_object.m_identifier = v848;
                              LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 1;
                              WebKit::WebPageProxy::restorePageState(v11, v839, v840, (uint64_t)&v1322.request.includeImageData, (uint64_t)&v1322.isSelected, v848);
                              goto LABEL_283;
                            }
                            unint64_t v1091 = v844;
                            v1092 = 0;
                          }
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v1094 = *((void *)v8 + 3);
                          if (v1094 && v1091) {
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1094 + 16))(v1094, v1092);
                          }
                          goto LABEL_2106;
                        case 0x80A:
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
                          if (v1315[8])
                          {
                            IPC::Decoder::decode<WTF::Vector<WebCore::RecentSearch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v8, v849, (uint64_t)v1364);
                            int v851 = v1364[16];
                            if (v1364[16])
                            {
                              if (!v1315[8]) {
                                goto LABEL_2796;
                              }
                              IntPoint v852 = *(IntPoint *)v1315;
                              *(void *)v1315 = 0;
                              uint64_t v853 = *(void *)v1364;
                              *(void *)v1364 = 0;
                              v1322.request.point = v852;
                              *(void *)&v1322.request.includeSnapshot = v853;
                              uint64_t v854 = *(void *)&v1364[8];
                              *(void *)&v1364[8] = 0;
                              *(void *)&v1322.canBeValid = v854;
                              int v855 = 1;
                              v1322.int isLink = 1;
                              WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1364, v850);
                            }
                            else
                            {
                              int v855 = 0;
                              LOBYTE(v1322.request.point.m_x) = 0;
                              v1322.int isLink = 0;
                            }
                            if (v1315[8])
                            {
                              v909 = *(WTF::StringImpl **)v1315;
                              *(void *)v1315 = 0;
                              if (v909)
                              {
                                if (*(_DWORD *)v909 == 2) {
                                  WTF::StringImpl::destroy(v909, (WTF::StringImpl *)v850);
                                }
                                else {
                                  *(_DWORD *)v909 -= 2;
                                }
                              }
                            }
                            if (v851)
                            {
LABEL_1940:
                              if (!v855) {
                                goto LABEL_283;
                              }
                              WebKit::WebPageProxy::saveRecentSearches(v11, v10, &v1322, (uint64_t *)&v1322.request.includeSnapshot);
                              if (!v1322.isLink) {
                                goto LABEL_283;
                              }
                              WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.request.includeSnapshot, v916);
                              goto LABEL_2060;
                            }
                          }
                          else
                          {
                            int v855 = 0;
                            LOBYTE(v1322.request.point.m_x) = 0;
                            v1322.int isLink = 0;
                          }
                          v1008 = *(WTF::StringImpl **)v8;
                          uint64_t v1009 = *((void *)v8 + 1);
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v1010 = *((void *)v8 + 3);
                          if (v1010 && v1009) {
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1010 + 16))(v1010, v1008);
                          }
                          goto LABEL_1940;
                        case 0x80B:
                          IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((uint64_t)&v1322, (uint64_t *)v8);
                          if (v1322.isLink)
                          {
                            *(InteractionInformationRequest *)v1364 = v1322.request;
                            *(void *)&v1364[16] = *(void *)&v1322.canBeValid;
                            WebKit::WebPageProxy::scrollingNodeScrollDidEndScroll(v11, (uint64_t *)v1364);
                          }
                          goto LABEL_283;
                        case 0x80C:
                          IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>>((uint64_t)&v1322, (uint64_t *)v8);
                          if (v1322.isLink)
                          {
                            *(InteractionInformationRequest *)v1364 = v1322.request;
                            *(void *)&v1364[16] = *(void *)&v1322.canBeValid;
                            WebKit::WebPageProxy::scrollingNodeScrollWillStartScroll(v11, (uint64_t *)v1364);
                          }
                          goto LABEL_283;
                        case 0x80E:
                          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((IPC::Decoder *)v8, &v1322);
                          if (v1322.canBeValid) {
                            WebKit::WebPageProxy::sendMessageToInspectorFrontend((WebKit::WebPageProxy *)v11, (const WTF::String *)&v1322, (const WTF::String *)&v1322.request.includeSnapshot);
                          }
                          goto LABEL_1833;
                        default:
                          if (v15 == 2024)
                          {
                            WebKit::WebPageProxy::performSwitchHapticFeedback((WebKit::WebPageProxy *)v11);
                            goto LABEL_283;
                          }
                          if (v15 != 2075) {
                            goto LABEL_1820;
                          }
                          unsigned __int16 v778 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
                          if (v778 > 0xFFu)
                          {
                            WebKit::WebPageProxy::setMockVideoPresentationModeEnabled((WebKit::WebPageProxy *)v11, v778 != 0);
                            goto LABEL_283;
                          }
                          unint64_t v110 = *(WTF::StringImpl **)v8;
                          uint64_t v108 = *((void *)v8 + 1);
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v109 = *((void *)v8 + 3);
                          if (v109) {
                            goto LABEL_247;
                          }
                          goto LABEL_283;
                      }
                    }
                    switch(*((_WORD *)v8 + 25))
                    {
                      case 0x83D:
                        IPC::Decoder::decode<std::tuple<WebKit::URLSchemeTaskParameters>>((uint64_t *)v8, &v1322);
                        if ((_BYTE)v1327) {
                          WebKit::WebPageProxy::startURLSchemeTask(v11, (WebKit::AuxiliaryProcessProxy *)v10, (uint64_t *)&v1322.request.point);
                        }
                        std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v761);
                        goto LABEL_283;
                      case 0x83E:
                        uint64_t v821 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
                        if (v822)
                        {
                          uint64_t v823 = v821;
                          uint64_t v824 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (v825)
                          {
                            WebKit::WebPageProxy::stopURLSchemeTask(v11, v10, v823, v824);
                            goto LABEL_283;
                          }
                        }
                        unint64_t v110 = *(WTF::StringImpl **)v8;
                        uint64_t v108 = *((void *)v8 + 1);
                        *(void *)uint64_t v8 = 0;
                        *((void *)v8 + 1) = 0;
                        uint64_t v109 = *((void *)v8 + 3);
                        if (v109) {
                          goto LABEL_247;
                        }
                        goto LABEL_283;
                      case 0x83F:
                      case 0x840:
                      case 0x843:
                      case 0x844:
                      case 0x845:
                      case 0x846:
LABEL_1820:
                        if (v15 == 2032 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1296);
                          if (!LOBYTE(v1296[1])) {
                            goto LABEL_1655;
                          }
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1306);
                          if (LOBYTE(v1306[1]))
                          {
                            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
                            if (v1315[8])
                            {
                              IPC::Decoder::decode<IPC::SharedBufferReference>((IPC::Decoder *)v8, (uint64_t)v1364);
                              if (v1364[24])
                              {
                                if (!LOBYTE(v1296[1]) || !LOBYTE(v1306[1]) || !v1315[8]) {
                                  goto LABEL_2796;
                                }
                                v862 = v1296[0];
                                v1296[0] = 0;
                                v863 = v1306[0];
                                v1306[0] = 0;
                                v1322.request.point = (IntPoint)v862;
                                *(void *)&v1322.request.includeSnapshot = v863;
                                uint64_t v864 = *(void *)v1315;
                                *(void *)v1315 = 0;
                                *(void *)&v1322.canBeValid = v864;
                                *(void *)&v1322.int isLink = *(void *)v1364;
                                long long v865 = *(_OWORD *)&v1364[8];
                                *(void *)&v1364[8] = 0;
                                *(void *)&v1364[16] = 0;
                                int v866 = 1;
                                *(_OWORD *)&v1322.isContentEditable = v865;
                              }
                              else
                              {
                                int v866 = 0;
                                LOBYTE(v1322.request.point.m_x) = 0;
                              }
                              LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v866;
                              std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v861);
                              if (v1315[8])
                              {
                                v920 = *(WTF::StringImpl **)v1315;
                                *(void *)v1315 = 0;
                                if (v920)
                                {
                                  if (*(_DWORD *)v920 == 2) {
                                    WTF::StringImpl::destroy(v920, v860);
                                  }
                                  else {
                                    *(_DWORD *)v920 -= 2;
                                  }
                                }
                              }
                            }
                            else
                            {
                              int v866 = 0;
                              LOBYTE(v1322.request.point.m_x) = 0;
                              LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
                            }
                            if (LOBYTE(v1306[1]))
                            {
                              v926 = v1306[0];
                              v1306[0] = 0;
                              if (v926)
                              {
                                if (*(_DWORD *)v926 == 2) {
                                  WTF::StringImpl::destroy(v926, v860);
                                }
                                else {
                                  *(_DWORD *)v926 -= 2;
                                }
                              }
                            }
                          }
                          else
                          {
                            int v866 = 0;
                            LOBYTE(v1322.request.point.m_x) = 0;
                            LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
                          }
                          if (LOBYTE(v1296[1]))
                          {
                            v927 = v1296[0];
                            v1296[0] = 0;
                            if (v927)
                            {
                              if (*(_DWORD *)v927 == 2) {
                                WTF::StringImpl::destroy(v927, v860);
                              }
                              else {
                                *(_DWORD *)v927 -= 2;
                              }
                            }
                          }
                          if (v866)
                          {
                            WebKit::WebPageProxy::registerAttachmentIdentifierFromData((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::String *)&v1322, (WTF::StringImpl **)&v1322.request.includeSnapshot, (const WTF::String *)&v1322.canBeValid, (const IPC::SharedBufferReference *)&v1322.isLink);
                            if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)) {
                              goto LABEL_283;
                            }
                            v928 = (unsigned int *)v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
                            v1322.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
                            if (v928) {
                              WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v928);
                            }
                            v929 = *(unsigned int **)&v1322.isContentEditable;
                            *(void *)&v1322.isContentEditable = 0;
                            if (v929) {
                              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v929, v448);
                            }
                            goto LABEL_2007;
                          }
                          goto LABEL_1655;
                        }
                        if (v15 == 2033 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String>>((IPC::Decoder *)v8, &v1322);
                          if (v1322.isLink) {
                            WebKit::WebPageProxy::registerAttachmentIdentifierFromFilePath((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::String *)&v1322, (WTF::StringImpl **)&v1322.request.includeSnapshot, (WTF::StringImpl **)&v1322.canBeValid);
                          }
                          std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v908);
                          goto LABEL_283;
                        }
                        if (v15 == 2031 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                          if (!v1322.request.includeSnapshot) {
                            goto LABEL_283;
                          }
                          WebKit::WebPageProxy::registerAttachmentIdentifier((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::String *)&v1322);
LABEL_1753:
                          if (v1322.request.includeSnapshot) {
                            goto LABEL_2060;
                          }
                          goto LABEL_283;
                        }
                        if (v15 == 2034 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)v8, v14, (uint64_t)&v1322);
                          if (v1322.canBeValid)
                          {
                            WebKit::WebPageProxy::registerAttachmentsFromSerializedData((void *)v11, v10, (unsigned int *)&v1322);
                            if (v1322.canBeValid) {
                              WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322, v936);
                            }
                          }
                          goto LABEL_283;
                        }
                        if (v15 == 1878 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String>>((IPC::Decoder *)v8, &v1322);
                          if (v1322.canBeValid) {
                            WebKit::WebPageProxy::cloneAttachmentData((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::String *)&v1322, (WTF::StringImpl **)&v1322.request.includeSnapshot);
                          }
LABEL_1833:
                          std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v856);
                          goto LABEL_283;
                        }
                        if (v15 == 1932 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
                          if (!v1315[8])
                          {
                            int v970 = 0;
                            LOBYTE(v1322.request.point.m_x) = 0;
                            v1322.int isLink = 0;
                            goto LABEL_2395;
                          }
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1364);
                          if (!v1364[8])
                          {
                            int v970 = 0;
                            LOBYTE(v1322.request.point.m_x) = 0;
                            v1322.int isLink = 0;
LABEL_2644:
                            int v968 = 1;
                            goto LABEL_2645;
                          }
                          unint64_t v965 = *((void *)v8 + 1);
                          v964 = *(WTF::StringImpl **)v8;
                          unint64_t v966 = *((void *)v8 + 2) - *(void *)v8;
                          if (v965 <= v966)
                          {
                            unint64_t v1120 = 0;
                            v1121 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1122 = *((void *)v8 + 3);
                            if (v1122)
                            {
                              if (v965)
                              {
                                (*(void (**)(uint64_t))(*(void *)v1122 + 16))(v1122);
                                v1121 = *(WTF::StringImpl **)v8;
                                unint64_t v1120 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v1120 = 0;
                                v1121 = 0;
                              }
                            }
                          }
                          else
                          {
                            v967 = (unsigned __int8 *)v964 + v966;
                            *((void *)v8 + 2) = v967 + 1;
                            if (v964)
                            {
                              LODWORD(v12) = *v967;
                              if (v12 < 3)
                              {
                                if (!v1315[8]) {
                                  goto LABEL_2796;
                                }
                                int v968 = 0;
                                IntPoint v969 = *(IntPoint *)v1315;
                                *(void *)v1315 = 0;
                                v1322.request.point = v969;
                                *(void *)&v1322.request.includeSnapshot = *(void *)v1364;
                                v1322.canBeValid = (char)v12;
                                int v970 = 1;
                                v1322.int isLink = 1;
LABEL_2645:
                                if (v1315[8])
                                {
                                  v1219 = *(WTF::StringImpl **)v1315;
                                  *(void *)v1315 = 0;
                                  if (v1219)
                                  {
                                    if (*(_DWORD *)v1219 == 2) {
                                      WTF::StringImpl::destroy(v1219, v964);
                                    }
                                    else {
                                      *(_DWORD *)v1219 -= 2;
                                    }
                                  }
                                }
                                if (!v968)
                                {
LABEL_2651:
                                  if (!v970) {
                                    goto LABEL_283;
                                  }
                                  WebKit::WebPageProxy::didInsertAttachmentWithIdentifier((const WTF::String *)v11, v10, (const WTF::StringImpl *)&v1322, (uint64_t)&v1322.request.includeSnapshot, v12);
                                  if (!v1322.isLink) {
                                    goto LABEL_283;
                                  }
                                  goto LABEL_2056;
                                }
LABEL_2395:
                                v1117 = *(WTF::StringImpl **)v8;
                                uint64_t v1118 = *((void *)v8 + 1);
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1119 = *((void *)v8 + 3);
                                if (v1119 && v1118) {
                                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1119 + 16))(v1119, v1117);
                                }
                                goto LABEL_2651;
                              }
LABEL_2637:
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1217 = *((void *)v8 + 3);
                              if (v1217 && v965) {
                                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1217 + 16))(v1217, v964);
                              }
                              LOBYTE(v1322.request.point.m_x) = 0;
                              v1322.int isLink = 0;
                              if (v1364[8])
                              {
                                v1218 = *(WTF::StringImpl **)v1364;
                                *(void *)v1364 = 0;
                                if (v1218)
                                {
                                  if (*(_DWORD *)v1218 != 2)
                                  {
                                    int v970 = 0;
                                    *(_DWORD *)v1218 -= 2;
                                    goto LABEL_2644;
                                  }
                                  WTF::StringImpl::destroy(v1218, v964);
                                }
                              }
                              int v970 = 0;
                              goto LABEL_2644;
                            }
                            unint64_t v1120 = v965;
                            v1121 = 0;
                          }
                          unint64_t v965 = 0;
                          v964 = 0;
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v1216 = *((void *)v8 + 3);
                          if (v1216)
                          {
                            if (v1120)
                            {
                              (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1216 + 16))(v1216, v1121, v1120);
                              v964 = *(WTF::StringImpl **)v8;
                              unint64_t v965 = *((void *)v8 + 1);
                            }
                            else
                            {
                              unint64_t v965 = 0;
                              v964 = 0;
                            }
                          }
                          goto LABEL_2637;
                        }
                        if (v15 == 1944 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                          if (!v1322.request.includeSnapshot) {
                            goto LABEL_283;
                          }
                          WebKit::WebPageProxy::didRemoveAttachmentWithIdentifier((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::String *)&v1322);
                          goto LABEL_1753;
                        }
                        if (v15 == 2126 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<WebCore::PromisedAttachmentInfo>((IPC::Decoder *)v8, (uint64_t)v1364);
                          if (!v1364[24]
                            || (IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315), !v1315[8]))
                          {
                            std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v972);
                            goto LABEL_1655;
                          }
                          if (!v1364[24]) {
                            goto LABEL_2796;
                          }
                          InteractionInformationRequest v973 = *(InteractionInformationRequest *)v1364;
                          memset(v1364, 0, 24);
                          v1322.InteractionInformationRequest request = v973;
                          *(void *)&v1322.canBeValid = *(void *)&v1364[16];
                          *(void *)&v1322.int isLink = *(void *)v1315;
                          v1322.isContentEditable = 1;
                          std::__optional_destruct_base<WebCore::PromisedAttachmentInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v972);
                          WebKit::WebPageProxy::writePromisedAttachmentToPasteboard((WebKit::WebPageProxy *)v11, v10, (const WTF::StringImpl *)&v1322, (const WTF::StringImpl **)&v1322.isLink);
                          if (!v1322.isContentEditable) {
                            goto LABEL_283;
                          }
                          v975 = *(WTF::StringImpl **)&v1322.isLink;
                          *(void *)&v1322.int isLink = 0;
                          if (v975)
                          {
                            if (*(_DWORD *)v975 == 2) {
                              WTF::StringImpl::destroy(v975, v974);
                            }
                            else {
                              *(_DWORD *)v975 -= 2;
                            }
                          }
                          WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.request.includeSnapshot, v974);
                          goto LABEL_2060;
                        }
                        if (v15 == 2041 && *(unsigned char *)(v13 + 14))
                        {
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1296);
                          if (!LOBYTE(v1296[1])) {
                            goto LABEL_1655;
                          }
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1306);
                          if (!LOBYTE(v1306[1]))
                          {
                            int v981 = 0;
                            LOBYTE(v1322.request.point.m_x) = 0;
                            LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
                            goto LABEL_2199;
                          }
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
                          if (!v1315[8])
                          {
                            int v981 = 0;
                            LOBYTE(v1322.request.point.m_x) = 0;
                            LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
LABEL_2194:
                            if (LOBYTE(v1306[1]))
                            {
                              v1017 = v1306[0];
                              v1306[0] = 0;
                              if (v1017)
                              {
                                if (*(_DWORD *)v1017 == 2) {
                                  WTF::StringImpl::destroy(v1017, v976);
                                }
                                else {
                                  *(_DWORD *)v1017 -= 2;
                                }
                              }
                            }
LABEL_2199:
                            if (LOBYTE(v1296[1]))
                            {
                              v1018 = v1296[0];
                              v1296[0] = 0;
                              if (v1018)
                              {
                                if (*(_DWORD *)v1018 == 2) {
                                  WTF::StringImpl::destroy(v1018, v976);
                                }
                                else {
                                  *(_DWORD *)v1018 -= 2;
                                }
                              }
                            }
                            if (v981)
                            {
                              WebKit::WebPageProxy::requestAttachmentIcon((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::String *)&v1322, (const WTF::String *)&v1322.request.includeSnapshot, (const WTF::String *)&v1322.canBeValid, (const WTF::String *)&v1322.isLink, (CFTypeRef *)&v1322.isContentEditable);
                              if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)) {
                                goto LABEL_283;
                              }
                              v1019 = *(WTF::StringImpl **)&v1322.isLink;
                              *(void *)&v1322.int isLink = 0;
                              if (v1019)
                              {
                                if (*(_DWORD *)v1019 == 2) {
                                  WTF::StringImpl::destroy(v1019, v448);
                                }
                                else {
                                  *(_DWORD *)v1019 -= 2;
                                }
                              }
LABEL_2007:
                              v930 = *(WTF::StringImpl **)&v1322.canBeValid;
                              *(void *)&v1322.canBeValid = 0;
                              if (!v930) {
                                goto LABEL_2056;
                              }
                              goto LABEL_2008;
                            }
                            goto LABEL_1655;
                          }
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1364);
                          if (v1364[8])
                          {
                            v977 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v8);
                            if ((_BYTE)v976)
                            {
                              if (!LOBYTE(v1296[1]) || !LOBYTE(v1306[1]) || !v1315[8] || !v1364[8]) {
                                goto LABEL_2796;
                              }
                              v978 = v1296[0];
                              v1296[0] = 0;
                              v979 = v1306[0];
                              v1306[0] = 0;
                              v1322.request.point = (IntPoint)v978;
                              *(void *)&v1322.request.includeSnapshot = v979;
                              uint64_t v980 = *(void *)v1315;
                              *(void *)v1315 = 0;
                              *(void *)&v1322.canBeValid = v980;
                              *(void *)&v1322.int isLink = *(void *)v1364;
                              *(void *)&v1322.isContentEditable = v977;
                              int v981 = 1;
                              LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 1;
                              goto LABEL_2135;
                            }
                            v976 = *(WTF::StringImpl **)v8;
                            uint64_t v1189 = *((void *)v8 + 1);
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1190 = *((void *)v8 + 3);
                            if (v1190 && v1189) {
                              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1190 + 16))(v1190, v976);
                            }
                            LOBYTE(v1322.request.point.m_x) = 0;
                            LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
                            if (v1364[8])
                            {
                              v1191 = *(WTF::StringImpl **)v1364;
                              *(void *)v1364 = 0;
                              if (v1191)
                              {
                                if (*(_DWORD *)v1191 != 2)
                                {
                                  int v981 = 0;
                                  *(_DWORD *)v1191 -= 2;
                                  goto LABEL_2135;
                                }
                                WTF::StringImpl::destroy(v1191, v976);
                              }
                            }
                            int v981 = 0;
                            goto LABEL_2135;
                          }
                          int v981 = 0;
                          LOBYTE(v1322.request.point.m_x) = 0;
                          LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
LABEL_2135:
                          if (v1315[8])
                          {
                            v982 = *(WTF::StringImpl **)v1315;
                            *(void *)v1315 = 0;
                            if (v982)
                            {
                              if (*(_DWORD *)v982 == 2) {
                                WTF::StringImpl::destroy(v982, v976);
                              }
                              else {
                                *(_DWORD *)v982 -= 2;
                              }
                            }
                          }
                          goto LABEL_2194;
                        }
                        if (v15 == 2105 && *(unsigned char *)(v13 + 32))
                        {
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1294);
                          if (!LOBYTE(v1294[1])) {
                            goto LABEL_1655;
                          }
                          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1296);
                          if (!LOBYTE(v1296[1]))
                          {
                            int v1002 = 0;
                            LOBYTE(v1322.request.point.m_x) = 0;
                            LOBYTE(v1322.url.m_string.m_impl.m_ptr) = 0;
                            goto LABEL_2687;
                          }
                          unint64_t v984 = *((void *)v8 + 1);
                          v983 = *(WTF::StringImpl **)v8;
                          unint64_t v985 = ((*((void *)v8 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v8;
                          if (v984 < v985 || v984 - v985 <= 3)
                          {
                            unint64_t v1192 = 0;
                            v1193 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1194 = *((void *)v8 + 3);
                            if (v1194)
                            {
                              if (v984)
                              {
                                (*(void (**)(uint64_t))(*(void *)v1194 + 16))(v1194);
                                v1193 = *(WTF::StringImpl **)v8;
                                unint64_t v1192 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v1192 = 0;
                                v1193 = 0;
                              }
                            }
                          }
                          else
                          {
                            v986 = (float *)((char *)v983 + v985);
                            *((void *)v8 + 2) = v986 + 1;
                            if (v983)
                            {
                              unint64_t v987 = (((unint64_t)v986 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v983;
                              if (v984 < v987
                                || v984 - v987 <= 3
                                || (float v4 = *v986,
                                    *((void *)v8 + 2) = (((unint64_t)v986 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4,
                                    LODWORD(v3) = *(_DWORD *)(((unint64_t)v986 + 7) & 0xFFFFFFFFFFFFFFFCLL),
                                    unint64_t v988 = (((((unint64_t)v986 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                         - (void)v983,
                                    v984 < v988)
                                || v984 - v988 <= 3)
                              {
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1124 = *((void *)v8 + 3);
                                if (v1124)
                                {
                                  if (v984)
                                  {
                                    (*(void (**)(uint64_t))(*(void *)v1124 + 16))(v1124);
                                    v983 = *(WTF::StringImpl **)v8;
                                    uint64_t v1125 = *((void *)v8 + 1);
                                    uint64_t v1126 = *((void *)v8 + 3);
                                    *(void *)uint64_t v8 = 0;
                                    *((void *)v8 + 1) = 0;
                                    if (v1126)
                                    {
                                      if (v1125) {
                                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1126 + 16))(v1126, v983);
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              {
                                v989 = (float *)((char *)v983 + v988);
                                float v5 = *v989;
                                *((void *)v8 + 2) = v989 + 1;
                                uint64_t v990 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)v8);
                                if ((_BYTE)v983)
                                {
                                  uint64_t v991 = v990;
                                  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1306);
                                  if (LOBYTE(v1306[1]))
                                  {
                                    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
                                    if (!v1315[8])
                                    {
                                      int v1002 = 0;
                                      LOBYTE(v1322.request.point.m_x) = 0;
                                      LOBYTE(v1322.url.m_string.m_impl.m_ptr) = 0;
LABEL_2337:
                                      if (LOBYTE(v1306[1]))
                                      {
                                        v1096 = v1306[0];
                                        v1306[0] = 0;
                                        if (v1096)
                                        {
                                          if (*(_DWORD *)v1096 == 2) {
                                            WTF::StringImpl::destroy(v1096, v983);
                                          }
                                          else {
                                            *(_DWORD *)v1096 -= 2;
                                          }
                                        }
                                      }
                                      goto LABEL_2682;
                                    }
                                    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1364);
                                    if (!v1364[8])
                                    {
                                      int v1002 = 0;
                                      LOBYTE(v1322.request.point.m_x) = 0;
                                      LOBYTE(v1322.url.m_string.m_impl.m_ptr) = 0;
LABEL_2332:
                                      if (v1315[8])
                                      {
                                        v1095 = *(WTF::StringImpl **)v1315;
                                        *(void *)v1315 = 0;
                                        if (v1095)
                                        {
                                          if (*(_DWORD *)v1095 == 2) {
                                            WTF::StringImpl::destroy(v1095, v983);
                                          }
                                          else {
                                            *(_DWORD *)v1095 -= 2;
                                          }
                                        }
                                      }
                                      goto LABEL_2337;
                                    }
                                    unint64_t v992 = *((void *)v8 + 1);
                                    v983 = *(WTF::StringImpl **)v8;
                                    unint64_t v993 = *((void *)v8 + 2) - *(void *)v8;
                                    if (v992 <= v993)
                                    {
                                      unint64_t v1195 = 0;
                                      v1196 = 0;
                                      *(void *)uint64_t v8 = 0;
                                      *((void *)v8 + 1) = 0;
                                      uint64_t v1204 = *((void *)v8 + 3);
                                      if (v1204)
                                      {
                                        if (v992)
                                        {
                                          (*(void (**)(uint64_t))(*(void *)v1204 + 16))(v1204);
                                          v1196 = *(WTF::StringImpl **)v8;
                                          unint64_t v1195 = *((void *)v8 + 1);
                                        }
                                        else
                                        {
                                          unint64_t v1195 = 0;
                                          v1196 = 0;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v994 = (unsigned __int8 *)v983 + v993;
                                      *((void *)v8 + 2) = v994 + 1;
                                      if (v983)
                                      {
                                        unsigned int v995 = *v994;
                                        if (v995 < 2)
                                        {
                                          LOBYTE(v12) = v995 != 0;
                                          if (v992 <= v994 + 1 - (unsigned __int8 *)v983)
                                          {
                                            unint64_t v1205 = 0;
                                            v1206 = 0;
                                            *(void *)uint64_t v8 = 0;
                                            *((void *)v8 + 1) = 0;
                                            uint64_t v1207 = *((void *)v8 + 3);
                                            if (v1207)
                                            {
                                              (*(void (**)(uint64_t))(*(void *)v1207 + 16))(v1207);
                                              unint64_t v1205 = 0;
                                              v983 = *(WTF::StringImpl **)v8;
                                              uint64_t v1208 = *((void *)v8 + 1);
                                              uint64_t v1209 = *((void *)v8 + 3);
                                              *(void *)uint64_t v8 = 0;
                                              *((void *)v8 + 1) = 0;
                                              v1206 = 0;
                                              if (v1209)
                                              {
                                                if (v1208)
                                                {
                                                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1209 + 16))(v1209, v983);
                                                  v1206 = *(WTF::StringImpl **)v8;
                                                  unint64_t v1205 = *((void *)v8 + 1);
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            *((void *)v8 + 2) = v994 + 2;
                                            unsigned int v996 = v994[1];
                                            if (v996 < 2)
                                            {
                                              LOBYTE(v98) = v996 != 0;
                                              if (!LOBYTE(v1294[1])
                                                || !LOBYTE(v1296[1])
                                                || !LOBYTE(v1306[1])
                                                || !v1315[8])
                                              {
                                                goto LABEL_2796;
                                              }
                                              v997 = v1294[0];
                                              v1294[0] = 0;
                                              v998 = v1296[0];
                                              v1296[0] = 0;
                                              v1322.request.point = (IntPoint)v997;
                                              *(void *)&v1322.request.includeSnapshot = v998;
                                              *(float *)&v1322.canBeValid = v4;
                                              *(_DWORD *)&v1322.isSelected = LODWORD(v3);
                                              *(float *)&v1322.int isLink = v5;
                                              v999 = v1306[0];
                                              v1306[0] = 0;
                                              *(void *)&v1322.isContentEditable = v991;
                                              v1322.containerScrollingNodeID.m_value.m_object.m_identifier = (unint64_t)v999;
                                              unint64_t v1000 = *(void *)v1315;
                                              *(void *)v1315 = 0;
                                              uint64_t v1001 = *(void *)v1364;
                                              *(void *)v1364 = 0;
                                              v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = v1000;
                                              *(void *)&v1322.BOOL isDataDetectorLink = v1001;
                                              LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) = v995 != 0;
                                              int v1002 = 1;
                                              BYTE1(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) = (_BYTE)v98;
                                              goto LABEL_2164;
                                            }
                                            unint64_t v1205 = v992;
                                            v1206 = v983;
                                          }
                                          *(void *)uint64_t v8 = 0;
                                          *((void *)v8 + 1) = 0;
                                          uint64_t v1210 = *((void *)v8 + 3);
                                          if (v1210 && v1205) {
                                            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1210 + 16))(v1210, v1206, v1205);
                                          }
LABEL_2803:
                                          int v1002 = 0;
                                          LOBYTE(v1322.request.point.m_x) = 0;
LABEL_2164:
                                          LOBYTE(v1322.url.m_string.m_impl.m_ptr) = v1002;
                                          if (v1364[8])
                                          {
                                            v1003 = *(WTF::StringImpl **)v1364;
                                            *(void *)v1364 = 0;
                                            if (v1003)
                                            {
                                              if (*(_DWORD *)v1003 == 2) {
                                                WTF::StringImpl::destroy(v1003, v983);
                                              }
                                              else {
                                                *(_DWORD *)v1003 -= 2;
                                              }
                                            }
                                          }
                                          goto LABEL_2332;
                                        }
LABEL_2800:
                                        *(void *)uint64_t v8 = 0;
                                        *((void *)v8 + 1) = 0;
                                        uint64_t v1269 = *((void *)v8 + 3);
                                        if (v1269 && v992) {
                                          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1269 + 16))(v1269, v983);
                                        }
                                        goto LABEL_2803;
                                      }
                                      unint64_t v1195 = v992;
                                      v1196 = 0;
                                    }
                                    unint64_t v992 = 0;
                                    v983 = 0;
                                    *(void *)uint64_t v8 = 0;
                                    *((void *)v8 + 1) = 0;
                                    uint64_t v1248 = *((void *)v8 + 3);
                                    if (v1248)
                                    {
                                      if (v1195)
                                      {
                                        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1248 + 16))(v1248, v1196, v1195);
                                        v983 = *(WTF::StringImpl **)v8;
                                        unint64_t v992 = *((void *)v8 + 1);
                                      }
                                      else
                                      {
                                        unint64_t v992 = 0;
                                        v983 = 0;
                                      }
                                    }
                                    goto LABEL_2800;
                                  }
                                  int v1002 = 0;
                                  LOBYTE(v1322.request.point.m_x) = 0;
                                  LOBYTE(v1322.url.m_string.m_impl.m_ptr) = 0;
LABEL_2682:
                                  if (LOBYTE(v1296[1]))
                                  {
                                    v1232 = v1296[0];
                                    v1296[0] = 0;
                                    if (v1232)
                                    {
                                      if (*(_DWORD *)v1232 == 2) {
                                        WTF::StringImpl::destroy(v1232, v983);
                                      }
                                      else {
                                        *(_DWORD *)v1232 -= 2;
                                      }
                                    }
                                  }
LABEL_2687:
                                  if (LOBYTE(v1294[1]))
                                  {
                                    v1233 = v1294[0];
                                    v1294[0] = 0;
                                    if (v1233)
                                    {
                                      if (*(_DWORD *)v1233 == 2) {
                                        WTF::StringImpl::destroy(v1233, v983);
                                      }
                                      else {
                                        *(_DWORD *)v1233 -= 2;
                                      }
                                    }
                                  }
                                  if (v1002)
                                  {
                                    uint64_t v1234 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                                    if ((_BYTE)v448)
                                    {
                                      *(void *)v1364 = v1234;
                                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                                      v1235 = (void *)WTF::fastMalloc((WTF *)0x18);
                                      void *v1235 = &unk_1EEA02CE0;
                                      v1235[1] = *(void *)v1364;
                                      uint64_t v1236 = *(void *)&v1364[8];
                                      *(void *)&v1364[8] = 0;
                                      v1235[2] = v1236;
                                      *(void *)v1315 = v1235;
                                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                                      WebKit::WebPageProxy::speechSynthesisSpeak(v11, (WTF::StringImpl **)&v1322, (WTF::StringImpl **)&v1322.request.includeSnapshot, (WebCore::PlatformSpeechSynthesisVoice *)&v1322.containerScrollingNodeID, (WTF::String *)&v1322.containerScrollingNodeID.m_value.m_processIdentifier, (WTF::String *)&v1322.isDataDetectorLink, (WTF::String *)(v12 != 0), v98 != 0, v4, *(float *)&v3, v5, v1315);
                                      uint64_t v1237 = *(void *)v1315;
                                      *(void *)v1315 = 0;
                                      if (v1237) {
                                        (*(void (**)(uint64_t))(*(void *)v1237 + 8))(v1237);
                                      }
                                      if (!LOBYTE(v1322.url.m_string.m_impl.m_ptr)) {
                                        goto LABEL_283;
                                      }
                                    }
                                    v1238 = *(WTF::StringImpl **)&v1322.isDataDetectorLink;
                                    *(void *)&v1322.BOOL isDataDetectorLink = 0;
                                    if (v1238)
                                    {
                                      if (*(_DWORD *)v1238 == 2) {
                                        WTF::StringImpl::destroy(v1238, v448);
                                      }
                                      else {
                                        *(_DWORD *)v1238 -= 2;
                                      }
                                    }
                                    v1239 = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
                                    v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
                                    if (v1239)
                                    {
                                      if (*(_DWORD *)v1239 == 2) {
                                        WTF::StringImpl::destroy(v1239, v448);
                                      }
                                      else {
                                        *(_DWORD *)v1239 -= 2;
                                      }
                                    }
                                    v930 = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
                                    v1322.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
                                    if (!v930) {
                                      goto LABEL_2056;
                                    }
LABEL_2008:
                                    if (*(_DWORD *)v930 == 2) {
                                      WTF::StringImpl::destroy(v930, v448);
                                    }
                                    else {
                                      *(_DWORD *)v930 -= 2;
                                    }
LABEL_2056:
                                    v919 = *(WTF::StringImpl **)&v1322.request.includeSnapshot;
                                    *(void *)&v1322.request.includeSnapshot = 0;
                                    if (!v919) {
                                      goto LABEL_2060;
                                    }
LABEL_2057:
                                    if (*(_DWORD *)v919 == 2) {
                                      WTF::StringImpl::destroy(v919, v448);
                                    }
                                    else {
                                      *(_DWORD *)v919 -= 2;
                                    }
LABEL_2060:
                                    v449 = (WTF::StringImpl *)v1322.request.point;
                                    v1322.request.point = 0;
                                    if (!v449) {
                                      goto LABEL_283;
                                    }
LABEL_2061:
                                    if (*(_DWORD *)v449 != 2)
                                    {
                                      *(_DWORD *)v449 -= 2;
                                      goto LABEL_283;
                                    }
                                    goto LABEL_1189;
                                  }
                                  goto LABEL_1655;
                                }
                              }
LABEL_2681:
                              int v1002 = 0;
                              LOBYTE(v1322.request.point.m_x) = 0;
                              LOBYTE(v1322.url.m_string.m_impl.m_ptr) = 0;
                              goto LABEL_2682;
                            }
                            unint64_t v1192 = v984;
                            v1193 = 0;
                          }
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v1231 = *((void *)v8 + 3);
                          if (v1231 && v1192) {
                            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1231
                          }
                                                                                                 + 16))(v1231, v1193, v1192);
                          goto LABEL_2681;
                        }
                        if (v15 == 2104 && *(unsigned char *)(v13 + 32))
                        {
                          uint64_t v1004 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1005) {
                            goto LABEL_283;
                          }
                          v1322.request.point = (IntPoint)v1004;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
                          uint64_t v1006 = WTF::fastMalloc((WTF *)0x18);
                          *(void *)uint64_t v1006 = &unk_1EEA02D08;
                          *(IntPoint *)(v1006 + 8) = v1322.request.point;
                          uint64_t v1007 = *(void *)&v1322.request.includeSnapshot;
                          *(void *)&v1322.request.includeSnapshot = 0;
                          *(void *)(v1006 + 16) = v1007;
                          *(void *)v1364 = v1006;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
                          WebKit::WebPageProxy::speechSynthesisSetFinishedCallback(v11, v1364);
LABEL_2176:
                          int v16 = *(_DWORD **)v1364;
                          *(void *)v1364 = 0;
                          if (!v16) {
                            goto LABEL_283;
                          }
                          goto LABEL_2667;
                        }
                        if (v15 == 2100 && *(unsigned char *)(v13 + 32))
                        {
                          v1044 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(v11 + 32));
                          (*(void (**)(void))(*(void *)*v1044 + 40))(*v1044);
                          goto LABEL_283;
                        }
                        if (v15 == 2101 && *(unsigned char *)(v13 + 32))
                        {
                          uint64_t v1087 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1088) {
                            goto LABEL_283;
                          }
                          v1322.request.point = (IntPoint)v1087;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
                          uint64_t v1089 = WTF::fastMalloc((WTF *)0x18);
                          *(void *)uint64_t v1089 = &unk_1EEA02D30;
                          *(IntPoint *)(v1089 + 8) = v1322.request.point;
                          uint64_t v1090 = *(void *)&v1322.request.includeSnapshot;
                          *(void *)&v1322.request.includeSnapshot = 0;
                          *(void *)(v1089 + 16) = v1090;
                          *(void *)v1364 = v1089;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
                          WebKit::WebPageProxy::speechSynthesisPause(v11, v1364);
                          goto LABEL_2176;
                        }
                        if (v15 == 2103 && *(unsigned char *)(v13 + 32))
                        {
                          uint64_t v1097 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1098) {
                            goto LABEL_283;
                          }
                          v1322.request.point = (IntPoint)v1097;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
                          uint64_t v1099 = WTF::fastMalloc((WTF *)0x18);
                          *(void *)uint64_t v1099 = &unk_1EEA02D58;
                          *(IntPoint *)(v1099 + 8) = v1322.request.point;
                          uint64_t v1100 = *(void *)&v1322.request.includeSnapshot;
                          *(void *)&v1322.request.includeSnapshot = 0;
                          *(void *)(v1099 + 16) = v1100;
                          *(void *)v1364 = v1099;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
                          WebKit::WebPageProxy::speechSynthesisResume(v11, v1364);
                          goto LABEL_2176;
                        }
                        if (v15 == 2102 && *(unsigned char *)(v13 + 32))
                        {
                          v1101 = WebKit::WebPageProxy::Internals::speechSynthesisData(*(WebKit::WebPageProxy::Internals **)(v11 + 32));
                          (*(void (**)(void))(*(void *)*v1101 + 48))(*v1101);
                          goto LABEL_283;
                        }
                        if (*((unsigned __int16 *)v8 + 25) <= 0x77Du)
                        {
                          if (v15 == 1882)
                          {
                            IPC::Decoder::decode<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>>((IPC::Decoder *)v8, &v1322);
                            if (!v1322.canBeValid) {
                              goto LABEL_283;
                            }
                            WebKit::WebPageProxy::configureLoggingChannel(v11, (WebKit *)&v1322, v1322.request.includeSnapshot, v1322.request.includeLinkIndicator);
LABEL_1749:
                            if (!v1322.canBeValid) {
                              goto LABEL_283;
                            }
                            goto LABEL_2060;
                          }
                          if (v15 == 1907)
                          {
                            uint64_t v1116 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v8);
                            if ((v1116 & 0xFF00000000) != 0) {
                              WebKit::WebPageProxy::didCreateContextInWebProcessForVisibilityPropagation((WebKit::WebPageProxy *)v11, v1116);
                            }
                            goto LABEL_283;
                          }
                        }
                        else
                        {
                          switch(v15)
                          {
                            case 0x77Eu:
                              IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)v8, v14, (uint64_t)&v1322);
                              if (v1322.canBeValid)
                              {
                                WebKit::WebPageProxy::didFindTextManipulationItems(v11);
                                if (v1322.canBeValid) {
                                  WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322, v1123);
                                }
                              }
                              goto LABEL_283;
                            case 0x817u:
                              *(unsigned char *)(v11 + 1335) = 1;
                              goto LABEL_283;
                            case 0x81Cu:
                              IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration,void>::decode((IPC::Decoder *)v8, (uint64_t)&v1322);
                              if (LOBYTE(v1322.title.m_impl.m_ptr)) {
                                goto LABEL_2367;
                              }
                              v1103 = *(WTF::StringImpl **)v8;
                              uint64_t v1104 = *((void *)v8 + 1);
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1105 = *((void *)v8 + 3);
                              if (!v1105 || !v1104)
                              {
LABEL_2235:
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                goto LABEL_283;
                              }
                              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1105 + 16))(v1105, v1103);
                              if (LOBYTE(v1322.title.m_impl.m_ptr))
                              {
LABEL_2367:
                                v1364[0] = v1322.request.point.m_x;
                                v1364[8] = 0;
                                v1364[48] = 0;
                                if (LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier))
                                {
                                  *(_WORD *)&v1364[8] = *(_WORD *)&v1322.request.includeSnapshot;
                                  long long v1106 = *(_OWORD *)&v1322.canBeValid;
                                  long long v1107 = *(_OWORD *)&v1322.isContentEditable;
                                  memset(&v1322.canBeValid, 0, 32);
                                  *(_OWORD *)&v1364[16] = v1106;
                                  *(_OWORD *)&v1364[32] = v1107;
                                  v1364[48] = 1;
                                }
                                v1364[56] = 0;
                                v1365[24] = 0;
                                if (LOBYTE(v1322.url.m_userEnd))
                                {
                                  uint64_t v1108 = *(void *)&v1322.isDataDetectorLink;
                                  *(void *)&v1322.BOOL isDataDetectorLink = 0;
                                  *(void *)&v1364[56] = v1108;
                                  FloatPoint v1109 = v1322.adjustedPointForNodeRespondingToClickEvents;
                                  v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = 0;
                                  *(FloatPoint *)v1365 = v1109;
                                  *(void *)&v1365[8] = v1322.url.m_string.m_impl.m_ptr;
                                  *(_DWORD *)&v1365[15] = *(_DWORD *)((char *)&v1322.url.m_string.m_impl.m_ptr + 7);
                                  v1365[24] = 1;
                                }
                                v1365[32] = 0;
                                char v1366 = 0;
                                int m_userEnd_low = LOBYTE(v1322.imageURL.m_userEnd);
                                if (LOBYTE(v1322.imageURL.m_userEnd))
                                {
                                  v1365[32] = v1322.url.m_hostEnd;
                                  uint64_t v1111 = *(void *)&v1322.url.m_pathEnd;
                                  *(void *)&v1322.url.m_pathEnd = 0;
                                  *(void *)&v1365[40] = v1111;
                                  v1112 = v1322.imageURL.m_string.m_impl.m_ptr;
                                  v1322.imageURL.m_string.m_impl.m_ptr = 0;
                                  *(void *)&v1365[48] = v1112;
                                  *(_WORD *)&v1365[56] = *((_WORD *)&v1322.imageURL + 4);
                                  char v1366 = 1;
                                }
                                LOBYTE(v1367[0]) = 0;
                                char v1368 = 0;
                                if (LOBYTE(v1322.imageMIMEType.m_impl.m_ptr))
                                {
                                  uint64_t v1113 = *(void *)&v1322.imageURL.m_hostEnd;
                                  *(void *)&v1322.imageURL.m_hostEnd = 0;
                                  v1367[0] = v1113;
                                  uint64_t v1114 = *(void *)&v1322.imageURL.m_pathEnd;
                                  *(void *)&v1322.imageURL.m_pathEnd = 0;
                                  v1367[1] = v1114;
                                  char v1368 = 1;
                                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.imageURL.m_hostEnd, v1102);
                                  int m_userEnd_low = LOBYTE(v1322.imageURL.m_userEnd);
                                }
                                char v1369 = 1;
                                if (m_userEnd_low) {
                                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.url.m_pathEnd, v1102);
                                }
                                if (LOBYTE(v1322.url.m_userEnd)) {
                                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.isDataDetectorLink, v1102);
                                }
                                std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322.request.includeSnapshot, (WTF::StringImpl *)v1102);
                                WebKit::WebPageProxy::setMockWebAuthenticationConfiguration(v11, (uint64_t)v1364);
                                if (v1369)
                                {
                                  if (v1368) {
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1367, v1115);
                                  }
                                  if (v1366) {
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1365[40], v1115);
                                  }
                                  if (v1365[24]) {
                                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1364[56], v1115);
                                  }
                                  std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1364[8], (WTF::StringImpl *)v1115);
                                }
                                goto LABEL_283;
                              }
LABEL_2598:
                              v748 = *(WTF::StringImpl **)v8;
                              uint64_t v749 = *((void *)v8 + 1);
                              uint64_t v750 = *((void *)v8 + 3);
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              if (!v750) {
                                goto LABEL_283;
                              }
LABEL_1656:
                              if (v749) {
                                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v750 + 16))(v750, v748);
                              }
                              goto LABEL_283;
                          }
                        }
                        if (v15 == 2112 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (v1322.canBeValid) {
                            WebKit::WebPageProxy::takeModelElementFullscreen((WTF::StringImpl *)v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot);
                          }
                          goto LABEL_283;
                        }
                        if (v15 == 2015 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (v1322.isLink) {
                            WebKit::WebPageProxy::modelElementSetInteractionEnabled(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, v1322.canBeValid);
                          }
                          goto LABEL_283;
                        }
                        if (v15 == 2007 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.canBeValid) {
                            goto LABEL_283;
                          }
                          uint64_t v1127 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1128) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1127;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1129 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1129 = &unk_1EEA02D80;
                          v1129[1] = *(void *)v1364;
                          uint64_t v1130 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1129[2] = v1130;
                          *(void *)v1315 = v1129;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementGetCamera(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, (uint64_t *)v1315);
                          uint64_t v1131 = *(void *)v1315;
                          *(void *)v1315 = 0;
                          if (!v1131) {
                            goto LABEL_283;
                          }
                          goto LABEL_2569;
                        }
                        if (v15 == 2014 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<WebKit::ModelIdentifier>(v1364, (IPC::Decoder *)v8);
                          if (v1364[16])
                          {
                            IPC::Decoder::decode<WebCore::HTMLModelElementCamera>(v8, (uint64_t)&v1322);
                            if (v1322.isLink)
                            {
                              uint64_t v1132 = *(void *)v1364;
                              v1133 = *(const WTF::StringImpl **)&v1364[8];
                              IntPoint v1134 = v1322.request.point;
                              float64_t v1135 = *(double *)&v1322.request.includeSnapshot;
                              uint64_t v1136 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                              if (!v1137) {
                                goto LABEL_283;
                              }
                              v1322.request.point = (IntPoint)v1136;
                              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
                              uint64_t v1138 = WTF::fastMalloc((WTF *)0x18);
                              *(void *)uint64_t v1138 = &unk_1EEA02DA8;
                              *(IntPoint *)(v1138 + 8) = v1322.request.point;
                              uint64_t v1139 = *(void *)&v1322.request.includeSnapshot;
                              *(void *)&v1322.request.includeSnapshot = 0;
                              *(void *)(v1138 + 16) = v1139;
                              *(void *)v1364 = v1138;
                              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
                              WebKit::WebPageProxy::modelElementSetCamera(v11, v1132, v1133, (uint64_t *)v1364, *(float64_t *)&v1134, v1135);
                              goto LABEL_2478;
                            }
                          }
                          goto LABEL_2876;
                        }
                        if (v15 == 2011 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.canBeValid) {
                            goto LABEL_283;
                          }
                          uint64_t v1140 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1141) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1140;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1142 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1142 = &unk_1EEA02DD0;
                          v1142[1] = *(void *)v1364;
                          uint64_t v1143 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1142[2] = v1143;
                          *(void *)v1315 = v1142;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementIsPlayingAnimation(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, (uint64_t *)v1315);
LABEL_2490:
                          uint64_t v1131 = *(void *)v1315;
                          *(void *)v1315 = 0;
                          if (!v1131) {
                            goto LABEL_283;
                          }
                          goto LABEL_2569;
                        }
                        if (v15 == 2013 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.isLink) {
                            goto LABEL_283;
                          }
                          uint64_t v1144 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1145) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1144;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1146 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1146 = &unk_1EEA02DF8;
                          v1146[1] = *(void *)v1364;
                          uint64_t v1147 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1146[2] = v1147;
                          *(void *)v1315 = v1146;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementSetAnimationIsPlaying(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, v1322.canBeValid, (uint64_t *)v1315);
LABEL_2497:
                          uint64_t v1131 = *(void *)v1315;
                          *(void *)v1315 = 0;
                          if (!v1131) {
                            goto LABEL_283;
                          }
                          goto LABEL_2569;
                        }
                        if (v15 == 2009 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.canBeValid) {
                            goto LABEL_283;
                          }
                          uint64_t v1148 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1149) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1148;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1150 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1150 = &unk_1EEA02E20;
                          v1150[1] = *(void *)v1364;
                          uint64_t v1151 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1150[2] = v1151;
                          *(void *)v1315 = v1150;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementIsLoopingAnimation(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, (uint64_t *)v1315);
                          goto LABEL_2490;
                        }
                        if (v15 == 2016 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.isLink) {
                            goto LABEL_283;
                          }
                          uint64_t v1152 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1153) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1152;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1154 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1154 = &unk_1EEA02E48;
                          v1154[1] = *(void *)v1364;
                          uint64_t v1155 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1154[2] = v1155;
                          *(void *)v1315 = v1154;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementSetIsLoopingAnimation(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, v1322.canBeValid, (uint64_t *)v1315);
                          goto LABEL_2497;
                        }
                        if (v15 == 2006 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.canBeValid) {
                            goto LABEL_283;
                          }
                          uint64_t v1156 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1157) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1156;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1158 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1158 = &unk_1EEA02E70;
                          v1158[1] = *(void *)v1364;
                          uint64_t v1159 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1158[2] = v1159;
                          *(void *)v1315 = v1158;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementAnimationDuration(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, (uint64_t *)v1315);
LABEL_2470:
                          uint64_t v1131 = *(void *)v1315;
                          *(void *)v1315 = 0;
                          if (!v1131) {
                            goto LABEL_283;
                          }
                          goto LABEL_2569;
                        }
                        if (v15 == 2005 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.canBeValid) {
                            goto LABEL_283;
                          }
                          uint64_t v1160 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1161) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1160;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1162 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1162 = &unk_1EEA02E98;
                          v1162[1] = *(void *)v1364;
                          uint64_t v1163 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1162[2] = v1163;
                          *(void *)v1315 = v1162;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementAnimationCurrentTime(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, (uint64_t *)v1315);
                          goto LABEL_2470;
                        }
                        if (v15 == 2012 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<WebKit::ModelIdentifier>(&v1322, (IPC::Decoder *)v8);
                          if (v1322.canBeValid)
                          {
                            *(double *)&uint64_t v1164 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::Seconds>((uint64_t *)v8));
                            if (v1165)
                            {
                              double v1166 = *(double *)&v1164;
                              uint64_t v1167 = (uint64_t)v1322.request.point;
                              v1168 = *(const WTF::StringImpl **)&v1322.request.includeSnapshot;
                              uint64_t v1169 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                              if (!v1170) {
                                goto LABEL_283;
                              }
                              v1322.request.point = (IntPoint)v1169;
                              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
                              uint64_t v1171 = WTF::fastMalloc((WTF *)0x18);
                              *(void *)uint64_t v1171 = &unk_1EEA02EC0;
                              *(IntPoint *)(v1171 + 8) = v1322.request.point;
                              uint64_t v1172 = *(void *)&v1322.request.includeSnapshot;
                              *(void *)&v1322.request.includeSnapshot = 0;
                              *(void *)(v1171 + 16) = v1172;
                              *(void *)v1364 = v1171;
                              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
                              WebKit::WebPageProxy::modelElementSetAnimationCurrentTime(v11, v1167, v1168, (uint64_t *)v1364, v1166);
LABEL_2478:
                              uint64_t v1131 = *(void *)v1364;
                              *(void *)v1364 = 0;
                              if (!v1131) {
                                goto LABEL_283;
                              }
                              goto LABEL_2569;
                            }
                          }
                          goto LABEL_2876;
                        }
                        if (v15 == 2008 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.canBeValid) {
                            goto LABEL_283;
                          }
                          uint64_t v1173 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1174) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1173;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1175 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1175 = &unk_1EEA02EE8;
                          v1175[1] = *(void *)v1364;
                          uint64_t v1176 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1175[2] = v1176;
                          *(void *)v1315 = v1175;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementHasAudio(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, (uint64_t *)v1315);
                          goto LABEL_2490;
                        }
                        if (v15 == 2010 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.canBeValid) {
                            goto LABEL_283;
                          }
                          uint64_t v1177 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1178) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1177;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1179 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1179 = &unk_1EEA02F10;
                          v1179[1] = *(void *)v1364;
                          uint64_t v1180 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1179[2] = v1180;
                          *(void *)v1315 = v1179;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementIsMuted(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, (uint64_t *)v1315);
                          goto LABEL_2490;
                        }
                        if (v15 == 2017 && *(unsigned char *)(v13 + 24))
                        {
                          IPC::Decoder::decode<std::tuple<WebKit::ModelIdentifier,BOOL>>((uint64_t)&v1322, (IPC::Decoder *)v8);
                          if (!v1322.isLink) {
                            goto LABEL_283;
                          }
                          uint64_t v1181 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                          if (!v1182) {
                            goto LABEL_283;
                          }
                          *(void *)v1364 = v1181;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                          v1183 = (void *)WTF::fastMalloc((WTF *)0x18);
                          void *v1183 = &unk_1EEA02F38;
                          v1183[1] = *(void *)v1364;
                          uint64_t v1184 = *(void *)&v1364[8];
                          *(void *)&v1364[8] = 0;
                          v1183[2] = v1184;
                          *(void *)v1315 = v1183;
                          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                          WebKit::WebPageProxy::modelElementSetIsMuted(v11, *(void *)&v1322.request.point, *(const WTF::StringImpl **)&v1322.request.includeSnapshot, v1322.canBeValid, (uint64_t *)v1315);
                          goto LABEL_2497;
                        }
                        if (*((unsigned __int16 *)v8 + 25) > 0x7A6u)
                        {
                          if (*((unsigned __int16 *)v8 + 25) <= 0x7E3u)
                          {
                            if (*((unsigned __int16 *)v8 + 25) > 0x7B3u)
                            {
                              if (v15 == 1972) {
                                goto LABEL_2797;
                              }
                              if (v15 == 1975)
                              {
                                IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String>>((IPC::Decoder *)v8, &v1322);
                                if (!v1322.isLink) {
                                  goto LABEL_283;
                                }
                                WebKit::WebPageProxy::frameNameChanged((void *)v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (uint64_t)&v1322.canBeValid);
                                if (!v1322.isLink) {
                                  goto LABEL_283;
                                }
                                v449 = *(WTF::StringImpl **)&v1322.canBeValid;
                                *(void *)&v1322.canBeValid = 0;
                                if (!v449) {
                                  goto LABEL_283;
                                }
                                goto LABEL_2061;
                              }
                            }
                            else
                            {
                              if (v15 == 1959)
                              {
                                IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                                if (v1322.canBeValid) {
                                  WebKit::WebPageProxy::dispatchLoadEventToFrameOwnerElement(v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot);
                                }
                                goto LABEL_283;
                              }
                              if (v15 == 1960)
                              {
                                IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                                if (!v1322.canBeValid) {
                                  goto LABEL_283;
                                }
                                uint64_t v1200 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                                if (!v1201) {
                                  goto LABEL_283;
                                }
                                *(void *)v1364 = v1200;
                                uint64_t v8 = &v1364[8];
                                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                                v1202 = (void *)WTF::fastMalloc((WTF *)0x18);
                                void *v1202 = &unk_1EEA02FD8;
                                v1202[1] = *(void *)v1364;
                                uint64_t v1203 = *(void *)&v1364[8];
                                *(void *)&v1364[8] = 0;
                                v1202[2] = v1203;
                                *(void *)v1315 = v1202;
                                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                                if (!v1322.canBeValid) {
                                  goto LABEL_2796;
                                }
                                WebKit::WebPageProxy::documentURLForConsoleLog(v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (uint64_t *)v1315);
                                uint64_t v1131 = *(void *)v1315;
                                *(void *)v1315 = 0;
                                if (!v1131) {
                                  goto LABEL_283;
                                }
LABEL_2569:
                                (*(void (**)(uint64_t))(*(void *)v1131 + 8))(v1131);
                                goto LABEL_283;
                              }
                            }
                          }
                          else if (*((unsigned __int16 *)v8 + 25) <= 0x7FAu)
                          {
                            if (v15 == 2020)
                            {
                              IPC::Decoder::decode<WebCore::NowPlayingMetadata>((IPC::Decoder *)v8, (uint64_t)&v1322);
                              if (LOBYTE(v1322.adjustedPointForNodeRespondingToClickEvents.m_x))
                              {
                                InteractionInformationRequest request = v1322.request;
                                long long v1251 = *(_OWORD *)&v1322.canBeValid;
                                memset(&v1322, 0, 32);
                                *(InteractionInformationRequest *)v1364 = request;
                                *(_OWORD *)&v1364[16] = v1251;
                                v1364[32] = 0;
                                v1364[56] = 0;
                                if (v1322.isDataDetectorLink)
                                {
                                  long long v1252 = *(_OWORD *)&v1322.isContentEditable;
                                  memset(&v1322.isContentEditable, 0, 24);
                                  *(_OWORD *)&v1364[32] = v1252;
                                  *(void *)&v1364[48] = v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
                                  v1364[56] = 1;
                                }
                                v1365[0] = 1;
                                std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v1249);
                                WebKit::WebPageProxy::nowPlayingMetadataChanged(v11, (uint64_t)v1364);
                                if (!v1365[0]) {
                                  goto LABEL_283;
                                }
                                std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1364[32], v1253);
                                v1254 = *(WTF::StringImpl **)&v1364[24];
                                *(void *)&v1364[24] = 0;
                                if (v1254)
                                {
                                  if (*(_DWORD *)v1254 == 2) {
                                    WTF::StringImpl::destroy(v1254, v448);
                                  }
                                  else {
                                    *(_DWORD *)v1254 -= 2;
                                  }
                                }
                                v1270 = *(WTF::StringImpl **)&v1364[16];
                                *(void *)&v1364[16] = 0;
                                if (v1270)
                                {
                                  if (*(_DWORD *)v1270 == 2) {
                                    WTF::StringImpl::destroy(v1270, v448);
                                  }
                                  else {
                                    *(_DWORD *)v1270 -= 2;
                                  }
                                }
                                v1287 = *(WTF::StringImpl **)&v1364[8];
                                *(void *)&v1364[8] = 0;
                                if (v1287)
                                {
                                  if (*(_DWORD *)v1287 == 2) {
                                    WTF::StringImpl::destroy(v1287, v448);
                                  }
                                  else {
                                    *(_DWORD *)v1287 -= 2;
                                  }
                                }
                                v449 = *(WTF::StringImpl **)v1364;
                                *(void *)v1364 = 0;
                                if (!v449) {
                                  goto LABEL_283;
                                }
                                goto LABEL_2061;
                              }
                              std::__optional_destruct_base<WebCore::NowPlayingMetadata,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v1249);
                              goto LABEL_1655;
                            }
                            if (v15 == 2027)
                            {
                              IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>>((IPC::Decoder *)v8, &v1322);
                              if (LOBYTE(v1322.url.m_pathEnd))
                              {
                                uint64_t v1221 = (uint64_t)v1322.request.point;
                                uint64_t v1222 = *(void *)&v1322.request.includeSnapshot;
                                uint64_t v1223 = *(void *)&v1322.isLink;
                                uint64_t v1224 = *(void *)&v1322.isContentEditable;
                                v1364[0] = 0;
                                v1364[32] = 0;
                                if (LOBYTE(v1322.url.m_string.m_impl.m_ptr))
                                {
                                  *(_DWORD *)&v1364[24] = -1;
                                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v1364, (uint64_t)&v1322.containerScrollingNodeID);
                                  v1364[32] = 1;
                                }
                                WebKit::WebPageProxy::postMessageToRemote(v11, v1221, v1222, (uint64_t)&v1322.canBeValid, v1223, v1224, (uint64_t)v1364, (uint64_t)&v1322.url + 8);
                                if (v1364[32] && *(_DWORD *)&v1364[24] != -1) {
                                  ((void (*)(unsigned char *, unsigned char *))off_1EEA02A40[*(unsigned int *)&v1364[24]])(v1315, v1364);
                                }
                              }
                              std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<WebCore::SecurityOriginData>,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v1220);
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            switch(v15)
                            {
                              case 0x7FBu:
                                uint64_t v1225 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                                if (!v1226) {
                                  goto LABEL_283;
                                }
                                v1322.request.point = (IntPoint)v1225;
                                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
                                uint64_t v1227 = WTF::fastMalloc((WTF *)0x18);
                                *(void *)uint64_t v1227 = &unk_1EEA02FB0;
                                *(IntPoint *)(v1227 + 8) = v1322.request.point;
                                uint64_t v1228 = *(void *)&v1322.request.includeSnapshot;
                                *(void *)&v1322.request.includeSnapshot = 0;
                                *(void *)(v1227 + 16) = v1228;
                                *(void *)v1364 = v1227;
                                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
                                WebKit::WebPageProxy::requestCookieConsent(v11);
                                int v16 = *(_DWORD **)v1364;
                                *(void *)v1364 = 0;
                                if (!v16) {
                                  goto LABEL_283;
                                }
LABEL_2667:
                                (*(void (**)(_DWORD *))(*(void *)v16 + 8))(v16);
                                goto LABEL_283;
                              case 0x843u:
                                IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::IntPoint>>((IPC::Decoder *)v8, &v1322);
                                if (v1322.isLink) {
                                  WebKit::WebPageProxy::updateRemoteFrameAccessibilityOffset(v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid);
                                }
                                goto LABEL_283;
                              case 0x83Au:
                                IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1364);
                                if (!v1364[40]) {
                                  goto LABEL_1655;
                                }
                                IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode((IPC::Decoder *)v8, (uint64_t)v1315);
                                if (v1315[8])
                                {
                                  if (!v1364[40]) {
                                    goto LABEL_2796;
                                  }
                                  *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)&v1364[8];
                                  *(_OWORD *)&v1322.int isLink = *(_OWORD *)&v1364[24];
                                  v1322.request.point = *(IntPoint *)v1364;
                                  v1322.containerScrollingNodeID.m_value.m_object.m_identifier = *(void *)v1315;
                                  LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 1;
                                  uint64_t v1185 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                                  if ((_BYTE)v448)
                                  {
                                    *(void *)v1364 = v1185;
                                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                                    v1186 = (void *)WTF::fastMalloc((WTF *)0x18);
                                    void *v1186 = &unk_1EEA02F60;
                                    v1186[1] = *(void *)v1364;
                                    uint64_t v1187 = *(void *)&v1364[8];
                                    *(void *)&v1364[8] = 0;
                                    v1186[2] = v1187;
                                    *(void *)v1315 = v1186;
                                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                                    WebKit::WebPageProxy::startApplePayAMSUISession(v11, (uint64_t)&v1322, &v1322.containerScrollingNodeID.m_value.m_object.m_identifier, (uint64_t *)v1315);
                                    uint64_t v1188 = *(void *)v1315;
                                    *(void *)v1315 = 0;
                                    if (v1188) {
                                      (*(void (**)(uint64_t))(*(void *)v1188 + 8))(v1188);
                                    }
                                    if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)) {
                                      goto LABEL_283;
                                    }
                                  }
                                  v919 = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
                                  v1322.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
                                  if (!v919) {
                                    goto LABEL_2060;
                                  }
                                  goto LABEL_2057;
                                }
                                v792 = *(WTF::StringImpl **)v8;
                                uint64_t v1229 = *((void *)v8 + 1);
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1230 = *((void *)v8 + 3);
                                if (v1230 && v1229) {
                                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1230 + 16))(v1230, v792);
                                }
                                LOBYTE(v1322.request.point.m_x) = 0;
                                LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
                                if (!v1364[40]) {
                                  goto LABEL_1655;
                                }
                                goto LABEL_2822;
                            }
                          }
                          goto LABEL_2835;
                        }
                        if (*((unsigned __int16 *)v8 + 25) <= 0x763u)
                        {
                          if (*((unsigned __int16 *)v8 + 25) <= 0x751u)
                          {
                            if (v15 == 1865)
                            {
                              WebKit::WebPageProxy::abortApplePayAMSUISession((WebKit::WebPageProxy *)v11);
                              goto LABEL_283;
                            }
                            if (v15 == 1872)
                            {
                              IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1315);
                              if ((_BYTE)v1317)
                              {
                                IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v8, v1306);
                                if ((_BYTE)v1308)
                                {
                                  IPC::Decoder::decode<WebCore::SystemPreviewInfo>((unint64_t *)v8, (uint64_t)v1364);
                                  char v1198 = v1365[48];
                                  if (v1365[48])
                                  {
                                    if (!(_BYTE)v1317 || !(_BYTE)v1308) {
                                      goto LABEL_2796;
                                    }
                                    IntPoint v1199 = *(IntPoint *)v1315;
                                    *(void *)v1315 = 0;
                                    v1322.request.point = v1199;
                                    *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)&v1315[8];
                                    *(_OWORD *)&v1322.int isLink = v1316;
                                    *(_DWORD *)&v1315[8] &= ~1u;
                                    LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
                                    v1322.adjustedPointForNodeRespondingToClickEvents.char m_x = NAN;
                                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.containerScrollingNodeID, (uint64_t)v1306);
                                    *(_OWORD *)&v1322.imageURL.m_pathEnd = *(_OWORD *)v1365;
                                    *(_OWORD *)&v1322.title.m_impl.m_ptr = *(_OWORD *)&v1365[16];
                                    v1322.bounds = *(IntRect *)&v1365[32];
                                    *(_OWORD *)((char *)&v1322.url + 8) = *(_OWORD *)v1364;
                                    *(_OWORD *)&v1322.url.m_hostEnd = *(_OWORD *)&v1364[16];
                                    char v1198 = 1;
                                    *(_OWORD *)&v1322.imageURL.m_string.m_impl.m_ptr = *(_OWORD *)&v1364[32];
                                    *(_OWORD *)&v1322.imageURL.m_userEnd = *(_OWORD *)&v1364[48];
                                  }
                                  else
                                  {
                                    LOBYTE(v1322.request.point.m_x) = 0;
                                  }
                                  LOBYTE(v1322.image.m_ptr) = v1198;
                                  if ((_BYTE)v1308 && DWORD2(v1307) != -1) {
                                    ((void (*)(unsigned char *, WTF::StringImpl **))off_1EEA02A40[DWORD2(v1307)])(v1364, v1306);
                                  }
                                }
                                else
                                {
                                  LOBYTE(v1322.request.point.m_x) = 0;
                                  LOBYTE(v1322.image.m_ptr) = 0;
                                }
                                if ((_BYTE)v1317)
                                {
                                  v1247 = *(WTF::StringImpl **)v1315;
                                  *(void *)v1315 = 0;
                                  if (v1247)
                                  {
                                    if (*(_DWORD *)v1247 == 2) {
                                      WTF::StringImpl::destroy(v1247, v1197);
                                    }
                                    else {
                                      *(_DWORD *)v1247 -= 2;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                LOBYTE(v1322.request.point.m_x) = 0;
                                LOBYTE(v1322.image.m_ptr) = 0;
                              }
                              if (!LOBYTE(v1322.image.m_ptr))
                              {
                                v1262 = *(WTF::StringImpl **)v8;
                                uint64_t v1263 = *((void *)v8 + 1);
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1264 = *((void *)v8 + 3);
                                if (!v1264) {
                                  goto LABEL_283;
                                }
                                if (!v1263) {
                                  goto LABEL_283;
                                }
                                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1264 + 16))(v1264, v1262);
                                if (!LOBYTE(v1322.image.m_ptr)) {
                                  goto LABEL_283;
                                }
                              }
                              uint64_t v1265 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                              if ((_BYTE)v448)
                              {
                                *(void *)v1364 = v1265;
                                uint64_t v8 = &v1364[8];
                                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                                v1266 = (void *)WTF::fastMalloc((WTF *)0x18);
                                void *v1266 = &unk_1EEA02F88;
                                v1266[1] = *(void *)v1364;
                                uint64_t v1267 = *(void *)&v1364[8];
                                *(void *)&v1364[8] = 0;
                                v1266[2] = v1267;
                                *(void *)v1315 = v1266;
                                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                                if (!LOBYTE(v1322.image.m_ptr)) {
                                  goto LABEL_2796;
                                }
                                WebKit::WebPageProxy::beginSystemPreview(v11, (uint64_t)&v1322, (uint64_t)&v1322.containerScrollingNodeID, (uint64_t)&v1322.url + 8, (uint64_t *)v1315);
                                uint64_t v1268 = *(void *)v1315;
                                *(void *)v1315 = 0;
                                if (v1268) {
                                  (*(void (**)(uint64_t))(*(void *)v1268 + 8))(v1268);
                                }
                              }
                              if (!LOBYTE(v1322.image.m_ptr)) {
                                goto LABEL_283;
                              }
                              if (LODWORD(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) != -1) {
                                ((void (*)(unsigned char *, Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes>>::MarkableTraits> *))off_1EEA02A40[LODWORD(v1322.adjustedPointForNodeRespondingToClickEvents.m_x)])(v1364, &v1322.containerScrollingNodeID);
                              }
                              v1322.adjustedPointForNodeRespondingToClickEvents.char m_x = NAN;
                              goto LABEL_2060;
                            }
                            goto LABEL_2835;
                          }
                          if (v15 == 1874)
                          {
                            IPC::Decoder::decode<std::tuple<WTF::URL>>((IPC::Decoder *)v8, &v1322);
                            if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)) {
                              goto LABEL_283;
                            }
                            WebKit::WebPageProxy::broadcastMainFrameURLChangeToOtherProcesses((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::URL *)&v1322);
                            if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)) {
                              goto LABEL_283;
                            }
                            goto LABEL_2060;
                          }
                          if (v15 != 1891) {
                            goto LABEL_2835;
                          }
                          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315);
                          if (!v1315[16]
                            || (IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v8, v1364), !v1364[32]))
                          {
                            LOBYTE(v1322.request.point.m_x) = 0;
                            v1322.BOOL isDataDetectorLink = 0;
                            goto LABEL_2865;
                          }
                          unint64_t v1241 = *((void *)v8 + 1);
                          v1242 = *(WTF::StringImpl **)v8;
                          unint64_t v1243 = *((void *)v8 + 2) - *(void *)v8;
                          if (v1241 <= v1243)
                          {
                            unint64_t v1259 = 0;
                            v1260 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1261 = *((void *)v8 + 3);
                            if (v1261)
                            {
                              if (v1241)
                              {
                                (*(void (**)(uint64_t))(*(void *)v1261 + 16))(v1261);
                                v1260 = *(WTF::StringImpl **)v8;
                                unint64_t v1259 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v1259 = 0;
                                v1260 = 0;
                              }
                            }
                          }
                          else
                          {
                            v1244 = (unsigned __int8 *)v1242 + v1243;
                            *((void *)v8 + 2) = v1244 + 1;
                            if (v1242)
                            {
                              unsigned int v1245 = *v1244;
                              if (v1245 <= 4 && ((1 << v1245) & 0x16) != 0)
                              {
                                if (!v1315[16]) {
                                  goto LABEL_2796;
                                }
                                v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1315;
                                v1322.canBeValid = 0;
                                LODWORD(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = -1;
                                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.canBeValid, (uint64_t)v1364);
                                LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v1245;
                                BOOL isDataDetectorLink = 1;
LABEL_2861:
                                v1322.BOOL isDataDetectorLink = isDataDetectorLink;
                                if (v1364[32] && *(_DWORD *)&v1364[24] != -1)
                                {
                                  ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA02A40[*(unsigned int *)&v1364[24]])(v1306, v1364);
                                  BOOL isDataDetectorLink = v1322.isDataDetectorLink;
                                }
                                if (isDataDetectorLink)
                                {
LABEL_2868:
                                  WebKit::WebPageProxy::didAccessWindowProxyPropertyViaOpenerForFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (const WebCore::SecurityOriginData *)&v1322.canBeValid, LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier));
                                  if (v1322.isDataDetectorLink
                                    && LODWORD(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) != -1)
                                  {
                                    ((void (*)(unsigned char *, BOOL *))off_1EEA02A40[LODWORD(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)])(v1364, &v1322.canBeValid);
                                  }
                                  goto LABEL_283;
                                }
LABEL_2865:
                                v1290 = *(WTF::StringImpl **)v8;
                                uint64_t v1291 = *((void *)v8 + 1);
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1292 = *((void *)v8 + 3);
                                if (!v1292) {
                                  goto LABEL_283;
                                }
                                if (!v1291) {
                                  goto LABEL_283;
                                }
                                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1292 + 16))(v1292, v1290);
                                if (!v1322.isDataDetectorLink) {
                                  goto LABEL_283;
                                }
                                goto LABEL_2868;
                              }
LABEL_2857:
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1289 = *((void *)v8 + 3);
                              if (v1289 && v1241) {
                                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1289 + 16))(v1289, v1242);
                              }
                              BOOL isDataDetectorLink = 0;
                              LOBYTE(v1322.request.point.m_x) = 0;
                              goto LABEL_2861;
                            }
                            unint64_t v1259 = v1241;
                            v1260 = 0;
                          }
                          unint64_t v1241 = 0;
                          v1242 = 0;
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v1286 = *((void *)v8 + 3);
                          if (v1286)
                          {
                            if (v1259)
                            {
                              (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1286 + 16))(v1286, v1260, v1259);
                              v1242 = *(WTF::StringImpl **)v8;
                              unint64_t v1241 = *((void *)v8 + 1);
                            }
                            else
                            {
                              unint64_t v1241 = 0;
                              v1242 = 0;
                            }
                          }
                          goto LABEL_2857;
                        }
                        if (*((unsigned __int16 *)v8 + 25) <= 0x773u)
                        {
                          if (v15 == 1892)
                          {
                            IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)v8, v14, (uint64_t)&v1322);
                            if (v1322.canBeValid)
                            {
                              WebKit::WebPageProxy::didAdjustVisibilityWithSelectors(v11, (uint64_t)&v1322);
                              if (v1322.canBeValid) {
                                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322, v1257);
                              }
                            }
                            goto LABEL_283;
                          }
                          if (v15 == 1893)
                          {
                            IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1315);
                            if ((_BYTE)v1317)
                            {
                              IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1364);
                              if (v1364[40])
                              {
                                if (!(_BYTE)v1317) {
                                  goto LABEL_2796;
                                }
                                *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)&v1315[8];
                                *(_OWORD *)&v1322.int isLink = v1316;
                                v1322.request.point = *(IntPoint *)v1315;
                                v1322.containerScrollingNodeID.m_value.m_object.m_identifier = *(void *)v1364;
                                *(_OWORD *)&v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = *(_OWORD *)&v1364[8];
                                *(_OWORD *)&v1322.adjustedPointForNodeRespondingToClickEvents.char m_x = *(_OWORD *)&v1364[24];
                                *((unsigned char *)&v1322.url + 8) = 1;
LABEL_2842:
                                WebKit::WebPageProxy::didApplyLinkDecorationFiltering((WebKit::WebPageProxy *)v11, (const URL *)&v1322, (const URL *)&v1322.containerScrollingNodeID);
LABEL_2843:
                                std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v1283);
                                goto LABEL_283;
                              }
                              LOBYTE(v1322.request.point.m_x) = 0;
                              *((unsigned char *)&v1322.url + 8) = 0;
                              if ((_BYTE)v1317)
                              {
                                v1258 = *(WTF::StringImpl **)v1315;
                                *(void *)v1315 = 0;
                                if (v1258)
                                {
                                  if (*(_DWORD *)v1258 == 2) {
                                    WTF::StringImpl::destroy(v1258, v1240);
                                  }
                                  else {
                                    *(_DWORD *)v1258 -= 2;
                                  }
                                }
                              }
                            }
                            else
                            {
                              LOBYTE(v1322.request.point.m_x) = 0;
                              *((unsigned char *)&v1322.url + 8) = 0;
                            }
                            v1283 = *(WTF::StringImpl **)v8;
                            uint64_t v1284 = *((void *)v8 + 1);
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1285 = *((void *)v8 + 3);
                            if (!v1285) {
                              goto LABEL_2843;
                            }
                            if (!v1284) {
                              goto LABEL_2843;
                            }
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1285 + 16))(v1285, v1283);
                            if (!*((unsigned char *)&v1322.url + 8)) {
                              goto LABEL_2843;
                            }
                            goto LABEL_2842;
                          }
LABEL_2835:
                          if (v15 == 1976 && *(unsigned char *)(v13 + 23))
                          {
                            PAL::HysteresisActivity::impulse((unsigned char *)(v11 + 1464));
                            goto LABEL_283;
                          }
                          if (v15 == 2063)
                          {
                            unsigned __int16 v1293 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
                            if (v1293 > 0xFFu)
                            {
                              WebKit::WebPageProxy::setAllowsLayoutViewportHeightExpansion(v11, v1293 != 0);
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            if (v15 != 1986) {
                              goto LABEL_283;
                            }
                            unsigned __int16 v1288 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
                            if (v1288 > 0xFFu)
                            {
                              WebKit::WebPageProxy::hasActiveNowPlayingSessionChanged((WebKit::WebPageProxy *)v11, v1288 != 0);
                              goto LABEL_283;
                            }
                          }
LABEL_2876:
                          unint64_t v110 = *(WTF::StringImpl **)v8;
                          uint64_t v108 = *((void *)v8 + 1);
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v109 = *((void *)v8 + 3);
                          if (!v109) {
                            goto LABEL_283;
                          }
LABEL_247:
                          if (!v108) {
                            goto LABEL_283;
                          }
                          goto LABEL_701;
                        }
                        if (v15 != 1908)
                        {
                          if (v15 == 1911)
                          {
                            uint64_t v1255 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
                            if (v1256)
                            {
                              WebKit::WebPageProxy::didDestroySleepDisabler(v11, v1255);
                              goto LABEL_283;
                            }
                            goto LABEL_2876;
                          }
                          goto LABEL_2835;
                        }
                        uint64_t v1271 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
                        if (!v1272) {
                          goto LABEL_1655;
                        }
                        uint64_t v1273 = v1271;
                        IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1364);
                        if (!v1364[8]) {
                          goto LABEL_1655;
                        }
                        unint64_t v791 = *((void *)v8 + 1);
                        v792 = *(WTF::StringImpl **)v8;
                        unint64_t v1274 = *((void *)v8 + 2) - *(void *)v8;
                        if (v791 <= v1274)
                        {
LABEL_2818:
                          unint64_t v1277 = 0;
                          v1278 = 0;
                          *(void *)uint64_t v8 = 0;
                          *((void *)v8 + 1) = 0;
                          uint64_t v1279 = *((void *)v8 + 3);
                          if (v1279)
                          {
                            if (v791)
                            {
                              (*(void (**)(uint64_t))(*(void *)v1279 + 16))(v1279);
                              v1278 = *(WTF::StringImpl **)v8;
                              unint64_t v1277 = *((void *)v8 + 1);
                            }
                            else
                            {
                              unint64_t v1277 = 0;
                              v1278 = 0;
                            }
                          }
                        }
                        else
                        {
                          v1275 = (unsigned __int8 *)v792 + v1274;
                          *((void *)v8 + 2) = v1275 + 1;
                          if (v792)
                          {
                            unsigned int v1276 = *v1275;
                            if (v1276 < 2)
                            {
                              v1322.request.point = (IntPoint)v1273;
                              *(void *)&v1322.request.includeSnapshot = *(void *)v1364;
                              v1322.canBeValid = v1276 != 0;
                              v1322.int isLink = 1;
                              WebKit::WebPageProxy::didCreateSleepDisabler(v11, v10, v1273, &v1322.request.includeSnapshot, v1276 != 0);
                              if (!v1322.isLink) {
                                goto LABEL_283;
                              }
                              v449 = *(WTF::StringImpl **)&v1322.request.includeSnapshot;
                              *(void *)&v1322.request.includeSnapshot = 0;
                              if (!v449) {
                                goto LABEL_283;
                              }
                              goto LABEL_2061;
                            }
LABEL_2820:
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1281 = *((void *)v8 + 3);
                            if (v1281 && v791) {
                              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1281 + 16))(v1281, v792);
                            }
                            if (v1364[8])
                            {
LABEL_2822:
                              v1282 = *(WTF::StringImpl **)v1364;
                              *(void *)v1364 = 0;
                              if (v1282)
                              {
                                if (*(_DWORD *)v1282 == 2) {
                                  WTF::StringImpl::destroy(v1282, v792);
                                }
                                else {
                                  *(_DWORD *)v1282 -= 2;
                                }
                              }
                            }
LABEL_1655:
                            v748 = *(WTF::StringImpl **)v8;
                            uint64_t v749 = *((void *)v8 + 1);
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v750 = *((void *)v8 + 3);
                            if (!v750) {
                              goto LABEL_283;
                            }
                            goto LABEL_1656;
                          }
LABEL_2828:
                          unint64_t v1277 = v791;
                          v1278 = v792;
                        }
                        unint64_t v791 = 0;
                        v792 = 0;
                        *(void *)uint64_t v8 = 0;
                        *((void *)v8 + 1) = 0;
                        uint64_t v1280 = *((void *)v8 + 3);
                        if (v1280)
                        {
                          if (v1277)
                          {
                            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1280
                                                                                                 + 16))(v1280, v1278, v1277);
                            v792 = *(WTF::StringImpl **)v8;
                            unint64_t v791 = *((void *)v8 + 1);
                          }
                          else
                          {
                            unint64_t v791 = 0;
                            v792 = 0;
                          }
                        }
                        goto LABEL_2820;
                      case 0x841:
                        IPC::Decoder::decode<WebKit::FocusedElementInformation>((unint64_t *)v8, &v1322);
                        if (LOBYTE(v1322.dataDetectorBounds.m_size.m_width))
                        {
                          std::__tuple_leaf<0ul,WebKit::FocusedElementInformation,false>::__tuple_leaf[abi:sn180100]<WebKit::FocusedElementInformation,void>((uint64_t)v1364, (long long *)&v1322.request.point);
                          char v1387 = 1;
                          if (!LOBYTE(v1322.dataDetectorBounds.m_size.m_width)) {
                            goto LABEL_1780;
                          }
                          WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&v1322, v826);
                          if (v1387) {
                            goto LABEL_1780;
                          }
                        }
                        else
                        {
                          v1364[0] = 0;
                          char v1387 = 0;
                        }
                        v1014 = *(WTF::StringImpl **)v8;
                        uint64_t v1015 = *((void *)v8 + 1);
                        *(void *)uint64_t v8 = 0;
                        *((void *)v8 + 1) = 0;
                        uint64_t v1016 = *((void *)v8 + 3);
                        if (!v1016) {
                          goto LABEL_283;
                        }
                        if (!v1015) {
                          goto LABEL_283;
                        }
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1016 + 16))(v1016, v1014);
                        if (!v1387) {
                          goto LABEL_283;
                        }
LABEL_1780:
                        WebKit::WebPageProxy::updateFocusedElementInformation((WebKit::WebPageProxy *)v11, (const FocusedElementInformation *)v1364);
                        if (!v1387) {
                          goto LABEL_283;
                        }
                        v828 = (WebKit::FocusedElementInformation *)v1364;
                        goto LABEL_2296;
                      case 0x842:
                        WebKit::WebPageProxy::updateInputContextAfterBlurringAndRefocusingElement((WebKit::WebPageProxy *)v11);
                        goto LABEL_283;
                      case 0x847:
                        IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                        if (!v1322.request.includeSnapshot) {
                          goto LABEL_283;
                        }
                        WebKit::WebPageProxy::updateStringForFind((uint64_t *)v11, (WTF::StringImpl **)&v1322);
                        goto LABEL_962;
                      case 0x848:
                        unsigned __int16 v829 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
                        if (v829 > 0xFFu)
                        {
                          *(unsigned char *)(v11 + 777) = v829 != 0;
                          goto LABEL_283;
                        }
                        unint64_t v110 = *(WTF::StringImpl **)v8;
                        uint64_t v108 = *((void *)v8 + 1);
                        *(void *)uint64_t v8 = 0;
                        *((void *)v8 + 1) = 0;
                        uint64_t v109 = *((void *)v8 + 3);
                        if (v109) {
                          goto LABEL_247;
                        }
                        goto LABEL_283;
                      default:
                        switch(*((_WORD *)v8 + 25))
                        {
                          case 0x825:
                            IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315);
                            if (!v1315[16])
                            {
                              LOBYTE(v1322.request.point.m_x) = 0;
                              LOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width) = 0;
                              goto LABEL_2210;
                            }
                            IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)v8, (uint64_t)v1364);
                            char v772 = LOBYTE(v1376.m_location.m_x);
                            if (!LOBYTE(v1376.m_location.m_x)) {
                              goto LABEL_2265;
                            }
                            unint64_t v773 = *((void *)v8 + 1);
                            v771 = *(WTF::StringImpl **)v8;
                            unint64_t v774 = *((void *)v8 + 2) - *(void *)v8;
                            if (v773 <= v774)
                            {
                              unint64_t v1055 = 0;
                              v1056 = 0;
                              *(void *)uint64_t v8 = 0;
                              *((void *)v8 + 1) = 0;
                              uint64_t v1057 = *((void *)v8 + 3);
                              if (v1057)
                              {
                                if (v773)
                                {
                                  (*(void (**)(uint64_t))(*(void *)v1057 + 16))(v1057);
                                  v1056 = *(WTF::StringImpl **)v8;
                                  unint64_t v1055 = *((void *)v8 + 1);
                                }
                                else
                                {
                                  unint64_t v1055 = 0;
                                  v1056 = 0;
                                }
                              }
                            }
                            else
                            {
                              v775 = (unsigned __int8 *)v771 + v774;
                              *((void *)v8 + 2) = v775 + 1;
                              if (v771)
                              {
                                unsigned int v776 = *v775;
                                if (v776 < 2)
                                {
                                  if (!v1315[16]) {
                                    goto LABEL_2796;
                                  }
                                  BOOL v777 = v776 != 0;
                                  v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1315;
                                  std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1322.canBeValid, (uint64_t)v1364);
                                  LOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_location.m_x) = v777;
                                  char v772 = 1;
                                  goto LABEL_2266;
                                }
LABEL_2263:
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1059 = *((void *)v8 + 3);
                                if (v1059 && v773) {
                                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1059 + 16))(v1059, v771);
                                }
                                char v772 = 0;
LABEL_2265:
                                LOBYTE(v1322.request.point.m_x) = 0;
LABEL_2266:
                                LOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width) = v772;
                                std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v771);
                                if (LOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width)) {
                                  goto LABEL_2267;
                                }
LABEL_2210:
                                v1020 = *(WTF::StringImpl **)v8;
                                uint64_t v1021 = *((void *)v8 + 1);
                                *(void *)uint64_t v8 = 0;
                                *((void *)v8 + 1) = 0;
                                uint64_t v1022 = *((void *)v8 + 3);
                                if (!v1022) {
                                  goto LABEL_283;
                                }
                                if (!v1021) {
                                  goto LABEL_283;
                                }
                                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1022 + 16))(v1022, v1020);
                                if (!LOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width)) {
                                  goto LABEL_283;
                                }
LABEL_2267:
                                uint64_t v1060 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                                if ((_BYTE)v1061)
                                {
                                  *(void *)v1364 = v1060;
                                  uint64_t v8 = &v1364[8];
                                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                                  v1062 = (void *)WTF::fastMalloc((WTF *)0x18);
                                  void *v1062 = &unk_1EEA02CB8;
                                  v1062[1] = *(void *)v1364;
                                  uint64_t v1063 = *(void *)&v1364[8];
                                  *(void *)&v1364[8] = 0;
                                  v1062[2] = v1063;
                                  *(void *)v1315 = v1062;
                                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                                  if (!LOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width)) {
                                    goto LABEL_2796;
                                  }
                                  WebKit::WebPageProxy::shouldAllowDeviceOrientationAndMotionAccess(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (uint64_t)&v1322.canBeValid, SLOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_location.m_x), (unsigned int *)v1315);
                                  uint64_t v1064 = *(void *)v1315;
                                  *(void *)v1315 = 0;
                                  if (v1064) {
                                    (*(void (**)(uint64_t))(*(void *)v1064 + 8))(v1064);
                                  }
                                }
                                if (LOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width))
                                {
                                  v1065 = (WTF::StringImpl *)v1322.cursor.var0.__val_.m_hotSpot;
                                  v1322.cursor.var0.__val_.m_hotSpot = 0;
                                  if (v1065)
                                  {
                                    if (*(_DWORD *)v1065 == 2) {
                                      WTF::StringImpl::destroy(v1065, v1061);
                                    }
                                    else {
                                      *(_DWORD *)v1065 -= 2;
                                    }
                                  }
                                  if (LODWORD(v1322.cursor.var0.__val_.m_image.m_ptr) != -1) {
                                    ((void (*)(unsigned char *, float *))off_1EEA02A40[LODWORD(v1322.cursor.var0.__val_.m_image.m_ptr)])(v1364, &v1322.lineCaretExtent.m_location.m_y);
                                  }
                                  LODWORD(v1322.cursor.var0.__val_.m_image.m_ptr) = -1;
                                  v1066 = *(const void **)&v1322.caretLength;
                                  *(void *)&v1322.caretLength = 0;
                                  if (v1066) {
                                    CFRelease(v1066);
                                  }
                                  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v1322.isLink);
                                }
                                goto LABEL_283;
                              }
                              unint64_t v1055 = v773;
                              v1056 = 0;
                            }
                            unint64_t v773 = 0;
                            v771 = 0;
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1058 = *((void *)v8 + 3);
                            if (v1058)
                            {
                              if (v1055)
                              {
                                (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v1058 + 16))(v1058, v1056, v1055);
                                v771 = *(WTF::StringImpl **)v8;
                                unint64_t v773 = *((void *)v8 + 1);
                              }
                              else
                              {
                                unint64_t v773 = 0;
                                v771 = 0;
                              }
                            }
                            goto LABEL_2263;
                          case 0x828:
                            IPC::Decoder::decode<std::tuple<WebKit::InteractionInformationAtPosition>>(&v1322, (unint64_t *)v8);
                            if (v1339)
                            {
                              WebKit::WebPageProxy::showDataDetectorsUIForPositionInformation((WebKit::WebPageProxy *)v11, &v1322);
                              if (v1339) {
                                goto LABEL_846;
                              }
                            }
                            goto LABEL_283;
                          case 0x82C:
                            IPC::ArgumentCoder<WebCore::InspectorOverlayHighlight,void>::decode((uint64_t *)v8, (uint64_t)&v1322);
                            if (LOBYTE(v1322.url.m_pathEnd)
                              || (v1023 = *(WTF::StringImpl **)v8,
                                  uint64_t v1024 = *((void *)v8 + 1),
                                  *(void *)uint64_t v8 = 0,
                                  *((void *)v8 + 1) = 0,
                                  (uint64_t v1025 = *((void *)v8 + 3)) != 0)
                              && v1024
                              && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1025 + 16))(v1025, v1023), LOBYTE(v1322.url.m_pathEnd)))
                            {
                              WebCore::Color::Color();
                              WebCore::Color::Color();
                              WebCore::Color::Color();
                              WebCore::Color::Color();
                              WebCore::Color::Color();
                              v1364[40] = v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
                              unint64_t v858 = v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
                              memset(&v1322.containerScrollingNodeID.m_value.m_processIdentifier, 0, 48);
                              *(void *)&v1364[48] = v858;
                              *(void *)&v1364[56] = *(void *)&v1322.isDataDetectorLink;
                              *(_OWORD *)v1365 = *(_OWORD *)&v1322.adjustedPointForNodeRespondingToClickEvents.m_x;
                              *(_OWORD *)&v1365[16] = *(_OWORD *)((char *)&v1322.url + 8);
                              v1365[32] = v1322.url.m_hostEnd;
                              v1365[40] = 1;
                              if (!LOBYTE(v1322.url.m_pathEnd)) {
                                goto LABEL_1817;
                              }
                              WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)&v1322, v857);
                              if (v1365[40]) {
                                goto LABEL_1817;
                              }
                            }
                            else
                            {
                              v1364[0] = 0;
                              v1365[40] = 0;
                            }
                            v1026 = *(WTF::StringImpl **)v8;
                            uint64_t v1027 = *((void *)v8 + 1);
                            *(void *)uint64_t v8 = 0;
                            *((void *)v8 + 1) = 0;
                            uint64_t v1028 = *((void *)v8 + 3);
                            if (!v1028) {
                              goto LABEL_283;
                            }
                            if (!v1027) {
                              goto LABEL_283;
                            }
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v1028 + 16))(v1028, v1026);
                            if (!v1365[40]) {
                              goto LABEL_283;
                            }
LABEL_1817:
                            WebKit::WebPageProxy::showInspectorHighlight((WebKit::WebPageProxy *)v11, (const InspectorOverlayHighlight *)v1364);
                            if (v1365[40]) {
                              WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)v1364, v859);
                            }
                            goto LABEL_283;
                          case 0x82D:
                            WebKit::WebPageProxy::showInspectorIndication((WebKit::WebPageProxy *)v11);
                            goto LABEL_283;
                          default:
                            goto LABEL_1820;
                        }
                    }
                  }
                  IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
                  if (!v1322.request.includeSnapshot) {
                    goto LABEL_283;
                  }
                  WTF::isIntegralOrPointerType((WTF *)v11);
                  break;
              }
LABEL_962:
              if (!v1322.request.includeSnapshot) {
                goto LABEL_283;
              }
LABEL_963:
              v449 = (WTF::StringImpl *)v1322.request.point;
              v1322.request.point = 0;
              if (!v449) {
                goto LABEL_283;
              }
LABEL_964:
              int v450 = *(_DWORD *)v449 - 2;
              if (*(_DWORD *)v449 != 2)
              {
LABEL_965:
                *(_DWORD *)v449 = v450;
                goto LABEL_283;
              }
LABEL_1189:
              WTF::StringImpl::destroy(v449, v448);
              goto LABEL_283;
            }
            if (*((unsigned __int16 *)v8 + 25) <= 0x844u)
            {
              if (v15 == 2091)
              {
                IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v8, (uint64_t)v1364);
                if (v1364[16])
                {
                  uint64_t v624 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
                  if (v625)
                  {
                    v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1364;
                    *(void *)&v1322.canBeValid = v624;
                    v1322.int isLink = 1;
                    WebKit::WebPageProxy::showDictationAlternativeUI(v11, (uint64_t)&v1322, v624);
                    goto LABEL_283;
                  }
                }
                else
                {
LABEL_2031:
                  v937 = *(WTF::StringImpl **)v8;
                  uint64_t v938 = *((void *)v8 + 1);
                  *(void *)uint64_t v8 = 0;
                  *((void *)v8 + 1) = 0;
                  uint64_t v939 = *((void *)v8 + 3);
                  if (v939 && v938) {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v939 + 16))(v939, v937);
                  }
                }
LABEL_2106:
                unint64_t v104 = *(WTF::StringImpl **)v8;
                uint64_t v971 = *((void *)v8 + 1);
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v106 = *((void *)v8 + 3);
                if (!v106 || !v971) {
                  goto LABEL_283;
                }
LABEL_259:
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v106 + 16))(v106, v104);
                goto LABEL_283;
              }
              if (v15 == 2107)
              {
                IPC::ArgumentCoder<WebCore::DragItem,void>::decode((unint64_t *)v8, (uint64_t)v1364);
                if (v1397
                  || (v940 = *(WTF::StringImpl **)v8,
                      uint64_t v941 = *((void *)v8 + 1),
                      *(void *)uint64_t v8 = 0,
                      *((void *)v8 + 1) = 0,
                      (uint64_t v942 = *((void *)v8 + 3)) != 0)
                  && v941
                  && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v942 + 16))(v942, v940), v1397))
                {
                  IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)v8, v1315);
                  char v584 = v1320;
                  if (v1320)
                  {
                    if (!v1397) {
                      goto LABEL_2796;
                    }
                    MEMORY[0x19973BA40](&v1322, v1364);
                    *(_OWORD *)&v1322.textAfter.m_impl.m_ptr = v1370;
                    *(FloatRect *)((char *)&v1322.lineCaretExtent + 4) = v1371;
                    *(_DWORD *)&v1322.cursor.var0.__null_state_ = v1372;
                    long long v585 = v1373;
                    long long v1373 = 0u;
                    *(_OWORD *)&v1322.cursor.var0.__val_.m_image.m_ptr = v585;
                    *(_OWORD *)&v1322.cursor.var0.__val_.m_platformCursor = v1374;
                    v1322.linkIndicator.selectionRectInRootViewCoordinates = v1375;
                    LODWORD(v1374) = v1374 & 0xFFFFFFFE;
                    v1322.linkIndicator.textBoundingRectInRootViewCoordinates = v1376;
                    LOBYTE(v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_location.m_x) = v1377;
                    long long v586 = *(_OWORD *)v1378;
                    *(_OWORD *)v1378 = 0u;
                    *(_OWORD *)&v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size.m_width = v586;
                    *(void *)&long long v586 = v1379;
                    uint64_t v1379 = 0;
                    *(void *)&v1322.linkIndicator.textRectsInBoundingRectCoordinates.m_capacity = v586;
                    LOBYTE(v1322.linkIndicator.contentImageScaleFactor) = 0;
                    LOBYTE(v1322.linkIndicator.contentImageWithoutSelection.m_ptr) = 0;
                    if (v1382)
                    {
                      LOBYTE(v1322.linkIndicator.contentImageScaleFactor) = v1380[0];
                      v587 = v1381;
                      if (v1381) {
                        *(_DWORD *)v1381 += 2;
                      }
                      v1322.linkIndicator.contentImageWithHighlight.m_ptr = v587;
                      LOBYTE(v1322.linkIndicator.contentImageWithoutSelection.m_ptr) = 1;
                    }
                    LOBYTE(v1322.linkIndicator.contentImage.m_ptr) = 0;
                    LOBYTE(v1322.dataDetectorBounds.m_size.m_width) = 0;
                    if (v1387)
                    {
                      v588 = v1383;
                      if (v1383) {
                        *(_DWORD *)v1383 += 2;
                      }
                      v1322.linkIndicator.contentImage.m_ptr = v588;
                      *(_OWORD *)&v1322.linkIndicator.estimatedBackgroundColor.m_colorAndFlags = v1384;
                      *(_OWORD *)&v1322.dataDetectorIdentifier.m_impl.m_ptr = v1385;
                      IntPoint v589 = (IntPoint)v1386;
                      if (v1386) {
                        *v1386 += 2;
                      }
                      v1322.dataDetectorBounds.m_location = v589;
                      LOBYTE(v1322.dataDetectorBounds.m_size.m_width) = 1;
                    }
                    v1322.elementContext.var0.var0 = 0;
                    LOBYTE(v1326) = 0;
                    if (v1396[16])
                    {
                      unint64_t v590 = (unint64_t)v1388;
                      if (v1388) {
                        *v1388 += 2;
                      }
                      v1322.elementContext.var0.var2.m_value.m_identifier = v590;
                      *((unsigned char *)&v1322.elementContext.var0.var2 + 8) = v1389;
                      v591 = v1390;
                      if (v1390) {
                        atomic_fetch_add(v1390, 1u);
                      }
                      v1322.elementContext.var0.var1.webPageIdentifier.m_value.m_identifier = (unint64_t)v591;
                      v592 = v1391;
                      if (v1391) {
                        atomic_fetch_add(v1391, 1u);
                      }
                      *((void *)&v1322.elementContext.var0.var2 + 3) = v592;
                      v593 = v1392;
                      if (v1392) {
                        atomic_fetch_add(v1392, 1u);
                      }
                      *((void *)&v1322.elementContext.var0.var2 + 4) = v593;
                      v594 = v1393;
                      if (v1393) {
                        atomic_fetch_add(v1393, 1u);
                      }
                      v1322.elementContext.var0.var1.m_processIdentifier.m_identifier = (unint64_t)v594;
                      v595 = v1394;
                      if (v1394) {
                        *v1394 += 2;
                      }
                      *(void *)&v1322.__engaged_ = v595;
                      uint64_t v596 = (uint64_t)v1395;
                      if (v1395) {
                        *v1395 += 2;
                      }
                      uint64_t v1323 = v596;
                      WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v1324, (uint64_t)v1396);
                      LOBYTE(v1326) = 1;
                    }
                    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v1327, (uint64_t)v1315);
                    char v584 = 1;
                  }
                  else
                  {
                    LOBYTE(v1322.request.point.m_x) = 0;
                  }
                  LOBYTE(v1331) = v584;
                  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v1315);
                  if (v1397)
                  {
                    MEMORY[0x199735300](v1380);
                    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1378[1], v670);
                    v672 = v1378[0];
                    v1378[0] = 0;
                    if (v672)
                    {
                      if (*(_DWORD *)v672 == 2) {
                        WTF::StringImpl::destroy(v672, v671);
                      }
                      else {
                        *(_DWORD *)v672 -= 2;
                      }
                    }
                    v705 = (WTF::StringImpl *)*((void *)&v1373 + 1);
                    *((void *)&v1373 + 1) = 0;
                    if (v705)
                    {
                      if (*(_DWORD *)v705 == 2) {
                        WTF::StringImpl::destroy(v705, v671);
                      }
                      else {
                        *(_DWORD *)v705 -= 2;
                      }
                    }
                    v706 = (WTF::StringImpl *)v1373;
                    *(void *)&long long v1373 = 0;
                    if (v706)
                    {
                      if (*(_DWORD *)v706 == 2) {
                        WTF::StringImpl::destroy(v706, v671);
                      }
                      else {
                        *(_DWORD *)v706 -= 2;
                      }
                    }
                    WebCore::DragImage::~DragImage((WebCore::DragImage *)v1364);
                  }
                }
                else
                {
                  LOBYTE(v1322.request.point.m_x) = 0;
                  LOBYTE(v1331) = 0;
                }
                if ((_BYTE)v1331
                  || (v946 = *(WTF::StringImpl **)v8,
                      uint64_t v947 = *((void *)v8 + 1),
                      *(void *)uint64_t v8 = 0,
                      *((void *)v8 + 1) = 0,
                      (uint64_t v948 = *((void *)v8 + 3)) != 0)
                  && v947
                  && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v948 + 16))(v948, v946),
                      (_BYTE)v1331))
                {
                  WebKit::WebPageProxy::startDrag(v11, (uint64_t)&v1322, (uint64_t)&v1327);
                  if ((_BYTE)v1331)
                  {
                    if ((_BYTE)v1329)
                    {
                      CFTypeRef v707 = v1328[1];
                      v1328[1] = 0;
                      if (v707) {
                        CFRelease(v707);
                      }
                    }
                    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1327);
                    MEMORY[0x199735300](&v1322.linkIndicator.contentImageScaleFactor);
                    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.linkIndicator.textRectsInBoundingRectCoordinates, v708);
                    m_size = (WTF::StringImpl *)v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size;
                    v1322.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates.m_size = 0;
                    if (m_size)
                    {
                      if (*(_DWORD *)m_size == 2) {
                        WTF::StringImpl::destroy(m_size, v709);
                      }
                      else {
                        *(_DWORD *)m_size -= 2;
                      }
                    }
                    v711 = (WTF::StringImpl *)v1322.cursor.var0.__val_.m_hotSpot;
                    v1322.cursor.var0.__val_.m_hotSpot = 0;
                    if (v711)
                    {
                      if (*(_DWORD *)v711 == 2) {
                        WTF::StringImpl::destroy(v711, v709);
                      }
                      else {
                        *(_DWORD *)v711 -= 2;
                      }
                    }
                    v712 = v1322.cursor.var0.__val_.m_image.m_ptr;
                    v1322.cursor.var0.__val_.m_image.m_ptr = 0;
                    if (v712)
                    {
                      if (*(_DWORD *)v712 == 2) {
                        WTF::StringImpl::destroy((WTF::StringImpl *)v712, v709);
                      }
                      else {
                        *(_DWORD *)v712 -= 2;
                      }
                    }
                    WebCore::DragImage::~DragImage((WebCore::DragImage *)&v1322);
                  }
                }
                goto LABEL_283;
              }
              goto LABEL_1343;
            }
            if (v15 != 2117)
            {
              if (v15 != 2118)
              {
                if (v15 == 2124)
                {
                  WebKit::WebPageProxy::willReceiveEditDragSnapshot((WebKit::WebPageProxy *)v11);
                  goto LABEL_283;
                }
                goto LABEL_1343;
              }
              IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v8, (uint64_t)&v1322);
              if (!v1322.request.includeSnapshot) {
                goto LABEL_283;
              }
              WebKit::WebPageProxy::updateSpellingUIWithMisspelledWord(v11, (const WTF::String *)&v1322);
              goto LABEL_962;
            }
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
            if (v1315[8])
            {
              IPC::Decoder::decode<WebCore::GrammarDetail>((IPC::Decoder *)v8, (uint64_t)v1364);
              int v619 = v1364[40];
              if (v1364[40])
              {
                if (!v1315[8]) {
                  goto LABEL_2796;
                }
                IntPoint v620 = *(IntPoint *)v1315;
                *(void *)v1315 = 0;
                *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)v1364;
                uint64_t v621 = *(void *)&v1364[16];
                memset(&v1364[16], 0, 24);
                v1322.request.point = v620;
                *(void *)&v1322.int isLink = v621;
                *(void *)&v1322.isContentEditable = *(void *)&v1364[24];
                int v622 = 1;
                v1322.containerScrollingNodeID.m_value.m_object.m_identifier = *(void *)&v1364[32];
              }
              else
              {
                int v622 = 0;
                LOBYTE(v1322.request.point.m_x) = 0;
              }
              LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v622;
              std::__optional_destruct_base<WebCore::GrammarDetail,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v618);
              if (v1315[8])
              {
                v674 = *(WTF::StringImpl **)v1315;
                *(void *)v1315 = 0;
                if (v674)
                {
                  if (*(_DWORD *)v674 == 2) {
                    WTF::StringImpl::destroy(v674, v673);
                  }
                  else {
                    *(_DWORD *)v674 -= 2;
                  }
                }
              }
              if (v619) {
                goto LABEL_1467;
              }
            }
            else
            {
              int v622 = 0;
              LOBYTE(v1322.request.point.m_x) = 0;
              LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
            }
            v921 = *(WTF::StringImpl **)v8;
            uint64_t v922 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v923 = *((void *)v8 + 3);
            if (v923 && v922) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v923 + 16))(v923, v921);
            }
LABEL_1467:
            if (!v622) {
              goto LABEL_283;
            }
            WebKit::WebPageProxy::updateSpellingUIWithMisspelledWord(v11, (const WTF::String *)&v1322);
            if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)) {
              goto LABEL_283;
            }
            v680 = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
            v1322.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
            if (v680)
            {
              if (*(_DWORD *)v680 == 2) {
                WTF::StringImpl::destroy(v680, v679);
              }
              else {
                *(_DWORD *)v680 -= 2;
              }
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.isLink, v679);
            goto LABEL_963;
          }
          uint64_t v488 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
          if (!v489)
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1322.url.m_hostEnd) = 0;
            goto LABEL_1695;
          }
          IntPoint v490 = (IntPoint)v488;
          IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)v8, v1364);
          if (!v1365[0])
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1322.url.m_hostEnd) = 0;
            goto LABEL_1218;
          }
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315);
          char v491 = v1315[16];
          if (!v1315[16]) {
            goto LABEL_1091;
          }
          unint64_t v492 = *((void *)v8 + 1);
          v493 = *(WTF::StringImpl **)v8;
          unint64_t v494 = *((void *)v8 + 2) - *(void *)v8;
          if (v492 <= v494)
          {
            unint64_t v779 = 0;
            v780 = 0;
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v781 = *((void *)v8 + 3);
            if (v781)
            {
              if (v492)
              {
                (*(void (**)(uint64_t))(*(void *)v781 + 16))(v781);
                v780 = *(WTF::StringImpl **)v8;
                unint64_t v779 = *((void *)v8 + 1);
              }
              else
              {
                unint64_t v779 = 0;
                v780 = 0;
              }
            }
          }
          else
          {
            v495 = (unsigned __int8 *)v493 + v494;
            *((void *)v8 + 2) = v495 + 1;
            if (v493)
            {
              unsigned int v496 = *v495;
              if (v496 < 2)
              {
                BOOL v497 = v496 != 0;
                unsigned __int16 ready = IPC::Decoder::decode<WebCore::MediaPlayerReadyState>((uint64_t *)v8);
                if (ready > 0xFFu)
                {
                  if (!v1365[0] || !v1315[16]) {
                    goto LABEL_2796;
                  }
                  char v558 = ready;
                  v1322.request.point = v490;
                  v1322.request.includeSnapshot = 0;
                  *(_DWORD *)&v1322.isContentEditable = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.request.includeSnapshot, (uint64_t)v1364);
                  LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
                  v1322.adjustedPointForNodeRespondingToClickEvents.char m_x = NAN;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.containerScrollingNodeID, (uint64_t)&v1364[32]);
                  *(_OWORD *)&v1322.url.m_string.m_impl.m_ptr = *(_OWORD *)v1315;
                  LOBYTE(v1322.url.m_userEnd) = v497;
                  BYTE1(v1322.url.m_userEnd) = v558;
                  char v491 = 1;
                  goto LABEL_1217;
                }
                goto LABEL_1090;
              }
LABEL_1732:
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v783 = *((void *)v8 + 3);
              if (v783 && v492) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v783 + 16))(v783, v493);
              }
LABEL_1090:
              char v491 = 0;
LABEL_1091:
              LOBYTE(v1322.request.point.m_x) = 0;
LABEL_1217:
              LOBYTE(v1322.url.m_hostEnd) = v491;
LABEL_1218:
              std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364);
              if (LOBYTE(v1322.url.m_hostEnd))
              {
LABEL_1219:
                uint64_t v559 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                if (v560)
                {
                  *(void *)v1364 = v559;
                  uint64_t v8 = &v1364[8];
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                  v561 = (void *)WTF::fastMalloc((WTF *)0x18);
                  void *v561 = &unk_1EEA02C18;
                  v561[1] = *(void *)v1364;
                  uint64_t v562 = *(void *)&v1364[8];
                  *(void *)&v1364[8] = 0;
                  v561[2] = v562;
                  *(void *)v1315 = v561;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                  if (!LOBYTE(v1322.url.m_hostEnd)) {
                    goto LABEL_2796;
                  }
                  WebKit::WebPageProxy::validateCaptureStateUpdate(v11, *(void *)&v1322.request.point, (uint64_t)&v1322.request.includeSnapshot, (uint64_t)v1322.url.m_string.m_impl.m_ptr, *((uint64_t *)&v1322.url + 1), v1322.url.m_userEnd, BYTE1(v1322.url.m_userEnd), (uint64_t *)v1315);
                  uint64_t v563 = *(void *)v1315;
                  *(void *)v1315 = 0;
                  if (v563) {
                    (*(void (**)(uint64_t))(*(void *)v563 + 8))(v563);
                  }
                }
                if (!LOBYTE(v1322.url.m_hostEnd)) {
                  goto LABEL_283;
                }
                if (LODWORD(v1322.adjustedPointForNodeRespondingToClickEvents.m_x) != -1) {
                  ((void (*)(unsigned char *, Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes>>::MarkableTraits> *))off_1EEA02A40[LODWORD(v1322.adjustedPointForNodeRespondingToClickEvents.m_x)])(v1364, &v1322.containerScrollingNodeID);
                }
                v1322.adjustedPointForNodeRespondingToClickEvents.char m_x = NAN;
                if (*(_DWORD *)&v1322.isContentEditable == -1) {
                  goto LABEL_283;
                }
                p_includeSnapshot = &v1322.request.includeSnapshot;
                v557 = off_1EEA02A40[*(unsigned int *)&v1322.isContentEditable];
                goto LABEL_1228;
              }
LABEL_1695:
              v765 = *(WTF::StringImpl **)v8;
              uint64_t v766 = *((void *)v8 + 1);
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v767 = *((void *)v8 + 3);
              if (!v767) {
                goto LABEL_283;
              }
              if (!v766) {
                goto LABEL_283;
              }
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v767 + 16))(v767, v765);
              if (!LOBYTE(v1322.url.m_hostEnd)) {
                goto LABEL_283;
              }
              goto LABEL_1219;
            }
            unint64_t v779 = v492;
            v780 = 0;
          }
          unint64_t v492 = 0;
          v493 = 0;
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v782 = *((void *)v8 + 3);
          if (v782)
          {
            if (v779)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v782 + 16))(v782, v780, v779);
              v493 = *(WTF::StringImpl **)v8;
              unint64_t v492 = *((void *)v8 + 1);
            }
            else
            {
              unint64_t v492 = 0;
              v493 = 0;
            }
          }
          goto LABEL_1732;
        }
        if (v15 == 1871)
        {
          WebKit::WebPageProxy::beginMonitoringCaptureDevices((WebKit::WebPageProxy *)v11);
          goto LABEL_283;
        }
        if (v15 != 1969)
        {
          if (v15 != 2044) {
            goto LABEL_1098;
          }
          uint64_t v459 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
          if (v460)
          {
            IntPoint v461 = (IntPoint)v459;
            IPC::Decoder::decode<WebKit::FrameInfoData>((IPC::Decoder *)v8, (uint64_t)v1364);
            char v463 = LOBYTE(v1376.m_location.m_x);
            if (LOBYTE(v1376.m_location.m_x))
            {
              v1322.request.point = v461;
              std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v1322.request.includeSnapshot, (uint64_t)v1364);
              char v463 = 1;
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
            }
            LOBYTE(v1322.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width) = v463;
            std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v1364, v462);
            if (LOBYTE(v1322.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width))
            {
LABEL_1184:
              WebKit::WebPageProxy::requestGeolocationPermissionForFrame(v11, v10, *(void *)&v1322.request.point, (uint64_t)&v1322.request.includeSnapshot);
              if (LOBYTE(v1322.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width))
              {
                v550 = v1322.cursor.var0.__val_.m_image.m_ptr;
                v1322.cursor.var0.__val_.m_image.m_ptr = 0;
                if (v550)
                {
                  if (*(_DWORD *)v550 == 2) {
                    WTF::StringImpl::destroy((WTF::StringImpl *)v550, v549);
                  }
                  else {
                    *(_DWORD *)v550 -= 2;
                  }
                }
                if (*(_DWORD *)&v1322.cursor.var0.__null_state_ != -1) {
                  ((void (*)(unsigned char *, float *))off_1EEA02A40[*(unsigned int *)&v1322.cursor.var0.__null_state_])(v1364, &v1322.caretLength);
                }
                *(_DWORD *)&v1322.cursor.var0.__null_state_ = -1;
                v564 = v1322.textAfter.m_impl.m_ptr;
                v1322.textAfter.m_impl.m_ptr = 0;
                if (v564) {
                  CFRelease(v564);
                }
                WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v1322.canBeValid);
              }
              goto LABEL_283;
            }
          }
          else
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            LOBYTE(v1322.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width) = 0;
          }
          v762 = *(WTF::StringImpl **)v8;
          uint64_t v763 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v764 = *((void *)v8 + 3);
          if (!v764) {
            goto LABEL_283;
          }
          if (!v763) {
            goto LABEL_283;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v764 + 16))(v764, v762);
          if (!LOBYTE(v1322.linkIndicator.textBoundingRectInRootViewCoordinates.m_size.m_width)) {
            goto LABEL_283;
          }
          goto LABEL_1184;
        }
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1306);
        if ((_BYTE)v1307)
        {
          IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v8, v1315);
          if (BYTE8(v1316))
          {
            IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v8, v1364);
            if (v1364[32])
            {
              if (!(_BYTE)v1307 || !BYTE8(v1316)) {
                goto LABEL_2796;
              }
              v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1306;
              v1322.canBeValid = 0;
              LODWORD(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.canBeValid, (uint64_t)v1315);
              LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = 0;
              LODWORD(v1322.url.m_string.m_impl.m_ptr) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v1322.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t)v1364);
              *((unsigned char *)&v1322.url + 8) = 1;
              if (v1364[32] && *(_DWORD *)&v1364[24] != -1) {
                ((void (*)(WTF::StringImpl **, unsigned char *))off_1EEA02A40[*(unsigned int *)&v1364[24]])(v1296, v1364);
              }
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
              *((unsigned char *)&v1322.url + 8) = 0;
            }
            if (BYTE8(v1316) && v1316 != -1) {
              ((void (*)(unsigned char *, unsigned char *))off_1EEA02A40[v1316])(v1364, v1315);
            }
          }
          else
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            *((unsigned char *)&v1322.url + 8) = 0;
          }
          if (*((unsigned char *)&v1322.url + 8)) {
            goto LABEL_1199;
          }
        }
        else
        {
          LOBYTE(v1322.request.point.m_x) = 0;
          *((unsigned char *)&v1322.url + 8) = 0;
        }
        v768 = *(WTF::StringImpl **)v8;
        uint64_t v769 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v770 = *((void *)v8 + 3);
        if (!v770) {
          goto LABEL_283;
        }
        if (!v769) {
          goto LABEL_283;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v770 + 16))(v770, v768);
        if (!*((unsigned char *)&v1322.url + 8)) {
          goto LABEL_283;
        }
LABEL_1199:
        uint64_t v551 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
        if (v552)
        {
          *(void *)v1364 = v551;
          uint64_t v8 = &v1364[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
          v553 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v553 = &unk_1EEA02BF0;
          v553[1] = *(void *)v1364;
          uint64_t v554 = *(void *)&v1364[8];
          *(void *)&v1364[8] = 0;
          v553[2] = v554;
          *(void *)v1315 = v553;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
          if (!*((unsigned char *)&v1322.url + 8)) {
            goto LABEL_2796;
          }
          WebKit::WebPageProxy::enumerateMediaDevicesForFrame((WebKit::WebPageProxy *)v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (WebCore::SecurityOriginData *)&v1322.canBeValid, (WebCore::SecurityOriginData *)&v1322.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t *)v1315);
          uint64_t v555 = *(void *)v1315;
          *(void *)v1315 = 0;
          if (v555) {
            (*(void (**)(uint64_t))(*(void *)v555 + 8))(v555);
          }
        }
        if (!*((unsigned char *)&v1322.url + 8)) {
          goto LABEL_283;
        }
        if (LODWORD(v1322.url.m_string.m_impl.m_ptr) != -1) {
          ((void (*)(unsigned char *, ObjectIdentifierGeneric<WebCore::ProcessIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long, WTF::SupportsObjectIdentifierNullState::Yes> *))off_1EEA02A40[LODWORD(v1322.url.m_string.m_impl.m_ptr)])(v1364, &v1322.containerScrollingNodeID.m_value.m_processIdentifier);
        }
        LODWORD(v1322.url.m_string.m_impl.m_ptr) = -1;
        if (LODWORD(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) == -1) {
          goto LABEL_283;
        }
        p_includeSnapshot = &v1322.canBeValid;
        v557 = off_1EEA02A40[LODWORD(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)];
LABEL_1228:
        ((void (*)(unsigned char *, BOOL *))v557)(v1364, p_includeSnapshot);
        goto LABEL_283;
      }
      if (*((unsigned __int16 *)v8 + 25) > 0x7E6u)
      {
        if (*((unsigned __int16 *)v8 + 25) <= 0x808u)
        {
          switch(*((_WORD *)v8 + 25))
          {
            case 0x7E7:
              double v242 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)v8));
              if (v243) {
                WebKit::WebPageProxy::pageScaleFactorDidChange((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, v242);
              }
              goto LABEL_283;
            case 0x7E8:
            case 0x7EB:
            case 0x7EE:
            case 0x7EF:
            case 0x7F0:
            case 0x7F1:
            case 0x7F2:
            case 0x7F5:
            case 0x7F6:
            case 0x7F7:
              goto LABEL_915;
            case 0x7E9:
              double v391 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)v8));
              if (v392) {
                WebKit::WebPageProxy::pluginScaleFactorDidChange((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, v391);
              }
              goto LABEL_283;
            case 0x7EA:
              double v388 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)v8));
              if (v389) {
                WebKit::WebPageProxy::pluginZoomFactorDidChange((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, v388);
              }
              goto LABEL_283;
            case 0x7EC:
              IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)v8, (uint64_t)v1364);
              if (!v1364[16]) {
                goto LABEL_1009;
              }
              IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v8, (uint64_t)v1315);
              if (!v1315[16]) {
                goto LABEL_1009;
              }
              if (!v1364[16]) {
                goto LABEL_2796;
              }
              v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1364;
              *(_OWORD *)&v1322.canBeValid = *(_OWORD *)v1315;
              v1322.isContentEditable = 1;
              WebKit::WebPageProxy::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const UUID *)&v1322, *(IntRect *)v1315);
              goto LABEL_283;
            case 0x7ED:
              unsigned __int16 v393 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)v8);
              if (v393 < 0x100u) {
                goto LABEL_1009;
              }
              unsigned __int8 v394 = v393;
              IPC::Decoder::decode<WTF::UUID>((IPC::Decoder *)v8, (uint64_t)v1364);
              if (!v1364[16]) {
                goto LABEL_1009;
              }
              *(_OWORD *)&v1322.canBeValid = *(_OWORD *)v1364;
              LOBYTE(v1322.request.point.m_x) = v394;
              v1322.isContentEditable = 1;
              WebKit::WebPageProxy::proofreadingSessionUpdateStateForSuggestionWithID(v11, v10, v394, (uint64_t)&v1322.canBeValid);
              goto LABEL_283;
            case 0x7F3:
              IPC::Decoder::decode<std::tuple<unsigned long long,WTF::String>>((IPC::Decoder *)v8, &v1322);
              if (!v1322.canBeValid) {
                goto LABEL_283;
              }
              WebKit::WebPageProxy::registerEditCommandForUndo((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, *(void *)&v1322.request.point, (const WTF::String *)&v1322.request.includeSnapshot);
              if (!v1322.canBeValid) {
                goto LABEL_283;
              }
              goto LABEL_552;
            case 0x7F4:
              goto LABEL_283;
            case 0x7F8:
              IPC::Decoder::decode<std::tuple<WTF::UUID>>((IPC::Decoder *)v8, (uint64_t)&v1322);
              if (v1322.canBeValid) {
                WebKit::WebPageProxy::removeTextAnimationForAnimationID((WebKit::WebPageProxy *)v11, (IPC::Connection *)v10, (const WTF::UUID *)&v1322);
              }
              goto LABEL_283;
            default:
              if (v15 != 2049) {
                goto LABEL_915;
              }
              IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v8, v1315);
              if ((_BYTE)v1317)
              {
                IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)v8, v1364);
                if (v1365[0]
                  && (IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1296), LOBYTE(v1296[1])))
                {
                  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1306);
                  char v313 = (char)v1306[1];
                  if (LOBYTE(v1306[1]))
                  {
                    if (!(_BYTE)v1317 || !v1365[0] || !LOBYTE(v1296[1])) {
                      goto LABEL_2796;
                    }
                    IntPoint v314 = *(IntPoint *)v1315;
                    *(void *)v1315 = 0;
                    v1322.request.point = v314;
                    *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)&v1315[8];
                    *(_OWORD *)&v1322.int isLink = v1316;
                    *(_DWORD *)&v1315[8] &= ~1u;
                    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v1322.containerScrollingNodeID, (uint64_t)v1364);
                    v315 = v1296[0];
                    v1296[0] = 0;
                    *(void *)&v1322.url.m_pathEnd = v315;
                    v1322.imageURL.m_string.m_impl.m_ptr = (StringImpl *)v1306[0];
                    char v313 = 1;
                  }
                  else
                  {
                    LOBYTE(v1322.request.point.m_x) = 0;
                  }
                  *((unsigned char *)&v1322.imageURL + 8) = v313;
                  if (LOBYTE(v1296[1]))
                  {
                    v316 = v1296[0];
                    v1296[0] = 0;
                    if (v316)
                    {
                      if (*(_DWORD *)v316 == 2) {
                        WTF::StringImpl::destroy(v316, v312);
                      }
                      else {
                        *(_DWORD *)v316 -= 2;
                      }
                    }
                  }
                }
                else
                {
                  LOBYTE(v1322.request.point.m_x) = 0;
                  *((unsigned char *)&v1322.imageURL + 8) = 0;
                }
                std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v1364);
                if ((_BYTE)v1317)
                {
                  v466 = *(WTF::StringImpl **)v1315;
                  *(void *)v1315 = 0;
                  if (v466)
                  {
                    if (*(_DWORD *)v466 == 2) {
                      WTF::StringImpl::destroy(v466, v465);
                    }
                    else {
                      *(_DWORD *)v466 -= 2;
                    }
                  }
                }
              }
              else
              {
                LOBYTE(v1322.request.point.m_x) = 0;
                *((unsigned char *)&v1322.imageURL + 8) = 0;
              }
              if (!*((unsigned char *)&v1322.imageURL + 8))
              {
                v675 = *(WTF::StringImpl **)v8;
                uint64_t v676 = *((void *)v8 + 1);
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v677 = *((void *)v8 + 3);
                if (!v677) {
                  goto LABEL_283;
                }
                if (!v676) {
                  goto LABEL_283;
                }
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v677 + 16))(v677, v675);
                if (!*((unsigned char *)&v1322.imageURL + 8)) {
                  goto LABEL_283;
                }
              }
              uint64_t v467 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
              if ((_BYTE)v468)
              {
                *(void *)v1364 = v467;
                uint64_t v8 = &v1364[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                v469 = (void *)WTF::fastMalloc((WTF *)0x18);
                void *v469 = &unk_1EEA02B78;
                v469[1] = *(void *)v1364;
                uint64_t v470 = *(void *)&v1364[8];
                *(void *)&v1364[8] = 0;
                v469[2] = v470;
                *(void *)v1315 = v469;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                if (!*((unsigned char *)&v1322.imageURL + 8)) {
                  goto LABEL_2796;
                }
                WebKit::WebPageProxy::requestTextRecognition(v11, (uint64_t)&v1322, (uint64_t)&v1322.containerScrollingNodeID, (uint64_t)&v1322.url.m_pathEnd, (uint64_t)&v1322.imageURL, (uint64_t)v1315);
                uint64_t v471 = *(void *)v1315;
                *(void *)v1315 = 0;
                if (v471) {
                  (*(void (**)(uint64_t))(*(void *)v471 + 8))(v471);
                }
              }
              if (!*((unsigned char *)&v1322.imageURL + 8)) {
                goto LABEL_283;
              }
              v472 = v1322.imageURL.m_string.m_impl.m_ptr;
              v1322.imageURL.m_string.m_impl.m_ptr = 0;
              if (v472)
              {
                if (*(_DWORD *)v472 == 2) {
                  WTF::StringImpl::destroy((WTF::StringImpl *)v472, v468);
                }
                else {
                  *(_DWORD *)v472 -= 2;
                }
              }
              v473 = *(WTF::StringImpl **)&v1322.url.m_pathEnd;
              *(void *)&v1322.url.m_pathEnd = 0;
              if (v473)
              {
                if (*(_DWORD *)v473 == 2) {
                  WTF::StringImpl::destroy(v473, v468);
                }
                else {
                  *(_DWORD *)v473 -= 2;
                }
              }
              if (LOBYTE(v1322.url.m_string.m_impl.m_ptr))
              {
                v474 = (const void *)v1322.adjustedPointForNodeRespondingToClickEvents;
                v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = 0;
                if (v474) {
                  CFRelease(v474);
                }
              }
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1322.containerScrollingNodeID);
              break;
          }
          goto LABEL_1035;
        }
        if (*((unsigned __int16 *)v8 + 25) > 0x82Du)
        {
          if (*((unsigned __int16 *)v8 + 25) <= 0x830u)
          {
            if (v15 == 2094)
            {
              IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v8, (uint64_t)v1315);
              if (!v1315[16]) {
                goto LABEL_1380;
              }
              IPC::Decoder::decode<WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v8, (uint64_t)v1364);
              if (v1364[16])
              {
                v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1315;
                uint64_t v423 = *(void *)v1364;
                *(void *)v1364 = 0;
                *(void *)&v1322.canBeValid = v423;
                uint64_t v424 = *(void *)&v1364[8];
                *(void *)&v1364[8] = 0;
                *(void *)&v1322.int isLink = v424;
                WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1364, v422);
                v1322.isContentEditable = 1;
                uint64_t v425 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                if ((_BYTE)v426)
                {
                  *(void *)v1364 = v425;
                  uint64_t v8 = &v1364[8];
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                  v427 = (void *)WTF::fastMalloc((WTF *)0x18);
                  void *v427 = &unk_1EEA02BC8;
                  v427[1] = *(void *)v1364;
                  uint64_t v428 = *(void *)&v1364[8];
                  *(void *)&v1364[8] = 0;
                  v427[2] = v428;
                  *(void *)v1315 = v427;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                  if (!v1322.isContentEditable) {
                    goto LABEL_2796;
                  }
                  WebKit::WebPageProxy::showMediaControlsContextMenu(v11, (uint64_t)&v1322, (uint64_t)&v1322.canBeValid, (uint64_t)v1315);
                  uint64_t v429 = *(void *)v1315;
                  *(void *)v1315 = 0;
                  if (v429) {
                    (*(void (**)(uint64_t))(*(void *)v429 + 8))(v429);
                  }
                  if (!v1322.isContentEditable) {
                    goto LABEL_283;
                  }
                }
                WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.canBeValid, v426);
                goto LABEL_283;
              }
            }
            else
            {
              if (v15 != 2096) {
                goto LABEL_915;
              }
              unint64_t v306 = *((void *)v8 + 1);
              v307 = *(WTF::StringImpl **)v8;
              unint64_t v308 = *((void *)v8 + 2) - *(void *)v8;
              if (v306 <= v308) {
                goto LABEL_1376;
              }
              v309 = (unsigned __int8 *)v307 + v308;
              *((void *)v8 + 2) = v309 + 1;
              if (!v307)
              {
LABEL_2326:
                unint64_t v628 = v306;
                v629 = v307;
LABEL_1377:
                unint64_t v306 = 0;
                v307 = 0;
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v631 = *((void *)v8 + 3);
                if (!v631) {
                  goto LABEL_1381;
                }
                if (!v628)
                {
                  unint64_t v306 = 0;
                  v307 = 0;
LABEL_1381:
                  *(void *)uint64_t v8 = 0;
                  *((void *)v8 + 1) = 0;
                  uint64_t v632 = *((void *)v8 + 3);
                  if (v632)
                  {
LABEL_1398:
                    if (v306) {
                      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v632 + 16))(v632, v307);
                    }
                  }
                  goto LABEL_1009;
                }
                (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v631 + 16))(v631, v629, v628);
LABEL_1380:
                v307 = *(WTF::StringImpl **)v8;
                unint64_t v306 = *((void *)v8 + 1);
                goto LABEL_1381;
              }
              unsigned int v310 = *v309;
              if (v310 >= 2) {
                goto LABEL_1381;
              }
              IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v8, (uint64_t)v1364);
              if (v1364[16])
              {
                uint64_t v311 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>((uint64_t *)v8);
                if ((unsigned __int16)v311 >= 0x100u)
                {
                  uint64_t v10 = v311;
                  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
                  if (v1315[8])
                  {
                    if (!v1364[16]) {
                      goto LABEL_2796;
                    }
                    LOBYTE(v1322.request.point.m_x) = v310 != 0;
                    *(InteractionInformationRequest *)((char *)&v1322.request + 4) = *(InteractionInformationRequest *)v1364;
                    v1322.isSelected = v10;
                    *(void *)&v1322.int isLink = *(void *)v1315;
                    v1322.isContentEditable = 1;
                    WebKit::WebPageProxy::showPlaybackTargetPicker(v11, v310 != 0, (uint64_t)&v1322.request.point.m_y, v10, (uint64_t)&v1322.isLink);
                    if (!v1322.isContentEditable) {
                      goto LABEL_283;
                    }
                    point = *(WTF::StringImpl **)&v1322.isLink;
                    *(void *)&v1322.int isLink = 0;
                    if (!point) {
                      goto LABEL_283;
                    }
LABEL_147:
                    if (*(_DWORD *)point == 2) {
                      WTF::StringImpl::destroy(point, v48);
                    }
                    else {
                      *(_DWORD *)point -= 2;
                    }
                    goto LABEL_283;
                  }
                }
              }
            }
            goto LABEL_1009;
          }
          if (v15 != 2097)
          {
            if (v15 != 2122)
            {
              if (v15 == 2125)
              {
                IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1306);
                if ((_BYTE)v1307
                  && (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315), v1315[16])&& (IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v8, (uint64_t)v1364), v1364[16]))
                {
                  IPC::Decoder::decode<WebKit::UserData>((IPC::Decoder *)v8, (uint64_t)v1296);
                  int v284 = LOBYTE(v1296[1]);
                  if (LOBYTE(v1296[1]))
                  {
                    if (!(_BYTE)v1307 || !v1315[16] || !v1364[16]) {
                      goto LABEL_2796;
                    }
                    v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1306;
                    *(_OWORD *)&v1322.canBeValid = *(_OWORD *)v1315;
                    uint64_t v285 = *(void *)v1364;
                    *(void *)v1364 = 0;
                    *(void *)&v1322.isContentEditable = v285;
                    unint64_t v286 = *(void *)&v1364[8];
                    *(void *)&v1364[8] = 0;
                    v1322.containerScrollingNodeID.m_value.m_object.m_identifier = v286;
                    v287 = v1296[0];
                    if (v1296[0])
                    {
                      CFRetain(*((CFTypeRef *)v1296[0] + 1));
                      v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = (unint64_t)v287;
                      int v288 = 1;
                      v1322.BOOL isDataDetectorLink = 1;
                      if (LOBYTE(v1296[1]))
                      {
                        v289 = v1296[0];
                        v1296[0] = 0;
                        if (v289) {
                          CFRelease(*((CFTypeRef *)v289 + 1));
                        }
                      }
                    }
                    else
                    {
                      v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
                      int v288 = 1;
                      v1322.BOOL isDataDetectorLink = 1;
                    }
                  }
                  else
                  {
                    int v288 = 0;
                    LOBYTE(v1322.request.point.m_x) = 0;
                    v1322.BOOL isDataDetectorLink = 0;
                  }
                  if (v1364[16]) {
                    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1364, v283);
                  }
                  if (v284)
                  {
LABEL_921:
                    if (!v288) {
                      goto LABEL_283;
                    }
                    uint64_t v433 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
                    if ((_BYTE)v434)
                    {
                      *(void *)v1364 = v433;
                      uint64_t v8 = &v1364[8];
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1364[8], (atomic_uchar *volatile *)v10);
                      v435 = (void *)WTF::fastMalloc((WTF *)0x18);
                      void *v435 = &unk_1EEA02B50;
                      v435[1] = *(void *)v1364;
                      uint64_t v436 = *(void *)&v1364[8];
                      *(void *)&v1364[8] = 0;
                      v435[2] = v436;
                      *(void *)v1315 = v435;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1364[8]);
                      if (!v1322.isDataDetectorLink) {
                        goto LABEL_2796;
                      }
                      WebKit::WebPageProxy::willSubmitForm(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, *(uint64_t *)&v1322.canBeValid, *(uint64_t *)&v1322.isLink, (uint64_t)&v1322.isContentEditable, (CFTypeRef **)&v1322.containerScrollingNodeID.m_value.m_processIdentifier, (uint64_t)v1315);
                      uint64_t v437 = *(void *)v1315;
                      *(void *)v1315 = 0;
                      if (v437) {
                        (*(void (**)(uint64_t))(*(void *)v437 + 8))(v437);
                      }
                      if (!v1322.isDataDetectorLink) {
                        goto LABEL_283;
                      }
                    }
                    unint64_t v438 = v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
                    v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
                    if (v438) {
                      CFRelease(*(CFTypeRef *)(v438 + 8));
                    }
                    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.isContentEditable, v434);
                    goto LABEL_283;
                  }
                }
                else
                {
                  int v288 = 0;
                  LOBYTE(v1322.request.point.m_x) = 0;
                  v1322.BOOL isDataDetectorLink = 0;
                }
                v430 = *(WTF::StringImpl **)v8;
                uint64_t v431 = *((void *)v8 + 1);
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v432 = *((void *)v8 + 3);
                if (v432 && v431) {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v432 + 16))(v432, v430);
                }
                goto LABEL_921;
              }
              goto LABEL_915;
            }
            IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1364);
            if (v1364[16])
            {
              unint64_t v306 = *((void *)v8 + 1);
              v307 = *(WTF::StringImpl **)v8;
              unint64_t v395 = *((void *)v8 + 2) - *(void *)v8;
              if (v306 > v395)
              {
                v396 = (unsigned __int8 *)v307 + v395;
                *((void *)v8 + 2) = v396 + 1;
                if (v307)
                {
                  unsigned int v397 = *v396;
                  if (v397 < 2)
                  {
                    v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1364;
                    v1322.canBeValid = v397 != 0;
                    v1322.int isLink = 1;
                    WebKit::WebPageProxy::willGoToBackForwardListItem(v11, &v1322, v397 != 0);
                    goto LABEL_283;
                  }
                  goto LABEL_1381;
                }
                goto LABEL_2326;
              }
LABEL_1376:
              unint64_t v628 = 0;
              v629 = 0;
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v630 = *((void *)v8 + 3);
              if (v630)
              {
                if (v306)
                {
                  (*(void (**)(uint64_t))(*(void *)v630 + 16))(v630);
                  v629 = *(WTF::StringImpl **)v8;
                  unint64_t v628 = *((void *)v8 + 1);
                }
                else
                {
                  unint64_t v628 = 0;
                  v629 = 0;
                }
              }
              goto LABEL_1377;
            }
LABEL_1009:
            unint64_t v110 = *(WTF::StringImpl **)v8;
            uint64_t v464 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v109 = *((void *)v8 + 3);
            if (!v109) {
              goto LABEL_283;
            }
LABEL_1192:
            if (!v464) {
              goto LABEL_283;
            }
            goto LABEL_701;
          }
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1306);
          if (!(_BYTE)v1307) {
            goto LABEL_1655;
          }
          IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v8, (uint64_t)v1296);
          if (!v1297) {
            goto LABEL_1655;
          }
          unint64_t v400 = *((void *)v8 + 1);
          v401 = *(WTF::StringImpl **)v8;
          unint64_t v402 = ((*((void *)v8 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v8;
          if (v400 < v402 || v400 - v402 <= 7)
          {
            unint64_t v728 = 0;
            v729 = 0;
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v730 = *((void *)v8 + 3);
            if (v730)
            {
              if (v400)
              {
                (*(void (**)(uint64_t))(*(void *)v730 + 16))(v730);
                v729 = *(WTF::StringImpl **)v8;
                unint64_t v728 = *((void *)v8 + 1);
              }
              else
              {
                unint64_t v728 = 0;
                v729 = 0;
              }
            }
          }
          else
          {
            v403 = (uint64_t *)((char *)v401 + v402);
            *((void *)v8 + 2) = v403 + 1;
            if (v401)
            {
              unint64_t v404 = (((unint64_t)v403 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v401;
              if (v400 < v404 || v400 - v404 <= 7)
              {
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v732 = *((void *)v8 + 3);
                if (v732)
                {
                  if (v400)
                  {
                    (*(void (**)(uint64_t))(*(void *)v732 + 16))(v732);
                    v733 = *(WTF::StringImpl **)v8;
                    uint64_t v734 = *((void *)v8 + 1);
                    uint64_t v735 = *((void *)v8 + 3);
                    *(void *)uint64_t v8 = 0;
                    *((void *)v8 + 1) = 0;
                    if (v735)
                    {
                      if (v734) {
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v735 + 16))(v735, v733);
                      }
                    }
                  }
                }
                goto LABEL_1654;
              }
              v405 = (unint64_t *)(((unint64_t)v403 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v406 = *v405;
              uint64_t v407 = *v403;
              *((void *)v8 + 2) = v405 + 1;
              *(void *)&v1364[8] = 0;
              *(void *)v1364 = 0;
              if (v406 >= 0x5555)
              {
                while (1)
                {
                  IPC::Decoder::decode<WebKit::WebPopupItem>((uint64_t)&v1322, (IPC::Decoder *)v8);
                  if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)) {
                    goto LABEL_1653;
                  }
                  int v736 = *(_DWORD *)&v1364[12];
                  if (*(_DWORD *)&v1364[12] == *(_DWORD *)&v1364[8])
                  {
                    WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPopupItem>((unsigned int *)v1364, (unint64_t)&v1322);
                  }
                  else
                  {
                    uint64_t v737 = *(void *)v1364 + 48 * *(unsigned int *)&v1364[12];
                    *(unsigned char *)uint64_t v737 = v1322.request.point.m_x;
                    uint64_t v738 = *(void *)&v1322.request.includeSnapshot;
                    *(void *)&v1322.request.includeSnapshot = 0;
                    *(void *)(v737 + 8) = v738;
                    *(_WORD *)(v737 + 16) = *(_WORD *)&v1322.canBeValid;
                    uint64_t v739 = *(void *)&v1322.isLink;
                    *(void *)&v1322.int isLink = 0;
                    *(void *)(v737 + 24) = v739;
                    uint64_t v740 = *(void *)&v1322.isContentEditable;
                    *(void *)&v1322.isContentEditable = 0;
                    *(void *)(v737 + 32) = v740;
                    LOWORD(v740) = v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
                    *(unsigned char *)(v737 + 42) = BYTE2(v1322.containerScrollingNodeID.m_value.m_object.m_identifier);
                    *(_WORD *)(v737 + 40) = v740;
                    *(_DWORD *)&v1364[12] = v736 + 1;
                  }
                  std::__optional_destruct_base<WebKit::WebPopupItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v409);
                  if (!--v406)
                  {
                    unsigned int v417 = *(_DWORD *)&v1364[12];
                    unsigned int v416 = *(_DWORD *)&v1364[8];
                    v415 = *(WTF::StringImpl **)v1364;
                    if (*(_DWORD *)&v1364[8] > *(_DWORD *)&v1364[12])
                    {
                      v741 = *(WTF::StringImpl **)v1364;
                      if (*(_DWORD *)&v1364[12])
                      {
                        if (*(_DWORD *)&v1364[12] >= 0x5555556u)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198699704);
                        }
                        int v742 = 48 * *(_DWORD *)&v1364[12];
                        uint64_t v743 = WTF::fastMalloc((WTF *)(48 * *(unsigned int *)&v1364[12]));
                        unsigned int v416 = (v742 & 0xFFFFFFF0) / 0x30;
                        if ((WTF::StringImpl *)v743 == v415)
                        {
                          v741 = v415;
                        }
                        else
                        {
                          v741 = (WTF::StringImpl *)v743;
                          WTF::VectorMover<false,WebKit::WebPopupItem>::move(v415, (WTF::StringImpl *)((char *)v415 + 48 * v417), v743);
                        }
                      }
                      if (v415)
                      {
                        if (v741 == v415)
                        {
                          unsigned int v416 = 0;
                          v741 = 0;
                          *(void *)v1364 = 0;
                          *(_DWORD *)&v1364[8] = 0;
                        }
                        WTF::fastFree(v415, v401);
                      }
                      v415 = v741;
                    }
                    goto LABEL_1041;
                  }
                }
              }
              if (v406)
              {
                uint64_t v408 = WTF::fastMalloc((WTF *)(48 * v406));
                *(_DWORD *)&v1364[8] = 48 * (int)v406 / 0x30u;
                *(void *)v1364 = v408;
                while (1)
                {
                  IPC::Decoder::decode<WebKit::WebPopupItem>((uint64_t)&v1322, (IPC::Decoder *)v8);
                  if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier)) {
                    break;
                  }
                  int v410 = *(_DWORD *)&v1364[12];
                  if (*(_DWORD *)&v1364[12] == *(_DWORD *)&v1364[8])
                  {
                    WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebPopupItem>((unsigned int *)v1364, (unint64_t)&v1322);
                  }
                  else
                  {
                    uint64_t v411 = *(void *)v1364 + 48 * *(unsigned int *)&v1364[12];
                    *(unsigned char *)uint64_t v411 = v1322.request.point.m_x;
                    uint64_t v412 = *(void *)&v1322.request.includeSnapshot;
                    *(void *)&v1322.request.includeSnapshot = 0;
                    *(void *)(v411 + 8) = v412;
                    *(_WORD *)(v411 + 16) = *(_WORD *)&v1322.canBeValid;
                    uint64_t v413 = *(void *)&v1322.isLink;
                    *(void *)&v1322.int isLink = 0;
                    *(void *)(v411 + 24) = v413;
                    uint64_t v414 = *(void *)&v1322.isContentEditable;
                    *(void *)&v1322.isContentEditable = 0;
                    *(void *)(v411 + 32) = v414;
                    LOWORD(v414) = v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
                    *(unsigned char *)(v411 + 42) = BYTE2(v1322.containerScrollingNodeID.m_value.m_object.m_identifier);
                    *(_WORD *)(v411 + 40) = v414;
                    *(_DWORD *)&v1364[12] = v410 + 1;
                  }
                  std::__optional_destruct_base<WebKit::WebPopupItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v409);
                  if (!--v406)
                  {
                    v415 = *(WTF::StringImpl **)v1364;
                    unsigned int v416 = *(_DWORD *)&v1364[8];
                    unsigned int v417 = *(_DWORD *)&v1364[12];
                    goto LABEL_1041;
                  }
                }
LABEL_1653:
                std::__optional_destruct_base<WebKit::WebPopupItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v409);
                WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1364, v744);
LABEL_1654:
                v745 = *(WTF::StringImpl **)v8;
                uint64_t v746 = *((void *)v8 + 1);
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v747 = *((void *)v8 + 3);
                if (v747 && v746) {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v747 + 16))(v747, v745);
                }
                goto LABEL_1655;
              }
              unsigned int v417 = 0;
              unsigned int v416 = 0;
              v415 = 0;
LABEL_1041:
              *(void *)v1364 = 0;
              *(void *)v1315 = v415;
              *(void *)&v1364[8] = 0;
              *(_DWORD *)&v1315[8] = v416;
              *(_DWORD *)&v1315[12] = v417;
              v1315[16] = 1;
              WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1364, v401);
              unint64_t v475 = *((void *)v8 + 1);
              v476 = *(WTF::StringImpl **)v8;
              unint64_t v477 = ((*((void *)v8 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v8;
              if (v475 < v477 || v475 - v477 <= 3)
              {
                unint64_t v751 = 0;
                v752 = 0;
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v753 = *((void *)v8 + 3);
                if (v753)
                {
                  if (v475)
                  {
                    (*(void (**)(uint64_t))(*(void *)v753 + 16))(v753);
                    v752 = *(WTF::StringImpl **)v8;
                    unint64_t v751 = *((void *)v8 + 1);
                  }
                  else
                  {
                    unint64_t v751 = 0;
                    v752 = 0;
                  }
                }
              }
              else
              {
                v478 = (unsigned int *)((char *)v476 + v477);
                *((void *)v8 + 2) = v478 + 1;
                if (v476)
                {
                  unsigned int v479 = *v478;
                  IPC::ArgumentCoder<WebKit::PlatformPopupMenuData,void>::decode((uint64_t *)v8, (uint64_t)v1364);
                  if (v1364[16]
                    || (v476 = *(WTF::StringImpl **)v8,
                        uint64_t v755 = *((void *)v8 + 1),
                        *(void *)uint64_t v8 = 0,
                        *((void *)v8 + 1) = 0,
                        (uint64_t v756 = *((void *)v8 + 3)) != 0)
                    && v755
                    && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v756 + 16))(v756, v476),
                        v1364[16]))
                  {
                    if ((_BYTE)v1307 && v1297)
                    {
                      v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1306;
                      *(_OWORD *)&v1322.canBeValid = *(_OWORD *)v1296;
                      *(void *)v1315 = 0;
                      *(void *)&v1315[8] = 0;
                      *(void *)&v1322.isContentEditable = v407;
                      v1322.containerScrollingNodeID.m_value.m_object.m_identifier = (unint64_t)v415;
                      v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = __PAIR64__(v417, v416);
                      *(_DWORD *)&v1322.BOOL isDataDetectorLink = v479;
                      v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = *(FloatPoint *)v1364;
                      LOWORD(v1322.url.m_string.m_impl.m_ptr) = *(_WORD *)&v1364[8];
                      BYTE2(v1322.url.m_string.m_impl.m_ptr) = v1364[10];
                      *((unsigned char *)&v1322.url + 8) = 1;
                      WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1315, v476);
                      WebKit::WebPageProxy::showPopupMenuFromFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (const WebCore::IntRect *)&v1322.canBeValid, v407, (uint64_t)&v1322.containerScrollingNodeID, v479, (uint64_t)&v1322.adjustedPointForNodeRespondingToClickEvents);
                      if (*((unsigned char *)&v1322.url + 8))
                      {
                        v481 = (const void *)v1322.adjustedPointForNodeRespondingToClickEvents;
                        v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = 0;
                        if (v481) {
                          CFRelease(v481);
                        }
                        WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.containerScrollingNodeID, v480);
                      }
                      goto LABEL_283;
                    }
                    goto LABEL_2796;
                  }
                  goto LABEL_1665;
                }
                unint64_t v751 = v475;
                v752 = 0;
              }
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v754 = *((void *)v8 + 3);
              if (v754 && v751) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v754 + 16))(v754, v752);
              }
LABEL_1665:
              WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1315, v476);
              goto LABEL_1655;
            }
            unint64_t v728 = v400;
            v729 = 0;
          }
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v731 = *((void *)v8 + 3);
          if (v731 && v728) {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v731 + 16))(v731, v729, v728);
          }
          goto LABEL_1655;
        }
        if (*((unsigned __int16 *)v8 + 25) <= 0x817u)
        {
          if (v15 != 2057)
          {
            if (v15 == 2068)
            {
              IPC::Decoder::decode<std::tuple<WebKit::DataDetectionResult>>((uint64_t *)v8, (uint64_t)&v1322);
              if (!v1322.request.includeSnapshot) {
                goto LABEL_283;
              }
              WebKit::WebPageProxy::setDataDetectionResult(v11, (CFTypeRef *)&v1322);
              if (!v1322.request.includeSnapshot) {
                goto LABEL_283;
              }
LABEL_694:
              v270 = (const void *)v1322.request.point;
              v1322.request.point = 0;
              if (!v270) {
                goto LABEL_283;
              }
LABEL_576:
              CFRelease(v270);
              goto LABEL_283;
            }
            goto LABEL_915;
          }
          IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)v8, (uint64_t)v1364);
          if (v1364[16])
          {
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
            int isLink = v1315[8];
            if (v1315[8])
            {
              if (!v1364[16]) {
                goto LABEL_2796;
              }
              WTF::MachSendRight::MachSendRight();
              *(void *)&v1322.request.includeSnapshot = *(void *)&v1364[8];
              *(void *)&v1322.canBeValid = *(void *)v1315;
              int isLink = 1;
            }
            else
            {
              LOBYTE(v1322.request.point.m_x) = 0;
            }
            v1322.int isLink = isLink;
            if (v1364[16])
            {
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1364);
              int isLink = v1322.isLink;
            }
            if (isLink)
            {
LABEL_900:
              WebKit::WebPageProxy::saveImageToLibrary((WebKit::WebPageProxy *)v11, (int)&v1322, (const WTF::StringImpl **)&v1322.canBeValid);
              if (v1322.isLink)
              {
                v420 = *(WTF::StringImpl **)&v1322.canBeValid;
                *(void *)&v1322.canBeValid = 0;
                if (v420)
                {
                  if (*(_DWORD *)v420 == 2) {
                    WTF::StringImpl::destroy(v420, v419);
                  }
                  else {
                    *(_DWORD *)v420 -= 2;
                  }
                }
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v1322);
              }
              goto LABEL_283;
            }
          }
          else
          {
            LOBYTE(v1322.request.point.m_x) = 0;
            v1322.int isLink = 0;
          }
          v453 = *(WTF::StringImpl **)v8;
          uint64_t v454 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v455 = *((void *)v8 + 3);
          if (!v455) {
            goto LABEL_283;
          }
          if (!v454) {
            goto LABEL_283;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v455 + 16))(v455, v453);
          if (!v1322.isLink) {
            goto LABEL_283;
          }
          goto LABEL_900;
        }
        if (v15 == 2072)
        {
          unsigned __int16 v421 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
          if (v421 > 0xFFu)
          {
            WebKit::WebPageProxy::setHasHadSelectionChangesFromUserInteraction(v11, v421 != 0);
            goto LABEL_283;
          }
          unint64_t v104 = *(WTF::StringImpl **)v8;
          uint64_t v105 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v106 = *((void *)v8 + 3);
          if (!v106) {
            goto LABEL_283;
          }
          goto LABEL_258;
        }
        if (v15 != 2082) {
          goto LABEL_915;
        }
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1315);
        if (!v1315[16])
        {
          LOBYTE(v1322.request.point.m_x) = 0;
          LOBYTE(v1322.imageURL.m_hostEnd) = 0;
          goto LABEL_1429;
        }
        IPC::Decoder::decode<WebCore::TextIndicatorData>((unint64_t *)v8, v1364);
        if (!v1365[48])
        {
          LOBYTE(v1322.request.point.m_x) = 0;
          LOBYTE(v1322.imageURL.m_hostEnd) = 0;
          goto LABEL_1062;
        }
        unint64_t v296 = *((void *)v8 + 1);
        v297 = *(WTF::StringImpl **)v8;
        unint64_t v298 = ((*((void *)v8 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v8;
        if (v296 < v298 || v296 - v298 <= 7)
        {
          unint64_t v685 = 0;
          v686 = 0;
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v687 = *((void *)v8 + 3);
          if (v687)
          {
            if (v296)
            {
              (*(void (**)(uint64_t))(*(void *)v687 + 16))(v687);
              v686 = *(WTF::StringImpl **)v8;
              unint64_t v685 = *((void *)v8 + 1);
            }
            else
            {
              unint64_t v685 = 0;
              v686 = 0;
            }
          }
        }
        else
        {
          v299 = (uint64_t *)((char *)v297 + v298);
          *((void *)v8 + 2) = v299 + 1;
          if (v297)
          {
            if (!v1315[16]) {
              goto LABEL_2796;
            }
            uint64_t v300 = *v299;
            v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1315;
            *(_OWORD *)&v1322.canBeValid = *(_OWORD *)v1364;
            *(_OWORD *)&v1322.isContentEditable = *(_OWORD *)&v1364[16];
            *(_OWORD *)&v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = *(_OWORD *)&v1364[32];
            FloatPoint v301 = *(FloatPoint *)&v1364[48];
            *(void *)&v1364[48] = 0;
            v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = v301;
            v302 = *(StringImpl **)&v1364[56];
            *(void *)&v1364[56] = 0;
            v1322.url.m_string.m_impl.m_ptr = v302;
            *((_DWORD *)&v1322.url + 2) = *(_DWORD *)v1365;
            long long v303 = *(_OWORD *)&v1365[8];
            memset(&v1365[8], 0, 24);
            *(_OWORD *)&v1322.url.m_userEnd = v303;
            *(void *)&v1322.url.m_pathEnd = *(void *)&v1365[24];
            WebCore::Color::Color();
            *((_DWORD *)&v1322.imageURL + 2) = *(_DWORD *)&v1365[40];
            *(void *)&v1322.imageURL.m_userEnd = v300;
            char v304 = 1;
            goto LABEL_719;
          }
          unint64_t v685 = v296;
          v686 = 0;
        }
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v688 = *((void *)v8 + 3);
        if (v688 && v685) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v688 + 16))(v688, v686);
        }
        char v304 = 0;
        LOBYTE(v1322.request.point.m_x) = 0;
LABEL_719:
        LOBYTE(v1322.imageURL.m_hostEnd) = v304;
        if (v1365[48])
        {
          if ((*(void *)&v1365[32] & 0x8000000000000) != 0)
          {
            v678 = (unsigned int *)(*(void *)&v1365[32] & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v1365[32] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v678);
              WTF::fastFree((WTF *)v678, v297);
            }
          }
          v305 = *(_DWORD **)&v1365[24];
          *(void *)&v1365[24] = 0;
          if (v305)
          {
            if (v305[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v305 + 8))(v305);
            }
            else {
              --v305[2];
            }
          }
          v482 = *(_DWORD **)&v1365[16];
          *(void *)&v1365[16] = 0;
          if (v482)
          {
            if (v482[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v482 + 8))(v482);
            }
            else {
              --v482[2];
            }
          }
          v483 = *(_DWORD **)&v1365[8];
          *(void *)&v1365[8] = 0;
          if (v483)
          {
            if (v483[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v483 + 8))(v483);
            }
            else {
              --v483[2];
            }
          }
          v484 = *(WTF **)&v1364[48];
          if (*(void *)&v1364[48])
          {
            *(void *)&v1364[48] = 0;
            *(_DWORD *)&v1364[56] = 0;
            WTF::fastFree(v484, v297);
          }
        }
LABEL_1062:
        if (LOBYTE(v1322.imageURL.m_hostEnd))
        {
LABEL_1063:
          WebKit::WebPageProxy::setTextIndicatorFromFrame(v11, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (long long *)&v1322.canBeValid, *(uint64_t *)&v1322.imageURL.m_userEnd);
          if (!LOBYTE(v1322.imageURL.m_hostEnd)) {
            goto LABEL_283;
          }
          if (((uint64_t)v1322.imageURL.m_string.m_impl.m_ptr & 0x8000000000000) != 0)
          {
            v640 = (unsigned int *)((uint64_t)v1322.imageURL.m_string.m_impl.m_ptr & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)((uint64_t)v1322.imageURL.m_string.m_impl.m_ptr & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v640);
              WTF::fastFree((WTF *)v640, v65);
            }
          }
          v485 = *(_DWORD **)&v1322.url.m_pathEnd;
          *(void *)&v1322.url.m_pathEnd = 0;
          if (v485)
          {
            if (v485[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v485 + 8))(v485);
            }
            else {
              --v485[2];
            }
          }
          v486 = *(_DWORD **)&v1322.url.m_hostEnd;
          *(void *)&v1322.url.m_hostEnd = 0;
          if (v486)
          {
            if (v486[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v486 + 8))(v486);
            }
            else {
              --v486[2];
            }
          }
          v487 = *(_DWORD **)&v1322.url.m_userEnd;
          *(void *)&v1322.url.m_userEnd = 0;
          if (v487)
          {
            if (v487[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v487 + 8))(v487);
            }
            else {
              --v487[2];
            }
          }
          m_identifier = (WTF *)v1322.adjustedPointForNodeRespondingToClickEvents;
          if (!*(void *)&v1322.adjustedPointForNodeRespondingToClickEvents) {
            goto LABEL_283;
          }
          v1322.FloatPoint adjustedPointForNodeRespondingToClickEvents = 0;
          LODWORD(v1322.url.m_string.m_impl.m_ptr) = 0;
          goto LABEL_158;
        }
LABEL_1429:
        v663 = *(WTF::StringImpl **)v8;
        uint64_t v664 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v665 = *((void *)v8 + 3);
        if (!v665) {
          goto LABEL_283;
        }
        if (!v664) {
          goto LABEL_283;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v665 + 16))(v665, v663);
        if (!LOBYTE(v1322.imageURL.m_hostEnd)) {
          goto LABEL_283;
        }
        goto LABEL_1063;
      }
      switch(*((_WORD *)v8 + 25))
      {
        case 0x7BD:
          IPC::ArgumentCoder<WebCore::DataDetectorElementInfo,void>::decode((uint64_t *)v8, (uint64_t)v1364);
          if (!v1364[24]) {
            goto LABEL_1380;
          }
          v274 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v8);
          if (!v275)
          {
            v645 = *(WTF::StringImpl **)v8;
            uint64_t v646 = *((void *)v8 + 1);
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v647 = *((void *)v8 + 3);
            if (v647 && v646) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v647 + 16))(v647, v645);
            }
            if (*(void *)v1364) {
              CFRelease(*(CFTypeRef *)v1364);
            }
            goto LABEL_1009;
          }
          *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)&v1364[8];
          v1322.request.point = *(IntPoint *)v1364;
          *(void *)&v1322.int isLink = v274;
          v1322.isContentEditable = 1;
          WebKit::WebPageProxy::handleClickForDataDetectionResult(v11, (uint64_t)&v1322, (uint64_t)&v1322.isLink);
          if (v1322.isContentEditable) {
            goto LABEL_694;
          }
          goto LABEL_283;
        case 0x7C1:
          uint64_t v337 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
          if (!v338) {
            goto LABEL_1009;
          }
          uint64_t v339 = v337;
          IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)v8, (uint64_t)v1364);
          if (!v1364[16]) {
            goto LABEL_1380;
          }
          unint64_t v306 = *((void *)v8 + 1);
          v307 = *(WTF::StringImpl **)v8;
          unint64_t v342 = *((void *)v8 + 2) - *(void *)v8;
          if (v306 <= v342) {
            goto LABEL_1376;
          }
          v343 = (unsigned __int8 *)v307 + v342;
          *((void *)v8 + 2) = v343 + 1;
          if (!v307) {
            goto LABEL_2326;
          }
          unsigned int v344 = *v343;
          if (v344 >= 2) {
            goto LABEL_1381;
          }
          unint64_t v345 = ((unint64_t)(v343 + 8) & 0xFFFFFFFFFFFFFFF8) - (void)v307;
          if (v306 >= v345 && v306 - v345 > 7)
          {
            v346 = (unint64_t *)((unint64_t)(v343 + 8) & 0xFFFFFFFFFFFFFFF8);
            *((void *)v8 + 2) = v346 + 1;
            v340.n128_u64[0] = *v346;
            unint64_t v347 = (((unint64_t)v346 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v307;
            if (v306 >= v347 && v306 - v347 > 7)
            {
              v348 = (char *)v307 + v347;
              v341.n128_u64[0] = *(void *)v348;
              *((void *)v8 + 2) = v348 + 8;
              if (v306 <= v348 + 8 - (char *)v307)
              {
                unint64_t v681 = 0;
                v682 = 0;
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v683 = *((void *)v8 + 3);
                if (v683)
                {
                  (*(void (**)(uint64_t, double, double))(*(void *)v683 + 16))(v683, v340.n128_f64[0], v341.n128_f64[0]);
                  unint64_t v681 = 0;
                  v931 = *(WTF::StringImpl **)v8;
                  uint64_t v932 = *((void *)v8 + 1);
                  uint64_t v933 = *((void *)v8 + 3);
                  *(void *)uint64_t v8 = 0;
                  *((void *)v8 + 1) = 0;
                  v682 = 0;
                  if (v933)
                  {
                    if (v932)
                    {
                      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v933 + 16))(v933, v931);
                      v682 = *(WTF::StringImpl **)v8;
                      unint64_t v681 = *((void *)v8 + 1);
                    }
                  }
                }
              }
              else
              {
                *((void *)v8 + 2) = v348 + 9;
                unsigned int v349 = v348[8];
                if (v349 < 2)
                {
                  v1322.request.point = (IntPoint)v339;
                  *(_OWORD *)&v1322.request.includeSnapshot = *(_OWORD *)v1364;
                  v1322.int isLink = v344 != 0;
                  *(void *)&v1322.isContentEditable = v340.n128_u64[0];
                  v1322.containerScrollingNodeID.m_value.m_object.m_identifier = v341.n128_u64[0];
                  LOBYTE(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) = v349 != 0;
                  v1322.BOOL isDataDetectorLink = 1;
                  WebKit::WebPageProxy::handleSmartMagnificationInformationForPotentialTap(v11, v339, (uint64_t)&v1322.request.includeSnapshot, v344 != 0, v349 != 0, v340.n128_f64[0], v341.n128_f64[0]);
                  goto LABEL_283;
                }
                unint64_t v681 = v306;
                v682 = v307;
              }
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v684 = *((void *)v8 + 3);
              if (v684 && v681) {
                (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t, __n128, __n128))(*(void *)v684 + 16))(v684, v682, v681, v340, v341);
              }
              goto LABEL_1009;
            }
          }
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v639 = *((void *)v8 + 3);
          if (!v639) {
            goto LABEL_1009;
          }
          (*(void (**)(uint64_t, __n128))(*(void *)v639 + 16))(v639, v340);
          v307 = *(WTF::StringImpl **)v8;
          unint64_t v306 = *((void *)v8 + 1);
          uint64_t v632 = *((void *)v8 + 3);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          if (!v632) {
            goto LABEL_1009;
          }
          goto LABEL_1398;
        case 0x7C5:
          WebKit::WebPageProxy::hidePopupMenu(v11);
          goto LABEL_283;
        case 0x7CC:
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>((IPC::Decoder *)v8, &v1322);
          if (v1322.isLink) {
            WebKit::WebPageProxy::logDiagnosticMessageFromWebProcess((WebKit::WebPageProxy *)v11, v10, (WTF::String *)&v1322, (uint64_t)&v1322.request.includeSnapshot, v1322.canBeValid);
          }
          goto LABEL_812;
        case 0x7CD:
          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1364);
          if (!v1364[8]) {
            goto LABEL_1009;
          }
          unint64_t v331 = *((void *)v8 + 1);
          v332 = *(WTF::StringImpl **)v8;
          unint64_t v333 = *((void *)v8 + 2) - *(void *)v8;
          if (v331 <= v333)
          {
            unint64_t v648 = 0;
            v649 = 0;
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v650 = *((void *)v8 + 3);
            if (v650)
            {
              if (v331)
              {
                (*(void (**)(uint64_t))(*(void *)v650 + 16))(v650);
                v649 = *(WTF::StringImpl **)v8;
                unint64_t v648 = *((void *)v8 + 1);
              }
              else
              {
                unint64_t v648 = 0;
                v649 = 0;
              }
            }
          }
          else
          {
            v334 = (char *)v332 + v333;
            *((void *)v8 + 2) = v334 + 1;
            if (v332)
            {
              if (!*v334)
              {
                v1322.request.point = *(IntPoint *)v1364;
                v1322.request.includeSnapshot = 0;
                v1322.canBeValid = 1;
                WebKit::WebPageProxy::logDiagnosticMessageWithDomainFromWebProcess((WebKit::WebPageProxy *)v11, v10, (WTF::String *)&v1322);
                if (v1322.canBeValid) {
                  goto LABEL_1035;
                }
                goto LABEL_283;
              }
LABEL_785:
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v335 = *((void *)v8 + 3);
              if (v335 && v331) {
                (*(void (**)(uint64_t))(*(void *)v335 + 16))(v335);
              }
              if (v1364[8])
              {
                v336 = *(WTF::StringImpl **)v1364;
                *(void *)v1364 = 0;
                if (v336)
                {
                  if (*(_DWORD *)v336 == 2) {
                    WTF::StringImpl::destroy(v336, v332);
                  }
                  else {
                    *(_DWORD *)v336 -= 2;
                  }
                }
              }
              goto LABEL_1009;
            }
            unint64_t v648 = v331;
            v649 = 0;
          }
          unint64_t v331 = 0;
          v332 = 0;
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v651 = *((void *)v8 + 3);
          if (v651)
          {
            if (v648)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v651 + 16))(v651, v649, v648);
              v332 = *(WTF::StringImpl **)v8;
              unint64_t v331 = *((void *)v8 + 1);
            }
            else
            {
              unint64_t v331 = 0;
              v332 = 0;
            }
          }
          goto LABEL_785;
        case 0x7CE:
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>((IPC::Decoder *)v8, &v1322);
          if (v1322.isLink) {
            WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess((WebKit::WebPageProxy *)v11, v10, (WTF::String *)&v1322, (uint64_t)&v1322.request.includeSnapshot, v1322.canBeValid);
          }
LABEL_812:
          std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v322);
          goto LABEL_283;
        case 0x7CF:
          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
          if (!v1315[8]) {
            goto LABEL_1009;
          }
          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1364);
          if (!v1364[8])
          {
            int v328 = 0;
            BOOL v329 = 0;
            LOBYTE(v1322.request.point.m_x) = 0;
            v1322.int isLink = 0;
            goto LABEL_991;
          }
          unint64_t v324 = *((void *)v8 + 1);
          v323 = *(WTF::StringImpl **)v8;
          unint64_t v325 = ((*((void *)v8 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v8;
          if (v324 < v325 || v324 - v325 <= 3)
          {
            unint64_t v652 = 0;
            v653 = 0;
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v654 = *((void *)v8 + 3);
            if (v654)
            {
              if (v324)
              {
                (*(void (**)(uint64_t))(*(void *)v654 + 16))(v654);
                v653 = *(WTF::StringImpl **)v8;
                unint64_t v652 = *((void *)v8 + 1);
              }
              else
              {
                unint64_t v652 = 0;
                v653 = 0;
              }
            }
          }
          else
          {
            v326 = (unsigned int *)((char *)v323 + v325);
            *((void *)v8 + 2) = v326 + 1;
            if (v323)
            {
              uint64_t v13 = *v326;
              unsigned __int16 v327 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>((uint64_t *)v8);
              if (v327 > 0xFFu)
              {
                if (!v1315[8] || !v1364[8]) {
                  goto LABEL_2796;
                }
                int v328 = v327;
                IntPoint v439 = *(IntPoint *)v1315;
                *(void *)v1315 = 0;
                uint64_t v440 = *(void *)v1364;
                *(void *)v1364 = 0;
                v1322.request.point = v439;
                *(void *)&v1322.request.includeSnapshot = v440;
                *(_DWORD *)&v1322.canBeValid = v13;
                v1322.isSelected = v327;
                BOOL v329 = 1;
LABEL_933:
                v1322.int isLink = v329;
                if (v1364[8])
                {
                  v441 = *(WTF::StringImpl **)v1364;
                  *(void *)v1364 = 0;
                  if (v441)
                  {
                    if (*(_DWORD *)v441 == 2) {
                      WTF::StringImpl::destroy(v441, v323);
                    }
                    else {
                      *(_DWORD *)v441 -= 2;
                    }
                  }
                }
LABEL_991:
                if (v1315[8])
                {
                  v457 = *(WTF::StringImpl **)v1315;
                  *(void *)v1315 = 0;
                  if (v457)
                  {
                    if (*(_DWORD *)v457 == 2) {
                      WTF::StringImpl::destroy(v457, v323);
                    }
                    else {
                      *(_DWORD *)v457 -= 2;
                    }
                  }
                }
                if (v329)
                {
                  WebKit::WebPageProxy::logDiagnosticMessageWithResultFromWebProcess((WebKit::WebPageProxy *)v11, v10, (WTF::String *)&v1322, (uint64_t)&v1322.request.includeSnapshot, v13, v328 != 0);
                  if (!v1322.isLink) {
                    goto LABEL_283;
                  }
LABEL_998:
                  v458 = *(WTF::StringImpl **)&v1322.request.includeSnapshot;
                  *(void *)&v1322.request.includeSnapshot = 0;
                  if (v458)
                  {
                    if (*(_DWORD *)v458 == 2) {
                      WTF::StringImpl::destroy(v458, v48);
                    }
                    else {
                      *(_DWORD *)v458 -= 2;
                    }
                  }
LABEL_1035:
                  point = (WTF::StringImpl *)v1322.request.point;
                  v1322.request.point = 0;
                  if (!point) {
                    goto LABEL_283;
                  }
                  goto LABEL_147;
                }
                goto LABEL_1009;
              }
LABEL_777:
              int v328 = 0;
              BOOL v329 = 0;
              LOBYTE(v1322.request.point.m_x) = 0;
              goto LABEL_933;
            }
            unint64_t v652 = v324;
            v653 = 0;
          }
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v655 = *((void *)v8 + 3);
          if (v655 && v652) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v655 + 16))(v655, v653);
          }
          goto LABEL_777;
        case 0x7D0:
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>>((IPC::Decoder *)v8, &v1322);
          if (v1322.isContentEditable) {
            WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess(v11, v10, (WTF::String *)&v1322);
          }
          std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v1322, v330);
          goto LABEL_283;
        case 0x7D1:
          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
          if (!v1315[8]) {
            goto LABEL_1009;
          }
          IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1364);
          if (!v1364[8])
          {
            int v376 = 0;
            BOOL v377 = 0;
            LOBYTE(v1322.request.point.m_x) = 0;
            v1322.isContentEditable = 0;
            goto LABEL_982;
          }
          unint64_t v370 = *((void *)v8 + 1);
          v369 = *(WTF::StringImpl **)v8;
          unint64_t v371 = ((*((void *)v8 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v8;
          if (v370 < v371 || v370 - v371 <= 7)
          {
            unint64_t v656 = 0;
            v657 = 0;
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v658 = *((void *)v8 + 3);
            if (v658)
            {
              if (v370)
              {
                (*(void (**)(uint64_t))(*(void *)v658 + 16))(v658);
                v657 = *(WTF::StringImpl **)v8;
                unint64_t v656 = *((void *)v8 + 1);
              }
              else
              {
                unint64_t v656 = 0;
                v657 = 0;
              }
            }
          }
          else
          {
            v372 = (uint64_t *)((char *)v369 + v371);
            *((void *)v8 + 2) = v372 + 1;
            if (v369)
            {
              unint64_t v373 = (((unint64_t)v372 + 11) & 0xFFFFFFFFFFFFFFFCLL) - (void)v369;
              if (v370 < v373 || v370 - v373 <= 3)
              {
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v660 = *((void *)v8 + 3);
                if (v660)
                {
                  if (v370)
                  {
                    (*(void (**)(uint64_t))(*(void *)v660 + 16))(v660);
                    v369 = *(WTF::StringImpl **)v8;
                    uint64_t v661 = *((void *)v8 + 1);
                    uint64_t v662 = *((void *)v8 + 3);
                    *(void *)uint64_t v8 = 0;
                    *((void *)v8 + 1) = 0;
                    if (v662)
                    {
                      if (v661) {
                        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v662 + 16))(v662, v369);
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v374 = *v372;
                uint64_t v13 = *(unsigned int *)(((unint64_t)v372 + 11) & 0xFFFFFFFFFFFFFFFCLL);
                *((void *)v8 + 2) = (((unint64_t)v372 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                unsigned __int16 v375 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>((uint64_t *)v8);
                if (v375 > 0xFFu)
                {
                  if (!v1315[8] || !v1364[8]) {
                    goto LABEL_2796;
                  }
                  int v376 = v375;
                  IntPoint v442 = *(IntPoint *)v1315;
                  *(void *)v1315 = 0;
                  uint64_t v443 = *(void *)v1364;
                  *(void *)v1364 = 0;
                  v1322.request.point = v442;
                  *(void *)&v1322.request.includeSnapshot = v443;
                  *(void *)&v1322.canBeValid = v374;
                  *(_DWORD *)&v1322.int isLink = v13;
                  v1322.isAnimating = v375;
                  BOOL v377 = 1;
LABEL_940:
                  v1322.isContentEditable = v377;
                  if (v1364[8])
                  {
                    v444 = *(WTF::StringImpl **)v1364;
                    *(void *)v1364 = 0;
                    if (v444)
                    {
                      if (*(_DWORD *)v444 == 2) {
                        WTF::StringImpl::destroy(v444, v369);
                      }
                      else {
                        *(_DWORD *)v444 -= 2;
                      }
                    }
                  }
LABEL_982:
                  if (v1315[8])
                  {
                    v456 = *(WTF::StringImpl **)v1315;
                    *(void *)v1315 = 0;
                    if (v456)
                    {
                      if (*(_DWORD *)v456 == 2) {
                        WTF::StringImpl::destroy(v456, v369);
                      }
                      else {
                        *(_DWORD *)v456 -= 2;
                      }
                    }
                  }
                  if (v377)
                  {
                    WebKit::WebPageProxy::logDiagnosticMessageWithValueFromWebProcess((WebKit::WebPageProxy *)v11, v10, (WTF::String *)&v1322, (uint64_t)&v1322.request.includeSnapshot, v13, v376 != 0);
                    if (v1322.isContentEditable) {
                      goto LABEL_998;
                    }
                    goto LABEL_283;
                  }
                  goto LABEL_1009;
                }
              }
LABEL_830:
              int v376 = 0;
              BOOL v377 = 0;
              LOBYTE(v1322.request.point.m_x) = 0;
              goto LABEL_940;
            }
            unint64_t v656 = v370;
            v657 = 0;
          }
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v659 = *((void *)v8 + 3);
          if (v659 && v656) {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v659 + 16))(v659, v657, v656);
          }
          goto LABEL_830;
        case 0x7D2:
          unint64_t v361 = *((void *)v8 + 1);
          v362 = *(WTF::StringImpl **)v8;
          unint64_t v363 = ((*((void *)v8 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v8;
          if (v361 < v363 || v361 - v363 <= 3) {
            goto LABEL_1389;
          }
          v364 = (int *)((char *)v362 + v363);
          *((void *)v8 + 2) = v364 + 1;
          if (!v362) {
            goto LABEL_2342;
          }
          int v365 = *v364;
          IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)v8);
          if (!v366) {
            goto LABEL_1391;
          }
          unint64_t v361 = *((void *)v8 + 1);
          v362 = *(WTF::StringImpl **)v8;
          unint64_t v367 = ((*((void *)v8 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v8;
          if (v361 < v367 || v361 - v367 <= 7)
          {
LABEL_1389:
            unint64_t v635 = 0;
            v636 = 0;
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v637 = *((void *)v8 + 3);
            if (v637)
            {
              if (v361)
              {
                (*(void (**)(uint64_t))(*(void *)v637 + 16))(v637);
                v636 = *(WTF::StringImpl **)v8;
                unint64_t v635 = *((void *)v8 + 1);
              }
              else
              {
                unint64_t v635 = 0;
                v636 = 0;
              }
            }
          }
          else
          {
            v368 = (uint64_t *)((char *)v362 + v367);
            *((void *)v8 + 2) = v368 + 1;
            if (v362)
            {
              WebKit::WebPageProxy::logScrollingEvent(v11, v365, *v368);
              goto LABEL_283;
            }
LABEL_2342:
            unint64_t v635 = v361;
            v636 = v362;
          }
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v638 = *((void *)v8 + 3);
          if (v638 && v635) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v638 + 16))(v638, v636);
          }
LABEL_1391:
          unint64_t v104 = *(WTF::StringImpl **)v8;
          uint64_t v105 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v106 = *((void *)v8 + 3);
          if (v106) {
            goto LABEL_258;
          }
          goto LABEL_283;
        case 0x7D3:
          unint64_t v350 = *((void *)v8 + 1);
          v351 = *(WTF::StringImpl **)v8;
          unint64_t v352 = *((void *)v8 + 2) - *(void *)v8;
          if (v350 <= v352)
          {
            unint64_t v641 = 0;
            v642 = 0;
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v643 = *((void *)v8 + 3);
            if (v643)
            {
              if (v350)
              {
                (*(void (**)(uint64_t))(*(void *)v643 + 16))(v643);
                v642 = *(WTF::StringImpl **)v8;
                unint64_t v641 = *((void *)v8 + 1);
              }
              else
              {
                unint64_t v641 = 0;
                v642 = 0;
              }
            }
          }
          else
          {
            v353 = (unsigned __int8 *)v351 + v352;
            v354 = v353 + 1;
            *((void *)v8 + 2) = v353 + 1;
            if (v351)
            {
              unsigned int v355 = *v353;
              if (v355 < 2)
              {
                unint64_t v356 = ((unint64_t)(v354 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v351;
                if (v350 >= v356 && v350 - v356 > 7)
                {
                  v357 = (double *)((char *)v351 + v356);
                  *((void *)v8 + 2) = v357 + 1;
                  unint64_t v358 = (((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v351;
                  if (v350 >= v358 && v350 - v358 > 7)
                  {
                    double v359 = *v357;
                    double v360 = *(double *)(((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *((void *)v8 + 2) = (((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
                    WebKit::WebPageProxy::mainFramePluginHandlesPageScaleGestureDidChange(v11, v355 != 0, v359, v360);
                    goto LABEL_283;
                  }
                }
                *(void *)uint64_t v8 = 0;
                *((void *)v8 + 1) = 0;
                uint64_t v633 = *((void *)v8 + 3);
                if (!v633
                  || ((*(void (**)(uint64_t))(*(void *)v633 + 16))(v633),
                      v351 = *(WTF::StringImpl **)v8,
                      unint64_t v350 = *((void *)v8 + 1),
                      uint64_t v634 = *((void *)v8 + 3),
                      *(void *)uint64_t v8 = 0,
                      *((void *)v8 + 1) = 0,
                      !v634))
                {
LABEL_1406:
                  unint64_t v110 = *(WTF::StringImpl **)v8;
                  uint64_t v108 = *((void *)v8 + 1);
                  *(void *)uint64_t v8 = 0;
                  *((void *)v8 + 1) = 0;
                  uint64_t v109 = *((void *)v8 + 3);
                  if (!v109) {
                    goto LABEL_283;
                  }
                  goto LABEL_247;
                }
LABEL_1899:
                if (v350) {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v634 + 16))(v634, v351);
                }
                goto LABEL_1406;
              }
LABEL_1405:
              *(void *)uint64_t v8 = 0;
              *((void *)v8 + 1) = 0;
              uint64_t v634 = *((void *)v8 + 3);
              if (!v634) {
                goto LABEL_1406;
              }
              goto LABEL_1899;
            }
            unint64_t v641 = v350;
            v642 = 0;
          }
          unint64_t v350 = 0;
          v351 = 0;
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v644 = *((void *)v8 + 3);
          if (v644)
          {
            if (v641)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v644 + 16))(v644, v642, v641);
              v351 = *(WTF::StringImpl **)v8;
              unint64_t v350 = *((void *)v8 + 1);
            }
            else
            {
              unint64_t v350 = 0;
              v351 = 0;
            }
          }
          goto LABEL_1405;
        default:
          goto LABEL_915;
      }
    }
    if (v15 != 2123)
    {
      if (v15 == 2108)
      {
        IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((IPC::Decoder *)v8, (uint64_t)v1364);
        if (v1364[16])
        {
          *(_OWORD *)v1315 = *(_OWORD *)v1364;
          WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v11 + 200));
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add((uint64_t *)(v11 + 192), (uint64_t *)v1315, (uint64_t)&v1322);
        }
        goto LABEL_283;
      }
      if (v15 == 2090)
      {
        IPC::ArgumentCoder<WebCore::DateTimeChooserParameters,void>::decode((IPC::Decoder *)v8, &v1322);
        if (LOBYTE(v1322.imageURL.m_userEnd)) {
          goto LABEL_296;
        }
        v534 = *(WTF::StringImpl **)v8;
        uint64_t v535 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v536 = *((void *)v8 + 3);
        if (!v536 || !v535) {
          goto LABEL_285;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v536 + 16))(v536, v534);
        if (LOBYTE(v1322.imageURL.m_userEnd))
        {
LABEL_296:
          *(_OWORD *)&v1364[8] = *(_OWORD *)&v1322.request.includeSnapshot;
          long long v144 = *(_OWORD *)&v1322.isLink;
          IntPoint v145 = v1322.request.point;
          unint64_t v146 = v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
          v1322.request.point = 0;
          memset(&v1322.isLink, 0, 64);
          *(_OWORD *)&v1364[24] = v144;
          *(IntPoint *)v1364 = v145;
          *(void *)&v1364[40] = v146;
          *(void *)&v1364[48] = v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
          *(void *)&v1364[56] = *(void *)&v1322.isDataDetectorLink;
          *(_OWORD *)v1365 = *(_OWORD *)&v1322.adjustedPointForNodeRespondingToClickEvents.m_x;
          *(void *)&v1365[16] = *((void *)&v1322.url + 1);
          *(void *)&v1365[53] = *(StringImpl **)((char *)&v1322.imageURL.m_string.m_impl.m_ptr + 5);
          *(_OWORD *)&v1365[40] = *(_OWORD *)&v1322.url.m_pathEnd;
          *(_OWORD *)&v1365[24] = *(_OWORD *)&v1322.url.m_userEnd;
          char v1366 = 1;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.url, v143);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.isDataDetectorLink, v147);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.containerScrollingNodeID, v148);
          uint64_t v150 = *(WTF::StringImpl **)&v1322.isContentEditable;
          *(void *)&v1322.isContentEditable = 0;
          if (v150)
          {
            if (*(_DWORD *)v150 == 2) {
              WTF::StringImpl::destroy(v150, v149);
            }
            else {
              *(_DWORD *)v150 -= 2;
            }
          }
          v262 = *(WTF::StringImpl **)&v1322.isLink;
          *(void *)&v1322.int isLink = 0;
          if (v262)
          {
            if (*(_DWORD *)v262 == 2) {
              WTF::StringImpl::destroy(v262, v149);
            }
            else {
              *(_DWORD *)v262 -= 2;
            }
          }
          v263 = (WTF::StringImpl *)v1322.request.point;
          v1322.request.point = 0;
          if (v263)
          {
            if (*(_DWORD *)v263 == 2) {
              WTF::StringImpl::destroy(v263, v149);
            }
            else {
              *(_DWORD *)v263 -= 2;
            }
          }
          WebKit::WebPageProxy::showDateTimePicker(v11, (uint64_t)v1364);
          if (v1366)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1365[8], v264);
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1364[56], v265);
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1364[40], v266);
            v267 = *(WTF::StringImpl **)&v1364[32];
            *(void *)&v1364[32] = 0;
            if (v267)
            {
              if (*(_DWORD *)v267 == 2) {
                WTF::StringImpl::destroy(v267, v48);
              }
              else {
                *(_DWORD *)v267 -= 2;
              }
            }
            char v82 = *(WTF::StringImpl **)&v1364[24];
            *(void *)&v1364[24] = 0;
            if (v82)
            {
LABEL_143:
              if (*(_DWORD *)v82 == 2) {
                WTF::StringImpl::destroy(v82, v48);
              }
              else {
                *(_DWORD *)v82 -= 2;
              }
            }
LABEL_146:
            point = *(WTF::StringImpl **)v1364;
            *(void *)v1364 = 0;
            if (!point) {
              goto LABEL_283;
            }
            goto LABEL_147;
          }
          goto LABEL_283;
        }
        goto LABEL_698;
      }
      goto LABEL_487;
    }
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v8, (uint64_t)v1364);
    if (!v1364[16] || (IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315), !v1315[8]))
    {
      int v231 = 0;
      LOBYTE(v1322.request.point.m_x) = 0;
      LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = 0;
      goto LABEL_528;
    }
    unint64_t v224 = *((void *)v8 + 1);
    v225 = *(WTF::StringImpl **)v8;
    unint64_t v226 = ((*((void *)v8 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v8;
    if (v224 < v226 || v224 - v226 <= 7)
    {
      unint64_t v537 = 0;
      v538 = 0;
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v539 = *((void *)v8 + 3);
      if (v539)
      {
        if (v224)
        {
          (*(void (**)(uint64_t))(*(void *)v539 + 16))(v539);
          v538 = *(WTF::StringImpl **)v8;
          unint64_t v537 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v537 = 0;
          v538 = 0;
        }
      }
    }
    else
    {
      v227 = (double *)((char *)v225 + v226);
      *((void *)v8 + 2) = v227 + 1;
      if (v225)
      {
        double v3 = *v227;
        unsigned __int16 v228 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v8);
        if (v228 > 0xFFu)
        {
          if (!v1364[16] || !v1315[8]) {
            goto LABEL_2796;
          }
          int v229 = 0;
          v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1364;
          uint64_t v230 = *(void *)v1315;
          *(void *)v1315 = 0;
          *(void *)&v1322.canBeValid = v230;
          *(double *)&v1322.int isLink = v3;
          v1322.isContentEditable = v228;
          int v231 = 1;
LABEL_483:
          LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier) = v231;
          if (v1315[8])
          {
            v232 = *(WTF::StringImpl **)v1315;
            *(void *)v1315 = 0;
            if (v232)
            {
              if (*(_DWORD *)v232 == 2) {
                WTF::StringImpl::destroy(v232, v225);
              }
              else {
                *(_DWORD *)v232 -= 2;
              }
            }
          }
          if (!v229)
          {
LABEL_596:
            if (!v231) {
              goto LABEL_283;
            }
            WebKit::WebPageProxy::willPerformClientRedirectForFrame(v11, v10, *(void *)&v1322.request.point, *(uint64_t *)&v1322.request.includeSnapshot, (uint64_t)&v1322.canBeValid, v3);
            if (!LOBYTE(v1322.containerScrollingNodeID.m_value.m_object.m_identifier)) {
              goto LABEL_283;
            }
LABEL_78:
            point = *(WTF::StringImpl **)&v1322.canBeValid;
            *(void *)&v1322.canBeValid = 0;
            if (!point) {
              goto LABEL_283;
            }
            goto LABEL_147;
          }
LABEL_528:
          v253 = *(WTF::StringImpl **)v8;
          uint64_t v254 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v255 = *((void *)v8 + 3);
          if (v255 && v254) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v255 + 16))(v255, v253);
          }
          goto LABEL_596;
        }
        v225 = *(WTF::StringImpl **)v8;
        uint64_t v541 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v542 = *((void *)v8 + 3);
        if (v542 && v541) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v542 + 16))(v542, v225);
        }
LABEL_1164:
        int v231 = 0;
        LOBYTE(v1322.request.point.m_x) = 0;
        int v229 = 1;
        goto LABEL_483;
      }
      unint64_t v537 = v224;
      v538 = 0;
    }
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v540 = *((void *)v8 + 3);
    if (v540 && v537) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v540 + 16))(v540, v538);
    }
    goto LABEL_1164;
  }
  if (*((unsigned __int16 *)v8 + 25) <= 0x82Eu)
  {
    switch(*((_WORD *)v8 + 25))
    {
      case 0x812:
        IPC::Decoder::decode<WebCore::Cursor>((uint64_t *)v8, &v1322);
        if (!v1322.isContentEditable) {
          goto LABEL_282;
        }
        *(void *)&v1364[8] = *(void *)&v1322.request.includeSnapshot;
        *(_OWORD *)&v1364[16] = *(_OWORD *)&v1322.canBeValid;
        v1364[0] = v1322.request.point.m_x;
        v1364[32] = 1;
        WebKit::WebPageProxy::setCursor((WebKit::WebPageProxy *)v11, (const Cursor *)v1364);
        if (!v1364[32]) {
          goto LABEL_283;
        }
        int v16 = *(_DWORD **)&v1364[8];
        *(void *)&v1364[8] = 0;
        if (!v16) {
          goto LABEL_283;
        }
        if (v16[2] == 1) {
          goto LABEL_2667;
        }
        --v16[2];
        goto LABEL_283;
      case 0x813:
        unsigned __int16 v41 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
        if (v41 > 0xFFu)
        {
          WebKit::WebPageProxy::setCursorHiddenUntilMouseMoves((WebKit::WebPageProxy *)v11, v41 != 0);
          goto LABEL_283;
        }
        unint64_t v104 = *(WTF::StringImpl **)v8;
        uint64_t v105 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v106 = *((void *)v8 + 3);
        if (v106) {
          goto LABEL_258;
        }
        goto LABEL_283;
      case 0x815:
        unsigned __int16 v38 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
        if (v38 > 0xFFu)
        {
          WebKit::WebPageProxy::setFocus((WebKit::WebPageProxy *)v11, v38 != 0);
          goto LABEL_283;
        }
        unint64_t v104 = *(WTF::StringImpl **)v8;
        uint64_t v105 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v106 = *((void *)v8 + 3);
        if (v106) {
          goto LABEL_258;
        }
        goto LABEL_283;
      case 0x816:
        unsigned __int16 v44 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
        if (v44 > 0xFFu)
        {
          WebKit::WebPageProxy::setHasActiveAnimatedScrolls(v11, v44 != 0);
          goto LABEL_283;
        }
        unint64_t v104 = *(WTF::StringImpl **)v8;
        uint64_t v105 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v106 = *((void *)v8 + 3);
        if (v106) {
          goto LABEL_258;
        }
        goto LABEL_283;
      case 0x819:
        unsigned __int16 v43 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
        if (v43 > 0xFFu)
        {
          WebKit::WebPageProxy::setIsResizable((WebKit::WebPageProxy *)v11, v43 != 0);
          goto LABEL_283;
        }
        unint64_t v104 = *(WTF::StringImpl **)v8;
        uint64_t v105 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v106 = *((void *)v8 + 3);
        if (v106) {
          goto LABEL_258;
        }
        goto LABEL_283;
      case 0x81A:
        unsigned __int16 v42 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
        if (v42 > 0xFFu)
        {
          WebKit::WebPageProxy::setMenuBarIsVisible((WebKit::WebPageProxy *)v11, v42 != 0);
          goto LABEL_283;
        }
        unint64_t v104 = *(WTF::StringImpl **)v8;
        uint64_t v105 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v106 = *((void *)v8 + 3);
        if (v106) {
          goto LABEL_258;
        }
        goto LABEL_283;
      case 0x81F:
        unint64_t v39 = IPC::Decoder::decode<std::tuple<unsigned long long>>((IPC::Decoder *)v8);
        if (v40) {
          *(void *)(v11 + 936) = v39;
        }
        goto LABEL_283;
      case 0x821:
        unsigned __int16 v46 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
        if (v46 > 0xFFu)
        {
          WebKit::WebPageProxy::setStatusBarIsVisible((WebKit::WebPageProxy *)v11, v46 != 0);
          goto LABEL_283;
        }
        unint64_t v104 = *(WTF::StringImpl **)v8;
        uint64_t v105 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v106 = *((void *)v8 + 3);
        if (v106) {
          goto LABEL_258;
        }
        goto LABEL_283;
      case 0x823:
        unsigned __int16 v45 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
        if (v45 > 0xFFu)
        {
          WebKit::WebPageProxy::setToolbarsAreVisible((WebKit::WebPageProxy *)v11, v45 != 0);
          goto LABEL_283;
        }
        unint64_t v104 = *(WTF::StringImpl **)v8;
        uint64_t v105 = *((void *)v8 + 1);
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v106 = *((void *)v8 + 3);
        if (v106) {
          goto LABEL_258;
        }
        goto LABEL_283;
      case 0x824:
        IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>((unint64_t *)v8, (uint64_t)&v1322);
        if (v1322.canBeValid) {
          WebKit::WebPageProxy::setWindowFrame((WebKit::WebPageProxy *)v11, (const FloatRect *)&v1322);
        }
        goto LABEL_283;
      default:
        goto LABEL_95;
    }
  }
  if (*((unsigned __int16 *)v8 + 25) > 0x832u)
  {
    if (v15 != 2099)
    {
      if (v15 != 2111) {
        goto LABEL_95;
      }
      unint64_t v33 = *((void *)v8 + 1);
      __int16 v34 = *(WTF::StringImpl **)v8;
      unint64_t v35 = *((void *)v8 + 2) - *(void *)v8;
      if (v33 <= v35)
      {
        unint64_t v115 = 0;
        uint64_t v116 = 0;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v117 = *((void *)v8 + 3);
        if (v117)
        {
          if (v33)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v117 + 16))(v117, v34, v33);
            uint64_t v116 = *(WTF::StringImpl **)v8;
            unint64_t v115 = *((void *)v8 + 1);
          }
          else
          {
            unint64_t v115 = 0;
            uint64_t v116 = 0;
          }
        }
      }
      else
      {
        unsigned int v36 = (unsigned __int8 *)v34 + v35;
        *((void *)v8 + 2) = v36 + 1;
        if (v34)
        {
          uint64_t v37 = *v36;
          if (v37 < 7)
          {
            WebKit::WebPageProxy::takeFocus(v11, v37);
            goto LABEL_283;
          }
LABEL_255:
          uint64_t v119 = *(WTF::StringImpl **)v8;
          uint64_t v120 = *((void *)v8 + 1);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          uint64_t v121 = *((void *)v8 + 3);
          if (!v121) {
            goto LABEL_283;
          }
          if (!v120) {
            goto LABEL_283;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v121 + 16))(v121, v119);
          unint64_t v104 = *(WTF::StringImpl **)v8;
          uint64_t v105 = *((void *)v8 + 1);
          uint64_t v106 = *((void *)v8 + 3);
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          if (!v106) {
            goto LABEL_283;
          }
          goto LABEL_258;
        }
        unint64_t v115 = v33;
        uint64_t v116 = 0;
      }
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v118 = *((void *)v8 + 3);
      if (v118 && v115) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v118 + 16))(v118, v116);
      }
      goto LABEL_255;
    }
    IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v8, (uint64_t)v1364);
    if (v1364[16])
    {
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v8, (uint64_t)v1315);
      if (v1315[8])
      {
        if (!v1364[16]) {
          goto LABEL_2796;
        }
        v1322.InteractionInformationRequest request = *(InteractionInformationRequest *)v1364;
        *(void *)&v1322.canBeValid = *(void *)v1315;
        v1322.int isLink = 1;
        WebKit::WebPageProxy::showValidationMessage((WebKit::WebPageProxy *)v11, (const IntRect *)&v1322, (const WTF::String *)&v1322.canBeValid);
        if (!v1322.isLink) {
          goto LABEL_283;
        }
        goto LABEL_78;
      }
    }
LABEL_282:
    unint64_t v110 = *(WTF::StringImpl **)v8;
    uint64_t v114 = *((void *)v8 + 1);
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v109 = *((void *)v8 + 3);
    if (!v109) {
      goto LABEL_283;
    }
    goto LABEL_700;
  }
  if (v15 == 2095)
  {
    (*(void (**)(void, unint64_t))(**(void **)(v11 + 104) + 24))(*(void *)(v11 + 104), v11);
    goto LABEL_283;
  }
  if (v15 != 2098) {
    goto LABEL_95;
  }
  IPC::ArgumentCoder<WebCore::ShareDataWithParsedURL,void>::decode((IPC::Decoder *)v8, (uint64_t)&v1322);
  if (LOBYTE(v1322.imageURL.m_string.m_impl.m_ptr)) {
    goto LABEL_31;
  }
  v111 = *(WTF::StringImpl **)v8;
  uint64_t v112 = *((void *)v8 + 1);
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v113 = *((void *)v8 + 3);
  if (!v113 || !v112)
  {
LABEL_285:
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    goto LABEL_283;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v113 + 16))(v113, v111);
  if (!LOBYTE(v1322.imageURL.m_string.m_impl.m_ptr))
  {
    uint64_t v109 = *((void *)v8 + 3);
    unint64_t v110 = *(WTF::StringImpl **)v8;
    uint64_t v114 = *((void *)v8 + 1);
    goto LABEL_699;
  }
LABEL_31:
  InteractionInformationRequest v26 = v1322.request;
  long long v27 = *(_OWORD *)&v1322.canBeValid;
  memset(&v1322, 0, 40);
  *(InteractionInformationRequest *)v1364 = v26;
  *(_OWORD *)&v1364[16] = v27;
  *(void *)&v1364[32] = *(void *)&v1322.isContentEditable;
  v1364[40] = 0;
  v1365[16] = 0;
  if (*((unsigned char *)&v1322.url + 8))
  {
    unint64_t v28 = v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
    v1322.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
    *(void *)&v1364[40] = v28;
    *(_OWORD *)&v1364[48] = *(_OWORD *)&v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier;
    *(_OWORD *)v1365 = *(_OWORD *)&v1322.adjustedPointForNodeRespondingToClickEvents.m_x;
    LODWORD(v1322.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier) &= ~1u;
    v1365[16] = 1;
  }
  uint64_t v29 = *(void *)&v1322.url.m_userEnd;
  *(void *)&v1322.url.m_userEnd = 0;
  *(void *)&v1365[24] = v29;
  uint64_t v30 = *(void *)&v1322.url.m_hostEnd;
  *(void *)&v1322.url.m_hostEnd = 0;
  *(void *)&v1365[32] = v30;
  v1365[40] = v1322.url.m_pathEnd;
  v1365[48] = 1;
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.url.m_userEnd, v25);
  if (*((unsigned char *)&v1322.url + 8))
  {
    int v32 = (WTF::StringImpl *)v1322.containerScrollingNodeID.m_value.m_object.m_identifier;
    v1322.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v31);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1322.isLink, v31);
  double v70 = *(WTF::StringImpl **)&v1322.canBeValid;
  *(void *)&v1322.canBeValid = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2) {
      WTF::StringImpl::destroy(v70, v69);
    }
    else {
      *(_DWORD *)v70 -= 2;
    }
  }
  __int16 v71 = *(WTF::StringImpl **)&v1322.request.includeSnapshot;
  *(void *)&v1322.request.includeSnapshot = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2) {
      WTF::StringImpl::destroy(v71, v69);
    }
    else {
      *(_DWORD *)v71 -= 2;
    }
  }
  uint64_t v72 = (WTF::StringImpl *)v1322.request.point;
  v1322.request.point = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2) {
      WTF::StringImpl::destroy(v72, v69);
    }
    else {
      *(_DWORD *)v72 -= 2;
    }
  }
  uint64_t v73 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v8);
  if (!(_BYTE)v74)
  {
LABEL_130:
    WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1365[24], v74);
    if (v1365[16])
    {
      uint64_t v79 = *(WTF::StringImpl **)&v1364[40];
      *(void *)&v1364[40] = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2) {
          WTF::StringImpl::destroy(v79, v78);
        }
        else {
          *(_DWORD *)v79 -= 2;
        }
      }
    }
    WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1364[24], v78);
    unint64_t v81 = *(WTF::StringImpl **)&v1364[16];
    *(void *)&v1364[16] = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2) {
        WTF::StringImpl::destroy(v81, v48);
      }
      else {
        *(_DWORD *)v81 -= 2;
      }
    }
    char v82 = *(WTF::StringImpl **)&v1364[8];
    *(void *)&v1364[8] = 0;
    if (v82) {
      goto LABEL_143;
    }
    goto LABEL_146;
  }
  v1322.request.point = (IntPoint)v73;
  uint64_t v8 = &v1322.request.includeSnapshot;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot, (atomic_uchar *volatile *)v10);
  uint64_t v75 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v75 = &unk_1EEA02A88;
  *(IntPoint *)(v75 + 8) = v1322.request.point;
  uint64_t v76 = *(void *)&v1322.request.includeSnapshot;
  *(void *)&v1322.request.includeSnapshot = 0;
  *(void *)(v75 + 16) = v76;
  *(void *)v1315 = v75;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v1322.request.includeSnapshot);
  if (!v1365[48]) {
    goto LABEL_2796;
  }
  WebKit::WebPageProxy::showShareSheet(v11, v10, (uint64_t)v1364, (uint64_t)v1315);
  uint64_t v77 = *(void *)v1315;
  *(void *)v1315 = 0;
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
  }
  if (v1365[48]) {
    goto LABEL_130;
  }
LABEL_283:
  CFRelease(*(CFTypeRef *)(v11 + 8));
}

void WebKit::NetworkProcess::didReceiveMessage(WebKit::NetworkProcess *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  if (*((atomic_uchar *volatile **)this + 5) == a2)
  {
    if (!IPC::MessageReceiverMap::dispatchMessage((WebKit::NetworkProcess *)((char *)this + 48), (IPC::Connection *)a2, a3))
    {
      unsigned int v6 = *((unsigned __int16 *)a3 + 25);
      if (v6 >= 0xEF4) {
        unsigned int v6 = 3828;
      }
      int v7 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
      if (v7 == 3)
      {
        WebKit::AuxiliaryProcess::didReceiveMessage(this, a2, a3);
      }
      else if (v7 == 34)
      {
        WebKit::NetworkContentRuleListManager::didReceiveMessage((WebKit::NetworkProcess *)((char *)this + 256), (IPC::Connection *)a2, (WTF::StringImpl **)a3);
      }
      else
      {
        WebKit::NetworkProcess::didReceiveNetworkProcessMessage((atomic_uint *)this, a2, a3);
      }
    }
  }
  else
  {
    WTFLogAlways();
  }
}

void WebKit::NetworkProcess::didReceiveNetworkProcessMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v10 = (uint64_t *)a3;
  unint64_t v11 = a2;
  uint64_t v958 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add(this + 32, 1u);
  int v13 = *((unsigned __int16 *)a3 + 25);
  uint64_t v14 = v955;
  unsigned int v15 = &v929;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x16B:
      IPC::handleMessageAsync<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::RegistrableDomain &&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      goto LABEL_921;
    case 0x16D:
      IPC::Decoder::decode<WebKit::WebsiteDataStoreParameters>(a3, &v929);
      if (!v954)
      {
        v905[0] = 0;
        char v928 = 0;
        goto LABEL_447;
      }
      unint64_t m_identifier = v929.m_identifier;
      v929.unint64_t m_identifier = 0;
      *(void *)v905 = m_identifier;
      CFTypeRef v434 = cf;
      CFTypeRef cf = 0;
      *(void *)&v905[8] = v434;
      v435 = v931[0];
      v931[0] = 0;
      *(void *)&v905[16] = v435;
      WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters((uint64_t)&v906[8], (uint64_t)v932);
      LOBYTE(v920) = 0;
      char v921 = 0;
      if (v947)
      {
        unint64_t v811 = v946;
        v946 = 0;
        v920 = v811;
        char v921 = 1;
      }
      LOBYTE(v922) = 0;
      char v923 = 0;
      if (v949)
      {
        unint64_t v812 = v948;
        uint64_t v948 = 0;
        uint64_t v922 = v812;
        char v923 = 1;
      }
      LOBYTE(v924) = 0;
      char v925 = 0;
      if (v951)
      {
        v813 = v950;
        v950 = 0;
        v924 = v813;
        char v925 = 1;
      }
      LOBYTE(v926) = 0;
      char v927 = 0;
      if (v953)
      {
        unsigned int v814 = v952;
        uint64_t v952 = 0;
        v926 = v814;
        char v927 = 1;
        char v928 = 1;
        if (!v954) {
          goto LABEL_447;
        }
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v952);
        if (!v951) {
          goto LABEL_441;
        }
      }
      else
      {
        char v928 = 1;
        if (!v954) {
          goto LABEL_447;
        }
        if (!v951)
        {
LABEL_441:
          if (v949) {
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v948);
          }
          if (v947) {
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v946);
          }
          WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v932, v436);
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v931);
          unint64_t v438 = (WTF *)v929.m_identifier;
          if (v929.m_identifier)
          {
            v929.unint64_t m_identifier = 0;
            LODWORD(cf) = 0;
            WTF::fastFree(v438, v437);
          }
LABEL_447:
          if (v928
            || (a2 = (atomic_uchar *volatile *)*v10,
                a3 = (IPC::Decoder *)v10[1],
                *uint64_t v10 = 0,
                v10[1] = 0,
                (uint64_t v827 = v10[3]) != 0)
            && a3
            && ((*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v827 + 16))(v827, a2), v928))
          {
            WebKit::NetworkProcess::addWebsiteDataStore((uint64_t)this, (uint64_t)v905);
            if (v928)
            {
              if (v927) {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v926);
              }
              if (v925) {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v924);
              }
              if (v923) {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v922);
              }
              if (v921) {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v920);
              }
              WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)&v906[8], (WTF::StringImpl *)a2);
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v905[16]);
              IntPoint v439 = *(WTF **)v905;
              if (*(void *)v905)
              {
                *(void *)v905 = 0;
                *(_DWORD *)&v905[8] = 0;
                WTF::fastFree(v439, (void *)a2);
              }
            }
          }
          goto LABEL_921;
        }
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v950);
      goto LABEL_441;
    case 0x170:
      uint64_t v313 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v314) {
        goto LABEL_913;
      }
      unint64_t v315 = v313;
      IPC::Decoder::decode<WebCore::CertificateInfo>(v10, (uint64_t)v905);
      if (!v905[8]) {
        goto LABEL_913;
      }
      v929.unint64_t m_identifier = v315;
      CFTypeRef cf = *(CFTypeRef *)v905;
      LOBYTE(v931[0]) = 1;
      WebKit::NetworkProcess::allowTLSCertificateChainForLocalPCMTesting((uint64_t)this, v315, (uint64_t)&cf);
      if (LOBYTE(v931[0]))
      {
        CFTypeRef v316 = cf;
        CFTypeRef cf = 0;
        if (v316) {
          CFRelease(v316);
        }
      }
      goto LABEL_921;
    case 0x172:
      WebKit::DownloadManager::applicationDidEnterBackground((WebKit::DownloadManager *)(this + 40));
      goto LABEL_921;
    case 0x173:
      WebKit::DownloadManager::applicationWillEnterForeground((WebKit::DownloadManager *)(this + 40));
      goto LABEL_921;
    case 0x174:
      uint64_t v23 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v24
        && (uint64_t v25 = v23,
            uint64_t v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10),
            v27))
      {
        uint64_t v28 = v26;
        unint64_t v29 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v29;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          uint64_t v30 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v30->unint64_t m_identifier = (unint64_t)&unk_1EE9B7C20;
          v30[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v31 = cf;
          CFTypeRef cf = 0;
          v30[2].unint64_t m_identifier = (unint64_t)v31;
          *(void *)v905 = v30;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::cancelDataTask((uint64_t)this, v25, v28, (uint64_t *)v905);
          goto LABEL_332;
        }
      }
      else
      {
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (v261) {
          goto LABEL_914;
        }
      }
      goto LABEL_921;
    case 0x175:
      uint64_t v248 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v249)
      {
        uint64_t v250 = v248;
        unint64_t v251 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v251;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          uint64_t v252 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v252->unint64_t m_identifier = (unint64_t)&unk_1EE9B7BD0;
          v252[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v253 = cf;
          CFTypeRef cf = 0;
          v252[2].unint64_t m_identifier = (unint64_t)v253;
          *(void *)v905 = v252;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::cancelDownload((uint64_t)this, v250, (uint64_t *)v905);
          uint64_t v79 = *(void *)v905;
          *(void *)v905 = 0;
          if (v79) {
            goto LABEL_1028;
          }
        }
      }
      else
      {
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (v261) {
          goto LABEL_914;
        }
      }
      goto LABEL_921;
    case 0x176:
      uint64_t v69 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v70 = v69;
        unint64_t v71 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v71;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          uint64_t v72 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v72->unint64_t m_identifier = (unint64_t)&unk_1EE9B8968;
          v72[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v73 = cf;
          CFTypeRef cf = 0;
          v72[2].unint64_t m_identifier = (unint64_t)v73;
          *(void *)v905 = v72;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::clearAppBoundSession((uint64_t)this, v70, (uint64_t *)v905);
          goto LABEL_713;
        }
      }
      goto LABEL_921;
    case 0x179:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0]))
      {
        uint64_t v459 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if (!(_BYTE)a2) {
          goto LABEL_482;
        }
        *(void *)v905 = v459;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        char v460 = (void *)WTF::fastMalloc((WTF *)0x18);
        *char v460 = &unk_1EE9B7C98;
        v460[1] = *(void *)v905;
        uint64_t v461 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v460[2] = v461;
        *(void *)uint64_t v955 = v460;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        WebKit::NetworkProcess::clearPrevalentResource((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
        uint64_t v462 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v462) {
          (*(void (**)(uint64_t))(*(void *)v462 + 8))(v462);
        }
        if (LOBYTE(v931[0]))
        {
LABEL_482:
          char v463 = (WTF::StringImpl *)cf;
          CFTypeRef cf = 0;
          if (v463) {
            goto LABEL_911;
          }
        }
      }
      goto LABEL_921;
    case 0x17A:
      uint64_t v464 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v465 = v464;
        unint64_t v466 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v466;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          uint64_t v467 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v467->unint64_t m_identifier = (unint64_t)&unk_1EE9B86C0;
          v467[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v468 = cf;
          CFTypeRef cf = 0;
          v467[2].unint64_t m_identifier = (unint64_t)v468;
          *(void *)v905 = v467;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::clearPrivateClickMeasurement((uint64_t)this, v465, (uint64_t *)v905);
          goto LABEL_713;
        }
      }
      goto LABEL_921;
    case 0x17C:
      unint64_t v232 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)a2)
      {
        v929.unint64_t m_identifier = v232;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
        v233 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
        v233->unint64_t m_identifier = (unint64_t)&unk_1EE9B8990;
        v233[1].unint64_t m_identifier = v929.m_identifier;
        CFTypeRef v234 = cf;
        CFTypeRef cf = 0;
        v233[2].unint64_t m_identifier = (unint64_t)v234;
        *(void *)v905 = v233;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
        WebKit::NetworkProcess::clearServiceWorkerEntitlementOverride((uint64_t)this, (uint64_t *)v905);
        goto LABEL_713;
      }
      goto LABEL_921;
    case 0x17D:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0]))
      {
        uint64_t v511 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if (!(_BYTE)a2) {
          goto LABEL_582;
        }
        *(void *)v905 = v511;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        uint64_t v512 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v512 = &unk_1EE9B7CC0;
        v512[1] = *(void *)v905;
        uint64_t v513 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v512[2] = v513;
        *(void *)uint64_t v955 = v512;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        WebKit::NetworkProcess::clearUserInteraction((uint64_t)this, v929.m_identifier, (WTF::ASCIICaseInsensitiveHash **)&cf, (uint64_t *)v955);
        goto LABEL_536;
      }
      goto LABEL_921;
    case 0x17F:
      uint64_t v451 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v452
        && (uint64_t v453 = v451,
            uint64_t v454 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10),
            v455)
        && (uint64_t v456 = v454,
            uint64_t v457 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10),
            v458))
      {
        WebKit::NetworkProcess::cloneSessionStorageForWebPage((uint64_t)this, v453, v456, v457);
      }
      else
      {
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (v261) {
          goto LABEL_1198;
        }
      }
      goto LABEL_921;
    case 0x180:
      uint64_t v118 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v119 = v118;
        unint64_t v120 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v120;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          uint64_t v121 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v121->unint64_t m_identifier = (unint64_t)&unk_1EE9B84B8;
          v121[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v122 = cf;
          CFTypeRef cf = 0;
          v121[2].unint64_t m_identifier = (unint64_t)v122;
          *(void *)v905 = v121;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::closeITPDatabase((uint64_t)this, v119, (uint64_t *)v905);
          goto LABEL_713;
        }
      }
      goto LABEL_921;
    case 0x181:
      uint64_t v146 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v147 = v146;
        unint64_t v148 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v148;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          int v149 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v149->unint64_t m_identifier = (unint64_t)&unk_1EE9B8878;
          v149[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v150 = cf;
          CFTypeRef cf = 0;
          v149[2].unint64_t m_identifier = (unint64_t)v150;
          *(void *)v905 = v149;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::closePCMDatabase((uint64_t)this, v147, (uint64_t *)v905);
          goto LABEL_713;
        }
      }
      goto LABEL_921;
    case 0x183:
      IPC::handleMessageAsync<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,WTF::CompletionHandler<void ()(std::optional<IPC::ConnectionHandle> &&,WebCore::HTTPCookieAcceptPolicy)> &&)>(a2, (uint64_t *)a3, (uint64_t *)this);
      goto LABEL_921;
    case 0x184:
      uint64_t v521 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v522
        && (unint64_t v523 = v521,
            uint64_t v524 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10),
            v525))
      {
        uint64_t v526 = (const void *)v524;
        IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v10, (uint64_t)v905);
        if (BYTE8(v909) && (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(v10, (uint64_t)v955), v957))
        {
          IPC::Decoder::decode<IPC::FormDataReference>((WTF *)v10, v903);
          char v527 = (char)v903[1];
          if (LOBYTE(v903[1]))
          {
            if (!BYTE8(v909) || !v957) {
              goto LABEL_1091;
            }
            v929.unint64_t m_identifier = v523;
            CFTypeRef cf = v526;
            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v931, (uint64_t)v905);
            LOBYTE(v936) = 0;
            LOBYTE(v939) = 0;
            if (BYTE8(v956))
            {
              int v938 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v936, (uint64_t)v955);
              LOBYTE(v939) = 1;
            }
            *((WTF::StringImpl **)&v939 + 1) = v903[0];
            char v527 = 1;
          }
          else
          {
            LOBYTE(v929.m_identifier) = 0;
          }
          LOBYTE(v940) = v527;
          if (v957 && BYTE8(v956) && v956 != -1) {
            ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9B7B38[v956])(v903, v955);
          }
        }
        else
        {
          LOBYTE(v929.m_identifier) = 0;
          LOBYTE(v940) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v905);
        if ((_BYTE)v940) {
          goto LABEL_689;
        }
      }
      else
      {
        LOBYTE(v929.m_identifier) = 0;
        LOBYTE(v940) = 0;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v817 = v10[3];
      if (!v817) {
        goto LABEL_921;
      }
      if (!a3) {
        goto LABEL_921;
      }
      (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v817 + 16))(v817, a2);
      if (!(_BYTE)v940) {
        goto LABEL_921;
      }
LABEL_689:
      uint64_t v611 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if ((_BYTE)a2)
      {
        *(void *)v905 = v611;
        uint64_t v10 = (uint64_t *)&v905[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        v612 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v612 = &unk_1EE9B7BF8;
        v612[1] = *(void *)v905;
        uint64_t v613 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v612[2] = v613;
        *(void *)uint64_t v955 = v612;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        if (!(_BYTE)v940) {
          goto LABEL_1091;
        }
        WebKit::NetworkProcess::dataTaskWithRequest((uint64_t)this, v929.m_identifier, (WTF::RefCountedBase *)cf, (uint64_t)v931, (uint64_t)&v936, (WTF::RefCountedBase **)&v939 + 1, (uint64_t)v955);
        uint64_t v614 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v614) {
          (*(void (**)(uint64_t))(*(void *)v614 + 8))(v614);
        }
      }
      if ((_BYTE)v940)
      {
        uint64_t v615 = (WTF::RefCountedBase *)*((void *)&v939 + 1);
        *((void *)&v939 + 1) = 0;
        if (v615) {
          WTF::RefCounted<WebCore::FormData>::deref(v615);
        }
        if ((_BYTE)v939)
        {
          if (v938 != -1) {
            ((void (*)(unsigned char *, long long *))off_1EE9B7B38[v938])(v905, &v936);
          }
          int v938 = -1;
        }
        char v616 = (const void *)*((void *)&v935 + 1);
        *((void *)&v935 + 1) = 0;
        if (v616) {
          CFRelease(v616);
        }
        goto LABEL_702;
      }
      goto LABEL_921;
    case 0x185:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,BOOL>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[1]))
      {
        uint64_t v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          *(void *)v905 = v19;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
          uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v20 = &unk_1EE9B8468;
          v20[1] = *(void *)v905;
          uint64_t v21 = *(void *)&v905[8];
          *(void *)&v905[8] = 0;
          v20[2] = v21;
          *(void *)uint64_t v955 = v20;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
          *(void *)v905 = cf;
          WebKit::NetworkProcess::deleteCookiesForTesting(this, v929.m_identifier, (unint64_t)v905, LOBYTE(v931[0]), (uint64_t *)v955);
          uint64_t v22 = *(WTF::StringImpl **)v905;
          *(void *)v905 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          goto LABEL_716;
        }
        char v463 = (WTF::StringImpl *)cf;
        if (cf) {
          goto LABEL_891;
        }
      }
      goto LABEL_921;
    case 0x186:
      uint64_t v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v37
        && (uint64_t v38 = v36,
            uint64_t v39 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v10),
            (v39 & 0xFF00000000) != 0)
        && (v40 = v39, *(double *)&uint64_t v41 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::MonotonicTime>(v10)), v42))
      {
        double v43 = *(double *)&v41;
        unint64_t v44 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v44;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          unsigned __int16 v45 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v45->unint64_t m_identifier = (unint64_t)&unk_1EE9B7B20;
          v45[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v46 = cf;
          CFTypeRef cf = 0;
          v45[2].unint64_t m_identifier = (unint64_t)v46;
          *(void *)v905 = v45;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::deleteWebsiteData((uint64_t)this, v38, v40, (uint64_t *)v905, v43);
          goto LABEL_332;
        }
      }
      else
      {
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (v261) {
          goto LABEL_914;
        }
      }
      goto LABEL_921;
    case 0x187:
      uint64_t v123 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v124) {
        goto LABEL_662;
      }
      unint64_t v125 = v123;
      uint64_t v126 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v10);
      if ((v126 & 0xFF00000000) == 0) {
        goto LABEL_662;
      }
      int v128 = v126;
      IPC::Decoder::decode<WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v10, v127, (uint64_t)&v900);
      if (!v902) {
        goto LABEL_662;
      }
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v10, v129, (uint64_t)v903);
      if (!v904)
      {
        int v138 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[48] = 0;
        goto LABEL_120;
      }
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v10, (void *)a2, (uint64_t)v955);
      if (!v955[16])
      {
        int v138 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[48] = 0;
        goto LABEL_118;
      }
      IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v10, (void *)a2, (uint64_t)v905);
      if (!v905[16]) {
        goto LABEL_1092;
      }
      if (v902 && v904 && v955[16])
      {
        v929.unint64_t m_identifier = v125;
        LODWORD(cf) = v128;
        v130 = v900;
        unint64_t v900 = 0;
        v931[0] = v130;
        uint64_t v131 = v901;
        v901 = 0;
        v931[1] = v131;
        uint64_t v132 = v903[0];
        v903[0] = 0;
        *(void *)uint64_t v932 = v132;
        unint64_t v133 = v903[1];
        v903[1] = 0;
        *(void *)&v932[8] = v133;
        uint64_t v134 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        *(void *)&v932[16] = v134;
        uint64_t v135 = *(void *)&v955[8];
        *(void *)&v955[8] = 0;
        *(void *)&v932[24] = v135;
        uint64_t v136 = *(void *)v905;
        *(void *)v905 = 0;
        *(void *)&v932[32] = v136;
        uint64_t v137 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        *(void *)&v932[40] = v137;
        int v138 = 1;
        v932[48] = 1;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v905, (void *)a2);
        goto LABEL_116;
      }
      goto LABEL_1091;
    case 0x188:
      uint64_t v183 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v184 = v183;
      unint64_t v185 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v185;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      uint64_t v186 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v186->unint64_t m_identifier = (unint64_t)&unk_1EE9B7AD0;
      v186[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v187 = cf;
      CFTypeRef cf = 0;
      v186[2].unint64_t m_identifier = (unint64_t)v187;
      *(void *)v905 = v186;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::destroySession((uint64_t)this, v184, (uint64_t *)v905);
      goto LABEL_332;
    case 0x189:
      uint64_t v53 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v54) {
        goto LABEL_894;
      }
      unint64_t v55 = v53;
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v955);
      if (!v955[8]) {
        goto LABEL_894;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v905);
      if (!v905[8])
      {
        int v63 = 0;
        LOBYTE(v59) = 0;
        int v64 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[24] = 0;
        goto LABEL_784;
      }
      unint64_t v56 = v10[1];
      a2 = (atomic_uchar *volatile *)*v10;
      unint64_t v57 = v10[2] - *v10;
      if (v56 <= v57)
      {
        uint64_t v849 = 0;
        uint64_t v850 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v851 = v10[3];
        if (v851)
        {
          if (v56)
          {
            (*(void (**)(uint64_t))(*(void *)v851 + 16))(v851);
            uint64_t v850 = *v10;
            uint64_t v849 = v10[1];
          }
          else
          {
            uint64_t v849 = 0;
            uint64_t v850 = 0;
          }
        }
      }
      else
      {
        unint64_t v58 = (unsigned __int8 *)a2 + v57;
        v10[2] = (uint64_t)(v58 + 1);
        if (a2)
        {
          int v59 = *v58;
          if ((v59 & 0xFFFFFFF9) == 0)
          {
            uint64_t v60 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if (!(_BYTE)a2
              || (unint64_t v11 = (atomic_uchar *volatile *)v60,
                  uint64_t v61 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10),
                  !(_BYTE)a2)
              || (double v3 = (WTF::StringImpl *)v61,
                  unsigned __int16 v62 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v10),
                  v62 <= 0xFFu))
            {
LABEL_44:
              int v63 = 0;
              LOBYTE(v59) = 0;
              int v64 = 0;
              LOBYTE(v929.m_identifier) = 0;
              goto LABEL_45;
            }
            if (!v955[8] || !v905[8]) {
              goto LABEL_1091;
            }
            int v63 = v62;
            v686 = *(const void **)v955;
            *(void *)uint64_t v955 = 0;
            v929.unint64_t m_identifier = v55;
            CFTypeRef cf = v686;
            uint64_t v687 = *(WTF::StringImpl **)v905;
            *(void *)v905 = 0;
            v931[0] = v687;
            LOBYTE(v931[1]) = v59;
            *(void *)uint64_t v932 = v11;
            *(void *)&v932[8] = v3;
            int v64 = 1;
            v932[16] = v62;
LABEL_45:
            v932[24] = v64;
            if (v905[8])
            {
              char v65 = *(WTF::StringImpl **)v905;
              *(void *)v905 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2) {
                  WTF::StringImpl::destroy(v65, (WTF::StringImpl *)a2);
                }
                else {
                  *(_DWORD *)v65 -= 2;
                }
              }
            }
LABEL_784:
            if (v955[8])
            {
              char v807 = *(WTF::StringImpl **)v955;
              *(void *)uint64_t v955 = 0;
              if (v807)
              {
                if (*(_DWORD *)v807 == 2) {
                  WTF::StringImpl::destroy(v807, (WTF::StringImpl *)a2);
                }
                else {
                  *(_DWORD *)v807 -= 2;
                }
              }
            }
            if (v64)
            {
              WebKit::NetworkProcess::didCommitCrossSiteLoadWithDataTransfer(this, (IPC::Encoder *)v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, v59, (uint64_t)v11, (uint64_t)v3, v63 != 0);
              if (v932[24]) {
                goto LABEL_866;
              }
              goto LABEL_921;
            }
LABEL_894:
            a2 = (atomic_uchar *volatile *)*v10;
            a3 = (IPC::Decoder *)v10[1];
            *uint64_t v10 = 0;
            v10[1] = 0;
            uint64_t v261 = v10[3];
            if (!v261 || !a3) {
              goto LABEL_921;
            }
LABEL_896:
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v261 + 16))(v261, a2);
            goto LABEL_921;
          }
LABEL_1210:
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v853 = v10[3];
          if (v853 && v56) {
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v853 + 16))(v853, a2);
          }
          goto LABEL_44;
        }
        uint64_t v849 = v56;
        uint64_t v850 = 0;
      }
      unint64_t v56 = 0;
      a2 = 0;
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v852 = v10[3];
      if (v852)
      {
        if (v849)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v852 + 16))(v852, v850, v849);
          a2 = (atomic_uchar *volatile *)*v10;
          unint64_t v56 = v10[1];
        }
        else
        {
          unint64_t v56 = 0;
          a2 = 0;
        }
      }
      goto LABEL_1210;
    case 0x18A:
      uint64_t v80 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v81)
      {
        unint64_t v82 = v80;
        IPC::Decoder::decode<WebCore::ClientOrigin>(v10, v905);
        if (BYTE8(v907)
          && (uint64_t v83 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v10),
              v84))
        {
          unint64_t v11 = (atomic_uchar *volatile *)v83;
          IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)v10, (uint64_t)v955);
          char v85 = v955[16];
          if (v955[16])
          {
            if (!BYTE8(v907)) {
              goto LABEL_1091;
            }
            v929.unint64_t m_identifier = v82;
            LOBYTE(cf) = 0;
            *(_DWORD *)uint64_t v932 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v905);
            v932[8] = 0;
            *(_DWORD *)&v932[32] = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v932[8], (uint64_t)&v906[8]);
            *(void *)&v932[40] = v11;
            *(_OWORD *)&v932[48] = *(_OWORD *)v955;
            char v85 = 1;
          }
          else
          {
            LOBYTE(v929.m_identifier) = 0;
          }
          char v933 = v85;
        }
        else
        {
          LOBYTE(v929.m_identifier) = 0;
          char v933 = 0;
        }
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v905);
        if (v933) {
          goto LABEL_798;
        }
      }
      else
      {
        LOBYTE(v929.m_identifier) = 0;
        char v933 = 0;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v824 = v10[3];
      if (!v824) {
        goto LABEL_921;
      }
      if (!a3) {
        goto LABEL_921;
      }
      (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v824 + 16))(v824, a2);
      if (!v933) {
        goto LABEL_921;
      }
LABEL_798:
      WebKit::NetworkProcess::didIncreaseQuota((uint64_t)this, v929.m_identifier, (uint64_t)&cf, *(uint64_t *)&v932[40], *(uint64_t *)&v932[48], v932[56]);
      if (v933)
      {
        if (*(_DWORD *)&v932[32] != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9B7B38[*(unsigned int *)&v932[32]])(v905, &v932[8]);
        }
        *(_DWORD *)&v932[32] = -1;
        if (*(_DWORD *)v932 != -1) {
          goto LABEL_802;
        }
      }
      goto LABEL_921;
    case 0x18B:
      WebKit::disableServiceWorkerEntitlementTestingOverride = 1;
      goto LABEL_921;
    case 0x18C:
      uint64_t v545 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v546) {
        goto LABEL_1191;
      }
      unint64_t v547 = v10[1];
      uint64_t v548 = *v10;
      unint64_t v549 = ((v10[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v10;
      if (v547 < v549 || v547 - v549 <= 3)
      {
        uint64_t v838 = 0;
        uint64_t v839 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v840 = v10[3];
        if (v840)
        {
          if (v547)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v840 + 16))(v840, v548, v547);
            uint64_t v839 = *v10;
            uint64_t v838 = v10[1];
          }
          else
          {
            uint64_t v838 = 0;
            uint64_t v839 = 0;
          }
        }
        goto LABEL_1190;
      }
      uint64_t v551 = (int *)(v548 + v549);
      v10[2] = (uint64_t)(v551 + 1);
      if (!v548)
      {
        uint64_t v838 = v547;
        uint64_t v839 = 0;
LABEL_1190:
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v841 = v10[3];
        if (v841 && v838) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v841 + 16))(v841, v839);
        }
LABEL_1191:
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (!v261) {
          goto LABEL_921;
        }
        goto LABEL_1198;
      }
      uint64_t v552 = v545;
      int v553 = *v551;
      unint64_t v554 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v554;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      uint64_t v555 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v555->unint64_t m_identifier = (unint64_t)&unk_1EE9B7FB8;
      v555[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v556 = cf;
      CFTypeRef cf = 0;
      v555[2].unint64_t m_identifier = (unint64_t)v556;
      *(void *)v905 = v555;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::domainIDExistsInDatabase((uint64_t)this, v552, v553, (uint64_t *)v905);
LABEL_601:
      uint64_t v79 = *(void *)v905;
      *(void *)v905 = 0;
      if (!v79) {
        goto LABEL_921;
      }
LABEL_1028:
      (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
      goto LABEL_921;
    case 0x18D:
      uint64_t v110 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v111
        && (unint64_t v11 = (atomic_uchar *volatile *)v110,
            uint64_t v112 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v10),
            v113))
      {
        uint64_t v114 = (const void *)v112;
        IPC::Decoder::decode<WebCore::ResourceRequest>((IPC::Decoder *)v10, (uint64_t)v905);
        if (BYTE8(v909) && (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(v10, (uint64_t)v955), v957))
        {
          uint64_t v115 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>((IPC::Decoder *)v10);
          if ((v115 & 0xFF0000) != 0)
          {
            __int16 v116 = v115;
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v10, (uint64_t)v903);
            char v117 = (char)v903[1];
            if (LOBYTE(v903[1]))
            {
              if (!BYTE8(v909) || !v957) {
                goto LABEL_1091;
              }
              v929.unint64_t m_identifier = (unint64_t)v11;
              CFTypeRef cf = v114;
              std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v931, (uint64_t)v905);
              LOBYTE(v936) = 0;
              LOBYTE(v939) = 0;
              if (BYTE8(v956))
              {
                int v938 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v936, (uint64_t)v955);
                LOBYTE(v939) = 1;
              }
              WORD4(v939) = v116;
              *(WTF::StringImpl **)&long long v940 = v903[0];
              char v117 = 1;
            }
            else
            {
              LOBYTE(v929.m_identifier) = 0;
            }
            BYTE8(v940) = v117;
          }
          else
          {
            LOBYTE(v929.m_identifier) = 0;
            BYTE8(v940) = 0;
          }
          if (v957 && BYTE8(v956) && v956 != -1) {
            ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9B7B38[v956])(v903, v955);
          }
        }
        else
        {
          LOBYTE(v929.m_identifier) = 0;
          BYTE8(v940) = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v905);
        if (BYTE8(v940))
        {
LABEL_809:
          WebKit::NetworkProcess::downloadRequest((uint64_t)this, v929.m_identifier, (uint64_t)cf, (CFTypeRef *)v931, (WebCore::SecurityOriginData *)&v936, SWORD4(v939), (WTF::StringImpl **)&v940);
          if (BYTE8(v940))
          {
            v663 = (WTF::StringImpl *)v940;
            *(void *)&long long v940 = 0;
            if (v663)
            {
              if (*(_DWORD *)v663 == 2) {
                WTF::StringImpl::destroy(v663, (WTF::StringImpl *)a2);
              }
              else {
                *(_DWORD *)v663 -= 2;
              }
            }
            if ((_BYTE)v939)
            {
              if (v938 != -1) {
                ((void (*)(unsigned char *, long long *))off_1EE9B7B38[v938])(v905, &v936);
              }
              int v938 = -1;
            }
            uint64_t v664 = (const void *)*((void *)&v935 + 1);
            *((void *)&v935 + 1) = 0;
            if (v664) {
              CFRelease(v664);
            }
LABEL_702:
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v931);
          }
          goto LABEL_921;
        }
      }
      else
      {
        LOBYTE(v929.m_identifier) = 0;
        BYTE8(v940) = 0;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v816 = v10[3];
      if (!v816) {
        goto LABEL_921;
      }
      if (!a3) {
        goto LABEL_921;
      }
      (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v816 + 16))(v816, a2);
      if (!BYTE8(v940)) {
        goto LABEL_921;
      }
      goto LABEL_809;
    case 0x18E:
      uint64_t v562 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v563 = v562;
      unint64_t v564 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v564;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      unsigned __int16 v565 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v565->unint64_t m_identifier = (unint64_t)&unk_1EE9B8698;
      v565[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v566 = cf;
      CFTypeRef cf = 0;
      v565[2].unint64_t m_identifier = (unint64_t)v566;
      *(void *)v905 = v565;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::dumpPrivateClickMeasurement((uint64_t)this, v563, (uint64_t *)v905);
      uint64_t v79 = *(void *)v905;
      *(void *)v905 = 0;
      if (!v79) {
        goto LABEL_921;
      }
      goto LABEL_1028;
    case 0x18F:
      uint64_t v576 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v577 = v576;
        unint64_t v578 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v578;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          v579 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v579->unint64_t m_identifier = (unint64_t)&unk_1EE9B7CE8;
          v579[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v580 = cf;
          CFTypeRef cf = 0;
          v579[2].unint64_t m_identifier = (unint64_t)v580;
          *(void *)v905 = v579;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::dumpResourceLoadStatistics((uint64_t)this, v577, (uint64_t *)v905);
          uint64_t v79 = *(void *)v905;
          *(void *)v905 = 0;
          if (v79) {
            goto LABEL_1028;
          }
        }
      }
      goto LABEL_921;
    case 0x190:
      uint64_t v598 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v599
        || (uint64_t v600 = v598,
            uint64_t v601 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v10),
            (v601 & 0xFF00000000) == 0)
        || (int v602 = v601, v603 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataFetchOption>>(v10), v603 <= 0xFFu))
      {
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (!v261) {
          goto LABEL_921;
        }
        goto LABEL_914;
      }
      char v651 = v603;
      unint64_t v652 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v652;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      v653 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v653->unint64_t m_identifier = (unint64_t)&unk_1EE9B7AF8;
      v653[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v654 = cf;
      CFTypeRef cf = 0;
      v653[2].unint64_t m_identifier = (unint64_t)v654;
      *(void *)v905 = v653;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::fetchWebsiteData((uint64_t)this, v600, v602, v651, (uint64_t *)v905);
      uint64_t v79 = *(void *)v905;
      *(void *)v905 = 0;
      if (!v79) {
        goto LABEL_921;
      }
      goto LABEL_1028;
    case 0x191:
      uint64_t v340 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v341 = v340;
      unint64_t v342 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v342;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      v343 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v343->unint64_t m_identifier = (unint64_t)&unk_1EE9B7C48;
      v343[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v344 = cf;
      CFTypeRef cf = 0;
      v343[2].unint64_t m_identifier = (unint64_t)v344;
      *(void *)v905 = v343;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::flushCookies(this, v341, v905);
LABEL_332:
      uint64_t v79 = *(void *)v905;
      *(void *)v905 = 0;
      if (v79) {
        goto LABEL_1028;
      }
      goto LABEL_921;
    case 0x193:
      uint64_t v593 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v594 = v593;
        unint64_t v595 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v595;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          uint64_t v596 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v596->unint64_t m_identifier = (unint64_t)&unk_1EE9B7F18;
          v596[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v597 = cf;
          CFTypeRef cf = 0;
          v596[2].unint64_t m_identifier = (unint64_t)v597;
          *(void *)v905 = v596;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::getAllStorageAccessEntries((uint64_t)this, v594, (uint64_t *)v905);
          uint64_t v79 = *(void *)v905;
          *(void *)v905 = 0;
          if (v79) {
            goto LABEL_1028;
          }
        }
      }
      goto LABEL_921;
    case 0x198:
      uint64_t v74 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v75 = v74;
        unint64_t v76 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v76;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          uint64_t v77 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v77->unint64_t m_identifier = (unint64_t)&unk_1EE9B8120;
          v77[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v78 = cf;
          CFTypeRef cf = 0;
          v77[2].unint64_t m_identifier = (unint64_t)v78;
          *(void *)v905 = v77;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::getResourceLoadStatisticsDataSummary((uint64_t)this, v75, (uint64_t *)v905);
          uint64_t v79 = *(void *)v905;
          *(void *)v905 = 0;
          if (v79) {
            goto LABEL_1028;
          }
        }
      }
      goto LABEL_921;
    case 0x199:
      uint64_t v567 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v568) {
        goto LABEL_894;
      }
      unint64_t v569 = v567;
      IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v10, v568, (uint64_t)v905);
      if (!v905[16]) {
        goto LABEL_894;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v955);
      if (!v955[8])
      {
        if (v905[16]) {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v905, (void *)a2);
        }
        goto LABEL_894;
      }
      if (!v905[16]) {
        goto LABEL_1091;
      }
      v929.unint64_t m_identifier = v569;
      CFTypeRef cf = *(CFTypeRef *)v905;
      v570 = *(WTF::StringImpl **)&v905[8];
      *(void *)v905 = 0;
      *(void *)&v905[8] = 0;
      v931[0] = v570;
      v571 = *(WTF::StringImpl **)v955;
      v931[1] = *(WTF::StringImpl **)v955;
      v932[0] = 1;
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v905, (void *)a2);
      uint64_t v572 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_625;
      }
      *(void *)v905 = v572;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v573 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v573 = &unk_1EE9B8440;
      v573[1] = *(void *)v905;
      uint64_t v574 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v573[2] = v574;
      *(void *)uint64_t v955 = v573;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!v932[0]) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::grantStorageAccessForTesting((uint64_t)this, v929.m_identifier, (uint64_t *)&cf, &v931[1], (uint64_t *)v955);
      uint64_t v575 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v575) {
        (*(void (**)(uint64_t))(*(void *)v575 + 8))(v575);
      }
      if (v932[0])
      {
        v571 = v931[1];
LABEL_625:
        v931[1] = 0;
        if (v571)
        {
          if (*(_DWORD *)v571 == 2) {
            WTF::StringImpl::destroy(v571, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v571 -= 2;
          }
        }
LABEL_898:
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, (void *)a2);
      }
      goto LABEL_921;
    case 0x19A:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v351 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v351;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      unint64_t v352 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v352 = &unk_1EE9B7EA0;
      v352[1] = *(void *)v905;
      uint64_t v353 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v352[2] = v353;
      *(void *)uint64_t v955 = v352;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::hadUserInteraction((uint64_t)this, v929.m_identifier, (WTF::ASCIICaseInsensitiveHash **)&cf, (uint64_t *)v955);
      goto LABEL_579;
    case 0x19B:
      uint64_t v91 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2)
      {
        uint64_t v92 = v91;
        unint64_t v93 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          v929.unint64_t m_identifier = v93;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
          unint64_t v94 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
          v94->unint64_t m_identifier = (unint64_t)&unk_1EE9B8940;
          v94[1].unint64_t m_identifier = v929.m_identifier;
          CFTypeRef v95 = cf;
          CFTypeRef cf = 0;
          v94[2].unint64_t m_identifier = (unint64_t)v95;
          *(void *)v905 = v94;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
          WebKit::NetworkProcess::hasAppBoundSession((uint64_t)this, v92, (uint64_t *)v905);
          uint64_t v79 = *(void *)v905;
          *(void *)v905 = 0;
          if (v79) {
            goto LABEL_1028;
          }
        }
      }
      goto LABEL_921;
    case 0x19C:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v336 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_890;
      }
      *(void *)v905 = v336;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v337 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v337 = &unk_1EE9B8490;
      v337[1] = *(void *)v905;
      uint64_t v338 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v337[2] = v338;
      *(void *)uint64_t v955 = v337;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::hasIsolatedSession((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
      uint64_t v339 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v339) {
        goto LABEL_401;
      }
      goto LABEL_402;
    case 0x19D:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v50 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v50;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      char v51 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v51 = &unk_1EE9B7EF0;
      v51[1] = *(void *)v905;
      uint64_t v52 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v51[2] = v52;
      *(void *)uint64_t v955 = v51;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::hasLocalStorage((uint64_t)this, v929.m_identifier, (WTF::StringImpl **)&cf, (uint64_t *)v955);
      goto LABEL_579;
    case 0x19F:
      IPC::handleMessageAsync<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      goto LABEL_921;
    case 0x1A0:
      uint64_t v581 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v582
        || (unint64_t v583 = v581, IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v905), !v905[8]))
      {
        int v592 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[0] = 0;
LABEL_678:
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v606 = v10[3];
        if (v606 && a3) {
          (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v606 + 16))(v606, a2);
        }
        goto LABEL_679;
      }
      a3 = (IPC::Decoder *)v10[1];
      a2 = (atomic_uchar *volatile *)*v10;
      unint64_t v584 = ((v10[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v10;
      if ((unint64_t)a3 < v584 || (unint64_t)a3 - v584 <= 7)
      {
        unsigned int v832 = 0;
        v833 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v847 = v10[3];
        if (!v847) {
          goto LABEL_1204;
        }
        if (!a3)
        {
LABEL_1349:
          unsigned int v832 = 0;
          v833 = 0;
          goto LABEL_1204;
        }
LABEL_1301:
        (*(void (**)(uint64_t))(*(void *)v847 + 16))(v847);
        v833 = (atomic_uchar *volatile *)*v10;
        unsigned int v832 = (IPC::Decoder *)v10[1];
        goto LABEL_1204;
      }
      long long v586 = (char *)a2 + v584;
      v10[2] = (uint64_t)(v586 + 8);
      if (!a2) {
        goto LABEL_1331;
      }
      if ((unint64_t)a3 <= v586 + 8 - (char *)a2)
      {
        unsigned int v832 = 0;
        v833 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v834 = v10[3];
        if (!v834) {
          goto LABEL_1204;
        }
        if (!a3) {
          goto LABEL_1349;
        }
LABEL_1299:
        (*(void (**)(uint64_t))(*(void *)v834 + 16))(v834);
        unsigned int v832 = 0;
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        uint64_t v847 = v10[3];
        *uint64_t v10 = 0;
        v10[1] = 0;
        v833 = 0;
        if (v847 && a3) {
          goto LABEL_1301;
        }
LABEL_1204:
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v848 = v10[3];
        if (v848 && v832) {
          (*(void (**)(uint64_t, atomic_uchar *volatile *, IPC::Decoder *))(*(void *)v848 + 16))(v848, v833, v832);
        }
        int v592 = 0;
        LOBYTE(v929.m_identifier) = 0;
        int v590 = 1;
LABEL_648:
        v932[0] = v592;
        if (v905[8])
        {
          v806 = *(WTF::StringImpl **)v905;
          *(void *)v905 = 0;
          if (v806)
          {
            if (*(_DWORD *)v806 == 2) {
              WTF::StringImpl::destroy(v806, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v806 -= 2;
            }
          }
        }
        if (v590) {
          goto LABEL_678;
        }
LABEL_679:
        if (!v592) {
          goto LABEL_921;
        }
        uint64_t v607 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          *(void *)v905 = v607;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
          unint64_t v608 = (void *)WTF::fastMalloc((WTF *)0x18);
          *unint64_t v608 = &unk_1EE9B7E00;
          v608[1] = *(void *)v905;
          uint64_t v609 = *(void *)&v905[8];
          *(void *)&v905[8] = 0;
          v608[2] = v609;
          *(void *)uint64_t v955 = v608;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
          WebKit::NetworkProcess::insertExpiredStatisticForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (int)v3, v14 != 0, v4, v5, (uint64_t *)v955);
          uint64_t v610 = *(void *)v955;
          *(void *)uint64_t v955 = 0;
          if (v610) {
            (*(void (**)(uint64_t))(*(void *)v610 + 8))(v610);
          }
          if (!v932[0]) {
            goto LABEL_921;
          }
        }
        goto LABEL_582;
      }
      double v3 = *(WTF::StringImpl **)v586;
      v10[2] = (uint64_t)(v586 + 9);
      unsigned int v587 = v586[8];
      if (v587 >= 2) {
        goto LABEL_1331;
      }
      LOBYTE(v14) = v587 != 0;
      if ((unint64_t)a3 > v586 + 9 - (char *)a2)
      {
        v10[2] = (uint64_t)(v586 + 10);
        unsigned int v588 = v586[9];
        if (v588 >= 2)
        {
LABEL_1331:
          unsigned int v832 = a3;
          v833 = a2;
          goto LABEL_1204;
        }
        BOOL v4 = v588 != 0;
        if ((unint64_t)a3 > v586 + 10 - (char *)a2)
        {
          v10[2] = (uint64_t)(v586 + 11);
          unsigned int v589 = v586[10];
          if (v589 < 2)
          {
            int v590 = 0;
            v591 = *(const void **)v905;
            BOOL v5 = v589 != 0;
            *(void *)v905 = 0;
            v929.unint64_t m_identifier = v583;
            CFTypeRef cf = v591;
            v931[0] = v3;
            LOBYTE(v931[1]) = (_BYTE)v14;
            BYTE1(v931[1]) = v588 != 0;
            BYTE2(v931[1]) = v589 != 0;
            int v592 = 1;
            goto LABEL_648;
          }
          goto LABEL_1331;
        }
      }
      unsigned int v832 = 0;
      v833 = 0;
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v834 = v10[3];
      if (!v834) {
        goto LABEL_1204;
      }
      goto LABEL_1299;
    case 0x1A1:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v104 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v104;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v105 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v105 = &unk_1EE9B7D38;
      v105[1] = *(void *)v905;
      uint64_t v106 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v105[2] = v106;
      *(void *)uint64_t v955 = v105;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::isGrandfathered((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
      goto LABEL_579;
    case 0x1A2:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v536 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v536;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      unint64_t v537 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v537 = &unk_1EE9B7D60;
      v537[1] = *(void *)v905;
      uint64_t v538 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v537[2] = v538;
      *(void *)uint64_t v955 = v537;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::isPrevalentResource((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
      goto LABEL_579;
    case 0x1A3:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v447 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v447;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v448 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v448 = &unk_1EE9B7F40;
      v448[1] = *(void *)v905;
      uint64_t v449 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v448[2] = v449;
      *(void *)uint64_t v955 = v448;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::isRegisteredAsRedirectingTo((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
      goto LABEL_471;
    case 0x1A4:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v440 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v440;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v441 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v441 = &unk_1EE9B7F68;
      v441[1] = *(void *)v905;
      uint64_t v442 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v441[2] = v442;
      *(void *)uint64_t v955 = v441;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::isRegisteredAsSubFrameUnder((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
      goto LABEL_471;
    case 0x1A5:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v33 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v33;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      __int16 v34 = (void *)WTF::fastMalloc((WTF *)0x18);
      *__int16 v34 = &unk_1EE9B7F90;
      v34[1] = *(void *)v905;
      uint64_t v35 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      void v34[2] = v35;
      *(void *)uint64_t v955 = v34;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::isRegisteredAsSubresourceUnder((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
      goto LABEL_471;
    case 0x1A6:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v47 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v47;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      unint64_t v48 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v48 = &unk_1EE9B7EC8;
      v48[1] = *(void *)v905;
      uint64_t v49 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v48[2] = v49;
      *(void *)uint64_t v955 = v48;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::isRelationshipOnlyInDatabaseOnce((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
LABEL_471:
      uint64_t v450 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v450) {
        goto LABEL_506;
      }
      goto LABEL_507;
    case 0x1A7:
      uint64_t v240 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v241 = v240;
      unint64_t v242 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v242;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      char v243 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v243->unint64_t m_identifier = (unint64_t)&unk_1EE9B7E78;
      v243[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v244 = cf;
      CFTypeRef cf = 0;
      v243[2].unint64_t m_identifier = (unint64_t)v244;
      *(void *)v905 = v243;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::isResourceLoadStatisticsEphemeral((uint64_t)this, v241, (uint64_t *)v905);
      goto LABEL_601;
    case 0x1A8:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v254 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v254;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v255 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v255 = &unk_1EE9B7D88;
      v255[1] = *(void *)v905;
      uint64_t v256 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v255[2] = v256;
      *(void *)uint64_t v955 = v255;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::isVeryPrevalentResource((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
LABEL_579:
      uint64_t v517 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v517) {
        goto LABEL_580;
      }
      goto LABEL_581;
    case 0x1A9:
      uint64_t v157 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v158) {
        goto LABEL_789;
      }
      unint64_t v11 = (atomic_uchar *volatile *)v157;
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v903);
      if (!LOBYTE(v903[1])) {
        goto LABEL_789;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v955);
      if (!v955[8])
      {
        int v171 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[24] = 0;
        goto LABEL_158;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v905);
      if (!v905[8])
      {
        int v171 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[24] = 0;
        goto LABEL_157;
      }
      unint64_t v159 = v10[1];
      a2 = (atomic_uchar *volatile *)*v10;
      unint64_t v160 = v10[2] - *v10;
      if (v159 <= v160) {
        goto LABEL_1138;
      }
      uint64_t v161 = (unsigned __int8 *)a2 + v160;
      v10[2] = (uint64_t)(v161 + 1);
      if (!a2) {
        goto LABEL_1330;
      }
      unsigned int v162 = *v161;
      if (v162 >= 2) {
        goto LABEL_1140;
      }
      LOBYTE(v3) = v162 != 0;
      if (v159 <= v161 + 1 - (unsigned __int8 *)a2)
      {
        unint64_t v828 = 0;
        unsigned __int16 v829 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v830 = v10[3];
        if (v830)
        {
          (*(void (**)(uint64_t))(*(void *)v830 + 16))(v830);
          unint64_t v828 = 0;
          a2 = (atomic_uchar *volatile *)*v10;
          uint64_t v887 = v10[1];
          uint64_t v888 = v10[3];
          *uint64_t v10 = 0;
          v10[1] = 0;
          unsigned __int16 v829 = 0;
          if (v888)
          {
            if (v887)
            {
              (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v888 + 16))(v888, a2);
              unsigned __int16 v829 = (atomic_uchar *volatile *)*v10;
              unint64_t v828 = v10[1];
            }
          }
        }
      }
      else
      {
        v10[2] = (uint64_t)(v161 + 2);
        unsigned int v163 = v161[1];
        if (v163 < 2)
        {
          LOBYTE(v15) = v163 != 0;
          *(double *)&uint64_t v164 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::Seconds>(v10));
          if (!(_BYTE)a2)
          {
LABEL_1183:
            int v171 = 0;
            LOBYTE(v929.m_identifier) = 0;
            goto LABEL_156;
          }
          unint64_t v159 = v10[1];
          a2 = (atomic_uchar *volatile *)*v10;
          unint64_t v165 = v10[2] - *v10;
          if (v159 <= v165)
          {
LABEL_1138:
            unint64_t v818 = 0;
            char v819 = 0;
            *uint64_t v10 = 0;
            v10[1] = 0;
            uint64_t v820 = v10[3];
            if (v820)
            {
              if (v159)
              {
                (*(void (**)(uint64_t))(*(void *)v820 + 16))(v820);
                char v819 = (atomic_uchar *volatile *)*v10;
                unint64_t v818 = v10[1];
              }
              else
              {
                unint64_t v818 = 0;
                char v819 = 0;
              }
            }
          }
          else
          {
            int v166 = (unsigned __int8 *)a2 + v165;
            v10[2] = (uint64_t)(v166 + 1);
            if (a2)
            {
              unsigned int v167 = *v166;
              if (v167 < 2)
              {
                LOBYTE(v14) = v167 != 0;
                if (!LOBYTE(v903[1]) || !v955[8] || !v905[8]) {
                  goto LABEL_1091;
                }
                int v168 = v903[0];
                v903[0] = 0;
                v929.unint64_t m_identifier = (unint64_t)v11;
                CFTypeRef cf = v168;
                uint64_t v169 = *(WTF::StringImpl **)v955;
                *(void *)uint64_t v955 = 0;
                v170 = *(WTF::StringImpl **)v905;
                *(void *)v905 = 0;
                v931[0] = v169;
                v931[1] = v170;
                v932[0] = (_BYTE)v3;
                v932[1] = (_BYTE)v15;
                *(void *)&v932[8] = v164;
                double v8 = *(double *)&v164;
                int v171 = 1;
                v932[16] = (_BYTE)v14;
LABEL_156:
                v932[24] = v171;
                if (v905[8])
                {
                  v792 = *(WTF::StringImpl **)v905;
                  *(void *)v905 = 0;
                  if (v792)
                  {
                    if (*(_DWORD *)v792 == 2) {
                      WTF::StringImpl::destroy(v792, (WTF::StringImpl *)a2);
                    }
                    else {
                      *(_DWORD *)v792 -= 2;
                    }
                  }
                }
LABEL_157:
                if (v955[8])
                {
                  v790 = *(WTF::StringImpl **)v955;
                  *(void *)uint64_t v955 = 0;
                  if (v790)
                  {
                    if (*(_DWORD *)v790 == 2) {
                      WTF::StringImpl::destroy(v790, (WTF::StringImpl *)a2);
                    }
                    else {
                      *(_DWORD *)v790 -= 2;
                    }
                  }
                }
LABEL_158:
                if (LOBYTE(v903[1]))
                {
                  int v789 = v903[0];
                  v903[0] = 0;
                  if (v789)
                  {
                    if (*(_DWORD *)v789 == 2) {
                      WTF::StringImpl::destroy(v789, (WTF::StringImpl *)a2);
                    }
                    else {
                      *(_DWORD *)v789 -= 2;
                    }
                  }
                }
                if (v171)
                {
                  WebKit::NetworkProcess::logFrameNavigation((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t)&v931[1], v3 != 0, v15 != 0, v14 != 0, v8);
                  if (v932[24]) {
                    goto LABEL_1239;
                  }
                  goto LABEL_921;
                }
                goto LABEL_789;
              }
              goto LABEL_1140;
            }
LABEL_1330:
            unint64_t v818 = v159;
            char v819 = a2;
          }
          unint64_t v159 = 0;
          a2 = 0;
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v821 = v10[3];
          if (v821)
          {
            if (v818)
            {
              (*(void (**)(uint64_t, atomic_uchar *volatile *, unint64_t))(*(void *)v821 + 16))(v821, v819, v818);
              a2 = (atomic_uchar *volatile *)*v10;
              unint64_t v159 = v10[1];
            }
            else
            {
              unint64_t v159 = 0;
              a2 = 0;
            }
          }
LABEL_1140:
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v822 = v10[3];
          if (v822 && v159) {
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v822 + 16))(v822, a2);
          }
          goto LABEL_1183;
        }
        unint64_t v828 = v159;
        unsigned __int16 v829 = a2;
      }
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v831 = v10[3];
      if (v831 && v828) {
        (*(void (**)(uint64_t, atomic_uchar *volatile *, unint64_t))(*(void *)v831 + 16))(v831, v829, v828);
      }
      goto LABEL_1183;
    case 0x1AA:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v66 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v66;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v67 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v67 = &unk_1EE9B7FE0;
      v67[1] = *(void *)v905;
      uint64_t v68 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      IntSize v67[2] = v68;
      *(void *)uint64_t v955 = v67;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::logUserInteraction((uint64_t)this, v929.m_identifier, (WTF::StringImpl **)&cf, (uint64_t *)v955);
      goto LABEL_536;
    case 0x1AB:
      uint64_t v557 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v558 = v557;
      unint64_t v559 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v559;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      char v560 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v560->unint64_t m_identifier = (unint64_t)&unk_1EE9B8710;
      v560[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v561 = cf;
      CFTypeRef cf = 0;
      v560[2].unint64_t m_identifier = (unint64_t)v561;
      *(void *)v905 = v560;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::markAttributedPrivateClickMeasurementsAsExpiredForTesting((uint64_t)this, v558, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1AC:
      uint64_t v86 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v87 = v86;
      unint64_t v88 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v88;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      unsigned __int16 v89 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v89->unint64_t m_identifier = (unint64_t)&unk_1EE9B8800;
      v89[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v90 = cf;
      CFTypeRef cf = 0;
      v89[2].unint64_t m_identifier = (unint64_t)v90;
      *(void *)v905 = v89;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::markPrivateClickMeasurementsAsExpiredForTesting((uint64_t)this, v87, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1AD:
      uint64_t v357 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v358) {
        goto LABEL_789;
      }
      unint64_t v359 = v357;
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v903);
      if (!LOBYTE(v903[1])) {
        goto LABEL_789;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v955);
      if (!v955[8])
      {
        int v378 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[40] = 0;
        goto LABEL_1233;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v905);
      if (!v905[8])
      {
        int v378 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[40] = 0;
        goto LABEL_1232;
      }
      uint64_t v360 = IPC::Decoder::decode<WTF::Seconds>(v10);
      if (!(_BYTE)a2) {
        goto LABEL_1230;
      }
      unint64_t v361 = v10[1];
      a2 = (atomic_uchar *volatile *)*v10;
      unint64_t v362 = v10[2] - *v10;
      if (v361 <= v362) {
        goto LABEL_1215;
      }
      unint64_t v363 = (unsigned __int8 *)a2 + v362;
      v10[2] = (uint64_t)(v363 + 1);
      if (!a2) {
        goto LABEL_1336;
      }
      unsigned int v364 = *v363;
      if (v364 >= 2) {
        goto LABEL_1217;
      }
      double v365 = *(double *)&v360;
      LOBYTE(v14) = v364 != 0;
      *(double *)&uint64_t v366 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::Seconds>(v10));
      if (!(_BYTE)a2) {
        goto LABEL_1230;
      }
      unint64_t v361 = v10[1];
      a2 = (atomic_uchar *volatile *)*v10;
      unint64_t v367 = v10[2] - *v10;
      if (v361 <= v367)
      {
LABEL_1215:
        unint64_t v854 = 0;
        int v855 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v856 = v10[3];
        if (v856)
        {
          if (v361)
          {
            (*(void (**)(uint64_t))(*(void *)v856 + 16))(v856);
            int v855 = (atomic_uchar *volatile *)*v10;
            unint64_t v854 = v10[1];
          }
          else
          {
            unint64_t v854 = 0;
            int v855 = 0;
          }
        }
      }
      else
      {
        v368 = (unsigned __int8 *)a2 + v367;
        v10[2] = (uint64_t)(v368 + 1);
        if (a2)
        {
          unsigned int v369 = *v368;
          if (v369 < 2)
          {
            BOOL v4 = v369 != 0;
            if (v361 > v368 + 1 - (unsigned __int8 *)a2)
            {
              v10[2] = (uint64_t)(v368 + 2);
              unsigned int v370 = v368[1];
              if (v370 >= 2)
              {
LABEL_1344:
                unint64_t v864 = v361;
                long long v865 = a2;
LABEL_1224:
                *uint64_t v10 = 0;
                v10[1] = 0;
                uint64_t v867 = v10[3];
                if (v867 && v864) {
                  (*(void (**)(uint64_t, atomic_uchar *volatile *, unint64_t))(*(void *)v867 + 16))(v867, v865, v864);
                }
                goto LABEL_1230;
              }
              BOOL v5 = v370 != 0;
              if (v361 > v368 + 2 - (unsigned __int8 *)a2)
              {
                unint64_t v371 = v368 + 3;
                v10[2] = (uint64_t)(v368 + 3);
                unsigned int v372 = v368[2];
                if (v372 < 2)
                {
                  BOOL v7 = v372 != 0;
                  unint64_t v373 = ((unint64_t)(v371 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)a2;
                  if (v361 >= v373 && v361 - v373 > 7)
                  {
                    uint64_t v374 = (uint64_t *)((unint64_t)(v371 + 7) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v6 = *v374;
                    v10[2] = (uint64_t)(v374 + 1);
                    if (!LOBYTE(v903[1]) || !v955[8] || !v905[8]) {
                      goto LABEL_1091;
                    }
                    unsigned __int16 v375 = v903[0];
                    v903[0] = 0;
                    v929.unint64_t m_identifier = v359;
                    CFTypeRef cf = v375;
                    int v376 = *(WTF::StringImpl **)v955;
                    *(void *)uint64_t v955 = 0;
                    BOOL v377 = *(WTF::StringImpl **)v905;
                    *(void *)v905 = 0;
                    v931[0] = v376;
                    v931[1] = v377;
                    *(double *)uint64_t v932 = v365;
                    v932[8] = (_BYTE)v14;
                    *(void *)&v932[16] = v366;
                    v932[24] = v4;
                    v932[25] = v370 != 0;
                    v932[26] = v7;
                    double v9 = v365;
                    double v8 = *(double *)&v366;
                    int v378 = 1;
                    *(void *)&v932[32] = v6;
LABEL_1231:
                    v932[40] = v378;
                    if (v905[8])
                    {
                      uint64_t v877 = *(WTF::StringImpl **)v905;
                      *(void *)v905 = 0;
                      if (v877)
                      {
                        if (*(_DWORD *)v877 == 2) {
                          WTF::StringImpl::destroy(v877, (WTF::StringImpl *)a2);
                        }
                        else {
                          *(_DWORD *)v877 -= 2;
                        }
                      }
                    }
LABEL_1232:
                    if (v955[8])
                    {
                      unint64_t v876 = *(WTF::StringImpl **)v955;
                      *(void *)uint64_t v955 = 0;
                      if (v876)
                      {
                        if (*(_DWORD *)v876 == 2) {
                          WTF::StringImpl::destroy(v876, (WTF::StringImpl *)a2);
                        }
                        else {
                          *(_DWORD *)v876 -= 2;
                        }
                      }
                    }
LABEL_1233:
                    if (LOBYTE(v903[1]))
                    {
                      uint64_t v875 = v903[0];
                      v903[0] = 0;
                      if (v875)
                      {
                        if (*(_DWORD *)v875 == 2) {
                          WTF::StringImpl::destroy(v875, (WTF::StringImpl *)a2);
                        }
                        else {
                          *(_DWORD *)v875 -= 2;
                        }
                      }
                    }
                    if (v378)
                    {
                      uint64_t v869 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
                      if ((_BYTE)a2)
                      {
                        *(void *)v905 = v869;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
                        v870 = (void *)WTF::fastMalloc((WTF *)0x18);
                        void *v870 = &unk_1EE9B7DD8;
                        v870[1] = *(void *)v905;
                        uint64_t v871 = *(void *)&v905[8];
                        *(void *)&v905[8] = 0;
                        v870[2] = v871;
                        *(void *)uint64_t v955 = v870;
                        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
                        WebKit::NetworkProcess::mergeStatisticForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t)&v931[1], v14 != 0, v4, v5, v9, v8, v7, v899, v6, (uint64_t *)v955);
                        uint64_t v872 = *(void *)v955;
                        *(void *)uint64_t v955 = 0;
                        if (v872) {
                          (*(void (**)(uint64_t))(*(void *)v872 + 8))(v872);
                        }
                        if (!v932[40]) {
                          goto LABEL_921;
                        }
                      }
LABEL_1239:
                      unsigned int v873 = v931[1];
                      v931[1] = 0;
                      if (v873)
                      {
                        if (*(_DWORD *)v873 == 2) {
                          WTF::StringImpl::destroy(v873, (WTF::StringImpl *)a2);
                        }
                        else {
                          *(_DWORD *)v873 -= 2;
                        }
                      }
                      BOOL v874 = v931[0];
                      v931[0] = 0;
                      if (v874)
                      {
                        if (*(_DWORD *)v874 == 2) {
                          WTF::StringImpl::destroy(v874, (WTF::StringImpl *)a2);
                        }
                        else {
                          *(_DWORD *)v874 -= 2;
                        }
                      }
LABEL_582:
                      char v463 = (WTF::StringImpl *)cf;
                      CFTypeRef cf = 0;
                      if (!v463) {
                        goto LABEL_921;
                      }
LABEL_891:
                      if (*(_DWORD *)v463 == 2) {
LABEL_920:
                      }
                        WTF::StringImpl::destroy(v463, (WTF::StringImpl *)a2);
                      else {
                        *(_DWORD *)v463 -= 2;
                      }
                      goto LABEL_921;
                    }
LABEL_789:
                    a2 = (atomic_uchar *volatile *)*v10;
                    a3 = (IPC::Decoder *)v10[1];
                    *uint64_t v10 = 0;
                    v10[1] = 0;
                    uint64_t v261 = v10[3];
                    if (!v261 || !a3) {
                      goto LABEL_921;
                    }
                    goto LABEL_896;
                  }
                  *uint64_t v10 = 0;
                  v10[1] = 0;
                  uint64_t v868 = v10[3];
                  if (v868)
                  {
                    (*(void (**)(uint64_t))(*(void *)v868 + 16))(v868);
                    a2 = (atomic_uchar *volatile *)*v10;
                    unint64_t v361 = v10[1];
                    uint64_t v858 = v10[3];
                    *uint64_t v10 = 0;
                    v10[1] = 0;
                    if (v858) {
                      goto LABEL_1322;
                    }
                  }
                  goto LABEL_1230;
                }
                goto LABEL_1344;
              }
            }
            unint64_t v864 = 0;
            long long v865 = 0;
            *uint64_t v10 = 0;
            v10[1] = 0;
            uint64_t v866 = v10[3];
            if (v866)
            {
              (*(void (**)(uint64_t))(*(void *)v866 + 16))(v866);
              unint64_t v864 = 0;
              a2 = (atomic_uchar *volatile *)*v10;
              uint64_t v894 = v10[1];
              uint64_t v895 = v10[3];
              *uint64_t v10 = 0;
              v10[1] = 0;
              long long v865 = 0;
              if (v895)
              {
                if (v894)
                {
                  (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v895 + 16))(v895, a2);
                  long long v865 = (atomic_uchar *volatile *)*v10;
                  unint64_t v864 = v10[1];
                }
              }
            }
            goto LABEL_1224;
          }
LABEL_1217:
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v858 = v10[3];
          if (v858)
          {
LABEL_1322:
            if (v361) {
              (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v858 + 16))(v858, a2);
            }
          }
LABEL_1230:
          int v378 = 0;
          LOBYTE(v929.m_identifier) = 0;
          goto LABEL_1231;
        }
LABEL_1336:
        unint64_t v854 = v361;
        int v855 = a2;
      }
      unint64_t v361 = 0;
      a2 = 0;
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v857 = v10[3];
      if (v857)
      {
        if (v854)
        {
          (*(void (**)(uint64_t, atomic_uchar *volatile *, unint64_t))(*(void *)v857 + 16))(v857, v855, v854);
          a2 = (atomic_uchar *volatile *)*v10;
          unint64_t v361 = v10[1];
        }
        else
        {
          unint64_t v361 = 0;
          a2 = 0;
        }
      }
      goto LABEL_1217;
    case 0x1AE:
      unsigned __int16 v195 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v195 > 0xFFu)
      {
        WebKit::NetworkProcess::notifyMediaStreamingActivity((WebKit::NetworkProcess *)this, v195 != 0);
        goto LABEL_921;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v261 = v10[3];
      if (v261) {
        goto LABEL_914;
      }
      goto LABEL_921;
    case 0x1B0:
      IPC::handleMessage<Messages::NetworkProcess::PreconnectTo,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)>(a3, (uint64_t)this);
      goto LABEL_921;
    case 0x1B1:
      IPC::Decoder::decode<std::tuple<BOOL,WTF::MonotonicTime>>((uint64_t *)a3, (uint64_t)&v929);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v533 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v533;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v534 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v534 = &unk_1EE9B7C70;
      v534[1] = *(void *)v905;
      uint64_t v535 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v534[2] = v535;
      *(void *)uint64_t v955 = v534;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[0])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::prepareToSuspend((uint64_t)this, LOBYTE(v929.m_identifier), (uint64_t *)v955, *(double *)&cf);
      goto LABEL_574;
    case 0x1B2:
      unsigned __int16 v528 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v528 > 0xFFu)
      {
        WebKit::NetworkProcess::processDidResume((WebKit::NetworkProcess *)this, v528 != 0);
        goto LABEL_921;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v261 = v10[3];
      if (v261) {
        goto LABEL_914;
      }
      goto LABEL_921;
    case 0x1B5:
      uint64_t v172 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v173) {
        goto LABEL_913;
      }
      unint64_t v11 = (atomic_uchar *volatile *)v172;
      IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v10, v905);
      if (!v906[16]) {
        goto LABEL_913;
      }
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v10, (uint64_t)v903);
      if (v904 && (unsigned __int16 v174 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(v10), v174 > 0xFFu))
      {
        int v175 = v174;
        IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v10, (uint64_t)v955);
        if (v955[16])
        {
          if (!v906[16] || !v904) {
            goto LABEL_1091;
          }
          uint64_t v655 = *(const void **)v905;
          *(void *)v905 = 0;
          v929.unint64_t m_identifier = (unint64_t)v11;
          CFTypeRef cf = v655;
          *(_OWORD *)v931 = *(_OWORD *)&v905[8];
          *(_OWORD *)uint64_t v932 = *(_OWORD *)v906;
          *(_DWORD *)&v905[8] &= ~1u;
          *(_OWORD *)&v932[16] = *(_OWORD *)v903;
          v932[32] = v175;
          *(_OWORD *)&v932[40] = *(_OWORD *)v955;
          int v176 = 1;
        }
        else
        {
          int v176 = 0;
          LOBYTE(v929.m_identifier) = 0;
        }
        v932[56] = v176;
      }
      else
      {
        int v175 = 0;
        int v176 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[56] = 0;
      }
      if (v906[16])
      {
        uint64_t v684 = *(WTF::StringImpl **)v905;
        *(void *)v905 = 0;
        if (v684)
        {
          if (*(_DWORD *)v684 == 2) {
            WTF::StringImpl::destroy(v684, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v684 -= 2;
          }
        }
      }
      if (!v176) {
        goto LABEL_913;
      }
      WebKit::NetworkProcess::publishDownloadProgress((uint64_t)this, v929.m_identifier, (uint64_t)&cf, *(uint64_t *)&v932[16], *(WTF **)&v932[24], v175 != 0, *(uint64_t *)&v932[40], *(WTF **)&v932[48]);
      if (v932[56])
      {
        char v463 = (WTF::StringImpl *)cf;
        CFTypeRef cf = 0;
        if (v463) {
          goto LABEL_911;
        }
      }
      goto LABEL_921;
    case 0x1B6:
      IPC::handleMessage<Messages::NetworkProcess::RegisterURLSchemeAsBypassingContentSecurityPolicy,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::String const&)const>(a3, (WebKit::NetworkProcess *)this);
      goto LABEL_921;
    case 0x1B7:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v929);
      if (!(_BYTE)cf) {
        goto LABEL_921;
      }
      WebKit::NetworkProcess::registerURLSchemeAsLocal((WebKit::NetworkProcess *)this, (const WTF::String *)&v929);
      goto LABEL_612;
    case 0x1B8:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v929);
      if (!(_BYTE)cf) {
        goto LABEL_921;
      }
      WebKit::NetworkProcess::registerURLSchemeAsNoAccess((WebKit::NetworkProcess *)this, (const WTF::String *)&v929);
LABEL_612:
      if (!(_BYTE)cf) {
        goto LABEL_921;
      }
      char v463 = (WTF::StringImpl *)v929.m_identifier;
      v929.unint64_t m_identifier = 0;
      if (!v463) {
        goto LABEL_921;
      }
      goto LABEL_891;
    case 0x1B9:
      IPC::handleMessage<Messages::NetworkProcess::RegisterURLSchemeAsSecure,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::String const&)const>(a3, (WebKit::NetworkProcess *)this);
      goto LABEL_921;
    case 0x1BC:
      uint64_t v151 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v152)
      {
        unint64_t v153 = v151;
        IPC::Decoder::decode<WebCore::SecurityOriginData>(v10, v955);
        if (BYTE8(v956))
        {
          IPC::Decoder::decode<WebCore::SecurityOriginData>(v10, v905);
          if (v906[8])
          {
            uint64_t v154 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v10);
            if ((v154 & 0xFF00000000) != 0)
            {
              if (!BYTE8(v956) || !v906[8]) {
                goto LABEL_1091;
              }
              int v155 = v154;
              v929.unint64_t m_identifier = v153;
              LOBYTE(cf) = 0;
              *(_DWORD *)uint64_t v932 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v955);
              v932[8] = 0;
              *(_DWORD *)&v932[32] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v932[8], (uint64_t)v905);
              *(_DWORD *)&v932[40] = v155;
              char v156 = 1;
            }
            else
            {
              char v156 = 0;
              LOBYTE(v929.m_identifier) = 0;
            }
            v932[48] = v156;
            if (v906[8] && *(_DWORD *)v906 != -1) {
              ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9B7B38[*(unsigned int *)v906])(v903, v905);
            }
          }
          else
          {
            LOBYTE(v929.m_identifier) = 0;
            v932[48] = 0;
          }
          if (BYTE8(v956) && v956 != -1) {
            ((void (*)(unsigned char *, unsigned char *))off_1EE9B7B38[v956])(v905, v955);
          }
        }
        else
        {
          LOBYTE(v929.m_identifier) = 0;
          v932[48] = 0;
        }
        if (v932[48])
        {
LABEL_829:
          uint64_t v665 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
          if ((_BYTE)a2)
          {
            *(void *)v905 = v665;
            uint64_t v10 = (uint64_t *)&v905[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
            v666 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v666 = &unk_1EE9B7B80;
            v666[1] = *(void *)v905;
            uint64_t v667 = *(void *)&v905[8];
            *(void *)&v905[8] = 0;
            v666[2] = v667;
            *(void *)uint64_t v955 = v666;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
            if (!v932[48]) {
              goto LABEL_1091;
            }
            WebKit::NetworkProcess::renameOriginInWebsiteData((uint64_t)this, (atomic_uchar *)v929.m_identifier, (WebCore::SecurityOriginData *)&cf, (WebCore::SecurityOriginData *)&v932[8], *(int *)&v932[40], (uint64_t *)v955);
            uint64_t v668 = *(void *)v955;
            *(void *)uint64_t v955 = 0;
            if (v668) {
              (*(void (**)(uint64_t))(*(void *)v668 + 8))(v668);
            }
          }
          if (!v932[48]) {
            goto LABEL_921;
          }
          if (*(_DWORD *)&v932[32] != -1) {
            ((void (*)(unsigned char *, unsigned char *))off_1EE9B7B38[*(unsigned int *)&v932[32]])(v905, &v932[8]);
          }
          *(_DWORD *)&v932[32] = -1;
          uint64_t v669 = *(unsigned int *)v932;
          if (*(_DWORD *)v932 == -1) {
            goto LABEL_921;
          }
LABEL_837:
          ((void (*)(unsigned char *, CFTypeRef *))off_1EE9B7B38[v669])(v905, &cf);
          goto LABEL_921;
        }
      }
      else
      {
        LOBYTE(v929.m_identifier) = 0;
        v932[48] = 0;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v825 = v10[3];
      if (!v825) {
        goto LABEL_921;
      }
      if (!a3) {
        goto LABEL_921;
      }
      (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v825 + 16))(v825, a2);
      if (!v932[48]) {
        goto LABEL_921;
      }
      goto LABEL_829;
    case 0x1BD:
      uint64_t v397 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v398 = v397;
      unint64_t v399 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v399;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      unint64_t v400 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v400->unint64_t m_identifier = (unint64_t)&unk_1EE9B83C8;
      v400[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v401 = cf;
      CFTypeRef cf = 0;
      v400[2].unint64_t m_identifier = (unint64_t)v401;
      *(void *)v905 = v400;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::resetCacheMaxAgeCapForPrevalentResources((uint64_t)this, v398, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1BE:
      uint64_t v282 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v283 = v282;
      unint64_t v284 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v284;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      uint64_t v285 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v285->unint64_t m_identifier = (unint64_t)&unk_1EE9B8418;
      v285[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v286 = cf;
      CFTypeRef cf = 0;
      v285[2].unint64_t m_identifier = (unint64_t)v286;
      *(void *)v905 = v285;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::resetCrossSiteLoadsWithLinkDecorationForTesting((uint64_t)this, v283, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1BF:
      uint64_t v317 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v318 = v317;
      unint64_t v319 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v319;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      uint64_t v320 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v320->unint64_t m_identifier = (unint64_t)&unk_1EE9B8008;
      v320[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v321 = cf;
      CFTypeRef cf = 0;
      v320[2].unint64_t m_identifier = (unint64_t)v321;
      *(void *)v905 = v320;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::resetParametersToDefaultValues((uint64_t)this, v318, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1C0:
      uint64_t v402 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v403 = v402;
      unint64_t v404 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v404;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      v405 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v405->unint64_t m_identifier = (unint64_t)&unk_1EE9B88A0;
      v405[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v406 = cf;
      CFTypeRef cf = 0;
      v405[2].unint64_t m_identifier = (unint64_t)v406;
      *(void *)v905 = v405;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::resetQuota((uint64_t)this, v403, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1C1:
      uint64_t v382 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v383 = v382;
      unint64_t v384 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v384;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      v385 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v385->unint64_t m_identifier = (unint64_t)&unk_1EE9B8918;
      v385[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v386 = cf;
      CFTypeRef cf = 0;
      v385[2].unint64_t m_identifier = (unint64_t)v386;
      *(void *)v905 = v385;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::resetStoragePersistedState((uint64_t)this, v383, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1C3:
      uint64_t v270 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v271) {
        goto LABEL_913;
      }
      unint64_t v272 = v270;
      uint64_t v273 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v10);
      if (!v274) {
        goto LABEL_913;
      }
      unint64_t v11 = (atomic_uchar *volatile *)v273;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v10, (uint64_t)v955);
      if (!v955[16]) {
        goto LABEL_913;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v10, (uint64_t)&v900);
      if (!(_BYTE)v901) {
        goto LABEL_913;
      }
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>((IPC::Decoder *)v10, (uint64_t)v903);
      if (!LOBYTE(v903[1]))
      {
        int v281 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[40] = 0;
        goto LABEL_903;
      }
      unint64_t v275 = v10[1];
      a2 = (atomic_uchar *volatile *)*v10;
      unint64_t v276 = v10[2] - *v10;
      if (v275 <= v276)
      {
        uint64_t v859 = 0;
        uint64_t v860 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v861 = v10[3];
        if (v861)
        {
          if (v275)
          {
            (*(void (**)(uint64_t))(*(void *)v861 + 16))(v861);
            uint64_t v860 = *v10;
            uint64_t v859 = v10[1];
          }
          else
          {
            uint64_t v859 = 0;
            uint64_t v860 = 0;
          }
        }
      }
      else
      {
        v277 = (unsigned __int8 *)a2 + v276;
        v10[2] = (uint64_t)(v277 + 1);
        if (a2)
        {
          unsigned int v278 = *v277;
          if (v278 < 2)
          {
            BOOL v4 = v278 != 0;
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v10, (uint64_t)v905);
            if (v905[16])
            {
              if (!v955[16] || !(_BYTE)v901 || !LOBYTE(v903[1])) {
                goto LABEL_1091;
              }
              v929.unint64_t m_identifier = v272;
              CFTypeRef cf = (CFTypeRef)v11;
              *(_OWORD *)v931 = *(_OWORD *)v955;
              v279 = v900;
              unint64_t v900 = 0;
              v280 = v903[0];
              v903[0] = 0;
              *(void *)uint64_t v932 = v279;
              *(void *)&v932[8] = v280;
              v932[16] = v4;
              int v281 = 1;
              *(_OWORD *)&v932[24] = *(_OWORD *)v905;
            }
            else
            {
              int v281 = 0;
              LOBYTE(v929.m_identifier) = 0;
            }
            v932[40] = v281;
LABEL_901:
            if (LOBYTE(v903[1])) {
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v903);
            }
LABEL_903:
            if ((_BYTE)v901)
            {
              unint64_t v685 = v900;
              unint64_t v900 = 0;
              if (v685)
              {
                if (*(_DWORD *)v685 == 2) {
                  WTF::StringImpl::destroy(v685, (WTF::StringImpl *)a2);
                }
                else {
                  *(_DWORD *)v685 -= 2;
                }
              }
            }
            if (v281)
            {
              WebKit::NetworkProcess::resumeDownload((uint64_t)this, v929.m_identifier, (uint64_t)v11, (uint64_t)v931[0], (uint64_t)v931[1], (WTF::FileSystemImpl *)v932, (uint64_t *)&v932[8], v4, *(uint64_t *)&v932[24], *(uint64_t *)&v932[32]);
              if (v932[40])
              {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v932[8]);
                char v463 = *(WTF::StringImpl **)v932;
                *(void *)uint64_t v932 = 0;
                if (v463)
                {
LABEL_911:
                  if (*(_DWORD *)v463 == 2) {
                    goto LABEL_920;
                  }
                  *(_DWORD *)v463 -= 2;
                }
              }
              goto LABEL_921;
            }
LABEL_913:
            a2 = (atomic_uchar *volatile *)*v10;
            a3 = (IPC::Decoder *)v10[1];
            *uint64_t v10 = 0;
            v10[1] = 0;
            uint64_t v261 = v10[3];
            if (!v261) {
              goto LABEL_921;
            }
LABEL_914:
            if (!a3) {
              goto LABEL_921;
            }
            goto LABEL_896;
          }
LABEL_1221:
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v863 = v10[3];
          if (v863)
          {
            if (v275)
            {
              (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v863 + 16))(v863, a2);
              uint64_t v892 = v10[3];
              a2 = (atomic_uchar *volatile *)*v10;
              uint64_t v893 = v10[1];
              *uint64_t v10 = 0;
              v10[1] = 0;
              if (v892)
              {
                if (v893) {
                  (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v892 + 16))(v892, a2);
                }
              }
            }
          }
          int v281 = 0;
          LOBYTE(v929.m_identifier) = 0;
          v932[40] = 0;
          goto LABEL_901;
        }
        uint64_t v859 = v275;
        uint64_t v860 = 0;
      }
      unint64_t v275 = 0;
      a2 = 0;
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v862 = v10[3];
      if (v862)
      {
        if (v859)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v862 + 16))(v862, v860, v859);
          a2 = (atomic_uchar *volatile *)*v10;
          unint64_t v275 = v10[1];
        }
        else
        {
          unint64_t v275 = 0;
          a2 = 0;
        }
      }
      goto LABEL_1221;
    case 0x1C4:
      uint64_t v487 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v488) {
        goto LABEL_1197;
      }
      uint64_t v489 = v487;
      IPC::Decoder::decode<std::optional<WTF::WallTime>>(v10, &v929);
      if (!LOBYTE(v931[0])) {
        goto LABEL_1197;
      }
      unint64_t v490 = v10[1];
      uint64_t v491 = *v10;
      unint64_t v492 = v10[2] - *v10;
      if (v490 <= v492)
      {
        uint64_t v842 = 0;
        uint64_t v843 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v844 = v10[3];
        if (v844)
        {
          if (v490)
          {
            (*(void (**)(uint64_t))(*(void *)v844 + 16))(v844);
            uint64_t v843 = *v10;
            uint64_t v842 = v10[1];
          }
          else
          {
            uint64_t v842 = 0;
            uint64_t v843 = 0;
          }
        }
      }
      else
      {
        v493 = (unsigned __int8 *)(v491 + v492);
        v10[2] = (uint64_t)(v493 + 1);
        if (v491)
        {
          unsigned int v494 = *v493;
          if (v494 < 2)
          {
            unint64_t v495 = v929.m_identifier;
            CFTypeRef v496 = cf;
            unint64_t v497 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if (!(_BYTE)a2) {
              goto LABEL_921;
            }
            v929.unint64_t m_identifier = v497;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
            v498 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
            v498->unint64_t m_identifier = (unint64_t)&unk_1EE9B8030;
            v498[1].unint64_t m_identifier = v929.m_identifier;
            CFTypeRef v499 = cf;
            CFTypeRef cf = 0;
            v498[2].unint64_t m_identifier = (unint64_t)v499;
            *(void *)v905 = v498;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
            WebKit::NetworkProcess::scheduleClearInMemoryAndPersistent((uint64_t)this, v489, v495, (uint64_t)v496, v494 != 0, (WTF::StringImpl *)v905);
            goto LABEL_713;
          }
LABEL_1196:
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v846 = v10[3];
          if (v846)
          {
            if (v490)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v846 + 16))(v846, v491);
              uint64_t v889 = v10[3];
              uint64_t v890 = *v10;
              uint64_t v891 = v10[1];
              *uint64_t v10 = 0;
              v10[1] = 0;
              if (v889)
              {
                if (v891) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v889 + 16))(v889, v890);
                }
              }
            }
          }
LABEL_1197:
          a2 = (atomic_uchar *volatile *)*v10;
          a3 = (IPC::Decoder *)v10[1];
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v261 = v10[3];
          if (!v261) {
            goto LABEL_921;
          }
LABEL_1198:
          if (a3) {
            goto LABEL_896;
          }
          goto LABEL_921;
        }
        uint64_t v842 = v490;
        uint64_t v843 = 0;
      }
      unint64_t v490 = 0;
      uint64_t v491 = 0;
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v845 = v10[3];
      if (v845)
      {
        if (v842)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v845 + 16))(v845, v843, v842);
          uint64_t v491 = *v10;
          unint64_t v490 = v10[1];
        }
        else
        {
          unint64_t v490 = 0;
          uint64_t v491 = 0;
        }
      }
      goto LABEL_1196;
    case 0x1C5:
      uint64_t v235 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v236 = v235;
      unint64_t v237 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v237;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      uint64_t v238 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v238->unint64_t m_identifier = (unint64_t)&unk_1EE9B8058;
      v238[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v239 = cf;
      CFTypeRef cf = 0;
      v238[2].unint64_t m_identifier = (unint64_t)v239;
      *(void *)v905 = v238;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::scheduleCookieBlockingUpdate((uint64_t)this, v236, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1C6:
      uint64_t v479 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v480 = v479;
      unint64_t v481 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v481;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      v482 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v482->unint64_t m_identifier = (unint64_t)&unk_1EE9B8080;
      v482[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v483 = cf;
      CFTypeRef cf = 0;
      v482[2].unint64_t m_identifier = (unint64_t)v483;
      *(void *)v905 = v482;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::scheduleStatisticsAndDataRecordsProcessing((uint64_t)this, v480, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1C7:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v191 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_185;
      }
      *(void *)v905 = v191;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v192 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v192 = &unk_1EE9B84E0;
      v192[1] = *(void *)v905;
      uint64_t v193 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v192[2] = v193;
      *(void *)uint64_t v955 = v192;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setAppBoundDomainsForResourceLoadStatistics((uint64_t)this, v929.m_identifier, (uint64_t *)&cf, (const WTF::StringImpl *)v955);
      goto LABEL_182;
    case 0x1C8:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0]))
      {
        uint64_t v529 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if ((_BYTE)a2)
        {
          *(void *)v905 = v529;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
          uint64_t v530 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v530 = &unk_1EE9B88F0;
          v530[1] = *(void *)v905;
          uint64_t v531 = *(void *)&v905[8];
          *(void *)&v905[8] = 0;
          v530[2] = v531;
          *(void *)uint64_t v955 = v530;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
          WebKit::NetworkProcess::setBackupExclusionPeriodForTesting((uint64_t)this, v929.m_identifier, (uint64_t *)v955, *(double *)&cf);
          uint64_t v79 = *(void *)v955;
          *(void *)uint64_t v955 = 0;
          if (v79) {
            goto LABEL_1028;
          }
        }
      }
      goto LABEL_921;
    case 0x1C9:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0])) {
        WebKit::NetworkProcess::setBlobRegistryTopOriginPartitioningEnabled((uint64_t)this, v929.m_identifier, cf);
      }
      goto LABEL_921;
    case 0x1CA:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v180 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v180;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v181 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v181 = &unk_1EE9B80D0;
      v181[1] = *(void *)v905;
      uint64_t v182 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v181[2] = v182;
      *(void *)uint64_t v955 = v181;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setCacheMaxAgeCapForPrevalentResources((uint64_t)this, v929.m_identifier, (uint64_t *)v955);
      goto LABEL_541;
    case 0x1CB:
      unsigned __int16 v532 = IPC::Decoder::decode<std::tuple<WebKit::CacheModel>>((uint64_t *)a3);
      if (v532 >= 0x100u) {
        WebKit::NetworkProcess::setCacheModel((uint64_t)this, v532);
      }
      goto LABEL_921;
    case 0x1CC:
      uint64_t v539 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v540
        || (unint64_t v541 = v539, IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v955), !v955[8]))
      {
        int v543 = 0;
        int v544 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[0] = 0;
        goto LABEL_674;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v905);
      if (v905[8])
      {
        unsigned __int16 v542 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v10);
        if (v542 >= 0x100u)
        {
          if (!v955[8] || !v905[8]) {
            goto LABEL_1091;
          }
          int v662 = 0;
          int v543 = v542;
          v670 = *(const void **)v955;
          *(void *)uint64_t v955 = 0;
          v929.unint64_t m_identifier = v541;
          CFTypeRef cf = v670;
          v931[0] = *(WTF::StringImpl **)v905;
          LOBYTE(v931[1]) = v542;
          int v544 = 1;
          v932[0] = 1;
LABEL_842:
          if (v955[8])
          {
            unint64_t v808 = *(WTF::StringImpl **)v955;
            *(void *)uint64_t v955 = 0;
            if (v808)
            {
              if (*(_DWORD *)v808 == 2) {
                WTF::StringImpl::destroy(v808, (WTF::StringImpl *)a2);
              }
              else {
                *(_DWORD *)v808 -= 2;
              }
            }
          }
          if (!v662)
          {
LABEL_844:
            if (!v544) {
              goto LABEL_921;
            }
            uint64_t v671 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if ((_BYTE)a2)
            {
              *(void *)v905 = v671;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
              v672 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v672 = &unk_1EE9B83F0;
              v672[1] = *(void *)v905;
              uint64_t v673 = *(void *)&v905[8];
              *(void *)&v905[8] = 0;
              v672[2] = v673;
              *(void *)uint64_t v955 = v672;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
              WebKit::NetworkProcess::setCrossSiteLoadWithLinkDecorationForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, v543 != 0, (uint64_t *)v955);
              uint64_t v674 = *(void *)v955;
              *(void *)uint64_t v955 = 0;
              if (v674) {
                (*(void (**)(uint64_t))(*(void *)v674 + 8))(v674);
              }
              if (!v932[0]) {
                goto LABEL_921;
              }
            }
LABEL_866:
            v203 = v931[0];
            v931[0] = 0;
            if (v203)
            {
LABEL_867:
              if (*(_DWORD *)v203 == 2) {
LABEL_889:
              }
                WTF::StringImpl::destroy(v203, (WTF::StringImpl *)a2);
              else {
                *(_DWORD *)v203 -= 2;
              }
            }
LABEL_890:
            char v463 = (WTF::StringImpl *)cf;
            CFTypeRef cf = 0;
            if (v463) {
              goto LABEL_891;
            }
            goto LABEL_921;
          }
LABEL_674:
          a2 = (atomic_uchar *volatile *)*v10;
          a3 = (IPC::Decoder *)v10[1];
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v605 = v10[3];
          if (v605 && a3) {
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v605 + 16))(v605, a2);
          }
          goto LABEL_844;
        }
        LOBYTE(v929.m_identifier) = 0;
        v932[0] = 0;
        if (v905[8])
        {
          uint64_t v897 = *(WTF::StringImpl **)v905;
          *(void *)v905 = 0;
          if (v897)
          {
            if (*(_DWORD *)v897 != 2)
            {
              int v543 = 0;
              int v544 = 0;
              *(_DWORD *)v897 -= 2;
              goto LABEL_794;
            }
            WTF::StringImpl::destroy(v897, (WTF::StringImpl *)a2);
          }
        }
        int v543 = 0;
        int v544 = 0;
      }
      else
      {
        int v543 = 0;
        int v544 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[0] = 0;
      }
LABEL_794:
      int v662 = 1;
      goto LABEL_842;
    case 0x1CD:
      uint64_t v96 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v97) {
        goto LABEL_894;
      }
      unint64_t v98 = v96;
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v10, (uint64_t)v955);
      if (!v955[8]) {
        goto LABEL_894;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v905);
      if (!v905[8])
      {
        if (!v955[8]) {
          goto LABEL_894;
        }
        goto LABEL_732;
      }
      if (!v955[8]) {
        goto LABEL_1091;
      }
      v929.unint64_t m_identifier = v98;
      CFTypeRef cf = *(CFTypeRef *)v955;
      uint64_t v99 = *(WTF::StringImpl **)v905;
      v931[0] = *(WTF::StringImpl **)v905;
      LOBYTE(v931[1]) = 1;
      uint64_t v100 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if ((_BYTE)a2)
      {
        *(void *)v905 = v100;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        unint64_t v101 = (void *)WTF::fastMalloc((WTF *)0x18);
        *unint64_t v101 = &unk_1EE9B85F8;
        v101[1] = *(void *)v905;
        uint64_t v102 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v101[2] = v102;
        *(void *)uint64_t v955 = v101;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        WebKit::NetworkProcess::setFirstPartyHostCNAMEDomainForTesting((uint64_t)this, v98, (WTF **)&cf, v931, (uint64_t *)v955);
        uint64_t v103 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v103) {
          (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
        }
        if (!LOBYTE(v931[1])) {
          goto LABEL_921;
        }
        uint64_t v99 = v931[0];
      }
      v931[0] = 0;
      if (!v99) {
        goto LABEL_890;
      }
      if (*(_DWORD *)v99 != 2)
      {
        *(_DWORD *)v99 -= 2;
        goto LABEL_890;
      }
      v203 = v99;
      goto LABEL_889;
    case 0x1CE:
      uint64_t v257 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v258
        || (uint64_t v259 = v257,
            unsigned __int16 PartyWebsiteDataRemoval = IPC::Decoder::decode<WebCore::FirstPartyWebsiteDataRemovalMode>((IPC::Decoder *)v10),
            PartyWebsiteDataRemoval <= 0xFFu))
      {
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (!v261) {
          goto LABEL_921;
        }
        goto LABEL_1198;
      }
      char v619 = PartyWebsiteDataRemoval;
      unint64_t v620 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v620;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      uint64_t v621 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v621->unint64_t m_identifier = (unint64_t)&unk_1EE9B85A8;
      v621[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v622 = cf;
      CFTypeRef cf = 0;
      v621[2].unint64_t m_identifier = (unint64_t)v622;
      *(void *)v905 = v621;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::setFirstPartyWebsiteDataRemovalModeForTesting((uint64_t)this, v259, v619, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1CF:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,BOOL>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_921;
      }
      uint64_t v228 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if ((_BYTE)a2)
      {
        *(void *)v905 = v228;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        int v229 = (void *)WTF::fastMalloc((WTF *)0x18);
        *int v229 = &unk_1EE9B80F8;
        v229[1] = *(void *)v905;
        uint64_t v230 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v229[2] = v230;
        *(void *)uint64_t v955 = v229;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        WebKit::NetworkProcess::setGrandfathered((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (char)v931[0], (uint64_t *)v955);
        uint64_t v231 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v231) {
          (*(void (**)(uint64_t))(*(void *)v231 + 8))(v231);
        }
        if (!LOBYTE(v931[1])) {
          goto LABEL_921;
        }
      }
      goto LABEL_582;
    case 0x1D0:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v188 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v188;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      double v189 = (void *)WTF::fastMalloc((WTF *)0x18);
      *double v189 = &unk_1EE9B8148;
      v189[1] = *(void *)v905;
      uint64_t v190 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v189[2] = v190;
      *(void *)uint64_t v955 = v189;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setGrandfatheringTime((uint64_t)this, v929.m_identifier, (uint64_t *)v955, *(double *)&cf);
      goto LABEL_541;
    case 0x1D1:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0])) {
        WebKit::NetworkProcess::setInspectionForServiceWorkersAllowed((uint64_t)this, v929.m_identifier, cf);
      }
      goto LABEL_921;
    case 0x1D2:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v430 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v430;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v431 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v431 = &unk_1EE9B8238;
      v431[1] = *(void *)v905;
      uint64_t v432 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v431[2] = v432;
      *(void *)uint64_t v955 = v431;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setIsRunningResourceLoadStatisticsTest((uint64_t)this, v929.m_identifier, (char)cf, (uint64_t *)v955);
      goto LABEL_541;
    case 0x1D3:
      uint64_t v212 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v213) {
        goto LABEL_789;
      }
      unint64_t v214 = v212;
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v905);
      if (!v905[8]) {
        goto LABEL_789;
      }
      *(double *)&char v215 = COERCE_DOUBLE(IPC::Decoder::decode<WTF::Seconds>(v10));
      if (!(_BYTE)a2)
      {
        if (v905[8])
        {
          uint64_t v896 = *(WTF::StringImpl **)v905;
          *(void *)v905 = 0;
          if (v896)
          {
            if (*(_DWORD *)v896 == 2) {
              WTF::StringImpl::destroy(v896, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v896 -= 2;
            }
          }
        }
        goto LABEL_789;
      }
      if (!v905[8]) {
        goto LABEL_1091;
      }
      double v216 = *(double *)&v215;
      unsigned __int8 v217 = *(WTF::StringImpl **)v905;
      v929.unint64_t m_identifier = v214;
      CFTypeRef cf = *(CFTypeRef *)v905;
      v931[0] = v215;
      LOBYTE(v931[1]) = 1;
      uint64_t v218 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if ((_BYTE)a2)
      {
        *(void *)v905 = v218;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        unint64_t v219 = (void *)WTF::fastMalloc((WTF *)0x18);
        *unint64_t v219 = &unk_1EE9B7DB0;
        v219[1] = *(void *)v905;
        uint64_t v220 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v219[2] = v220;
        *(void *)uint64_t v955 = v219;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        WebKit::NetworkProcess::setLastSeen((uint64_t)this, v214, (uint64_t)&cf, (uint64_t *)v955, v216);
        uint64_t v221 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v221) {
          (*(void (**)(uint64_t))(*(void *)v221 + 8))(v221);
        }
        if (!LOBYTE(v931[1])) {
          goto LABEL_921;
        }
        unsigned __int8 v217 = (WTF::StringImpl *)cf;
      }
      CFTypeRef cf = 0;
      if (!v217) {
        goto LABEL_921;
      }
      if (*(_DWORD *)v217 != 2)
      {
        *(_DWORD *)v217 -= 2;
        goto LABEL_921;
      }
      char v463 = v217;
      goto LABEL_920;
    case 0x1D4:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v107 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_185;
      }
      *(void *)v905 = v107;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v108 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v108 = &unk_1EE9B8508;
      v108[1] = *(void *)v905;
      uint64_t v109 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v108[2] = v109;
      *(void *)uint64_t v955 = v108;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics((uint64_t)this, v929.m_identifier, (uint64_t *)&cf, (uint64_t *)v955);
LABEL_182:
      uint64_t v194 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v194) {
        (*(void (**)(uint64_t))(*(void *)v194 + 8))(v194);
      }
      if (LOBYTE(v931[0]))
      {
LABEL_185:
        if (cf) {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)cf, (WTF::StringImpl *)a2);
        }
      }
      goto LABEL_921;
    case 0x1D5:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,unsigned long long>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v484 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v484;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v485 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v485 = &unk_1EE9B8170;
      v485[1] = *(void *)v905;
      uint64_t v486 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v485[2] = v486;
      *(void *)uint64_t v955 = v485;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setMaxStatisticsEntries((uint64_t)this, v929.m_identifier, (uint64_t)cf, (uint64_t *)v955);
      goto LABEL_541;
    case 0x1D6:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v354 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v354;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      unsigned int v355 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unsigned int v355 = &unk_1EE9B8198;
      v355[1] = *(void *)v905;
      uint64_t v356 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v355[2] = v356;
      *(void *)uint64_t v955 = v355;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setMinimumTimeBetweenDataRecordsRemoval((uint64_t)this, v929.m_identifier, (uint64_t *)v955, *(double *)&cf);
      goto LABEL_541;
    case 0x1D7:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v267 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v267;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v268 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v268 = &unk_1EE9B88C8;
      v268[1] = *(void *)v905;
      uint64_t v269 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v268[2] = v269;
      *(void *)uint64_t v955 = v268;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setOriginQuotaRatioEnabledForTesting((uint64_t)this, v929.m_identifier, (char)cf, (uint64_t *)v955);
      goto LABEL_716;
    case 0x1D8:
      uint64_t v469 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v470) {
        goto LABEL_894;
      }
      unint64_t v471 = v469;
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v10, (uint64_t)&v900);
      if (!(_BYTE)v901) {
        goto LABEL_894;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v10, (uint64_t)v903);
      if (!LOBYTE(v903[1]))
      {
        int v474 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[8] = 0;
        goto LABEL_770;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v10, (uint64_t)v955);
      if (!v955[8])
      {
        int v474 = 0;
        LOBYTE(v929.m_identifier) = 0;
        v932[8] = 0;
        goto LABEL_497;
      }
      IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v10, (uint64_t)v905);
      if (v905[8])
      {
        if (!(_BYTE)v901 || !LOBYTE(v903[1]) || !v955[8]) {
          goto LABEL_1091;
        }
        v472 = v900;
        unint64_t v900 = 0;
        v929.unint64_t m_identifier = v471;
        CFTypeRef cf = v472;
        v473 = v903[0];
        v903[0] = 0;
        v931[0] = v473;
        v931[1] = *(WTF::StringImpl **)v955;
        *(void *)uint64_t v932 = *(void *)v905;
        int v474 = 1;
        v932[8] = 1;
      }
      else
      {
        LOBYTE(v929.m_identifier) = 0;
        v932[8] = 0;
        if (v955[8])
        {
          uint64_t v823 = *(WTF::StringImpl **)v955;
          *(void *)uint64_t v955 = 0;
          if (v823)
          {
            if (*(_DWORD *)v823 != 2)
            {
              int v474 = 0;
              *(_DWORD *)v823 -= 2;
              goto LABEL_497;
            }
            WTF::StringImpl::destroy(v823, (WTF::StringImpl *)a2);
          }
        }
        int v474 = 0;
      }
LABEL_497:
      if (LOBYTE(v903[1]))
      {
        unint64_t v475 = v903[0];
        v903[0] = 0;
        if (v475)
        {
          if (*(_DWORD *)v475 == 2) {
            WTF::StringImpl::destroy(v475, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v475 -= 2;
          }
        }
      }
LABEL_770:
      if ((_BYTE)v901)
      {
        unint64_t v656 = v900;
        unint64_t v900 = 0;
        if (v656)
        {
          if (*(_DWORD *)v656 == 2) {
            WTF::StringImpl::destroy(v656, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v656 -= 2;
          }
        }
      }
      if (!v474) {
        goto LABEL_894;
      }
      uint64_t v657 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if ((_BYTE)a2)
      {
        *(void *)v905 = v657;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        uint64_t v658 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v658 = &unk_1EE9B8828;
        v658[1] = *(void *)v905;
        uint64_t v659 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v658[2] = v659;
        *(void *)uint64_t v955 = v658;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        WebKit::NetworkProcess::setPCMFraudPreventionValuesForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t)&v931[1], (uint64_t)v932, (uint64_t *)v955);
        uint64_t v660 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v660) {
          (*(void (**)(uint64_t))(*(void *)v660 + 8))(v660);
        }
        if (!v932[8]) {
          goto LABEL_921;
        }
      }
      uint64_t v661 = *(WTF::StringImpl **)v932;
      *(void *)uint64_t v932 = 0;
      if (v661)
      {
        if (*(_DWORD *)v661 == 2) {
          WTF::StringImpl::destroy(v661, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v661 -= 2;
        }
      }
      v680 = v931[1];
      v931[1] = 0;
      if (v680)
      {
        if (*(_DWORD *)v680 == 2) {
          WTF::StringImpl::destroy(v680, (WTF::StringImpl *)a2);
        }
        else {
          *(_DWORD *)v680 -= 2;
        }
      }
      goto LABEL_866;
    case 0x1DA:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v514 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v514;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v515 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v515 = &unk_1EE9B7E28;
      v515[1] = *(void *)v905;
      uint64_t v516 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v515[2] = v516;
      *(void *)uint64_t v955 = v515;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setPrevalentResource((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
      goto LABEL_536;
    case 0x1DB:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v177 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v177;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v178 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v178 = &unk_1EE9B7E50;
      v178[1] = *(void *)v905;
      uint64_t v179 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v178[2] = v179;
      *(void *)uint64_t v955 = v178;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setPrevalentResourceForDebugMode((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
      goto LABEL_536;
    case 0x1DC:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>(a3, &v929);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v204 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_402;
      }
      *(void *)v905 = v204;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v205 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v205 = &unk_1EE9B8850;
      v205[1] = *(void *)v905;
      uint64_t v206 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v205[2] = v206;
      *(void *)uint64_t v955 = v205;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[0])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setPrivateClickMeasurementAppBundleIDForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
      goto LABEL_400;
    case 0x1DD:
      uint64_t v196 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v197) {
        goto LABEL_894;
      }
      unint64_t v198 = v196;
      IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v10, v955);
      if (!v957) {
        goto LABEL_894;
      }
      IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v10, v905);
      if (!v906[16])
      {
        LOBYTE(v929.m_identifier) = 0;
        v932[56] = 0;
        if (v957)
        {
LABEL_732:
          uint64_t v631 = *(WTF::StringImpl **)v955;
          *(void *)uint64_t v955 = 0;
          if (v631)
          {
            if (*(_DWORD *)v631 == 2) {
              WTF::StringImpl::destroy(v631, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v631 -= 2;
            }
          }
        }
        goto LABEL_894;
      }
      if (!v957) {
        goto LABEL_1091;
      }
      v929.unint64_t m_identifier = v198;
      CFTypeRef cf = *(CFTypeRef *)v955;
      *(_OWORD *)v931 = *(_OWORD *)&v955[8];
      *(_OWORD *)uint64_t v932 = v956;
      *(void *)&v932[16] = *(void *)v905;
      *(_OWORD *)&v932[24] = *(_OWORD *)&v905[8];
      *(_OWORD *)&v932[40] = *(_OWORD *)v906;
      v932[56] = 1;
      uint64_t v199 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if ((_BYTE)a2)
      {
        *(void *)v905 = v199;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        uint64_t v200 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v200 = &unk_1EE9B87D8;
        v200[1] = *(void *)v905;
        uint64_t v201 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v200[2] = v201;
        *(void *)uint64_t v955 = v200;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        WebKit::NetworkProcess::setPrivateClickMeasurementAttributionReportURLsForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)&v932[16], (uint64_t *)v955);
        uint64_t v202 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v202) {
          (*(void (**)(uint64_t))(*(void *)v202 + 8))(v202);
        }
        if (!v932[56]) {
          goto LABEL_921;
        }
      }
      v203 = *(WTF::StringImpl **)&v932[16];
      *(void *)&v932[16] = 0;
      if (v203) {
        goto LABEL_867;
      }
      goto LABEL_890;
    case 0x1DE:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0]))
      {
        v208.unint64_t m_identifier = v929.m_identifier;
        WebKit::NetworkProcess::setPrivateClickMeasurementDebugMode((WebKit::NetworkProcess *)this, v208, cf);
      }
      goto LABEL_921;
    case 0x1DF:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v225 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v225;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      unint64_t v226 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v226 = &unk_1EE9B8738;
      v226[1] = *(void *)v905;
      uint64_t v227 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v226[2] = v227;
      *(void *)uint64_t v955 = v226;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setPrivateClickMeasurementEphemeralMeasurementForTesting((uint64_t)this, v929.m_identifier, (char)cf, (uint64_t *)v955);
      goto LABEL_716;
    case 0x1E0:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v427 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v427;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v428 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v428 = &unk_1EE9B86E8;
      v428[1] = *(void *)v905;
      uint64_t v429 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v428[2] = v429;
      *(void *)uint64_t v955 = v428;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setPrivateClickMeasurementOverrideTimerForTesting((uint64_t)this, v929.m_identifier, cf, (uint64_t *)v955);
LABEL_716:
      uint64_t v79 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v79) {
        goto LABEL_1028;
      }
      goto LABEL_921;
    case 0x1E1:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>(a3, &v929);
      if (!v932[16]) {
        goto LABEL_921;
      }
      uint64_t v345 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_423;
      }
      *(void *)v905 = v345;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v346 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v346 = &unk_1EE9B8788;
      v346[1] = *(void *)v905;
      uint64_t v347 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v346[2] = v347;
      *(void *)uint64_t v955 = v346;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!v932[16]) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setPrivateClickMeasurementTokenPublicKeyURLForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
      goto LABEL_421;
    case 0x1E2:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>(a3, &v929);
      if (!v932[16]) {
        goto LABEL_921;
      }
      uint64_t v423 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_423;
      }
      *(void *)v905 = v423;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v424 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v424 = &unk_1EE9B87B0;
      v424[1] = *(void *)v905;
      uint64_t v425 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v424[2] = v425;
      *(void *)uint64_t v955 = v424;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!v932[16]) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setPrivateClickMeasurementTokenSignatureURLForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
LABEL_421:
      uint64_t v426 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v426) {
        (*(void (**)(uint64_t))(*(void *)v426 + 8))(v426);
      }
LABEL_423:
      if (!v932[16]) {
        goto LABEL_921;
      }
      goto LABEL_890;
    case 0x1E4:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,unsigned long long>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v508 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v508;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v509 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v509 = &unk_1EE9B81C0;
      v509[1] = *(void *)v905;
      uint64_t v510 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v509[2] = v510;
      *(void *)uint64_t v955 = v509;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setPruneEntriesDownTo((uint64_t)this, v929.m_identifier, (uint64_t)cf, (uint64_t *)v955);
      goto LABEL_541;
    case 0x1E6:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v505 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v505;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v506 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v506 = &unk_1EE9B8260;
      v506[1] = *(void *)v905;
      uint64_t v507 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v506[2] = v507;
      *(void *)uint64_t v955 = v506;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setResourceLoadStatisticsDebugMode((uint64_t)this, v929.m_identifier, (char)cf, (uint64_t *)v955);
      goto LABEL_541;
    case 0x1E7:
      unsigned __int16 v207 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v207 > 0xFFu)
      {
        WebKit::NetworkProcess::setResourceLoadStatisticsLogTestingEvent((WebKit::NetworkProcess *)this, v207 != 0);
        goto LABEL_921;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v261 = v10[3];
      if (v261) {
        goto LABEL_914;
      }
      goto LABEL_921;
    case 0x1E8:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v518 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v518;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v519 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v519 = &unk_1EE9B8210;
      v519[1] = *(void *)v905;
      uint64_t v520 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v519[2] = v520;
      *(void *)uint64_t v955 = v519;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setResourceLoadStatisticsTimeAdvanceForTesting((uint64_t)this, v929.m_identifier, (uint64_t *)v955, *(double *)&cf);
      goto LABEL_541;
    case 0x1E9:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0])) {
        WebKit::NetworkProcess::setSessionIsControlledByAutomation((uint64_t)this, v929.m_identifier, cf);
      }
      goto LABEL_921;
    case 0x1EA:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v293 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v293;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v294 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v294 = &unk_1EE9B81E8;
      v294[1] = *(void *)v905;
      uint64_t v295 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v294[2] = v295;
      *(void *)uint64_t v955 = v294;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setShouldClassifyResourcesBeforeDataRecordsRemoval((uint64_t)this, v929.m_identifier, (char)cf, (uint64_t *)v955);
      goto LABEL_541;
    case 0x1EB:
      unsigned __int16 v500 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v500 > 0xFFu)
      {
        char v501 = v500;
        unint64_t v502 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
        if (!(_BYTE)a2) {
          goto LABEL_921;
        }
        v929.unint64_t m_identifier = v502;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
        v503 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
        v503->unint64_t m_identifier = (unint64_t)&unk_1EE9B8530;
        v503[1].unint64_t m_identifier = v929.m_identifier;
        CFTypeRef v504 = cf;
        CFTypeRef cf = 0;
        v503[2].unint64_t m_identifier = (unint64_t)v504;
        *(void *)v905 = v503;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
        WebKit::NetworkProcess::setShouldDowngradeReferrerForTesting((uint64_t)this, v501 != 0, (uint64_t *)v905);
        goto LABEL_713;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v261 = v10[3];
      if (!v261) {
        goto LABEL_921;
      }
      goto LABEL_1198;
    case 0x1EC:
      uint64_t v443 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v444
        || (uint64_t v445 = v443, v446 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>((IPC::Decoder *)v10), v446 <= 0xFFu))
      {
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (!v261) {
          goto LABEL_921;
        }
        goto LABEL_1198;
      }
      char v623 = v446;
      unint64_t v624 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v624;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      char v625 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v625->unint64_t m_identifier = (unint64_t)&unk_1EE9B8580;
      v625[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v626 = cf;
      CFTypeRef cf = 0;
      v625[2].unint64_t m_identifier = (unint64_t)v626;
      *(void *)v905 = v625;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::setShouldEnbleSameSiteStrictEnforcementForTesting((uint64_t)this, v445, v623 != 0, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1ED:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0]))
      {
        char v407 = (char)cf;
        *(SessionID *)v905 = v929;
        uint64_t v408 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 28, v905);
        if (v408) {
          *(unsigned char *)(v408 + 726) = v407;
        }
      }
      goto LABEL_921;
    case 0x1EF:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v379 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v379;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v380 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v380 = &unk_1EE9B82B0;
      v380[1] = *(void *)v905;
      uint64_t v381 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v380[2] = v381;
      *(void *)uint64_t v955 = v380;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setSubframeUnderTopFrameDomain((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
      goto LABEL_505;
    case 0x1F0:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v476 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v476;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      unint64_t v477 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v477 = &unk_1EE9B82D8;
      v477[1] = *(void *)v905;
      uint64_t v478 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v477[2] = v478;
      *(void *)uint64_t v955 = v477;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setSubresourceUnderTopFrameDomain((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
      goto LABEL_505;
    case 0x1F1:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v417 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v417;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v418 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v418 = &unk_1EE9B8328;
      v418[1] = *(void *)v905;
      uint64_t v419 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v418[2] = v419;
      *(void *)uint64_t v955 = v418;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setSubresourceUniqueRedirectFrom((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
      goto LABEL_505;
    case 0x1F2:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v348 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v348;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      unsigned int v349 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unsigned int v349 = &unk_1EE9B8300;
      v349[1] = *(void *)v905;
      uint64_t v350 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v349[2] = v350;
      *(void *)uint64_t v955 = v349;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setSubresourceUniqueRedirectTo((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
      goto LABEL_505;
    case 0x1F3:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v209 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_890;
      }
      *(void *)v905 = v209;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v210 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v210 = &unk_1EE9B8620;
      v210[1] = *(void *)v905;
      uint64_t v211 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v210[2] = v211;
      *(void *)uint64_t v955 = v210;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setThirdPartyCNAMEDomainForTesting((uint64_t)this, v929.m_identifier, (uint64_t *)&cf, (uint64_t *)v955);
      goto LABEL_400;
    case 0x1F4:
      uint64_t v305 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v306) {
        goto LABEL_1187;
      }
      uint64_t v307 = v305;
      unsigned __int16 v308 = IPC::ArgumentCoder<JSC::MessageLevel,void>::decode<IPC::Decoder>(v10);
      if (v308 <= 0xFFu)
      {
        uint64_t v835 = *v10;
        uint64_t v836 = v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v837 = v10[3];
        if (v837 && v836) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v837 + 16))(v837, v835);
        }
LABEL_1187:
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v261 = v10[3];
        if (!v261) {
          goto LABEL_921;
        }
        goto LABEL_1198;
      }
      char v309 = v308;
      unint64_t v310 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v310;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      uint64_t v311 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v311->unint64_t m_identifier = (unint64_t)&unk_1EE9B8558;
      v311[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v312 = cf;
      CFTypeRef cf = 0;
      v311[2].unint64_t m_identifier = (unint64_t)v312;
      *(void *)v905 = v311;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::setThirdPartyCookieBlockingMode((uint64_t)this, v307, v309, (uint64_t *)v905);
LABEL_713:
      uint64_t v79 = *(void *)v905;
      *(void *)v905 = 0;
      if (!v79) {
        goto LABEL_921;
      }
      goto LABEL_1028;
    case 0x1F5:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::Seconds>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v222 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v222;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      char v223 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v223 = &unk_1EE9B8350;
      v223[1] = *(void *)v905;
      uint64_t v224 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v223[2] = v224;
      *(void *)uint64_t v955 = v223;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setTimeToLiveUserInteraction((uint64_t)this, v929.m_identifier, (uint64_t *)v955, *(double *)&cf);
LABEL_541:
      uint64_t v79 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v79) {
        goto LABEL_1028;
      }
      goto LABEL_921;
    case 0x1F6:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v409 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_890;
      }
      *(void *)v905 = v409;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      int v410 = (void *)WTF::fastMalloc((WTF *)0x18);
      *int v410 = &unk_1EE9B85D0;
      v410[1] = *(void *)v905;
      uint64_t v411 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v410[2] = v411;
      *(void *)uint64_t v955 = v410;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setToSameSiteStrictCookiesForTesting((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
LABEL_400:
      uint64_t v339 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v339) {
LABEL_401:
      }
        (*(void (**)(uint64_t))(*(void *)v339 + 8))(v339);
LABEL_402:
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      goto LABEL_890;
    case 0x1F7:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v287 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v287;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      int v288 = (void *)WTF::fastMalloc((WTF *)0x18);
      *int v288 = &unk_1EE9B83A0;
      v288[1] = *(void *)v905;
      uint64_t v289 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v288[2] = v289;
      *(void *)uint64_t v955 = v288;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setTopFrameUniqueRedirectFrom((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
      goto LABEL_505;
    case 0x1F8:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[1])) {
        goto LABEL_507;
      }
      uint64_t v245 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)v32) {
        goto LABEL_507;
      }
      *(void *)v905 = v245;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v246 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v246 = &unk_1EE9B8378;
      v246[1] = *(void *)v905;
      uint64_t v247 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v246[2] = v247;
      *(void *)uint64_t v955 = v246;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::setTopFrameUniqueRedirectTo((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t)v931, (uint64_t *)v955);
LABEL_505:
      uint64_t v450 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v450) {
LABEL_506:
      }
        (*(void (**)(uint64_t))(*(void *)v450 + 8))(v450);
LABEL_507:
      std::__optional_destruct_base<std::tuple<PAL::SessionID,WebCore::RegistrableDomain,WebCore::RegistrableDomain>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v929, v32);
      goto LABEL_921;
    case 0x1F9:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
      if (LOBYTE(v931[0])) {
        WebKit::NetworkProcess::setTrackingPreventionEnabled((uint64_t)this, v929.m_identifier, cf);
      }
      goto LABEL_921;
    case 0x1FA:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::RegistrableDomain>>((uint64_t)&v929, a3);
      if (!LOBYTE(v931[0])) {
        goto LABEL_921;
      }
      uint64_t v290 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_582;
      }
      *(void *)v905 = v290;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      uint64_t v291 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v291 = &unk_1EE9B8288;
      v291[1] = *(void *)v905;
      uint64_t v292 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v291[2] = v292;
      *(void *)uint64_t v955 = v291;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      WebKit::NetworkProcess::setVeryPrevalentResource((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
LABEL_536:
      uint64_t v517 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v517) {
LABEL_580:
      }
        (*(void (**)(uint64_t))(*(void *)v517 + 8))(v517);
LABEL_581:
      if (LOBYTE(v931[0])) {
        goto LABEL_582;
      }
      goto LABEL_921;
    case 0x1FB:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::SharedPreferencesForWebProcess>>((uint64_t *)a3, &v929);
      if (!v932[16]) {
        goto LABEL_921;
      }
      uint64_t v420 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      *(void *)v905 = v420;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      unsigned __int16 v421 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unsigned __int16 v421 = &unk_1EE9B7A80;
      v421[1] = *(void *)v905;
      uint64_t v422 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v421[2] = v422;
      *(void *)uint64_t v955 = v421;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!v932[16]) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::sharedPreferencesForWebProcessDidChange((uint64_t)this, v929.m_identifier, (long long *)&cf, (uint64_t *)v955);
LABEL_574:
      uint64_t v79 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v79) {
        goto LABEL_1028;
      }
      goto LABEL_921;
    case 0x1FC:
      uint64_t v325 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v326 = (void *)v325;
      unint64_t v327 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v327;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      int v328 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v328->unint64_t m_identifier = (unint64_t)&unk_1EE9B8760;
      v328[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v329 = cf;
      CFTypeRef cf = 0;
      v328[2].unint64_t m_identifier = (unint64_t)v329;
      *(void *)v905 = v328;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart((uint64_t)this, v326, (uint64_t *)v905);
      goto LABEL_713;
    case 0x1FD:
      uint64_t v412 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v413 = v412;
      unint64_t v414 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v414;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      v415 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v415->unint64_t m_identifier = (unint64_t)&unk_1EE9B80A8;
      v415[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v416 = cf;
      CFTypeRef cf = 0;
      v415[2].unint64_t m_identifier = (unint64_t)v416;
      *(void *)v905 = v415;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::statisticsDatabaseHasAllTables((uint64_t)this, v413, (uint64_t *)v905);
      goto LABEL_601;
    case 0x1FE:
      uint64_t v387 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v388
        && (unint64_t v389 = v387, IPC::Decoder::decode<WebCore::PrivateClickMeasurement>((IPC::Decoder *)v10, (uint64_t)v905),
                         v919))
      {
        v929.unint64_t m_identifier = v389;
        LOBYTE(cf) = v905[0];
        long long v391 = *(_OWORD *)&v905[8];
        *(void *)&v905[8] = 0;
        *(void *)&v905[16] = 0;
        *(_OWORD *)v931 = v391;
        *(_OWORD *)uint64_t v932 = *(_OWORD *)v906;
        *(_OWORD *)&v932[9] = *(_OWORD *)&v906[9];
        v932[32] = 0;
        char v934 = 0;
        if (v908[112])
        {
          std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>((uint64_t)&v932[32], (uint64_t)&v907);
          char v934 = 1;
        }
        long long v935 = v909;
        long long v936 = v910;
        LOBYTE(v937) = 0;
        LOBYTE(v938) = 0;
        if (v912)
        {
          uint64_t v392 = v911;
          uint64_t v911 = 0;
          uint64_t v937 = v392;
          LOBYTE(v938) = 1;
        }
        long long v393 = v914;
        long long v939 = v913;
        long long v913 = 0u;
        long long v914 = 0u;
        long long v940 = v393;
        LOBYTE(v941) = 0;
        char v943 = 0;
        if (v917)
        {
          long long v394 = v915;
          long long v915 = 0uLL;
          long long v941 = v394;
          uint64_t v395 = v916;
          uint64_t v916 = 0;
          uint64_t v942 = v395;
          char v943 = 1;
        }
        uint64_t v396 = v918;
        uint64_t v918 = 0;
        uint64_t v944 = v396;
        char v945 = 1;
        if (!v919) {
          goto LABEL_386;
        }
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v905, v390);
        if (v945) {
          goto LABEL_386;
        }
      }
      else
      {
        LOBYTE(v929.m_identifier) = 0;
        char v945 = 0;
      }
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v604 = v10[3];
      if (!v604) {
        goto LABEL_921;
      }
      if (!a3) {
        goto LABEL_921;
      }
      (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v604 + 16))(v604, a2);
      if (!v945) {
        goto LABEL_921;
      }
LABEL_386:
      WebKit::NetworkProcess::storePrivateClickMeasurement((uint64_t)this, v929.m_identifier, (uint64_t)&cf);
      if (v945) {
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&cf, (WTF::StringImpl *)a2);
      }
      goto LABEL_921;
    case 0x1FF:
      uint64_t v262 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      uint64_t v263 = v262;
      unint64_t v264 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v264;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      v265 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v265->unint64_t m_identifier = (unint64_t)&unk_1EE9B8670;
      v265[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v266 = cf;
      CFTypeRef cf = 0;
      v265[2].unint64_t m_identifier = (unint64_t)v266;
      *(void *)v905 = v265;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::storeServiceWorkerRegistrations((uint64_t)this, v263, (uint64_t *)v905);
      goto LABEL_713;
    case 0x200:
      unint64_t v322 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)a2) {
        goto LABEL_921;
      }
      v929.unint64_t m_identifier = v322;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
      v323 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
      v323->unint64_t m_identifier = (unint64_t)&unk_1EE9B8648;
      v323[1].unint64_t m_identifier = v929.m_identifier;
      CFTypeRef v324 = cf;
      CFTypeRef cf = 0;
      v323[2].unint64_t m_identifier = (unint64_t)v324;
      *(void *)v905 = v323;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
      WebKit::NetworkProcess::syncLocalStorage((uint64_t)this, (uint64_t *)v905);
      goto LABEL_713;
    case 0x203:
      uint64_t v296 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v297) {
        goto LABEL_789;
      }
      unint64_t v298 = v296;
      IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v10, v297, (uint64_t)v905);
      if (!v905[16]) {
        goto LABEL_789;
      }
      v929.unint64_t m_identifier = v298;
      CFTypeRef cf = *(CFTypeRef *)v905;
      uint64_t v300 = *(WTF::StringImpl **)&v905[8];
      *(void *)v905 = 0;
      *(void *)&v905[8] = 0;
      v931[0] = v300;
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v905, v299);
      LOBYTE(v931[1]) = 1;
      uint64_t v301 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if (!(_BYTE)a2) {
        goto LABEL_898;
      }
      *(void *)v905 = v301;
      uint64_t v10 = (uint64_t *)&v905[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
      v302 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v302 = &unk_1EE9B7D10;
      v302[1] = *(void *)v905;
      uint64_t v303 = *(void *)&v905[8];
      *(void *)&v905[8] = 0;
      v302[2] = v303;
      *(void *)uint64_t v955 = v302;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
      if (!LOBYTE(v931[1])) {
        goto LABEL_1091;
      }
      WebKit::NetworkProcess::updatePrevalentDomainsToBlockCookiesFor((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
      uint64_t v304 = *(void *)v955;
      *(void *)uint64_t v955 = 0;
      if (v304) {
        (*(void (**)(uint64_t))(*(void *)v304 + 8))(v304);
      }
      if (!LOBYTE(v931[1])) {
        goto LABEL_921;
      }
      goto LABEL_898;
    case 0x204:
      IPC::handleMessage<Messages::NetworkProcess::UpdateStorageAccessPromptQuirks,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(a3);
      goto LABEL_921;
    case 0x205:
      uint64_t v330 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v331)
      {
        LOBYTE(v929.m_identifier) = 0;
        v932[48] = 0;
        goto LABEL_1167;
      }
      unint64_t v332 = v330;
      IPC::Decoder::decode<WebCore::ClientOrigin>(v10, v905);
      char v333 = BYTE8(v907);
      if (!BYTE8(v907)) {
        goto LABEL_720;
      }
      uint64_t v334 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v10);
      if ((v334 & 0xFF00000000) != 0)
      {
        if (!BYTE8(v907)) {
          goto LABEL_1091;
        }
        int v335 = v334;
        v929.unint64_t m_identifier = v332;
        LOBYTE(cf) = 0;
        *(_DWORD *)uint64_t v932 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v905);
        v932[8] = 0;
        *(_DWORD *)&v932[32] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v932[8], (uint64_t)&v906[8]);
        *(_DWORD *)&v932[40] = v335;
        char v333 = 1;
      }
      else
      {
        char v333 = 0;
LABEL_720:
        LOBYTE(v929.m_identifier) = 0;
      }
      v932[48] = v333;
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v905);
      if (v932[48]) {
        goto LABEL_722;
      }
LABEL_1167:
      a2 = (atomic_uchar *volatile *)*v10;
      a3 = (IPC::Decoder *)v10[1];
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v826 = v10[3];
      if (!v826) {
        goto LABEL_921;
      }
      if (!a3) {
        goto LABEL_921;
      }
      (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v826 + 16))(v826, a2);
      if (!v932[48]) {
        goto LABEL_921;
      }
LABEL_722:
      uint64_t v627 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if ((_BYTE)a2)
      {
        *(void *)v905 = v627;
        uint64_t v10 = (uint64_t *)&v905[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        unint64_t v628 = (void *)WTF::fastMalloc((WTF *)0x18);
        *unint64_t v628 = &unk_1EE9B7BA8;
        v628[1] = *(void *)v905;
        uint64_t v629 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v628[2] = v629;
        *(void *)uint64_t v955 = v628;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        if (!v932[48]) {
          goto LABEL_1091;
        }
        WebKit::NetworkProcess::websiteDataOriginDirectoryForTesting((atomic_uchar *)this, (WTF::StringImpl *)v929.m_identifier, (uint64_t)&cf, *(unsigned int *)&v932[40], (atomic_uchar **)v955);
        uint64_t v630 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v630) {
          (*(void (**)(uint64_t))(*(void *)v630 + 8))(v630);
        }
      }
      if (v932[48])
      {
        if (*(_DWORD *)&v932[32] != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9B7B38[*(unsigned int *)&v932[32]])(v905, &v932[8]);
        }
        *(_DWORD *)&v932[32] = -1;
        if (*(_DWORD *)v932 != -1) {
LABEL_802:
        }
          ((void (*)(unsigned char *, CFTypeRef *))off_1EE9B7B38[*(unsigned int *)v932])(v905, &cf);
      }
      goto LABEL_921;
    default:
      if (*((unsigned __int16 *)a3 + 25) <= 0x1AEu)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x16A:
            IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>(a3, &v929);
            if (LOBYTE(v931[0]))
            {
              uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
              if (!(_BYTE)a2) {
                goto LABEL_1035;
              }
              *(void *)v905 = v16;
              uint64_t v10 = (uint64_t *)&v905[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
              uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v17 = &unk_1EE9B8BC0;
              v17[1] = *(void *)v905;
              uint64_t v18 = *(void *)&v905[8];
              *(void *)&v905[8] = 0;
              v17[2] = v18;
              *(void *)uint64_t v955 = v17;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
              if (LOBYTE(v931[0]))
              {
                WebKit::NetworkProcess::abortBackgroundFetch((uint64_t)this, v929.m_identifier, (WTF::StringImpl **)&cf, (uint64_t *)v955);
                goto LABEL_1033;
              }
              goto LABEL_1091;
            }
            goto LABEL_921;
          case 0x16B:
          case 0x16D:
          case 0x170:
          case 0x172:
          case 0x173:
          case 0x174:
          case 0x175:
          case 0x176:
          case 0x179:
          case 0x17A:
          case 0x17C:
          case 0x17D:
          case 0x17F:
          case 0x180:
          case 0x181:
            goto LABEL_921;
          case 0x16C:
            uint64_t v715 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (!v716) {
              goto LABEL_1117;
            }
            unint64_t v717 = v715;
            uint64_t v718 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if (!v719) {
              goto LABEL_1117;
            }
            v720 = (const void *)v718;
            IPC::ArgumentCoder<WebKit::WebPageNetworkParameters,void>::decode((IPC::Decoder *)v10, (uint64_t)v905);
            if (!v905[8])
            {
              uint64_t v879 = *v10;
              uint64_t v880 = v10[1];
              *uint64_t v10 = 0;
              v10[1] = 0;
              uint64_t v881 = v10[3];
              if (v881 && v880) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v881 + 16))(v881, v879);
              }
              goto LABEL_1117;
            }
            v929.unint64_t m_identifier = v717;
            CFTypeRef cf = v720;
            v931[0] = *(WTF::StringImpl **)v905;
            LOBYTE(v931[1]) = 1;
            WebKit::NetworkProcess::addWebPageNetworkParameters((uint64_t)this, v717, (uint64_t)v720, (uint64_t)v931);
            if (LOBYTE(v931[1])) {
              goto LABEL_997;
            }
            goto LABEL_921;
          case 0x16E:
            uint64_t v724 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
            if (!v725) {
              goto LABEL_1117;
            }
            unint64_t v726 = v724;
            IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v10, (uint64_t)v905);
            if (!v905[8]) {
              goto LABEL_1117;
            }
            uint64_t v727 = *(WTF::StringImpl **)v905;
            v929.unint64_t m_identifier = v726;
            CFTypeRef cf = *(CFTypeRef *)v905;
            LOBYTE(v931[0]) = 1;
            uint64_t v728 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if (!(_BYTE)a2) {
              goto LABEL_969;
            }
            *(void *)v905 = v728;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
            v729 = (void *)WTF::fastMalloc((WTF *)0x18);
            void *v729 = &unk_1EE9B8A80;
            v729[1] = *(void *)v905;
            uint64_t v730 = *(void *)&v905[8];
            *(void *)&v905[8] = 0;
            v729[2] = v730;
            *(void *)uint64_t v955 = v729;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
            WebKit::NetworkProcess::allowFileAccessFromWebProcess((uint64_t)this, v726, (const WTF::String *)&cf, (uint64_t *)v955);
            uint64_t v731 = *(void *)v955;
            *(void *)uint64_t v955 = 0;
            if (v731) {
              (*(void (**)(uint64_t))(*(void *)v731 + 8))(v731);
            }
            if (LOBYTE(v931[0]))
            {
              uint64_t v727 = (WTF::StringImpl *)cf;
LABEL_969:
              CFTypeRef cf = 0;
              if (v727)
              {
                if (*(_DWORD *)v727 == 2)
                {
                  v679 = v727;
                  goto LABEL_1124;
                }
                *(_DWORD *)v727 -= 2;
              }
            }
            break;
          case 0x16F:
            uint64_t v732 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
            if (!(_BYTE)v733) {
              goto LABEL_1117;
            }
            unint64_t v734 = v732;
            IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v10, v733, (uint64_t)v905);
            if (!v905[16]) {
              goto LABEL_1117;
            }
            v929.unint64_t m_identifier = v734;
            CFTypeRef cf = *(CFTypeRef *)v905;
            int v736 = *(WTF::StringImpl **)&v905[8];
            *(void *)v905 = 0;
            *(void *)&v905[8] = 0;
            v931[0] = v736;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v905, v735);
            LOBYTE(v931[1]) = 1;
            uint64_t v737 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if (!(_BYTE)a2) {
              goto LABEL_979;
            }
            *(void *)v905 = v737;
            uint64_t v10 = (uint64_t *)&v905[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
            uint64_t v738 = (void *)WTF::fastMalloc((WTF *)0x18);
            *uint64_t v738 = &unk_1EE9B8AA8;
            v738[1] = *(void *)v905;
            uint64_t v739 = *(void *)&v905[8];
            *(void *)&v905[8] = 0;
            v738[2] = v739;
            *(void *)uint64_t v955 = v738;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
            if (!LOBYTE(v931[1])) {
              goto LABEL_1091;
            }
            WebKit::NetworkProcess::allowFilesAccessFromWebProcess((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
            uint64_t v740 = *(void *)v955;
            *(void *)uint64_t v955 = 0;
            if (v740) {
              (*(void (**)(uint64_t))(*(void *)v740 + 8))(v740);
            }
            if (LOBYTE(v931[1])) {
LABEL_979:
            }
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, (void *)a2);
            goto LABEL_921;
          case 0x171:
            uint64_t v710 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
            if ((_BYTE)a2)
            {
              uint64_t v711 = v710;
              unint64_t v712 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
              if ((_BYTE)a2)
              {
                v929.unint64_t m_identifier = v712;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
                v713 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
                v713->unint64_t m_identifier = (unint64_t)&unk_1EE9B8A08;
                v713[1].unint64_t m_identifier = v929.m_identifier;
                CFTypeRef v714 = cf;
                CFTypeRef cf = 0;
                v713[2].unint64_t m_identifier = (unint64_t)v714;
                *(void *)v905 = v713;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
                WebKit::NetworkProcess::appPrivacyReportTestingData((uint64_t)this, v711, (uint64_t *)v905);
                uint64_t v79 = *(void *)v905;
                *(void *)v905 = 0;
                if (v79) {
                  goto LABEL_1028;
                }
              }
            }
            goto LABEL_921;
          case 0x177:
            uint64_t v741 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
            if ((_BYTE)a2)
            {
              uint64_t v742 = v741;
              unint64_t v743 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
              if ((_BYTE)a2)
              {
                v929.unint64_t m_identifier = v743;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
                v744 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
                v744->unint64_t m_identifier = (unint64_t)&unk_1EE9B8A30;
                v744[1].unint64_t m_identifier = v929.m_identifier;
                CFTypeRef v745 = cf;
                CFTypeRef cf = 0;
                v744[2].unint64_t m_identifier = (unint64_t)v745;
                *(void *)v905 = v744;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
                WebKit::NetworkProcess::clearAppPrivacyReportTestingData((uint64_t)this, v742, (uint64_t *)v905);
                goto LABEL_713;
              }
            }
            goto LABEL_921;
          case 0x178:
            unint64_t v721 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if ((_BYTE)a2)
            {
              v929.unint64_t m_identifier = v721;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
              uint64_t v722 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
              v722->unint64_t m_identifier = (unint64_t)&unk_1EE9B89E0;
              v722[1].unint64_t m_identifier = v929.m_identifier;
              CFTypeRef v723 = cf;
              CFTypeRef cf = 0;
              v722[2].unint64_t m_identifier = (unint64_t)v723;
              *(void *)v905 = v722;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
              WebKit::NetworkProcess::clearBundleIdentifier((WebCore *)this, (uint64_t *)v905);
              goto LABEL_713;
            }
            goto LABEL_921;
          case 0x17B:
            unint64_t v705 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
            if ((_BYTE)a2)
            {
              v706.unint64_t m_identifier = v705;
              WebKit::NetworkProcess::clearProxyConfigData((WebKit::NetworkProcess *)this, v706);
            }
            goto LABEL_921;
          case 0x17E:
            IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>(a3, &v929);
            if (LOBYTE(v931[0]))
            {
              uint64_t v707 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
              if (!(_BYTE)a2) {
                goto LABEL_1035;
              }
              *(void *)v905 = v707;
              uint64_t v10 = (uint64_t *)&v905[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
              v708 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v708 = &unk_1EE9B8C38;
              v708[1] = *(void *)v905;
              uint64_t v709 = *(void *)&v905[8];
              *(void *)&v905[8] = 0;
              v708[2] = v709;
              *(void *)uint64_t v955 = v708;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
              if (LOBYTE(v931[0]))
              {
                WebKit::NetworkProcess::clickBackgroundFetch((uint64_t)this, v929.m_identifier, (WTF::StringImpl **)&cf, (uint64_t *)v955);
                goto LABEL_1033;
              }
              goto LABEL_1091;
            }
            goto LABEL_921;
          case 0x182:
            uint64_t v746 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
            if ((_BYTE)a2)
            {
              uint64_t v747 = v746;
              unint64_t v748 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
              if ((_BYTE)a2)
              {
                v929.unint64_t m_identifier = v748;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
                uint64_t v749 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
                v749->unint64_t m_identifier = (unint64_t)&unk_1EE9B8A58;
                v749[1].unint64_t m_identifier = v929.m_identifier;
                CFTypeRef v750 = cf;
                CFTypeRef cf = 0;
                v749[2].unint64_t m_identifier = (unint64_t)v750;
                *(void *)v905 = v749;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
                WebKit::NetworkProcess::countNonDefaultSessionSets((uint64_t)this, v747, (uint64_t *)v905);
                uint64_t v79 = *(void *)v905;
                *(void *)v905 = 0;
                if (v79) {
                  goto LABEL_1028;
                }
              }
            }
            goto LABEL_921;
          default:
            switch(*((_WORD *)a3 + 25))
            {
              case 0x192:
                uint64_t v632 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
                if ((_BYTE)a2)
                {
                  uint64_t v633 = v632;
                  unint64_t v634 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
                  if ((_BYTE)a2)
                  {
                    v929.unint64_t m_identifier = v634;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
                    unint64_t v635 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
                    v635->unint64_t m_identifier = (unint64_t)&unk_1EE9B8B70;
                    v635[1].unint64_t m_identifier = v929.m_identifier;
                    CFTypeRef v636 = cf;
                    CFTypeRef cf = 0;
                    v635[2].unint64_t m_identifier = (unint64_t)v636;
                    *(void *)v905 = v635;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
                    WebKit::NetworkProcess::getAllBackgroundFetchIdentifiers((uint64_t)this, v633, (uint64_t *)v905);
                    uint64_t v79 = *(void *)v905;
                    *(void *)v905 = 0;
                    if (v79) {
                      goto LABEL_1028;
                    }
                  }
                }
                break;
              case 0x194:
                uint64_t v779 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
                if ((_BYTE)a2)
                {
                  uint64_t v780 = v779;
                  unint64_t v781 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
                  if ((_BYTE)a2)
                  {
                    v929.unint64_t m_identifier = v781;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
                    uint64_t v782 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
                    v782->unint64_t m_identifier = (unint64_t)&unk_1EE9B8CD8;
                    v782[1].unint64_t m_identifier = v929.m_identifier;
                    CFTypeRef v783 = cf;
                    CFTypeRef cf = 0;
                    v782[2].unint64_t m_identifier = (unint64_t)v783;
                    *(void *)v905 = v782;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
                    WebKit::NetworkProcess::getAppBadgeForTesting((uint64_t)this, v780, (uint64_t *)v905);
                    uint64_t v79 = *(void *)v905;
                    *(void *)v905 = 0;
                    if (v79) {
                      goto LABEL_1028;
                    }
                  }
                }
                break;
              case 0x195:
                IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>(a3, &v929);
                if (LOBYTE(v931[0]))
                {
                  uint64_t v775 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
                  if (!(_BYTE)a2) {
                    goto LABEL_1035;
                  }
                  *(void *)v905 = v775;
                  uint64_t v10 = (uint64_t *)&v905[8];
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
                  unsigned int v776 = (void *)WTF::fastMalloc((WTF *)0x18);
                  *unsigned int v776 = &unk_1EE9B8B98;
                  v776[1] = *(void *)v905;
                  uint64_t v777 = *(void *)&v905[8];
                  *(void *)&v905[8] = 0;
                  v776[2] = v777;
                  *(void *)uint64_t v955 = v776;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
                  if (!LOBYTE(v931[0])) {
                    goto LABEL_1091;
                  }
                  WebKit::NetworkProcess::getBackgroundFetchState((uint64_t)this, v929.m_identifier, (WTF::StringImpl **)&cf, (uint64_t *)v955);
                  uint64_t v778 = *(void *)v955;
                  *(void *)uint64_t v955 = 0;
                  if (!v778) {
                    goto LABEL_1035;
                  }
                  goto LABEL_1034;
                }
                break;
              case 0x196:
                uint64_t v770 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
                if ((_BYTE)a2)
                {
                  uint64_t v771 = v770;
                  unint64_t v772 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
                  if ((_BYTE)a2)
                  {
                    v929.unint64_t m_identifier = v772;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
                    unint64_t v773 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
                    v773->unint64_t m_identifier = (unint64_t)&unk_1EE9B8AD0;
                    v773[1].unint64_t m_identifier = v929.m_identifier;
                    CFTypeRef v774 = cf;
                    CFTypeRef cf = 0;
                    v773[2].unint64_t m_identifier = (unint64_t)v774;
                    *(void *)v905 = v773;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
                    WebKit::NetworkProcess::getPendingPushMessage((uint64_t)this, v771, (uint64_t *)v905);
                    uint64_t v79 = *(void *)v905;
                    *(void *)v905 = 0;
                    if (v79) {
                      goto LABEL_1028;
                    }
                  }
                }
                break;
              case 0x197:
                uint64_t v765 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
                if ((_BYTE)a2)
                {
                  uint64_t v766 = v765;
                  unint64_t v767 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
                  if ((_BYTE)a2)
                  {
                    v929.unint64_t m_identifier = v767;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&cf, v11);
                    v768 = (SessionID *)WTF::fastMalloc((WTF *)0x18);
                    v768->unint64_t m_identifier = (unint64_t)&unk_1EE9B8AF8;
                    v768[1].unint64_t m_identifier = v929.m_identifier;
                    CFTypeRef v769 = cf;
                    CFTypeRef cf = 0;
                    v768[2].unint64_t m_identifier = (unint64_t)v769;
                    *(void *)v905 = v768;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
                    WebKit::NetworkProcess::getPendingPushMessages((uint64_t)this, v766, (uint64_t *)v905);
                    uint64_t v79 = *(void *)v905;
                    *(void *)v905 = 0;
                    if (v79) {
                      goto LABEL_1028;
                    }
                  }
                }
                break;
              case 0x19E:
                IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>(a3, &v929);
                if (v932[16])
                {
                  uint64_t v761 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
                  if ((_BYTE)a2)
                  {
                    *(void *)v905 = v761;
                    uint64_t v10 = (uint64_t *)&v905[8];
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
                    v762 = (void *)WTF::fastMalloc((WTF *)0x18);
                    void *v762 = &unk_1EE9B8CB0;
                    v762[1] = *(void *)v905;
                    uint64_t v763 = *(void *)&v905[8];
                    *(void *)&v905[8] = 0;
                    v762[2] = v763;
                    *(void *)uint64_t v955 = v762;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
                    if (!v932[16]) {
                      goto LABEL_1091;
                    }
                    WebKit::NetworkProcess::hasPushSubscriptionForTesting((uint64_t)this, v929.m_identifier, (uint64_t *)&cf, (uint64_t *)v955);
                    uint64_t v764 = *(void *)v955;
                    *(void *)uint64_t v955 = 0;
                    if (v764) {
                      (*(void (**)(uint64_t))(*(void *)v764 + 8))(v764);
                    }
                  }
                  if (v932[16]) {
                    goto LABEL_1036;
                  }
                }
                break;
              default:
                goto LABEL_921;
            }
            goto LABEL_921;
        }
        goto LABEL_921;
      }
      if (*((unsigned __int16 *)a3 + 25) <= 0x1D8u)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x1B3:
            IPC::Decoder::decode<WebCore::NotificationData>(a3, v905);
            if ((_BYTE)v914)
            {
              unsigned __int16 v617 = IPC::Decoder::decode<WebKit::UseDownloadPlaceholder>(v10);
              if (v617 > 0xFFu)
              {
                if (!(_BYTE)v914) {
                  goto LABEL_1091;
                }
                char v793 = v617;
                std::__tuple_leaf<0ul,WebCore::NotificationData,false>::__tuple_leaf[abi:sn180100]<WebCore::NotificationData,void>((uint64_t)&v929, (uint64_t)v905);
                BYTE8(v939) = v793;
                int v618 = 1;
              }
              else
              {
                int v618 = 0;
                LOBYTE(v929.m_identifier) = 0;
              }
              BYTE8(v940) = v618;
              if ((_BYTE)v914)
              {
                WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v905, (void *)a2);
                int v618 = BYTE8(v940);
              }
              if (v618) {
                goto LABEL_1072;
              }
            }
            else
            {
              LOBYTE(v929.m_identifier) = 0;
              BYTE8(v940) = 0;
            }
            a2 = (atomic_uchar *volatile *)*v10;
            a3 = (IPC::Decoder *)v10[1];
            *uint64_t v10 = 0;
            v10[1] = 0;
            uint64_t v791 = v10[3];
            if (!v791) {
              goto LABEL_921;
            }
            if (!a3) {
              goto LABEL_921;
            }
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v791 + 16))(v791, a2);
            if (!BYTE8(v940)) {
              goto LABEL_921;
            }
LABEL_1072:
            uint64_t v794 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if ((_BYTE)a2)
            {
              *(void *)v905 = v794;
              uint64_t v10 = (uint64_t *)&v905[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
              unsigned int v795 = (void *)WTF::fastMalloc((WTF *)0x18);
              *unsigned int v795 = &unk_1EE9B8B48;
              v795[1] = *(void *)v905;
              uint64_t v796 = *(void *)&v905[8];
              *(void *)&v905[8] = 0;
              v795[2] = v796;
              *(void *)uint64_t v955 = v795;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
              if (!BYTE8(v940)) {
                goto LABEL_1091;
              }
              WebKit::NetworkProcess::processNotificationEvent((uint64_t)this, (uint64_t)&v929, BYTE8(v939), (uint64_t *)v955);
              uint64_t v797 = *(void *)v955;
              *(void *)uint64_t v955 = 0;
              if (v797) {
                (*(void (**)(uint64_t))(*(void *)v797 + 8))(v797);
              }
            }
            if (BYTE8(v940)) {
              WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)&v929, (void *)a2);
            }
            goto LABEL_921;
          case 0x1B4:
            uint64_t v688 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (!v689)
            {
              LOBYTE(v929.m_identifier) = 0;
              LOBYTE(v937) = 0;
              goto LABEL_1262;
            }
            unint64_t v690 = v688;
            IPC::Decoder::decode<WebKit::WebPushMessage>(v10, v905);
            char v691 = BYTE8(v910);
            if (!BYTE8(v910)) {
              goto LABEL_929;
            }
            unsigned __int16 v692 = IPC::Decoder::decode<WebCore::NotificationDirection>(v10);
            if (v692 > 0xFFu)
            {
              if (!BYTE8(v910)) {
                goto LABEL_1091;
              }
              char v798 = v692;
              v929.unint64_t m_identifier = v690;
              LOBYTE(cf) = 0;
              LOBYTE(v931[1]) = 0;
              if (v905[16])
              {
                CFTypeRef cf = *(CFTypeRef *)v905;
                v799 = *(WTF::StringImpl **)&v905[8];
                *(void *)v905 = 0;
                *(void *)&v905[8] = 0;
                v931[0] = v799;
                LOBYTE(v931[1]) = 1;
              }
              long long v800 = *(_OWORD *)v906;
              *(_OWORD *)uint64_t v906 = 0uLL;
              *(_OWORD *)uint64_t v932 = v800;
              *(_OWORD *)&v932[16] = *(_OWORD *)&v906[16];
              *(_OWORD *)&v932[32] = v907;
              *(_DWORD *)&v906[16] &= ~1u;
              std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v932[48], (uint64_t)v908);
              BYTE8(v936) = v798;
              char v691 = 1;
            }
            else
            {
              char v691 = 0;
LABEL_929:
              LOBYTE(v929.m_identifier) = 0;
            }
            LOBYTE(v937) = v691;
            std::__optional_destruct_base<WebKit::WebPushMessage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v905, (WTF::StringImpl *)a2);
            if ((_BYTE)v937) {
              goto LABEL_1083;
            }
LABEL_1262:
            a2 = (atomic_uchar *volatile *)*v10;
            a3 = (IPC::Decoder *)v10[1];
            *uint64_t v10 = 0;
            v10[1] = 0;
            uint64_t v878 = v10[3];
            if (!v878) {
              goto LABEL_921;
            }
            if (!a3) {
              goto LABEL_921;
            }
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v878 + 16))(v878, a2);
            if (!(_BYTE)v937) {
              goto LABEL_921;
            }
LABEL_1083:
            uint64_t v801 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if ((_BYTE)a2)
            {
              *(void *)v905 = v801;
              uint64_t v10 = (uint64_t *)&v905[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
              v802 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v802 = &unk_1EE9B8B20;
              v802[1] = *(void *)v905;
              uint64_t v803 = *(void *)&v905[8];
              *(void *)&v905[8] = 0;
              v802[2] = v803;
              *(void *)uint64_t v955 = v802;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
              if (!(_BYTE)v937) {
                goto LABEL_1091;
              }
              WebKit::NetworkProcess::processPushMessage((uint64_t)this, v929.m_identifier, (uint64_t)&cf, BYTE8(v936), (uint64_t *)v955);
              uint64_t v804 = *(void *)v955;
              *(void *)uint64_t v955 = 0;
              if (v804) {
                (*(void (**)(uint64_t))(*(void *)v804 + 8))(v804);
              }
            }
            if ((_BYTE)v937)
            {
              std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v932[48], (WTF::StringImpl *)a2);
              unint64_t v805 = *(WTF::StringImpl **)&v932[8];
              *(void *)&v932[8] = 0;
              if (v805)
              {
                if (*(_DWORD *)v805 == 2) {
                  WTF::StringImpl::destroy(v805, (WTF::StringImpl *)a2);
                }
                else {
                  *(_DWORD *)v805 -= 2;
                }
              }
              v809 = *(WTF::StringImpl **)v932;
              *(void *)uint64_t v932 = 0;
              if (v809)
              {
                if (*(_DWORD *)v809 == 2) {
                  WTF::StringImpl::destroy(v809, (WTF::StringImpl *)a2);
                }
                else {
                  *(_DWORD *)v809 -= 2;
                }
              }
              if (LOBYTE(v931[1]))
              {
                char v810 = (WTF *)cf;
                if (cf)
                {
                  CFTypeRef cf = 0;
                  LODWORD(v931[0]) = 0;
                  WTF::fastFree(v810, (void *)a2);
                }
              }
            }
            goto LABEL_921;
          case 0x1B5:
          case 0x1B6:
          case 0x1B7:
          case 0x1B8:
          case 0x1B9:
            goto LABEL_921;
          case 0x1BA:
            uint64_t v693 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v694 && (unint64_t v695 = v693, IPC::Decoder::decode<WebCore::SecurityOriginData>(v10, v905), v906[8]))
            {
              v929.unint64_t m_identifier = v695;
              LOBYTE(cf) = 0;
              *(_DWORD *)uint64_t v932 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v905);
              v932[8] = 1;
              if (!v906[8]) {
                goto LABEL_935;
              }
              if (*(_DWORD *)v906 == -1) {
                goto LABEL_935;
              }
              ((void (*)(unsigned char *, unsigned char *))off_1EE9B7B38[*(unsigned int *)v906])(v955, v905);
              if (v932[8]) {
                goto LABEL_935;
              }
            }
            else
            {
              LOBYTE(v929.m_identifier) = 0;
              v932[8] = 0;
            }
            a2 = (atomic_uchar *volatile *)*v10;
            a3 = (IPC::Decoder *)v10[1];
            *uint64_t v10 = 0;
            v10[1] = 0;
            uint64_t v787 = v10[3];
            if (!v787) {
              goto LABEL_921;
            }
            if (!a3) {
              goto LABEL_921;
            }
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v787 + 16))(v787, a2);
            if (!v932[8]) {
              goto LABEL_921;
            }
LABEL_935:
            uint64_t v696 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if ((_BYTE)a2)
            {
              *(void *)v905 = v696;
              uint64_t v10 = (uint64_t *)&v905[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
              v697 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v697 = &unk_1EE9B8C88;
              v697[1] = *(void *)v905;
              uint64_t v698 = *(void *)&v905[8];
              *(void *)&v905[8] = 0;
              v697[2] = v698;
              *(void *)uint64_t v955 = v697;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
              if (!v932[8]) {
                goto LABEL_1091;
              }
              WebKit::NetworkProcess::removePushSubscriptionsForOrigin((uint64_t)this, v929.m_identifier, (uint64_t)&cf, (uint64_t *)v955);
              uint64_t v699 = *(void *)v955;
              *(void *)uint64_t v955 = 0;
              if (v699) {
                (*(void (**)(uint64_t))(*(void *)v699 + 8))(v699);
              }
            }
            if (v932[8]) {
              goto LABEL_940;
            }
            goto LABEL_921;
          case 0x1BB:
            uint64_t v700 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
            if (v701
              && (uint64_t v702 = v700,
                  v703 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10),
                  v704))
            {
              WebKit::NetworkProcess::removeWebPageNetworkParameters((uint64_t)this, v702, v703);
            }
            else
            {
              a2 = (atomic_uchar *volatile *)*v10;
              a3 = (IPC::Decoder *)v10[1];
              *uint64_t v10 = 0;
              v10[1] = 0;
              uint64_t v261 = v10[3];
              if (v261) {
                goto LABEL_914;
              }
            }
            goto LABEL_921;
          default:
            if (v13 == 431)
            {
              IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>(a3, &v929);
              if (!LOBYTE(v931[0])) {
                goto LABEL_921;
              }
              uint64_t v784 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
              if ((_BYTE)a2)
              {
                *(void *)v905 = v784;
                uint64_t v10 = (uint64_t *)&v905[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
                IntPoint v785 = (void *)WTF::fastMalloc((WTF *)0x18);
                *IntPoint v785 = &unk_1EE9B8BE8;
                v785[1] = *(void *)v905;
                uint64_t v786 = *(void *)&v905[8];
                *(void *)&v905[8] = 0;
                v785[2] = v786;
                *(void *)uint64_t v955 = v785;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
                if (!LOBYTE(v931[0])) {
                  goto LABEL_1091;
                }
                WebKit::NetworkProcess::pauseBackgroundFetch((uint64_t)this, v929.m_identifier, (WTF::StringImpl **)&cf, (uint64_t *)v955);
                goto LABEL_1033;
              }
            }
            else
            {
              if (v13 != 450) {
                goto LABEL_921;
              }
              IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>(a3, &v929);
              if (!LOBYTE(v931[0])) {
                goto LABEL_921;
              }
              uint64_t v681 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
              if ((_BYTE)a2)
              {
                *(void *)v905 = v681;
                uint64_t v10 = (uint64_t *)&v905[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
                v682 = (void *)WTF::fastMalloc((WTF *)0x18);
                void *v682 = &unk_1EE9B8C10;
                v682[1] = *(void *)v905;
                uint64_t v683 = *(void *)&v905[8];
                *(void *)&v905[8] = 0;
                v682[2] = v683;
                *(void *)uint64_t v955 = v682;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
                if (!LOBYTE(v931[0])) {
                  goto LABEL_1091;
                }
                WebKit::NetworkProcess::resumeBackgroundFetch((uint64_t)this, v929.m_identifier, (WTF::StringImpl **)&cf, (uint64_t *)v955);
LABEL_1033:
                uint64_t v778 = *(void *)v955;
                *(void *)uint64_t v955 = 0;
                if (v778) {
LABEL_1034:
                }
                  (*(void (**)(uint64_t))(*(void *)v778 + 8))(v778);
              }
            }
LABEL_1035:
            if (LOBYTE(v931[0]))
            {
LABEL_1036:
              v679 = (WTF::StringImpl *)cf;
              CFTypeRef cf = 0;
              if (v679) {
                goto LABEL_1037;
              }
            }
            goto LABEL_921;
        }
      }
      if (*((unsigned __int16 *)a3 + 25) > 0x1EDu)
      {
        switch(v13)
        {
          case 494:
            IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>((uint64_t)&v929, a3);
            if (LOBYTE(v931[0])) {
              WebKit::NetworkProcess::setStorageSiteValidationEnabled((uint64_t)this, v929.m_identifier, (char)cf);
            }
            goto LABEL_921;
          case 513:
            uint64_t v756 = IPC::Decoder::decode<WebKit::RemoteWorkerType>((uint64_t *)a3);
            if ((unsigned __int16)v756 < 0x100u) {
              goto LABEL_1117;
            }
            unint64_t v11 = (atomic_uchar *volatile *)v756;
            uint64_t v757 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if (!v758) {
              goto LABEL_1117;
            }
            uint64_t v759 = (const void *)v757;
            IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)v10, (uint64_t)v905);
            if (!v905[8]) {
              goto LABEL_1117;
            }
            uint64_t v760 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
            if (!(_BYTE)a2)
            {
              if (v905[8])
              {
                int v898 = *(WTF::StringImpl **)v905;
                *(void *)v905 = 0;
                if (v898)
                {
                  if (*(_DWORD *)v898 == 2) {
                    WTF::StringImpl::destroy(v898, (WTF::StringImpl *)a2);
                  }
                  else {
                    *(_DWORD *)v898 -= 2;
                  }
                }
              }
              goto LABEL_1117;
            }
            if (!v905[8]) {
              goto LABEL_1091;
            }
            LOBYTE(v929.m_identifier) = (_BYTE)v11;
            CFTypeRef cf = v759;
            v931[0] = *(WTF::StringImpl **)v905;
            v931[1] = v760;
            v932[0] = 1;
            WebKit::NetworkProcess::terminateRemoteWorkerContextConnectionWhenPossible((uint64_t)this, v11, (uint64_t)v759, v931, (uint64_t)v760);
            if (!v932[0]) {
              goto LABEL_921;
            }
LABEL_997:
            v679 = v931[0];
            v931[0] = 0;
            if (!v679) {
              goto LABEL_921;
            }
            break;
          case 514:
            IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v929);
            if (!(_BYTE)cf) {
              goto LABEL_921;
            }
            uint64_t v675 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if ((_BYTE)a2)
            {
              *(void *)v905 = v675;
              uint64_t v10 = (uint64_t *)&v905[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
              uint64_t v676 = (void *)WTF::fastMalloc((WTF *)0x18);
              *uint64_t v676 = &unk_1EE9B89B8;
              v676[1] = *(void *)v905;
              uint64_t v677 = *(void *)&v905[8];
              *(void *)&v905[8] = 0;
              v676[2] = v677;
              *(void *)uint64_t v955 = v676;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
              if (!(_BYTE)cf) {
                goto LABEL_1091;
              }
              WebKit::NetworkProcess::updateBundleIdentifier((WebCore *)this, (WebCore *)&v929, (uint64_t *)v955);
              uint64_t v678 = *(void *)v955;
              *(void *)uint64_t v955 = 0;
              if (v678) {
                (*(void (**)(uint64_t))(*(void *)v678 + 8))(v678);
              }
            }
            if (!(_BYTE)cf) {
              goto LABEL_921;
            }
            v679 = (WTF::StringImpl *)v929.m_identifier;
            v929.unint64_t m_identifier = 0;
            if (!v679) {
              goto LABEL_921;
            }
            break;
          default:
            goto LABEL_921;
        }
LABEL_1037:
        if (*(_DWORD *)v679 == 2) {
LABEL_1124:
        }
          WTF::StringImpl::destroy(v679, (WTF::StringImpl *)a2);
        else {
          *(_DWORD *)v679 -= 2;
        }
        goto LABEL_921;
      }
      if (v13 == 473)
      {
        IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((uint64_t)&v929, a3);
        if (LOBYTE(v931[0]))
        {
          WebKit::NetworkProcess::setPersistedDomains((uint64_t)this, v929.m_identifier, (WTF::StringImpl *)&cf);
          if (LOBYTE(v931[0]))
          {
            if (cf) {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)cf, (WTF::StringImpl *)a2);
            }
          }
        }
        goto LABEL_921;
      }
      if (v13 == 483)
      {
        uint64_t v751 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v752)
        {
          unint64_t v753 = v751;
          IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v10, v752, (uint64_t)v905);
          if (v905[16])
          {
            v929.unint64_t m_identifier = v753;
            CFTypeRef cf = *(CFTypeRef *)v905;
            uint64_t v755 = *(WTF::StringImpl **)&v905[8];
            *(void *)v905 = 0;
            *(void *)&v905[8] = 0;
            v931[0] = v755;
            WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v905, v754);
            LOBYTE(v931[1]) = 1;
            WebKit::NetworkProcess::setProxyConfigData((uint64_t)this, v753);
            if (LOBYTE(v931[1])) {
              WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, (void *)a2);
            }
            goto LABEL_921;
          }
        }
LABEL_1117:
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v815 = v10[3];
        if (v815 && a3) {
          (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v815 + 16))(v815, a2);
        }
        goto LABEL_921;
      }
      if (v13 != 485) {
        goto LABEL_921;
      }
      uint64_t v637 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v638 || (unint64_t v639 = v637, IPC::Decoder::decode<WebCore::SecurityOriginData>(v10, v905), !v906[8]))
      {
        LOBYTE(v929.m_identifier) = 0;
        v932[16] = 0;
        goto LABEL_1047;
      }
      unint64_t v640 = v10[1];
      uint64_t v641 = *v10;
      unint64_t v642 = v10[2] - *v10;
      if (v640 <= v642)
      {
        uint64_t v882 = 0;
        uint64_t v883 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v884 = v10[3];
        if (v884)
        {
          if (v640)
          {
            (*(void (**)(uint64_t))(*(void *)v884 + 16))(v884);
            uint64_t v883 = *v10;
            uint64_t v882 = v10[1];
          }
          else
          {
            uint64_t v882 = 0;
            uint64_t v883 = 0;
          }
        }
        goto LABEL_1270;
      }
      uint64_t v643 = (unsigned __int8 *)(v641 + v642);
      v10[2] = (uint64_t)(v643 + 1);
      if (!v641)
      {
        uint64_t v882 = v640;
        uint64_t v883 = 0;
LABEL_1270:
        unint64_t v640 = 0;
        uint64_t v641 = 0;
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v885 = v10[3];
        if (v885)
        {
          if (v882)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v885 + 16))(v885, v883, v882);
            uint64_t v641 = *v10;
            unint64_t v640 = v10[1];
          }
          else
          {
            unint64_t v640 = 0;
            uint64_t v641 = 0;
          }
        }
        goto LABEL_1271;
      }
      unsigned int v644 = *v643;
      if (v644 < 2)
      {
        BOOL v645 = v644 != 0;
        v929.unint64_t m_identifier = v639;
        LOBYTE(cf) = 0;
        *(_DWORD *)uint64_t v932 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)v905);
        v932[8] = v645;
        int v646 = 1;
        goto LABEL_752;
      }
LABEL_1271:
      *uint64_t v10 = 0;
      v10[1] = 0;
      uint64_t v886 = v10[3];
      if (v886 && v640) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v886 + 16))(v886, v641);
      }
      int v646 = 0;
      LOBYTE(v929.m_identifier) = 0;
LABEL_752:
      v932[16] = v646;
      if (v906[8] && *(_DWORD *)v906 != -1)
      {
        ((void (*)(unsigned char *, unsigned char *))off_1EE9B7B38[*(unsigned int *)v906])(v955, v905);
        int v646 = v932[16];
      }
      if (!v646)
      {
LABEL_1047:
        a2 = (atomic_uchar *volatile *)*v10;
        a3 = (IPC::Decoder *)v10[1];
        *uint64_t v10 = 0;
        v10[1] = 0;
        uint64_t v788 = v10[3];
        if (!v788) {
          goto LABEL_921;
        }
        if (!a3) {
          goto LABEL_921;
        }
        (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v788 + 16))(v788, a2);
        if (!v932[16]) {
          goto LABEL_921;
        }
      }
      uint64_t v647 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
      if ((_BYTE)a2)
      {
        *(void *)v905 = v647;
        uint64_t v10 = (uint64_t *)&v905[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
        unint64_t v648 = (void *)WTF::fastMalloc((WTF *)0x18);
        *unint64_t v648 = &unk_1EE9B8C60;
        v648[1] = *(void *)v905;
        uint64_t v649 = *(void *)&v905[8];
        *(void *)&v905[8] = 0;
        v648[2] = v649;
        *(void *)uint64_t v955 = v648;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
        if (!v932[16])
        {
LABEL_1091:
          while (1)
          {
            __break(1u);
LABEL_1092:
            int v138 = 0;
            LOBYTE(v929.m_identifier) = 0;
            v932[48] = 0;
LABEL_116:
            if (v955[16]) {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v955, (void *)a2);
            }
LABEL_118:
            if (v904) {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v903, (void *)a2);
            }
LABEL_120:
            if (v902) {
              WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v900, (void *)a2);
            }
            if (!v138) {
              break;
            }
            uint64_t v139 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v10);
            if (!(_BYTE)a2) {
              goto LABEL_128;
            }
            *(void *)v905 = v139;
            uint64_t v10 = (uint64_t *)&v905[8];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v905[8], v11);
            uint64_t v140 = (void *)WTF::fastMalloc((WTF *)0x18);
            *uint64_t v140 = &unk_1EE9B7B58;
            v140[1] = *(void *)v905;
            uint64_t v141 = *(void *)&v905[8];
            *(void *)&v905[8] = 0;
            v140[2] = v141;
            *(void *)uint64_t v955 = v140;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v905[8]);
            if (v932[48])
            {
              WebKit::NetworkProcess::deleteWebsiteDataForOrigins((uint64_t)this, v929.m_identifier, (int)cf, (uint64_t)v931, (uint64_t)v932, (uint64_t)&v932[16], (uint64_t)&v932[32], (uint64_t *)v955);
              uint64_t v142 = *(void *)v955;
              *(void *)uint64_t v955 = 0;
              if (v142) {
                (*(void (**)(uint64_t))(*(void *)v142 + 8))(v142);
              }
              if (v932[48])
              {
LABEL_128:
                WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v932[32], (void *)a2);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v932[16], v143);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v932, v144);
                WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v931, v145);
                goto LABEL_921;
              }
              goto LABEL_921;
            }
          }
LABEL_662:
          a2 = (atomic_uchar *volatile *)*v10;
          a3 = (IPC::Decoder *)v10[1];
          *uint64_t v10 = 0;
          v10[1] = 0;
          uint64_t v261 = v10[3];
          if (!v261) {
            goto LABEL_921;
          }
          goto LABEL_914;
        }
        WebKit::NetworkProcess::setPushAndNotificationsEnabledForOrigin((uint64_t)this, v929.m_identifier, (WebCore::SecurityOriginData *)&cf, v932[8], (uint64_t *)v955);
        uint64_t v650 = *(void *)v955;
        *(void *)uint64_t v955 = 0;
        if (v650) {
          (*(void (**)(uint64_t))(*(void *)v650 + 8))(v650);
        }
      }
      if (!v932[16]) {
        goto LABEL_921;
      }
LABEL_940:
      uint64_t v669 = *(unsigned int *)v932;
      if (*(_DWORD *)v932 != -1) {
        goto LABEL_837;
      }
LABEL_921:
      if (this)
      {
        if (atomic_fetch_add(this + 32, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this + 32);
          (*(void (**)(atomic_uint *, atomic_uchar *volatile *, IPC::Decoder *))(*(void *)this + 8))(this, a2, a3);
        }
      }
      return;
  }
}

void WebKit::WebPageProxy::pageScaleFactorDidChange(WebKit::WebPageProxy *this, IPC::Connection *a2, double a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a3 > 0.0)
  {
    BOOL v4 = a3 == 100.0;
    BOOL v3 = a3 >= 100.0;
  }
  else
  {
    BOOL v3 = 1;
    BOOL v4 = 0;
  }
  if (!v4 && v3)
  {
    uint64_t v6 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v7 = 136446210;
      double v8 = "void WebKit::WebPageProxy::pageScaleFactorDidChange(IPC::Connection &, double)";
      _os_log_fault_impl(&dword_1985F2000, v6, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebPageProxy.cpp 5617: Invalid message dispatched %{public}s", (uint8_t *)&v7, 0xCu);
    }
    *((unsigned char *)a2 + 98) = 1;
  }
  else
  {
    *((double *)this + 89) = a3;
  }
}

void WebKit::GPUProcess::didReceiveGPUProcessMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add(this + 30, 1u);
  BOOL v4 = a3;
  BOOL v5 = a2;
  switch(*((_WORD *)a3 + 25))
  {
    case 'E':
      IPC::Decoder::decode<std::tuple<WebCore::MockMediaDevice>>(a3, v80);
      if (v86) {
        WebKit::GPUProcess::addMockMediaDevice();
      }
      std::__optional_destruct_base<WebCore::MockMediaDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v80, v6);
      goto LABEL_119;
    case 'F':
      IPC::handleMessage<Messages::GPUProcess::AddSession,WebKit::GPUProcess,WebKit::GPUProcess,void ()(PAL::SessionID,WebKit::GPUProcessSessionParameters &&)>(a3, (uint64_t)this);
      goto LABEL_119;
    case 'G':
      *(void *)uint64_t v80 = 0;
      *(void *)&v80[8] = 0;
      WebCore::MockRealtimeMediaSourceCenter::setDevices();
      WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v80, v24);
      goto LABEL_119;
    case 'H':
      IPC::handleMessageAsync<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      goto LABEL_119;
    case 'I':
      IPC::handleMessageAsync<Messages::GPUProcess::InitializeGPUProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WebKit::GPUProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      goto LABEL_119;
    case 'J':
      IPC::Decoder::decode<std::tuple<BOOL,WTF::MonotonicTime>>((uint64_t *)a3, (uint64_t)v80);
      if (v80[16])
      {
        uint64_t v41 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
        if ((_BYTE)a2)
        {
          *(void *)unint64_t v76 = v41;
          BOOL v4 = (IPC::Decoder *)&v76[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v76[8], v5);
          char v42 = (void *)WTF::fastMalloc((WTF *)0x18);
          *char v42 = &unk_1EE9BDE18;
          v42[1] = *(void *)v76;
          uint64_t v43 = *(void *)&v76[8];
          *(void *)&v76[8] = 0;
          v42[2] = v43;
          uint64_t v75 = v42;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76[8]);
          if (!v80[16]) {
            goto LABEL_103;
          }
          WebKit::GPUProcess::prepareToSuspend((WebKit::GPUProcess *)this, v80[0], (uint64_t *)&v75);
          goto LABEL_67;
        }
      }
      goto LABEL_119;
    case 'K':
      WebKit::GPUProcess::processDidResume((WebKit::GPUProcess *)this);
      goto LABEL_119;
    case 'L':
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v80);
      if (v80[8])
      {
        WebKit::GPUProcess::removeMockMediaDevice((WebKit::GPUProcess *)this, (const WTF::String *)v80);
        if (v80[8]) {
          goto LABEL_35;
        }
      }
      goto LABEL_119;
    case 'M':
      uint64_t v52 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if ((_BYTE)a2) {
        WebKit::GPUProcess::removeSession((uint64_t)this, v52);
      }
      goto LABEL_119;
    case 'N':
      uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
      if (!v12) {
        goto LABEL_98;
      }
      uint64_t v13 = v11;
      uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v4);
      if (!v15) {
        goto LABEL_98;
      }
      uint64_t v16 = v14;
      uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
      if ((_BYTE)a2)
      {
        *(void *)uint64_t v80 = v17;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v80[8], v5);
        uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v18 = &unk_1EE9BDE98;
        v18[1] = *(void *)v80;
        uint64_t v19 = *(void *)&v80[8];
        *(void *)&v80[8] = 0;
        v18[2] = v19;
        *(void *)unint64_t v76 = v18;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80[8]);
        WebKit::GPUProcess::requestBitmapImageForCurrentTime((uint64_t)this, v13, v16, (uint64_t *)v76);
        uint64_t v20 = *(void *)v76;
        *(void *)unint64_t v76 = 0;
        if (v20) {
          goto LABEL_20;
        }
      }
      goto LABEL_119;
    case 'O':
      WebCore::MockRealtimeMediaSourceCenter::resetDevices((WebCore::MockRealtimeMediaSourceCenter *)this);
      goto LABEL_119;
    case 'P':
      IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)v80);
      if (v80[16]) {
        WebKit::GPUProcess::resolveBookmarkDataForCacheDirectory((uint64_t)this, *(uint64_t *)v80, *(uint64_t *)&v80[8]);
      }
      goto LABEL_119;
    case 'Q':
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)v76);
      if (!v76[8]) {
        goto LABEL_98;
      }
      uint64_t v9 = IPC::Decoder::decode<WebCore::VideoFrameRotation>((uint64_t *)v4);
      if ((v9 & 0xFF0000) == 0)
      {
        if (v76[8])
        {
          unint64_t v56 = *(WTF::StringImpl **)v76;
          *(void *)unint64_t v76 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2) {
              WTF::StringImpl::destroy(v56, v10);
            }
            else {
              *(_DWORD *)v56 -= 2;
            }
          }
        }
        goto LABEL_98;
      }
      if (!v76[8]) {
        goto LABEL_103;
      }
      *(void *)uint64_t v80 = *(void *)v76;
      *(_WORD *)&v80[8] = v9;
      v80[16] = 1;
      WebKit::GPUProcess::rotationAngleForCaptureDeviceChanged((uint64_t)this, (uint64_t)v80, (unsigned __int16)v9);
      goto LABEL_30;
    case 'R':
      unsigned __int16 v48 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v48 <= 0xFFu) {
        goto LABEL_98;
      }
      WebKit::GPUProcess::setMockCaptureDevicesEnabled((WebKit::GPUProcess *)this, (WebCore::MockRealtimeMediaSourceCenter *)(v48 != 0));
      goto LABEL_119;
    case 'S':
      uint64_t v8 = IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)a3);
      if ((v8 & 0xFFFFFF) >= 0x10000) {
        WebCore::MockRealtimeMediaSourceCenter::setMockCaptureDevicesInterrupted((WebCore::MockRealtimeMediaSourceCenter *)(v8 != 0));
      }
      goto LABEL_119;
    case 'T':
      IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>(a3, v80);
      if (v80[16])
      {
        WebKit::GPUProcess::setMockMediaDeviceIsEphemeral((WebKit::GPUProcess *)this, (const WTF::String *)v80, (WTF::String *)v80[8]);
LABEL_30:
        if (v80[16])
        {
LABEL_35:
          uint64_t v25 = *(WTF::StringImpl **)v80;
          *(void *)uint64_t v80 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
        }
      }
      goto LABEL_119;
    case 'U':
      uint64_t v7 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v7 & 0xFF00000000) != 0) {
        WebKit::GPUProcess::setOrientationForMediaCapture((WebKit::GPUProcess *)this, v7);
      }
      goto LABEL_119;
    case 'V':
      unsigned __int16 v26 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v26 > 0xFFu)
      {
        WebKit::GPUProcess::setShouldListenToVoiceActivity((WebKit::GPUProcess *)this, v26 != 0);
        goto LABEL_119;
      }
LABEL_98:
      a2 = *(atomic_uchar *volatile **)v4;
      a3 = (IPC::Decoder *)*((void *)v4 + 1);
      *(void *)BOOL v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v57 = *((void *)v4 + 3);
      if (v57) {
        BOOL v58 = a3 == 0;
      }
      else {
        BOOL v58 = 1;
      }
      if (!v58) {
        goto LABEL_124;
      }
      goto LABEL_119;
    case 'W':
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::SharedPreferencesForWebProcess>>((uint64_t *)a3, v80);
      if (!v85) {
        goto LABEL_119;
      }
      uint64_t v49 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
      if (!(_BYTE)a2) {
        goto LABEL_119;
      }
      *(void *)unint64_t v76 = v49;
      BOOL v4 = (IPC::Decoder *)&v76[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v76[8], v5);
      uint64_t v50 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v50 = &unk_1EE9BDDF0;
      v50[1] = *(void *)v76;
      uint64_t v51 = *(void *)&v76[8];
      *(void *)&v76[8] = 0;
      v50[2] = v51;
      uint64_t v75 = v50;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v76[8]);
      if (!v85) {
        goto LABEL_103;
      }
      WebKit::GPUProcess::sharedPreferencesForWebProcessDidChange((uint64_t)this, *(uint64_t *)v80, (long long *)&v80[8], (uint64_t *)&v75);
LABEL_67:
      uint64_t v40 = (uint64_t)v75;
      uint64_t v75 = 0;
      if (v40) {
        goto LABEL_68;
      }
      goto LABEL_119;
    case 'X':
      uint64_t v53 = (WebCore::MockRealtimeMediaSourceCenter *)IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)a3);
      if ((v53 & 0xFFFFFF) >= 0x10000)
      {
        char v54 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(v53);
        WebCore::MockRealtimeMediaSourceCenter::triggerMockCaptureConfigurationChange(v54);
      }
      goto LABEL_119;
    case 'Y':
      unint64_t v27 = *((void *)a3 + 1);
      uint64_t v28 = *(atomic_uchar *volatile **)v4;
      unint64_t v29 = *((void *)v4 + 2) - *(void *)v4;
      if (v27 <= v29)
      {
        unint64_t v63 = 0;
        int v64 = 0;
        *(void *)BOOL v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v65 = *((void *)v4 + 3);
        if (v65)
        {
          if (v27)
          {
            (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
            int v64 = *(atomic_uchar *volatile **)v4;
            unint64_t v63 = *((void *)v4 + 1);
          }
          else
          {
            unint64_t v63 = 0;
            int v64 = 0;
          }
        }
      }
      else
      {
        uint64_t v30 = (unsigned __int8 *)v28 + v29;
        *((void *)v4 + 2) = v30 + 1;
        if (v28)
        {
          unsigned int v31 = *v30;
          if (v31 < 2)
          {
            if (v27 <= v30 + 1 - (unsigned __int8 *)v28) {
              goto LABEL_104;
            }
            *((void *)v4 + 2) = v30 + 2;
            unsigned int v32 = v30[1];
            if (v32 >= 2) {
              goto LABEL_134;
            }
            if (v27 <= v30 + 2 - (unsigned __int8 *)v28) {
              goto LABEL_104;
            }
            *((void *)v4 + 2) = v30 + 3;
            unsigned int v33 = v30[2];
            if (v33 >= 2)
            {
LABEL_134:
              unint64_t v59 = v27;
              uint64_t v60 = v28;
              goto LABEL_105;
            }
            uint64_t v34 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)v4);
            if (!v35) {
              goto LABEL_118;
            }
            uint64_t v36 = v34;
            uint64_t v37 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
            if ((_BYTE)a2)
            {
              *(void *)uint64_t v80 = v37;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v80[8], v5);
              uint64_t v38 = (void *)WTF::fastMalloc((WTF *)0x18);
              void *v38 = &unk_1EE9BDE40;
              v38[1] = *(void *)v80;
              uint64_t v39 = *(void *)&v80[8];
              *(void *)&v80[8] = 0;
              v38[2] = v39;
              *(void *)unint64_t v76 = v38;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80[8]);
              WebKit::GPUProcess::updateCaptureAccess((uint64_t *)this, v31 != 0, v32 != 0, v33 != 0, v36, (uint64_t *)v76);
              uint64_t v40 = *(void *)v76;
              *(void *)unint64_t v76 = 0;
              if (v40) {
LABEL_68:
              }
                (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
            }
            goto LABEL_119;
          }
LABEL_110:
          *(void *)BOOL v4 = 0;
          *((void *)v4 + 1) = 0;
          uint64_t v67 = *((void *)v4 + 3);
          if (v67 && v27) {
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v67 + 16))(v67, v28);
          }
          goto LABEL_118;
        }
        unint64_t v63 = v27;
        int v64 = 0;
      }
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      *(void *)BOOL v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v66 = *((void *)v4 + 3);
      if (v66)
      {
        if (v63)
        {
          (*(void (**)(uint64_t, atomic_uchar *volatile *, unint64_t))(*(void *)v66 + 16))(v66, v64, v63);
          uint64_t v28 = *(atomic_uchar *volatile **)v4;
          unint64_t v27 = *((void *)v4 + 1);
        }
        else
        {
          unint64_t v27 = 0;
          uint64_t v28 = 0;
        }
      }
      goto LABEL_110;
    case 'Z':
      IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)a3, v76);
      if (!v79)
      {
        v80[0] = 0;
        unsigned __int8 v84 = 0;
        goto LABEL_81;
      }
      uint64_t v44 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)v4);
      if (!v45)
      {
        int v47 = 0;
        v80[0] = 0;
        goto LABEL_90;
      }
      if (v79)
      {
        uint64_t v46 = v44;
        v80[0] = 0;
        int v82 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v80, (uint64_t)v76);
        uint64_t v83 = v46;
        int v47 = 1;
LABEL_90:
        unsigned __int8 v84 = v47;
        if (v79 && v78 != -1)
        {
          ((void (*)(void **, unsigned char *))off_1EE9BDE58[v78])(&v75, v76);
          int v47 = v84;
        }
        if (v47)
        {
LABEL_94:
          WebKit::GPUProcess::updateCaptureOrigin((uint64_t)this, (WebCore::SecurityOriginData *)v80, v83);
          if (v84 && v82 != -1) {
            ((void (*)(unsigned char *, unsigned char *))off_1EE9BDE58[v82])(v76, v80);
          }
          goto LABEL_119;
        }
LABEL_81:
        a2 = *(atomic_uchar *volatile **)v4;
        a3 = (IPC::Decoder *)*((void *)v4 + 1);
        *(void *)BOOL v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v55 = *((void *)v4 + 3);
        if (!v55) {
          goto LABEL_119;
        }
        if (!a3) {
          goto LABEL_119;
        }
        (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v55 + 16))(v55, a2);
        if (!v84) {
          goto LABEL_119;
        }
        goto LABEL_94;
      }
LABEL_103:
      __break(1u);
LABEL_104:
      unint64_t v59 = 0;
      uint64_t v60 = 0;
      *(void *)BOOL v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v61 = *((void *)v4 + 3);
      if (v61)
      {
        (*(void (**)(uint64_t))(*(void *)v61 + 16))(v61);
        unint64_t v59 = 0;
        uint64_t v72 = *(atomic_uchar *volatile **)v4;
        uint64_t v73 = *((void *)v4 + 1);
        uint64_t v74 = *((void *)v4 + 3);
        *(void *)BOOL v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v60 = 0;
        if (v74)
        {
          if (v73)
          {
            (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v74 + 16))(v74, v72);
            uint64_t v60 = *(atomic_uchar *volatile **)v4;
            unint64_t v59 = *((void *)v4 + 1);
          }
        }
      }
LABEL_105:
      *(void *)BOOL v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v62 = *((void *)v4 + 3);
      if (v62 && v59) {
        (*(void (**)(uint64_t, atomic_uchar *volatile *, unint64_t))(*(void *)v62 + 16))(v62, v60, v59);
      }
LABEL_118:
      a2 = *(atomic_uchar *volatile **)v4;
      a3 = (IPC::Decoder *)*((void *)v4 + 1);
      *(void *)BOOL v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v57 = *((void *)v4 + 3);
      if (v57 && a3) {
LABEL_124:
      }
        (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v57 + 16))(v57, a2);
LABEL_119:
      if (this)
      {
        if (atomic_fetch_add(this + 30, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)this + 30);
          (*(void (**)(atomic_uint *, atomic_uchar *volatile *, IPC::Decoder *))(*(void *)this + 8))(this, a2, a3);
        }
      }
      return;
    case '[':
      IPC::ArgumentCoder<WebKit::GPUProcessPreferences,void>::decode(a3, (uint64_t)v80);
      if (!v81)
      {
        uint64_t v68 = *(atomic_uchar *volatile **)v4;
        uint64_t v69 = *((void *)v4 + 1);
        *(void *)BOOL v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v70 = *((void *)v4 + 3);
        if (!v70 || v69 == 0) {
          goto LABEL_118;
        }
        (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v70 + 16))(v70, v68);
        if (!v81) {
          goto LABEL_118;
        }
      }
      *(_OWORD *)unint64_t v76 = *(_OWORD *)v80;
      *(_DWORD *)&v76[15] = *(_DWORD *)&v80[15];
      char v77 = 1;
      WebKit::GPUProcess::updateGPUProcessPreferences((uint64_t)this, (unsigned __int16 *)v76);
      goto LABEL_119;
    case '\\':
      IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, (void *)a2, (uint64_t)v80);
      if (v80[16])
      {
        WebKit::GPUProcess::updateSandboxAccess((uint64_t)this, (uint64_t)v80);
        if (v80[16]) {
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v80, (void *)a2);
        }
      }
      goto LABEL_119;
    case ']':
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a3, (void *)a2, (uint64_t)v80);
      if (v80[16])
      {
        WebKit::GPUProcess::userPreferredLanguagesChanged();
        if (v80[16]) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v80, (void *)a2);
        }
      }
      goto LABEL_119;
    case '^':
      uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)a2)
      {
        *(void *)uint64_t v80 = v21;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v80[8], v5);
        uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v22 = &unk_1EE9BDEC0;
        v22[1] = *(void *)v80;
        uint64_t v23 = *(void *)&v80[8];
        *(void *)&v80[8] = 0;
        v22[2] = v23;
        *(void *)unint64_t v76 = v22;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80[8]);
        WebKit::GPUProcess::webProcessConnectionCountForTesting((uint64_t)this, (uint64_t *)v76);
        uint64_t v20 = *(void *)v76;
        *(void *)unint64_t v76 = 0;
        if (v20) {
LABEL_20:
        }
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      goto LABEL_119;
    default:
      goto LABEL_119;
  }
}

void WebKit::GPUProcess::didReceiveMessage(WebKit::GPUProcess *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  if (!IPC::MessageReceiverMap::dispatchMessage((WebKit::GPUProcess *)((char *)this + 48), (IPC::Connection *)a2, a3))
  {
    unsigned int v6 = *((unsigned __int16 *)a3 + 25);
    if (v6 >= 0xEF4) {
      unsigned int v6 = 3828;
    }
    if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]) == 3)
    {
      WebKit::AuxiliaryProcess::didReceiveMessage(this, a2, a3);
    }
    else
    {
      WebKit::GPUProcess::didReceiveGPUProcessMessage((atomic_uint *)this, a2, a3);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_1,void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void WTF::Detail::CallableWrapper<IPC::createMessageDecoder(mach_msg_header_t *,unsigned long)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call()
{
}

void non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::didReceiveMessage(WebKit::NetworkConnectionToWebProcess *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

void non-virtual thunk to'WebKit::GPUProcessProxy::didReceiveMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

uint64_t WebKit::WebPage::setScreenIsBeingCaptured(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1287) = a2;
  return this;
}

void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(WebKit::NetworkConnectionToWebProcess *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 >= 0xEF4) {
    unsigned int v6 = 3828;
  }
  unsigned int v7 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
  if (v7 > 0x8C)
  {
    switch(LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]))
    {
      case 0xC7:
        uint64_t v43 = *((void *)this + 27);
        if (v43)
        {
          uint64_t v44 = *(WebKit::WebSWServerConnection **)(v43 + 8);
          if (v44)
          {
            WebKit::WebSWServerConnection::didReceiveMessage(v44, a2, a3);
          }
        }
        return;
      case 0xC8:
        char v45 = (WTF::StringImpl *)*((void *)this + 28);
        if (v45)
        {
          WebKit::WebSWServerToContextConnection::didReceiveMessage(v45, a2, a3);
        }
        return;
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
        goto LABEL_84;
      case 0xCD:
        uint64_t v48 = *((void *)this + 29);
        if (v48)
        {
          uint64_t v49 = *(void *)(v48 + 8);
          if (v49)
          {
            WebKit::WebSharedWorkerServerConnection::didReceiveMessage((WebKit::WebSharedWorkerServerConnection *)(v49 - 8), (IPC::Connection *)a2, a3);
          }
        }
        return;
      case 0xCE:
        uint64_t v50 = (WebKit::WebSharedWorkerServerToContextConnection *)*((void *)this + 30);
        if (v50)
        {
          WebKit::WebSharedWorkerServerToContextConnection::didReceiveMessage(v50, (IPC::Connection *)a2, a3);
        }
        return;
      default:
        if (v7 == 141)
        {
          uint64_t v46 = (WebKit::WebSWServerToContextConnection *)*((void *)this + 28);
          if (v46)
          {
            WebKit::WebSWServerToContextConnection::didReceiveFetchTaskMessage(v46, (IPC::Connection *)a2, a3);
          }
        }
        else
        {
          if (v7 == 188)
          {
            uint64_t v28 = (uint64_t *)WebKit::NetworkConnectionToWebProcess::paymentCoordinator(this);
            uint64_t v29 = *v28;
            goto LABEL_32;
          }
LABEL_84:
          WTFLogAlways();
        }
        break;
    }
  }
  else
  {
    switch(LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]))
    {
      case ' ':
        uint64_t v8 = *((void *)this + 10);
        *(void *)buf = *((void *)this + 11);
        uint64_t v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 224), buf);
        if (v9)
        {
          uint64_t v10 = *(WebKit::NetworkBroadcastChannelRegistry **)(v9 + 712);
          WebKit::NetworkBroadcastChannelRegistry::didReceiveMessage(v10, a2, a3);
        }
        return;
      case '!':
        WebKit::NetworkConnectionToWebProcess::didReceiveNetworkConnectionToWebProcessMessage(this, (IPC::Connection *)a2, a3);
        return;
      case '#':
        unsigned int v32 = (uint64_t *)((char *)this + 168);
        WebKit::NetworkMDNSRegister::didReceiveMessage(v32, a2, (uint64_t **)a3);
        return;
      case '$':
        int v47 = off_1EB358938;
        if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
          goto LABEL_67;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "virtual void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(IPC::Connection &, IPC::Decoder &)";
        uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cp"
              "p 251: Invalid message dispatched %{public}s";
        goto LABEL_88;
      case '\'':
        unsigned int v31 = (WebKit::NetworkRTCProvider *)((char *)WebKit::NetworkConnectionToWebProcess::rtcProvider(this) + 80);
        WebKit::NetworkRTCMonitor::didReceiveMessage(v31, (IPC::Connection *)a2, a3);
        return;
      case ')':
        uint64_t v11 = (WTF::RunLoop *)WTF::RunLoop::main(this);
        if ((WTF::RunLoop::isCurrent(v11) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1986A4E78);
        }
        uint64_t v12 = *((void *)a3 + 8);
        if (v12)
        {
          if (v12 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1986A4EDCLL);
          }
          *(void *)buf = *((void *)a3 + 8);
          uint64_t v13 = (WebKit::NetworkResourceLoader *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 13, buf);
          if (v13)
          {
            WebKit::NetworkResourceLoader::didReceiveNetworkResourceLoaderMessage(v13, (IPC::Connection *)a2, a3);
          }
          return;
        }
        int v47 = off_1EB358938;
        if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
          goto LABEL_67;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "virtual void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(IPC::Connection &, IPC::Decoder &)";
        uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cp"
              "p 266: Invalid message dispatched %{public}s";
        goto LABEL_88;
      case '*':
        uint64_t v14 = *((void *)a3 + 8);
        if ((unint64_t)(v14 - 1) < 0xFFFFFFFFFFFFFFFELL)
        {
          uint64_t v15 = *((void *)this + 12);
          if (!v15) {
            return;
          }
          unsigned int v16 = *(_DWORD *)(v15 - 8);
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          uint64_t v20 = v16 & ((v19 >> 31) ^ v19);
          uint64_t v21 = *(void *)(v15 + 16 * v20);
          if (v21 != v14)
          {
            int v22 = 1;
            do
            {
              if (!v21) {
                return;
              }
              uint64_t v20 = (v20 + v22) & v16;
              uint64_t v21 = *(void *)(v15 + 16 * v20);
              ++v22;
            }
            while (v21 != v14);
          }
          uint64_t v23 = *(void *)(v15 + 16 * v20 + 8);
          if (v23)
          {
            char v24 = *(void (**)(void))(*(void *)v23 + 64);
            v24();
          }
          return;
        }
        int v47 = off_1EB358938;
        if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
          goto LABEL_67;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "virtual void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(IPC::Connection &, IPC::Decoder &)";
        uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cp"
              "p 273: Invalid message dispatched %{public}s";
        goto LABEL_88;
      case ',':
        uint64_t v33 = *((void *)a3 + 8);
        if ((unint64_t)(v33 - 1) < 0xFFFFFFFFFFFFFFFELL)
        {
          uint64_t v34 = *((void *)this + 46);
          if (!v34) {
            return;
          }
          unsigned int v35 = *(_DWORD *)(v34 - 8);
          unint64_t v36 = (v33 + ~(v33 << 32)) ^ ((unint64_t)(v33 + ~(v33 << 32)) >> 22);
          unint64_t v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
          unint64_t v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
          uint64_t v39 = v35 & ((v38 >> 31) ^ v38);
          uint64_t v40 = *(void *)(v34 + 16 * v39);
          if (v40 != v33)
          {
            int v41 = 1;
            do
            {
              if (!v40) {
                return;
              }
              uint64_t v39 = (v39 + v41) & v35;
              uint64_t v40 = *(void *)(v34 + 16 * v39);
              ++v41;
            }
            while (v40 != v33);
          }
          char v42 = *(WebKit::NetworkTransportSession **)(v34 + 16 * v39 + 8);
          if (v42)
          {
            WebKit::NetworkTransportSession::didReceiveMessage(v42, a2, (atomic_uchar *volatile **)a3);
          }
          return;
        }
        int v47 = off_1EB358938;
        if (!os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT)) {
          goto LABEL_67;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "virtual void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(IPC::Connection &, IPC::Decoder &)";
        uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cp"
              "p 301: Invalid message dispatched %{public}s";
        goto LABEL_88;
      case '-':
        uint64_t v25 = *((void *)this + 10);
        if (!*(unsigned char *)(v25 + 410))
        {
          int v47 = off_1EB358938;
          if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "virtual void WebKit::NetworkConnectionToWebProcess::didReceiveMessage(IPC::Connection &"
                                 ", IPC::Decoder &)";
            uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProces"
                  "s.cpp 281: Invalid message dispatched %{public}s";
LABEL_88:
            _os_log_fault_impl(&dword_1985F2000, v47, OS_LOG_TYPE_FAULT, v51, buf, 0xCu);
          }
LABEL_67:
          *(unsigned char *)(*((void *)this + 9) + 98) = 1;
          return;
        }
        *(void *)buf = *((void *)this + 11);
        uint64_t v26 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v25 + 224), buf);
        if (!v26) {
          return;
        }
        uint64_t v27 = v26;
        uint64_t v28 = (uint64_t *)(v26 + 1080);
        uint64_t v29 = *(void *)(v27 + 1080);
        break;
      default:
        goto LABEL_84;
    }
LABEL_32:
    uint64_t v30 = *(void (**)(uint64_t *, atomic_uchar *volatile *, IPC::Decoder *))(v29 + 16);
    v30(v28, a2, a3);
  }
}

void WebKit::NetworkProcessConnection::didReceiveMessage(WebKit::WebIDBConnectionToServer **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((unsigned __int16 *)a3 + 25) >= 0xEF4u) {
    unsigned int v5 = 3828;
  }
  else {
    unsigned int v5 = *((unsigned __int16 *)a3 + 25);
  }
  int v6 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v5 + 2]);
  if (v6 > 182)
  {
    if (v6 > 206)
    {
      if (v6 == 207)
      {
        {
          uint64_t v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v53);
        }
        uint64_t v23 = WebKit::WebProcess::singleton(void)::process;
        *(void *)buf = *((void *)a3 + 8);
        if (*(void *)buf == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1986A57C8);
        }
        uint64_t v24 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 416), buf);
        uint64_t v25 = *(void *)(v23 + 416);
        if (v25) {
          v25 += 16 * *(unsigned int *)(v25 - 4);
        }
        if (v25 != v24)
        {
          uint64_t v26 = *(void *)(*(void *)(v24 + 8) + 8);
          if (v26) {
            uint64_t v27 = v26 - 8;
          }
          else {
            uint64_t v27 = 0;
          }
          (*(void (**)(uint64_t, IPC::Connection *, IPC::Decoder *))(*(void *)v27 + 64))(v27, a2, a3);
        }
        return;
      }
      if (v6 == 209)
      {
        {
          uint64_t v49 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v49);
        }
        if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 780))
        {
          uint64_t v17 = *((void *)a3 + 8);
          if (v17 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1986A57E8);
          }
          unint64_t v18 = (unsigned int *)WebKit::WebProcess::webTransportSession(WebKit::WebProcess::singleton(void)::process, v17);
          if (v18)
          {
            WebKit::WebTransportSession::didReceiveMessage(v18, a2, a3);
          }
          return;
        }
        unsigned int v28 = *((unsigned __int16 *)a3 + 25);
        if (v28 >= 0xEF4) {
          unsigned int v28 = 3828;
        }
        int v6 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v28 + 2]);
      }
    }
    else
    {
      if (v6 == 183)
      {
        {
          uint64_t v50 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v50);
        }
        if ((unint64_t)(*((void *)a3 + 8) - 1) >= 0xFFFFFFFFFFFFFFFELL)
        {
          __break(0xC471u);
          JUMPOUT(0x1986A575CLL);
        }
        *(void *)buf = *((void *)a3 + 8);
        unint64_t v19 = (WebKit::WebPage *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), buf);
        if (v19)
        {
          WebKit::WebPage::didReceiveWebPageMessage(v19, a2, a3);
        }
        return;
      }
      if (v6 == 196)
      {
        {
          int v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v47);
        }
        uint64_t v7 = *((void *)a3 + 8);
        if (v7 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1986A577CLL);
        }
        uint64_t v8 = *(void *)(*(void *)(WebKit::WebProcess::singleton(void)::process + 320) + 48);
        if (v8)
        {
          unsigned int v9 = *(_DWORD *)(v8 - 8);
          unint64_t v10 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
          unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
          unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
          uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
          uint64_t v14 = *(void *)(v8 + 16 * v13);
          if (v14 == v7)
          {
LABEL_12:
            uint64_t v15 = *(WebKit::WebResourceLoader **)(v8 + 16 * v13 + 8);
            if (v15)
            {
              WebKit::WebResourceLoader::didReceiveWebResourceLoaderMessage(v15, a2, a3);
            }
          }
          else
          {
            int v35 = 1;
            while (v14)
            {
              uint64_t v13 = (v13 + v35) & v9;
              uint64_t v14 = *(void *)(v8 + 16 * v13);
              ++v35;
              if (v14 == v7) {
                goto LABEL_12;
              }
            }
          }
        }
        return;
      }
    }
LABEL_60:
    switch(v6)
    {
      case 194:
        {
          char v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v54);
        }
        WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
        if (*(unsigned char *)(v29 + 192))
        {
          uint64_t v30 = (void *)(v29 + 88);
          WebKit::WebRTCMonitor::didReceiveMessage(v30, a2, a3);
        }
        else
        {
          char v45 = qword_1EB358820;
          if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            uint64_t v46 = "Received WebRTCMonitor message while libWebRTCNetwork is not active";
            goto LABEL_112;
          }
        }
        break;
      case 195:
        {
          uint64_t v55 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v55);
        }
        WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
        if (*(unsigned char *)(v36 + 192))
        {
          uint64_t v37 = *((void *)a3 + 8);
          if (v37 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x1986A5828);
          }
          *(void *)buf = v36 + 24;
          uint64_t v58 = v37;
          WebKit::WebRTCResolver::didReceiveMessage((uint64_t)buf, a2, a3);
        }
        else
        {
          char v45 = qword_1EB358820;
          if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            uint64_t v46 = "Received WebRTCResolver message while libWebRTCNetwork is not active";
LABEL_112:
            _os_log_error_impl(&dword_1985F2000, v45, OS_LOG_TYPE_ERROR, v46, buf, 2u);
          }
        }
        break;
      case 196:
      case 199:
      case 200:
      case 201:
      case 202:
        goto LABEL_79;
      case 197:
        unint64_t v38 = (WebKit::WebSWClientConnection *)WebKit::NetworkProcessConnection::serviceWorkerConnection((WebKit::NetworkProcessConnection *)this);
        WebKit::WebSWClientConnection::didReceiveMessage(v38, (atomic_uchar *volatile *)a2, a3);
        break;
      case 198:
        uint64_t v39 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton((WebCore::SWContextManager *)this);
        uint64_t v40 = (atomic_uchar *volatile *)WebCore::SWContextManager::connection(v39);
        if (v40)
        {
          WebKit::WebSWContextManagerConnection::didReceiveMessage(v40, (atomic_uchar *volatile *)a2, a3);
        }
        break;
      case 203:
        int v41 = (WebCore::SharedWorkerContextManager *)WebCore::SharedWorkerContextManager::singleton((WebCore::SharedWorkerContextManager *)this);
        char v42 = (WTF::StringImpl **)WebCore::SharedWorkerContextManager::connection(v41);
        if (v42)
        {
          WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(v42, (atomic_uchar *volatile *)a2, a3);
        }
        break;
      case 204:
        uint64_t v43 = WebKit::NetworkProcessConnection::sharedWorkerConnection((WebKit::NetworkProcessConnection *)this);
        WebKit::WebSharedWorkerObjectConnection::didReceiveMessage(v43, (atomic_uchar *volatile *)a2, a3);
        break;
      default:
        if (v6 == 174)
        {
          uint64_t v44 = this[9];
          if (v44)
          {
            WebKit::WebIDBConnectionToServer::didReceiveMessage(v44, a2, a3);
          }
        }
        else if (v6 == 187)
        {
          {
            unint64_t v56 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v56);
          }
          if ((unint64_t)(*((void *)a3 + 8) - 1) >= 0xFFFFFFFFFFFFFFFELL)
          {
            __break(0xC471u);
            JUMPOUT(0x1986A5808);
          }
          *(void *)buf = *((void *)a3 + 8);
          uint64_t v31 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), buf);
          if (v31)
          {
            uint64_t v32 = *(void *)(v31 + 48);
            if (v32)
            {
              uint64_t v33 = *(WebKit::WebPaymentCoordinator **)(*(void *)(v32 + 1240) + 8);
              if ((*(unsigned int (**)(WebKit::WebPaymentCoordinator *))(*(void *)v33 + 112))(v33)) {
                uint64_t v34 = v33;
              }
              else {
                uint64_t v34 = 0;
              }
            }
            else
            {
              uint64_t v34 = 0;
            }
            WebKit::WebPaymentCoordinator::didReceiveMessage(v34, a2, a3);
          }
        }
        else
        {
LABEL_79:
          WebKit::NetworkProcessConnection::didReceiveNetworkProcessConnectionMessage((WebKit::NetworkProcessConnection *)this, (atomic_uchar *volatile *)a2, a3);
        }
        break;
    }
    return;
  }
  if (v6 != 147)
  {
    if (v6 == 161)
    {
      {
        uint64_t v52 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v52);
      }
      int v22 = *(_DWORD **)(WebKit::WebProcess::singleton(void)::process + 400);
      WebKit::WebBroadcastChannelRegistry::didReceiveMessage(v22, (atomic_uchar *volatile *)a2, a3);
      return;
    }
    if (v6 == 169)
    {
      {
        uint64_t v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v48);
      }
      uint64_t v16 = WebKit::WebProcess::fileSystemStorageConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
      WebKit::WebFileSystemStorageConnection::didReceiveMessage(v16, a2, a3);
      return;
    }
    goto LABEL_60;
  }
  {
    uint64_t v51 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v51);
  }
  if (*((void *)a3 + 8) == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1986A57A8);
  }
  *(void *)buf = *((void *)a3 + 8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uint **)(WebKit::WebProcess::singleton(void)::process + 656), buf, (atomic_uint **)&v59);
  uint64_t v21 = (unsigned int *)v59;
  if (v59)
  {
    if (*((void *)v59 + 1))
    {
      WebKit::StorageAreaMap::didReceiveMessage(*((WebKit::StorageAreaMap **)v59 + 1), a2, a3);
      uint64_t v21 = (unsigned int *)v59;
      unint64_t v59 = 0;
      if (!v21) {
        return;
      }
    }
    else
    {
      unint64_t v59 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
  }
}

void WebKit::GPUProcessProxy::didReceiveMessage(atomic_uint *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  BOOL v4 = (unsigned int *)(this + 4);
  atomic_fetch_add(this + 4, 1u);
  switch(*((_WORD *)a3 + 25))
  {
    case '<':
      uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v7) {
        goto LABEL_42;
      }
      uint64_t v8 = v6;
      uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v10) {
        goto LABEL_42;
      }
      unint64_t v11 = *((void *)a3 + 1);
      uint64_t v12 = *(void *)a3;
      unint64_t v13 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
      if (v11 < v13 || v11 - v13 <= 3)
      {
        unint64_t v28 = 0;
        uint64_t v29 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v30 = *((void *)a3 + 3);
        if (v30)
        {
          if (v11)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v12, v11);
            uint64_t v29 = *(void *)a3;
            unint64_t v28 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v28 = 0;
            uint64_t v29 = 0;
          }
        }
        goto LABEL_41;
      }
      uint64_t v15 = (unsigned int *)(v12 + v13);
      *((void *)a3 + 2) = v15 + 1;
      if (!v12)
      {
        unint64_t v28 = v11;
        uint64_t v29 = 0;
LABEL_41:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v31 = *((void *)a3 + 3);
        if (v31 && v28) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
        }
        goto LABEL_42;
      }
      WebKit::GPUProcessProxy::didCreateContextForVisibilityPropagation((uint64_t)this, v8, v9, *v15);
      if (this) {
        goto LABEL_48;
      }
      return;
    case '=':
      WebKit::GPUProcessProxy::processIsReadyToExit((WebKit::GPUProcessProxy *)this);
      if (!this) {
        return;
      }
      goto LABEL_48;
    case '>':
      unsigned __int16 v17 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v17 <= 0xFFu) {
        goto LABEL_42;
      }
      WebKit::GPUProcessProxy::s_hasAV1HardwareDecoder = (v17 != 0) | 0x100;
      if (!this) {
        return;
      }
      goto LABEL_48;
    case '?':
      unsigned __int16 v18 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v18 > 0xFFu)
      {
        WebKit::GPUProcessProxy::s_hasVP9HardwareDecoder = (v18 != 0) | 0x100;
        if (this) {
          goto LABEL_48;
        }
        return;
      }
LABEL_42:
      uint64_t v32 = *(void *)a3;
      uint64_t v33 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v34 = *((void *)a3 + 3);
      if (v34) {
        BOOL v35 = v33 == 0;
      }
      else {
        BOOL v35 = 1;
      }
      if (v35)
      {
LABEL_47:
        if (!this) {
          return;
        }
        goto LABEL_48;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
      if (this) {
        goto LABEL_48;
      }
      return;
    case '@':
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>((uint64_t)&v36, a3);
      if (!v38) {
        goto LABEL_47;
      }
      WebKit::GPUProcessProxy::startMonitoringCaptureDeviceRotation((uint64_t)this, v36, (const WTF::String *)&v37);
      goto LABEL_31;
    case 'A':
      uint64_t v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v23) {
        goto LABEL_47;
      }
      uint64_t v36 = v22;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v37, a2);
      uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v24 = &unk_1EE9BDEE8;
      v24[1] = v36;
      uint64_t v25 = v37;
      uint64_t v37 = 0;
      v24[2] = v25;
      uint64_t v39 = v24;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v37);
      WebKit::GPUProcessProxy::statusBarWasTapped((uint64_t)this, (uint64_t *)&v39);
      uint64_t v26 = (uint64_t)v39;
      uint64_t v39 = 0;
      if (!v26) {
        goto LABEL_47;
      }
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      if (!this) {
        return;
      }
      goto LABEL_48;
    case 'B':
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>((uint64_t)&v36, a3);
      if (!v38) {
        goto LABEL_47;
      }
      WebKit::GPUProcessProxy::stopMonitoringCaptureDeviceRotation((uint64_t)this, v36, (const WTF::String *)&v37);
LABEL_31:
      if (!v38) {
        goto LABEL_47;
      }
      uint64_t v27 = v37;
      uint64_t v37 = 0;
      if (!v27) {
        goto LABEL_47;
      }
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::destroy(v27, v16);
        if (!this) {
          return;
        }
      }
      else
      {
        *(_DWORD *)v27 -= 2;
        if (!this) {
          return;
        }
      }
LABEL_48:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
      return;
    case 'C':
      uint64_t v19 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (!v20) {
        goto LABEL_47;
      }
      WebKit::GPUProcessProxy::terminateWebProcess((uint64_t)this, v19);
      if (!this) {
        return;
      }
      goto LABEL_48;
    case 'D':
      WebKit::GPUProcessProxy::voiceActivityDetected((WebKit::GPUProcessProxy *)this);
      if (!this) {
        return;
      }
      goto LABEL_48;
    default:
      goto LABEL_47;
  }
}

void WebKit::DrawingArea::didReceiveMessage(WebKit::DrawingArea *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 29)
  {
    BOOL v3 = *(void (**)(void))(*(void *)this + 400);
    v3();
  }
  else
  {
    switch(*((_WORD *)a3 + 25))
    {
      case 0x18:
        IPC::handleMessage<Messages::DrawingArea::AcceleratedAnimationDidEnd,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&)>(a3, (uint64_t)this);
        break;
      case 0x19:
        IPC::handleMessage<Messages::DrawingArea::AcceleratedAnimationDidStart,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WTF::MonotonicTime)>(a3, (uint64_t)this);
        break;
      case 0x1A:
        IPC::handleMessage<Messages::DrawingArea::AdjustTransientZoom,WebKit::DrawingArea,WebKit::DrawingArea,void ()(double,WebCore::FloatPoint)>((unint64_t *)a3, (uint64_t)this);
        break;
      case 0x1B:
        IPC::handleMessageAsync<Messages::DrawingArea::CommitTransientZoom,WebKit::DrawingArea,WebKit::DrawingArea,void ()(double,WebCore::FloatPoint,WTF::CompletionHandler<void ()(void)> &&)>(a2, (unint64_t *)a3, (uint64_t)this);
        break;
      case 0x1C:
        uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v8)
        {
          uint64_t v9 = *(void (**)(WebKit::DrawingArea *, uint64_t))(*(void *)this + 432);
          v9(this, v7);
        }
        break;
      case 0x1E:
        IPC::handleMessage<Messages::DrawingArea::SetColorSpace,WebKit::DrawingArea,WebKit::DrawingArea,void ()(std::optional<WebCore::DestinationColorSpace>)>((uint64_t *)a3, (uint64_t)this);
        break;
      case 0x1F:
        uint64_t v4 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
        if ((v4 & 0xFF00000000) != 0)
        {
          v5.n128_u32[0] = v4;
          uint64_t v6 = *(void (**)(WebKit::DrawingArea *, __n128))(*(void *)this + 416);
          v6(this, v5);
        }
        break;
      case 0x20:
        IPC::Decoder::decode<std::tuple<std::optional<WebCore::FloatRect>>>((unint64_t *)a3, (uint64_t)&v13);
        if (v15)
        {
          long long v16 = v13;
          int v17 = v14;
          (*(void (**)(WebKit::DrawingArea *, long long *))(*(void *)this + 120))(this, &v16);
        }
        break;
      case 0x21:
        IPC::handleMessageAsync<Messages::DrawingArea::UpdateGeometry,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::IntSize const&,BOOL,WTF::MachSendRight const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (unint64_t *)a3, (uint64_t)this);
        break;
      default:
        return;
    }
  }
}

void non-virtual thunk to'WebKit::GPUConnectionToWebProcess::didReceiveMessage(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
}

void WebKit::NetworkConnectionToWebProcess::didReceiveNetworkConnectionToWebProcessMessage(WebKit::NetworkConnectionToWebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v6 = MEMORY[0x1F4188790](this, a2, a3);
  uint64_t v9 = v6;
  uint64_t v533 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(v6 + 8);
  char v10 = v8;
  unint64_t v11 = v7;
  switch(*((_WORD *)v8 + 25))
  {
    case 0xDF:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>>((uint64_t)v481, v8);
      if (v481[32]) {
        WebKit::NetworkConnectionToWebProcess::addOriginAccessAllowListEntry((WebKit::NetworkConnectionToWebProcess *)v9, (const WTF::String *)v481, (const WTF::String *)&v481[8], (const WTF::String *)&v481[16], (const WTF::String *)v481[24]);
      }
      goto LABEL_102;
    case 0xE0:
      uint64_t v148 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8);
      if (!v149) {
        goto LABEL_842;
      }
      uint64_t v150 = v148;
      uint64_t v151 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!v152) {
        goto LABEL_842;
      }
      unint64_t v153 = (void *)v151;
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, (uint64_t)v481);
      if (!v481[16]) {
        goto LABEL_842;
      }
      WebKit::NetworkConnectionToWebProcess::browsingContextRemoved(v9, v150, v153, *(uint64_t *)v481, *(uint64_t *)&v481[8]);
      goto LABEL_931;
    case 0xE1:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v8, (uint64_t)v481);
      if (v481[16]) {
        WebKit::NetworkConnectionToWebProcess::clearFrameLoadRecordsForStorageAccess(v9, *(WTF::StringImpl **)v481, *(const WTF::StringImpl **)&v481[8]);
      }
      goto LABEL_931;
    case 0xE2:
      uint64_t v136 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v8);
      if (v137) {
        WebKit::NetworkConnectionToWebProcess::clearPageSpecificData(v9, v136);
      }
      goto LABEL_931;
    case 0xE3:
      uint64_t v76 = *(void *)(v6 + 224);
      *(void *)(v9 + 224) = 0;
      if (v76) {
        (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
      }
      goto LABEL_931;
    case 0xE4:
      WebKit::NetworkConnectionToWebProcess::closeSharedWorkerContextConnection((WebKit::NetworkConnectionToWebProcess *)v6);
      goto LABEL_931;
    case 0xE5:
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier>>((uint64_t *)v8, v481);
      if (!v481[32]) {
        goto LABEL_931;
      }
      uint64_t v183 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!v184) {
        goto LABEL_931;
      }
      *(void *)uint64_t v510 = v183;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      unint64_t v185 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v185 = &unk_1EE9B7670;
      v185[1] = *(void *)v510;
      uint64_t v186 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v185[2] = v186;
      *(void *)char v525 = v185;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[32]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::connectToRTCDataChannelRemoteSource((WebKit::NetworkConnectionToWebProcess *)v9, *(uint64_t *)v481, *(uint64_t *)&v481[8], *(uint64_t *)&v481[16], *(uint64_t *)&v481[24], (uint64_t *)v525);
      uint64_t v38 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v38) {
        goto LABEL_36;
      }
      goto LABEL_931;
    case 0xE6:
      IPC::Decoder::decode<std::optional<PAL::SessionID>>(v8, v478);
      if (!v478[16]
        || (uint64_t v138 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v10),
            !v139))
      {
        v481[0] = 0;
        char v507 = 0;
        goto LABEL_731;
      }
      unint64_t v3 = v138;
      IPC::Decoder::decode<WebCore::ResourceRequest>(v10, (uint64_t)v525);
      if (!v529
        || (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>((uint64_t *)v10, (uint64_t)v530), !v532))
      {
        v481[0] = 0;
        char v507 = 0;
        goto LABEL_685;
      }
      IPC::Decoder::decode<WebCore::ResourceResponse>(v10, v510);
      char v140 = v523;
      if (!v523) {
        goto LABEL_680;
      }
      uint64_t v141 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(v10);
      if ((v141 & 0xFF0000) != 0)
      {
        if (!v478[16] || !v529 || !v532 || !v523) {
          goto LABEL_887;
        }
        __int16 v142 = v141;
        *(_OWORD *)unint64_t v481 = *(_OWORD *)v478;
        *(void *)&v481[16] = v3;
        std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v481[24], (uint64_t)v525);
        v484[88] = 0;
        BYTE8(v485) = 0;
        if (BYTE8(v531))
        {
          LODWORD(v485) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v484[88], (uint64_t)v530);
          BYTE8(v485) = 1;
        }
        long long v487 = *(_OWORD *)&v510[8];
        *(_OWORD *)char v488 = *(_OWORD *)&v510[24];
        long long v143 = *(_OWORD *)&v510[56];
        memset(&v510[56], 0, 40);
        *(_DWORD *)&v510[8] &= ~1u;
        uint64_t v144 = *(void *)v510;
        uint64_t v145 = *(void *)&v510[40];
        *(void *)uint64_t v510 = 0;
        *(void *)&v510[40] = 0;
        uint64_t v486 = v144;
        *(void *)&v488[16] = v145;
        uint64_t v489 = *(void *)&v510[48];
        long long v490 = v143;
        long long v491 = *(_OWORD *)&v510[72];
        uint64_t v492 = *(void *)&v510[88];
        *(void *)&long long v143 = *((void *)&v511 + 1);
        uint64_t v493 = v511;
        long long v511 = 0uLL;
        uint64_t v494 = v143;
        uint64_t v146 = v512;
        uint64_t v512 = 0;
        uint64_t v495 = v146;
        LOBYTE(v496) = 0;
        char v497 = 0;
        if (v514)
        {
          uint64_t v353 = v513;
          uint64_t v513 = 0;
          uint64_t v496 = v353;
          char v497 = 1;
        }
        *(_DWORD *)&v503[15] = *(_DWORD *)&v520[15];
        long long v502 = v519;
        *(_OWORD *)v503 = *(_OWORD *)v520;
        long long v498 = v515;
        long long v499 = v516;
        long long v500 = v517;
        long long v501 = v518;
        uint64_t v147 = v521;
        uint64_t v521 = 0;
        CFTypeRef v504 = v147;
        char v505 = v522;
        char v140 = 1;
        __int16 v506 = v142;
      }
      else
      {
        char v140 = 0;
LABEL_680:
        v481[0] = 0;
      }
      char v507 = v140;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v510, v23);
      if (v532 && BYTE8(v531) && v531 != -1) {
        ((void (*)(unsigned char *, unsigned char *))off_1EE9B73E8[v531])(v510, v530);
      }
LABEL_685:
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v525);
      if (v507) {
        goto LABEL_686;
      }
LABEL_731:
      char v358 = *(WTF::StringImpl **)v10;
      uint64_t v359 = *((void *)v10 + 1);
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v360 = *((void *)v10 + 3);
      if (!v360) {
        goto LABEL_931;
      }
      if (!v359) {
        goto LABEL_931;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v360 + 16))(v360, v358);
      if (!v507) {
        goto LABEL_931;
      }
LABEL_686:
      uint64_t v340 = (WebCore::ResourceRequestBase *)&v481[24];
      WebKit::NetworkConnectionToWebProcess::convertMainResourceLoadToDownload((uint64_t *)v9, *(WTF::StringImpl **)v481, v481[8], *(uint64_t *)&v481[16], (WebCore::ResourceRequest *)&v481[24], (WebCore::SecurityOriginData *)&v484[88], (WebCore::ResourceResponseBase *)&v486, v506);
      if (!v507) {
        goto LABEL_931;
      }
      CFTypeRef v342 = v504;
      CFTypeRef v504 = 0;
      if (v342) {
        CFRelease(v342);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v486, v341);
      if (BYTE8(v485))
      {
        if (v485 != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9B73E8[v485])(v510, &v484[88]);
        }
        LODWORD(v485) = -1;
      }
      v343 = *(const void **)&v484[80];
      *(void *)&v484[80] = 0;
      if (v343) {
        goto LABEL_694;
      }
      goto LABEL_869;
    case 0xE7:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>>((uint64_t)v481, v8);
      if (!v483[0]) {
        goto LABEL_285;
      }
      uint64_t v195 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v194) {
        goto LABEL_285;
      }
      *(void *)uint64_t v510 = v195;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v196 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v196 = &unk_1EE9B7458;
      v196[1] = *(void *)v510;
      uint64_t v197 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v196[2] = v197;
      *(void *)char v525 = v196;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v483[0]) {
        goto LABEL_887;
      }
      *(_OWORD *)uint64_t v510 = *(_OWORD *)&v481[80];
      *(void *)&v510[16] = *(void *)&v481[96];
      WebKit::NetworkConnectionToWebProcess::cookiesEnabled((void *)v9, (WTF::URL *)v481, (uint64_t)&v481[40], (uint64_t)v510, *(uint64_t *)&v481[104], v482, BYTE8(v482), (uint64_t *)v525);
      uint64_t v198 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v198) {
        (*(void (**)(uint64_t))(*(void *)v198 + 8))(v198);
      }
LABEL_285:
      std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ShouldRelaxThirdPartyCookieBlocking>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v481, v194);
      goto LABEL_931;
    case 0xE8:
      IPC::Decoder::decode<WTF::URL>(v8, v525);
      if (!v527)
      {
        v481[0] = 0;
        v484[16] = 0;
        goto LABEL_614;
      }
      unsigned int v115 = IPC::Decoder::decode<WebCore::SameSiteInfo>((uint64_t *)v10);
      if (!HIBYTE(v115) || (LODWORD(v3) = v115, IPC::Decoder::decode<WTF::URL>(v10, v510), !v510[40]))
      {
        v481[0] = 0;
        v484[16] = 0;
        goto LABEL_609;
      }
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v10, (uint64_t)v530);
      if (!(_BYTE)v531) {
        goto LABEL_441;
      }
      IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, v476);
      if (!v477) {
        goto LABEL_441;
      }
      unsigned __int16 v275 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)v10);
      if (v275 <= 0xFFu) {
        goto LABEL_441;
      }
      char v276 = v275;
      unsigned __int16 v277 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v10);
      if (v277 <= 0xFFu) {
        goto LABEL_441;
      }
      char v345 = v277;
      unsigned __int16 v346 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v10);
      if (v346 <= 0xFFu)
      {
        char v23 = *(WTF::StringImpl **)v10;
        uint64_t v459 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v460 = *((void *)v10 + 3);
        if (v460 && v459) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v460 + 16))(v460, v23);
        }
LABEL_441:
        v481[0] = 0;
        v484[16] = 0;
      }
      else
      {
        char v347 = v346;
        IPC::ArgumentCoder<WebCore::CookieStoreGetOptions,void>::decode(v10, (uint64_t)v478);
        if (v478[16])
        {
          if (!v527 || !v510[40] || !(_BYTE)v531 || !v477) {
            goto LABEL_887;
          }
          uint64_t v348 = *(void *)v525;
          *(void *)char v525 = 0;
          *(void *)unint64_t v481 = v348;
          *(_OWORD *)&v481[8] = *(_OWORD *)&v525[8];
          *(_OWORD *)&v481[24] = v526;
          *(_DWORD *)&v525[8] &= ~1u;
          *(_WORD *)&v481[40] = v3;
          v481[42] = BYTE2(v3);
          uint64_t v349 = *(void *)v510;
          *(void *)uint64_t v510 = 0;
          *(_OWORD *)&v481[56] = *(_OWORD *)&v510[8];
          *(_OWORD *)&v481[72] = *(_OWORD *)&v510[24];
          *(_DWORD *)&v510[8] &= ~1u;
          *(void *)&v481[48] = v349;
          *(void *)&v481[104] = *(void *)&v530[16];
          *(_OWORD *)&v481[88] = *(_OWORD *)v530;
          long long v482 = *(_OWORD *)v476;
          v483[0] = v276;
          v483[1] = v345;
          v483[2] = v347;
          char v350 = 1;
          *(_OWORD *)uint64_t v484 = *(_OWORD *)v478;
        }
        else
        {
          char v23 = *(WTF::StringImpl **)v10;
          uint64_t v461 = *((void *)v10 + 1);
          *(void *)char v10 = 0;
          *((void *)v10 + 1) = 0;
          uint64_t v462 = *((void *)v10 + 3);
          if (v462 && v461) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v462 + 16))(v462, v23);
          }
          char v350 = 0;
          v481[0] = 0;
        }
        v484[16] = v350;
      }
      if (v510[40])
      {
        unsigned int v278 = *(WTF::StringImpl **)v510;
        *(void *)uint64_t v510 = 0;
        if (v278)
        {
          if (*(_DWORD *)v278 == 2) {
            WTF::StringImpl::destroy(v278, v23);
          }
          else {
            *(_DWORD *)v278 -= 2;
          }
        }
      }
LABEL_609:
      if (v527)
      {
        uint64_t v317 = *(WTF::StringImpl **)v525;
        *(void *)char v525 = 0;
        if (v317)
        {
          if (*(_DWORD *)v317 == 2) {
            WTF::StringImpl::destroy(v317, v23);
          }
          else {
            *(_DWORD *)v317 -= 2;
          }
        }
      }
LABEL_614:
      if (!v484[16])
      {
        v368 = *(WTF::StringImpl **)v10;
        uint64_t v369 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v370 = *((void *)v10 + 3);
        if (!v370) {
          goto LABEL_931;
        }
        if (!v369) {
          goto LABEL_931;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v370 + 16))(v370, v368);
        if (!v484[16]) {
          goto LABEL_931;
        }
      }
      uint64_t v318 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if ((_BYTE)v44)
      {
        *(void *)uint64_t v510 = v318;
        char v10 = (IPC::Decoder *)&v510[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
        unint64_t v319 = (void *)WTF::fastMalloc((WTF *)0x18);
        *unint64_t v319 = &unk_1EE9B74A8;
        v319[1] = *(void *)v510;
        uint64_t v320 = *(void *)&v510[8];
        *(void *)&v510[8] = 0;
        v319[2] = v320;
        *(void *)char v525 = v319;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
        if (!v484[16]) {
          goto LABEL_887;
        }
        *(_OWORD *)uint64_t v510 = *(_OWORD *)&v481[88];
        *(void *)&v510[16] = *(void *)&v481[104];
        WebKit::NetworkConnectionToWebProcess::cookiesForDOMAsync((void *)v9, (WTF::URL *)v481, &v481[40], (const WTF::URL *)&v481[48], (long long *)v510, (WTF::String *)v482, *((uint64_t *)&v482 + 1), v483[0], v483[1], v483[2], (uint64_t)v484, (uint64_t *)v525);
        uint64_t v321 = *(void *)v525;
        *(void *)char v525 = 0;
        if (v321) {
          (*(void (**)(uint64_t))(*(void *)v321 + 8))(v321);
        }
      }
      if (!v484[16]) {
        goto LABEL_931;
      }
      unint64_t v322 = *(WTF::StringImpl **)&v484[8];
      *(void *)&v484[8] = 0;
      if (v322)
      {
        if (*(_DWORD *)v322 == 2) {
          WTF::StringImpl::destroy(v322, v44);
        }
        else {
          *(_DWORD *)v322 -= 2;
        }
      }
      v323 = *(WTF::StringImpl **)v484;
      *(void *)uint64_t v484 = 0;
      if (!v323) {
        goto LABEL_651;
      }
      goto LABEL_648;
    case 0xE9:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>((uint64_t)v481, (uint64_t *)v8);
      if (v481[32]) {
        WebKit::NetworkConnectionToWebProcess::createNewMessagePortChannel(v9, (uint64_t *)v481, (uint64_t *)&v481[16]);
      }
      goto LABEL_931;
    case 0xEA:
      uint64_t v71 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8);
      if (v72)
      {
        *(void *)unint64_t v481 = v71;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v481[8], v11);
        uint64_t v73 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v73 = &unk_1EE9B7648;
        v73[1] = *(void *)v481;
        uint64_t v74 = *(void *)&v481[8];
        *(void *)&v481[8] = 0;
        v73[2] = v74;
        *(void *)uint64_t v510 = v73;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v481[8]);
        WebKit::NetworkConnectionToWebProcess::createRTCProvider((WebKit::NetworkConnectionToWebProcess *)v9, (uint64_t *)v510);
        uint64_t v75 = *(void *)v510;
        *(void *)uint64_t v510 = 0;
        if (v75) {
          goto LABEL_108;
        }
      }
      goto LABEL_931;
    case 0xEB:
      IPC::Decoder::decode<WebCore::ResourceRequest>(v8, (uint64_t)v510);
      if (!(_BYTE)v519 || (IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v476), !LOBYTE(v476[1])))
      {
        v481[0] = 0;
        LOBYTE(v491) = 0;
        goto LABEL_917;
      }
      uint64_t v95 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(v10);
      if (v96)
      {
        unint64_t v11 = (atomic_uchar *volatile *)v95;
        uint64_t v97 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
        if ((_BYTE)v98)
        {
          unint64_t v3 = v97;
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v10, (uint64_t)v530);
          if ((_BYTE)v531)
          {
            IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, v478);
            if (v478[16])
            {
              IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)v10, v525);
              char v99 = v528;
              if (!v528)
              {
LABEL_910:
                v481[0] = 0;
                goto LABEL_911;
              }
              unint64_t v100 = *((void *)v10 + 1);
              unint64_t v101 = *(WTF::StringImpl **)v10;
              unint64_t v102 = *((void *)v10 + 2) - *(void *)v10;
              if (v100 <= v102)
              {
                unint64_t v441 = 0;
                uint64_t v442 = 0;
                *(void *)char v10 = 0;
                *((void *)v10 + 1) = 0;
                uint64_t v443 = *((void *)v10 + 3);
                if (v443)
                {
                  if (v100)
                  {
                    (*(void (**)(uint64_t))(*(void *)v443 + 16))(v443);
                    uint64_t v442 = *(WTF::StringImpl **)v10;
                    unint64_t v441 = *((void *)v10 + 1);
                  }
                  else
                  {
                    unint64_t v441 = 0;
                    uint64_t v442 = 0;
                  }
                }
              }
              else
              {
                uint64_t v103 = (unsigned __int8 *)v101 + v102;
                *((void *)v10 + 2) = v103 + 1;
                if (v101)
                {
                  unsigned int v104 = *v103;
                  if (v104 < 2)
                  {
                    BOOL v105 = v104 != 0;
                    if (v100 <= v103 + 1 - (unsigned __int8 *)v101)
                    {
                      unint64_t v446 = 0;
                      uint64_t v447 = 0;
                      *(void *)char v10 = 0;
                      *((void *)v10 + 1) = 0;
                      uint64_t v448 = *((void *)v10 + 3);
                      if (v448)
                      {
                        (*(void (**)(uint64_t))(*(void *)v448 + 16))(v448);
                        unint64_t v446 = 0;
                        unint64_t v471 = *(WTF::StringImpl **)v10;
                        uint64_t v472 = *((void *)v10 + 1);
                        uint64_t v473 = *((void *)v10 + 3);
                        *(void *)char v10 = 0;
                        *((void *)v10 + 1) = 0;
                        uint64_t v447 = 0;
                        if (v473)
                        {
                          if (v472)
                          {
                            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v473 + 16))(v473, v471);
                            uint64_t v447 = *(WTF::StringImpl **)v10;
                            unint64_t v446 = *((void *)v10 + 1);
                          }
                        }
                      }
                    }
                    else
                    {
                      *((void *)v10 + 2) = v103 + 2;
                      unsigned int v106 = v103[1];
                      if (v106 < 2)
                      {
                        BOOL v107 = v106 != 0;
                        uint64_t v108 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(v10);
                        if ((v108 & 0xFF0000) == 0)
                        {
LABEL_909:
                          char v99 = 0;
                          goto LABEL_910;
                        }
                        __int16 v109 = v108;
                        BOOL v474 = v107;
                        BOOL v475 = v105;
                        unsigned __int16 v110 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v10);
                        if (v110 > 0xFFu)
                        {
                          char v111 = v110;
                          unsigned __int16 v112 = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(v10);
                          if (v112 > 0xFFu)
                          {
                            if (!(_BYTE)v519 || !LOBYTE(v476[1]) || !(_BYTE)v531 || !v478[16] || !v528) {
                              goto LABEL_887;
                            }
                            char v113 = v112;
                            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v481, (uint64_t)v510);
                            uint64_t v114 = v476[0];
                            v476[0] = 0;
                            *(void *)&v484[64] = v114;
                            *(void *)&v484[72] = v11;
                            *(_OWORD *)&v484[88] = *(_OWORD *)v530;
                            *(void *)&v484[80] = v3;
                            *(void *)&v484[104] = *(void *)&v530[16];
                            long long v485 = *(_OWORD *)v478;
                            LOBYTE(v486) = 0;
                            *(_DWORD *)char v488 = -1;
                            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v486, (uint64_t)v525);
                            v488[8] = 0;
                            LODWORD(v490) = -1;
                            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v488[8], (uint64_t)&v526 + 8);
                            BYTE8(v490) = v475;
                            BYTE9(v490) = v474;
                            WORD5(v490) = v109;
                            BYTE12(v490) = v111;
                            char v99 = 1;
                            BYTE13(v490) = v113;
LABEL_911:
                            LOBYTE(v491) = v99;
                            std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v525);
LABEL_912:
                            if (LOBYTE(v476[1]))
                            {
                              uint64_t v450 = v476[0];
                              v476[0] = 0;
                              if (v450)
                              {
                                if (*(_DWORD *)v450 == 2) {
                                  WTF::StringImpl::destroy(v450, v98);
                                }
                                else {
                                  *(_DWORD *)v450 -= 2;
                                }
                              }
                            }
LABEL_917:
                            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v510);
                            if (!(_BYTE)v491)
                            {
                              uint64_t v454 = *(WTF::StringImpl **)v10;
                              uint64_t v455 = *((void *)v10 + 1);
                              *(void *)char v10 = 0;
                              *((void *)v10 + 1) = 0;
                              uint64_t v456 = *((void *)v10 + 3);
                              if (!v456) {
                                goto LABEL_931;
                              }
                              if (!v455) {
                                goto LABEL_931;
                              }
                              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v456 + 16))(v456, v454);
                              if (!(_BYTE)v491) {
                                goto LABEL_931;
                              }
                            }
                            *(_OWORD *)uint64_t v510 = *(_OWORD *)&v484[88];
                            *(void *)&v510[16] = *(void *)&v484[104];
                            WebKit::NetworkConnectionToWebProcess::createSocketChannel((void *)v9, (WebCore::ResourceRequestBase *)v481, (uint64_t)&v484[64], *(uint64_t *)&v484[72], *(uint64_t *)&v484[80], (uint64_t)v510, v485, SDWORD2(v485), (uint64_t)&v486, SBYTE8(v490), SBYTE9(v490), WORD5(v490), SBYTE12(v490), SBYTE13(v490));
                            if (!(_BYTE)v491) {
                              goto LABEL_931;
                            }
                            if (v490 != -1) {
                              ((void (*)(unsigned char *, unsigned char *))off_1EE9B73E8[v490])(v510, &v488[8]);
                            }
                            LODWORD(v490) = -1;
                            if (*(_DWORD *)v488 != -1) {
                              ((void (*)(unsigned char *, uint64_t *))off_1EE9B73E8[*(unsigned int *)v488])(v510, &v486);
                            }
                            *(_DWORD *)char v488 = -1;
                            char v452 = *(WTF::StringImpl **)&v484[64];
                            *(void *)&v484[64] = 0;
                            if (v452)
                            {
                              if (*(_DWORD *)v452 == 2) {
                                WTF::StringImpl::destroy(v452, v451);
                              }
                              else {
                                *(_DWORD *)v452 -= 2;
                              }
                            }
                            goto LABEL_927;
                          }
                        }
LABEL_903:
                        unint64_t v101 = *(WTF::StringImpl **)v10;
                        unint64_t v100 = *((void *)v10 + 1);
                        goto LABEL_904;
                      }
                      unint64_t v446 = v100;
                      uint64_t v447 = v101;
                    }
                    *(void *)char v10 = 0;
                    *((void *)v10 + 1) = 0;
                    uint64_t v449 = *((void *)v10 + 3);
                    if (v449 && v446) {
                      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v449 + 16))(v449, v447, v446);
                    }
                    goto LABEL_909;
                  }
                  goto LABEL_904;
                }
                unint64_t v441 = v100;
                uint64_t v442 = 0;
              }
              unint64_t v100 = 0;
              unint64_t v101 = 0;
              *(void *)char v10 = 0;
              *((void *)v10 + 1) = 0;
              uint64_t v444 = *((void *)v10 + 3);
              if (v444)
              {
                if (!v441)
                {
                  unint64_t v100 = 0;
                  unint64_t v101 = 0;
                  goto LABEL_904;
                }
                (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v444 + 16))(v444, v442, v441);
                goto LABEL_903;
              }
LABEL_904:
              *(void *)char v10 = 0;
              *((void *)v10 + 1) = 0;
              uint64_t v445 = *((void *)v10 + 3);
              if (v445 && v100) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v445 + 16))(v445, v101);
              }
              goto LABEL_909;
            }
          }
        }
      }
      else
      {
        unint64_t v98 = *(WTF::StringImpl **)v10;
        uint64_t v393 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v394 = *((void *)v10 + 3);
        if (v394 && v393) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v394 + 16))(v394, v98);
        }
      }
      v481[0] = 0;
      LOBYTE(v491) = 0;
      goto LABEL_912;
    case 0xEC:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::String>>(v8, v481);
      if (!v481[48]) {
        goto LABEL_262;
      }
      uint64_t v179 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v178) {
        goto LABEL_262;
      }
      *(void *)uint64_t v510 = v179;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v180 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v180 = &unk_1EE9B7480;
      v180[1] = *(void *)v510;
      uint64_t v181 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v180[2] = v181;
      *(void *)char v525 = v180;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[48]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::deleteCookie(v9, (uint64_t)v481, (uint64_t)&v481[40], (uint64_t *)v525);
      uint64_t v182 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v182) {
        (*(void (**)(uint64_t))(*(void *)v182 + 8))(v182);
      }
LABEL_262:
      std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v481, v178);
      goto LABEL_931;
    case 0xED:
      if (!*(unsigned char *)(v6 + 359)) {
        goto LABEL_931;
      }
      uint64_t v63 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
      if (!v64) {
        goto LABEL_842;
      }
      WebKit::NetworkConnectionToWebProcess::destroyWebTransportSession(v9, v63);
      goto LABEL_931;
    case 0xEE:
      unint64_t v124 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v8);
      if (v125) {
        WebKit::NetworkConnectionToWebProcess::didDeliverMessagePortMessages((WebKit::NetworkConnectionToWebProcess *)v9, v124);
      }
      goto LABEL_931;
    case 0xEF:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>((uint64_t)v481, (uint64_t *)v8);
      if (v481[32]) {
        WebKit::NetworkConnectionToWebProcess::entangleLocalPortInThisProcessToRemote(v9, (uint64_t *)v481);
      }
      goto LABEL_931;
    case 0xF0:
      uint64_t v157 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8);
      if (!v158) {
        goto LABEL_669;
      }
      unint64_t v3 = v157;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v10, (uint64_t)v525);
      if (!v525[8]) {
        goto LABEL_669;
      }
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(v10, (uint64_t)v510);
      if (!v510[48])
      {
        if (v525[8])
        {
          CFTypeRef v286 = *(WTF::StringImpl **)v525;
          *(void *)char v525 = 0;
          if (v286) {
            goto LABEL_468;
          }
        }
        goto LABEL_669;
      }
      if (!v525[8]) {
        goto LABEL_887;
      }
      unint64_t v159 = *(WTF::StringImpl **)v525;
      *(void *)unint64_t v481 = v3;
      *(void *)&v481[8] = *(void *)v525;
      *(_OWORD *)&v481[16] = *(_OWORD *)v510;
      *(_OWORD *)&v481[32] = *(_OWORD *)&v510[16];
      *(_OWORD *)&v481[48] = *(_OWORD *)&v510[32];
      v481[64] = 1;
      uint64_t v160 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if ((_BYTE)v44)
      {
        *(void *)uint64_t v510 = v160;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
        uint64_t v161 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v161 = &unk_1EE9B75F8;
        v161[1] = *(void *)v510;
        uint64_t v162 = *(void *)&v510[8];
        *(void *)&v510[8] = 0;
        v161[2] = v162;
        *(void *)char v525 = v161;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
        *(_OWORD *)uint64_t v510 = *(_OWORD *)&v481[16];
        *(_OWORD *)&v510[16] = *(_OWORD *)&v481[32];
        *(_OWORD *)&v510[32] = *(_OWORD *)&v481[48];
        WebKit::NetworkConnectionToWebProcess::establishSWContextConnection((void *)v9, v3, (WTF::ASCIICaseInsensitiveHash **)&v481[8], v510, (uint64_t *)v525);
        uint64_t v163 = *(void *)v525;
        *(void *)char v525 = 0;
        if (v163) {
          (*(void (**)(uint64_t))(*(void *)v163 + 8))(v163);
        }
        if (!v481[64]) {
          goto LABEL_931;
        }
LABEL_274:
        unint64_t v159 = *(WTF::StringImpl **)&v481[8];
      }
LABEL_275:
      *(void *)&v481[8] = 0;
      if (!v159) {
        goto LABEL_931;
      }
      if (*(_DWORD *)v159 != 2)
      {
        *(_DWORD *)v159 -= 2;
        goto LABEL_931;
      }
      unint64_t v315 = v159;
      goto LABEL_886;
    case 0xF1:
      uint64_t v187 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8);
      if (!v188) {
        goto LABEL_669;
      }
      uint64_t v189 = v187;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v10, (uint64_t)v510);
      if (!v510[8]) {
        goto LABEL_669;
      }
      unint64_t v159 = *(WTF::StringImpl **)v510;
      *(void *)unint64_t v481 = v189;
      *(void *)&v481[8] = *(void *)v510;
      v481[16] = 1;
      uint64_t v190 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v44) {
        goto LABEL_275;
      }
      *(void *)uint64_t v510 = v190;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v191 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v191 = &unk_1EE9B7620;
      v191[1] = *(void *)v510;
      uint64_t v192 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v191[2] = v192;
      *(void *)char v525 = v191;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      WebKit::NetworkConnectionToWebProcess::establishSharedWorkerContextConnection(v9, v189, (const WebCore::RegistrableDomain *)&v481[8], (uint64_t *)v525);
      uint64_t v193 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v193) {
        (*(void (**)(uint64_t))(*(void *)v193 + 8))(v193);
      }
      if (v481[16]) {
        goto LABEL_274;
      }
      goto LABEL_931;
    case 0xF2:
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v530);
      if (!v530[8]) {
        goto LABEL_669;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v10, (uint64_t)v525);
      if (v525[8])
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, (uint64_t)v510);
        if (v510[16]
          && (uint64_t v221 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10),
              (_BYTE)v23))
        {
          if (!v530[8] || !v525[8] || !v510[16]) {
            goto LABEL_887;
          }
          unint64_t v3 = v221;
          uint64_t v222 = *(void *)v530;
          *(void *)uint64_t v530 = 0;
          uint64_t v223 = *(void *)v525;
          *(void *)char v525 = 0;
          *(void *)unint64_t v481 = v222;
          *(void *)&v481[8] = v223;
          *(_OWORD *)&v481[16] = *(_OWORD *)v510;
          *(void *)&v481[32] = v221;
          int v224 = 1;
        }
        else
        {
          int v224 = 0;
          v481[0] = 0;
        }
        v481[40] = v224;
        if (v525[8])
        {
          uint64_t v305 = *(WTF::StringImpl **)v525;
          *(void *)char v525 = 0;
          if (v305)
          {
            if (*(_DWORD *)v305 == 2) {
              WTF::StringImpl::destroy(v305, v23);
            }
            else {
              *(_DWORD *)v305 -= 2;
            }
          }
        }
      }
      else
      {
        int v224 = 0;
        v481[0] = 0;
        v481[40] = 0;
      }
      if (v530[8])
      {
        uint64_t v356 = *(WTF::StringImpl **)v530;
        *(void *)uint64_t v530 = 0;
        if (v356)
        {
          if (*(_DWORD *)v356 == 2) {
            WTF::StringImpl::destroy(v356, v23);
          }
          else {
            *(_DWORD *)v356 -= 2;
          }
        }
      }
      if (!v224) {
        goto LABEL_669;
      }
      uint64_t v310 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v44) {
        goto LABEL_579;
      }
      *(void *)uint64_t v510 = v310;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v311 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v311 = &unk_1EE9B7580;
      v311[1] = *(void *)v510;
      uint64_t v312 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v311[2] = v312;
      *(void *)char v525 = v311;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      WebKit::NetworkConnectionToWebProcess::hasStorageAccess(v9, (uint64_t)v481, (uint64_t)&v481[8], *(uint64_t *)&v481[16], *(uint64_t *)&v481[24], v3, (uint64_t *)v525);
      uint64_t v313 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v313) {
        (*(void (**)(uint64_t))(*(void *)v313 + 8))(v313);
      }
      if (v481[40]) {
        goto LABEL_579;
      }
      goto LABEL_931;
    case 0xF3:
      if (!*(unsigned char *)(v6 + 359)) {
        goto LABEL_931;
      }
      IPC::Decoder::decode<std::tuple<WTF::URL>>(v8, v481);
      if (!v481[40]) {
        goto LABEL_931;
      }
      uint64_t v164 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v44) {
        goto LABEL_291;
      }
      *(void *)uint64_t v510 = v164;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      unint64_t v165 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v165 = &unk_1EE9B7760;
      v165[1] = *(void *)v510;
      uint64_t v166 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v165[2] = v166;
      *(void *)char v525 = v165;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[40]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(v9, (WTF::URL *)v481, (uint64_t *)v525);
      uint64_t v94 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v94) {
        goto LABEL_290;
      }
      goto LABEL_291;
    case 0xF4:
      IPC::ArgumentCoder<WebCore::MockContentFilterSettings,void>::decode((uint64_t *)v8, (uint64_t)v481);
      if (v481[24]) {
        goto LABEL_252;
      }
      double v365 = *(WTF::StringImpl **)v10;
      uint64_t v366 = *((void *)v10 + 1);
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v367 = *((void *)v10 + 3);
      if (!v367 || !v366)
      {
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        goto LABEL_931;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v367 + 16))(v367, v365);
      if (v481[24])
      {
LABEL_252:
        *(_DWORD *)uint64_t v510 = *(_DWORD *)v481;
        int v175 = *(WTF::StringImpl **)&v481[8];
        if (*(void *)&v481[8]) {
          **(_DWORD **)&v481[8] += 2;
        }
        *(void *)&v510[8] = v175;
        int v176 = *(WTF::StringImpl **)&v481[16];
        if (*(void *)&v481[16])
        {
          int v177 = **(_DWORD **)&v481[16];
          **(_DWORD **)&v481[16] += 2;
          *(void *)&v510[16] = v176;
          v510[24] = 1;
          *(void *)&v481[16] = 0;
          if (v177)
          {
            *(_DWORD *)int v176 = v177;
          }
          else
          {
            WTF::StringImpl::destroy(v176, v174);
            int v175 = *(WTF::StringImpl **)&v481[8];
          }
        }
        else
        {
          *(void *)&v510[16] = 0;
          v510[24] = 1;
          *(void *)&v481[16] = 0;
        }
        *(void *)&v481[8] = 0;
        if (v175)
        {
          if (*(_DWORD *)v175 == 2) {
            WTF::StringImpl::destroy(v175, v174);
          }
          else {
            *(_DWORD *)v175 -= 2;
          }
        }
        WebKit::NetworkConnectionToWebProcess::installMockContentFilter((WebCore::MockContentFilterSettings *)v9, (uint64_t)v510);
        if (v510[24])
        {
          uint64_t v290 = *(WTF::StringImpl **)&v510[16];
          *(void *)&v510[16] = 0;
          if (v290)
          {
            if (*(_DWORD *)v290 == 2) {
              WTF::StringImpl::destroy(v290, v44);
            }
            else {
              *(_DWORD *)v290 -= 2;
            }
          }
          unint64_t v315 = *(WTF::StringImpl **)&v510[8];
          *(void *)&v510[8] = 0;
          if (v315) {
            goto LABEL_884;
          }
        }
      }
      else
      {
        char v333 = *(WTF::StringImpl **)v10;
        uint64_t v334 = *((void *)v10 + 1);
        uint64_t v335 = *((void *)v10 + 3);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        if (v335) {
          goto LABEL_670;
        }
      }
      goto LABEL_931;
    case 0xF5:
      IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>(v8, (uint64_t)v481);
      if (!v481[8]) {
        goto LABEL_931;
      }
      uint64_t v213 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v44) {
        goto LABEL_315;
      }
      *(void *)uint64_t v510 = v213;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      unint64_t v214 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v214 = &unk_1EE9B77D8;
      v214[1] = *(void *)v510;
      uint64_t v215 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v214[2] = v215;
      *(void *)char v525 = v214;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[8]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::isLoggedIn(v9, (WTF::ASCIICaseInsensitiveHash **)v481, (uint64_t *)v525);
      uint64_t v216 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v216) {
        (*(void (**)(uint64_t))(*(void *)v216 + 8))(v216);
      }
LABEL_315:
      if (!v481[8]) {
        goto LABEL_931;
      }
      goto LABEL_883;
    case 0xF6:
      uint64_t v237 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v8);
      if (v238)
      {
        uint64_t v239 = v237;
        uint64_t v240 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
        if (v241)
        {
          *(void *)unint64_t v481 = v240;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v481[8], v11);
          unint64_t v242 = (void *)WTF::fastMalloc((WTF *)0x18);
          *unint64_t v242 = &unk_1EE9B7430;
          v242[1] = *(void *)v481;
          uint64_t v243 = *(void *)&v481[8];
          *(void *)&v481[8] = 0;
          v242[2] = v243;
          *(void *)uint64_t v510 = v242;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v481[8]);
          WebKit::NetworkConnectionToWebProcess::isResourceLoadFinished(v9, v239, (uint64_t *)v510);
          uint64_t v75 = *(void *)v510;
          *(void *)uint64_t v510 = 0;
          if (v75) {
LABEL_108:
          }
            (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
        }
      }
      goto LABEL_931;
    case 0xF7:
      IPC::Decoder::decode<WebCore::ResourceRequest>(v8, (uint64_t)v510);
      char v116 = v519;
      if (!(_BYTE)v519) {
        goto LABEL_815;
      }
      uint64_t v117 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v23) {
        goto LABEL_814;
      }
      unint64_t v118 = *((void *)v10 + 1);
      uint64_t v119 = *(WTF::StringImpl **)v10;
      unint64_t v120 = ((*((void *)v10 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v10;
      if (v118 < v120 || v118 - v120 <= 7)
      {
        unint64_t v399 = 0;
        unint64_t v400 = 0;
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v401 = *((void *)v10 + 3);
        if (v401)
        {
          if (v118)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v401 + 16))(v401, v119, v118);
            unint64_t v400 = *(WTF::StringImpl **)v10;
            unint64_t v399 = *((void *)v10 + 1);
          }
          else
          {
            unint64_t v399 = 0;
            unint64_t v400 = 0;
          }
        }
LABEL_813:
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v402 = *((void *)v10 + 3);
        if (v402 && v399) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v402 + 16))(v402, v400);
        }
LABEL_814:
        char v116 = 0;
LABEL_815:
        v481[0] = 0;
        goto LABEL_816;
      }
      CFTypeRef v122 = (uint64_t *)((char *)v119 + v120);
      *((void *)v10 + 2) = v122 + 1;
      if (!v119)
      {
        unint64_t v399 = v118;
        unint64_t v400 = 0;
        goto LABEL_813;
      }
      if (!(_BYTE)v519) {
        goto LABEL_887;
      }
      unint64_t v3 = v117;
      uint64_t v123 = *v122;
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v481, (uint64_t)v510);
      *(void *)&v484[64] = v3;
      *(void *)&v484[72] = v123;
      char v116 = 1;
LABEL_816:
      v484[80] = v116;
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v510);
      if (!v484[80])
      {
        uint64_t v408 = *(WTF::StringImpl **)v10;
        uint64_t v409 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v410 = *((void *)v10 + 3);
        if (!v410) {
          goto LABEL_931;
        }
        if (!v409) {
          goto LABEL_931;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v410 + 16))(v410, v408);
        if (!v484[80]) {
          goto LABEL_931;
        }
      }
      uint64_t v403 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!v404) {
        goto LABEL_821;
      }
      *(void *)uint64_t v510 = v403;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      v405 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v405 = &unk_1EE9B7788;
      v405[1] = *(void *)v510;
      uint64_t v406 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v405[2] = v406;
      *(void *)char v525 = v405;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (v484[80])
      {
        WebKit::NetworkConnectionToWebProcess::loadImageForDecoding(v9, (uint64_t)v481, *(uint64_t *)&v484[64], *(uint64_t *)&v484[72], (uint64_t *)v525);
        uint64_t v407 = *(void *)v525;
        *(void *)char v525 = 0;
        if (v407) {
          (*(void (**)(uint64_t))(*(void *)v407 + 8))(v407);
        }
LABEL_821:
        if (v484[80])
        {
LABEL_927:
          uint64_t v453 = *(const void **)&v484[56];
          *(void *)&v484[56] = 0;
          if (v453) {
            CFRelease(v453);
          }
          uint64_t v428 = (WebCore::ResourceRequestBase *)v481;
LABEL_930:
          WebCore::ResourceRequestBase::~ResourceRequestBase(v428);
          goto LABEL_931;
        }
      }
      else
      {
LABEL_887:
        while (1)
        {
          __break(1u);
LABEL_888:
          uint64_t v437 = *(WTF::StringImpl **)v525;
          *(void *)char v525 = 0;
          if (v437)
          {
            if (*(_DWORD *)v437 == 2) {
              WTF::StringImpl::destroy(v437, v23);
            }
            else {
              *(_DWORD *)v437 -= 2;
            }
          }
LABEL_876:
          if (!v3) {
            break;
          }
          uint64_t v432 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
          if (!(_BYTE)v433) {
            goto LABEL_882;
          }
          *(void *)uint64_t v510 = v432;
          char v10 = (IPC::Decoder *)&v510[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
          CFTypeRef v434 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v434 = &unk_1EE9B77B0;
          v434[1] = *(void *)v510;
          uint64_t v435 = *(void *)&v510[8];
          *(void *)&v510[8] = 0;
          v434[2] = v435;
          *(void *)char v525 = v434;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
          if (v481[64])
          {
            WebKit::NetworkConnectionToWebProcess::setLoginStatus(v9, (WTF::ASCIICaseInsensitiveHash **)v481, v481[8], (uint64_t)&v481[16], (uint64_t *)v525);
            uint64_t v436 = *(void *)v525;
            *(void *)char v525 = 0;
            if (v436) {
              (*(void (**)(uint64_t))(*(void *)v436 + 8))(v436);
            }
            if (!v481[64]) {
              goto LABEL_931;
            }
LABEL_882:
            std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v481[16], v433);
LABEL_883:
            unint64_t v315 = *(WTF::StringImpl **)v481;
            *(void *)unint64_t v481 = 0;
            if (v315)
            {
LABEL_884:
              if (*(_DWORD *)v315 == 2) {
                goto LABEL_886;
              }
              *(_DWORD *)v315 -= 2;
            }
            goto LABEL_931;
          }
        }
LABEL_669:
        char v333 = *(WTF::StringImpl **)v10;
        uint64_t v334 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v335 = *((void *)v10 + 3);
        if (!v335) {
          goto LABEL_931;
        }
LABEL_670:
        if (v334) {
          goto LABEL_844;
        }
      }
      goto LABEL_931;
    case 0xF8:
      IPC::Decoder::decode<std::tuple<WebKit::NetworkResourceLoadParameters>>(v481, v8, (uint64_t)v8);
      if ((_BYTE)v508) {
        WebKit::NetworkConnectionToWebProcess::loadPing(v9, (uint64_t *)v481);
      }
      goto LABEL_931;
    case 0xF9:
      IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>((uint64_t *)v8, (uint64_t)v525);
      if (!v525[16]) {
        goto LABEL_842;
      }
      IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>((uint64_t *)v10, (uint64_t)v510);
      if (!v510[16]) {
        goto LABEL_842;
      }
      IPC::Decoder::decode<std::span<char const,18446744073709551615ul>>((uint64_t *)v10, (uint64_t)v481);
      if (!v481[16]) {
        goto LABEL_842;
      }
      unint64_t v244 = *((void *)v10 + 1);
      char v23 = *(WTF::StringImpl **)v10;
      unint64_t v245 = *((void *)v10 + 2) - *(void *)v10;
      if (v244 <= v245)
      {
        unint64_t v415 = 0;
        CFTypeRef v416 = 0;
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v417 = *((void *)v10 + 3);
        if (v417)
        {
          if (v244)
          {
            (*(void (**)(uint64_t))(*(void *)v417 + 16))(v417);
            CFTypeRef v416 = *(WTF::StringImpl **)v10;
            unint64_t v415 = *((void *)v10 + 1);
          }
          else
          {
            unint64_t v415 = 0;
            CFTypeRef v416 = 0;
          }
        }
      }
      else
      {
        uint64_t v246 = (unsigned __int8 *)v23 + v245;
        *((void *)v10 + 2) = v246 + 1;
        if (v23)
        {
          unint64_t v247 = ((unint64_t)(v246 + 4) & 0xFFFFFFFFFFFFFFFCLL) - (void)v23;
          if (v244 >= v247 && v244 - v247 > 3)
          {
            unsigned int v249 = *v246;
            uint64_t v250 = (int *)((unint64_t)(v246 + 4) & 0xFFFFFFFFFFFFFFFCLL);
            int v251 = *v250;
            *((void *)v10 + 2) = v250 + 1;
            if (v525[16] && v510[16])
            {
              WebKit::NetworkConnectionToWebProcess::logOnBehalfOfWebContent(v9, *(char **)v525, *(uint64_t *)&v525[8], *(char **)v510, *(uint64_t *)&v510[8], *(uint64_t *)v481, *(uint64_t *)&v481[8], v249, v251);
              goto LABEL_931;
            }
            goto LABEL_887;
          }
          *(void *)char v10 = 0;
          *((void *)v10 + 1) = 0;
          uint64_t v419 = *((void *)v10 + 3);
          if (v419)
          {
            (*(void (**)(uint64_t))(*(void *)v419 + 16))(v419);
            unint64_t v466 = *(WTF::StringImpl **)v10;
            uint64_t v467 = *((void *)v10 + 1);
            uint64_t v468 = *((void *)v10 + 3);
            *(void *)char v10 = 0;
            *((void *)v10 + 1) = 0;
            if (v468)
            {
              if (v467) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v468 + 16))(v468, v466);
              }
            }
          }
LABEL_842:
          char v333 = *(WTF::StringImpl **)v10;
          uint64_t v357 = *((void *)v10 + 1);
          *(void *)char v10 = 0;
          *((void *)v10 + 1) = 0;
          uint64_t v335 = *((void *)v10 + 3);
          if (!v335) {
            goto LABEL_931;
          }
          goto LABEL_843;
        }
        unint64_t v415 = v244;
        CFTypeRef v416 = 0;
      }
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v418 = *((void *)v10 + 3);
      if (v418 && v415) {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v418 + 16))(v418, v416, v415);
      }
      goto LABEL_842;
    case 0xFA:
      IPC::Decoder::decode<std::tuple<WebCore::RegistrableDomain>>(v8, (uint64_t)v481);
      if (!v481[8]) {
        goto LABEL_931;
      }
      WebKit::NetworkConnectionToWebProcess::logUserInteraction(v9, (WTF::StringImpl **)v481);
      goto LABEL_315;
    case 0xFB:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)v8, (uint64_t)v481);
      if (v481[16]) {
        WebCore::MessagePortChannelRegistry::didCloseMessagePort();
      }
      goto LABEL_931;
    case 0xFC:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)v8, (uint64_t)v481);
      if (v481[16]) {
        WebKit::NetworkConnectionToWebProcess::messagePortDisentangled(v9, v481);
      }
      goto LABEL_931;
    case 0xFD:
      IPC::Decoder::decode<std::tuple<WTF::URL>>(v8, v481);
      if (!v481[40]) {
        goto LABEL_931;
      }
      uint64_t v199 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v44) {
        goto LABEL_291;
      }
      *(void *)uint64_t v510 = v199;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v200 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v200 = &unk_1EE9B7738;
      v200[1] = *(void *)v510;
      uint64_t v201 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v200[2] = v201;
      *(void *)char v525 = v200;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[40]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::navigatorGetPushPermissionState(v9, (WebCore::SecurityOriginData *)v481, (uint64_t *)v525);
      uint64_t v94 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v94) {
        goto LABEL_290;
      }
      goto LABEL_291;
    case 0xFE:
      IPC::Decoder::decode<std::tuple<WTF::URL>>(v8, v481);
      if (!v481[40]) {
        goto LABEL_931;
      }
      uint64_t v154 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v44) {
        goto LABEL_291;
      }
      *(void *)uint64_t v510 = v154;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      int v155 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v155 = &unk_1EE9B7710;
      v155[1] = *(void *)v510;
      uint64_t v156 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v155[2] = v156;
      *(void *)char v525 = v155;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[40]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::navigatorGetPushSubscription(v9, (uint64_t *)v481, (uint64_t *)v525);
      uint64_t v94 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v94) {
        goto LABEL_290;
      }
      goto LABEL_291;
    case 0xFF:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v8, v481);
      if (!v481[56]) {
        goto LABEL_298;
      }
      uint64_t v203 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v202) {
        goto LABEL_298;
      }
      *(void *)uint64_t v510 = v203;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v204 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v204 = &unk_1EE9B76C0;
      v204[1] = *(void *)v510;
      uint64_t v205 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v204[2] = v205;
      *(void *)char v525 = v204;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[56]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(v9, (const WTF::URL *)v481, (uint64_t)&v481[40], (uint64_t *)v525);
      uint64_t v206 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v206) {
        (*(void (**)(uint64_t))(*(void *)v206 + 8))(v206);
      }
LABEL_298:
      std::__optional_destruct_base<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v481, v202);
      goto LABEL_931;
    case 0x100:
      IPC::Decoder::decode<WTF::URL>(v8, v510);
      if (!v510[40]) {
        goto LABEL_669;
      }
      uint64_t v65 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v10);
      if (!(_BYTE)v23)
      {
        v481[0] = 0;
        v481[48] = 0;
        if (v510[40])
        {
          CFTypeRef v286 = *(WTF::StringImpl **)v510;
          *(void *)uint64_t v510 = 0;
          if (v286)
          {
LABEL_468:
            if (*(_DWORD *)v286 == 2) {
              WTF::StringImpl::destroy(v286, v23);
            }
            else {
              *(_DWORD *)v286 -= 2;
            }
          }
        }
        goto LABEL_669;
      }
      if (!v510[40]) {
        goto LABEL_887;
      }
      *(void *)unint64_t v481 = *(void *)v510;
      *(_OWORD *)&v481[8] = *(_OWORD *)&v510[8];
      *(_OWORD *)&v481[24] = *(_OWORD *)&v510[24];
      *(void *)&v481[40] = v65;
      v481[48] = 1;
      uint64_t v66 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if ((_BYTE)v44)
      {
        *(void *)uint64_t v510 = v66;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
        uint64_t v67 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v67 = &unk_1EE9B76E8;
        v67[1] = *(void *)v510;
        uint64_t v68 = *(void *)&v510[8];
        *(void *)&v510[8] = 0;
        IntSize v67[2] = v68;
        *(void *)char v525 = v67;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
        WebKit::NetworkConnectionToWebProcess::navigatorUnsubscribeFromPushService(v9, (uint64_t)v481, (uint64_t *)&v481[40], (uint64_t *)v525);
        uint64_t v69 = *(void *)v525;
        *(void *)char v525 = 0;
        if (v69) {
          (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
        }
        if (!v481[48]) {
          goto LABEL_931;
        }
      }
      goto LABEL_883;
    case 0x101:
      uint64_t v56 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v8);
      if (v57) {
        WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTrackingForPage(v9, v56);
      }
      goto LABEL_931;
    case 0x102:
      IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(v8, (uint64_t)v510);
      if (!v510[24] || (IPC::Decoder::decode<WebCore::MessagePortIdentifier>((uint64_t *)v10, (uint64_t)v525), !v525[16]))
      {
        std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v510, v23);
        goto LABEL_669;
      }
      if (!v510[24]) {
        goto LABEL_887;
      }
      long long v47 = *(_OWORD *)v510;
      memset(v510, 0, 24);
      *(_OWORD *)unint64_t v481 = v47;
      *(void *)&v481[16] = *(void *)&v510[16];
      *(_OWORD *)&v481[24] = *(_OWORD *)v525;
      v481[40] = 1;
      std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v510, v23);
      WebKit::NetworkConnectionToWebProcess::postMessageToRemote(v9, (uint64_t)v481, (uint64_t *)&v481[24]);
      if (v481[40])
      {
        uint64_t v49 = *(WTF **)&v481[8];
        if (*(void *)&v481[8])
        {
          *(void *)&v481[8] = 0;
          *(_DWORD *)&v481[16] = 0;
          WTF::fastFree(v49, v48);
        }
        uint64_t v50 = *(unsigned int **)v481;
        *(void *)unint64_t v481 = 0;
        if (v50) {
          WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v50);
        }
      }
      goto LABEL_931;
    case 0x103:
      IPC::Decoder::decode<std::optional<PAL::SessionID>>(v8, v525);
      if (v525[16] && (IPC::Decoder::decode<WebKit::NetworkResourceLoadParameters>((uint64_t)v510, v10, v51), v524))
      {
        if (!v525[16]) {
          goto LABEL_887;
        }
        *(_OWORD *)unint64_t v481 = *(_OWORD *)v525;
        WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)&v481[16], (uint64_t)v510);
        unsigned __int8 v509 = 1;
        if (!v524) {
          goto LABEL_64;
        }
        WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v510, v52);
        if (v509) {
          goto LABEL_64;
        }
      }
      else
      {
        v481[0] = 0;
        unsigned __int8 v509 = 0;
      }
      uint64_t v283 = *(WTF::StringImpl **)v10;
      uint64_t v284 = *((void *)v10 + 1);
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v285 = *((void *)v10 + 3);
      if (!v285) {
        goto LABEL_931;
      }
      if (!v284) {
        goto LABEL_931;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v285 + 16))(v285, v283);
      if (!v509) {
        goto LABEL_931;
      }
LABEL_64:
      WebKit::NetworkConnectionToWebProcess::preconnectTo(v9, *(uint64_t *)v481, v481[8], (uint64_t *)&v481[16]);
      if (!v509) {
        goto LABEL_931;
      }
      char v54 = (WebKit::NetworkResourceLoadParameters *)&v481[16];
      goto LABEL_394;
    case 0x104:
      IPC::Decoder::decode<std::tuple<WTF::String>>(v8, (uint64_t)v481);
      if (!v481[8]) {
        goto LABEL_931;
      }
      WebKit::NetworkConnectionToWebProcess::prefetchDNS((WebKit::NetworkConnectionToWebProcess *)v9, (const WTF::String *)v481);
      if (!v481[8]) {
        goto LABEL_931;
      }
      goto LABEL_655;
    case 0x105:
      IPC::handleMessage<Messages::NetworkConnectionToWebProcess::PrioritizeResourceLoads,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>(v8, v6);
      goto LABEL_931;
    case 0x106:
      IPC::Decoder::decode<std::tuple<WTF::String>>(v8, (uint64_t)v481);
      if (!v481[8]) {
        goto LABEL_931;
      }
      uint64_t v217 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v44) {
        goto LABEL_322;
      }
      *(void *)uint64_t v510 = v217;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v218 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v218 = &unk_1EE9B7530;
      v218[1] = *(void *)v510;
      uint64_t v219 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v218[2] = v219;
      *(void *)char v525 = v218;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[8]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::registerBlobPathForTesting((WebKit::NetworkConnectionToWebProcess *)v9, (const WTF::String *)v481, (uint64_t *)v525);
      uint64_t v220 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v220) {
        (*(void (**)(uint64_t))(*(void *)v220 + 8))(v220);
      }
LABEL_322:
      if (!v481[8]) {
        goto LABEL_931;
      }
      goto LABEL_883;
    case 0x107:
      IPC::Decoder::decode<WTF::URL>(v8, v478);
      if (v480)
      {
        IPC::Decoder::decode<WTF::URL>(v10, v530);
        if (v532)
        {
          IPC::Decoder::decode<WebCore::PolicyContainer>(v10, (uint64_t)v510);
          if (v510[80]
            && (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>((uint64_t *)v10, (uint64_t)v525), v527))
          {
            if (!v480 || !v532 || !v510[80]) {
              goto LABEL_887;
            }
            uint64_t v78 = *(void *)v478;
            *(void *)uint64_t v478 = 0;
            *(void *)unint64_t v481 = v78;
            *(_OWORD *)&v481[8] = *(_OWORD *)&v478[8];
            *(_OWORD *)&v481[24] = v479;
            *(_DWORD *)&v478[8] &= ~1u;
            uint64_t v79 = *(void *)v530;
            *(void *)uint64_t v530 = 0;
            *(void *)&v481[40] = v79;
            *(_OWORD *)&v481[48] = *(_OWORD *)&v530[8];
            *(_OWORD *)&v481[64] = v531;
            *(_DWORD *)&v530[8] &= ~1u;
            uint64_t v80 = *(void *)v510;
            *(void *)uint64_t v510 = 0;
            *(void *)&v481[80] = v80;
            uint64_t v81 = *(void *)&v510[8];
            *(void *)&v510[8] = 0;
            *(void *)&v481[88] = v81;
            v481[100] = v510[20];
            *(_DWORD *)&v481[96] = *(_DWORD *)&v510[16];
            *(_WORD *)&v481[104] = *(_WORD *)&v510[24];
            long long v82 = *(_OWORD *)&v510[32];
            *(_OWORD *)&v510[32] = 0u;
            long long v482 = v82;
            *(_WORD *)CFTypeRef v483 = *(_WORD *)&v510[48];
            long long v83 = *(_OWORD *)&v510[56];
            *(_OWORD *)&v510[56] = 0u;
            *(_OWORD *)uint64_t v484 = v83;
            v484[16] = v510[72];
            v484[24] = 0;
            v484[56] = 0;
            if (BYTE8(v526))
            {
              *(_DWORD *)&v484[48] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v484[24], (uint64_t)v525);
              v484[56] = 1;
              v484[64] = 1;
              if (v527 && BYTE8(v526) && v526 != -1) {
                ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9B73E8[v526])(v476, v525);
              }
            }
            else
            {
              v484[64] = 1;
            }
          }
          else
          {
            v481[0] = 0;
            v484[64] = 0;
          }
          std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v510, v23);
          if (v532)
          {
            unsigned __int8 v84 = *(WTF::StringImpl **)v530;
            *(void *)uint64_t v530 = 0;
            if (v84)
            {
              if (*(_DWORD *)v84 == 2) {
                WTF::StringImpl::destroy(v84, v77);
              }
              else {
                *(_DWORD *)v84 -= 2;
              }
            }
          }
        }
        else
        {
          v481[0] = 0;
          v484[64] = 0;
        }
        if (v480)
        {
          v299 = *(WTF::StringImpl **)v478;
          *(void *)uint64_t v478 = 0;
          if (v299)
          {
            if (*(_DWORD *)v299 == 2) {
              WTF::StringImpl::destroy(v299, v77);
            }
            else {
              *(_DWORD *)v299 -= 2;
            }
          }
        }
      }
      else
      {
        v481[0] = 0;
        v484[64] = 0;
      }
      if (!v484[64])
      {
        BOOL v377 = *(WTF::StringImpl **)v10;
        uint64_t v378 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v379 = *((void *)v10 + 3);
        if (!v379) {
          goto LABEL_931;
        }
        if (!v378) {
          goto LABEL_931;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v379 + 16))(v379, v377);
        if (!v484[64]) {
          goto LABEL_931;
        }
      }
      WebKit::NetworkConnectionToWebProcess::registerBlobURL(v9, (uint64_t)v481, (uint64_t)&v481[40], (uint64_t)&v481[80], (uint64_t)&v484[24]);
      if (!v484[64]) {
        goto LABEL_931;
      }
      if (v484[56])
      {
        if (*(_DWORD *)&v484[48] != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9B73E8[*(unsigned int *)&v484[48]])(v510, &v484[24]);
        }
        *(_DWORD *)&v484[48] = -1;
      }
      uint64_t v301 = *(WTF::StringImpl **)&v484[8];
      *(void *)&v484[8] = 0;
      if (v301)
      {
        if (*(_DWORD *)v301 == 2) {
          WTF::StringImpl::destroy(v301, v300);
        }
        else {
          *(_DWORD *)v301 -= 2;
        }
      }
      v302 = *(WTF::StringImpl **)v484;
      *(void *)uint64_t v484 = 0;
      if (v302)
      {
        if (*(_DWORD *)v302 == 2) {
          WTF::StringImpl::destroy(v302, v300);
        }
        else {
          *(_DWORD *)v302 -= 2;
        }
      }
      uint64_t v303 = (WTF::StringImpl *)*((void *)&v482 + 1);
      *((void *)&v482 + 1) = 0;
      if (v303)
      {
        if (*(_DWORD *)v303 == 2) {
          WTF::StringImpl::destroy(v303, v300);
        }
        else {
          *(_DWORD *)v303 -= 2;
        }
      }
      uint64_t v304 = (WTF::StringImpl *)v482;
      *(void *)&long long v482 = 0;
      if (v304)
      {
        if (*(_DWORD *)v304 == 2) {
          WTF::StringImpl::destroy(v304, v300);
        }
        else {
          *(_DWORD *)v304 -= 2;
        }
      }
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v481[80], v300);
      goto LABEL_593;
    case 0x108:
      IPC::Decoder::decode<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v481, v8);
      if (v481[80]) {
        WebKit::NetworkConnectionToWebProcess::registerBlobURLHandle(v9, (uint64_t)v481, (uint64_t)&v481[40]);
      }
      goto LABEL_404;
    case 0x109:
      IPC::Decoder::decode<WTF::URL>(v8, v510);
      if (!v510[40]) {
        goto LABEL_722;
      }
      unint64_t v227 = *((void *)v10 + 1);
      uint64_t v228 = *(WTF::StringImpl **)v10;
      unint64_t v229 = ((*((void *)v10 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v10;
      if (v227 < v229 || v227 - v229 <= 7)
      {
        unint64_t v380 = 0;
        uint64_t v381 = 0;
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v382 = *((void *)v10 + 3);
        if (v382)
        {
          if (v227)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v382 + 16))(v382, v228, v227);
            uint64_t v381 = *(WTF::StringImpl **)v10;
            unint64_t v380 = *((void *)v10 + 1);
          }
          else
          {
            unint64_t v380 = 0;
            uint64_t v381 = 0;
          }
        }
        goto LABEL_777;
      }
      uint64_t v231 = (unint64_t *)((char *)v228 + v229);
      *((void *)v10 + 2) = v231 + 1;
      if (!v228)
      {
        unint64_t v380 = v227;
        uint64_t v381 = 0;
LABEL_777:
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v383 = *((void *)v10 + 3);
        if (v383 && v380) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v383 + 16))(v383, v381);
        }
        goto LABEL_790;
      }
      unint64_t v3 = *v231;
      *(_OWORD *)uint64_t v530 = 0uLL;
      if (v3 >= 0x5555)
      {
        while (1)
        {
          IPC::Decoder::decode<WebCore::BlobPart>(v481, v10);
          if (!v481[48]) {
            break;
          }
          int v384 = *(_DWORD *)&v530[12];
          if (*(_DWORD *)&v530[12] == *(_DWORD *)&v530[8])
          {
            WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>((uint64_t)v530, (unint64_t)v481);
          }
          else
          {
            uint64_t v385 = *(void *)v530 + 48 * *(unsigned int *)&v530[12];
            *(unsigned char *)uint64_t v385 = 0;
            *(_DWORD *)(v385 + 40) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(v385, (uint64_t)v481);
            *(_DWORD *)&v530[12] = v384 + 1;
          }
          if (v481[48] && *(_DWORD *)&v481[40] != -1) {
            ((void (*)(unsigned char *, unsigned char *))off_1EE9B74E8[*(unsigned int *)&v481[40]])(v525, v481);
          }
          if (!--v3)
          {
            unsigned int v395 = *(_DWORD *)&v530[12];
            unint64_t v11 = *(atomic_uchar *volatile **)v530;
            if (*(_DWORD *)&v530[8] > *(_DWORD *)&v530[12])
            {
              uint64_t v396 = *(atomic_uchar *volatile **)v530;
              if (*(_DWORD *)&v530[12])
              {
                if (*(_DWORD *)&v530[12] >= 0x5555556u)
                {
                  __break(0xC471u);
                  return;
                }
                int v397 = 48 * *(_DWORD *)&v530[12];
                uint64_t v398 = WTF::fastMalloc((WTF *)(48 * *(unsigned int *)&v530[12]));
                *(_DWORD *)&v530[8] = (v397 & 0xFFFFFFF0) / 0x30;
                *(void *)uint64_t v530 = v398;
                uint64_t v396 = v11;
                if ((atomic_uchar *volatile *)v398 != v11)
                {
                  WTF::VectorMover<false,WebCore::BlobPart>::move((uint64_t)v11, (uint64_t)&v11[6 * v395], v398);
                  uint64_t v396 = *(atomic_uchar *volatile **)v530;
                }
              }
              if (v11)
              {
                if (v396 == v11)
                {
                  *(void *)uint64_t v530 = 0;
                  *(_DWORD *)&v530[8] = 0;
                }
                WTF::fastFree((WTF *)v11, v226);
                unint64_t v11 = *(atomic_uchar *volatile **)v530;
              }
              else
              {
                unint64_t v11 = v396;
              }
            }
            *(void *)char v525 = v11;
            LODWORD(v3) = *(_DWORD *)&v530[8];
            int v259 = *(_DWORD *)&v530[12];
            *(_OWORD *)uint64_t v530 = 0uLL;
            goto LABEL_406;
          }
        }
LABEL_789:
        WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v530, v233);
LABEL_790:
        uint64_t v262 = *(WTF::StringImpl **)v10;
        uint64_t v386 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v387 = *((void *)v10 + 3);
        if (v387) {
          BOOL v388 = v386 == 0;
        }
        else {
          BOOL v388 = 1;
        }
        if (!v388) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v387 + 16))(v387, v262);
        }
        int v261 = 0;
        v481[0] = 0;
        v481[64] = 0;
        goto LABEL_410;
      }
      if (v3)
      {
        uint64_t v232 = WTF::fastMalloc((WTF *)(48 * v3));
        *(_DWORD *)&v530[8] = 48 * (int)v3 / 0x30u;
        *(void *)uint64_t v530 = v232;
        do
        {
          IPC::Decoder::decode<WebCore::BlobPart>(v481, v10);
          if (!v481[48]) {
            goto LABEL_789;
          }
          int v234 = *(_DWORD *)&v530[12];
          if (*(_DWORD *)&v530[12] == *(_DWORD *)&v530[8])
          {
            WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BlobPart>((uint64_t)v530, (unint64_t)v481);
          }
          else
          {
            uint64_t v235 = *(void *)v530 + 48 * *(unsigned int *)&v530[12];
            *(unsigned char *)uint64_t v235 = 0;
            *(_DWORD *)(v235 + 40) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::URL>,(std::__variant_detail::_Trait)1>>(v235, (uint64_t)v481);
            *(_DWORD *)&v530[12] = v234 + 1;
          }
          if (v481[48] && *(_DWORD *)&v481[40] != -1) {
            ((void (*)(unsigned char *, unsigned char *))off_1EE9B74E8[*(unsigned int *)&v481[40]])(v525, v481);
          }
          --v3;
        }
        while (v3);
        unint64_t v11 = *(atomic_uchar *volatile **)v530;
        LODWORD(v3) = *(_DWORD *)&v530[8];
        int v259 = *(_DWORD *)&v530[12];
      }
      else
      {
        int v259 = 0;
        unint64_t v11 = 0;
      }
      *(_OWORD *)uint64_t v530 = 0uLL;
      *(void *)char v525 = v11;
LABEL_406:
      *(_DWORD *)&v525[8] = v3;
      *(_DWORD *)&v525[12] = v259;
      v525[16] = 1;
      WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v530, v226);
      IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v530);
      if (v530[8])
      {
        if (!v510[40]) {
          goto LABEL_887;
        }
        uint64_t v260 = *(void *)v510;
        *(void *)uint64_t v510 = 0;
        *(void *)unint64_t v481 = v260;
        *(_OWORD *)&v481[8] = *(_OWORD *)&v510[8];
        *(_OWORD *)&v481[24] = *(_OWORD *)&v510[24];
        *(_DWORD *)&v510[8] &= ~1u;
        *(void *)char v525 = 0;
        *(void *)&v481[40] = v11;
        *(void *)&v525[8] = 0;
        *(_DWORD *)&v481[48] = v3;
        *(_DWORD *)&v481[52] = v259;
        int v261 = 1;
        *(void *)&v481[56] = *(void *)v530;
      }
      else
      {
        int v261 = 0;
        v481[0] = 0;
      }
      v481[64] = v261;
      WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v525, v23);
LABEL_410:
      if (v510[40])
      {
        uint64_t v263 = *(WTF::StringImpl **)v510;
        *(void *)uint64_t v510 = 0;
        if (v263)
        {
          if (*(_DWORD *)v263 == 2) {
            WTF::StringImpl::destroy(v263, v262);
          }
          else {
            *(_DWORD *)v263 -= 2;
          }
        }
      }
      if (v261)
      {
        WebKit::NetworkConnectionToWebProcess::registerInternalBlobURL(v9, (uint64_t)v481);
        if (!v481[64]) {
          goto LABEL_931;
        }
        unint64_t v298 = *(WTF::StringImpl **)&v481[56];
        *(void *)&v481[56] = 0;
        if (v298)
        {
          if (*(_DWORD *)v298 == 2) {
            WTF::StringImpl::destroy(v298, v297);
          }
          else {
            *(_DWORD *)v298 -= 2;
          }
        }
        WTF::Vector<WebCore::BlobPart,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v481[40], v297);
        goto LABEL_655;
      }
LABEL_722:
      char v333 = *(WTF::StringImpl **)v10;
      uint64_t v357 = *((void *)v10 + 1);
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v335 = *((void *)v10 + 3);
      if (!v335) {
        goto LABEL_931;
      }
      goto LABEL_843;
    case 0x10A:
      IPC::Decoder::decode<WTF::URL>(v8, v525);
      if (!v527) {
        goto LABEL_765;
      }
      IPC::Decoder::decode<WTF::URL>(v10, v510);
      if (v510[40])
      {
        unint64_t v11 = (atomic_uchar *volatile *)IPC::Decoder::decode<long long>(v10);
        if ((_BYTE)v23 && (unint64_t v30 = IPC::Decoder::decode<long long>(v10), (_BYTE)v23))
        {
          unint64_t v3 = v30;
          IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v530);
          if (v530[8])
          {
            if (!v527 || !v510[40]) {
              goto LABEL_887;
            }
            uint64_t v31 = *(void *)v525;
            *(void *)char v525 = 0;
            *(void *)unint64_t v481 = v31;
            *(_OWORD *)&v481[8] = *(_OWORD *)&v525[8];
            *(_OWORD *)&v481[24] = v526;
            *(_DWORD *)&v525[8] &= ~1u;
            uint64_t v32 = *(void *)v510;
            *(void *)uint64_t v510 = 0;
            *(void *)&v481[40] = v32;
            *(_OWORD *)&v481[48] = *(_OWORD *)&v510[8];
            *(_OWORD *)&v481[64] = *(_OWORD *)&v510[24];
            *(_DWORD *)&v510[8] &= ~1u;
            *(void *)&v481[80] = v11;
            *(void *)&v481[88] = v3;
            int v33 = 1;
            *(void *)&v481[96] = *(void *)v530;
          }
          else
          {
            int v33 = 0;
            v481[0] = 0;
          }
          v481[104] = v33;
        }
        else
        {
          int v33 = 0;
          v481[0] = 0;
          v481[104] = 0;
        }
        if (v510[40])
        {
          unint64_t v264 = *(WTF::StringImpl **)v510;
          *(void *)uint64_t v510 = 0;
          if (v264)
          {
            if (*(_DWORD *)v264 == 2) {
              WTF::StringImpl::destroy(v264, v23);
            }
            else {
              *(_DWORD *)v264 -= 2;
            }
          }
        }
      }
      else
      {
        int v33 = 0;
        v481[0] = 0;
        v481[104] = 0;
      }
      if (v527)
      {
        int v288 = *(WTF::StringImpl **)v525;
        *(void *)char v525 = 0;
        if (v288)
        {
          if (*(_DWORD *)v288 == 2) {
            WTF::StringImpl::destroy(v288, v23);
          }
          else {
            *(_DWORD *)v288 -= 2;
          }
        }
      }
      if (!v33)
      {
LABEL_765:
        char v333 = *(WTF::StringImpl **)v10;
        uint64_t v357 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v335 = *((void *)v10 + 3);
        if (!v335) {
          goto LABEL_931;
        }
        goto LABEL_843;
      }
      WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLForSlice((WebKit::NetworkConnectionToWebProcess *)v9, (const WTF::URL *)v481, (const WTF::URL *)&v481[40], (uint64_t)v11, v3, (const WTF::String *)&v481[96]);
      if (!v481[104]) {
        goto LABEL_931;
      }
      uint64_t v289 = *(WTF::StringImpl **)&v481[96];
      *(void *)&v481[96] = 0;
      if (v289) {
        goto LABEL_590;
      }
      goto LABEL_593;
    case 0x10B:
      IPC::Decoder::decode<WTF::URL>(v8, v525);
      if (!v527) {
        goto LABEL_770;
      }
      IPC::Decoder::decode<WTF::URL>(v10, v510);
      if (!v510[40])
      {
        int v61 = 0;
        v481[0] = 0;
        v481[96] = 0;
        goto LABEL_496;
      }
      IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v478);
      if (!v478[8])
      {
        int v61 = 0;
        v481[0] = 0;
        v481[96] = 0;
        goto LABEL_85;
      }
      IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v530);
      if (v530[8])
      {
        if (!v527 || !v510[40] || !v478[8]) {
          goto LABEL_887;
        }
        uint64_t v59 = *(void *)v525;
        *(void *)char v525 = 0;
        *(void *)unint64_t v481 = v59;
        *(_OWORD *)&v481[8] = *(_OWORD *)&v525[8];
        *(_OWORD *)&v481[24] = v526;
        *(_DWORD *)&v525[8] &= ~1u;
        uint64_t v60 = *(void *)v510;
        *(void *)uint64_t v510 = 0;
        *(void *)&v481[40] = v60;
        *(_OWORD *)&v481[48] = *(_OWORD *)&v510[8];
        *(_OWORD *)&v481[64] = *(_OWORD *)&v510[24];
        *(_DWORD *)&v510[8] &= ~1u;
        *(void *)&v481[80] = *(void *)v478;
        *(void *)&v481[88] = *(void *)v530;
        int v61 = 1;
        v481[96] = 1;
      }
      else
      {
        v481[0] = 0;
        v481[96] = 0;
        if (v478[8])
        {
          unint64_t v361 = *(WTF::StringImpl **)v478;
          *(void *)uint64_t v478 = 0;
          if (v361)
          {
            if (*(_DWORD *)v361 != 2)
            {
              int v61 = 0;
              *(_DWORD *)v361 -= 2;
              goto LABEL_85;
            }
            WTF::StringImpl::destroy(v361, v23);
          }
        }
        int v61 = 0;
      }
LABEL_85:
      if (v510[40])
      {
        uint64_t v62 = *(WTF::StringImpl **)v510;
        *(void *)uint64_t v510 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2) {
            WTF::StringImpl::destroy(v62, v23);
          }
          else {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
LABEL_496:
      if (v527)
      {
        uint64_t v291 = *(WTF::StringImpl **)v525;
        *(void *)char v525 = 0;
        if (v291)
        {
          if (*(_DWORD *)v291 == 2) {
            WTF::StringImpl::destroy(v291, v23);
          }
          else {
            *(_DWORD *)v291 -= 2;
          }
        }
      }
      if (!v61)
      {
LABEL_770:
        char v333 = *(WTF::StringImpl **)v10;
        uint64_t v357 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v335 = *((void *)v10 + 3);
        if (!v335) {
          goto LABEL_931;
        }
        goto LABEL_843;
      }
      WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLOptionallyFileBacked(v9, (uint64_t)v481, (uint64_t)&v481[40], (const WTF::String *)&v481[80]);
      if (!v481[96]) {
        goto LABEL_931;
      }
      uint64_t v292 = *(WTF::StringImpl **)&v481[88];
      *(void *)&v481[88] = 0;
      if (v292)
      {
        if (*(_DWORD *)v292 == 2) {
          WTF::StringImpl::destroy(v292, v44);
        }
        else {
          *(_DWORD *)v292 -= 2;
        }
      }
      uint64_t v289 = *(WTF::StringImpl **)&v481[80];
      *(void *)&v481[80] = 0;
      if (!v289) {
        goto LABEL_593;
      }
      goto LABEL_590;
    case 0x10C:
      IPC::Decoder::decode<WTF::URL>(v8, v510);
      if (!v510[40]) {
        goto LABEL_768;
      }
      IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v476);
      if (!LOBYTE(v476[1]))
      {
        int v212 = 0;
        v481[0] = 0;
        v481[72] = 0;
        goto LABEL_512;
      }
      IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v478);
      if (!v478[8])
      {
        int v212 = 0;
        v481[0] = 0;
        v481[72] = 0;
        goto LABEL_507;
      }
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(v10, (uint64_t)v530);
      if (v530[8])
      {
        IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v525);
        if (v525[8])
        {
          if (!v510[40] || !LOBYTE(v476[1]) || !v478[8] || !v530[8]) {
            goto LABEL_887;
          }
          uint64_t v207 = *(void *)v510;
          *(void *)uint64_t v510 = 0;
          *(void *)unint64_t v481 = v207;
          *(_OWORD *)&v481[8] = *(_OWORD *)&v510[8];
          *(_OWORD *)&v481[24] = *(_OWORD *)&v510[24];
          *(_DWORD *)&v510[8] &= ~1u;
          SessionID v208 = v476[0];
          v476[0] = 0;
          uint64_t v209 = *(void *)v478;
          *(void *)uint64_t v478 = 0;
          *(void *)&v481[40] = v208;
          *(void *)&v481[48] = v209;
          uint64_t v210 = *(void *)v530;
          *(void *)uint64_t v530 = 0;
          *(void *)&v481[56] = v210;
          *(void *)&v481[64] = *(void *)v525;
          int v211 = 1;
          v481[72] = 1;
          goto LABEL_309;
        }
        int v211 = 0;
        int v212 = 0;
        v481[0] = 0;
        v481[72] = 0;
        if (v530[8])
        {
LABEL_309:
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v530);
          int v212 = v211;
        }
      }
      else
      {
        int v212 = 0;
        v481[0] = 0;
        v481[72] = 0;
      }
      if (v478[8])
      {
        uint64_t v287 = *(WTF::StringImpl **)v478;
        *(void *)uint64_t v478 = 0;
        if (v287)
        {
          if (*(_DWORD *)v287 == 2) {
            WTF::StringImpl::destroy(v287, v23);
          }
          else {
            *(_DWORD *)v287 -= 2;
          }
        }
      }
LABEL_507:
      if (LOBYTE(v476[1]))
      {
        uint64_t v293 = v476[0];
        v476[0] = 0;
        if (v293)
        {
          if (*(_DWORD *)v293 == 2) {
            WTF::StringImpl::destroy(v293, v23);
          }
          else {
            *(_DWORD *)v293 -= 2;
          }
        }
      }
LABEL_512:
      if (v510[40])
      {
        v294 = *(WTF::StringImpl **)v510;
        *(void *)uint64_t v510 = 0;
        if (v294)
        {
          if (*(_DWORD *)v294 == 2) {
            WTF::StringImpl::destroy(v294, v23);
          }
          else {
            *(_DWORD *)v294 -= 2;
          }
        }
      }
      if (v212)
      {
        WebKit::NetworkConnectionToWebProcess::registerInternalFileBlobURL(v9, (uint64_t)v481, (const WTF::String *)&v481[40], (const WTF::String *)&v481[48], (uint64_t *)&v481[56]);
        if (!v481[72]) {
          goto LABEL_931;
        }
        uint64_t v296 = *(WTF::StringImpl **)&v481[64];
        *(void *)&v481[64] = 0;
        if (v296)
        {
          if (*(_DWORD *)v296 == 2) {
            WTF::StringImpl::destroy(v296, v295);
          }
          else {
            *(_DWORD *)v296 -= 2;
          }
        }
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v481[56]);
        uint64_t v289 = *(WTF::StringImpl **)&v481[48];
        *(void *)&v481[48] = 0;
        if (v289)
        {
LABEL_590:
          if (*(_DWORD *)v289 == 2) {
            WTF::StringImpl::destroy(v289, v44);
          }
          else {
            *(_DWORD *)v289 -= 2;
          }
        }
LABEL_593:
        CFTypeRef v316 = *(WTF::StringImpl **)&v481[40];
        *(void *)&v481[40] = 0;
        if (v316)
        {
LABEL_652:
          if (*(_DWORD *)v316 == 2) {
            WTF::StringImpl::destroy(v316, v44);
          }
          else {
            *(_DWORD *)v316 -= 2;
          }
        }
LABEL_655:
        unint64_t v315 = *(WTF::StringImpl **)v481;
        *(void *)unint64_t v481 = 0;
        if (v315)
        {
          if (*(_DWORD *)v315 == 2) {
LABEL_886:
          }
            WTF::StringImpl::destroy(v315, v44);
          else {
            *(_DWORD *)v315 -= 2;
          }
        }
        goto LABEL_931;
      }
LABEL_768:
      char v333 = *(WTF::StringImpl **)v10;
      uint64_t v357 = *((void *)v10 + 1);
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v335 = *((void *)v10 + 3);
      if (!v335) {
        goto LABEL_931;
      }
LABEL_843:
      if (v357) {
LABEL_844:
      }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v335 + 16))(v335, v333);
LABEL_931:
      if (*(_DWORD *)(v9 + 8) == 1) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      else {
        --*(_DWORD *)(v9 + 8);
      }
      return;
    case 0x10D:
      IPC::handleMessage<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(v8, (void *)v6);
      goto LABEL_931;
    case 0x10E:
      uint64_t v45 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v8);
      if (v46) {
        WebKit::NetworkConnectionToWebProcess::removeLoadIdentifier((uint64_t *)v9, v45);
      }
      goto LABEL_931;
    case 0x10F:
      IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>>((uint64_t)v481, v8);
      if (v481[32]) {
        WebKit::NetworkConnectionToWebProcess::removeOriginAccessAllowListEntry((WebKit::NetworkConnectionToWebProcess *)v9, (const WTF::String *)v481, (const WTF::String *)&v481[8], (const WTF::String *)&v481[16], (const WTF::String *)v481[24]);
      }
LABEL_102:
      std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v481, v12);
      goto LABEL_931;
    case 0x110:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v8, (uint64_t)v481);
      if (!v481[16]) {
        goto LABEL_842;
      }
      IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v23) {
        goto LABEL_842;
      }
      if (!v481[16]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::removeStorageAccessForFrame(v9);
      goto LABEL_931;
    case 0x111:
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v530);
      if (!v530[8]) {
        goto LABEL_669;
      }
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v10, (uint64_t)v525);
      if (v525[8])
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, (uint64_t)v510);
        if (v510[16]
          && (uint64_t v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10),
              (_BYTE)v23)
          && (unint64_t v3 = v24,
              uint64_t v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10),
              (_BYTE)v23)
          && (uint64_t v4 = (void *)v25, v26 = IPC::Decoder::decode<WebCore::UserStyleLevel>((uint64_t *)v10), v26 > 0xFFu))
        {
          if (!v530[8] || !v525[8] || !v510[16]) {
            goto LABEL_887;
          }
          int v27 = v26;
          uint64_t v351 = *(void *)v530;
          *(void *)uint64_t v530 = 0;
          uint64_t v352 = *(void *)v525;
          *(void *)char v525 = 0;
          *(void *)unint64_t v481 = v351;
          *(void *)&v481[8] = v352;
          *(_OWORD *)&v481[16] = *(_OWORD *)v510;
          *(void *)&v481[32] = v3;
          *(void *)&v481[40] = v4;
          int v28 = 1;
          v481[48] = v26;
        }
        else
        {
          int v27 = 0;
          int v28 = 0;
          v481[0] = 0;
        }
        v481[56] = v28;
        if (v525[8])
        {
          uint64_t v29 = *(WTF::StringImpl **)v525;
          *(void *)char v525 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v23);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
        }
      }
      else
      {
        int v27 = 0;
        int v28 = 0;
        v481[0] = 0;
        v481[56] = 0;
      }
      if (v530[8])
      {
        uint64_t v354 = *(WTF::StringImpl **)v530;
        *(void *)uint64_t v530 = 0;
        if (v354)
        {
          if (*(_DWORD *)v354 == 2) {
            WTF::StringImpl::destroy(v354, v23);
          }
          else {
            *(_DWORD *)v354 -= 2;
          }
        }
      }
      if (!v28) {
        goto LABEL_669;
      }
      uint64_t v306 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if ((_BYTE)v44)
      {
        *(void *)uint64_t v510 = v306;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
        uint64_t v307 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v307 = &unk_1EE9B75A8;
        v307[1] = *(void *)v510;
        uint64_t v308 = *(void *)&v510[8];
        *(void *)&v510[8] = 0;
        v307[2] = v308;
        *(void *)char v525 = v307;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
        WebKit::NetworkConnectionToWebProcess::requestStorageAccess(v9, (WTF **)v481, (const WTF::StringImpl **)&v481[8], *(uint64_t *)&v481[16], *(uint64_t *)&v481[24], v3, v4, v27 != 0, (uint64_t *)v525);
        uint64_t v309 = *(void *)v525;
        *(void *)char v525 = 0;
        if (v309) {
          (*(void (**)(uint64_t))(*(void *)v309 + 8))(v309);
        }
        if (!v481[56]) {
          goto LABEL_931;
        }
      }
LABEL_579:
      char v314 = *(WTF::StringImpl **)&v481[8];
      *(void *)&v481[8] = 0;
      if (v314) {
        goto LABEL_605;
      }
      goto LABEL_883;
    case 0x112:
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v525);
      if (!v525[8]) {
        goto LABEL_669;
      }
      unint64_t v11 = (atomic_uchar *volatile *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if ((_BYTE)v23)
      {
        IPC::Decoder::decode<WebCore::RegistrableDomain>(v10, (uint64_t)v510);
        if (v510[8])
        {
          if (!v525[8]) {
            goto LABEL_887;
          }
          uint64_t v257 = *(void *)v525;
          *(void *)char v525 = 0;
          *(void *)unint64_t v481 = v257;
          *(void *)&v481[8] = v11;
          *(void *)&v481[16] = *(void *)v510;
          int v258 = 1;
        }
        else
        {
          int v258 = 0;
          v481[0] = 0;
        }
        v481[24] = v258;
      }
      else
      {
        int v258 = 0;
        v481[0] = 0;
        v481[24] = 0;
      }
      if (v525[8])
      {
        unsigned int v355 = *(WTF::StringImpl **)v525;
        *(void *)char v525 = 0;
        if (v355)
        {
          if (*(_DWORD *)v355 == 2) {
            WTF::StringImpl::destroy(v355, v23);
          }
          else {
            *(_DWORD *)v355 -= 2;
          }
        }
      }
      if (!v258) {
        goto LABEL_669;
      }
      WebKit::NetworkConnectionToWebProcess::requestStorageAccessUnderOpener(v9, (uint64_t *)v481, (uint64_t)v11, (uint64_t *)&v481[16]);
      if (!v481[24]) {
        goto LABEL_931;
      }
      char v314 = *(WTF::StringImpl **)&v481[16];
      *(void *)&v481[16] = 0;
      if (v314)
      {
LABEL_605:
        if (*(_DWORD *)v314 == 2) {
          WTF::StringImpl::destroy(v314, v44);
        }
        else {
          *(_DWORD *)v314 -= 2;
        }
      }
      goto LABEL_883;
    case 0x113:
      WebCore::SecurityPolicy::resetOriginAccessAllowlists((WebCore::SecurityPolicy *)v6);
      goto LABEL_931;
    case 0x114:
      IPC::handleMessageAsync<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>(v7, v8, v6);
      goto LABEL_931;
    case 0x115:
      IPC::Decoder::decode<WebKit::NetworkResourceLoadParameters>((uint64_t)v510, v8, (uint64_t)v8);
      if (v524)
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)v10, v525);
        int v252 = v525[16];
        if (v525[16])
        {
          if (!v524) {
            goto LABEL_887;
          }
          WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)v481, (uint64_t)v510);
          long long v508 = *(_OWORD *)v525;
          int v252 = 1;
        }
        else
        {
          v481[0] = 0;
        }
        unsigned __int8 v509 = v252;
        if (v524)
        {
          WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v510, v23);
          int v252 = v509;
        }
        if (v252) {
          goto LABEL_385;
        }
      }
      else
      {
        v481[0] = 0;
        unsigned __int8 v509 = 0;
      }
      uint64_t v411 = *(WTF::StringImpl **)v10;
      uint64_t v412 = *((void *)v10 + 1);
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v413 = *((void *)v10 + 3);
      if (!v413) {
        goto LABEL_931;
      }
      if (!v412) {
        goto LABEL_931;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v413 + 16))(v413, v411);
      if (!v509) {
        goto LABEL_931;
      }
LABEL_385:
      WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(v9, (uint64_t)v481, v508, SBYTE8(v508));
      if (v509)
      {
LABEL_393:
        char v54 = (WebKit::NetworkResourceLoadParameters *)v481;
LABEL_394:
        WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters(v54, v53);
      }
      goto LABEL_931;
    case 0x116:
      IPC::Decoder::decode<std::tuple<WebKit::NetworkResourceLoadParameters>>(v481, v8, (uint64_t)v8);
      if (!(_BYTE)v508) {
        goto LABEL_931;
      }
      uint64_t v253 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v53) {
        goto LABEL_392;
      }
      *(void *)uint64_t v510 = v253;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v254 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v254 = &unk_1EE9B7408;
      v254[1] = *(void *)v510;
      uint64_t v255 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v254[2] = v255;
      *(void *)char v525 = v254;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!(_BYTE)v508) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::sendH2Ping(v9, (uint64_t)v481, (uint64_t *)v525);
      uint64_t v256 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v256) {
        (*(void (**)(uint64_t))(*(void *)v256 + 8))(v256);
      }
LABEL_392:
      if ((_BYTE)v508) {
        goto LABEL_393;
      }
      goto LABEL_931;
    case 0x117:
      IPC::handleMessage<Messages::NetworkConnectionToWebProcess::SetCORSDisablingPatterns,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(v8, v6);
      goto LABEL_931;
    case 0x118:
      unsigned __int16 v225 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v8);
      if (v225 <= 0xFFu) {
        goto LABEL_842;
      }
      WebKit::NetworkConnectionToWebProcess::setCaptureExtraNetworkLoadMetricsEnabled((void *)v9, (void *)(v225 != 0));
      goto LABEL_931;
    case 0x119:
      IPC::Decoder::decode<WTF::URL>(v8, v530);
      if (v532)
      {
        unsigned int v70 = IPC::Decoder::decode<WebCore::SameSiteInfo>((uint64_t *)v10);
        if (HIBYTE(v70) && (LODWORD(v3) = v70, IPC::Decoder::decode<WTF::URL>(v10, v525), v527))
        {
          IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v10, (uint64_t)v478);
          if ((_BYTE)v479
            && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, v476), v477)&& (v265 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v10), v265 > 0xFFu)&& (char v266 = v265, IPC::Decoder::decode<WebCore::Cookie>(v10, v510), (_BYTE)v515))
          {
            unsigned __int16 v267 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v10);
            if (v267 <= 0xFFu)
            {
              char v23 = *(WTF::StringImpl **)v10;
              uint64_t v457 = *((void *)v10 + 1);
              *(void *)char v10 = 0;
              *((void *)v10 + 1) = 0;
              uint64_t v458 = *((void *)v10 + 3);
              if (v458 && v457) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v458 + 16))(v458, v23);
              }
              char v274 = 0;
              v481[0] = 0;
            }
            else
            {
              if (!v532 || !v527 || !(_BYTE)v479 || !v477 || !(_BYTE)v515) {
                goto LABEL_887;
              }
              uint64_t v268 = *(void *)v530;
              *(void *)uint64_t v530 = 0;
              *(void *)unint64_t v481 = v268;
              *(_OWORD *)&v481[8] = *(_OWORD *)&v530[8];
              *(_OWORD *)&v481[24] = v531;
              *(_DWORD *)&v530[8] &= ~1u;
              *(_WORD *)&v481[40] = v3;
              v481[42] = BYTE2(v3);
              uint64_t v269 = *(void *)v525;
              *(void *)char v525 = 0;
              *(_OWORD *)&v481[56] = *(_OWORD *)&v525[8];
              *(_OWORD *)&v481[72] = v526;
              *(_DWORD *)&v525[8] &= ~1u;
              *(void *)&v481[48] = v269;
              *(void *)&v481[104] = *(void *)&v478[16];
              *(_OWORD *)&v481[88] = *(_OWORD *)v478;
              long long v482 = *(_OWORD *)v476;
              v483[0] = v266;
              long long v270 = *(_OWORD *)&v510[16];
              *(_OWORD *)uint64_t v484 = *(_OWORD *)v510;
              memset(v510, 0, 32);
              *(_OWORD *)&v484[16] = v270;
              *(_OWORD *)&v484[43] = *(_OWORD *)&v510[43];
              *(_OWORD *)&v484[32] = *(_OWORD *)&v510[32];
              long long v271 = *(_OWORD *)&v510[64];
              *(_OWORD *)&v510[64] = 0u;
              *(_OWORD *)&v484[64] = v271;
              *(_OWORD *)&v484[80] = *(_OWORD *)&v510[80];
              *(_OWORD *)&v484[96] = v511;
              *(_DWORD *)&v510[80] &= ~1u;
              uint64_t v272 = v512;
              uint64_t v512 = 0;
              *(void *)&long long v485 = v272;
              uint64_t v273 = v513;
              uint64_t v513 = 0;
              *((void *)&v485 + 1) = v273;
              LOBYTE(v486) = v514;
              char v274 = 1;
              LOBYTE(v487) = v267;
            }
            BYTE8(v487) = v274;
            if ((_BYTE)v515) {
              WebCore::Cookie::~Cookie((WebCore::Cookie *)v510, v23);
            }
          }
          else
          {
            v481[0] = 0;
            BYTE8(v487) = 0;
          }
          if (v527)
          {
            uint64_t v282 = *(WTF::StringImpl **)v525;
            *(void *)char v525 = 0;
            if (v282)
            {
              if (*(_DWORD *)v282 == 2) {
                WTF::StringImpl::destroy(v282, v23);
              }
              else {
                *(_DWORD *)v282 -= 2;
              }
            }
          }
        }
        else
        {
          v481[0] = 0;
          BYTE8(v487) = 0;
        }
        if (v532)
        {
          CFTypeRef v324 = *(WTF::StringImpl **)v530;
          *(void *)uint64_t v530 = 0;
          if (v324)
          {
            if (*(_DWORD *)v324 == 2) {
              WTF::StringImpl::destroy(v324, v23);
            }
            else {
              *(_DWORD *)v324 -= 2;
            }
          }
        }
      }
      else
      {
        v481[0] = 0;
        BYTE8(v487) = 0;
      }
      if (BYTE8(v487)
        || (unint64_t v371 = *(WTF::StringImpl **)v10,
            uint64_t v372 = *((void *)v10 + 1),
            *(void *)char v10 = 0,
            *((void *)v10 + 1) = 0,
            (uint64_t v373 = *((void *)v10 + 3)) != 0)
        && v372
        && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v373 + 16))(v373, v371), BYTE8(v487)))
      {
        uint64_t v325 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
        if ((_BYTE)v326)
        {
          *(void *)uint64_t v510 = v325;
          char v10 = (IPC::Decoder *)&v510[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
          unint64_t v327 = (void *)WTF::fastMalloc((WTF *)0x18);
          *unint64_t v327 = &unk_1EE9B74D0;
          v327[1] = *(void *)v510;
          uint64_t v328 = *(void *)&v510[8];
          *(void *)&v510[8] = 0;
          v327[2] = v328;
          *(void *)char v525 = v327;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
          if (!BYTE8(v487)) {
            goto LABEL_887;
          }
          *(_OWORD *)uint64_t v510 = *(_OWORD *)&v481[88];
          *(void *)&v510[16] = *(void *)&v481[104];
          WebKit::NetworkConnectionToWebProcess::setCookieFromDOMAsync((void *)v9, (WTF::URL *)v481, &v481[40], (const WTF::URL *)&v481[48], (long long *)v510, (WTF::String *)v482, *((uint64_t *)&v482 + 1), v483[0], (uint64_t)v484, v487, (uint64_t *)v525);
          uint64_t v329 = *(void *)v525;
          *(void *)char v525 = 0;
          if (v329) {
            (*(void (**)(uint64_t))(*(void *)v329 + 8))(v329);
          }
        }
        if (BYTE8(v487))
        {
          WebCore::Cookie::~Cookie((WebCore::Cookie *)v484, v326);
          goto LABEL_651;
        }
      }
      goto LABEL_931;
    case 0x11A:
      IPC::Decoder::decode<WTF::URL>(v8, v525);
      if (v527)
      {
        uint64_t v236 = (atomic_uchar *volatile *)IPC::Decoder::decode<WebCore::SameSiteInfo>((uint64_t *)v10);
        if (v236 >> 24 && (unint64_t v11 = v236, IPC::Decoder::decode<WTF::URL>(v10, v510), v510[40]))
        {
          IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, (uint64_t)v530);
          if (v530[16]
            && (uint64_t v279 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10),
                (_BYTE)v23)
            && (unint64_t v3 = v279, v280 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v10), v280 > 0xFFu)
            && (char v336 = v280, IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v478), v478[8]))
          {
            unsigned __int16 v337 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v10);
            if (v337 <= 0xFFu)
            {
              char v23 = *(WTF::StringImpl **)v10;
              uint64_t v438 = *((void *)v10 + 1);
              *(void *)char v10 = 0;
              *((void *)v10 + 1) = 0;
              uint64_t v439 = *((void *)v10 + 3);
              if (v439 && v438) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v439 + 16))(v439, v23);
              }
              v481[0] = 0;
              v484[0] = 0;
              if (v478[8])
              {
                uint64_t v440 = *(WTF::StringImpl **)v478;
                *(void *)uint64_t v478 = 0;
                if (v440)
                {
                  if (*(_DWORD *)v440 == 2) {
                    WTF::StringImpl::destroy(v440, v23);
                  }
                  else {
                    *(_DWORD *)v440 -= 2;
                  }
                }
              }
            }
            else
            {
              if (!v527 || !v510[40] || !v530[16] || !v478[8]) {
                goto LABEL_887;
              }
              uint64_t v338 = *(void *)v525;
              *(void *)char v525 = 0;
              *(void *)unint64_t v481 = v338;
              *(_OWORD *)&v481[8] = *(_OWORD *)&v525[8];
              *(_OWORD *)&v481[24] = v526;
              *(_DWORD *)&v525[8] &= ~1u;
              *(_WORD *)&v481[40] = (_WORD)v11;
              v481[42] = BYTE2(v11);
              uint64_t v339 = *(void *)v510;
              *(void *)uint64_t v510 = 0;
              *(_OWORD *)&v481[56] = *(_OWORD *)&v510[8];
              *(_OWORD *)&v481[72] = *(_OWORD *)&v510[24];
              *(_DWORD *)&v510[8] &= ~1u;
              *(_OWORD *)&v481[88] = *(_OWORD *)v530;
              *(void *)&v481[48] = v339;
              *(void *)&v481[104] = v3;
              LOBYTE(v482) = v336;
              *((void *)&v482 + 1) = *(void *)v478;
              v483[0] = v337;
              v484[0] = 1;
            }
          }
          else
          {
            v481[0] = 0;
            v484[0] = 0;
          }
          if (v510[40])
          {
            int v281 = *(WTF::StringImpl **)v510;
            *(void *)uint64_t v510 = 0;
            if (v281)
            {
              if (*(_DWORD *)v281 == 2) {
                WTF::StringImpl::destroy(v281, v23);
              }
              else {
                *(_DWORD *)v281 -= 2;
              }
            }
          }
        }
        else
        {
          v481[0] = 0;
          v484[0] = 0;
        }
        if (v527)
        {
          uint64_t v330 = *(WTF::StringImpl **)v525;
          *(void *)char v525 = 0;
          if (v330)
          {
            if (*(_DWORD *)v330 == 2) {
              WTF::StringImpl::destroy(v330, v23);
            }
            else {
              *(_DWORD *)v330 -= 2;
            }
          }
        }
      }
      else
      {
        v481[0] = 0;
        v484[0] = 0;
      }
      if (!v484[0])
      {
        uint64_t v374 = *(WTF::StringImpl **)v10;
        uint64_t v375 = *((void *)v10 + 1);
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v376 = *((void *)v10 + 3);
        if (!v376) {
          goto LABEL_931;
        }
        if (!v375) {
          goto LABEL_931;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v376 + 16))(v376, v374);
        if (!v484[0]) {
          goto LABEL_931;
        }
      }
      WebKit::NetworkConnectionToWebProcess::setCookiesFromDOM((void *)v9, (WTF::URL *)v481, &v481[40], (const WTF::String **)&v481[48], *(uint64_t *)&v481[88], *(uint64_t *)&v481[96], *(WTF::String **)&v481[104], v482, (uint64_t)&v482 + 8, v483[0]);
      if (!v484[0]) {
        goto LABEL_931;
      }
      v323 = (WTF::StringImpl *)*((void *)&v482 + 1);
      *((void *)&v482 + 1) = 0;
      if (v323)
      {
LABEL_648:
        if (*(_DWORD *)v323 == 2) {
          WTF::StringImpl::destroy(v323, v44);
        }
        else {
          *(_DWORD *)v323 -= 2;
        }
      }
LABEL_651:
      CFTypeRef v316 = *(WTF::StringImpl **)&v481[48];
      *(void *)&v481[48] = 0;
      if (v316) {
        goto LABEL_652;
      }
      goto LABEL_655;
    case 0x11B:
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v8, (uint64_t)v525);
      if (!v525[8]) {
        goto LABEL_669;
      }
      unint64_t v85 = *((void *)v10 + 1);
      char v23 = *(WTF::StringImpl **)v10;
      unint64_t v86 = *((void *)v10 + 2) - *(void *)v10;
      if (v85 <= v86)
      {
        unint64_t v389 = 0;
        v390 = 0;
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v391 = *((void *)v10 + 3);
        if (v391)
        {
          if (v85)
          {
            (*(void (**)(uint64_t))(*(void *)v391 + 16))(v391);
            v390 = *(WTF::StringImpl **)v10;
            unint64_t v389 = *((void *)v10 + 1);
          }
          else
          {
            unint64_t v389 = 0;
            v390 = 0;
          }
        }
      }
      else
      {
        uint64_t v87 = (unsigned __int8 *)v23 + v86;
        *((void *)v10 + 2) = v87 + 1;
        if (v23)
        {
          LODWORD(v3) = *v87;
          if (v3 >= 2) {
            goto LABEL_873;
          }
          if (v85 <= v87 + 1 - (unsigned __int8 *)v23)
          {
            unint64_t v389 = 0;
            v390 = 0;
            *(void *)char v10 = 0;
            *((void *)v10 + 1) = 0;
            uint64_t v414 = *((void *)v10 + 3);
            if (v414)
            {
              (*(void (**)(uint64_t))(*(void *)v414 + 16))(v414);
              unint64_t v389 = 0;
              char v463 = *(WTF::StringImpl **)v10;
              uint64_t v464 = *((void *)v10 + 1);
              uint64_t v465 = *((void *)v10 + 3);
              *(void *)char v10 = 0;
              *((void *)v10 + 1) = 0;
              v390 = 0;
              if (v465)
              {
                if (v464)
                {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v465 + 16))(v465, v463);
                  v390 = *(WTF::StringImpl **)v10;
                  unint64_t v389 = *((void *)v10 + 1);
                }
              }
            }
          }
          else
          {
            *((void *)v10 + 2) = v87 + 2;
            unsigned int v88 = v87[1];
            if (v88 < 2)
            {
              if (v87[1])
              {
                IPC::ArgumentCoder<WebCore::LoginStatus,void>::decode(v10, (uint64_t)v481);
                if (!v481[40])
                {
                  unsigned __int16 v89 = *(WTF::StringImpl **)v10;
                  uint64_t v429 = *((void *)v10 + 1);
                  *(void *)char v10 = 0;
                  *((void *)v10 + 1) = 0;
                  uint64_t v430 = *((void *)v10 + 3);
                  if (!v430
                    || !v429
                    || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v430 + 16))(v430, v89),
                        !v481[40]))
                  {
                    std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v481, v89);
                    goto LABEL_872;
                  }
                }
                uint64_t v90 = *(void *)v481;
                uint64_t v5 = *(void *)&v481[8];
                *(void *)unint64_t v481 = 0;
                *(void *)&v481[8] = 0;
                *(void *)uint64_t v510 = v90;
                *(void *)&v510[8] = v5;
                *(_OWORD *)&v510[16] = *(_OWORD *)&v481[16];
                *(void *)&v510[32] = *(void *)&v481[32];
                v510[40] = 1;
                v510[48] = 1;
                std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v481, v89);
              }
              else
              {
                v481[0] = 0;
                v481[40] = 0;
                v510[0] = 0;
                v510[40] = 0;
                v510[48] = 1;
                std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v481, v23);
              }
              if (!v525[8]) {
                goto LABEL_887;
              }
              uint64_t v331 = *(void *)v525;
              *(void *)char v525 = 0;
              *(void *)unint64_t v481 = v331;
              v481[8] = v3;
              v481[16] = 0;
              v481[56] = 0;
              if (v88)
              {
                uint64_t v332 = *(void *)v510;
                *(void *)&v510[8] = 0;
                *(void *)uint64_t v510 = 0;
                *(void *)&v481[16] = v332;
                *(void *)&v481[24] = v5;
                *(_OWORD *)&v481[32] = *(_OWORD *)&v510[16];
                *(void *)&v481[48] = *(void *)&v510[32];
                v481[56] = 1;
              }
              LODWORD(v3) = 1;
              v481[64] = 1;
              std::__optional_destruct_base<WebCore::LoginStatus,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v510, v23);
LABEL_875:
              if (v525[8]) {
                goto LABEL_888;
              }
              goto LABEL_876;
            }
            unint64_t v389 = v85;
            v390 = v23;
          }
          *(void *)char v10 = 0;
          *((void *)v10 + 1) = 0;
          uint64_t v392 = *((void *)v10 + 3);
          if (!v392 || !v389) {
            goto LABEL_872;
          }
LABEL_836:
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v392 + 16))(v392, v390, v389);
LABEL_872:
          char v23 = *(WTF::StringImpl **)v10;
          unint64_t v85 = *((void *)v10 + 1);
LABEL_873:
          *(void *)char v10 = 0;
          *((void *)v10 + 1) = 0;
          uint64_t v431 = *((void *)v10 + 3);
          if (v431 && v85) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v431 + 16))(v431, v23);
          }
          LODWORD(v3) = 0;
          v481[0] = 0;
          v481[64] = 0;
          goto LABEL_875;
        }
        unint64_t v389 = v85;
        v390 = 0;
      }
      unint64_t v85 = 0;
      char v23 = 0;
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v392 = *((void *)v10 + 3);
      if (!v392) {
        goto LABEL_873;
      }
      if (!v389)
      {
        unint64_t v85 = 0;
        char v23 = 0;
        goto LABEL_873;
      }
      goto LABEL_836;
    case 0x11C:
      IPC::Decoder::decode<WebCore::Cookie>(v8, v481);
      if (v484[0])
      {
        long long v168 = *(_OWORD *)v481;
        long long v169 = *(_OWORD *)&v481[16];
        memset(v481, 0, 32);
        *(_OWORD *)uint64_t v510 = v168;
        *(_OWORD *)&v510[16] = v169;
        *(_OWORD *)&v510[32] = *(_OWORD *)&v481[32];
        *(_OWORD *)&v510[43] = *(_OWORD *)&v481[43];
        long long v170 = *(_OWORD *)&v481[64];
        *(_OWORD *)&v481[64] = 0u;
        *(_OWORD *)&v510[64] = v170;
        *(_OWORD *)&v510[80] = *(_OWORD *)&v481[80];
        long long v511 = *(_OWORD *)&v481[96];
        *(_DWORD *)&v481[80] &= ~1u;
        uint64_t v171 = *((void *)&v482 + 1);
        uint64_t v512 = v482;
        long long v482 = 0uLL;
        uint64_t v513 = v171;
        char v514 = v483[0];
        LOBYTE(v515) = 1;
        WebCore::Cookie::~Cookie((WebCore::Cookie *)v481, v167);
        WebKit::NetworkConnectionToWebProcess::setRawCookie((WebKit::NetworkConnectionToWebProcess *)v9, (const WebCore::Cookie *)v510);
        if ((_BYTE)v515) {
          WebCore::Cookie::~Cookie((WebCore::Cookie *)v510, v172);
        }
        goto LABEL_931;
      }
      char v333 = *(WTF::StringImpl **)v10;
      uint64_t v357 = *((void *)v10 + 1);
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v335 = *((void *)v10 + 3);
      if (!v335) {
        goto LABEL_931;
      }
      goto LABEL_843;
    case 0x11D:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::LoadSchedulingMode>>((uint64_t)v481, v8);
      if (v481[16]) {
        WebKit::NetworkConnectionToWebProcess::setResourceLoadSchedulingMode(v9, *(uint64_t *)v481, v481[8]);
      }
      goto LABEL_931;
    case 0x11E:
      uint64_t v126 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v8);
      if (!v127)
      {
        v481[0] = 0;
        LOBYTE(v489) = 0;
        goto LABEL_745;
      }
      unint64_t v11 = (atomic_uchar *volatile *)v126;
      IPC::Decoder::decode<WebCore::ResourceRequest>(v10, (uint64_t)v510);
      if (!(_BYTE)v519
        || (IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>((uint64_t *)v10, (uint64_t)v525), !v527))
      {
        v481[0] = 0;
        LOBYTE(v489) = 0;
        goto LABEL_858;
      }
      int v128 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(v10);
      if ((v128 & 0xFF0000) == 0
        || (LODWORD(v3) = v128, IPC::Decoder::decode<WTF::String>(v10, (uint64_t)v476), !LOBYTE(v476[1])))
      {
        v481[0] = 0;
        LOBYTE(v489) = 0;
        goto LABEL_854;
      }
      unint64_t v129 = *((void *)v10 + 1);
      char v23 = *(WTF::StringImpl **)v10;
      unint64_t v130 = *((void *)v10 + 2) - *(void *)v10;
      if (v129 <= v130)
      {
        unint64_t v420 = 0;
        unsigned __int16 v421 = 0;
        *(void *)char v10 = 0;
        *((void *)v10 + 1) = 0;
        uint64_t v422 = *((void *)v10 + 3);
        if (v422)
        {
          if (v129)
          {
            (*(void (**)(uint64_t))(*(void *)v422 + 16))(v422);
            unsigned __int16 v421 = *(WTF::StringImpl **)v10;
            unint64_t v420 = *((void *)v10 + 1);
          }
          else
          {
            unint64_t v420 = 0;
            unsigned __int16 v421 = 0;
          }
        }
      }
      else
      {
        uint64_t v131 = (unsigned __int8 *)v23 + v130;
        *((void *)v10 + 2) = v131 + 1;
        if (v23)
        {
          unsigned int v132 = *v131;
          if (v132 < 2)
          {
            BOOL v133 = v132 != 0;
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v10, (uint64_t)v530);
            if ((_BYTE)v531)
            {
              IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, v478);
              char v134 = v478[16];
              if (v478[16])
              {
                if (!(_BYTE)v519 || !v527 || !LOBYTE(v476[1]) || !(_BYTE)v531) {
                  goto LABEL_887;
                }
                *(void *)unint64_t v481 = v11;
                std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)&v481[8], (uint64_t)v510);
                v484[72] = 0;
                v484[104] = 0;
                if (BYTE8(v526))
                {
                  *(_DWORD *)&v484[96] = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v484[72], (uint64_t)v525);
                  v484[104] = 1;
                }
                LOWORD(v485) = v3;
                uint64_t v135 = v476[0];
                v476[0] = 0;
                *((void *)&v485 + 1) = v135;
                LOBYTE(v486) = v133;
                long long v487 = *(_OWORD *)v530;
                *(void *)char v488 = *(void *)&v530[16];
                char v134 = 1;
                *(_OWORD *)&v488[8] = *(_OWORD *)v478;
              }
              else
              {
                v481[0] = 0;
              }
              LOBYTE(v489) = v134;
LABEL_849:
              if (LOBYTE(v476[1]))
              {
                uint64_t v425 = v476[0];
                v476[0] = 0;
                if (v425)
                {
                  if (*(_DWORD *)v425 == 2) {
                    WTF::StringImpl::destroy(v425, v23);
                  }
                  else {
                    *(_DWORD *)v425 -= 2;
                  }
                }
              }
LABEL_854:
              if (v527 && BYTE8(v526) && v526 != -1) {
                ((void (*)(unsigned char *, unsigned char *))off_1EE9B73E8[v526])(v530, v525);
              }
LABEL_858:
              std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v510);
              if ((_BYTE)v489) {
                goto LABEL_859;
              }
LABEL_745:
              unint64_t v362 = *(WTF::StringImpl **)v10;
              uint64_t v363 = *((void *)v10 + 1);
              *(void *)char v10 = 0;
              *((void *)v10 + 1) = 0;
              uint64_t v364 = *((void *)v10 + 3);
              if (!v364) {
                goto LABEL_931;
              }
              if (!v363) {
                goto LABEL_931;
              }
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v364 + 16))(v364, v362);
              if (!(_BYTE)v489) {
                goto LABEL_931;
              }
LABEL_859:
              uint64_t v340 = (WebCore::ResourceRequestBase *)&v481[8];
              *(_OWORD *)uint64_t v510 = v487;
              *(void *)&v510[16] = *(void *)v488;
              WebKit::NetworkConnectionToWebProcess::startDownload((void *)v9, *(uint64_t *)v481, (CFTypeRef *)&v481[8], (WebCore::SecurityOriginData *)&v484[72], v485, (WTF::StringImpl **)&v485 + 1, v486, (uint64_t)v510, *(uint64_t *)&v488[8], v488[16]);
              if (!(_BYTE)v489) {
                goto LABEL_931;
              }
              uint64_t v427 = (WTF::StringImpl *)*((void *)&v485 + 1);
              *((void *)&v485 + 1) = 0;
              if (v427)
              {
                if (*(_DWORD *)v427 == 2) {
                  WTF::StringImpl::destroy(v427, v426);
                }
                else {
                  *(_DWORD *)v427 -= 2;
                }
              }
              if (v484[104])
              {
                if (*(_DWORD *)&v484[96] != -1) {
                  ((void (*)(unsigned char *, unsigned char *))off_1EE9B73E8[*(unsigned int *)&v484[96]])(v510, &v484[72]);
                }
                *(_DWORD *)&v484[96] = -1;
              }
              v343 = *(const void **)&v484[64];
              *(void *)&v484[64] = 0;
              if (v343) {
LABEL_694:
              }
                CFRelease(v343);
LABEL_869:
              uint64_t v428 = v340;
              goto LABEL_930;
            }
LABEL_848:
            v481[0] = 0;
            LOBYTE(v489) = 0;
            goto LABEL_849;
          }
LABEL_847:
          *(void *)char v10 = 0;
          *((void *)v10 + 1) = 0;
          uint64_t v424 = *((void *)v10 + 3);
          if (v424)
          {
            if (v129)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v424 + 16))(v424, v23);
              uint64_t v469 = *((void *)v10 + 3);
              char v23 = *(WTF::StringImpl **)v10;
              uint64_t v470 = *((void *)v10 + 1);
              *(void *)char v10 = 0;
              *((void *)v10 + 1) = 0;
              if (v469)
              {
                if (v470) {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v469 + 16))(v469, v23);
                }
              }
            }
          }
          goto LABEL_848;
        }
        unint64_t v420 = v129;
        unsigned __int16 v421 = 0;
      }
      unint64_t v129 = 0;
      char v23 = 0;
      *(void *)char v10 = 0;
      *((void *)v10 + 1) = 0;
      uint64_t v423 = *((void *)v10 + 3);
      if (v423)
      {
        if (v420)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v423 + 16))(v423, v421, v420);
          char v23 = *(WTF::StringImpl **)v10;
          unint64_t v129 = *((void *)v10 + 1);
        }
        else
        {
          unint64_t v129 = 0;
          char v23 = 0;
        }
      }
      goto LABEL_847;
    case 0x11F:
      IPC::Decoder::decode<std::tuple<WTF::URL>>(v8, v481);
      if (!v481[40]) {
        goto LABEL_931;
      }
      uint64_t v91 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v44) {
        goto LABEL_291;
      }
      *(void *)uint64_t v510 = v91;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v92 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v92 = &unk_1EE9B75D0;
      v92[1] = *(void *)v510;
      uint64_t v93 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v92[2] = v93;
      *(void *)char v525 = v92;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[40]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::storageAccessQuirkForTopFrameDomain(v9, (WebCore::NetworkStorageSession *)v481, (uint64_t *)v525);
      uint64_t v94 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v94) {
LABEL_290:
      }
        (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
LABEL_291:
      if (!v481[40]) {
        goto LABEL_931;
      }
      goto LABEL_883;
    case 0x120:
      IPC::Decoder::decode<std::tuple<WTF::String>>(v8, (uint64_t)v481);
      if (!v481[8]) {
        goto LABEL_931;
      }
      WebKit::NetworkConnectionToWebProcess::subscribeToCookieChangeNotifications((WebKit::NetworkConnectionToWebProcess *)v9, (WTF::StringImpl **)v481, v173);
      if (!v481[8]) {
        goto LABEL_931;
      }
      goto LABEL_655;
    case 0x121:
      IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)v8, (uint64_t)v481);
      if (!v481[16]) {
        goto LABEL_931;
      }
      uint64_t v34 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!v35) {
        goto LABEL_931;
      }
      *(void *)uint64_t v510 = v34;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      uint64_t v36 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v36 = &unk_1EE9B7698;
      v36[1] = *(void *)v510;
      uint64_t v37 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v36[2] = v37;
      *(void *)char v525 = v36;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[16]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(v9, (uint64_t)v481, (uint64_t *)v525);
      uint64_t v38 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v38) {
LABEL_36:
      }
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      goto LABEL_931;
    case 0x122:
      IPC::Decoder::decode<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v481, v8);
      if (v481[80]) {
        WebKit::NetworkConnectionToWebProcess::unregisterBlobURL(v9, (uint64_t)v481, (uint64_t)&v481[40]);
      }
      goto LABEL_404;
    case 0x123:
      IPC::Decoder::decode<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v481, v8);
      if (v481[80]) {
        WebKit::NetworkConnectionToWebProcess::unregisterBlobURLHandle(v9, (uint64_t)v481, (uint64_t)&v481[40]);
      }
LABEL_404:
      std::__optional_destruct_base<std::tuple<WTF::URL,std::optional<WebCore::SecurityOriginData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v481, v58);
      goto LABEL_931;
    case 0x124:
      IPC::Decoder::decode<std::tuple<WTF::String>>(v8, (uint64_t)v481);
      if (!v481[8]) {
        goto LABEL_931;
      }
      WebKit::NetworkConnectionToWebProcess::unsubscribeFromCookieChangeNotifications((WebKit::NetworkConnectionToWebProcess *)v9, (WTF::StringImpl **)v481, v55);
      if (!v481[8]) {
        goto LABEL_931;
      }
      goto LABEL_655;
    case 0x125:
      uint64_t v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8);
      if (!v14) {
        goto LABEL_669;
      }
      uint64_t v15 = v13;
      IPC::Decoder::decode<WebCore::ResourceResponse>(v10, v510);
      if (!v523)
      {
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v510, v16);
        goto LABEL_669;
      }
      *(_OWORD *)&v481[16] = *(_OWORD *)&v510[8];
      *(_OWORD *)&v481[32] = *(_OWORD *)&v510[24];
      long long v17 = *(_OWORD *)&v510[56];
      memset(&v510[56], 0, 40);
      uint64_t v18 = *(void *)&v510[40];
      *(void *)unint64_t v481 = v15;
      *(void *)&v481[8] = *(void *)v510;
      *(void *)uint64_t v510 = 0;
      *(_DWORD *)&v510[8] &= ~1u;
      *(void *)&v510[40] = 0;
      *(void *)&v481[48] = v18;
      *(void *)&v481[56] = *(void *)&v510[48];
      *(_OWORD *)&v481[64] = v17;
      *(_OWORD *)&v481[80] = *(_OWORD *)&v510[72];
      *(void *)&v481[96] = *(void *)&v510[88];
      *(void *)&long long v17 = *((void *)&v511 + 1);
      *(void *)&v481[104] = v511;
      long long v511 = 0uLL;
      *(void *)&long long v482 = v17;
      uint64_t v19 = v512;
      uint64_t v512 = 0;
      *((void *)&v482 + 1) = v19;
      v483[0] = 0;
      v484[0] = 0;
      if (v514)
      {
        uint64_t v344 = v513;
        uint64_t v513 = 0;
        *(void *)CFTypeRef v483 = v344;
        v484[0] = 1;
      }
      *(_OWORD *)&v484[72] = v519;
      *(_OWORD *)&v484[88] = *(_OWORD *)v520;
      *(_DWORD *)&v484[103] = *(_DWORD *)&v520[15];
      *(_OWORD *)&v484[8] = v515;
      *(_OWORD *)&v484[24] = v516;
      *(_OWORD *)&v484[40] = v517;
      *(_OWORD *)&v484[56] = v518;
      char v20 = v521;
      uint64_t v521 = 0;
      *(void *)&long long v485 = v20;
      BYTE8(v485) = v522;
      LOBYTE(v486) = 1;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v510, v16);
      WebKit::NetworkConnectionToWebProcess::useRedirectionForCurrentNavigation(v9, *(uint64_t *)v481, (uint64_t)&v481[8]);
      if ((_BYTE)v486)
      {
        uint64_t v22 = (const void *)v485;
        *(void *)&long long v485 = 0;
        if (v22) {
          CFRelease(v22);
        }
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v481[8], v21);
      }
      goto LABEL_931;
    case 0x126:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v8, (void *)v7, (uint64_t)v481);
      if (!v481[16]) {
        goto LABEL_931;
      }
      uint64_t v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v10);
      if (!(_BYTE)v40) {
        goto LABEL_42;
      }
      *(void *)uint64_t v510 = v39;
      char v10 = (IPC::Decoder *)&v510[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v510[8], v11);
      int v41 = (void *)WTF::fastMalloc((WTF *)0x18);
      *int v41 = &unk_1EE9B7508;
      v41[1] = *(void *)v510;
      uint64_t v42 = *(void *)&v510[8];
      *(void *)&v510[8] = 0;
      v41[2] = v42;
      *(void *)char v525 = v41;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v510[8]);
      if (!v481[16]) {
        goto LABEL_887;
      }
      WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(v9, (uint64_t *)v481, (uint64_t *)v525);
      uint64_t v43 = *(void *)v525;
      *(void *)char v525 = 0;
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      }
LABEL_42:
      if (v481[16]) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v481, v40);
      }
      goto LABEL_931;
    default:
      goto LABEL_931;
  }
}

void WebKit::RemoteLayerTreeDrawingArea::displayDidRefresh(WebKit::RemoteLayerTreeDrawingArea *this)
{
  int v2 = *((unsigned __int8 *)this + 227);
  *((unsigned char *)this + 227) = 0;
  {
    unint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 762))
  {
    [MEMORY[0x1E4F39CF8] begin];
    [MEMORY[0x1E4F39CF8] commit];
  }
  if (*((unsigned char *)this + 228)
    || *((unsigned char *)this + 360)
    && ((*((void *)this + 40) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*((void *)this + 40) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(this);
    *((unsigned char *)this + 228) = 0;
    *((unsigned char *)this + 360) = 0;
  }
  else if (v2 {
         && (*((void *)this + 25) & 0xFFFFFFFFFFFFLL) != 0
  }
         && *(double *)((*((void *)this + 25) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    *((unsigned char *)this + 228) = 1;
  }
  else
  {
    uint64_t v12 = *((void *)this + 31) + 1;
    uint64_t v3 = *(void *)(*((void *)this + 5) + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 1131;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v13 = v6;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v12);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v4 + 32) + 32))(v4 + 32, &v13, 0);
    char v8 = v13;
    uint64_t v13 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_1986AB1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 - 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::GPUProcess::updateGPUProcessPreferences(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v3 = result;
  if (!*((unsigned char *)a2 + 5))
  {
    if (*(unsigned char *)(result + 149)) {
      goto LABEL_9;
    }
    char v5 = 0;
    *(_WORD *)(result + 148) = 256;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(result + 149) || *(unsigned __int8 *)(result + 148) != *((unsigned __int8 *)a2 + 4))
  {
    unsigned int v4 = a2[2];
    *(_WORD *)(result + 148) = v4;
    if (v4 <= 0xFF) {
      goto LABEL_87;
    }
    char v5 = v4;
LABEL_8:
    uint64_t result = WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)result);
    *(unsigned char *)(result + 29) = v5;
  }
LABEL_9:
  LOBYTE(v6) = *(unsigned char *)(v3 + 145);
  if (!*((unsigned char *)a2 + 1))
  {
    if (*(unsigned char *)(v3 + 145)) {
      goto LABEL_17;
    }
    *(_WORD *)(v3 + 144) = 256;
    goto LABEL_16;
  }
  if (!*(unsigned char *)(v3 + 145) || *(unsigned __int8 *)(v3 + 144) != *(unsigned __int8 *)a2)
  {
    unsigned int v6 = *a2;
    *(_WORD *)(v3 + 144) = v6;
    if (v6 <= 0xFF) {
      goto LABEL_87;
    }
LABEL_16:
    uint64_t result = WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled((WebCore::PlatformMediaSessionManager *)(v6 != 0));
  }
LABEL_17:
  LOBYTE(v7) = *(unsigned char *)(v3 + 147);
  if (!*((unsigned char *)a2 + 3))
  {
    if (*(unsigned char *)(v3 + 147)) {
      goto LABEL_25;
    }
    *(_WORD *)(v3 + 146) = 256;
    goto LABEL_24;
  }
  if (!*(unsigned char *)(v3 + 147) || *(unsigned __int8 *)(v3 + 146) != *((unsigned __int8 *)a2 + 2))
  {
    unsigned int v7 = a2[1];
    *(_WORD *)(v3 + 146) = v7;
    if (v7 <= 0xFF) {
      goto LABEL_87;
    }
LABEL_24:
    uint64_t result = WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled((WebCore::PlatformMediaSessionManager *)(v7 != 0));
  }
LABEL_25:
  LOBYTE(v8) = *(unsigned char *)(v3 + 151);
  if (!*((unsigned char *)a2 + 7))
  {
    if (*(unsigned char *)(v3 + 151)) {
      goto LABEL_33;
    }
    *(_WORD *)(v3 + 150) = 256;
    goto LABEL_32;
  }
  if (!*(unsigned char *)(v3 + 151) || *(unsigned __int8 *)(v3 + 150) != *((unsigned __int8 *)a2 + 6))
  {
    unsigned int v8 = a2[3];
    *(_WORD *)(v3 + 150) = v8;
    if (v8 <= 0xFF) {
      goto LABEL_87;
    }
LABEL_32:
    uint64_t result = WebCore::DeprecatedGlobalSettings::setMediaSourceInlinePaintingEnabled((WebCore::DeprecatedGlobalSettings *)(v8 != 0));
  }
LABEL_33:
  LOBYTE(v9) = *(unsigned char *)(v3 + 153);
  if (!*((unsigned char *)a2 + 9))
  {
    if (*(unsigned char *)(v3 + 153)) {
      goto LABEL_41;
    }
    *(_WORD *)(v3 + 152) = 256;
    goto LABEL_40;
  }
  if (!*(unsigned char *)(v3 + 153) || *(unsigned __int8 *)(v3 + 152) != *((unsigned __int8 *)a2 + 8))
  {
    unsigned int v9 = a2[4];
    *(_WORD *)(v3 + 152) = v9;
    if (v9 <= 0xFF) {
      goto LABEL_87;
    }
LABEL_40:
    uint64_t result = WebCore::MediaSessionManagerCocoa::setShouldUseModernAVContentKeySession((WebCore::MediaSessionManagerCocoa *)(v9 != 0));
  }
LABEL_41:
  LOBYTE(v10) = *(unsigned char *)(v3 + 155);
  if (!*((unsigned char *)a2 + 11))
  {
    if (*(unsigned char *)(v3 + 155)) {
      goto LABEL_49;
    }
    *(_WORD *)(v3 + 154) = 256;
    goto LABEL_48;
  }
  if (!*(unsigned char *)(v3 + 155) || *(unsigned __int8 *)(v3 + 154) != *((unsigned __int8 *)a2 + 10))
  {
    unsigned int v10 = a2[5];
    *(_WORD *)(v3 + 154) = v10;
    if (v10 <= 0xFF) {
      goto LABEL_87;
    }
LABEL_48:
    uint64_t result = WebCore::PlatformMediaSessionManager::setAlternateWebMPlayerEnabled((WebCore::PlatformMediaSessionManager *)(v10 != 0));
  }
LABEL_49:
  LOBYTE(v11) = *(unsigned char *)(v3 + 157);
  if (!*((unsigned char *)a2 + 13))
  {
    if (*(unsigned char *)(v3 + 157)) {
      goto LABEL_57;
    }
    *(_WORD *)(v3 + 156) = 256;
    goto LABEL_56;
  }
  if (!*(unsigned char *)(v3 + 157) || *(unsigned __int8 *)(v3 + 156) != *((unsigned __int8 *)a2 + 12))
  {
    unsigned int v11 = a2[6];
    *(_WORD *)(v3 + 156) = v11;
    if (v11 <= 0xFF) {
      goto LABEL_87;
    }
LABEL_56:
    uint64_t result = WebCore::PlatformMediaSessionManager::setMediaCapabilityGrantsEnabled((WebCore::PlatformMediaSessionManager *)(v11 != 0));
  }
LABEL_57:
  LOBYTE(v12) = *(unsigned char *)(v3 + 159);
  if (*((unsigned char *)a2 + 15))
  {
    if (*(unsigned char *)(v3 + 159) && *(unsigned __int8 *)(v3 + 158) == *((unsigned __int8 *)a2 + 14)) {
      goto LABEL_68;
    }
    unsigned int v12 = a2[7];
    *(_WORD *)(v3 + 158) = v12;
    if (v12 <= 0xFF) {
      goto LABEL_87;
    }
  }
  else
  {
    if (*(unsigned char *)(v3 + 159)) {
      goto LABEL_68;
    }
    *(_WORD *)(v3 + 158) = 256;
  }
  uint64_t result = WebCore::PlatformMediaSessionManager::setShouldEnableVP8Decoder((WebCore::PlatformMediaSessionManager *)(v12 != 0));
  if (!*(unsigned char *)(v3 + 288))
  {
    if (!*(unsigned char *)(v3 + 159)) {
      goto LABEL_87;
    }
    if (*(unsigned char *)(v3 + 158))
    {
      *(unsigned char *)(v3 + 288) = 1;
      uint64_t result = MEMORY[0x199738030](result);
    }
  }
LABEL_68:
  LOBYTE(v13) = *(unsigned char *)(v3 + 161);
  if (*((unsigned char *)a2 + 17))
  {
    if (*(unsigned char *)(v3 + 161) && *(unsigned __int8 *)(v3 + 160) == *((unsigned __int8 *)a2 + 16)) {
      goto LABEL_79;
    }
    unsigned int v13 = a2[8];
    *(_WORD *)(v3 + 160) = v13;
    if (v13 <= 0xFF) {
      goto LABEL_87;
    }
  }
  else
  {
    if (*(unsigned char *)(v3 + 161)) {
      goto LABEL_79;
    }
    *(_WORD *)(v3 + 160) = 256;
  }
  uint64_t result = WebCore::PlatformMediaSessionManager::setShouldEnableVP9Decoder((WebCore::PlatformMediaSessionManager *)(v13 != 0));
  if (!*(unsigned char *)(v3 + 289))
  {
    if (*(unsigned char *)(v3 + 161))
    {
      if (*(unsigned char *)(v3 + 160))
      {
        *(unsigned char *)(v3 + 289) = 1;
        uint64_t result = WebCore::registerSupplementalVP9Decoder((WebCore *)result);
      }
      goto LABEL_79;
    }
LABEL_87:
    __break(1u);
    return result;
  }
LABEL_79:
  int v14 = *((unsigned __int8 *)a2 + 18);
  int v15 = *(unsigned __int8 *)(v3 + 162);
  *(unsigned char *)(v3 + 162) = v14;
  if (v14 != v15)
  {
    uint64_t result = WebCore::PlatformMediaSessionManager::setSWVPDecodersAlwaysEnabled((WebCore::PlatformMediaSessionManager *)(v14 != 0));
    if (!*(unsigned char *)(v3 + 290))
    {
      if (*(unsigned char *)(v3 + 162))
      {
        *(unsigned char *)(v3 + 290) = 1;
        if (!*(unsigned char *)(v3 + 289))
        {
          uint64_t result = MEMORY[0x199738040](result);
          *(unsigned char *)(v3 + 289) = 1;
        }
        if (!*(unsigned char *)(v3 + 288))
        {
          uint64_t result = MEMORY[0x199738030](result);
          *(unsigned char *)(v3 + 288) = 1;
        }
      }
    }
  }
  return result;
}

void non-virtual thunk to'WebKit::WebCookieManager::didReceiveMessage(WebKit::WebCookieManager *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

uint64_t WebKit::WebPage::contentSizeCategoryDidChange(WebKit::WebPage *this, const WTF::String *a2)
{
  WebCore::setContentSizeCategory(a2, a2);

  return WebCore::FontCache::invalidateAllFontCaches();
}

unsigned char *WebKit::WebPage::setIsWindowResizingEnabled(unsigned char *this, int a2)
{
  if (this[924] != a2)
  {
    int v2 = this;
    this[924] = a2;
    this = (unsigned char *)WebKit::WebPage::shouldIgnoreMetaViewport((WebKit::WebPage *)this);
    if (this) {
      BOOL v3 = v2[924] != 0;
    }
    else {
      BOOL v3 = 0;
    }
    v2[1171] = v3;
  }
  return this;
}

uint64_t WebKit::WebPage::setForceAlwaysUserScalable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1185) = a2;
  *(unsigned char *)(this + 1169) = a2;
  return this;
}

uint64_t WebKit::WebPage::setInsertionPointColor(uint64_t a1, WebCore::RenderThemeIOS *a2)
{
  return WebCore::RenderThemeIOS::setInsertionPointColor(a2, (const Color *)a2);
}

uint64_t WebKit::WebPage::setHasCustomUserAgent(uint64_t this, char a2)
{
  *(unsigned char *)(this + 112) = a2;
  return this;
}

uint64_t WebKit::WebPage::setUserAgent(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  char v5 = (uint64_t *)(this + 13);
  uint64_t result = WTF::equal(this[13], *a2, a3);
  if ((result & 1) == 0)
  {
    WTF::String::operator=(v5, a2);
    uint64_t result = (uint64_t)this[6];
    if (result)
    {
      return MEMORY[0x1F4172600]();
    }
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::setThrottleState(WebKit::WebSWServerConnection *this, char a2)
{
  *((unsigned char *)this + 112) = a2;
  return WebKit::WebSWServerConnection::updateThrottleState(this);
}

uint64_t WebKit::WebCookieManager::startObservingCookieChanges(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 1u);
  unsigned int v8 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), &v8);
  uint64_t v6 = result;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v4 + 128));
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (v6)
  {
    unsigned int v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v7 = &unk_1EE9C8E80;
    v7[1] = a1;
    v7[2] = a2;
    unsigned int v8 = v7;
    WebCore::startObservingCookieChanges();
    uint64_t result = (uint64_t)v8;
    unsigned int v8 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void WebKit::WebCookieManager::didReceiveMessage(WebKit::WebCookieManager *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x62A:
      IPC::handleMessageAsync<Messages::WebCookieManager::DeleteAllCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x62B:
      IPC::handleMessageAsync<Messages::WebCookieManager::DeleteAllCookiesModifiedSince,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x62C:
      IPC::handleMessageAsync<Messages::WebCookieManager::DeleteCookie,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x62D:
      IPC::handleMessageAsync<Messages::WebCookieManager::DeleteCookiesForHostnames,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x62E:
      IPC::handleMessageAsync<Messages::WebCookieManager::GetAllCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x62F:
      IPC::handleMessageAsync<Messages::WebCookieManager::GetCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x630:
      IPC::handleMessageAsync<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x631:
      IPC::handleMessageAsync<Messages::WebCookieManager::GetHostnamesWithCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x632:
      IPC::handleMessageAsync<Messages::WebCookieManager::SetCookie,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x633:
      IPC::handleMessageAsync<Messages::WebCookieManager::SetCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x634:
      IPC::handleMessageAsync<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x635:
      uint64_t v4 = (void *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (v5)
      {
        WebKit::WebCookieManager::startObservingCookieChanges((uint64_t)this, v4);
      }
      break;
    case 0x636:
      unint64_t v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a3);
      if (v7)
      {
        v8.unint64_t m_identifier = v6;
        WebKit::WebCookieManager::stopObservingCookieChanges(this, v8);
      }
      break;
    default:
      return;
  }
}

uint64_t WebKit::WebPageProxy::registerWebProcessAccessibilityToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 256) + 144);
  if (v5)
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
    unsigned int v12 = *(_xpc_connection_s **)(v5 + 352);
    if (v12) {
      uint64_t pid = xpc_connection_get_pid(v12);
    }
    else {
      uint64_t pid = 0;
    }
    int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 376);
    return v14(v11, a2, a3, a4, a5, pid);
  }
  else
  {
    uint64_t result = 130;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebProcess::setHiddenPageDOMTimerThrottlingIncreaseLimit(uint64_t a1)
{
  uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 120));
  BOOL v3 = (void *)result;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6) {
    char v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  }
  else {
    char v7 = 0;
  }
  if (v7 != (void *)result)
  {
    do
    {
      uint64_t result = WebCore::Page::setDOMTimerAlignmentIntervalIncreaseLimit();
      while (1)
      {
        v3 += 2;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*v3 + 1) > 1) {
          goto LABEL_10;
        }
      }
      BOOL v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void WebKit::WebProcess::backlightLevelDidChange(WebKit::WebProcess *this, float a2)
{
  *((float *)this + 160) = a2;
  if (atomic_load_explicit((atomic_ullong *volatile)&WebKit::WebProcess::backlightLevelDidChange(float)::onceFlag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    BOOL v3 = &v4;
    std::__call_once(&WebKit::WebProcess::backlightLevelDidChange(float)::onceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebProcess::backlightLevelDidChange(float)::$_0 &&>>);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::sendPrepareToSuspendIPC(WebKit::IsSuspensionImminent)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D7170;
  BOOL v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages7WebPage16SetActivityStateEZZN6WebKit12WebPageProxy27dispatchActivityStateChangeEvENK3__1clINS8_15WebProcessProxyENS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEEEEDaRT_T0_EUlvE_EENS_17CompletionHandlerIFvPNS2_7DecoderEEEEOSN_NS_19ThreadLikeAssertionEEUlSR_E_vJSR_EED0Ev(WTF *this, void *a2)
{
  BOOL v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9DA3D8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E4180;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2>(WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WebKit::ProcessThrottlerActivity **a1)
{
  *a1 = (WebKit::ProcessThrottlerActivity *)&unk_1EE9E4130;
  char v2 = a1 + 2;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v3);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v2, 0);
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2>(WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(unsigned int *result)
{
  uint64_t v1 = *((void *)result + 1);
  if (v1)
  {
    uint64_t result = *(unsigned int **)(v1 + 8);
    if (result)
    {
      char v2 = result + 4;
      atomic_fetch_add((atomic_uint *volatile)result + 4, 1u);
      WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks((uint64_t)result);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WebKit::ProcessThrottlerActivity **a1)
{
  *a1 = (WebKit::ProcessThrottlerActivity *)&unk_1EE9DD468;
  char v2 = a1 + 2;
  uint64_t v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v3);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v2, 0);
  uint64_t v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WebCore::ProcessIdentity>(a2, (WTF::MachSendRight *)v13);
    if (v14)
    {
      WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v11, (const WTF::MachSendRight *)v13);
      char v12 = 1;
      if (!v14 || (WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13), v12))
      {
LABEL_6:
        WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v13, (const WTF::MachSendRight *)v11);
        uint64_t v4 = *(void *)(a1 + 8);
        if (v4)
        {
          uint64_t v5 = *(void *)(v4 + 8);
          if (v5)
          {
            uint64_t v6 = (unsigned int *)(v5 + 16);
            atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 1u);
            WebCore::ProcessIdentity::operator=();
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
          }
        }
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
        if (v12) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
        }
        return;
      }
    }
    else
    {
      v11[0] = 0;
      char v12 = 0;
    }
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v10 = *((void *)a2 + 3);
    if (!v10 || !v9 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8), !v12))
    {
      IPC::Connection::cancelReply<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(*(void *)(a1 + 8));
      return;
    }
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(a1 + 8);

  IPC::Connection::cancelReply<Messages::WebProcess::InitializeWebProcess,WebKit::WebProcessProxy::initializeWebProcess(WebKit::WebProcessCreationParameters &&)::$_0>(v7);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9DD5F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0>(WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E36F0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned char *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0>(WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::call(unsigned char *result)
{
  uint64_t v1 = *((void *)result + 2);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return WebKit::ResponsivenessTimer::stop((unsigned char *)(*((void *)result + 1) + 56));
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::InitializeGPUProcess,WebKit::GPUProcessProxy::GPUProcessProxy(void)::$_0>(WebKit::GPUProcessProxy::GPUProcessProxy(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9E36A0;
  char v2 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v2);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);

  return WTF::fastFree((WTF *)a1, v3);
}

{
  unsigned int *v2;

  *(void *)a1 = &unk_1EE9E36A0;
  char v2 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v2);
  }
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<std::tuple<unsigned int,std::optional<unsigned int>>,void>::decode<IPC::Decoder>(a1);
  if ((v3 & 0xFF00000000) == 0) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

void *IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (void *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::Color>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::Color>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[8])
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::MessagePortIdentifier>(a1, (uint64_t)&v6);
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    uint64_t result = IPC::Decoder::markInvalid((IPC::Decoder *)a1);
    char v5 = 0;
  }
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t WebKit::WebSQLiteDatabaseTracker::didFinishLastTransaction(atomic_uchar *this)
{
  uint64_t v1 = (WebKit::WebSQLiteDatabaseTracker *)this;
  char v2 = 0;
  uint64_t v3 = this + 24;
  atomic_compare_exchange_strong_explicit(this + 24, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this + 24);
  }
  WTF::RunLoop::main((WTF::RunLoop *)this);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v1 + 2, (uint64_t)v1);
  uint64_t v4 = (atomic_uint *)*((void *)v1 + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = *((void *)v1 + 4) + 1;
  *((void *)v1 + 4) = v5;
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  *long long v6 = &unk_1EE9D1868;
  v6[1] = v1;
  v6[2] = v4;
  v6[3] = v5;
  uint64_t v9 = (uint64_t)v6;
  WTF::RunLoop::dispatchAfter();
  if (v10) {
    WTF::ThreadSafeRefCounted<WTF::RunLoop::DispatchTimer,(WTF::DestructionThread)0>::deref((unsigned int *)(v10 + 24));
  }
  uint64_t result = v9;
  if (v9) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::RunLoop::DispatchTimer,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WTF::RunLoop::DispatchTimer::~DispatchTimer((WTF::RunLoop::DispatchTimer *)(result - 6));
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebKit::WebRemoteObjectRegistry,_WKRemoteObjectRegistry *&,WebKit::WebPage &>(WebKit::WebRemoteObjectRegistry **a1, _WKRemoteObjectRegistry **a2, WebKit::WebPage *a3)
{
  long long v6 = (WebKit::WebRemoteObjectRegistry *)WTF::fastMalloc((WTF *)0x28);
  uint64_t result = WebKit::WebRemoteObjectRegistry::WebRemoteObjectRegistry(v6, *a2, a3);
  *a1 = v6;
  return result;
}

void sub_1986AC714(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl **IPC::handleMessage<Messages::WebProcess::UpdateStorageAccessUserAgentStringQuirks,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &&)>(IPC::Decoder *a1)
{
  uint64_t result = (WTF::StringImpl **)IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>((uint64_t)&v3, a1);
  if (v4)
  {
    uint64_t result = (WTF::StringImpl **)WebKit::WebProcess::updateStorageAccessUserAgentStringQuirks();
    if (v4)
    {
      uint64_t result = v3;
      if (v3) {
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, v2);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebProcess::updateStorageAccessUserAgentStringQuirks()
{
  return WebCore::Quirks::updateStorageAccessUserAgentStringQuirks();
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v6);
  if (v7)
  {
    *(void *)a1 = v6;
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    uint64_t result = IPC::Decoder::markInvalid(a2);
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8]) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986AC834(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(void *)v2) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = (IPC::Decoder *)result;
  unint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)result;
  unint64_t v6 = ((*(void *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v13 = *(void *)(result + 24);
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v5, v4);
        uint64_t v12 = *(void *)v2;
        unint64_t v11 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_11;
  }
  int v8 = (int *)(v5 + v6);
  *(void *)(result + 16) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_11:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t result = *((void *)v2 + 3);
    if (result)
    {
      if (v11) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v12);
      }
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  uint64_t v9 = 0;
  int v10 = *v8;
  uint64_t v22 = 0;
  if (v10)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v2, (uint64_t)&v20);
      if (!v21) {
        break;
      }
      uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v18);
      if (v19)
      {
        if (!v21) {
          goto LABEL_43;
        }
        uint64_t result = (uint64_t)v20;
        if (v20 == (WTF::StringImpl *)-1) {
          goto LABEL_38;
        }
        uint64_t result = WTF::equal(v20, 0, v15);
        if (result) {
          goto LABEL_38;
        }
        if (!v21 || !v19)
        {
LABEL_43:
          __break(1u);
          break;
        }
        uint64_t result = WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>((uint64_t *)&v22, &v20, (uint64_t *)&v18, (uint64_t)v17);
        if (!v17[16])
        {
LABEL_38:
          *a2 = 0;
          a2[8] = 0;
          int v16 = 1;
        }
        else
        {
          int v16 = 0;
        }
        if (v19)
        {
          uint64_t result = (uint64_t)v18;
          uint64_t v18 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
      else
      {
        *a2 = 0;
        a2[8] = 0;
        int v16 = 1;
      }
      if (v21)
      {
        uint64_t result = (uint64_t)v20;
        char v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (v16) {
        goto LABEL_45;
      }
      if (!--v10)
      {
        uint64_t v9 = v22;
        goto LABEL_8;
      }
    }
    *a2 = 0;
    a2[8] = 0;
LABEL_45:
    uint64_t result = (uint64_t)v22;
    if (v22) {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v22, v14);
    }
  }
  else
  {
LABEL_8:
    *(void *)a2 = v9;
    a2[8] = 1;
  }
  return result;
}

void sub_1986ACAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, v6);
  int v8 = *(WTF::StringImpl ***)(v4 - 40);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
  }
  _Unwind_Resume(a1);
}

void sub_1986ACAD8()
{
}

void sub_1986ACAE0()
{
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v25 = *((void *)a1 + 3);
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v6, v5);
        uint64_t v24 = *(void *)a1;
        unint64_t v23 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
    goto LABEL_29;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (v10 >= 0x8000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::OrganizationStorageAccessPromptQuirk>(a1, (uint64_t)&v27);
        if (!v32) {
          break;
        }
        if (HIDWORD(v34) == v34)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>((uint64_t)&v33, (unint64_t)&v27);
        }
        else
        {
          uint64_t v19 = v33 + 32 * HIDWORD(v34);
          uint64_t v20 = v27;
          uint64_t v27 = 0;
          *(void *)uint64_t v19 = v20;
          *(void *)(v19 + 8) = 0;
          uint64_t v21 = v28;
          uint64_t v28 = 0;
          *(void *)(v19 + 16) = 0;
          *(void *)(v19 + 24) = 0;
          *(void *)(v19 + 8) = v21;
          uint64_t v22 = v29;
          uint64_t v29 = 0;
          *(void *)(v19 + 16) = v22;
          LODWORD(v22) = v30;
          int v30 = 0;
          *(_DWORD *)(v19 + 24) = v22;
          LODWORD(v22) = v31;
          int v31 = 0;
          *(_DWORD *)(v19 + 28) = v22;
          ++HIDWORD(v34);
        }
        std::optional<WebCore::OrganizationStorageAccessPromptQuirk>::~optional((uint64_t)&v27, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v33, HIDWORD(v34));
          *(void *)a3 = v33;
          uint64_t v26 = v34;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          *(void *)(a3 + 8) = v26;
          goto LABEL_17;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_16:
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        *(void *)a3 = v16;
        *(void *)(a3 + 8) = v17;
LABEL_17:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, a2);
      }
      LODWORD(v34) = v10;
      uint64_t v33 = WTF::fastMalloc((WTF *)(32 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::OrganizationStorageAccessPromptQuirk>(a1, (uint64_t)&v27);
        if (!v32) {
          break;
        }
        if (HIDWORD(v34) == v34)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>((uint64_t)&v33, (unint64_t)&v27);
        }
        else
        {
          uint64_t v12 = v33 + 32 * HIDWORD(v34);
          uint64_t v13 = v27;
          uint64_t v27 = 0;
          *(void *)uint64_t v12 = v13;
          *(void *)(v12 + 8) = 0;
          uint64_t v14 = v28;
          uint64_t v28 = 0;
          *(void *)(v12 + 16) = 0;
          *(void *)(v12 + 24) = 0;
          *(void *)(v12 + 8) = v14;
          uint64_t v15 = v29;
          uint64_t v29 = 0;
          *(void *)(v12 + 16) = v15;
          LODWORD(v15) = v30;
          int v30 = 0;
          *(_DWORD *)(v12 + 24) = v15;
          LODWORD(v15) = v31;
          int v31 = 0;
          *(_DWORD *)(v12 + 28) = v15;
          ++HIDWORD(v34);
        }
        std::optional<WebCore::OrganizationStorageAccessPromptQuirk>::~optional((uint64_t)&v27, v11);
        if (!--v10)
        {
          uint64_t v16 = v33;
          uint64_t v17 = v34;
          goto LABEL_16;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::optional<WebCore::OrganizationStorageAccessPromptQuirk>::~optional((uint64_t)&v27, v11);
    return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, a2);
  }
  unint64_t v23 = v5;
  uint64_t v24 = 0;
LABEL_29:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v23) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v24);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void sub_1986ACDAC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::optional<WebCore::OrganizationStorageAccessPromptQuirk>::~optional((uint64_t)va, a2);
  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::OrganizationStorageAccessPromptQuirk>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, v3);
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::OrganizationStorageAccessPromptQuirk>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986ACE80(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebCore::OrganizationStorageAccessPromptQuirk>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, &v14);
  IPC::Decoder::decode<WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v11, a1);
  if (!*(void *)a1)
  {
LABEL_12:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (!v17 || !v15 || !v13)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = v16;
  uint64_t v16 = 0;
  uint64_t v6 = v14;
  uint64_t v14 = 0;
  uint64_t v7 = v11;
  uint64_t v11 = 0;
  v10[0] = 0;
  v10[1] = 0;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  v10[2] = 0;
  *(void *)(a2 + 16) = v7;
  v10[3] = 0;
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  *(void *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 32) = 1;
  WebCore::OrganizationStorageAccessPromptQuirk::~OrganizationStorageAccessPromptQuirk((WebCore::OrganizationStorageAccessPromptQuirk *)v10, v4);
LABEL_6:
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
LABEL_7:
  if (v15 && v14) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v14, v4);
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16);
}

void sub_1986ACF8C(_Unwind_Exception *a1, void *a2)
{
  if (*(unsigned char *)(v2 - 40))
  {
    uint64_t v4 = *(void *)(v2 - 48);
    if (v4) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2 - 32);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::VectorArgumentCoder<false,WTF::URL,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 16))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WTF::URL,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (result >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::URL>(a2, v13);
      if (!v14) {
        break;
      }
      if (HIDWORD(v16) == v16)
      {
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WTF::URL::URL(v15 + 40 * HIDWORD(v16), v13);
        ++HIDWORD(v16);
      }
      std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v11);
      if (!--v6)
      {
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v15, (WTF *)HIDWORD(v16));
        *(void *)a1 = v15;
        uint64_t v12 = v16;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)(a1 + 8) = v12;
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
LABEL_11:
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v10;
LABEL_12:
      *(unsigned char *)(a1 + 16) = 1;
      return WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
    }
    LODWORD(v16) = 40 * (int)result / 0x28u;
    uint64_t v15 = WTF::fastMalloc((WTF *)(40 * result));
    while (1)
    {
      IPC::Decoder::decode<WTF::URL>(a2, v13);
      if (!v14) {
        break;
      }
      if (HIDWORD(v16) == v16)
      {
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WTF::URL::URL(v15 + 40 * HIDWORD(v16), v13);
        ++HIDWORD(v16);
      }
      std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v8);
      if (!--v6)
      {
        uint64_t v9 = v15;
        uint64_t v10 = v16;
        goto LABEL_11;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v7);
  return WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

void sub_1986AD1D0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, v16);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::WebProcessDataStoreParameters,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const char **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v51);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v49);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v47);
  uint64_t v7 = (const char **)IPC::Decoder::decode<std::array<unsigned char,8ul>>(a1);
  char v9 = v8;
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v45);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v43);
  unsigned __int16 v10 = IPC::Decoder::decode<WebCore::ThirdPartyCookieBlockingMode>(a1);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v41);
  IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, &v39);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v37);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v35);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v32);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v29);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v26);
  unsigned __int16 v11 = IPC::Decoder::decode<BOOL>(a1);
  if (*(void *)a1)
  {
    if (!v6) {
      goto LABEL_46;
    }
    v53[0] = v4;
    if (!v52) {
      goto LABEL_46;
    }
    uint64_t v12 = v51;
    uint64_t v51 = 0;
    v53[1] = v12;
    if (!v50) {
      goto LABEL_46;
    }
    char v13 = v49;
    uint64_t v49 = 0;
    v53[2] = v13;
    if (!v48) {
      goto LABEL_46;
    }
    char v14 = v47;
    long long v47 = 0;
    v53[3] = v14;
    if (!v9) {
      goto LABEL_46;
    }
    v53[4] = v7;
    if (!v46) {
      goto LABEL_46;
    }
    uint64_t v15 = v45;
    uint64_t v45 = 0;
    v53[5] = v15;
    if (!v44) {
      goto LABEL_46;
    }
    uint64_t v16 = v43;
    uint64_t v43 = 0;
    v53[6] = v16;
    if (v10 <= 0xFFu) {
      goto LABEL_46;
    }
    char v54 = v10;
    if (!v42) {
      goto LABEL_46;
    }
    char v17 = v41;
    int v41 = 0;
    uint64_t v55 = v17;
    if (!v40) {
      goto LABEL_46;
    }
    uint64_t v18 = v39;
    uint64_t v39 = 0;
    uint64_t v56 = v18;
    if (!v38) {
      goto LABEL_46;
    }
    uint64_t v19 = v37;
    uint64_t v37 = 0;
    uint64_t v57 = v19;
    if (!v36) {
      goto LABEL_46;
    }
    uint64_t v20 = v35;
    char v35 = 0;
    uint64_t v58 = v20;
    if (!v34) {
      goto LABEL_46;
    }
    LOBYTE(v59) = 0;
    char v60 = 0;
    if (v33) {
      goto LABEL_47;
    }
    while (1)
    {
      if (v31)
      {
        LOBYTE(v61) = 0;
        char v62 = 0;
        if (v30)
        {
          uint64_t v24 = v29;
          uint64_t v29 = 0;
          int v61 = v24;
          char v62 = 1;
        }
        if (v28)
        {
          LOBYTE(v63) = 0;
          char v64 = 0;
          if (v27)
          {
            uint64_t v25 = v26;
            uint64_t v26 = 0;
            uint64_t v63 = v25;
            char v64 = 1;
          }
          if (v11 > 0xFFu) {
            break;
          }
        }
      }
LABEL_46:
      __break(1u);
LABEL_47:
      unint64_t v23 = v32;
      char v32 = 0;
      uint64_t v59 = v23;
      char v60 = 1;
    }
    char v65 = v11;
    WebKit::WebProcessDataStoreParameters::WebProcessDataStoreParameters((uint64_t)a2, (uint64_t *)v53);
    a2[152] = 1;
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(v53);
  }
  else
  {
    *a2 = 0;
    a2[152] = 0;
  }
  if (v28 && v27) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v26);
  }
  if (v31 && v30) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v29);
  }
  if (v34 && v33) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v32);
  }
  if (v36) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v35);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37);
  if (v40 && v39) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v39, v21);
  }
  if (v42 && v41) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v41, (WTF::StringImpl *)v21);
  }
  if (v44) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v43);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v45);
  if (v48) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v47);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v49);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51);
}

void sub_1986AD5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const char **a10, char a11, int a12, char a13, const char **a14, char a15, int a16, char a17, const char **a18, char a19, int a20,char a21,const char **a22,char a23,int a24,char a25,uint64_t a26,uint64_t a27,char a28,WTF::StringImpl **a29,char a30,const char **a31,char a32,int a33,char a34,uint64_t a35,const char **a36,char a37,int a38,char a39,uint64_t a40,char a41,uint64_t a42,const char **a43)
{
  WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters(&a43);
  if (a13 && a11) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a10);
  }
  if (a17 && a15) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a14);
  }
  if (a21 && a19) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a18);
  }
  if (a23) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a22);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a25);
  if (a28 && a27) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(a27, v44);
  }
  if (a30 && a29) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a29, (WTF::StringImpl *)v44);
  }
  if (a32) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a31);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a34);
  if (a37) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a36);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a39);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_1986AD6C8()
{
}

void sub_1986AD6D0()
{
}

void sub_1986AD6D8()
{
}

void sub_1986AD6E0()
{
}

void sub_1986AD6EC()
{
}

void sub_1986AD6F4()
{
}

void sub_1986AD700()
{
}

void sub_1986AD708()
{
}

void sub_1986AD710()
{
}

uint64_t IPC::Decoder::decode<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8]) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986AD754(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(void *)v2) {
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*(void *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<std::array<unsigned char,8ul>>(IPC::Decoder *a1)
{
  unint64_t v2 = IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder>(a1);
  if (!v3) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder>(void *a1)
{
  unsigned __int16 v3 = IPC::Decoder::decode<unsigned char>(a1);
  if (v3 < 0x100u) {
    return 0;
  }
  else {
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char>(a1, (unsigned __int8 *)&v3);
  }
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char>(void *a1, unsigned __int8 *a2)
{
  unsigned __int16 v5 = IPC::Decoder::decode<unsigned char>(a1);
  if (v5 < 0x100u) {
    return 0;
  }
  else {
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char>(a1, a2, (uint64_t)&v5);
  }
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char>(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int16 v7 = IPC::Decoder::decode<unsigned char>(a1);
  if (v7 < 0x100u) {
    return 0;
  }
  else {
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char>(a1, a2, a3, (uint64_t)&v7);
  }
}

uint64_t IPC::Decoder::decode<unsigned char>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      int v6 = 256;
      return v6 | v5;
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11 && v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
  }
  unsigned int v5 = 0;
  int v6 = 0;
  return v6 | v5;
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char>(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v9 = IPC::Decoder::decode<unsigned char>(a1);
  if (v9 < 0x100u) {
    return 0;
  }
  else {
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char>(a1, a2, a3, a4, (uint64_t)&v9);
  }
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char>(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v11 = IPC::Decoder::decode<unsigned char>(a1);
  if (v11 < 0x100u) {
    return 0;
  }
  else {
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(a1, a2, a3, a4, a5, &v11);
  }
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  unsigned __int16 v13 = IPC::Decoder::decode<unsigned char>(a1);
  if (v13 < 0x100u) {
    return 0;
  }
  else {
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(a1, a2, a3, a4, a5, a6, &v13);
  }
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _WORD *a7)
{
  unsigned __int16 v15 = IPC::Decoder::decode<unsigned char>(a1);
  if (v15 < 0x100u) {
    return 0;
  }
  else {
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(a1, a2, a3, a4, a5, a6, a7, &v15);
  }
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _WORD *a7, _WORD *a8)
{
  unsigned __int16 v15 = IPC::Decoder::decode<unsigned char>(a1);
  if (v15 < 0x100u) {
    return 0;
  }
  else {
    return IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(*a2, a2[1], *(unsigned char *)a3, *(unsigned char *)(a3 + 1), *(unsigned char *)a4, *(unsigned char *)(a4 + 1), *(unsigned char *)a5, *(unsigned char *)(a5 + 1), *a6, HIBYTE(*a6), *a7, HIBYTE(*a7), *a8, HIBYTE(*a8), v15, SHIBYTE(v15));
  }
}

unint64_t IPC::ArgumentCoder<std::array<unsigned char,8ul>,void>::decode<IPC::Decoder,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char>(unint64_t result, char a2, unsigned __int8 a3, char a4, unsigned __int8 a5, char a6, unsigned __int8 a7, char a8, unsigned __int8 a9, char a10, unsigned __int8 a11, char a12, unsigned __int8 a13, char a14, unsigned __int8 a15, char a16)
{
  if (a2 && a4 && a6 && a8 && a10 && a12 && a14 && a16) {
    return result | (unint64_t)(unsigned __int16)(a3 << 8) | ((unint64_t)a5 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)a7 << 24) | ((unint64_t)a9 << 32) | ((unint64_t)a11 << 40) | ((unint64_t)a13 << 48) | ((unint64_t)a15 << 56);
  }
  __break(1u);
  return result;
}

void IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v27);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a1, (uint64_t)&v25);
  IPC::Decoder::decode<WebKit::NetworkSessionCreationParameters>(v40, a1);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v22);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v19);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v16);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v13);
  if (!*(void *)a1) {
    goto LABEL_39;
  }
  if (!v29) {
    goto LABEL_38;
  }
  v30[0] = (const char **)v27;
  unsigned int v5 = v28;
  char v27 = 0;
  char v28 = 0;
  v30[1] = v5;
  if (!v26) {
    goto LABEL_38;
  }
  int v6 = v25;
  uint64_t v25 = 0;
  void v30[2] = v6;
  if (!v41) {
    goto LABEL_38;
  }
  WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters((uint64_t)&v31, (uint64_t)v40);
  if (!v24) {
    goto LABEL_38;
  }
  LOBYTE(v32) = 0;
  char v33 = 0;
  if (v23)
  {
    unsigned __int16 v9 = v22;
    uint64_t v22 = 0;
    char v32 = v9;
    char v33 = 1;
  }
  if (!v21) {
    goto LABEL_38;
  }
  LOBYTE(v34) = 0;
  char v35 = 0;
  if (v20)
  {
    uint64_t v10 = v19;
    uint64_t v19 = 0;
    char v34 = v10;
    char v35 = 1;
  }
  if (!v18) {
    goto LABEL_38;
  }
  LOBYTE(v36) = 0;
  char v37 = 0;
  if (v17)
  {
    unsigned __int16 v11 = v16;
    uint64_t v16 = 0;
    char v36 = v11;
    char v37 = 1;
  }
  if (!v15)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    *a2 = 0;
    a2[704] = 0;
    goto LABEL_18;
  }
  LOBYTE(v38) = 0;
  char v39 = 0;
  if (v14)
  {
    uint64_t v12 = v13;
    unsigned __int16 v13 = 0;
    char v38 = v12;
    char v39 = 1;
  }
  WebKit::WebsiteDataStoreParameters::WebsiteDataStoreParameters((uint64_t)a2, (uint64_t *)v30);
  a2[704] = 1;
  WebKit::WebsiteDataStoreParameters::~WebsiteDataStoreParameters(v30, v7);
LABEL_18:
  if (v15 && v14) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v13);
  }
  if (v18 && v17) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v16);
  }
  if (v21 && v20) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v19);
  }
  if (v24 && v23) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v22);
  }
  if (v41) {
    WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)v40, v4);
  }
  if (v26) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v25);
  }
  if (v29)
  {
    unint64_t v8 = v27;
    if (v27)
    {
      char v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree(v8, v4);
    }
  }
}

void sub_1986AE024(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const char **a10, __int16 a11, int a12, __int16 a13, const char **a14, __int16 a15, int a16, __int16 a17, const char **a18, __int16 a19, int a20,__int16 a21,const char **a22,__int16 a23,int a24,__int16 a25,const char **a26,__int16 a27,WTF *a28,int a29,int a30,char a31,WTF *a32)
{
  WebKit::WebsiteDataStoreParameters::~WebsiteDataStoreParameters((const char ***)&a32, a2);
  if ((_BYTE)a13 && (_BYTE)a11) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a10);
  }
  if ((_BYTE)a17 && (_BYTE)a15) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a14);
  }
  if ((_BYTE)a21 && (_BYTE)a19) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a18);
  }
  if ((_BYTE)a25 && (_BYTE)a23) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a22);
  }
  if (LOBYTE(STACK[0x5B0])) {
    WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)&STACK[0x350], v33);
  }
  if ((_BYTE)a27) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a26);
  }
  if (a31)
  {
    char v34 = a28;
    if (a28)
    {
      a28 = 0;
      a29 = 0;
      WTF::fastFree(v34, v33);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1986AE11C()
{
}

void sub_1986AE124()
{
}

void sub_1986AE12C()
{
}

void sub_1986AE134()
{
}

void IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a2 + 16)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1986AE178(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 16))
  {
    if (*(unsigned char *)(v1 + 8)) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::decode<IPC::Decoder>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v16;
        uint64_t v11 = *v16;
        unint64_t v10 = v16[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_11;
  }
  int v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_11:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      char v15 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v15;
        uint64_t v4 = *v15;
        unint64_t v3 = v15[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebKit::SandboxExtensionHandle>((IPC::Decoder *)a1, (uint64_t)&v17);
      if (v18)
      {
        unint64_t v8 = v17;
        char v17 = 0;
        *(void *)a2 = v8;
        char v9 = 1;
        *(unsigned char *)(a2 + 8) = 1;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v17);
      }
      else
      {
        char v9 = 0;
        *(unsigned char *)a2 = 0;
      }
      *(unsigned char *)(a2 + 16) = v9;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
    }
    return;
  }
LABEL_12:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v14 = a1[3];
  if (v14 && v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
}

uint64_t IPC::Decoder::decode<WebKit::NetworkSessionCreationParameters>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::NetworkSessionCreationParameters,void>::decode(a1, a2);
  if (!a1[608]) {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_1986AE3A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*((unsigned char *)v2 + 608)) {
    WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return result;
  }
  unint64_t v6 = result;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (result >= 0x5D1)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebsiteDataStoreParameters>(a2, v15);
      if (!v16) {
        break;
      }
      if (HIDWORD(v14) == v14)
      {
        WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteDataStoreParameters>((unsigned int *)&v13, (unint64_t)v15);
      }
      else
      {
        WebKit::WebsiteDataStoreParameters::WebsiteDataStoreParameters(v13 + 704 * HIDWORD(v14), v15);
        ++HIDWORD(v14);
      }
      std::optional<WebKit::WebsiteDataStoreParameters>::~optional((uint64_t)v15, v11);
      if (!--v6)
      {
        WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v13, HIDWORD(v14));
        *(void *)a1 = v13;
        uint64_t v12 = v14;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        *(void *)(a1 + 8) = v12;
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (!result)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
LABEL_11:
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v10;
LABEL_12:
      *(unsigned char *)(a1 + 16) = 1;
      return WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
    }
    LODWORD(v14) = 704 * (int)result / 0x2C0u;
    uint64_t v13 = WTF::fastMalloc((WTF *)(704 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebsiteDataStoreParameters>(a2, v15);
      if (!v16) {
        break;
      }
      if (HIDWORD(v14) == v14)
      {
        WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteDataStoreParameters>((unsigned int *)&v13, (unint64_t)v15);
      }
      else
      {
        WebKit::WebsiteDataStoreParameters::WebsiteDataStoreParameters(v13 + 704 * HIDWORD(v14), v15);
        ++HIDWORD(v14);
      }
      std::optional<WebKit::WebsiteDataStoreParameters>::~optional((uint64_t)v15, v8);
      if (!--v6)
      {
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        goto LABEL_11;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  std::optional<WebKit::WebsiteDataStoreParameters>::~optional((uint64_t)v15, v7);
  return WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v5);
}

void sub_1986AE5B0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::optional<WebKit::WebsiteDataStoreParameters>::~optional((uint64_t)&a11, a2);
  WTF::Vector<WebKit::WebsiteDataStoreParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebsiteDataStoreParameters::WebsiteDataStoreParameters(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  uint64_t v5 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 12) = v4;
  WebKit::NetworkSessionCreationParameters::NetworkSessionCreationParameters(a1 + 32, (uint64_t)(a2 + 4));
  *(unsigned char *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 648) = 0;
  if (*((unsigned char *)a2 + 648))
  {
    uint64_t v7 = a2[80];
    a2[80] = 0;
    *(void *)(a1 + 640) = v7;
    *(unsigned char *)(a1 + 648) = 1;
  }
  *(unsigned char *)(a1 + 656) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  if (*((unsigned char *)a2 + 664))
  {
    uint64_t v8 = a2[82];
    a2[82] = 0;
    *(void *)(a1 + 656) = v8;
    *(unsigned char *)(a1 + 664) = 1;
  }
  *(unsigned char *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  if (*((unsigned char *)a2 + 680))
  {
    uint64_t v9 = a2[84];
    a2[84] = 0;
    *(void *)(a1 + 672) = v9;
    *(unsigned char *)(a1 + 680) = 1;
  }
  *(unsigned char *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  if (*((unsigned char *)a2 + 696))
  {
    uint64_t v10 = a2[86];
    a2[86] = 0;
    *(void *)(a1 + 688) = v10;
    *(unsigned char *)(a1 + 696) = 1;
  }
  return a1;
}

void sub_1986AE6F4(_Unwind_Exception *a1)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v2);
  uint64_t v5 = *(WTF **)v1;
  if (*(void *)v1)
  {
    *(void *)uint64_t v1 = 0;
    *(_DWORD *)(v1 + 8) = 0;
    WTF::fastFree(v5, v4);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebKit::WebsiteDataStoreParameters>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 704))
  {
    if (*(unsigned char *)(a1 + 696)) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 688));
    }
    if (*(unsigned char *)(a1 + 680)) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 672));
    }
    if (*(unsigned char *)(a1 + 664)) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 656));
    }
    if (*(unsigned char *)(a1 + 648)) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 640));
    }
    WebKit::NetworkSessionCreationParameters::~NetworkSessionCreationParameters((WebKit::NetworkSessionCreationParameters *)(a1 + 32), a2);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 16));
    uint64_t v4 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v4, v3);
    }
  }
  return a1;
}

void IPC::Decoder::decode<WebKit::WebsiteDataStoreParameters>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[704]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1986AE7F8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebKit::WebsiteDataStoreParameters>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(IPC::Encoder *this, uint64_t *a2)
{
  if (*a2) {
    int v4 = *(_DWORD *)(*a2 - 12);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, v6, v7);
    uint64_t v9 = (uint64_t *)result;
    v14[0] = result;
    v14[1] = v10;
    if (*a2) {
      uint64_t v11 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11 != result)
    {
      do
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v9);
        IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)(v9 + 1));
        v14[0] += 24;
        uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, v12, v13);
        uint64_t v9 = (uint64_t *)v14[0];
      }
      while (v14[0] != v11);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::ResourceLoadStatisticsParameters,void>::decode(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v38);
  IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v36);
  unsigned __int16 v4 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v5 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v6 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v7 = IPC::Decoder::decode<BOOL>(a2);
  unsigned __int16 v8 = IPC::Decoder::decode<WebCore::ThirdPartyCookieBlockingMode>(a2);
  unsigned __int16 v9 = IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a2);
  unsigned __int16 PartyWebsiteDataRemoval = IPC::Decoder::decode<WebCore::FirstPartyWebsiteDataRemovalMode>(a2);
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v34);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a2, &v32);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a2, &v30);
  IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a2, &v28);
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a2, (uint64_t)&v26);
  if (!*(void *)a2) {
    goto LABEL_30;
  }
  if (!v39) {
    goto LABEL_29;
  }
  uint64_t v12 = v38;
  uint64_t v38 = 0;
  *(void *)&long long v21 = v12;
  if (!v37) {
    goto LABEL_29;
  }
  uint64_t v13 = v36;
  char v36 = 0;
  if (v4 <= 0xFFu) {
    goto LABEL_29;
  }
  v22[0] = v4;
  if (v5 <= 0xFFu) {
    goto LABEL_29;
  }
  v22[1] = v5;
  if (v6 <= 0xFFu) {
    goto LABEL_29;
  }
  v22[2] = v6;
  if (v7 <= 0xFFu) {
    goto LABEL_29;
  }
  v22[3] = v7;
  if (v8 <= 0xFFu) {
    goto LABEL_29;
  }
  v22[4] = v8;
  if (v9 <= 0xFFu) {
    goto LABEL_29;
  }
  v22[5] = v9;
  if (PartyWebsiteDataRemoval <= 0xFFu) {
    goto LABEL_29;
  }
  v22[6] = PartyWebsiteDataRemoval;
  if (!v35) {
    goto LABEL_29;
  }
  uint64_t v14 = v34;
  uint64_t v34 = 0;
  if (!v33 || (char v15 = v32, v32 = 0, !v31) || (v16 = v30, v30 = 0, !v29) || (v17 = v28, v28 = 0, !v27))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 64) = 0;
    goto LABEL_17;
  }
  uint64_t v18 = v26;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  long long v21 = 0u;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)v22;
  *(_DWORD *)(a1 + 19) = *(_DWORD *)&v22[3];
  long long v23 = 0u;
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v15;
  long long v24 = 0u;
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v18;
  *(unsigned char *)(a1 + 64) = 1;
  WebKit::ResourceLoadStatisticsParameters::~ResourceLoadStatisticsParameters((WebKit::ResourceLoadStatisticsParameters *)&v21, v11);
LABEL_17:
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v11);
  if (v29 && v28) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v19);
  }
  if (v31 && v30) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v19);
  }
  if (v33 && v32) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v19);
  }
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v19);
  if (v37) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v36);
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38);
}

void sub_1986AEBA4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13, char a14, WTF::StringImpl **a15, char a16, WTF::StringImpl **a17, char a18, ...)
{
  va_start(va, a18);
  if (a14 && a13) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  }
  if (a16 && a15) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a15, a2);
  }
  if (a18 && a17) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a17, a2);
  }
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  if (*(unsigned char *)(v18 - 104)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v18 - 112));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v18 - 96);
  _Unwind_Resume(a1);
}

void sub_1986AEC50()
{
}

uint64_t IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8]) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986AEC94(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(void *)v2) {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = (IPC::Decoder *)result;
  unint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)result;
  unint64_t v6 = ((*(void *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v13 = *(void *)(result + 24);
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v5, v4);
        uint64_t v12 = *(void *)v2;
        unint64_t v11 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned __int16 v8 = (int *)(v5 + v6);
  *(void *)(result + 16) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_11:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t result = *((void *)v2 + 3);
    if (result)
    {
      if (v11) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v12);
      }
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  unsigned __int16 v9 = 0;
  int v10 = *v8;
  char v20 = 0;
  if (v10)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v2, (uint64_t)&v18);
      if (!v19) {
        break;
      }
      if (v18 == (WTF::StringImpl *)-1) {
        break;
      }
      uint64_t result = WTF::equal(v18, 0, v15);
      if (result) {
        break;
      }
      if (!v19)
      {
        __break(1u);
        return result;
      }
      uint64_t result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v20, &v18, (uint64_t)v17);
      if (!v17[16]) {
        break;
      }
      if (v19)
      {
        uint64_t result = (uint64_t)v18;
        uint64_t v18 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (!--v10)
      {
        unsigned __int16 v9 = v20;
        goto LABEL_8;
      }
    }
    *a2 = 0;
    a2[8] = 0;
    std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v14);
    uint64_t result = (uint64_t)v20;
    if (v20) {
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v16);
    }
  }
  else
  {
LABEL_8:
    *(void *)a2 = v9;
    a2[8] = 1;
  }
  return result;
}

void sub_1986AEE90(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl **a14)
{
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12, a2);
  if (a14) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a14, v15);
  }
  _Unwind_Resume(a1);
}

void sub_1986AEEB8()
{
}

uint64_t IPC::Decoder::decode<WebKit::AllowsCellularAccess>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::AllowsCellularAccess,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<WebKit::AllowsCellularAccess,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v3 = 0;
  IPC::Decoder::operator>><BOOL>(a1, &v3);
  unsigned __int8 v1 = v3;
  if (!HIBYTE(v3)) {
    unsigned __int8 v1 = 0;
  }
  return v1 | (HIBYTE(v3) << 8);
}

void *IPC::Decoder::operator>><BOOL>(void *result, _WORD *a2)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = result[2] - *result;
  if (v2 <= v4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v18 = a2;
      char v15 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v3);
        uint64_t result = v15;
        uint64_t v10 = *v15;
        unint64_t v9 = v15[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
      a2 = v18;
    }
    goto LABEL_9;
  }
  uint64_t v5 = (unsigned __int8 *)(v3 + v4);
  result[2] = v5 + 1;
  if (!v3)
  {
    unint64_t v9 = v2;
    uint64_t v10 = 0;
LABEL_9:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      uint64_t v17 = a2;
      uint64_t v14 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v10, v9);
        unsigned int v6 = 0;
        uint64_t result = v14;
        uint64_t v3 = *v14;
        unint64_t v2 = v14[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        unsigned int v6 = 0;
      }
      a2 = v17;
    }
    else
    {
      unint64_t v2 = 0;
      unsigned int v6 = 0;
    }
    goto LABEL_11;
  }
  unsigned int v6 = *v5;
  if (v6 < 2)
  {
    LOWORD(v7) = 256;
    __int16 v8 = 1;
    goto LABEL_5;
  }
LABEL_11:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v7 = result[3];
  if (v7)
  {
    unsigned int v12 = v6;
    char v16 = a2;
    uint64_t v13 = result;
    if (v2) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v3);
    }
    __int16 v8 = 0;
    LOWORD(v7) = 0;
    uint64_t result = v13;
    a2 = v16;
    unsigned int v6 = v12;
  }
  else
  {
    __int16 v8 = 0;
  }
LABEL_5:
  if (!v6) {
    __int16 v8 = 0;
  }
  *a2 = v7 | v8;
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = (IPC::Decoder *)result;
  unint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)result;
  unint64_t v6 = ((*(void *)(result + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v16 = *(void *)(result + 24);
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5, v4);
        uint64_t v15 = *(void *)v2;
        unint64_t v14 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_37;
  }
  __int16 v8 = (int *)(v5 + v6);
  *(void *)(result + 16) = v8 + 1;
  if (!v5)
  {
    unint64_t v14 = v4;
    uint64_t v15 = 0;
LABEL_37:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t result = *((void *)v2 + 3);
    if (result)
    {
      if (v14) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v15);
      }
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  int v9 = *v8;
  uint64_t v22 = 0;
  if (v9)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v2, (uint64_t)&v20);
      if (!v21) {
        break;
      }
      uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v10, (uint64_t)v18);
      if (v19)
      {
        if (!v21) {
          goto LABEL_31;
        }
        uint64_t result = (uint64_t)v20;
        if (v20 == (WTF::StringImpl *)-1) {
          goto LABEL_26;
        }
        uint64_t result = WTF::equal(v20, 0, v11);
        if (result) {
          goto LABEL_26;
        }
        if (!v21 || !v19)
        {
LABEL_31:
          __break(1u);
          break;
        }
        uint64_t result = WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v22, &v20, v18, (uint64_t)v17);
        if (!v17[16])
        {
LABEL_26:
          *a2 = 0;
          a2[8] = 0;
          int v12 = 1;
        }
        else
        {
          int v12 = 0;
        }
        if (v19) {
          uint64_t result = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v10);
        }
      }
      else
      {
        *a2 = 0;
        a2[8] = 0;
        int v12 = 1;
      }
      if (v21)
      {
        uint64_t result = (uint64_t)v20;
        char v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      if (v12) {
        goto LABEL_33;
      }
      if (!--v9)
      {
        uint64_t v13 = v22;
        goto LABEL_23;
      }
    }
    *a2 = 0;
    a2[8] = 0;
LABEL_33:
    uint64_t result = v22;
    if (v22) {
      return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v22, v10);
    }
  }
  else
  {
    uint64_t v13 = 0;
LABEL_23:
    *(void *)a2 = v13;
    a2[8] = 1;
  }
  return result;
}

void sub_1986AF330(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if ((_BYTE)v13) {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  }
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, (WTF::StringImpl *)a2);
  uint64_t v9 = *(void *)(v6 - 40);
  if (v9) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v9, v8);
  }
  _Unwind_Resume(a1);
}

void sub_1986AF368()
{
}

void sub_1986AF370()
{
}

uint64_t std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986AF408(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v6, v5);
        uint64_t v21 = *(void *)a1;
        unint64_t v20 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_35;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v20 = v5;
    uint64_t v21 = 0;
LABEL_35:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result)
    {
      if (v20) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v21);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (v10 < 0x20000)
  {
    if (!v10)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
LABEL_19:
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      *(void *)a3 = v14;
      *(void *)(a3 + 8) = v15;
      goto LABEL_20;
    }
    LODWORD(v27) = v10;
    uint64_t v26 = WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v24);
      if (!v25)
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
        return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, a2);
      }
      int v11 = HIDWORD(v27);
      if (HIDWORD(v27) != v27) {
        break;
      }
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>((uint64_t)&v26, (unint64_t)&v24);
      if (v25) {
        goto LABEL_13;
      }
LABEL_16:
      if (!--v10)
      {
        uint64_t v14 = v26;
        uint64_t v15 = v27;
        goto LABEL_19;
      }
    }
    uint64_t v12 = v24;
    long long v24 = 0;
    *(void *)(v26 + 8 * HIDWORD(v27)) = v12;
    HIDWORD(v27) = v11 + 1;
LABEL_13:
    uint64_t v13 = v24;
    long long v24 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    goto LABEL_16;
  }
  while (1)
  {
    IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v24);
    if (!v25) {
      break;
    }
    int v17 = HIDWORD(v27);
    if (HIDWORD(v27) == v27)
    {
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>((uint64_t)&v26, (unint64_t)&v24);
    }
    else
    {
      uint64_t v18 = v24;
      long long v24 = 0;
      *(void *)(v26 + 8 * HIDWORD(v27)) = v18;
      HIDWORD(v27) = v17 + 1;
    }
    std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v19);
    if (!--v10)
    {
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v26, HIDWORD(v27));
      *(void *)a3 = v26;
      uint64_t v23 = v27;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      *(void *)(a3 + 8) = v23;
LABEL_20:
      *(unsigned char *)(a3 + 16) = 1;
      return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, a2);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v19);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, a2);
}

void sub_1986AF6A4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v12);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::RegistrableDomain>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::RegistrableDomain,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8)) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986AF710(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::RegistrableDomain,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  uint64_t v6 = *(WTF::StringImpl **)a1;
  if (*(void *)a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = v7;
    if (v7 && *((_DWORD *)v7 + 1))
    {
      unint64_t v7 = 0;
    }
    else
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v9;
    }
    *(void *)a2 = v6;
    LOBYTE(v6) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (_BYTE)v6;
  if (v8)
  {
    uint64_t result = v7;
    unint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1986AF7DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::ThirdPartyCookieBlockingMode>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<JSC::MessageLevel,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<JSC::MessageLevel,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  else
  {
    unint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      int v6 = 1;
      goto LABEL_4;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  unsigned int v5 = 0;
  int v6 = 0;
LABEL_4:
  BOOL v7 = v5 < 5;
  unsigned int v8 = v5 | 0x100;
  if ((v6 & v7) != 0) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::quirkDomainsDictToMap(uint64_t *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  unint64_t v3 = (void *)[a2 allKeys];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  uint64_t result = [v3 countByEnumeratingWithState:&v37 objects:v42 count:16];
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v6 = *(void *)v38;
    id obj = v3;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v38 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v37 + 1) + 8 * v7);
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        uint64_t v9 = (void *)[a2 objectForKey:v8];
        uint64_t v10 = [v9 countByEnumeratingWithState:&v31 objects:v41 count:16];
        if (v10)
        {
          uint64_t v11 = *(void *)v32;
          do
          {
            uint64_t v12 = 0;
            do
            {
              if (*(void *)v32 != v11) {
                objc_enumerationMutation(v9);
              }
              MEMORY[0x19972EAD0](&v29, *(void *)(*((void *)&v31 + 1) + 8 * v12));
              uint64_t v14 = v29;
              if (v29 && *((_DWORD *)v29 + 1))
              {
                char v29 = 0;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                uint64_t v14 = v28;
              }
              char v30 = v14;
              LODWORD(v15) = HIDWORD(v36);
              if (HIDWORD(v36) == v36)
              {
                uint64_t v18 = (uint64_t *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, HIDWORD(v36) + 1, (unint64_t)&v30);
                uint64_t v15 = HIDWORD(v36);
                uint64_t v19 = v35;
                uint64_t v20 = *v18;
                *uint64_t v18 = 0;
                *(void *)(v19 + 8 * v15) = v20;
              }
              else
              {
                char v30 = 0;
                *(void *)(v35 + 8 * HIDWORD(v36)) = v14;
              }
              HIDWORD(v36) = v15 + 1;
              uint64_t v16 = v30;
              char v30 = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2) {
                  WTF::StringImpl::destroy(v16, v13);
                }
                else {
                  *(_DWORD *)v16 -= 2;
                }
              }
              int v17 = v29;
              char v29 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2) {
                  WTF::StringImpl::destroy(v17, v13);
                }
                else {
                  *(_DWORD *)v17 -= 2;
                }
              }
              ++v12;
            }
            while (v10 != v12);
            uint64_t v21 = [v9 countByEnumeratingWithState:&v31 objects:v41 count:16];
            uint64_t v10 = v21;
          }
          while (v21);
        }
        MEMORY[0x19972EAD0](&v29, v8);
        uint64_t v22 = v29;
        if (v29 && *((_DWORD *)v29 + 1))
        {
          char v29 = 0;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          uint64_t v22 = v28;
        }
        char v30 = v22;
        WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v30, &v35, (uint64_t)&v28);
        long long v24 = v30;
        char v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2) {
            WTF::StringImpl::destroy(v24, v23);
          }
          else {
            *(_DWORD *)v24 -= 2;
          }
        }
        char v25 = v29;
        char v29 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v23);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v23);
        ++v7;
      }
      while (v7 != v5);
      uint64_t result = [obj countByEnumeratingWithState:&v37 objects:v42 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1986AFC54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (*a11) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v8;
  uint64_t v10 = (WTF **)(v7 + 24 * v9);
  if ((WTF::equal(*v10, 0, v11) & 1) == 0)
  {
    uint64_t v22 = 0;
    int v23 = 1;
    do
    {
      if (*v10 == (WTF *)-1)
      {
        uint64_t v22 = v10;
      }
      else
      {
        uint64_t result = WTF::equalIgnoringASCIICase(*v10, *a2, v12);
        if (result)
        {
          uint64_t v24 = *a1;
          if (*a1) {
            unsigned int v25 = *(_DWORD *)(v24 - 4);
          }
          else {
            unsigned int v25 = 0;
          }
          char v21 = 0;
          uint64_t v20 = v24 + 24 * v25;
          goto LABEL_11;
        }
      }
      unsigned int v9 = (v9 + v23) & v8;
      uint64_t v10 = (WTF **)(v7 + 24 * v9);
      ++v23;
    }
    while (!WTF::equal(*v10, 0, v12));
    if (v22)
    {
      *uint64_t v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v10 = v22;
    }
  }
  uint64_t result = WTF::HashMapTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>::translate<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>> WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::RegistrableDomain &&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>((uint64_t *)v10, (uint64_t *)a2, &v26);
  uint64_t v14 = *a1;
  if (*a1) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - 12) = v15;
  uint64_t v16 = *a1;
  if (*a1) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_10;
    }
LABEL_28:
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v10);
    uint64_t v10 = (WTF **)result;
    uint64_t v16 = *a1;
    if (*a1) {
      LODWORD(v19) = *(_DWORD *)(v16 - 4);
    }
    else {
      LODWORD(v19) = 0;
    }
    goto LABEL_10;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_28;
  }
LABEL_10:
  uint64_t v20 = v16 + 24 * v19;
  char v21 = 1;
LABEL_11:
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v20;
  *(unsigned char *)(a4 + 16) = v21;
  return result;
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>::translate<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>> WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineAdd<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::RegistrableDomain &&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1}>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v5 = *a3;
  uint64_t v6 = **a3;
  *uint64_t v5 = 0;
  v10[0] = v6;
  uint64_t v7 = v5[1];
  v5[1] = 0;
  v10[1] = v7;
  WTF::GenericHashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(a1 + 1), v10);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v8);
}

void sub_1986AFF34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1986B007CLL);
    }
    unint64_t v4 = *(WTF::StringImpl **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::RegistrableDomain>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::RegistrableDomain>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  if (result != a2)
  {
    uint64_t v5 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      *a3 = v6;
      uint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      ++a3;
      ++v5;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        uint64_t v5 = *(WTF::StringImpl **)(v4 - 8);
        *(void *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 8 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v12 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    int v15 = (WTF::StringImpl **)v6;
    do
    {
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (WTF::equal(*v15, 0, v11))
        {
          WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(v15, v16);
        }
        else
        {
          uint64_t v17 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::reinsert(a1, (uint64_t)v15);
          WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(v15, v18);
          if (v15 == a3) {
            uint64_t v12 = v17;
          }
        }
      }
      v15 += 3;
      --v14;
    }
    while (v14);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
      uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      uint64_t v10 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, v8, v9);
      uint64_t v12 = (WTF::StringImpl **)v10;
      v25[0] = v10;
      v25[1] = v11;
      uint64_t v13 = *a2 ? *a2 + 24 * *(unsigned int *)(*a2 - 4) : 0;
      if (v13 != v10)
      {
        do
        {
          uint64_t v24 = v12;
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = WTF::ASCIICaseInsensitiveHash::hash(*v12, v11);
          int v18 = 0;
          do
          {
            unsigned int v19 = v16 & v15;
            int v20 = WTF::equal(*(WTF **)(v14 + 24 * (v16 & v15)), 0, v17);
            unsigned int v16 = ++v18 + v19;
          }
          while (!v20);
          WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>::translate<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::RegistrableDomain,WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>> const&)::{lambda(void)#1}>((WTF::StringImpl **)(v14 + 24 * v19), (uint64_t)v12, &v24);
          v25[0] += 24;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v25, v21, v22);
          uint64_t v12 = (WTF::StringImpl **)v25[0];
        }
        while (v25[0] != v13);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(WTF ***)result;
  if (*(void *)result != *(void *)(result + 8))
  {
    int v4 = (void *)result;
    do
    {
      uint64_t result = WTF::equal(*v3, 0, a3);
      if ((result & 1) == 0 && *v3 != (WTF *)-1) {
        break;
      }
      unsigned int v5 = (WTF **)v4[1];
      uint64_t v3 = (WTF **)(*v4 + 24);
      *int v4 = v3;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>::translate<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::RegistrableDomain,WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>> const&)::{lambda(void)#1}>(WTF::StringImpl **a1, uint64_t a2, WTF::StringImpl ***a3)
{
  int v4 = *a3;
  unsigned int v5 = **a3;
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  uint64_t v10 = v5;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v11, (uint64_t)(v4 + 1));
  uint64_t v7 = *a1;
  *a1 = v10;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(a1 + 1), v11);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v8);
  return 0;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 8 * v4));
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

WTF *WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *(WTF **)a1;
  if (result)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  uint64_t v5 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)a1 = v5;
  LODWORD(v5) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(_DWORD ***)a2;
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *v7;
        if (*v7) {
          *v9 += 2;
        }
        *v5++ = v9;
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (*a1) {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
  }
  else {
    unsigned int v4 = 0;
  }
  v6[0] = a2;
  v6[1] = v3 + 24 * v4;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v6, a2, a3);
  return v6[0];
}

uint64_t WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  unsigned int v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  unint64_t v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1) {
      goto LABEL_6;
    }
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    double v4 = (double)a1;
    double v5 = (double)v3;
    double v6 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400) {
    goto LABEL_4;
  }
LABEL_6:
  double v4 = (double)a1;
  double v5 = (double)v3;
  double v6 = 0.416666667;
LABEL_7:
  if (v5 * v6 <= v4) {
    LODWORD(v3) = 2 * v3;
  }
  if (v3 <= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatile(uint64_t *a1, char a2, char a3)
{
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  double v7 = v6;
  uint64_t v8 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)a1 + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v27, a1 + 3, v8, v9);
  uint64_t v10 = (void *)a1[3];
  if (v10)
  {
    uint64_t v11 = *((unsigned int *)v10 - 1);
    uint64_t v12 = &v10[v11];
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v25, a1 + 3, v12, &v10[v11]);
  uint64_t v13 = v28;
  uint64_t v14 = v26;
  int v15 = 1;
  while (v13 != v14)
  {
    uint64_t v16 = *(void *)(*(void *)v13 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 24))(v16)) {
      v15 &= WebKit::RemoteLayerBackingStoreCollection::markInProcessBackingStoreVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)a1, v16, a2, v7);
    }
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v27);
    uint64_t v13 = v28;
    uint64_t v14 = v26;
  }
  uint64_t v17 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)a1 + 5);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v27, a1 + 5, v17, v18);
  unsigned int v19 = (void *)a1[5];
  if (v19)
  {
    uint64_t v20 = *((unsigned int *)v19 - 1);
    uint64_t v21 = &v19[v20];
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v25, a1 + 5, v21, &v19[v20]);
  for (uint64_t i = v28; v28 != v26; uint64_t i = v28)
  {
    uint64_t v23 = *(void *)(*(void *)i + 8);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v23 + 24))(v23)) {
      v15 &= WebKit::RemoteLayerBackingStoreCollection::markInProcessBackingStoreVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)a1, v23, a3, v7);
    }
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v27);
  }
  return v15 & 1;
}

double WebKit::RemoteLayerBackingStoreCollection::didFlushLayers@<D0>(WebKit::RemoteLayerBackingStoreCollection *this@<X0>, WebKit::RemoteLayerTreeTransaction *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  double v5 = (void *)((char *)a2 + 24);
  double v6 = (WebKit::PlatformCALayerRemote **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)a2 + 3);
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  if (*v5) {
    uint64_t v10 = *v5 + 8 * *(unsigned int *)(*v5 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if ((WebKit::PlatformCALayerRemote **)v10 == v6)
  {
    char v11 = 0;
  }
  else
  {
    char v11 = 0;
    do
    {
      uint64_t v12 = *v8;
      if ((*((unsigned char *)*v8 + 65) & 4) != 0)
      {
        uint64_t v13 = *((void *)v12 + 59);
        if (v13)
        {
          uint64_t v43 = *(uint64_t **)(v13 + 200);
          uint64_t v44 = *(void *)(v13 + 208);
          uint64_t v45 = 0;
          *(void *)(v13 + 200) = 0;
          uint64_t v46 = 0;
          *(void *)(v13 + 208) = 0;
          WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v7);
          uint64_t v15 = HIDWORD(v44);
          unint64_t v16 = *(unsigned int *)(a3 + 8);
          unint64_t v17 = HIDWORD(v44) + (unint64_t)*(unsigned int *)(a3 + 12);
          if (v17 > v16)
          {
            unint64_t v18 = v16 + (v16 >> 2);
            if (v18 >= 0x10) {
              unint64_t v19 = v18 + 1;
            }
            else {
              unint64_t v19 = 16;
            }
            if (v19 <= v17) {
              unint64_t v20 = HIDWORD(v44) + (unint64_t)*(unsigned int *)(a3 + 12);
            }
            else {
              unint64_t v20 = v19;
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a3, v20);
            uint64_t v15 = HIDWORD(v44);
          }
          if (v15)
          {
            uint64_t v21 = v43;
            unsigned int v22 = *(_DWORD *)(a3 + 12);
            uint64_t v23 = 8 * v15;
            do
            {
              uint64_t v24 = *(void *)a3;
              uint64_t v25 = *v21;
              *v21++ = 0;
              *(void *)(v24 + 8 * v22++) = v25;
              v23 -= 8;
            }
            while (v23);
            *(_DWORD *)(a3 + 12) = v22;
          }
          WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v14);
          uint64_t v12 = *v8;
        }
        char v11 = 1;
      }
      WebKit::PlatformCALayerRemote::didCommit(v12);
      while (++v8 != v9)
      {
        if ((unint64_t)*v8 + 1 > 1) {
          goto LABEL_26;
        }
      }
      uint64_t v8 = v9;
LABEL_26:
      ;
    }
    while (v8 != (WebKit::PlatformCALayerRemote **)v10);
  }
  *((unsigned char *)this + 144) = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v26 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v45, (uint64_t *)this + 3, v26, v27);
  uint64_t v28 = *((void *)this + 3);
  if (v28)
  {
    uint64_t v29 = *(unsigned int *)(v28 - 4);
    char v30 = (uint64_t *)(v28 + 8 * v29);
  }
  else
  {
    char v30 = 0;
    uint64_t v29 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v43, (uint64_t *)this + 3, v30, (uint64_t *)(v28 + 8 * v29));
  for (uint64_t i = v46; v46 != v44; uint64_t i = v46)
  {
    uint64_t v33 = *(void *)(*(void *)i + 8);
    long long v34 = (unsigned int *)(v33 + 8);
    if ((WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::RemoteLayerBackingStore>((uint64_t)this + 56, *(void *)(v33 + 8)) & 1) == 0)
    {
      uint64_t v36 = HIDWORD(v48);
      if (HIDWORD(v48) == v48)
      {
        WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerBackingStore&>((unsigned int *)&v47, v33);
      }
      else
      {
        uint64_t v37 = v47;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v34, v33);
        long long v38 = *(atomic_uint **)v34;
        if (*(void *)v34) {
          atomic_fetch_add(v38, 1u);
        }
        *(void *)(v37 + 8 * v36) = v38;
        ++HIDWORD(v48);
      }
    }
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v45);
  }
  if (HIDWORD(v48))
  {
    uint64_t v39 = v47;
    uint64_t v40 = 8 * HIDWORD(v48);
    do
    {
      WebKit::RemoteLayerBackingStoreCollection::backingStoreBecameUnreachable(this, *(WebKit::RemoteLayerBackingStore **)(*(void *)v39 + 8));
      v39 += 8;
      v40 -= 8;
    }
    while (v40);
    char v42 = (HIDWORD(v48) != 0) | v11;
    WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v41);
    if ((v42 & 1) == 0) {
      return result;
    }
  }
  else
  {
    WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v31);
    if ((v11 & 1) == 0) {
      return result;
    }
  }
  if ((*((void *)this + 15) & 0xFFFFFFFFFFFFLL) == 0
    || (double result = *(double *)((*((void *)this + 15) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

void sub_1986B0D08(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12, v14);
  _Unwind_Resume(a1);
}

void *WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(void *result)
{
  uint64_t v1 = result[2];
  uint64_t v2 = result[1] + 8;
  result[1] = v2;
  if (v2 != v1)
  {
    while ((unint64_t)(*(void *)v2 + 1) <= 1)
    {
      v2 += 8;
      result[1] = v2;
      if (v2 == v1)
      {
        uint64_t v2 = v1;
        break;
      }
    }
  }
  uint64_t v3 = result[3];
LABEL_6:
  while (v2 != v3 && !*(void *)(*(void *)v2 + 8))
  {
    uint64_t v4 = v2 + 8;
    result[1] = v2 + 8;
    uint64_t v2 = v1;
    if (v4 != v1)
    {
      uint64_t v2 = v4;
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 8;
        result[1] = v2;
        if (v2 == v1)
        {
          uint64_t v2 = v1;
          goto LABEL_6;
        }
      }
    }
  }
  ++*(_DWORD *)(*result + 8);
  return result;
}

WTF::StringImpl **WebKit::PlatformCALayerRemote::didCommit(WebKit::PlatformCALayerRemote *this)
{
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 128, 0);
  double result = (WTF::StringImpl **)*((void *)this + 18);
  if (result)
  {
    *((void *)this + 18) = 0;
    double result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v2);
  }
  *((void *)this + 8) = 0;
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned int *)(result + 12);
    if (v3 > a2)
    {
      unint64_t v4 = a2;
      double result = *(void *)result + 144 * a2;
      uint64_t v5 = 144 * v3 - 144 * a2;
      do
      {
        double result = std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair(result, (WTF::StringImpl *)a2)+ 144;
        v5 -= 144;
      }
      while (v5);
      a2 = v4;
      *(_DWORD *)(v2 + 12) = v4;
      LODWORD(v3) = v4;
    }
    double v6 = *(WTF **)v2;
    if (a2)
    {
      unsigned int v8 = v3;
      uint64_t v9 = *(void *)v2;
      if (a2 >= 0x1C71C72)
      {
        __break(0xC471u);
        return result;
      }
      int v7 = 144 * a2;
      double result = WTF::fastMalloc((WTF *)(144 * a2));
      *(_DWORD *)(v2 + 8) = (v7 & 0xFFFFFFF0) / 0x90;
      *(void *)uint64_t v2 = result;
      double v6 = (WTF *)v9;
      if (result != v9)
      {
        double result = WTF::VectorMover<false,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>::move(v9, (uint64_t *)(v9 + 144 * v8), (void *)result);
        double v6 = (WTF *)v9;
      }
    }
    if (v6)
    {
      if (*(WTF **)v2 == v6)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v6, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::RemoteLayerBackingStore>(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 8);
  if (!a2 || !*(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v3 = a2;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v3);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 8);
    unint64_t v4 = ~(*a2 << 32) + *a2;
    unint64_t v5 = 9
       * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
    unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
    for (int i = 1; ; ++i)
    {
      uint64_t v9 = *(void *)(v2 + 8 * v7);
      if (!v9) {
        break;
      }
      if (v9 != -1 && v9 == *a2) {
        return 1;
      }
      unsigned int v7 = (v7 + i) & v3;
    }
  }
  return 0;
}

void WebKit::RemoteLayerTreeDrawingArea::updateRendering(WebKit::RemoteLayerTreeDrawingArea *this)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 224))
  {
    *((unsigned char *)this + 225) = 1;
  }
  else if (*((unsigned char *)this + 227))
  {
    *((unsigned char *)this + 228) = 1;
  }
  else if (!*((unsigned char *)this + 226))
  {
    uint64_t v2 = *(void *)(*((void *)this + 5) + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    CFRetain(*(CFTypeRef *)(v3 + 8));
    uint64_t v4 = *(void *)(v3 + 48);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 144);
      if (v5)
      {
        if (*(_DWORD *)(v5 - 12))
        {
          WebKit::DrawingArea::scaleViewToFitDocumentIfNeeded(this);
          char v6 = *((unsigned char *)this + 226);
          *((unsigned char *)this + 226) = 1;
          WebKit::WebPage::updateRendering((WebKit::WebPage *)v3);
          WebKit::WebPage::flushPendingIntrinsicContentSizeUpdate((IPC::Encoder *)v3);
          float v7 = (float)*(int *)(v3 + 56);
          float v8 = (float)*(int *)(v3 + 60);
          uint64_t v98 = 0;
          float v99 = v7;
          float v100 = v8;
          uint64_t v9 = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v3);
          if (v9)
          {
            uint64_t v10 = (_DWORD *)v9;
            ++*(_DWORD *)(v9 + 8);
            *(_OWORD *)BOOL v105 = *(_OWORD *)(v9 + 1128);
            LODWORD(v106) = *(_DWORD *)(v9 + 1144);
            if ((_BYTE)v106) {
              WebCore::FloatRect::intersect((WebCore::FloatRect *)&v98, (const WebCore::FloatRect *)v105);
            }
            if (v10[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v10 + 8))(v10);
            }
            else {
              --v10[2];
            }
          }
          WebKit::WebPage::finalizeRenderingUpdate(v3);
          (*(void (**)(WebKit::RemoteLayerTreeDrawingArea *))(*(void *)this + 288))(this);
          uint64_t v12 = *((unsigned int *)this + 25);
          if (v12)
          {
            uint64_t v13 = 40 * v12;
            uint64_t v14 = (void *)(*((void *)this + 11) + 16);
            do
            {
              if (*v14) {
                (*(void (**)(void, uint64_t *))(*(void *)*v14 + 744))(*v14, &v98);
              }
              v14 += 5;
              v13 -= 40;
            }
            while (v13);
          }
          uint64_t v15 = *(WebKit::RemoteLayerBackingStoreCollection **)(*((void *)this + 10) + 88);
          *((unsigned char *)v15 + 144) = 1;
          WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)v15 + 56, v11);
          uint64_t v94 = *((void *)this + 31) + 1;
          uint64_t v95 = v3;
          *((void *)this + 31) = v94;
          char v96 = 0;
          uint64_t v97 = 0;
          unsigned int v16 = *((_DWORD *)this + 25);
          if (v16)
          {
            if (v16 >= 0x4EC4ED)
            {
LABEL_86:
              __break(0xC471u);
              JUMPOUT(0x1986B1990);
            }
            unsigned int v17 = 832 * v16;
            uint64_t v19 = WTF::fastMalloc((WTF *)(832 * v16));
            LODWORD(v97) = v17 / 0x340;
            char v96 = (WebKit::RemoteLayerTreeTransaction *)v19;
            uint64_t v20 = *((unsigned int *)this + 25);
            if (v20)
            {
              char v90 = v6;
              unsigned __int16 v89 = v15;
              uint64_t v93 = (uint64_t)v15 + 72;
              uint64_t v91 = v2;
              uint64_t v21 = (uint64_t *)(*((void *)this + 11) + 32);
              uint64_t v22 = 40 * v20;
              __asm { FMOV            V0.2D, #1.0 }
              long long v92 = _Q0;
              int v28 = 1;
              do
              {
                WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(v93, v18);
                (*(void (**)(void))(*(void *)*(v21 - 4) + 752))(*(v21 - 4));
                LODWORD(v112) = 0;
                long long v113 = 0u;
                long long v114 = 0u;
                long long v115 = 0u;
                long long v116 = 0u;
                long long v117 = 0u;
                long long v118 = 0u;
                long long v119 = 0u;
                long long v120 = 0u;
                long long v121 = 0u;
                long long v122 = 0u;
                long long v123 = 0u;
                long long v124 = 0u;
                long long v125 = v92;
                long long v126 = v92;
                uint64_t v130 = 0;
                uint64_t v128 = 0;
                int v131 = 0;
                char v132 = 1;
                char v134 = 0;
                char v135 = 0;
                char v136 = 0;
                uint64_t v137 = 0;
                int v133 = 0;
                unint64_t v127 = 0xBFF0000000000000;
                uint64_t v129 = v94;
                uint64_t v29 = *((void *)this + 10);
                *((void *)&v119 + 1) = *((void *)this + 32);
                uint64_t v30 = *((void *)this + 33);
                *((void *)this + 32) = 0;
                *((void *)this + 33) = 0;
                *(void *)&long long v120 = v30;
                long long v31 = (void *)*(v21 - 4);
                if (((*(uint64_t (**)(void *))(*v31 + 856))(v31) & 1) == 0) {
                  goto LABEL_86;
                }
                long long v32 = (WebKit::PlatformCALayerRemote *)v31[79];
                if (!v32) {
                  long long v32 = (WebKit::PlatformCALayerRemote *)v31[78];
                }
                WebKit::RemoteLayerTreeContext::buildTransaction(v29, (uint64_t)&v112, v32, *(v21 - 1), *v21);
                WebKit::WebPage::willCommitLayerTree(v3, (uint64_t)&v112, *(v21 - 1), *v21);
                __int16 v33 = *((_WORD *)this + 140);
                *((_WORD *)this + 140) = 0;
                LOWORD(v131) = v33;
                uint64_t v34 = *((void *)this + 34);
                *((void *)this + 34) = 0;
                uint64_t v130 = v34;
                (*(void (**)(WebKit::RemoteLayerTreeDrawingArea *, uint64_t *))(*(void *)this + 456))(this, &v112);
                *((unsigned char *)this + 227) = 1;
                uint64_t v104 = v129;
                uint64_t v35 = *(void *)(*((void *)this + 5) + 8);
                if (v35) {
                  uint64_t v36 = v35 - 16;
                }
                else {
                  uint64_t v36 = 0;
                }
                CFRetain(*(CFTypeRef *)(v36 + 8));
                uint64_t v37 = *((void *)this + 4);
                long long v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                *(_WORD *)long long v38 = 1133;
                *((void *)v38 + 1) = v37;
                *((void *)v38 + 66) = (char *)v38 + 16;
                *((void *)v38 + 67) = 512;
                *((void *)v38 + 68) = 0;
                *((void *)v38 + 70) = 0;
                *((void *)v38 + 69) = 0;
                IPC::Encoder::encodeHeader(v38);
                unint64_t v101 = v38;
                IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v38, &v104);
                (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v36 + 32) + 32))(v36 + 32, &v101, 0);
                uint64_t v40 = v101;
                unint64_t v101 = 0;
                if (v40)
                {
                  IPC::Encoder::~Encoder(v40, v39);
                  WTF::fastFree(v51, v52);
                }
                if (v35) {
                  CFRelease(*(CFTypeRef *)(v35 - 8));
                }
                if (WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v95 + 48)))
                {
                  uint64_t v41 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v95 + 48));
                  if (((*(uint64_t (**)(uint64_t))(*(void *)v41 + 32))(v41) & 1) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1986B19D0);
                  }
                  WebKit::RemoteScrollingCoordinator::buildTransaction(v41, (uint64_t *)&v101);
                  char v42 = v101;
                  char v43 = v102;
                  LODWORD(v104) = v103[0];
                  *(_DWORD *)((char *)&v104 + 3) = *(_DWORD *)((char *)v103 + 3);
                }
                else
                {
                  char v43 = 0;
                  char v42 = 0;
                }
                uint64_t v45 = *(v21 - 1);
                uint64_t v44 = *v21;
                WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)v105, (uint64_t)&v112);
                __int16 v109 = v42;
                LOBYTE(v110) = v43;
                *(_DWORD *)((char *)&v110 + 1) = v104;
                DWORD1(v110) = *(_DWORD *)((char *)&v104 + 3);
                *((void *)&v110 + 1) = v45;
                uint64_t v111 = v44;
                WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)&v112, v46);
                WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(v19, (uint64_t)v105);
                uint64_t v48 = v109;
                __int16 v109 = 0;
                *(void *)(v19 + 800) = v48;
                long long v49 = v110;
                *(void *)(v19 + 824) = v111;
                *(_OWORD *)(v19 + 808) = v49;
                HIDWORD(v97) = v28;
                uint64_t v50 = (uint64_t)v109;
                __int16 v109 = 0;
                uint64_t v3 = v95;
                if (v50) {
                  WebCore::ScrollingStateTree::operator delete(v50, 0x50uLL);
                }
                WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)v105, v47);
                v21 += 5;
                v19 += 832;
                ++v28;
                v22 -= 40;
              }
              while (v22);
              uint64_t v19 = (uint64_t)v96;
              uint64_t v2 = v91;
              char v6 = v90;
              uint64_t v15 = v89;
            }
          }
          else
          {
            uint64_t v19 = 0;
          }
          if (HIDWORD(v97))
          {
            uint64_t v53 = 832 * HIDWORD(v97);
            do
            {
              WebKit::RemoteLayerBackingStoreCollection::willCommitLayerTree(v15, (WebKit::RemoteLayerTreeTransaction *)v19);
              v19 += 832;
              v53 -= 832;
            }
            while (v53);
          }
          uint64_t v54 = *((void *)this + 4);
          uint64_t v55 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v55 = 1130;
          *((void *)v55 + 1) = v54;
          *((void *)v55 + 66) = (char *)v55 + 16;
          *((void *)v55 + 67) = 512;
          *((void *)v55 + 68) = 0;
          *((void *)v55 + 70) = 0;
          *((void *)v55 + 69) = 0;
          IPC::Encoder::encodeHeader(v55);
          unint64_t v101 = v55;
          IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v55, HIDWORD(v97));
          if (HIDWORD(v97))
          {
            uint64_t v56 = v96;
            do
            {
              IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction,void>::encode(v55, (uint64_t)v56);
              uint64_t v57 = (uint64_t)v56 + 800;
              IPC::ArgumentCoder<WebKit::RemoteScrollingCoordinatorTransaction,void>::encode(v55, v57);
              uint64_t v56 = (WebKit::RemoteLayerTreeTransaction *)(v57 + 32);
            }
            while (v56 != (WebKit::RemoteLayerTreeTransaction *)((char *)v96 + 832 * HIDWORD(v97)));
            *(void *)&long long v113 = 0;
            uint64_t v112 = 0;
            uint64_t v58 = v96;
            uint64_t v59 = (WebKit::RemoteLayerTreeTransaction *)((char *)v96 + 832 * HIDWORD(v97));
            do
            {
              WebKit::RemoteLayerBackingStoreCollection::didFlushLayers(v15, v58, (uint64_t)v105);
              uint64_t v61 = HIDWORD(v105[1]);
              unint64_t v62 = HIDWORD(v105[1]) + (unint64_t)DWORD1(v113);
              if (v62 > v113)
              {
                unint64_t v63 = v113 + ((unint64_t)v113 >> 2);
                if (v63 >= 0x10) {
                  unint64_t v64 = v63 + 1;
                }
                else {
                  unint64_t v64 = 16;
                }
                if (v64 <= v62) {
                  unint64_t v65 = HIDWORD(v105[1]) + (unint64_t)DWORD1(v113);
                }
                else {
                  unint64_t v65 = v64;
                }
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v112, v65);
                uint64_t v61 = HIDWORD(v105[1]);
              }
              if (v61)
              {
                uint64_t v66 = v105[0];
                unsigned int v67 = DWORD1(v113);
                uint64_t v68 = 8 * v61;
                do
                {
                  uint64_t v69 = v112;
                  uint64_t v70 = *(void *)v66;
                  *(void *)uint64_t v66 = 0;
                  uint64_t v66 = (WTF *)((char *)v66 + 8);
                  *(void *)(v69 + 8 * v67++) = v70;
                  v68 -= 8;
                }
                while (v68);
                DWORD1(v113) = v67;
              }
              WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v105, v60);
              uint64_t v58 = (WebKit::RemoteLayerTreeTransaction *)((char *)v58 + 832);
            }
            while (v58 != v59);
            if (DWORD1(v113))
            {
              char v72 = *(uint64_t **)(v95 + 2400);
              if (v72)
              {
                WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(v72 + 9, v71);
                v72[15] = 0;
                ++v72[17];
              }
            }
          }
          else
          {
            *(void *)&long long v113 = 0;
            uint64_t v112 = 0;
          }
          if (atomic_exchange((atomic_uchar *volatile)(*((void *)this + 30) + 16), 1u))
          {
            __break(0xC471u);
            JUMPOUT(0x1986B19B0);
          }
          uint64_t v73 = *(void *)(v95 + 40);
          uint64_t v75 = *((void *)this + 29);
          uint64_t v74 = (atomic_uint *)*((void *)this + 30);
          if (v74) {
            atomic_fetch_add(v74, 1u);
          }
          uint64_t v76 = v101;
          unint64_t v101 = 0;
          v105[0] = (WTF *)v74;
          v105[1] = v76;
          uint64_t v106 = v112;
          unsigned int v77 = v113;
          LODWORD(v76) = DWORD1(v113);
          uint64_t v112 = 0;
          *(void *)&long long v113 = 0;
          unint64_t v107 = __PAIR64__(v76, v77);
          uint64_t v108 = v73;
          uint64_t v78 = WTF::fastMalloc((WTF *)0x30);
          *(void *)uint64_t v78 = &unk_1EE9BA578;
          *(WTF **)(v78 + 8) = v105[0];
          uint64_t v79 = v105[1];
          v105[0] = 0;
          v105[1] = 0;
          *(void *)(v78 + 16) = v79;
          *(void *)(v78 + 24) = v106;
          unint64_t v80 = v107;
          uint64_t v106 = 0;
          unint64_t v107 = 0;
          *(void *)(v78 + 32) = v80;
          *(void *)(v78 + 40) = v108;
          uint64_t v104 = v78;
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v75 + 32))(v75, &v104);
          uint64_t v82 = v104;
          uint64_t v104 = 0;
          if (v82) {
            (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
          }
          WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v106, v81);
          unsigned __int8 v84 = v105[1];
          v105[1] = 0;
          if (v84)
          {
            IPC::Encoder::~Encoder(v84, v83);
            WTF::fastFree(v87, v88);
          }
          unint64_t v85 = (atomic_uchar ***)v105[0];
          v105[0] = 0;
          if (v85) {
            WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(v85, v83);
          }
          WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v83);
          WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v96, v86);
          *((unsigned char *)this + 226) = v6;
        }
      }
    }
    if (v2) {
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_1986B1A44(_Unwind_Exception *a1)
{
  if (v2[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  else {
    --v2[2];
  }
  *(unsigned char *)(v1 + 226) = v4;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    char v6 = *(WTF **)a1;
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *(void *)v6;
      *(void *)char v6 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      char v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  char v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::didReceiveMessage(WebKit::RemoteLayerTreeDrawingAreaProxy *this, IPC::Connection *a2, unsigned int **a3)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  switch(*((_WORD *)a3 + 25))
  {
    case 0x469:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a3, (uint64_t)v110);
      if (!v111
        || (IPC::Decoder::decode<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>((uint64_t *)a3, &v112),
            !v116))
      {
        LOBYTE(v117) = 0;
        LOBYTE(v123) = 0;
        goto LABEL_123;
      }
      unint64_t v7 = (unint64_t)a3[1];
      uint64_t v8 = *a3;
      unint64_t v9 = (((unint64_t)a3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*a3;
      if (v7 < v9 || v7 - v9 <= 7)
      {
        float v100 = 0;
        unint64_t v101 = 0;
        *a3 = 0;
        a3[1] = 0;
        char v6 = a3[3];
        if (v6) {
          goto LABEL_186;
        }
        goto LABEL_164;
      }
      char v11 = (void *)((char *)v8 + v9);
      a3[2] = (unsigned int *)(v11 + 1);
      if (!v8)
      {
        float v100 = (unsigned int *)v7;
        unint64_t v101 = 0;
        goto LABEL_164;
      }
      uint64_t v12 = *v11;
      if ((unint64_t)(*v11 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_165;
      }
      if (v111)
      {
        long long v117 = *(_OWORD *)v110;
        LOBYTE(v118) = 0;
        LODWORD(v122) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)&v118, (uint64_t)&v112);
        *((void *)&v122 + 1) = v12;
        int v13 = 1;
        goto LABEL_13;
      }
      goto LABEL_185;
    case 0x46A:
      unint64_t v22 = (unint64_t)a3[1];
      uint64_t v23 = *a3;
      unint64_t v24 = (((unint64_t)a3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*a3;
      if (v22 < v24 || v22 - v24 <= 7)
      {
        uint64_t v82 = 0;
        long long v83 = 0;
        *a3 = 0;
        a3[1] = 0;
        unsigned __int8 v84 = a3[3];
        if (v84)
        {
          if (v22)
          {
            (*(void (**)(unsigned int *, unsigned int *, unint64_t))(*(void *)v84 + 16))(v84, v23, v22);
            long long v83 = *a3;
            uint64_t v82 = a3[1];
          }
          else
          {
            uint64_t v82 = 0;
            long long v83 = 0;
          }
        }
        goto LABEL_140;
      }
      uint64_t v26 = (unint64_t *)((char *)v23 + v24);
      a3[2] = (unsigned int *)(v26 + 1);
      if (!v23)
      {
        uint64_t v82 = (unsigned int *)v22;
        long long v83 = 0;
LABEL_140:
        *a3 = 0;
        a3[1] = 0;
        unint64_t v85 = a3[3];
        if (v85 && v82) {
          (*(void (**)(unsigned int *, unsigned int *))(*(void *)v85 + 16))(v85, v83);
        }
LABEL_154:
        uint64_t v94 = *a3;
        uint64_t v95 = a3[1];
        *a3 = 0;
        a3[1] = 0;
        char v96 = a3[3];
        if (v96 && v95) {
          (*(void (**)(unsigned int *, unsigned int *))(*(void *)v96 + 16))(v96, v94);
        }
LABEL_155:
        uint64_t v97 = *a3;
        uint64_t v98 = a3[1];
        *a3 = 0;
        a3[1] = 0;
        float v99 = a3[3];
        if (v99 && v98) {
          (*(void (**)(unsigned int *, unsigned int *))(*(void *)v99 + 16))(v99, v97);
        }
        return;
      }
      unint64_t v27 = *v26;
      v110[0] = 0;
      v110[1] = 0;
      if (v27 >= 0x4EC)
      {
        while (1)
        {
          IPC::Decoder::decode<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>((uint64_t)&v117, (IPC::Decoder *)a3);
          if (!v131) {
            break;
          }
          int v86 = HIDWORD(v110[1]);
          if (HIDWORD(v110[1]) == LODWORD(v110[1]))
          {
            WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>((uint64_t)v110, (unint64_t)&v117);
          }
          else
          {
            uint64_t v88 = WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)v110[0] + 832 * HIDWORD(v110[1]), (uint64_t)&v117);
            uint64_t v89 = v128;
            uint64_t v128 = 0;
            *(void *)(v88 + 800) = v89;
            uint64_t v90 = v130;
            *(_OWORD *)(v88 + 808) = v129;
            *(void *)(v88 + 824) = v90;
            HIDWORD(v110[1]) = v86 + 1;
          }
          std::__optional_destruct_base<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::RemoteLayerTreeTransaction *)&v117, v87);
          if (!--v27)
          {
            unsigned int v36 = v110[1];
            unsigned int v35 = HIDWORD(v110[1]);
            uint64_t v34 = v110[0];
            if (LODWORD(v110[1]) > HIDWORD(v110[1]))
            {
              uint64_t v91 = v110[0];
              if (HIDWORD(v110[1]))
              {
                if (HIDWORD(v110[1]) >= 0x4EC4ED)
                {
                  __break(0xC471u);
                  return;
                }
                uint64_t v92 = WTF::fastMalloc((WTF *)(832 * HIDWORD(v110[1])));
                unsigned int v36 = 832 * v35 / 0x340;
                if ((WTF *)v92 == v34)
                {
                  uint64_t v91 = v34;
                }
                else
                {
                  uint64_t v91 = (WTF *)v92;
                  WTF::VectorMover<false,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::move((uint64_t)v34, (uint64_t)v34 + 832 * v35, v92);
                }
              }
              if (v34)
              {
                if (v91 == v34)
                {
                  unsigned int v36 = 0;
                  uint64_t v91 = 0;
                  v110[0] = 0;
                  LODWORD(v110[1]) = 0;
                }
                WTF::fastFree(v34, a2);
              }
              uint64_t v34 = v91;
            }
            goto LABEL_46;
          }
        }
LABEL_153:
        std::__optional_destruct_base<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::RemoteLayerTreeTransaction *)&v117, v28);
        WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v110, v93);
        goto LABEL_154;
      }
      if (v27)
      {
        LODWORD(v110[1]) = 832 * (int)v27 / 0x340u;
        v110[0] = (WTF *)WTF::fastMalloc((WTF *)(832 * v27));
        do
        {
          IPC::Decoder::decode<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>((uint64_t)&v117, (IPC::Decoder *)a3);
          if (!v131) {
            goto LABEL_153;
          }
          int v29 = HIDWORD(v110[1]);
          if (HIDWORD(v110[1]) == LODWORD(v110[1]))
          {
            WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>((uint64_t)v110, (unint64_t)&v117);
          }
          else
          {
            uint64_t v31 = WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)v110[0] + 832 * HIDWORD(v110[1]), (uint64_t)&v117);
            uint64_t v32 = v128;
            uint64_t v128 = 0;
            *(void *)(v31 + 800) = v32;
            uint64_t v33 = v130;
            *(_OWORD *)(v31 + 808) = v129;
            *(void *)(v31 + 824) = v33;
            HIDWORD(v110[1]) = v29 + 1;
          }
          std::__optional_destruct_base<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,false>::~__optional_destruct_base[abi:sn180100]((WebKit::RemoteLayerTreeTransaction *)&v117, v30);
          --v27;
        }
        while (v27);
        uint64_t v34 = v110[0];
        unsigned int v36 = v110[1];
        unsigned int v35 = HIDWORD(v110[1]);
      }
      else
      {
        unsigned int v35 = 0;
        unsigned int v36 = 0;
        uint64_t v34 = 0;
      }
LABEL_46:
      v110[0] = 0;
      v110[1] = 0;
      uint64_t v112 = v34;
      unint64_t v113 = __PAIR64__(v35, v36);
      char v114 = 1;
      WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v110, a2);
      unint64_t v37 = (unint64_t)a3[1];
      long long v38 = (WTF *)*a3;
      unint64_t v39 = (((unint64_t)a3[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*a3;
      if (v37 < v39 || v37 - v39 <= 3)
      {
        uint64_t v104 = 0;
        BOOL v105 = 0;
        *a3 = 0;
        a3[1] = 0;
        uint64_t v106 = a3[3];
        if (v106)
        {
          if (v37)
          {
            (*(void (**)(unsigned int *))(*(void *)v106 + 16))(v106);
            BOOL v105 = *a3;
            uint64_t v104 = a3[1];
          }
          else
          {
            uint64_t v104 = 0;
            BOOL v105 = 0;
          }
        }
        goto LABEL_168;
      }
      uint64_t v40 = (_DWORD *)((char *)v38 + v39);
      a3[2] = v40 + 1;
      if (!v38)
      {
        uint64_t v104 = (unsigned int *)v37;
        BOOL v105 = 0;
LABEL_168:
        *a3 = 0;
        a3[1] = 0;
        unint64_t v107 = a3[3];
        if (v107 && v104) {
          (*(void (**)(unsigned int *, unsigned int *))(*(void *)v107 + 16))(v107, v105);
        }
        goto LABEL_130;
      }
      int v41 = *v40;
      uint64_t v108 = 0;
      if (!v41)
      {
        uint64_t v77 = 0;
LABEL_135:
        uint64_t v112 = 0;
        unint64_t v113 = 0;
        *(void *)&long long v117 = v34;
        *((void *)&v117 + 1) = __PAIR64__(v35, v36);
        uint64_t v118 = v77;
        char v119 = 1;
        WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v38);
        WebKit::RemoteLayerTreeDrawingAreaProxy::commitLayerTree((uint64_t)this, a2, (uint64_t *)&v117, &v118);
        if (v119)
        {
          if (v118) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v118, v81);
          }
          WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v117, v81);
        }
        return;
      }
      for (int i = 0; i != v41; ++i)
      {
        char v6 = (unsigned int *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a3);
        if (!(_BYTE)v38)
        {
LABEL_128:
          if (v108) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v108, v38);
          }
LABEL_130:
          uint64_t v78 = *a3;
          uint64_t v79 = a3[1];
          *a3 = 0;
          a3[1] = 0;
          unint64_t v80 = a3[3];
          if (v80 && v79) {
            (*(void (**)(unsigned int *, unsigned int *))(*(void *)v80 + 16))(v80, v78);
          }
          if (v114) {
            WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v78);
          }
          goto LABEL_155;
        }
        char v43 = v6;
        unint64_t v7 = (unint64_t)a3[1];
        long long v38 = (WTF *)*a3;
        unint64_t v44 = (char *)a3[2] - (char *)*a3;
        if (v7 <= v44)
        {
          *a3 = 0;
          a3[1] = 0;
          uint64_t v68 = a3[3];
          if (!v68 || !v7) {
            goto LABEL_102;
          }
          (*(void (**)(unsigned int *))(*(void *)v68 + 16))(v68);
          long long v38 = (WTF *)*a3;
          unint64_t v7 = (unint64_t)a3[1];
LABEL_109:
          char v72 = a3[3];
          *a3 = 0;
          a3[1] = 0;
          if (v72 && v7)
          {
            (*(void (**)(unsigned int *, WTF *))(*(void *)v72 + 16))(v72, v38);
            long long v38 = (WTF *)*a3;
            unint64_t v7 = (unint64_t)a3[1];
LABEL_112:
            uint64_t v73 = a3[3];
            *a3 = 0;
            a3[1] = 0;
            if (v73 && v7) {
              (*(void (**)(unsigned int *, WTF *))(*(void *)v73 + 16))(v73, v38);
            }
          }
          else
          {
LABEL_102:
            *a3 = 0;
            a3[1] = 0;
          }
LABEL_104:
          LOBYTE(v110[0]) = 0;
          LOBYTE(v110[1]) = 0;
          long long v38 = (WTF *)*a3;
          unint64_t v7 = (unint64_t)a3[1];
          *a3 = 0;
          a3[1] = 0;
          char v6 = a3[3];
          if (v6 && v7) {
            char v6 = (unsigned int *)(*(uint64_t (**)(unsigned int *, WTF *))(*(void *)v6 + 16))(v6, v38);
          }
          goto LABEL_63;
        }
        uint64_t v45 = (unsigned __int8 *)v38 + v44;
        a3[2] = (unsigned int *)(v45 + 1);
        if (!v38) {
          goto LABEL_109;
        }
        unsigned int v46 = *v45;
        if (v46 >= 2) {
          goto LABEL_112;
        }
        if (!v46)
        {
          v110[0] = 0;
          LOBYTE(v110[1]) = 1;
          goto LABEL_66;
        }
        IPC::ArgumentCoder<WebKit::BufferSetBackendHandle,void>::decode((uint64_t *)a3, (uint64_t)&v117);
        if (!v127)
        {
          uint64_t v69 = *a3;
          uint64_t v70 = a3[1];
          *a3 = 0;
          a3[1] = 0;
          uint64_t v71 = a3[3];
          if (!v71) {
            goto LABEL_104;
          }
          if (!v70) {
            goto LABEL_104;
          }
          (*(void (**)(unsigned int *, unsigned int *))(*(void *)v71 + 16))(v71, v69);
          if (!v127) {
            goto LABEL_104;
          }
        }
        char v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x98);
        uint64_t v47 = v6;
        *(unsigned char *)char v6 = 0;
        *((unsigned char *)v6 + 72) = 0;
        if (v121)
        {
          v6[16] = -1;
          char v6 = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v6, (uint64_t)&v117);
          *((unsigned char *)v47 + 72) = 1;
          BOOL v48 = v121 == 0;
        }
        else
        {
          BOOL v48 = 1;
        }
        *((_OWORD *)v47 + 5) = v122;
        long long v49 = v123;
        long long v50 = v124;
        long long v51 = v125;
        *((unsigned char *)v47 + 144) = v126;
        *((_OWORD *)v47 + 7) = v50;
        *((_OWORD *)v47 + 8) = v51;
        *((_OWORD *)v47 + 6) = v49;
        v110[0] = (WTF *)v47;
        LOBYTE(v110[1]) = 1;
        if (v127 && !v48 && v120 != -1) {
          char v6 = (unsigned int *)off_1EE9BA608[v120]((int)&v109, (WTF::MachSendRight *)&v117);
        }
LABEL_63:
        if (!LOBYTE(v110[1])) {
          goto LABEL_128;
        }
LABEL_66:
        if ((unint64_t)v43 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_88;
        }
        uint64_t v52 = v108;
        if (v108
          || (char v6 = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(&v108, 0), (v52 = v108) != 0))
        {
          int v53 = *(_DWORD *)(v52 - 8);
        }
        else
        {
          int v53 = 0;
        }
        unint64_t v54 = ((unint64_t)v43 + ~((void)v43 << 32)) ^ (((unint64_t)v43 + ~((void)v43 << 32)) >> 22);
        unint64_t v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
        unint64_t v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
        unsigned int v57 = v53 & ((v56 >> 31) ^ v56);
        uint64_t v58 = (void *)(v52 + 16 * v57);
        uint64_t v59 = (WTF *)*v58;
        if (*v58)
        {
          char v60 = 0;
          int v61 = 1;
          while (v59 != (WTF *)v43)
          {
            if (v59 == (WTF *)-1) {
              char v60 = v58;
            }
            unsigned int v57 = (v57 + v61) & v53;
            uint64_t v58 = (void *)(v52 + 16 * v57);
            uint64_t v59 = (WTF *)*v58;
            ++v61;
            if (!*v58)
            {
              if (v60)
              {
                *char v60 = 0;
                v60[1] = 0;
                --*(_DWORD *)(v52 - 16);
                uint64_t v58 = v60;
              }
              goto LABEL_78;
            }
          }
LABEL_88:
          char v67 = 0;
          goto LABEL_89;
        }
LABEL_78:
        *uint64_t v58 = v43;
        char v6 = (unsigned int *)(v58 + 1);
        long long v38 = (WTF *)v58[1];
        unint64_t v62 = v110[0];
        v110[0] = 0;
        v58[1] = v62;
        if (v38) {
          char v6 = (unsigned int *)std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v6, v38);
        }
        if (v108) {
          int v63 = *(_DWORD *)(v108 - 12) + 1;
        }
        else {
          int v63 = 1;
        }
        *(_DWORD *)(v108 - 12) = v63;
        if (v108) {
          int v64 = *(_DWORD *)(v108 - 12);
        }
        else {
          int v64 = 0;
        }
        uint64_t v65 = (*(_DWORD *)(v108 - 16) + v64);
        unint64_t v66 = *(unsigned int *)(v108 - 4);
        if (v66 > 0x400)
        {
          if (v66 > 2 * v65) {
            goto LABEL_87;
          }
LABEL_86:
          char v6 = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(&v108, (WTF **)v58);
          goto LABEL_87;
        }
        if (3 * v66 <= 4 * v65) {
          goto LABEL_86;
        }
LABEL_87:
        char v67 = 1;
LABEL_89:
        if (LOBYTE(v110[1]) && (long long v38 = v110[0], v110[0] = 0, v38))
        {
          char v6 = (unsigned int *)std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v110, v38);
          if ((v67 & 1) == 0) {
            goto LABEL_128;
          }
        }
        else if ((v67 & 1) == 0)
        {
          goto LABEL_128;
        }
      }
      if (v114)
      {
        uint64_t v77 = v108;
        uint64_t v34 = v112;
        unsigned int v36 = v113;
        unsigned int v35 = HIDWORD(v113);
        goto LABEL_135;
      }
LABEL_185:
      while (1)
      {
        __break(1u);
LABEL_186:
        if (v7)
        {
          (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
          unint64_t v101 = *a3;
          float v100 = a3[1];
        }
        else
        {
          float v100 = 0;
          unint64_t v101 = 0;
        }
LABEL_164:
        unint64_t v7 = 0;
        uint64_t v8 = 0;
        *a3 = 0;
        a3[1] = 0;
        char v102 = a3[3];
        if (!v102) {
          break;
        }
        if (!v100)
        {
          unint64_t v7 = 0;
          uint64_t v8 = 0;
          break;
        }
        char v6 = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *, unsigned int *))(*(void *)v102 + 16))(v102, v101, v100);
        if (!*a3)
        {
          uint64_t v8 = 0;
          unint64_t v7 = (unint64_t)a3[1];
          break;
        }
      }
LABEL_165:
      *a3 = 0;
      a3[1] = 0;
      uint64_t v103 = a3[3];
      if (v103 && v7) {
        (*(void (**)(unsigned int *, unsigned int *))(*(void *)v103 + 16))(v103, v8);
      }
      int v13 = 0;
      LOBYTE(v117) = 0;
LABEL_13:
      LOBYTE(v123) = v13;
      if (v116 && v115 != -1)
      {
        off_1EE9BA608[v115]((int)&v108, (WTF::MachSendRight *)&v112);
        int v13 = v123;
      }
      if (!v13)
      {
LABEL_123:
        uint64_t v74 = *a3;
        uint64_t v75 = a3[1];
        *a3 = 0;
        a3[1] = 0;
        uint64_t v76 = a3[3];
        if (!v76) {
          return;
        }
        if (!v75) {
          return;
        }
        (*(void (**)(unsigned int *, unsigned int *))(*(void *)v76 + 16))(v76, v74);
        if (!(_BYTE)v123) {
          return;
        }
      }
      WebKit::RemoteLayerTreeDrawingAreaProxy::asyncSetLayerContents((uint64_t)this, v117, *((uint64_t *)&v117 + 1), (WebCore::IOSurface *)&v118, (void *)&v122 + 1);
      if ((_BYTE)v123)
      {
        if (v122 != -1) {
          off_1EE9BA608[v122]((int)&v112, (WTF::MachSendRight *)&v118);
        }
      }
      return;
    case 0x46B:
      unint64_t v18 = IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>>((uint64_t *)a3);
      if (v19)
      {
        WebKit::RemoteLayerTreeDrawingAreaProxy::commitLayerTreeNotTriggered(this, a2, v18);
      }
      return;
    case 0x46C:
      uint64_t v20 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v20 & 0xFF00000000) != 0)
      {
        uint64_t v21 = *(void (**)(WebKit::RemoteLayerTreeDrawingAreaProxy *, uint64_t))(*(void *)this + 392);
        v21(this, v20);
      }
      return;
    case 0x46D:
      uint64_t v14 = IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>>((uint64_t *)a3);
      if (v15)
      {
        unint64_t v16 = v14;
        uint64_t v17 = WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection(this, a2);
        if (*(void *)(v17 + 8) < v16) {
          *(void *)(v17 + 16) = v16;
        }
      }
      return;
    default:
      WebKit::DrawingAreaProxy::didReceiveMessage(this, a2, (IPC::Decoder *)a3);
      return;
  }
}

uint64_t WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::destruct(*(WebKit::RemoteLayerTreeTransaction **)a1, (WebKit::RemoteLayerTreeTransaction *)(*(void *)a1 + 832 * v3));
  }
  char v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::destruct(WebKit::RemoteLayerTreeTransaction *this, WebKit::RemoteLayerTreeTransaction *a2)
{
  if (this != a2)
  {
    unsigned int v3 = this;
    do
    {
      uint64_t v4 = *((void *)v3 + 100);
      *((void *)v3 + 100) = 0;
      if (v4) {
        WebCore::ScrollingStateTree::operator delete(v4, 0x50uLL);
      }
      WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction(v3, a2);
      unsigned int v3 = (WebKit::RemoteLayerTreeTransaction *)((char *)v3 + 832);
    }
    while (v3 != a2);
  }
}

unsigned int **WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t a1, void *a2)
{
  double result = *(unsigned int ***)a1;
  if (result)
  {
    *(void *)a1 = 0;
    double result = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(result, a2);
    uint64_t v4 = *(unsigned int ***)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (v4)
    {
      LODWORD(v4) = *((_DWORD *)v4 - 3);
      if (v4 > 0x7FFFFFFE) {
        LODWORD(v4) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  *(_DWORD *)(a1 + 12) = 2 * v4;
  return result;
}

void WebCore::ScrollingStateTree::operator delete(uint64_t a1, size_t a2)
{
  unsigned int v3 = (_DWORD *)MEMORY[0x199734630]();
  if (*v3)
  {
    bzero(v3, a2);
  }
  else
  {
    WTF::fastFree((WTF *)v3, v4);
  }
}

uint64_t WebKit::RemoteScrollingCoordinator::isRemoteScrollingCoordinator(WebKit::RemoteScrollingCoordinator *this)
{
  return 1;
}

uint64_t IPC::Decoder::decode<std::tuple<float>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<float>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF00000000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<float>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    uint64_t v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2) {
      return *v5 | 0x100000000;
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  uint64_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11)
  {
    if (v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    return 0;
  }
  return v6;
}

WebKit::RemoteLayerTreeTransaction *std::__optional_destruct_base<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,false>::~__optional_destruct_base[abi:sn180100](WebKit::RemoteLayerTreeTransaction *this, void *a2)
{
  if (*((unsigned char *)this + 832))
  {
    uint64_t v3 = *((void *)this + 100);
    *((void *)this + 100) = 0;
    if (v3) {
      WebCore::ScrollingStateTree::operator delete(v3, 0x50uLL);
    }
    WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction(this, a2);
  }
  return this;
}

uint64_t WebKit::GraphicsLayerCARemote::isGraphicsLayerCARemote(WebKit::GraphicsLayerCARemote *this)
{
  return 1;
}

IPC::Encoder *WebKit::WebPage::flushPendingIntrinsicContentSizeUpdate(IPC::Encoder *this)
{
  int v1 = *((_DWORD *)this + 534);
  if ((_BYTE)v1)
  {
    uint64_t v2 = *((void *)this + 266);
    *((unsigned char *)this + 2136) = 0;
    uint64_t v3 = v2;
    int v4 = v1;
    return WebKit::WebPage::updateIntrinsicContentSizeIfNeeded(this, (const WebCore::IntSize *)&v3);
  }
  return this;
}

uint64_t WebKit::WebPage::flushDeferredDidReceiveMouseEvent(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 860);
  if ((v1 & 0xFF000000) != 0)
  {
    *(unsigned char *)(this + 863) = 0;
    if ((v1 & 0xFF00) != 0)
    {
      v2[0] = 0;
      v2[24] = 0;
      v3[0] = v1;
      v3[1] = (*(void *)&v1 & 0xFF0000) != 0;
      int v4 = v2;
      return IPC::MessageSender::send<Messages::WebPageProxy::DidReceiveEvent>(this + 32, (uint64_t)v3);
    }
    else
    {
      __break(1u);
    }
  }
  return this;
}

uint64_t WebKit::WebPage::finalizeRenderingUpdate(uint64_t a1)
{
  WebCore::Page::finalizeRenderingUpdate();
  uint64_t v2 = *(void **)(a1 + 2400);
  if (v2) {
    WebKit::RemoteRenderingBackendProxy::finalizeRenderingUpdate(v2);
  }

  return WebKit::WebPage::flushDeferredDidReceiveMouseEvent(a1);
}

void WebKit::WebPage::willCommitLayerTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v37[17] = *MEMORY[0x1E4F143B8];
  {
    uint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v30);
  }
  uint64_t v6 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a3, a4);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        if (!*(unsigned char *)(v9 + 144))
        {
          uint64_t v10 = (unsigned int *)(v9 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
          uint64_t v11 = *(void *)(v9 + 288);
          if (v11)
          {
            ++*(_DWORD *)(v11 + 8);
            uint64_t v12 = *(void *)(v9 + 296);
            if (v12)
            {
              uint64_t v13 = *(void *)(v12 + 3480);
              if (v13) {
                *(void *)(a2 + 784) = *(void *)(v13 + 8);
              }
            }
            *(void *)(a2 + 128) = WebCore::ScrollView::contentsSize((WebCore::ScrollView *)v11);
            *(void *)(a2 + 136) = *(void *)(v11 + 96);
            uint64_t v14 = *(float **)(a1 + 48);
            *(double *)(a2 + 200) = v14[89];
            *(void *)(a2 + 240) = WebCore::Page::renderTreeSize((WebCore::Page *)v14);
            WebCore::Page::themeColor(&v33, *(WebCore::Page **)(a1 + 48));
            WebCore::Color::operator=();
            if ((v33 & 0x8000000000000) != 0)
            {
              unint64_t v27 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v27);
                WTF::fastFree((WTF *)v27, v15);
              }
            }
            WebCore::Page::pageExtendedBackgroundColor(&v32, *(WebCore::Page **)(a1 + 48));
            WebCore::Color::operator=();
            if ((v32 & 0x8000000000000) != 0)
            {
              int v28 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v28);
                WTF::fastFree((WTF *)v28, v16);
              }
            }
            WebCore::Page::sampledPageTopColor(&v31, *(WebCore::Page **)(a1 + 48));
            WebCore::Color::operator=();
            if ((v31 & 0x8000000000000) != 0)
            {
              int v29 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
              if (atomic_fetch_add((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v29);
                WTF::fastFree((WTF *)v29, v17);
              }
            }
            *(void *)(a2 + 144) = WebCore::LocalFrameView::baseLayoutViewportSize((WebCore::LocalFrameView *)v11);
            *(void *)(a2 + 152) = WebCore::LocalFrameView::minStableLayoutViewportOrigin((WebCore::LocalFrameView *)v11);
            *(void *)(a2 + 160) = WebCore::LocalFrameView::maxStableLayoutViewportOrigin((WebCore::LocalFrameView *)v11);
            *(unsigned char *)(a2 + 266) = *(unsigned char *)(a1 + 1282);
            WebCore::ViewportConfiguration::minimumScale((WebCore::ViewportConfiguration *)(a1 + 952));
            *(void *)(a2 + 208) = v18;
            if (*(unsigned char *)(a1 + 1169))
            {
              WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor(a1 + 952);
              double v20 = v19 * 5.0;
            }
            else
            {
              double v20 = *(double *)(a1 + 992);
            }
            *(double *)(a2 + 216) = v20;
            WebCore::ViewportConfiguration::initialScale((WebCore::ViewportConfiguration *)(a1 + 952));
            *(void *)(a2 + 224) = v21;
            *(double *)(a2 + 232) = *(float *)(a1 + 1092);
            *(unsigned char *)(a2 + 269) = *(unsigned char *)(a1 + 1125);
            *(unsigned char *)(a2 + 270) = *(unsigned char *)(a1 + 1088) == 2;
            *(unsigned char *)(a2 + 268) = *(unsigned char *)(a1 + 1002);
            *(unsigned char *)(a2 + 271) = *(unsigned char *)(a1 + 1285);
            *(unsigned char *)(a2 + 267) = WebCore::ViewportConfiguration::allowsUserScaling((WebCore::ViewportConfiguration *)(a1 + 952));
            if (*(unsigned char *)(a1 + 1552))
            {
              *(void *)(a2 + 768) = *(void *)(a1 + 1544);
              *(unsigned char *)(a2 + 776) = 1;
              if (*(unsigned char *)(a1 + 1552)) {
                *(unsigned char *)(a1 + 1552) = 0;
              }
            }
            double v22 = *(double *)(a2 + 200);
            if (*(double *)(a1 + 1560) != v22)
            {
              *(double *)(a1 + 1560) = v22;
              *(void *)(a1 + 1568) = *(void *)(a2 + 248);
            }
            *(void *)(a2 + 168) = WebCore::ScrollableArea::visibleContentRect();
            *(_WORD *)(a1 + 945) = 0;
            *(unsigned char *)(a1 + 947) = 0;
            if (*(unsigned char *)(a1 + 948) || *(unsigned char *)(a1 + 949))
            {
              WebKit::WebPage::editorState(a1, 0, (uint64_t)v34);
              int v23 = *(unsigned __int8 *)(a2 + 752);
              *(_OWORD *)(a2 + 272) = v34[0];
              *(_DWORD *)(a2 + 287) = *(_DWORD *)((char *)v34 + 15);
              unint64_t v24 = (WebKit::EditorState::PostLayoutData *)(a2 + 304);
              if (v23)
              {
                std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::PostLayoutData,false> const&>(v24, (unsigned __int8 *)v35);
                std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebKit::EditorState::VisualData,false> const&>(a2 + 624, v37);
              }
              else
              {
                *(unsigned char *)(a2 + 304) = 0;
                *(unsigned char *)(a2 + 608) = 0;
                if (v36)
                {
                  std::construct_at[abi:sn180100]<WebKit::EditorState::PostLayoutData,WebKit::EditorState::PostLayoutData const&,WebKit::EditorState::PostLayoutData*>((uint64_t)v24, v35);
                  *(unsigned char *)(a2 + 608) = 1;
                }
                std::__optional_move_base<WebKit::EditorState::VisualData,false>::__optional_move_base[abi:sn180100](a2 + 624, v37);
                *(unsigned char *)(a2 + 752) = 1;
              }
              std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, v25);
              if (v36) {
                WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v35, v26);
              }
              *(_WORD *)(a1 + 948) = 0;
            }
            if (*(_DWORD *)(v11 + 8) == 1) {
              (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
            }
            else {
              --*(_DWORD *)(v11 + 8);
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

_DWORD *WebKit::WebPage::updateRendering(WebKit::WebPage *this)
{
  WebCore::Page::updateRendering(*((WebCore::Page **)this + 6));
  WebKit::FindController::redraw(*((void *)this + 56));
  uint64_t v2 = (_DWORD *)*((void *)this + 57);

  return WebKit::WebFoundTextRangeController::redraw(v2);
}

WTF *WebKit::RemoteLayerBackingStoreCollection::willCommitLayerTree(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerTreeTransaction *a2)
{
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  int v4 = (uint64_t *)((char *)this + 24);
  uint64_t v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v25, v4, v5, v6);
  uint64_t v7 = *v4;
  if (*v4)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    uint64_t v9 = (uint64_t *)(v7 + 8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v23, v4, v9, (uint64_t *)(v7 + 8 * v8));
  uint64_t v11 = v26;
  if (v26 == v24)
  {
    int v15 = 0;
LABEL_8:
    uint64_t v16 = 0;
    goto LABEL_9;
  }
  uint64_t v12 = (char *)this + 56;
  do
  {
    uint64_t v13 = *(void *)(*(void *)v11 + 8);
    if ((WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::RemoteLayerBackingStore>((uint64_t)v12, *(void *)(v13 + 8)) & 1) == 0)
    {
      long long v22 = *(_OWORD *)(*(void *)(v13 + 16) + 16);
      if (HIDWORD(v28) == v28)
      {
        WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)&v27, (unint64_t)&v22);
      }
      else
      {
        *((_OWORD *)v27 + HIDWORD(v28)) = v22;
        ++HIDWORD(v28);
      }
    }
    uint64_t result = (WTF *)WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v25);
    uint64_t v11 = v26;
  }
  while (v26 != v24);
  int v15 = HIDWORD(v28);
  if (!HIDWORD(v28)) {
    goto LABEL_8;
  }
  if (HIDWORD(v28) >> 28)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v18 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v28)));
  uint64_t v16 = v18;
  if (HIDWORD(v28))
  {
    uint64_t v19 = 0;
    double v20 = v27;
    uint64_t v21 = 16 * HIDWORD(v28);
    do
    {
      *(_OWORD *)(v18 + v19) = *(_OWORD *)((char *)v20 + v19);
      v19 += 16;
    }
    while (v21 != v19);
  }
LABEL_9:
  uint64_t v17 = (WTF *)*((void *)a2 + 12);
  if (v17)
  {
    *((void *)a2 + 12) = 0;
    *((_DWORD *)a2 + 26) = 0;
    WTF::fastFree(v17, v10);
  }
  *((void *)a2 + 12) = v16;
  *((_DWORD *)a2 + 26) = v15;
  *((_DWORD *)a2 + 27) = v15;
  uint64_t result = v27;
  if (v27)
  {
    unint64_t v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v10);
  }
  return result;
}

void sub_1986B34A4(_Unwind_Exception *exception_object, void *a2)
{
  int v4 = *(WTF **)(v2 - 48);
  if (v4)
  {
    *(void *)(v2 - 48) = 0;
    *(_DWORD *)(v2 - 40) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::WebFoundTextRangeController::redraw(_DWORD *this)
{
  int v1 = (WebCore::PageOverlay *)*((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = (uint64_t)this;
    ++*((_DWORD *)v1 + 2);
    if (*((void *)this + 4))
    {
      *(_OWORD *)&v7.var0 = *(_OWORD *)(this + 6);
      uint64_t v3 = (StringImpl *)*((void *)this + 5);
      if (v3) {
        *(_DWORD *)v3 += 2;
      }
      unint64_t v4 = *((void *)this + 6);
      v7.var2.var0.m_impl.m_ptr = v3;
      v7.var3 = v4;
      WebKit::WebFoundTextRangeController::simpleRangeFromFoundTextRange((WebKit::WebFoundTextRangeController *)this, &v7, (uint64_t)v8);
      m_ptr = v7.var2.var0.m_impl.m_ptr;
      v7.var2.var0.m_impl.m_ptr = 0;
      if (m_ptr)
      {
        if (*(_DWORD *)m_ptr == 2) {
          WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v5);
        }
        else {
          *(_DWORD *)m_ptr -= 2;
        }
      }
      if (v8[32]) {
        WebKit::WebFoundTextRangeController::setTextIndicatorWithRange(v2);
      }
      std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8);
    }
    WebCore::PageOverlay::setNeedsDisplay(v1);
    return WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)v1 + 2);
  }
  return this;
}

void *WebKit::RemoteRenderingBackendProxy::finalizeRenderingUpdate(void *this)
{
  if (this[6])
  {
    int v1 = this;
    uint64_t v2 = this + 29;
    this = (void *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::FinalizeRenderingUpdate,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((WebKit::RemoteRenderingBackendProxy *)this, &v2, this[8]);
    ++v1[29];
  }
  return this;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::FinalizeRenderingUpdate,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v40);
  WebFoundTextRange v7 = v40;
  if (!v40) {
    return 1;
  }
  double v8 = *((double *)v40 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v9 = v8 + v10;
  }
  if (*((void *)v7 + 7) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
    if (!buf[16]) {
      goto LABEL_62;
    }
    uint64_t v27 = *(void *)buf;
    unint64_t v26 = *(void *)&buf[8];
    unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v28 - *(void *)buf;
    if (v28 >= *(void *)buf)
    {
      unint64_t v30 = v29 + 2;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v30 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v29) = 2871;
        goto LABEL_40;
      }
      unint64_t v26 = 0;
    }
    unint64_t v30 = 0;
LABEL_40:
    uint64_t v32 = (void *)((v27 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v32 >= v27 + v30)
    {
      unint64_t v30 = (unint64_t)v32 - v27 + 8;
      if ((unint64_t)v32 - v27 > 0xFFFFFFFFFFFFFFF7 || v30 > v26) {
        goto LABEL_65;
      }
      *uint64_t v32 = a3;
    }
    if (v26)
    {
      unint64_t v34 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v35 = *((void *)v7 + 8);
      if (v34 + 16 >= v35) {
        unint64_t v34 = 0;
      }
      if (v30 <= 0x10) {
        unint64_t v30 = 16;
      }
      unint64_t v36 = v34 + v30;
      if (v35 <= v36) {
        unint64_t v36 = 0;
      }
      *((void *)v7 + 10) = v36;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v36) == 0x80000000);
      *((void *)v7 + 7) = a3;
      goto LABEL_5;
    }
LABEL_65:
    uint64_t v25 = 17;
    goto LABEL_57;
  }
LABEL_5:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
  if (!buf[16])
  {
LABEL_62:
    uint64_t v25 = 15;
    goto LABEL_57;
  }
  uint64_t v14 = *(void *)buf;
  unint64_t v13 = *(void *)&buf[8];
  unint64_t v15 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v16 = v15 - *(void *)buf;
  if (v15 >= *(void *)buf)
  {
    unint64_t v17 = v16 + 2;
    if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v16) = 1333;
      goto LABEL_12;
    }
    unint64_t v13 = 0;
  }
  unint64_t v17 = 0;
LABEL_12:
  uint64_t v19 = (void *)((v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v19 >= v14 + v17)
  {
    unint64_t v17 = (unint64_t)v19 - v14 + 8;
    if ((unint64_t)v19 - v14 > 0xFFFFFFFFFFFFFFF7 || v17 > v13) {
      goto LABEL_55;
    }
    void *v19 = **a2;
  }
  if (v13)
  {
    uint64_t v21 = *((void *)v7 + 9);
    unint64_t v22 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = *((void *)v7 + 8);
    if (v22 + 16 >= v23) {
      unint64_t v22 = 0;
    }
    if (v17 <= 0x10) {
      unint64_t v17 = 16;
    }
    unint64_t v24 = v22 + v17;
    if (v23 <= v24) {
      unint64_t v24 = 0;
    }
    *((void *)v7 + 10) = v24;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v21 + 16) + 128), v24) == 0x80000000 || v7[29])
    {
      if (*((unsigned char *)v7 + 104)) {
        MEMORY[0x1997420B0](v7[23]);
      }
      v7[29] = 0;
    }
    uint64_t v25 = 0;
    goto LABEL_28;
  }
LABEL_55:
  if (buf[16])
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)v7 + 1);
    uint64_t v25 = IPC::Connection::send<Messages::RemoteRenderingBackend::FinalizeRenderingUpdate>((uint64_t)v41, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41);
    if (!v25)
    {
LABEL_28:
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v12);
      return v25;
    }
LABEL_57:
    unint64_t v37 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = *((void *)a1 + 8);
      unint64_t v39 = IPC::errorAsString();
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = "RemoteRenderingBackend_FinalizeRenderingUpdate";
      __int16 v43 = 2082;
      unint64_t v44 = v39;
      _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void WebKit::RemoteScrollingCoordinator::buildTransaction(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  WebCore::AsyncScrollingCoordinator::willCommitTree();
  WebCore::AsyncScrollingCoordinator::ensureScrollingStateTreeForRootFrameID();
  WebCore::ScrollingStateTree::commit();
  char v4 = *(unsigned char *)(a1 + 216);
  *(unsigned char *)(a1 + 216) = 0;
  WebKit::RemoteScrollingCoordinatorTransaction::RemoteScrollingCoordinatorTransaction(a2, &v6, v4, 0, 0, 0);
  uint64_t v5 = v6;
  uint64_t v6 = 0;
  if (v5) {
    WebCore::ScrollingStateTree::operator delete(v5, 0x50uLL);
  }
}

BOOL WebKit::FindController::redraw(BOOL this)
{
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v1 = *(void *)(this + 16);
    if (v1) {
      BOOL v2 = *(void *)(v1 + 8) != 0;
    }
    else {
      BOOL v2 = 0;
    }
    return WebKit::FindController::updateFindIndicator((WebKit::FindController *)this, v2, 0);
  }
  return this;
}

void WebKit::DrawingArea::willStartRenderingUpdateDisplay(WebKit::DrawingArea *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (!*(unsigned char *)(v2 + 186)) {
    WebCore::Page::willStartRenderingUpdateDisplay(*(WebCore::Page **)(v2 + 48));
  }
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::DrawingArea::scaleViewToFitDocumentIfNeeded(WebKit::DrawingArea *this)
{
  if (*((unsigned char *)this + 65))
  {
    uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
    if (v1) {
      uint64_t v2 = v1 - 16;
    }
    else {
      uint64_t v2 = 0;
    }
    CFRetain(*(CFTypeRef *)(v2 + 8));
    WebKit::WebPage::layoutIfNeeded((WebKit::WebPage *)v2);
    if (!WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2)) {
      goto LABEL_27;
    }
    uint64_t v3 = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2);
    if (!WebCore::LocalFrameView::renderView(v3)) {
      goto LABEL_27;
    }
    int v4 = *(_DWORD *)(v2 + 56);
    uint64_t v5 = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2);
    uint64_t v6 = (WebCore::RenderView *)WebCore::LocalFrameView::renderView(v5);
    WebCore::RenderView::unscaledDocumentRect(v6);
    int v8 = v7;
    int v9 = *((_DWORD *)this + 14);
    if (v9 == v7 && *((_DWORD *)this + 12) == v4) {
      goto LABEL_27;
    }
    if (*((unsigned char *)this + 64))
    {
      if (v4 >= v9)
      {
        *((unsigned char *)this + 64) = 0;
      }
      else
      {
        if (v9 == v7)
        {
          *((void *)this + 6) = *(void *)(v2 + 56);
          goto LABEL_23;
        }
        if (v7 > (int)WebKit::WebPage::fixedLayoutSize((WebKit::WebPage *)v2))
        {
LABEL_27:
          if (v1) {
            CFRelease(*(CFTypeRef *)(v1 - 8));
          }
          return;
        }
      }
    }
    WebKit::WebPage::setUseFixedLayout((IPC::Encoder *)v2, 0);
    WebKit::WebPage::layoutIfNeeded((WebKit::WebPage *)v2);
    if (!WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2)) {
      goto LABEL_27;
    }
    uint64_t v11 = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2);
    if (!WebCore::LocalFrameView::renderView(v11)) {
      goto LABEL_27;
    }
    uint64_t v12 = (WebCore::LocalFrameView *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v2);
    unint64_t v13 = (WebCore::RenderView *)WebCore::LocalFrameView::renderView(v12);
    WebCore::RenderView::unscaledDocumentRect(v13);
    int v8 = (int)v14;
    *((void *)this + 6) = *(void *)(v2 + 56);
    *((void *)this + 7) = v14;
    float v15 = 1.0;
    if (!v14 || (int)v14 > 1439 || v4 >= (int)v14) {
      goto LABEL_26;
    }
    *((unsigned char *)this + 64) = 1;
    WebKit::WebPage::setUseFixedLayout((IPC::Encoder *)v2, 1);
LABEL_23:
    float v15 = (float)v4 / (float)v8;
    if (v15 < 0.1)
    {
      int v8 = vcvtps_s32_f32((float)v4 / 0.1);
      float v15 = 0.1;
    }
    int v16 = vcvtps_s32_f32((float)((float)*(int *)(v2 + 60) - *(float *)(*(void *)(v2 + 48) + 372)) / v15);
    v18.m_width = v8;
    v18.m_height = v16;
    WebKit::WebPage::setFixedLayoutSize((WebKit::WebPage *)v2, &v18);
LABEL_26:
    WebKit::WebPage::scaleView((atomic_uchar *)v2, v15, v14);
    goto LABEL_27;
  }
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(unsigned int **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    int v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (unsigned int *)-1)
      {
        *int v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)a1, (void *)(*(void *)a1 + 8 * v3));
  }
  int v4 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    int v4 = *(void **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    unint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::updateRendering(void)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 16);
  kdebug_trace();
  uint64_t v27 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 36);
  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    uint64_t v6 = 8 * v4 - 8;
    do
    {
      char v7 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 16))(*v5, &v27);
      char v8 = v7;
      ++v5;
      if (v6) {
        char v9 = v7;
      }
      else {
        char v9 = 0;
      }
      v6 -= 8;
    }
    while ((v9 & 1) != 0);
    unint64_t v10 = (IPC::Encoder *)*v3;
    if (v27) {
      int v11 = *(_DWORD *)(v27 - 12);
    }
    else {
      int v11 = 0;
    }
  }
  else
  {
    int v11 = 0;
    unint64_t v10 = (IPC::Encoder *)*v3;
    char v8 = 1;
  }
  uint64_t v12 = (_DWORD *)IPC::Encoder::grow(v10, 4uLL, 4);
  if (v13 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1986B41A8);
  }
  *uint64_t v12 = v11;
  if (!v27)
  {
    uint64_t v16 = 0;
    uint64_t v14 = 0;
LABEL_37:
    uint64_t v15 = v27 + 16 * v14;
    goto LABEL_17;
  }
  uint64_t v14 = *(unsigned int *)(v27 - 4);
  uint64_t v15 = v27 + 16 * v14;
  if (!*(_DWORD *)(v27 - 12))
  {
    uint64_t v16 = v27 + 16 * v14;
    goto LABEL_37;
  }
  uint64_t v16 = v27;
  if (v14)
  {
    uint64_t v17 = 16 * v14;
    uint64_t v16 = v27;
    while ((unint64_t)(*(void *)v16 + 1) <= 1)
    {
      v16 += 16;
      v17 -= 16;
      if (!v17)
      {
        uint64_t v16 = v15;
        break;
      }
    }
  }
LABEL_17:
  if (v27) {
    uint64_t v18 = v27 + 16 * *(unsigned int *)(v27 - 4);
  }
  else {
    uint64_t v18 = 0;
  }
  while (v16 != v18)
  {
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, (uint64_t *)v16);
    if (*(void *)(v16 + 8))
    {
      uint64_t v19 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1986B4188);
      }
      unsigned char *v19 = 1;
      IPC::ArgumentCoder<WebKit::BufferSetBackendHandle,void>::encode(v10, *(void *)(v16 + 8));
    }
    else
    {
      char v28 = 0;
      IPC::Encoder::operator<<<BOOL>(v10, &v28);
    }
    uint64_t v21 = v16 + 16;
    uint64_t v16 = v15;
    if (v21 != v15)
    {
      uint64_t v16 = v21;
      while ((unint64_t)(*(void *)v16 + 1) <= 1)
      {
        v16 += 16;
        if (v16 == v15)
        {
          uint64_t v16 = v15;
          break;
        }
      }
    }
  }
  atomic_store(0, (unsigned __int8 *)(v2 + 16));
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 8), v3, 0, 0);
  if (v27) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v27, v22);
  }
  unint64_t v23 = (WTF::RunLoop *)kdebug_trace();
  WTF::RunLoop::main(v23);
  uint64_t v24 = *(void *)(a1 + 40);
  uint64_t v25 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v25 = &unk_1EE9BA5A0;
  *(void *)(v25 + 8) = v24;
  *(unsigned char *)(v25 + 16) = v8;
  uint64_t v27 = v25;
  WTF::RunLoop::dispatch();
  uint64_t result = v27;
  uint64_t v27 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1986B41D0(_Unwind_Exception *a1, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(a9, a2);
  }
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, WTF *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1)
      {
        a2 = *v4;
        *uint64_t v4 = 0;
        if (a2) {
          std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v4, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    if (*((unsigned char *)this + 72))
    {
      uint64_t v3 = *((unsigned int *)this + 16);
      if (v3 != -1) {
        off_1EE9BA530[v3]((int)&v5, this);
      }
      *((_DWORD *)this + 16) = -1;
    }
    return WTF::fastFree(this, this);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>>(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>,void>::decode(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>,void>::decode(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = (void *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      if (*v5 == -1)
      {
LABEL_14:
        uint64_t v7 = 0;
        goto LABEL_15;
      }
      unint64_t v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      uint64_t v7 = *v5;
      return v6 | v7;
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v8 = v14[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  uint64_t v7 = 0;
  unint64_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (!v11) {
    return v6 | v7;
  }
  unint64_t v13 = a1;
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
  if (!*v13)
  {
    uint64_t v7 = 0;
LABEL_15:
    unint64_t v6 = 0;
    return v6 | v7;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction,void>::decode(a2, v18);
  if (!v19)
  {
    uint64_t v5 = *(void **)a2;
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v4 = *((void *)a2 + 3);
    if (v4) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
LABEL_14:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 832) = 0;
LABEL_15:
    uint64_t v9 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v10 = *((void *)a2 + 3);
    if (v10 && v9)
    {
      uint64_t v11 = *(void (**)(void))(*(void *)v10 + 16);
      v11();
    }
    return;
  }
  while (1)
  {
    IPC::ArgumentCoder<WebKit::RemoteScrollingCoordinatorTransaction,void>::decode(a2, (uint64_t)&v14);
    if (!v17)
    {
      uint64_t v5 = *(void **)a2;
      uint64_t v12 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v13 = *((void *)a2 + 3);
      if (!v13) {
        break;
      }
      if (!v12) {
        break;
      }
      uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 16))(v13, v5);
      if (!v17) {
        break;
      }
    }
    if (v19)
    {
      WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(a1, (uint64_t)v18);
      *(void *)(a1 + 800) = v14;
      *(_OWORD *)(a1 + 808) = v15;
      *(void *)(a1 + 824) = v16;
      int v6 = 1;
      goto LABEL_5;
    }
    __break(1u);
LABEL_23:
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v5);
    if (!v19) {
      goto LABEL_14;
    }
  }
  int v6 = 0;
  *(unsigned char *)a1 = 0;
LABEL_5:
  *(unsigned char *)(a1 + 832) = v6;
  if (v19)
  {
    WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)v18, v5);
    int v6 = *(unsigned __int8 *)(a1 + 832);
  }
  if (!v6) {
    goto LABEL_15;
  }
}

unint64_t IPC::ArgumentCoder<WebKit::RemoteScrollingCoordinatorTransaction,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::unique_ptr<WebCore::ScrollingStateTree>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::ScrollingStateTree> const&>(a1, (WebCore::ScrollingStateTree **)a2);
  LOBYTE(v5[0]) = *(unsigned char *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)v5);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, v5);
  uint64_t v6 = v5[1];
  return IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v6);
}

atomic_uchar *IPC::ArgumentCoder<std::unique_ptr<WebCore::ScrollingStateTree>,void>::encode<IPC::Encoder,std::unique_ptr<WebCore::ScrollingStateTree> const&>(IPC::Encoder *a1, WebCore::ScrollingStateTree **a2)
{
  if (*a2)
  {
    char v6 = 1;
    unint64_t v3 = (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v6);
    return IPC::ArgumentCoder<WebCore::ScrollingStateTree,void>::encode(v3, *a2);
  }
  else
  {
    char v5 = 0;
    return (atomic_uchar *)IPC::Encoder::operator<<<BOOL>(a1, &v5);
  }
}

atomic_uchar *IPC::ArgumentCoder<WebCore::ScrollingStateTree,void>::encode(IPC::Encoder *a1, WebCore::ScrollingStateTree *a2)
{
  char v4 = *((unsigned char *)a2 + 73);
  char v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1986B491CLL);
  }
  *char v5 = v4;
  char v7 = *((unsigned char *)a2 + 72);
  BOOL v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1986B493CLL);
  }
  *BOOL v8 = v7;
  WebCore::ScrollingStateTree::rootStateNode((uint64_t *)&v15, a2);
  if (v15)
  {
    uint64_t v10 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1986B495CLL);
    }
    *uint64_t v10 = 1;
    uint64_t result = IPC::ArgumentCoder<WebCore::ScrollingStateFrameScrollingNode,void>::encode(a1, v15);
  }
  else
  {
    char v16 = 0;
    uint64_t result = (atomic_uchar *)IPC::Encoder::operator<<<BOOL>(a1, &v16);
  }
  uint64_t v14 = v15;
  long long v15 = 0;
  if (v14) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*((atomic_uchar **)v14 + 1), v13);
  }
  return result;
}

void sub_1986B4974(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(a9 + 8), a2);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (!v6)
  {
    if (v7) {
      this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    if (!v8)
    {
      return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

uint64_t *WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(uint64_t *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = this + 4;
  uint64_t v4 = this[4];
  if (v4) {
    unsigned int v5 = *(_DWORD *)(v4 - 12);
  }
  else {
    unsigned int v5 = 0;
  }
  unsigned int v6 = *((_DWORD *)this + 12);
  if (v6 > v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1986B4CFCLL);
  }
  if (v5 == v6) {
    goto LABEL_5;
  }
  uint64_t v41 = 0;
  if (v4)
  {
    uint64_t v11 = *(unsigned int *)(v4 - 4);
    uint64_t v12 = (uint64_t *)(v4 + 16 * v11);
    if (*(_DWORD *)(v4 - 12))
    {
      uint64_t v13 = (uint64_t *)v4;
      if (v11)
      {
        uint64_t v14 = 16 * v11;
        uint64_t v13 = (uint64_t *)v4;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 2;
          v14 -= 16;
          if (!v14)
          {
            uint64_t v13 = v12;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    uint64_t v13 = (uint64_t *)(v4 + 16 * v11);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t *)(v4 + 16 * v11);
LABEL_21:
  if (v4) {
    long long v15 = (uint64_t *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    long long v15 = 0;
  }
  if (v15 != v13)
  {
    uint64_t v16 = this[8];
    do
    {
      if ((unint64_t)(v16 - v13[1]) >= 4)
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add(v40, &v41, v13);
        this = (uint64_t *)v2[7];
        v40[0] = *v13;
        if (this[6])
        {
          char v42 = v40;
          this = (uint64_t *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRenderingResource,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((WebKit::RemoteRenderingBackendProxy *)this, &v42, this[8]);
        }
      }
      char v17 = v13 + 2;
      uint64_t v13 = v12;
      if (v17 != v12)
      {
        uint64_t v13 = v17;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          v13 += 2;
          if (v13 == v12)
          {
            uint64_t v13 = v12;
            break;
          }
        }
      }
    }
    while (v13 != v15);
    uint64_t v4 = *v3;
  }
  if (v4)
  {
    int v18 = *(_DWORD *)(v4 - 4);
    uint64_t v19 = v41;
    if (v18)
    {
      int v20 = 0;
      unsigned int v21 = v18 - 1;
      do
      {
        unint64_t v22 = (void **)(v4 + 16 * v21);
        a2 = *v22;
        if ((unint64_t)*v22 + 1 >= 2)
        {
          this = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v19, (uint64_t)a2);
          if (this)
          {
            *unint64_t v22 = (void *)-1;
            ++v20;
          }
        }
      }
      while ((unint64_t)v21--);
      uint64_t v24 = *v3;
      if (v20)
      {
        *(_DWORD *)(v24 - 16) += v20;
        uint64_t v28 = *v3;
        if (*v3) {
          int v29 = *(_DWORD *)(v28 - 12);
        }
        else {
          int v29 = 0;
        }
        *(_DWORD *)(v28 - 12) = v29 - v20;
        uint64_t v24 = *v3;
      }
      if (v24)
      {
        unsigned int v25 = *(_DWORD *)(v24 - 4);
        unsigned int v26 = 6 * *(_DWORD *)(v24 - 12);
        if (v25 >= 9 && v26 < v25) {
          this = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::shrinkToBestSize(v3);
        }
      }
    }
  }
  else
  {
    uint64_t v19 = v41;
  }
  if (v19) {
    this = (uint64_t *)WTF::fastFree((WTF *)(v19 - 16), a2);
  }
LABEL_5:
  uint64_t v7 = v2 + 5;
  BOOL v8 = (void *)v2[5];
  if (v8) {
    unsigned int v9 = *((_DWORD *)v8 - 3);
  }
  else {
    unsigned int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)v2 + 13);
  if (v10 > v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1986B4D1CLL);
  }
  if (v9 != v10)
  {
    uint64_t v41 = 0;
    uint64_t v30 = v2[8];
    uint64_t v31 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v8);
    uint64_t v32 = v31;
    uint64_t v33 = v8;
    unint64_t v35 = v34;
    if (v33) {
      unint64_t v36 = &v33[2 * *((unsigned int *)v33 - 1)];
    }
    else {
      unint64_t v36 = 0;
    }
    if (v36 == v31)
    {
      return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::removeIf<WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(void)::$_1>(v2 + 5, &v41);
    }
    else
    {
      do
      {
        if ((unint64_t)(v30 - v32[1]) >= 4)
        {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add(v40, &v41, v32);
          unint64_t v37 = (WebKit::RemoteRenderingBackendProxy *)v2[7];
          v40[0] = *v32;
          if (*((void *)v37 + 6))
          {
            char v42 = v40;
            WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRenderingResource,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(v37, &v42, *((void *)v37 + 8));
          }
        }
        while (1)
        {
          v32 += 2;
          if (v32 == v35) {
            break;
          }
          if ((unint64_t)(*v32 + 1) > 1) {
            goto LABEL_65;
          }
        }
        uint64_t v32 = v35;
LABEL_65:
        ;
      }
      while (v32 != v36);
      uint64_t v38 = v41;
      this = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::removeIf<WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(void)::$_1>(v7, &v41);
      if (v38) {
        return (uint64_t *)WTF::fastFree((WTF *)(v38 - 16), v39);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStore::isRemoteLayerWithInProcessRenderingBackingStore(WebKit::RemoteLayerBackingStore *this)
{
  return 0;
}

void *WebKit::WebPreferences::setMockCaptureDevicesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    unsigned int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v6, 1);
  }
  return result;
}

void *WebKit::WebPreferences::setMediaCaptureRequiresSecureConnection(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
    }
    unsigned int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key, v6, 1);
  }
  return result;
}

void *WebKit::WebPreferences::setEnumeratingAllNetworkInterfacesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    unsigned int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::didRefreshDisplay(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 232)) {
    this = WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(this, 0);
  }
  if (*(unsigned char *)(v1 + 233))
  {
    uint64_t v2 = *(void *)(*(void *)(v1 + 40) + 8);
    uint64_t v3 = v2 ? v2 - 16 : 0;
    if ((*(void *)(v3 + 824) & 0xFF00000000) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 248) + 184);
      return v4();
    }
  }
  return this;
}

void WebKit::PageClientImpl::insertionPointColor(id *this@<X0>, uint64_t *a2@<X8>)
{
  id WeakRetained = objc_loadWeakRetained(this + 2);
  uint64_t v4 = (WebCore *)objc_msgSend((id)objc_msgSend(WeakRetained, "_insertionPointColor"), "CGColor");
  uint64_t v6 = WebCore::roundAndClampToSRGBALossy(v4, v5);
  uint64_t v7 = bswap32(v6) | 0x1104000000000000;
  if (!BYTE4(v6)) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_1986B5268(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::setPreferredFramesPerSecond(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this, unsigned int a2)
{
  uint64_t v3 = WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(this);

  return [(WKDisplayLinkHandler *)v3 setPreferredFramesPerSecond:a2];
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::commitLayerTree(uint64_t a1, IPC::Connection *a2, uint64_t *a3, uint64_t *a4)
{
  CGFloat v103 = 0.0;
  uint64_t v104 = 0;
  unsigned int v6 = *((_DWORD *)a3 + 3);
  if (v6)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = *a3 + 832 * v6;
    do
    {
      uint64_t v10 = *(void *)(v8 + 32);
      uint64_t v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(v10);
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      if (v10) {
        uint64_t v15 = v10 + 24 * *(unsigned int *)(v10 - 4);
      }
      else {
        uint64_t v15 = 0;
      }
      if (v15 != v11)
      {
        do
        {
          unint64_t v16 = *(void *)(*(void *)(v12 + 16) + 416);
          if (!v16) {
            goto LABEL_23;
          }
          if (*(unsigned char *)(v16 + 96))
          {
            uint64_t v17 = *a4;
            if (*a4)
            {
              uint64_t v18 = *(void *)(v16 + 88);
              unsigned int v19 = *(_DWORD *)(v17 - 8);
              unint64_t v20 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
              unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
              unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
              uint64_t v23 = v19 & ((v22 >> 31) ^ v22);
              uint64_t v24 = *(void *)(v17 + 16 * v23);
              if (v24 != v18)
              {
                int v25 = 1;
                while (v24)
                {
                  uint64_t v23 = (v23 + v25) & v19;
                  uint64_t v24 = *(void *)(v17 + 16 * v23);
                  ++v25;
                  if (v24 == v18) {
                    goto LABEL_16;
                  }
                }
                uint64_t v23 = *(unsigned int *)(v17 - 4);
              }
LABEL_16:
              if (v23 != *(_DWORD *)(v17 - 4)) {
                WebKit::RemoteLayerBackingStoreProperties::setBackendHandle(v16, *(void *)(v17 + 16 * v23 + 8));
              }
            }
          }
          if (*(unsigned char *)(v16 + 72) && *(_DWORD *)(v16 + 64) == 1)
          {
            uint64_t v26 = HIDWORD(v104);
            if (HIDWORD(v104) == v104)
            {
              unint64_t v16 = WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103, HIDWORD(v104) + 1, v16);
              uint64_t v26 = HIDWORD(v104);
            }
            WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(*(void *)&v103 + 4 * v26), (const WTF::MachSendRight *)v16);
            ++HIDWORD(v104);
          }
LABEL_23:
          while (1)
          {
            v12 += 24;
            if (v12 == v14) {
              break;
            }
            if (*(_OWORD *)v12 != 0 && *(void *)(v12 + 8) != -1) {
              goto LABEL_30;
            }
          }
          uint64_t v12 = v14;
LABEL_30:
          ;
        }
        while (v12 != v15);
      }
      v8 += 832;
    }
    while (v8 != v9);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v28 = *(atomic_uint **)(a1 + 8);
  if (v28) {
    atomic_fetch_add(v28, 1u);
  }
  unsigned int v29 = *((_DWORD *)a3 + 3);
  float v100 = v28;
  if (v29)
  {
    uint64_t v30 = *a3;
    uint64_t v99 = *a3 + 832 * v29;
    do
    {
      kdebug_trace();
      uint64_t v31 = WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)a1, a2);
      uint64_t v32 = v31;
      unint64_t v33 = *(void *)(v30 + 248);
      *(void *)(v31 + 8) = v33;
      if (*(void *)(v31 + 16) < v33) {
        *(void *)(v31 + 16) = v33;
      }
      uint64_t v34 = *(void *)(*(void *)(a1 + 40) + 8);
      if (v34) {
        uint64_t v35 = v34 - 16;
      }
      else {
        uint64_t v35 = 0;
      }
      updated = (WTF::MonotonicTime *)CFRetain(*(CFTypeRef *)(v35 + 8));
      if (*(void *)(v30 + 40)
        || (*(void *)(v32 + 24) = *(void *)(v30 + 248),
            *(void *)(v32 + 32) = *(void *)(v30 + 256),
            !*(unsigned char *)(v30 + 752)))
      {
        int v37 = 0;
      }
      else
      {
        updated = (WTF::MonotonicTime *)WebKit::WebPageProxy::updateEditorState((WebKit::WebPageProxy *)v35, (char *)(v30 + 272), 1);
        int v37 = (int)updated;
      }
      v105[0] = 0;
      unsigned __int8 v106 = 0;
      uint64_t v38 = *(unsigned int *)(v30 + 124);
      if (v38)
      {
        unint64_t v39 = *(void **)(v30 + 112);
        uint64_t v40 = 8 * v38;
        while (*v39 != *(void *)(a1 + 192))
        {
          ++v39;
          v40 -= 8;
          if (!v40) {
            goto LABEL_51;
          }
        }
        *(void *)(a1 + 192) = 0;
      }
LABEL_51:
      *(void *)(a1 + 208) = *(void *)(v30 + 784);
      WTF::MonotonicTime::now(updated);
      *(void *)(a1 + 216) = v41;
      (*(void (**)(void))(**(void **)(v35 + 248) + 152))(*(void *)(v35 + 248));
      if (WebKit::RemoteLayerTreeTransaction::hasAnyLayerChanges((WebKit::RemoteLayerTreeTransaction *)v30)) {
        ++*(_DWORD *)(a1 + 200);
      }
      if (WebKit::RemoteLayerTreeHost::updateLayerTree(*(WebKit::RemoteLayerTreeHost **)(a1 + 72), a2, (const WebKit::RemoteLayerTreeTransaction *)v30, 1.0))
      {
        uint64_t v42 = *(void *)(a1 + 72);
        if (*(void *)(a1 + 192))
        {
          WebKit::RemoteLayerTreeHost::detachRootLayer(v42);
        }
        else
        {
          uint64_t v43 = *(void *)(v42 + 8);
          if (v43) {
            unint64_t v44 = *(WebKit::RemoteLayerTreeNode **)(v43 + 8);
          }
          else {
            unint64_t v44 = 0;
          }
          WebKit::WebPageProxy::setRemoteLayerTreeRootNode((WebKit::WebPageProxy *)v35, v44);
        }
      }
      if (!*(void *)(v30 + 40))
      {
        WebKit::RemoteScrollingCoordinatorProxy::commitScrollingTreeState(*(void *)(v35 + 248), (uint64_t)a2, v30 + 800, (uint64_t)&v108);
        if (v106 == BYTE4(v108.m22))
        {
          if (v106)
          {
            *(_OWORD *)BOOL v105 = *(_OWORD *)&v108.m11;
            *(_DWORD *)&v105[15] = *(_DWORD *)((char *)&v108.m12 + 7);
            if (v105[40] == LOBYTE(v108.m22))
            {
              if (v105[40])
              {
                v105[20] = BYTE4(v108.m13);
                *(CGFloat *)&v105[24] = v108.m14;
                *(_DWORD *)&v105[32] = LODWORD(v108.m21);
                *(_WORD *)&v105[36] = WORD2(v108.m21);
              }
            }
            else if (v105[40])
            {
              v105[40] = 0;
            }
            else
            {
              *(_OWORD *)&v105[20] = *(_OWORD *)((char *)&v108.m13 + 4);
              *(_DWORD *)&v105[36] = HIDWORD(v108.m21);
              v105[40] = 1;
            }
          }
        }
        else if (v106)
        {
          unsigned __int8 v106 = 0;
        }
        else
        {
          *(_OWORD *)BOOL v105 = *(_OWORD *)&v108.m11;
          *(_OWORD *)&v105[16] = *(_OWORD *)&v108.m13;
          *(_OWORD *)&v105[28] = *(_OWORD *)((char *)&v108.m14 + 4);
          unsigned __int8 v106 = 1;
        }
      }
      (*(void (**)(void))(**(void **)(v35 + 248) + 160))(*(void *)(v35 + 248));
      WebKit::WebPageProxy::didCommitLayerTree((WebKit::WebPageProxy *)v35, (const Color *)v30);
      (*(void (**)(uint64_t, IPC::Connection *, uint64_t, uint64_t))(*(void *)a1 + 400))(a1, a2, v30, v30 + 800);
      (*(void (**)(void))(**(void **)(v35 + 248) + 32))(*(void *)(v35 + 248));
      uint64_t v45 = *(void *)(v35 + 32);
      v107[0] = *(void *)(v45 + 2296);
      LODWORD(v108.m11) = WebKit::WebPageProxy::computeLayoutViewportRect((void *)v35, (long long *)(v45 + 2296), (FloatRect *)(v45 + 2328), (const FloatRect *)(v45 + 2360), 0, *(double *)(v45 + 2440));
      HIDWORD(v108.m11) = v46;
      *(void *)&v108.m12 = __PAIR64__(v48, v47);
      uint64_t v49 = *(void *)(v35 + 248);
      if (v49) {
        WebCore::ScrollingTree::mainFrameViewportChangedViaDelegatedScrolling(*(WebCore::ScrollingTree **)(v49 + 24), (const WebCore::FloatPoint *)v107, (const FloatRect *)&v108, *(double *)(*(void *)(v35 + 32) + 2440));
      }
      if (v106)
      {
        WebCore::ScrollingTree::mainFrameScrollPosition(*(WebCore::ScrollingTree **)(*(void *)(v35 + 248) + 24));
        unsigned int add = v106;
        if (!v106) {
          goto LABEL_135;
        }
        *(_OWORD *)&v108.CGFloat m11 = *(_OWORD *)&v105[20];
        v108.m13 = *(CGFloat *)&v105[36];
        if (v105[40]) {
          v105[40] = 0;
        }
        if (BYTE4(v108.m13)
          && LOBYTE(v108.m11) != 2
          && (WebCore::RequestedScrollData::computeDestinationPosition(), (unsigned int add = v106) == 0)
          || (WebCore::RequestedScrollData::destinationPosition(),
              *(void *)&v108.CGFloat m11 = __PAIR64__(v53, v52),
              v107[0] = *(void *)(v30 + 136),
              (unsigned int add = v106) == 0))
        {
LABEL_135:
          __break(1u);
LABEL_136:
          atomic_store(add, (unsigned int *)v28);
          WTF::fastFree((WTF *)v28, v50);
          return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v103, v50);
        }
        WebKit::WebPageProxy::requestScroll(v35, (uint64_t)&v108, (uint64_t)v107, v105[18]);
      }
      if (*(void *)(a1 + 168))
      {
        int v55 = *(_DWORD *)(v30 + 128);
        int v54 = *(_DWORD *)(v30 + 132);
        uint64_t v56 = *(void *)(*(void *)(a1 + 40) + 8);
        if (v56) {
          unsigned int v57 = (WebKit::WebPageProxy *)(v56 - 16);
        }
        else {
          unsigned int v57 = 0;
        }
        uint64_t v58 = WebKit::WebPageProxy::viewSize(v57);
        float v59 = 1.0;
        if (v55 >= 1 && v54 >= 1)
        {
          float v60 = (float)((float)(int)v58 + -20.0) / (float)v55;
          if (v60 > 0.05) {
            float v60 = 0.05;
          }
          if ((float)((float)((float)SHIDWORD(v58) + -20.0) / (float)v54) >= v60) {
            float v59 = v60;
          }
          else {
            float v59 = (float)((float)SHIDWORD(v58) + -20.0) / (float)v54;
          }
        }
        (*(void (**)(void))(**(void **)(v35 + 248) + 152))(*(void *)(v35 + 248));
        int v61 = WebKit::RemoteLayerTreeHost::updateLayerTree(*(WebKit::RemoteLayerTreeHost **)(a1 + 168), a2, (const WebKit::RemoteLayerTreeTransaction *)v30, v59);
        (*(void (**)(void))(**(void **)(v35 + 248) + 160))(*(void *)(v35 + 248));
        uint64_t v62 = *(void *)(*(void *)(a1 + 72) + 8);
        if (v62 && (uint64_t v63 = *(void *)(v62 + 8)) != 0) {
          int v64 = *(void **)(v63 + 40);
        }
        else {
          int v64 = 0;
        }
        int v65 = *(_DWORD *)(v30 + 128);
        int v66 = *(_DWORD *)(v30 + 132);
        [*(id *)(a1 + 176) removeFromSuperlayer];
        [v64 addSublayer:*(void *)(a1 + 176)];
        char v67 = *(void **)(a1 + 176);
        v108.CGFloat m11 = 0.0;
        *(float *)&v108.m12 = (float)v65;
        *((float *)&v108.m12 + 1) = (float)v66;
        WebCore::FloatRect::operator CGRect();
        objc_msgSend(v67, "setBounds:");
        uint64_t v68 = *(void **)(a1 + 176);
        LODWORD(v108.m11) = WebKit::RemoteLayerTreeDrawingAreaProxy::indicatorLocation(*(WebKit::RemoteLayerTreeDrawingAreaProxy **)(*(void *)(a1 + 40) + 8)).u32[0];
        HIDWORD(v108.m11) = v69;
        WebCore::FloatPoint::operator CGPoint();
        objc_msgSend(v68, "setPosition:");
        uint64_t v70 = *(void **)(a1 + 176);
        CATransform3DMakeScale(&v108, v59, v59, 1.0);
        [v70 setTransform:&v108];
        if (v61)
        {
          [*(id *)(a1 + 176) setSublayers:MEMORY[0x1E4F1CBF0]];
          uint64_t v71 = *(void *)(*(void *)(a1 + 168) + 8);
          if (v71 && (uint64_t v72 = *(void *)(v71 + 8)) != 0) {
            uint64_t v73 = *(void *)(v72 + 40);
          }
          else {
            uint64_t v73 = 0;
          }
          [*(id *)(a1 + 176) addSublayer:v73];
          [*(id *)(a1 + 176) addSublayer:*(void *)(a1 + 184)];
        }
        [*(id *)(a1 + 184) setBorderWidth:(float)(1.0 / v59)];
        uint64_t v74 = *(void *)(*(void *)(a1 + 40) + 8);
        if (v74) {
          uint64_t v75 = v74 - 16;
        }
        else {
          uint64_t v75 = 0;
        }
        uint64_t v76 = *(void *)(v75 + 32);
        uint64_t v77 = *(void *)(v76 + 2288);
        uint64_t v78 = *(void **)(a1 + 184);
        v107[0] = *(void *)(v76 + 2280);
        WebCore::FloatPoint::operator CGPoint();
        objc_msgSend(v78, "setPosition:");
        uint64_t v79 = *(void **)(a1 + 184);
        v107[0] = 0;
        v107[1] = v77;
        WebCore::FloatRect::operator CGRect();
        objc_msgSend(v79, "setBounds:");
        uint64_t v80 = *(void *)(*(void *)(a1 + 168) + 8);
        if (v80 && (uint64_t v81 = *(void *)(v80 + 8)) != 0) {
          uint64_t v82 = *(void **)(v81 + 40);
        }
        else {
          uint64_t v82 = 0;
        }
        [v82 setName:@"Indicator host root"];
      }
      uint64_t v28 = v100;
      long long v83 = (WTF::WallTime *)WebKit::WebPageProxy::layerTreeCommitComplete((WebKit::WebPageProxy *)v35);
      if (v37) {
        long long v83 = (WTF::WallTime *)WebKit::WebPageProxy::dispatchDidUpdateEditorState(v35);
      }
      unsigned __int16 v84 = *(_WORD *)(v30 + 264);
      if (v84)
      {
        WTF::WallTime::now(v83);
        WebKit::WebPageProxy::didReachLayoutMilestone(v35, v84, v85);
      }
      uint64_t v86 = *(unsigned int *)(v30 + 124);
      if (v86)
      {
        uint64_t v87 = *(uint64_t **)(v30 + 112);
        uint64_t v88 = 8 * v86;
        do
        {
          IPC::Connection::takeAsyncReplyHandler((os_unfair_lock_s *)a2, *v87, &v108);
          if (*(void *)&v108.m11)
          {
            WTF::CompletionHandler<void ()(IPC::Decoder *)>::operator()((uint64_t *)&v108);
            CGFloat m11 = v108.m11;
            v108.CGFloat m11 = 0.0;
            if (m11 != 0.0) {
              (*(void (**)(CGFloat))(**(void **)&m11 + 8))(COERCE_CGFLOAT(*(void *)&m11));
            }
          }
          ++v87;
          v88 -= 8;
        }
        while (v88);
      }
      if (v34) {
        CFRelease(*(CFTypeRef *)(v35 + 8));
      }
      kdebug_trace();
      if (!v100) {
        return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v103, v50);
      }
      if (!*((void *)v100 + 1)) {
        goto LABEL_133;
      }
      v30 += 832;
    }
    while (v30 != v99);
  }
  unsigned int v90 = HIDWORD(v104);
  if (HIDWORD(v104))
  {
    uint64_t v91 = (void *)MEMORY[0x1E4F39CF8];
    v101[0] = MEMORY[0x1E4F143A8];
    v101[1] = 3321888768;
    v101[2] = ___ZN6WebKit31RemoteLayerTreeDrawingAreaProxy15commitLayerTreeERN3IPC10ConnectionERKN3WTF6VectorINSt3__14pairINS_26RemoteLayerTreeTransactionENS_37RemoteScrollingCoordinatorTransactionEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS4_7HashMapINS4_23ObjectIdentifierGenericINS_34RemoteImageBufferSetIdentifierTypeENS4_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS4_33SupportsObjectIdentifierNullStateE1EEENS6_10unique_ptrINS_22BufferSetBackendHandleENS6_14default_deleteISO_EEEENS4_11DefaultHashISM_EENS4_10HashTraitsISM_EENSU_ISR_EENS4_15HashTableTraitsEEE_block_invoke;
    v101[3] = &__block_descriptor_48_e8_32c574_ZTSKZN6WebKit31RemoteLayerTreeDrawingAreaProxy15commitLayerTreeERN3IPC10ConnectionERKN3WTF6VectorINSt3__14pairINS_26RemoteLayerTreeTransactionENS_37RemoteScrollingCoordinatorTransactionEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEONS4_7HashMapINS4_23ObjectIdentifierGenericINS_34RemoteImageBufferSetIdentifierTypeENS4_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS4_33SupportsObjectIdentifierNullStateE1EEENS6_10unique_ptrINS_22BufferSetBackendHandleENS6_14default_deleteISO_EEEENS4_11DefaultHashISM_EENS4_10HashTraitsISM_EENSU_ISR_EENS4_15HashTableTraitsEEEE3__0_e5_v8__0l;
    v108.CGFloat m11 = v103;
    unsigned int v92 = v104;
    CGFloat v103 = 0.0;
    uint64_t v104 = 0;
    *(void *)&v108.m12 = __PAIR64__(v90, v92);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v102, (uint64_t)&v108);
    [v91 addCommitHandler:v101 forPhase:2];
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v93);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v102, v94);
  }
  uint64_t v95 = (int *)WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)a1, a2);
  int v96 = *v95;
  *uint64_t v95 = 1;
  if (v96 == 2) {
    WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(a1, a2);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 376))(a1);
  if (v28)
  {
LABEL_133:
    unsigned int add = atomic_fetch_add(v28, 0xFFFFFFFF);
    if (add == 1) {
      goto LABEL_136;
    }
  }
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v103, v50);
}

void sub_1986B5D54(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v33, a2);
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a33, v35);
  if (a16)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a16, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a16);
      WTF::fastFree(a16, v36);
    }
  }
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v36);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 30))
  {
    unsigned int v5 = (WTF::MachSendRight *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(const WTF::MachSendRight **)a2;
      uint64_t v8 = 4 * v6;
      do
      {
        unsigned int v5 = (WTF::MachSendRight *)(WTF::MachSendRight::MachSendRight(v5, v7) + 4);
        uint64_t v7 = (const WTF::MachSendRight *)((char *)v7 + 4);
        v8 -= 4;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1986B5EF4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::RemoteLayerTreeTransaction::hasAnyLayerChanges(WebKit::RemoteLayerTreeTransaction *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 && *(_DWORD *)(v1 - 12)) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    if (*(_DWORD *)(v2 - 12)) {
      return 1;
    }
  }
  return *((_DWORD *)this + 15) || *((_DWORD *)this + 19) || *((_DWORD *)this + 27) != 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxyIOS::scheduleDisplayRefreshCallbacks(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  *((unsigned char *)this + 232) = 1;
  uint64_t v1 = WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(this);

  return [(WKDisplayLinkHandler *)v1 schedule];
}

WKDisplayLinkHandler *WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  uint64_t result = (WKDisplayLinkHandler *)*((void *)this + 28);
  if (!result)
  {
    uint64_t result = [[WKDisplayLinkHandler alloc] initWithDrawingAreaProxy:this];
    uint64_t v3 = (const void *)*((void *)this + 28);
    *((void *)this + 28) = result;
    if (v3)
    {
      CFRelease(v3);
      return (WKDisplayLinkHandler *)*((void *)this + 28);
    }
  }
  return result;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::applyScrollingTreeLayerPositionsAfterCommit(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  *(unsigned char *)(*((void *)this + 3) + 342) = 1;
  return MEMORY[0x1F416D5A8]();
}

void WebKit::RemoteScrollingCoordinatorProxy::commitScrollingTreeState(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  buf[0] = 0;
  char v19 = 0;
  uint64_t v8 = (_OWORD *)(a1 + 32);
  std::__optional_storage_base<WebCore::RequestedScrollData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RequestedScrollData,false>>(a1 + 32, (uint64_t)buf);
  uint64_t v9 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v16 = v9;
  uint64_t v10 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v10) {
    uint64_t v11 = v10 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(v11 + 232);
  if (!v12 || *(unsigned char *)(v12 + 36) || (uint64_t v13 = *(void *)(v12 + 72)) == 0)
  {
LABEL_6:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 44) = 0;
    goto LABEL_7;
  }
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a3 + 16);
  (*(void (**)(uint64_t))(*(void *)a1 + 208))(a1);
  if ((WebCore::ScrollingTree::commitTreeState() & 1) == 0)
  {
    uint64_t v15 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "std::optional<RequestedScrollData> WebKit::RemoteScrollingCoordinatorProxy::commitScrollingTreeState(IPC::Co"
            "nnection &, const RemoteScrollingCoordinatorTransaction &, std::optional<LayerHostingContextIdentifier>)";
      _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/RemoteLayerTree/RemoteScrollingCoordinatorProxy.cpp 110: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    *(unsigned char *)(a2 + 98) = 1;
    goto LABEL_6;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, v13);
  if (*(unsigned char *)(a3 + 8)) {
    WebCore::ScrollingTree::clearLatchedNode(*(WebCore::ScrollingTree **)(a1 + 24));
  }
  buf[0] = 0;
  char v19 = 0;
  long long v14 = v8[1];
  *(_OWORD *)a4 = *v8;
  *(_OWORD *)(a4 + 16) = v14;
  *(_OWORD *)(a4 + 32) = v8[2];
  std::__optional_storage_base<WebCore::RequestedScrollData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RequestedScrollData,false>>((uint64_t)v8, (uint64_t)buf);
LABEL_7:
  if (v16) {
    WebCore::ScrollingStateTree::operator delete(v16, 0x50uLL);
  }
}

__n128 std::__optional_storage_base<WebCore::RequestedScrollData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RequestedScrollData,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44))
  {
    if (*(unsigned char *)(a1 + 44))
    {
      __n128 result = *(__n128 *)a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
      *(__n128 *)a1 = result;
      if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
      {
        if (*(unsigned char *)(a1 + 40))
        {
          *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
          uint64_t v3 = *(void *)(a2 + 24);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *(void *)(a1 + 24) = v3;
          *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
        }
      }
      else if (*(unsigned char *)(a1 + 40))
      {
        *(unsigned char *)(a1 + 40) = 0;
      }
      else
      {
        __n128 result = *(__n128 *)(a2 + 20);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(__n128 *)(a1 + 20) = result;
        *(unsigned char *)(a1 + 40) = 1;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 44))
  {
    *(unsigned char *)(a1 + 44) = 0;
  }
  else
  {
    __n128 result = *(__n128 *)a2;
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
    *(__n128 *)a1 = result;
    *(_OWORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 44) = 1;
  }
  return result;
}

void WebKit::RemoteScrollingCoordinatorProxyIOS::establishLayerTreeScrollingRelations(WebKit::RemoteScrollingCoordinatorProxyIOS *this, const WebKit::RemoteLayerTreeHost *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v4 = (uint64_t *)((char *)this + 136);
  uint64_t v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin((uint64_t *)this + 17);
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  uint64_t v9 = *((void *)this + 17);
  if (v9) {
    uint64_t v10 = v9 + 16 * *(unsigned int *)(v9 - 4);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 != v5)
  {
    uint64_t v11 = (uint64_t *)((char *)a2 + 16);
    do
    {
      long long v61 = *(_OWORD *)v7;
      char v62 = 1;
      uint64_t v12 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v11, &v61);
      if (v12)
      {
        long long v14 = (void *)(v12 + 192);
        uint64_t v13 = *(WTF **)(v12 + 192);
        *(void *)(v12 + 176) = 0;
        *(void *)(v12 + 184) = 0;
        if (v13)
        {
          *(void *)(v12 + 192) = 0;
          *(_DWORD *)(v12 + 200) = 0;
          WTF::fastFree(v13, v6);
        }
        *long long v14 = 0;
        v14[1] = 0;
      }
      while (1)
      {
        v7 += 16;
        if ((void *)v7 == v8) {
          break;
        }
        if (*(_OWORD *)v7 != 0 && *(void *)(v7 + 8) != -1) {
          goto LABEL_17;
        }
      }
      uint64_t v7 = (uint64_t)v8;
LABEL_17:
      ;
    }
    while (v7 != v10);
    uint64_t v9 = *v4;
  }
  if (v9)
  {
    *long long v4 = 0;
    WTF::fastFree((WTF *)(v9 - 16), v6);
  }
  uint64_t v16 = *((void *)this + 3);
  uint64_t v17 = *(void *)(v16 + 160);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
    uint64_t v19 = v17 + 8 * v18;
    if (*(_DWORD *)(v17 - 12))
    {
      uint64_t v20 = *(void *)(v16 + 160);
      if (v18)
      {
        uint64_t v21 = 8 * v18;
        uint64_t v20 = *(void *)(v16 + 160);
        while ((unint64_t)(*(void *)v20 + 1) <= 1)
        {
          v20 += 8;
          v21 -= 8;
          if (!v21)
          {
            uint64_t v20 = v19;
            goto LABEL_28;
          }
        }
      }
      goto LABEL_28;
    }
    uint64_t v20 = v17 + 8 * v18;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v19 = v17 + 8 * v18;
  if (v17)
  {
LABEL_28:
    uint64_t v22 = v17 + 8 * *(unsigned int *)(v17 - 4);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
LABEL_33:
  if (v22 == v20) {
    goto LABEL_67;
  }
  while (1)
  {
    v60[0] = 0;
    v60[1] = 0;
    uint64_t v23 = *(void **)v20;
    uint64_t v24 = *(unsigned int *)(*(void *)v20 + 108);
    if (!v24) {
      goto LABEL_44;
    }
    uint64_t v25 = v23[12];
    uint64_t v26 = v25 + 16 * v24;
    do
    {
      uint64_t v27 = WebCore::ScrollingTree::nodeForID();
      if (!v27 || *(unsigned char *)(v27 + 40) != 5)
      {
        uint64_t v38 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "virtual void WebKit::RemoteScrollingCoordinatorProxyIOS::establishLayerTreeScrollingRelat"
                               "ions(const RemoteLayerTreeHost &)";
          _os_log_fault_impl(&dword_1985F2000, v38, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/RemoteLayerTree/ios/RemoteScrollingCoordinatorProxyIOS.mm 257: Invalid message dispatched %{public}s", buf, 0xCu);
        }
        uint64_t v39 = *(void *)(*((void *)this + 2) + 8);
        if (v39) {
          uint64_t v40 = v39 - 16;
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = *(void *)(*(void *)(v40 + 256) + 144);
        if (v41)
        {
          int v35 = 0;
          *(unsigned char *)(v41 + 98) = 1;
          goto LABEL_49;
        }
LABEL_102:
        __break(0xC471u);
        JUMPOUT(0x1986B6894);
      }
      uint64_t v29 = objc_msgSend((id)objc_msgSend((id)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(v27 + 272), v28), "valueForKey:", @"WKRemoteLayerTreeNode"), "pointerValue");
      if (!v29)
      {
        buf[0] = 0;
        char v64 = 0;
        __break(1u);
        goto LABEL_102;
      }
      *(_OWORD *)buf = *(_OWORD *)(v29 + 8);
      char v64 = 1;
      if (HIDWORD(v60[1]) == LODWORD(v60[1]))
      {
        WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)v60, (unint64_t)buf);
      }
      else
      {
        *((_OWORD *)v60[0] + HIDWORD(v60[1])) = *(_OWORD *)buf;
        ++HIDWORD(v60[1]);
      }
      v25 += 16;
    }
    while (v25 != v26);
    uint64_t v23 = *(void **)v20;
LABEL_44:
    uint64_t v30 = objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(void *))(*v23 + 72))(v23), "valueForKey:", @"WKRemoteLayerTreeNode"), "pointerValue");
    uint64_t v32 = v30;
    if (v30)
    {
      uint64_t v33 = *(WTF **)(v30 + 192);
      if (v33)
      {
        *(void *)(v32 + 192) = 0;
        *(_DWORD *)(v32 + 200) = 0;
        WTF::fastFree(v33, v31);
      }
      *(WTF **)(v32 + 192) = v60[0];
      uint64_t v34 = v60[1];
      v60[0] = 0;
      v60[1] = 0;
      *(void *)(v32 + 200) = v34;
      long long v59 = *(_OWORD *)(v32 + 8);
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add(v4, (uint64_t *)&v59, (uint64_t)buf);
    }
    int v35 = 1;
LABEL_49:
    unint64_t v36 = v60[0];
    if (!v60[0]) {
      break;
    }
    v60[0] = 0;
    LODWORD(v60[1]) = 0;
    WTF::fastFree(v36, v31);
    if (!v35) {
      return;
    }
LABEL_51:
    uint64_t v37 = v20 + 8;
    uint64_t v20 = v19;
    if (v37 != v19)
    {
      uint64_t v20 = v37;
      while ((unint64_t)(*(void *)v20 + 1) <= 1)
      {
        v20 += 8;
        if (v20 == v19)
        {
          uint64_t v20 = v19;
          break;
        }
      }
    }
    if (v20 == v22)
    {
      uint64_t v16 = *((void *)this + 3);
LABEL_67:
      uint64_t v42 = *(void *)(v16 + 152);
      if (v42)
      {
        uint64_t v43 = *(unsigned int *)(v42 - 4);
        uint64_t v44 = v42 + 8 * v43;
        if (*(_DWORD *)(v42 - 12))
        {
          uint64_t v45 = v42;
          if (v43)
          {
            uint64_t v46 = 8 * v43;
            uint64_t v45 = v42;
            while ((unint64_t)(*(void *)v45 + 1) <= 1)
            {
              v45 += 8;
              v46 -= 8;
              if (!v46)
              {
                uint64_t v45 = v44;
                break;
              }
            }
          }
LABEL_74:
          uint64_t v47 = v42 + 8 * *(unsigned int *)(v42 - 4);
          goto LABEL_79;
        }
        uint64_t v45 = v42 + 8 * v43;
      }
      else
      {
        uint64_t v45 = 0;
        uint64_t v43 = 0;
      }
      uint64_t v44 = v42 + 8 * v43;
      if (v42) {
        goto LABEL_74;
      }
      uint64_t v47 = 0;
LABEL_79:
      if (v47 != v45)
      {
        while (1)
        {
          uint64_t v48 = WebCore::ScrollingTree::nodeForID();
          uint64_t v49 = v48;
          if (!v48 || *(unsigned char *)(v48 + 40) != 5) {
            break;
          }
          uint64_t v51 = objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(void))(**(void **)v45 + 72))(), "valueForKey:", @"WKRemoteLayerTreeNode"), "pointerValue");
          if (v51)
          {
            uint64_t v52 = objc_msgSend((id)objc_msgSend((id)WebCore::LayerRepresentation::makePlatformLayerTyped(*(WebCore::LayerRepresentation **)(v49 + 272), v50), "valueForKey:", @"WKRemoteLayerTreeNode"), "pointerValue");
            if (v52) {
              long long v53 = *(_OWORD *)(v52 + 8);
            }
            else {
              long long v53 = 0uLL;
            }
            *(_OWORD *)(v51 + 176) = v53;
            *(_OWORD *)float v60 = *(_OWORD *)(v51 + 8);
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::add(v4, (uint64_t *)v60, (uint64_t)buf);
          }
          uint64_t v54 = v45 + 8;
          uint64_t v45 = v44;
          if (v54 != v44)
          {
            uint64_t v45 = v54;
            while ((unint64_t)(*(void *)v45 + 1) <= 1)
            {
              v45 += 8;
              if (v45 == v44)
              {
                uint64_t v45 = v44;
                break;
              }
            }
          }
          if (v45 == v47) {
            return;
          }
        }
        int v55 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "virtual void WebKit::RemoteScrollingCoordinatorProxyIOS::establishLayerTreeScrollingRelat"
                               "ions(const RemoteLayerTreeHost &)";
          _os_log_fault_impl(&dword_1985F2000, v55, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/RemoteLayerTree/ios/RemoteScrollingCoordinatorProxyIOS.mm 270: Invalid message dispatched %{public}s", buf, 0xCu);
        }
        uint64_t v56 = *(void *)(*((void *)this + 2) + 8);
        if (v56) {
          uint64_t v57 = v56 - 16;
        }
        else {
          uint64_t v57 = 0;
        }
        uint64_t v58 = *(void *)(*(void *)(v57 + 256) + 144);
        if (!v58)
        {
          __break(0xC471u);
          JUMPOUT(0x1986B68B4);
        }
        *(unsigned char *)(v58 + 98) = 1;
      }
      return;
    }
  }
  if (v35) {
    goto LABEL_51;
  }
}

void sub_1986B68BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13) {
    WTF::fastFree(a13, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::begin(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(_DWORD *)(v1 - 12)) {
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::makeConstIterator(a1, v1);
  }
  return v1 + 16 * *(unsigned int *)(v1 - 4);
}

void WebKit::RemoteScrollingCoordinatorProxyIOS::connectStateNodeLayers(WebKit::RemoteScrollingCoordinatorProxyIOS *this, WebCore::ScrollingStateTree *a2, const WebKit::RemoteLayerTreeHost *a3)
{
  uint64_t v3 = *((void *)a2 + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 24 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      uint64_t v6 = *((void *)a2 + 5);
      if (v4)
      {
        uint64_t v7 = 24 * v4;
        uint64_t v6 = *((void *)a2 + 5);
        while (*(_OWORD *)v6 == 0 || *(void *)(v6 + 8) == -1)
        {
          v6 += 24;
          v7 -= 24;
          if (!v7)
          {
            uint64_t v6 = v5;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    uint64_t v6 = v3 + 24 * v4;
  }
  else
  {
    uint64_t v6 = 0;
    LODWORD(v4) = 0;
  }
  uint64_t v5 = v3 + 24 * v4;
  if (v3)
  {
LABEL_12:
    uint64_t v9 = v3 + 24 * *(unsigned int *)(v3 - 4);
    goto LABEL_17;
  }
  uint64_t v9 = 0;
LABEL_17:
  if (v9 != v6)
  {
    uint64_t v10 = (uint64_t *)((char *)a3 + 16);
    do
    {
      uint64_t v11 = *(void *)(v6 + 16);
      if (*(unsigned char *)(v11 + 40))
      {
        uint64_t v12 = *(void *)(v11 + 104);
        if (v12)
        {
          *(void *)long long v59 = *(void *)(v11 + 105);
          *(void *)&v59[7] = *(void *)(v11 + 112);
          char v58 = v12;
          char v60 = 1;
          uint64_t v13 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v58);
          if (v13)
          {
            WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, *(CALayer **)(v13 + 40));
            WebCore::ScrollingStateNode::setLayer();
            WebCore::LayerRepresentation::~LayerRepresentation(v57, v14);
          }
        }
        else
        {
          char v58 = 0;
          char v60 = 0;
        }
        uint64_t v11 = *(void *)(v6 + 16);
      }
      unsigned int v15 = *(unsigned __int8 *)(v11 + 16);
      if (v15 < 2)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v11 + 8));
        if (*(unsigned __int8 *)(v11 + 16) >= 2u) {
          goto LABEL_98;
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 8), v21);
        uint64_t v22 = *(void *)(v11 + 40);
        if ((v22 & 0x1000) != 0)
        {
          uint64_t v23 = *(void *)(v11 + 272);
          if (v23)
          {
            *(void *)&v52[7] = *(void *)(v11 + 280);
            *(void *)uint64_t v52 = *(void *)(v11 + 273);
            char v51 = v23;
            char v53 = 1;
            uint64_t v24 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v51);
            if (v24)
            {
              WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, *(CALayer **)(v24 + 40));
              WebCore::ScrollingStateScrollingNode::setScrollContainerLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v57);
              WebCore::LayerRepresentation::~LayerRepresentation(v57, v25);
            }
          }
          else
          {
            char v51 = 0;
            char v53 = 0;
          }
          uint64_t v22 = *(void *)(v11 + 40);
        }
        if ((v22 & 0x2000) != 0)
        {
          if (*(void *)(v11 + 312)
            && (char v61 = *(void *)(v11 + 312),
                *(void *)&v62[7] = *(void *)(v11 + 320),
                *(void *)char v62 = *(void *)(v11 + 313),
                char v63 = 1,
                (uint64_t v31 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v61)) != 0))
          {
            uint64_t v32 = *(CALayer **)(v31 + 40);
          }
          else
          {
            uint64_t v32 = 0;
          }
          WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, v32);
          WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v57);
          WebCore::LayerRepresentation::~LayerRepresentation(v57, v33);
          uint64_t v22 = *(void *)(v11 + 40);
        }
        if ((v22 & 0x4000000) != 0)
        {
          if (*(void *)(v11 + 592)
            && (char v61 = *(void *)(v11 + 592),
                *(void *)&v62[7] = *(void *)(v11 + 600),
                *(void *)char v62 = *(void *)(v11 + 593),
                char v63 = 1,
                (uint64_t v34 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v61)) != 0))
          {
            int v35 = *(CALayer **)(v34 + 40);
          }
          else
          {
            int v35 = 0;
          }
          WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, v35);
          WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer((WebCore::ScrollingStateFrameScrollingNode *)v11, (const WebCore::LayerRepresentation *)v57);
          WebCore::LayerRepresentation::~LayerRepresentation(v57, v36);
          uint64_t v22 = *(void *)(v11 + 40);
        }
        if ((v22 & 0x2000000000000) != 0)
        {
          if (*(void *)(v11 + 712)
            && (char v61 = *(void *)(v11 + 712),
                *(void *)&v62[7] = *(void *)(v11 + 720),
                *(void *)char v62 = *(void *)(v11 + 713),
                char v63 = 1,
                (uint64_t v37 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v61)) != 0))
          {
            uint64_t v38 = *(CALayer **)(v37 + 40);
          }
          else
          {
            uint64_t v38 = 0;
          }
          WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, v38);
          WebCore::ScrollingStateFrameScrollingNode::setHeaderLayer((WebCore::ScrollingStateFrameScrollingNode *)v11, (const WebCore::LayerRepresentation *)v57);
          WebCore::LayerRepresentation::~LayerRepresentation(v57, v39);
          uint64_t v22 = *(void *)(v11 + 40);
        }
        if ((v22 & 0x40000000000) == 0) {
          goto LABEL_85;
        }
        if (*(void *)(v11 + 752)
          && (char v61 = *(void *)(v11 + 752),
              *(void *)&v62[7] = *(void *)(v11 + 760),
              *(void *)char v62 = *(void *)(v11 + 753),
              char v63 = 1,
              (uint64_t v40 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v61)) != 0))
        {
          uint64_t v41 = *(CALayer **)(v40 + 40);
        }
        else
        {
          uint64_t v41 = 0;
        }
        WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, v41);
        WebCore::ScrollingStateFrameScrollingNode::setFooterLayer((WebCore::ScrollingStateFrameScrollingNode *)v11, (const WebCore::LayerRepresentation *)v57);
      }
      else
      {
        if (v15 == 3)
        {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v11 + 8));
          if (*(unsigned char *)(v11 + 16) != 3)
          {
LABEL_98:
            __break(0xC471u);
            JUMPOUT(0x1986B6EF4);
          }
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 8), v26);
          uint64_t v27 = *(void *)(v11 + 40);
          if ((v27 & 0x1000) != 0)
          {
            uint64_t v28 = *(void *)(v11 + 272);
            if (v28)
            {
              *(void *)&v49[7] = *(void *)(v11 + 280);
              *(void *)uint64_t v49 = *(void *)(v11 + 273);
              char v48 = v28;
              char v50 = 1;
              uint64_t v29 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v48);
              if (v29)
              {
                WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, *(CALayer **)(v29 + 40));
                WebCore::ScrollingStateScrollingNode::setScrollContainerLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v57);
                WebCore::LayerRepresentation::~LayerRepresentation(v57, v30);
              }
            }
            else
            {
              char v48 = 0;
              char v50 = 0;
            }
            uint64_t v27 = *(void *)(v11 + 40);
          }
          if ((v27 & 0x2000) == 0) {
            goto LABEL_85;
          }
          if (*(void *)(v11 + 312)
            && (char v61 = *(void *)(v11 + 312),
                *(void *)&v62[7] = *(void *)(v11 + 320),
                *(void *)char v62 = *(void *)(v11 + 313),
                char v63 = 1,
                (uint64_t v45 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v61)) != 0))
          {
            uint64_t v44 = *(CALayer **)(v45 + 40);
          }
          else
          {
            uint64_t v44 = 0;
          }
        }
        else
        {
          if (v15 != 5) {
            goto LABEL_85;
          }
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(atomic_uchar **)(v11 + 8));
          if (*(unsigned char *)(v11 + 16) != 5)
          {
            __break(0xC471u);
            JUMPOUT(0x1986B6F14);
          }
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 8), v16);
          uint64_t v17 = *(void *)(v11 + 40);
          if ((v17 & 0x1000) != 0)
          {
            uint64_t v18 = *(void *)(v11 + 272);
            if (v18)
            {
              *(void *)&v55[7] = *(void *)(v11 + 280);
              *(void *)int v55 = *(void *)(v11 + 273);
              char v54 = v18;
              char v56 = 1;
              uint64_t v19 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v54);
              if (v19)
              {
                WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, *(CALayer **)(v19 + 40));
                WebCore::ScrollingStateScrollingNode::setScrollContainerLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v57);
                WebCore::LayerRepresentation::~LayerRepresentation(v57, v20);
              }
            }
            else
            {
              char v54 = 0;
              char v56 = 0;
            }
            uint64_t v17 = *(void *)(v11 + 40);
          }
          if ((v17 & 0x2000) == 0) {
            goto LABEL_85;
          }
          if (*(void *)(v11 + 312)
            && (char v61 = *(void *)(v11 + 312),
                *(void *)&v62[7] = *(void *)(v11 + 320),
                *(void *)char v62 = *(void *)(v11 + 313),
                char v63 = 1,
                (uint64_t v43 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v10, &v61)) != 0))
          {
            uint64_t v44 = *(CALayer **)(v43 + 40);
          }
          else
          {
            uint64_t v44 = 0;
          }
        }
        WebCore::LayerRepresentation::LayerRepresentation((WebCore::LayerRepresentation *)v57, v44);
        WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((WebCore::ScrollingStateScrollingNode *)v11, (const WebCore::LayerRepresentation *)v57);
      }
      WebCore::LayerRepresentation::~LayerRepresentation(v57, v42);
LABEL_85:
      uint64_t v46 = v6 + 24;
      uint64_t v6 = v5;
      if (v46 != v5)
      {
        uint64_t v6 = v46;
        while (*(_OWORD *)v6 == 0 || *(void *)(v6 + 8) == -1)
        {
          v6 += 24;
          if (v6 == v5)
          {
            uint64_t v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v9);
  }
}

void sub_1986B6F38(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  WebCore::LayerRepresentation::~LayerRepresentation((WebCore::LayerRepresentation **)va, a2);
  _Unwind_Resume(a1);
}

atomic_uchar *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  ++*((void *)v1 + 1);
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::layerTreeCommitComplete(WebKit::WebPageProxy *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 1592))(v2);
  (*(void (**)(uint64_t))(*(void *)v2 + 840))(v2);
  int v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 1600);

  return v3(v2);
}

void sub_1986B70B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 1600))(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::layerTreeCommitComplete(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _layerTreeCommitComplete];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_1986B7144(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF::WallTime *WebKit::WebPageProxy::didCommitLayerTree(WebKit::WebPageProxy *this, const Color *a2)
{
  if (!a2[5].m_colorAndFlags)
  {
    WebCore::Color::Color((WebCore::Color *)&v15, a2 + 22);
    WebKit::WebPageProxy::themeColorChanged((uint64_t)this, (const WebCore::Color *)&v15);
    if ((v15 & 0x8000000000000) != 0)
    {
      long long v14 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v4);
      }
    }
  }
  WebCore::Color::Color((WebCore::Color *)&v15, a2 + 23);
  WebKit::WebPageProxy::pageExtendedBackgroundColorDidChange(this, (const WebCore::Color *)&v15);
  if ((v15 & 0x8000000000000) != 0)
  {
    uint64_t v12 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v5);
    }
  }
  WebCore::Color::Color((WebCore::Color *)&v15, a2 + 24);
  WebKit::WebPageProxy::sampledPageTopColorChanged((uint64_t)this, (const WebCore::Color *)&v15);
  if ((v15 & 0x8000000000000) != 0)
  {
    uint64_t v13 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v6);
    }
  }
  if (!*((unsigned char *)this + 805) && a2[31].m_colorAndFlags >= *(void *)(*((void *)this + 4) + 2024))
  {
    *((unsigned char *)this + 805) = 1;
    WebKit::WebPageProxy::stopMakingViewBlankDueToLackOfRenderingUpdateIfNecessary((uint64_t)this);
    uint64_t v7 = *((void *)this + 4);
    *(_OWORD *)(v7 + 2408) = 0u;
    *(_OWORD *)(v7 + 2424) = 0u;
    *(_OWORD *)(v7 + 2376) = 0u;
    *(_OWORD *)(v7 + 2392) = 0u;
    *(_OWORD *)(v7 + 2344) = 0u;
    *(_OWORD *)(v7 + 2360) = 0u;
    *(_OWORD *)(v7 + 2312) = 0u;
    *(_OWORD *)(v7 + 2328) = 0u;
    *(_OWORD *)(v7 + 2280) = 0u;
    *(_OWORD *)(v7 + 2296) = 0u;
    *(void *)(v7 + 2440) = 0xBFF0000000000000;
    *(_DWORD *)(v7 + 2448) = 0;
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
  (*(void (**)(uint64_t, const Color *))(*(void *)v9 + 832))(v9, a2);
  __n128 result = (WTF::WallTime *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 1600))(v9);
  if ((*(_WORD *)(*((void *)this + 4) + 936) & 0x40) != 0
    && !*((unsigned char *)this + 952)
    && (double)*((unint64_t *)this + 118) * 0.5 < (double)a2[30].m_colorAndFlags)
  {
    *((unsigned char *)this + 952) = 1;
    WTF::WallTime::now(result);
    return (WTF::WallTime *)WebKit::WebPageProxy::didReachLayoutMilestone((uint64_t)this, 0x40u, v11);
  }
  return result;
}

void sub_1986B73A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    double v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCommitLayerTree(id *this, const WebKit::RemoteLayerTreeTransaction *a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 5);
  [WeakRetained _didCommitLayerTree:a2];
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
  }
}

void sub_1986B7470(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebPageProxy *WebKit::WebPageProxy::pageExtendedBackgroundColorDidChange(WebKit::WebPageProxy *this, const WebCore::Color *a2)
{
  uint64_t v2 = this;
  unint64_t v3 = *(void *)(*((void *)this + 4) + 944);
  unint64_t v4 = *(void *)a2;
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) != 0)
    {
      BOOL v24 = 0;
      unint64_t v25 = 0;
      long long v26 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      long long v30 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      long long v31 = v26;
      do
      {
        if (*((float *)&v31 + v25) != *((float *)&v30 + v25)) {
          break;
        }
        BOOL v24 = v25++ > 2;
      }
      while (v25 != 4);
      if (v24 && HIBYTE(v3) == HIBYTE(v4) && BYTE6(v3) == BYTE6(v4)) {
        return this;
      }
    }
  }
  else if (v3 == v4 && (v4 & 0x8000000000000) == 0)
  {
    return this;
  }
  WebKit::WebPageProxy::underPageBackgroundColor(this, (uint64_t *)&v29);
  WebCore::Color::Color();
  WebCore::Color::operator=();
  WebKit::WebPageProxy::underPageBackgroundColor(v2, (uint64_t *)&v27);
  if ((v29 & 0x8000000000000) != 0)
  {
    if ((v27 & 0x8000000000000) == 0)
    {
      WebCore::Color::operator=();
      goto LABEL_29;
    }
    BOOL v9 = 0;
    unint64_t v10 = 0;
    long long v11 = *(_OWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 4);
    long long v30 = *(_OWORD *)((v27 & 0xFFFFFFFFFFFFLL) + 4);
    long long v31 = v11;
    do
    {
      if (*((float *)&v31 + v10) != *((float *)&v30 + v10)) {
        break;
      }
      BOOL v9 = v10++ > 2;
    }
    while (v10 != 4);
    BOOL v7 = v9 && ((v27 ^ v29) & 0xFE000000000000) == 0 && HIBYTE(v29) == HIBYTE(v27);
  }
  else
  {
    BOOL v7 = 0;
    if ((v27 & 0x8000000000000) == 0 && v29 == v27)
    {
      uint64_t v8 = (v27 ^ v29) & 0xFE000000000000;
      WebCore::Color::operator=();
      if (!v8) {
        goto LABEL_26;
      }
LABEL_29:
      uint64_t v15 = *((void *)v2 + 5);
      if (v15) {
        uint64_t v16 = *(void *)(v15 + 8);
      }
      else {
        uint64_t v16 = 0;
      }
      (*(void (**)(uint64_t))(*(void *)v16 + 1592))(v16);
      (*(void (**)(uint64_t))(*(void *)v16 + 1336))(v16);
      (*(void (**)(uint64_t))(*(void *)v16 + 1600))(v16);
      char v13 = 0;
      goto LABEL_33;
    }
  }
  if ((v27 & 0x8000000000000) != 0)
  {
    long long v14 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      char v13 = 1;
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v6);
      WebCore::Color::operator=();
      if (v7) {
        goto LABEL_33;
      }
      goto LABEL_29;
    }
  }
  WebCore::Color::operator=();
  if (!v7) {
    goto LABEL_29;
  }
LABEL_26:
  char v13 = 1;
LABEL_33:
  uint64_t v17 = *((void *)v2 + 5);
  if (v17) {
    uint64_t v18 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v18 + 1592))(v18);
  (*(void (**)(uint64_t))(*(void *)v18 + 1352))(v18);
  (*(void (**)(uint64_t))(*(void *)v18 + 1600))(v18);
  WebCore::Color::operator=();
  if ((v13 & 1) == 0)
  {
    uint64_t v19 = *((void *)v2 + 5);
    if (v19) {
      uint64_t v20 = *(void *)(v19 + 8);
    }
    else {
      uint64_t v20 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v20 + 1592))(v20);
    (*(void (**)(uint64_t))(*(void *)v20 + 1344))(v20);
    (*(void (**)(uint64_t))(*(void *)v20 + 1600))(v20);
  }
  uint64_t v21 = *((void *)v2 + 5);
  if (v21) {
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v22 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v22 + 1592))(v22);
  (*(void (**)(uint64_t))(*(void *)v22 + 1360))(v22);
  this = (WebKit::WebPageProxy *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 1600))(v22);
  if ((v28 & 0x8000000000000) != 0)
  {
    this = (WebKit::WebPageProxy *)(v28 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      this = (WebKit::WebPageProxy *)WTF::fastFree(this, v23);
    }
  }
  if ((v29 & 0x8000000000000) != 0)
  {
    this = (WebKit::WebPageProxy *)(v29 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)this);
      return (WebKit::WebPageProxy *)WTF::fastFree(this, v23);
    }
  }
  return this;
}

void sub_1986B7A78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if ((a9 & 0x8000000000000) != 0)
  {
    long long v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *___ZL25scrollViewBackgroundColorP9WKWebView32AllowPageBackgroundColorOverride_block_invoke(uint64_t a1)
{
  uint64_t v2 = **(void ***)(a1 + 40);
  unint64_t v3 = (void *)v2[200];
  if (v3)
  {
    unint64_t v4 = (WebCore *)objc_msgSend((id)objc_msgSend(v3, "backgroundColor"), "CGColor");
    uint64_t v6 = WebCore::roundAndClampToSRGBALossy(v4, v5);
    uint64_t v7 = bswap32(v6) | 0x1104000000000000;
    if (!BYTE4(v6)) {
      uint64_t v7 = 0;
    }
    uint64_t v26 = v7;
  }
  else
  {
    int v21 = **(unsigned __int8 **)(a1 + 48);
    uint64_t v22 = (const Color *)v2[80];
    if (v22)
    {
      WebCore::Color::Color((WebCore::Color *)&v26, v22 + 8);
      if ((v26 & 0x4000000000000) != 0) {
        goto LABEL_5;
      }
      if ((v26 & 0x8000000000000) != 0)
      {
        unint64_t v25 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v23);
        }
      }
    }
    BOOL v24 = (WebKit::WebPageProxy *)v2[52];
    if (v24)
    {
      if (v21) {
        WebKit::WebPageProxy::underPageBackgroundColor(v24, &v26);
      }
      else {
        WebCore::Color::Color((WebCore::Color *)&v26, (const Color *)(*((void *)v24 + 4) + 944));
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
  }
LABEL_5:
  __n128 result = (unsigned int *)WebCore::Color::operator=();
  if ((v26 & 0x8000000000000) != 0)
  {
    __n128 result = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      __n128 result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  uint64_t v10 = **(void **)(a1 + 32);
  if ((v10 & 0x4000000000000) == 0)
  {
    __n128 result = *(unsigned int **)(**(void **)(a1 + 40) + 632);
    if (result)
    {
      long long v11 = (WebCore *)objc_msgSend((id)objc_msgSend(result, "backgroundColor"), "CGColor");
      uint64_t v13 = WebCore::roundAndClampToSRGBALossy(v11, v12);
      uint64_t v14 = bswap32(v13) | 0x1104000000000000;
      if (!BYTE4(v13)) {
        uint64_t v14 = 0;
      }
      uint64_t v26 = v14;
      __n128 result = (unsigned int *)WebCore::Color::operator=();
      if ((v26 & 0x8000000000000) != 0)
      {
        __n128 result = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          __n128 result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
        }
      }
      uint64_t v10 = **(void **)(a1 + 32);
    }
  }
  if ((v10 & 0x4000000000000) == 0)
  {
    uint64_t v16 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F428B8], "systemBackgroundColor"), "CGColor");
    uint64_t v18 = WebCore::roundAndClampToSRGBALossy(v16, v17);
    uint64_t v19 = bswap32(v18) | 0x1104000000000000;
    if (!BYTE4(v18)) {
      uint64_t v19 = 0;
    }
    uint64_t v26 = v19;
    __n128 result = (unsigned int *)WebCore::Color::operator=();
    if ((v26 & 0x8000000000000) != 0)
    {
      __n128 result = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v20);
      }
    }
  }
  return result;
}

void sub_1986B7CE4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    long long v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::underPageBackgroundColor@<X0>(WebKit::WebPageProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 4);
  if ((*(unsigned char *)(v2 + 1822) & 4) != 0)
  {
    unint64_t v4 = (const Color *)(v2 + 1816);
  }
  else
  {
    if ((*(unsigned char *)(v2 + 950) & 4) == 0) {
      return WebKit::WebPageProxy::platformUnderPageBackgroundColor(this, a2);
    }
    unint64_t v4 = (const Color *)(v2 + 944);
  }
  return (unsigned int *)WebCore::Color::Color((WebCore::Color *)a2, v4);
}

void ___ZN6WebKit14PageClientImpl26contentViewBackgroundColorEv_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 40));
  unint64_t v3 = (WebCore *)objc_msgSend((id)objc_msgSend(WeakRetained, "backgroundColor"), "CGColor");
  uint64_t v5 = WebCore::roundAndClampToSRGBALossy(v3, v4);
  uint64_t v6 = bswap32(v5) | 0x1104000000000000;
  if (!BYTE4(v5)) {
    uint64_t v6 = 0;
  }
  uint64_t v15 = v6;
  WebCore::Color::operator=();
  if ((v15 & 0x8000000000000) != 0)
  {
    uint64_t v13 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v7);
    }
  }
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  if ((*(unsigned char *)(*(void *)(a1 + 32) + 6) & 4) == 0)
  {
    uint64_t v8 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F428B8], "systemBackgroundColor"), "CGColor");
    uint64_t v10 = WebCore::roundAndClampToSRGBALossy(v8, v9);
    uint64_t v11 = bswap32(v10) | 0x1104000000000000;
    if (!BYTE4(v10)) {
      uint64_t v11 = 0;
    }
    uint64_t v16 = v11;
    WebCore::Color::operator=();
    if ((v16 & 0x8000000000000) != 0)
    {
      uint64_t v14 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v12);
      }
    }
  }
}

void sub_1986B7E5C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::sampledPageTopColorChanged(uint64_t this, const WebCore::Color *a2)
{
  uint64_t v2 = this;
  unint64_t v3 = *(void *)(*(void *)(this + 32) + 1752);
  unint64_t v4 = *(void *)a2;
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0) {
      goto LABEL_6;
    }
    BOOL v11 = 0;
    unint64_t v12 = 0;
    long long v13 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    long long v14 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    long long v15 = v13;
    do
    {
      if (*((float *)&v15 + v12) != *((float *)&v14 + v12)) {
        break;
      }
      BOOL v11 = v12++ > 2;
    }
    while (v12 != 4);
    if (!v11 || HIBYTE(v3) != HIBYTE(v4) || BYTE6(v3) != BYTE6(v4)) {
      goto LABEL_6;
    }
  }
  else if (v3 != v4 || (v4 & 0x8000000000000) != 0)
  {
LABEL_6:
    uint64_t v6 = *(void *)(this + 40);
    if (v6) {
      uint64_t v7 = *(void *)(v6 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
    (*(void (**)(uint64_t))(*(void *)v7 + 1368))(v7);
    (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
    WebCore::Color::operator=();
    uint64_t v8 = *(void *)(v2 + 40);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
    (*(void (**)(uint64_t))(*(void *)v9 + 1376))(v9);
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 1600);
    return v10(v9);
  }
  return this;
}

uint64_t WebKit::WebPageProxy::themeColorChanged(uint64_t this, const WebCore::Color *a2)
{
  uint64_t v2 = this;
  unint64_t v3 = *(void *)(*(void *)(this + 32) + 1776);
  unint64_t v4 = *(void *)a2;
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0) {
      goto LABEL_6;
    }
    BOOL v11 = 0;
    unint64_t v12 = 0;
    long long v13 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
    long long v14 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
    long long v15 = v13;
    do
    {
      if (*((float *)&v15 + v12) != *((float *)&v14 + v12)) {
        break;
      }
      BOOL v11 = v12++ > 2;
    }
    while (v12 != 4);
    if (!v11 || HIBYTE(v3) != HIBYTE(v4) || BYTE6(v3) != BYTE6(v4)) {
      goto LABEL_6;
    }
  }
  else if (v3 != v4 || (v4 & 0x8000000000000) != 0)
  {
LABEL_6:
    uint64_t v6 = *(void *)(this + 40);
    if (v6) {
      uint64_t v7 = *(void *)(v6 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 1592))(v7);
    (*(void (**)(uint64_t))(*(void *)v7 + 1320))(v7);
    (*(void (**)(uint64_t))(*(void *)v7 + 1600))(v7);
    WebCore::Color::operator=();
    uint64_t v8 = *(void *)(v2 + 40);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 1592))(v9);
    (*(void (**)(uint64_t))(*(void *)v9 + 1328))(v9);
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 1600);
    return v10(v9);
  }
  return this;
}

void WebCore::LayerRepresentation::~LayerRepresentation(WebCore::LayerRepresentation **this, void *a2)
{
  if (*((_DWORD *)this + 8) == 2) {
    WebCore::LayerRepresentation::releasePlatformLayer(this[1], a2);
  }
  unint64_t v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1) {
      (*(void (**)(WebCore::LayerRepresentation *))(*(void *)v3 + 16))(v3);
    }
    else {
      --*((_DWORD *)v3 + 2);
    }
  }
}

void sub_1986B8464(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    }
    else {
      --v3[2];
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::LayerRepresentation *WebCore::LayerRepresentation::LayerRepresentation(WebCore::LayerRepresentation *this, CALayer *a2)
{
  *(void *)this = 0;
  PlatformLayerTypeless = (WebCore::LayerRepresentation *)WebCore::LayerRepresentation::makePlatformLayerTypeless((WebCore::LayerRepresentation *)a2, a2);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = PlatformLayerTypeless;
  *((_DWORD *)this + 8) = 2;
  WebCore::LayerRepresentation::retainPlatformLayer(PlatformLayerTypeless, v4);
  return this;
}

void sub_1986B84F8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    }
    else {
      --v3[2];
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(uint64_t this, IPC::Connection *a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 40) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!*(unsigned char *)(v3 + 801) && *(unsigned char *)(v3 + 800))
  {
    uint64_t v5 = this;
    if (a2)
    {
      uint64_t v6 = (_DWORD *)WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection((WebKit::RemoteLayerTreeDrawingAreaProxy *)this, a2);
      WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(v5, v6, (uint64_t)a2);
    }
    else
    {
      uint64_t v9 = *(WebKit::AuxiliaryProcessProxy **)(this + 48);
      if (*((void *)v9 + 18))
      {
        WebKit::AuxiliaryProcessProxy::protectedConnection(v9, &v22);
        WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(v5, (_DWORD *)(v5 + 88), (uint64_t)v22);
        uint64_t v10 = (atomic_uchar **)v22;
        uint64_t v22 = 0;
        if (v10) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v10);
        }
      }
      BOOL v11 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((void **)(v5 + 128));
      WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)&v22, (uint64_t *)(v5 + 128), (uint64_t)v11, v12);
      uint64_t v13 = *(void *)(v5 + 128);
      if (v13)
      {
        unsigned int v14 = *(_DWORD *)(v13 - 4);
        uint64_t v15 = v13 + 48 * v14;
      }
      else
      {
        uint64_t v15 = 0;
        unsigned int v14 = 0;
      }
      WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v20, (uint64_t *)(v5 + 128), v15, v13 + 48 * v14);
      while (v23 != v21)
      {
        uint64_t v16 = *(WebKit::AuxiliaryProcessProxy **)(*(void *)(*(void *)v23 + 8) + 48);
        if (*((void *)v16 + 18))
        {
          uint64_t v17 = v23 + 2;
          WebKit::AuxiliaryProcessProxy::protectedConnection(v16, &v19);
          WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(v5, v17, (uint64_t)v19);
          uint64_t v18 = (atomic_uchar **)v19;
          uint64_t v19 = 0;
          if (v18) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v18);
          }
        }
        WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::advance((uint64_t)&v22);
      }
    }
    this = WebKit::RemoteLayerTreeDrawingAreaProxy::maybePauseDisplayRefreshCallbacks((WebKit::RemoteLayerTreeDrawingAreaProxy *)v5);
    if ((this & 1) == 0)
    {
      uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 8);
      if (v7) {
        uint64_t v8 = v7 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
      *(unsigned char *)(v8 + 963) = 0;
    }
  }
  return this;
}

void sub_1986B86D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, atomic_uchar **a17)
{
  if (a17) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection(WebKit::RemoteLayerTreeDrawingAreaProxy *this, IPC::Connection *a2)
{
  unint64_t v4 = (uint64_t *)((char *)this + 128);
  uint64_t v5 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((void **)this + 16);
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v14, v4, (uint64_t)v5, v6);
  uint64_t v7 = *((void *)this + 16);
  if (v7)
  {
    unsigned int v8 = *(_DWORD *)(v7 - 4);
    uint64_t v9 = v7 + 48 * v8;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int v8 = 0;
  }
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v13, v4, v9, v7 + 48 * v8);
  while (1)
  {
    if (v15 == v13[1]) {
      return (uint64_t)this + 88;
    }
    uint64_t v10 = *(IPC::Connection **)(*(void *)(*(void *)(*(void *)v15 + 8) + 48) + 144);
    if (v10 && v10 == a2) {
      break;
    }
    WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::advance((uint64_t)v14);
  }
  return v15 + 8;
}

uint64_t WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  uint64_t v5 = *a2;
  if (*a2)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    uint64_t v7 = v5 + 48 * v6;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v6 = 0;
  }
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v5 + 48 * v6;
  *(_DWORD *)(a1 + 40) = 0;
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((void *)a1);
  return a1;
}

void *WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(void *)(*(void *)v2 + 8))
  {
    v2 += 48;
    result[1] = v2;
    uint64_t v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(void *)v2 + 1) <= 1)
      {
        v2 += 48;
        result[1] = v2;
        if (v2 == v3)
        {
          uint64_t v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

void *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin(void **a1)
{
  __n128 result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[6 * v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[6 * v2];
  }
  if (v2)
  {
    uint64_t v4 = 48 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 6;
      v4 -= 48;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::maybePauseDisplayRefreshCallbacks(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  if (*((_DWORD *)this + 22) < 2u) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)((char *)this + 128);
  uint64_t v4 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::begin((void **)this + 16);
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v10, v3, (uint64_t)v4, v5);
  uint64_t v6 = *((void *)this + 16);
  if (v6)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    uint64_t v8 = v6 + 48 * v7;
  }
  else
  {
    uint64_t v8 = 0;
    unsigned int v7 = 0;
  }
  WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::WeakHashMapIteratorBase((uint64_t)v9, v3, v8, v6 + 48 * v7);
  while (v11 != v9[1])
  {
    if (*(_DWORD *)(v11 + 8) < 2u) {
      return 0;
    }
    WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::RemotePageDrawingAreaProxy,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultWeakPtrImpl>::PeekType>::advance((uint64_t)v10);
  }
  (*(void (**)(WebKit::RemoteLayerTreeDrawingAreaProxy *))(*(void *)this + 384))(this);
  return 1;
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::didRefreshDisplay(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if (*a2 == 1)
  {
    uint64_t v3 = result;
    *a2 = 0;
    uint64_t v4 = *(void *)(*(void *)(result + 48) + 144);
    if (v4)
    {
      if (v4 == a3)
      {
        uint64_t v6 = *(void *)(*(void *)(result + 40) + 8);
        if (v6) {
          uint64_t v7 = v6 - 16;
        }
        else {
          uint64_t v7 = 0;
        }
        WebKit::RemoteScrollingCoordinatorProxy::sendScrollingTreeNodeDidScroll(*(WebKit::RemoteScrollingCoordinatorProxy **)(v7 + 248));
      }
      uint64_t v8 = *(void *)(v3 + 24);
      uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v9 = 29;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      uint64_t v13 = v9;
      IPC::Connection::sendMessageImpl(a3, (uint64_t *)&v13, 0, 0);
      __n128 result = (uint64_t)v13;
      uint64_t v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
        return WTF::fastFree(v11, v12);
      }
    }
    else
    {
      __n128 result = 130;
      __break(0xC471u);
    }
  }
  else if (!*a2)
  {
    *a2 = 2;
  }
  return result;
}

void WebKit::RemoteScrollingCoordinatorProxy::sendScrollingTreeNodeDidScroll(WebKit::RemoteScrollingCoordinatorProxy *this)
{
  if (*((void *)this + 3))
  {
    uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    WebCore::ScrollingTree::takePendingScrollUpdates((uint64_t *)&v13, *((WebCore::ScrollingTree **)this + 3));
    uint64_t v6 = v15;
    if (v15)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i < v15; ++i)
      {
        uint64_t v9 = (char *)v13 + v7;
        char v10 = i == v6 - 1;
        WebCore::ScrollingTree::frameIDForScrollingNodeID();
        unint64_t v1 = v1 & 0xFFFFFFFF00000000 | *((unsigned int *)v9 + 8);
        WebKit::WebPageProxy::sendScrollPositionChangedForNode(v4, (uint64_t)v12, *(void *)v9, *((void *)v9 + 1), (uint64_t)(v9 + 16), *((void *)v9 + 3), v1, v9[37] == 2, v10);
        *((unsigned char *)this + 128) = 1;
        uint64_t v6 = v15;
        v7 += 40;
      }
    }
    uint64_t v11 = v13;
    if (v13)
    {
      uint64_t v13 = 0;
      int v14 = 0;
      WTF::fastFree(v11, v5);
    }
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
  else
  {
    *((unsigned char *)this + 128) = 0;
  }
}

void sub_1986B8D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  CFRelease(v14);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didReachLayoutMilestone(uint64_t a1, unsigned __int16 a2, double a3)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 1592))(v8);
  if ((a2 & 2) != 0) {
    (*(void (**)(uint64_t))(*(void *)v8 + 272))(v8);
  }
  if ((a2 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 184);
    if (v9)
    {
      if (*(double *)(v9 + 16) == 0.0)
      {
        *(double *)(v9 + 16) = a3;
        WebKit::WebPageProxy::generatePageLoadingTimingSoon((WebKit::WebPageProxy *)a1);
      }
    }
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v10 + 64))(v10, a1, a2);
  }
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72), a1, a2);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 1600);

  return v11(v8);
}

void WebKit::NavigationState::NavigationClient::renderingProgressDidChange(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if ((*(_DWORD *)(v4 + 32) & 0x4000000) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v4 + 24));
        if (WeakRetained)
        {
          uint64_t v8 = WeakRetained;
          uint64_t v9 = *(void *)(a1 + 8);
          if (v9) {
            uint64_t v9 = *(void *)(v9 + 8);
          }
          id v10 = objc_loadWeakRetained((id *)(v9 + 16));
          [v8 _webView:v10 renderingProgressDidChange:(a3 >> 3) & 8 | a3 & 0x1B7];
          if (v10) {
            CFRelease(v10);
          }
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_1986B9018(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerTreeHost *std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100](WebKit::RemoteLayerTreeHost **a1, WebKit::RemoteLayerTreeHost *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteLayerTreeHost::~RemoteLayerTreeHost(result, a2);
    return (WebKit::RemoteLayerTreeHost *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::PageClientImplCocoa::pageExtendedBackgroundColorWillChange(id *this)
{
  id Weak = objc_loadWeak(this + 2);

  return [Weak willChangeValueForKey:@"_pageExtendedBackgroundColor"];
}

uint64_t WebKit::PageClientImplCocoa::pageExtendedBackgroundColorDidChange(id *this)
{
  id Weak = objc_loadWeak(this + 2);

  return [Weak didChangeValueForKey:@"_pageExtendedBackgroundColor"];
}

void sub_1986B9260(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionControllerConfiguration::copy(WebKit::WebExtensionControllerConfiguration *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (WebKit::WebExtensionControllerConfiguration *)((char *)this + 16);
  if (*((_OWORD *)this + 1) == 0)
  {
    if (*((unsigned char *)this + 32))
    {
      uint64_t v5 = API::Object::newObject(0x40uLL, 115);
      WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(v5, v6, MEMORY[0x1E4F30978]);
    }
    else
    {
      uint64_t v7 = *((void *)this + 5);
      if (v7 && *(_DWORD *)(v7 + 4))
      {
        uint64_t v8 = API::Object::newObject(0x40uLL, 115);
        uint64_t v5 = v8;
        int v9 = 1;
      }
      else
      {
        uint64_t v8 = API::Object::newObject(0x40uLL, 115);
        uint64_t v5 = v8;
        int v9 = 0;
      }
      WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(v8, v9);
    }
  }
  else
  {
    uint64_t v5 = API::Object::newObject(0x40uLL, 115);
    WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration((WebKit::WebExtensionControllerConfiguration *)v5, v4);
  }
  WTF::String::operator=((uint64_t *)(v5 + 40), (WTF::StringImpl **)this + 5);
  id v10 = WTF::RetainPtr<NSSet>::get((id *)this + 6);
  uint64_t v11 = (void *)[v10 copy];
  WTF::RetainPtr<WKWebViewConfiguration>::operator=((const void **)(v5 + 48), v11);

  WebKit::WebExtensionControllerConfiguration::setDefaultWebsiteDataStore(v5, *((void *)this + 7));
  *a2 = v5;
}

void sub_1986B93B8(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

const void **WTF::RetainPtr<WKWebViewConfiguration>::operator=(const void **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }

  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }

  return a1;
}

void sub_1986B9444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::RetainPtr<NSSet>::get(id *a1)
{
  return *a1;
}

void WebKit::WebExtensionControllerConfiguration::setDefaultWebsiteDataStore(uint64_t a1, uint64_t a2)
{
  if (a2) {
    CFRetain(*(CFTypeRef *)(a2 + 8));
  }
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = a2;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

void API::Object::constructInWrapper<WebKit::WebExtensionController,WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>>(void *a1, uint64_t *a2)
{
  id v5 = a1;
  uint64_t v3 = [v5 _apiObject];
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v6 = v4;
  WebKit::WebExtensionController::WebExtensionController(v3, &v6);
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  *(void *)(v3 + 8) = v5;
}

void sub_1986B9538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionController::WebExtensionController(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E3230;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (atomic_uint *volatile *)(a1 + 24);
  *(void *)(a1 + 16) = &unk_1EE9B71B0;
  *(void *)(a1 + 32) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)a1 = &unk_1EE9E3140;
  *(void *)(a1 + 16) = &unk_1EE9E3170;
  uint64_t v5 = *a2;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a1 + 176) & 0xFC | 1;
  *(unsigned char *)(a1 + 177) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  if (byte_1EB359DB9)
  {
    uint64_t v6 = qword_1EB359DC8;
    uint64_t v7 = *(void *)(a1 + 32);
    if (qword_1EB359DC8)
    {
LABEL_4:
      int v8 = *(_DWORD *)(v6 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    qword_1EB359DC8 = 0;
    byte_1EB359DB9 = 1;
    uint64_t v7 = *(void *)(a1 + 32);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  uint64_t v6 = qword_1EB359DC8;
  if (qword_1EB359DC8) {
    goto LABEL_4;
  }
  int v8 = 0;
LABEL_5:
  unint64_t v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = (void *)(v6 + 16 * v12);
  uint64_t v14 = *v13;
  if (!*v13)
  {
LABEL_13:
    *uint64_t v13 = v7;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
    atomic_uint *volatile v18 = *v4;
    atomic_fetch_add(*v4, 1u);
    uint64_t v19 = (unsigned int *)v13[1];
    v13[1] = v18;
    if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v17);
    }
    if (qword_1EB359DC8) {
      int v20 = *(_DWORD *)(qword_1EB359DC8 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(qword_1EB359DC8 - 12) = v20;
    if (qword_1EB359DC8) {
      int v21 = *(_DWORD *)(qword_1EB359DC8 - 12);
    }
    else {
      int v21 = 0;
    }
    uint64_t v22 = (*(_DWORD *)(qword_1EB359DC8 - 16) + v21);
    unint64_t v23 = *(unsigned int *)(qword_1EB359DC8 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22) {
        goto LABEL_23;
      }
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_23;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
    goto LABEL_23;
  }
  unsigned int v15 = 0;
  int v16 = 1;
  while (v14 != v7)
  {
    if (v14 == -1) {
      unsigned int v15 = v13;
    }
    unsigned int v12 = (v12 + v16) & v8;
    uint64_t v13 = (void *)(v6 + 16 * v12);
    uint64_t v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        void *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(v6 - 16);
        uint64_t v13 = v15;
      }
      goto LABEL_13;
    }
  }
LABEL_23:
  WebKit::WebExtensionController::initializePlatform((WebKit::WebExtensionController *)a1);
  dispatch_time_t v24 = dispatch_time(0, 5000000000);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  unint64_t v25 = *(atomic_uint **)(a1 + 24);
  if (v25) {
    atomic_fetch_add(v25, 1u);
  }
  uint64_t v26 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  *uint64_t v26 = MEMORY[0x1E4F14398];
  v26[1] = 50331650;
  v26[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0>(WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0)::{lambda(void *)#1}::__invoke;
  v26[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0>(WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0)::descriptor;
  v26[4] = a1;
  v26[5] = v25;
  dispatch_after(v24, MEMORY[0x1E4F14428], v26);
  _Block_release(v26);
  return a1;
}

void WebKit::WebExtensionController::initializePlatform(WebKit::WebExtensionController *this)
{
  CFTypeRef cf = [[_WKWebExtensionControllerHelper alloc] initWithWebExtensionController:this];
  if (cf) {
    CFRetain(cf);
  }

  uint64_t v2 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = cf;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1986B993C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  uint64_t v0 = qword_1EB359DC8;
  if (qword_1EB359DC8)
  {
    int v1 = *(_DWORD *)(qword_1EB359DC8 - 4);
    int v2 = *(_DWORD *)(qword_1EB359DC8 - 12);
    if (v1)
    {
      unsigned int v3 = v1 << (6 * v2 >= (2 * v1));
      goto LABEL_6;
    }
  }
  else
  {
    int v1 = 0;
    int v2 = 0;
  }
  unsigned int v3 = 8;
LABEL_6:
  __n128 result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v3 + 16));
  qword_1EB359DC8 = (uint64_t)(result + 4);
  result[2] = v3 - 1;
  result[3] = v3;
  *__n128 result = 0;
  *(_DWORD *)(qword_1EB359DC8 - 12) = v2;
  if (v1)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = (uint64_t *)(v0 + 16 * v6);
      uint64_t v8 = *v7;
      if (*v7 != -1)
      {
        if (v8)
        {
          if (qword_1EB359DC8) {
            int v11 = *(_DWORD *)(qword_1EB359DC8 - 8);
          }
          else {
            int v11 = 0;
          }
          unint64_t v12 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
          unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
          unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
          unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
          int v16 = 1;
          do
          {
            unsigned int v17 = v15;
            uint64_t v18 = *(void *)(qword_1EB359DC8 + 16 * v15);
            unsigned int v15 = (v15 + v16++) & v11;
          }
          while (v18);
          uint64_t v19 = (uint64_t *)(qword_1EB359DC8 + 16 * v17);
          int v20 = (unsigned int *)v19[1];
          v19[1] = 0;
          if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, v5);
          }
          uint64_t *v19 = *v7;
          uint64_t v21 = v0 + 16 * v6;
          uint64_t v22 = *(void *)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          v19[1] = v22;
          unint64_t v10 = *(atomic_uint **)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          if (!v10 || atomic_fetch_add(v10, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v9 = v0 + 16 * v6;
          unint64_t v10 = *(atomic_uint **)(v9 + 8);
          *(void *)(v9 + 8) = 0;
          if (!v10 || atomic_fetch_add(v10, 0xFFFFFFFF) != 1) {
            goto LABEL_20;
          }
        }
        atomic_store(1u, (unsigned int *)v10);
        WTF::fastFree((WTF *)v10, v5);
      }
LABEL_20:
      if (++v6 == v1) {
        goto LABEL_27;
      }
    }
  }
  if (v0)
  {
LABEL_27:
    return (_DWORD *)WTF::fastFree((WTF *)(v0 - 16), v5);
  }
  return result;
}

void sub_1986B9C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WTF::StringImpl *std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory(void)::$_0 &&>>()
{
  uint64_t v0 = NSTemporaryDirectory();
  MEMORY[0x19972EAD0](&v8, v0);
  if (v8)
  {
    uint64_t v1 = *((void *)v8 + 1);
    unint64_t v2 = *((unsigned int *)v8 + 1) | ((unint64_t)((*((_DWORD *)v8 + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v1 = 0;
    unint64_t v2 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v1, v2, &v9);
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  uint64_t v5 = (WTF::StringImpl *)qword_1EB359B90;
  qword_1EB359B90 = (uint64_t)v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      uint64_t v6 = v9;
      uint64_t v9 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v3);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v5 -= 2;
      uint64_t v9 = 0;
    }
  }
  __n128 result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1986B9D8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1986B9E5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1986B9EEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionAction::wrapper(id *this)
{
  return this[1];
}

void sub_1986B9FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v12);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

API::ContentRuleListStore *API::ContentRuleListStore::ContentRuleListStore(API::ContentRuleListStore *this, const WTF::String *a2)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *(void *)this = &unk_1EE9DF2E8;
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *((void *)this + 2) = v4;
  WTF::ConcurrentWorkQueue::create();
  WTF::WorkQueue::create();
  WTF::WorkQueue::create();
  WTF::FileSystemImpl::makeAllDirectories(a2, v5);
  return this;
}

WTF::StringImpl *___ZN6WebKit16WebsiteDataStore30defaultGeneralStorageDirectoryERKN3WTF6StringE_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unint64_t v2 = v26;
  dispatch_time_t v24 = v26;
  WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(&v24, v3, 0);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v4);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  uint64_t v5 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
  if (v25) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  uint64_t v7 = (void *)[v5 contentsOfDirectoryAtPath:v6 error:0];
  uint64_t v8 = v7;
  if (v7)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v27 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v21;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v21 != v10) {
            objc_enumerationMutation(v8);
          }
          unint64_t v12 = *(void **)(*((void *)&v20 + 1) + 8 * v11);
          if ([v12 length])
          {
            if (*(void *)(a1 + 32)) {
              unint64_t v13 = (__CFString *)WTF::StringImpl::operator NSString *();
            }
            else {
              unint64_t v13 = &stru_1EEA10550;
            }
            uint64_t v14 = [(__CFString *)v13 stringByAppendingPathComponent:v12];
            if (v25) {
              unsigned int v15 = (__CFString *)WTF::StringImpl::operator NSString *();
            }
            else {
              unsigned int v15 = &stru_1EEA10550;
            }
            objc_msgSend(v5, "moveItemAtPath:toPath:error:", -[__CFString stringByAppendingPathComponent:](v15, "stringByAppendingPathComponent:", v12), v14, 0);
          }
          ++v11;
        }
        while (v9 != v11);
        uint64_t v16 = [v8 countByEnumeratingWithState:&v20 objects:v27 count:16];
        uint64_t v9 = v16;
      }
      while (v16);
    }
  }
  if (v25) {
    unsigned int v17 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unsigned int v17 = &stru_1EEA10550;
  }
  [v5 removeItemAtPath:v17 error:0];
  __n128 result = v25;
  unint64_t v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1986BA2E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0>(WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  unint64_t v2 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", 0), "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, &v15);
  uint64_t v3 = v2;
  if (v2) {
    CFRetain(v2);
  }
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:@"Caches/com.apple.WebKit.GPU/" relativeToURL:v3];
  uint64_t v15 = 0;
  uint64_t v5 = (void *)[v4 bookmarkDataWithOptions:512 includingResourceValuesForKeys:0 relativeToURL:0 error:&v15];
  uint64_t v6 = v5;
  if (v5)
  {
    CFRetain(v5);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = (const void *)[v6 bytes];
    size_t v9 = [v6 length];
  }
  else
  {
    uint64_t v8 = 0;
    size_t v9 = 0;
    uint64_t v7 = *(void *)(a1 + 32);
  }
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 80;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v16 = v10;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, v8, v9);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v16, 0, 0);
  unint64_t v12 = v16;
  uint64_t v16 = 0;
  if (!v12)
  {
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  IPC::Encoder::~Encoder(v12, v11);
  WTF::fastFree(v13, v14);
  if (v6) {
LABEL_7:
  }
    CFRelease(v6);
LABEL_8:
  if (v4) {
    CFRelease(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1986BA4E8(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v5, a2);
  WTF::fastFree(v7, v8);
  if (v4) {
    CFRelease(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(a1);
}

void ___ZN6WebKit16WebsiteDataStore44websiteDataDirectoryFileSystemRepresentationERKN3WTF6StringES4_NS0_21ShouldCreateDirectoryE_block_invoke()
{
  uint64_t v0 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, 0);
  if (v0)
  {
    uint64_t v1 = (WebKit *)[v0 URLByAppendingPathComponent:@"WebKit" isDirectory:1];
    BOOL HasContainer = WebKit::processHasContainer(v1);
    if (!HasContainer) {
      uint64_t v1 = (WebKit *)[(WebKit *)v1 URLByAppendingPathComponent:WebKit::applicationOrProcessIdentifier((WebKit *)HasContainer) isDirectory:1];
    }
    uint64_t v3 = (const void *)[(WebKit *)v1 URLByAppendingPathComponent:@"WebsiteData" isDirectory:1];
    uint64_t v4 = (uint64_t)v3;
    if (v3) {
      CFRetain(v3);
    }
    uint64_t v5 = (const void *)qword_1EB359B88;
    qword_1EB359B88 = v4;
    if (v5)
    {
      CFRelease(v5);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void ___ZN6WebKitL36defaultWebsiteDataStoreRootDirectoryEv_block_invoke()
{
  uint64_t v0 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, 0);
  if (v0)
  {
    uint64_t v1 = (WebKit *)[v0 URLByAppendingPathComponent:@"WebKit" isDirectory:1];
    BOOL HasContainer = WebKit::processHasContainer(v1);
    if (!HasContainer) {
      uint64_t v1 = (WebKit *)[(WebKit *)v1 URLByAppendingPathComponent:WebKit::applicationOrProcessIdentifier((WebKit *)HasContainer) isDirectory:1];
    }
    uint64_t v3 = (const void *)[(WebKit *)v1 URLByAppendingPathComponent:@"WebsiteDataStore" isDirectory:1];
    uint64_t v4 = (uint64_t)v3;
    if (v3) {
      CFRetain(v3);
    }
    uint64_t v5 = (const void *)qword_1EB359BA8;
    qword_1EB359BA8 = v4;
    if (v5)
    {
      CFRelease(v5);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void ___ZN6WebKit16WebsiteDataStore38cacheDirectoryFileSystemRepresentationERKN3WTF6StringES4_NS0_21ShouldCreateDirectoryE_block_invoke()
{
  uint64_t v0 = (WebKit *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 13, 1, 0, 0, 0);
  if (v0)
  {
    uint64_t v1 = v0;
    BOOL HasContainer = WebKit::processHasContainer(v0);
    if (!HasContainer) {
      uint64_t v1 = (WebKit *)[(WebKit *)v1 URLByAppendingPathComponent:WebKit::applicationOrProcessIdentifier((WebKit *)HasContainer) isDirectory:1];
    }
    uint64_t v3 = (const void *)[(WebKit *)v1 URLByAppendingPathComponent:@"WebKit" isDirectory:1];
    uint64_t v4 = (uint64_t)v3;
    if (v3) {
      CFRetain(v3);
    }
    uint64_t v5 = (const void *)qword_1EB359B78;
    qword_1EB359B78 = v4;
    if (v5)
    {
      CFRelease(v5);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(void *)a1 = &unk_1EE9E31A8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (a2)
  {
    v6[0] = 0;
    v6[16] = 0;
    WebKit::WebExtensionControllerConfiguration::createStorageDirectoryPath((WTF::UUID *)v6);
  }
  else
  {
    uint64_t v4 = (_DWORD *)*MEMORY[0x1E4F30978];
    if (*MEMORY[0x1E4F30978]) {
      *v4 += 2;
    }
    *(void *)(a1 + 40) = v4;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

WTF::StringImpl *WebKit::WebExtensionControllerConfiguration::createStorageDirectoryPath(WTF::UUID *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v3 = [v2 URLForDirectory:5 inDomain:1 appropriateForURL:0 create:0 error:0];
  uint64_t v4 = [v3 path];
  MEMORY[0x19972EAD0](&v28, v4);

  if (!v28 || !*((_DWORD *)v28 + 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1986BA9E4);
  }
  if (*((unsigned char *)a1 + 16))
  {
    WTF::UUID::toString((uint64_t *)&v29, a1);
    WTF::String::convertToASCIIUppercase((uint64_t *)&v27, (WTF::String *)&v29);
    uint64_t v6 = (WTF::StringImpl *)v29;
    *(void *)&long long v29 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        uint64_t v6 = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    uint64_t v6 = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    unint64_t v27 = (WTF::StringImpl *)v29;
  }
  if (WebKit::processHasContainer(v6))
  {
    *(void *)&long long v29 = "WebKit";
    DWORD2(v29) = 6;
    LOBYTE(v7) = 1;
    BYTE12(v29) = 1;
    long long v30 = "WebExtensions";
    int v31 = 13;
    char v32 = 1;
    uint64_t v33 = 0;
    int v8 = (int)v27;
    if (v27)
    {
      unsigned int v9 = *((unsigned __int8 *)v27 + 16);
      int v8 = *((_DWORD *)v27 + 1);
      uint64_t v33 = (const char *)*((void *)v27 + 1);
      int v7 = (v9 >> 2) & 1;
    }
    int v34 = v8;
    char v35 = v7;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v25, &v29, 3uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    uint64_t v11 = v25;
    if (v25)
    {
      unint64_t v25 = 0;
      int v26 = 0;
      WTF::fastFree(v11, v10);
    }
  }
  else
  {
    unint64_t v12 = [MEMORY[0x1E4F28B50] mainBundle];
    unint64_t v13 = [v12 bundleIdentifier];
    uint64_t v14 = v13;
    if (!v13)
    {
      uint64_t v3 = [MEMORY[0x1E4F28F80] processInfo];
      uint64_t v14 = [v3 processName];
    }
    MEMORY[0x19972EAD0](&v24, v14);
    if (!v13)
    {
    }
    LOBYTE(v15) = 1;
    *(void *)&long long v29 = "WebKit";
    DWORD2(v29) = 6;
    BYTE12(v29) = 1;
    long long v30 = 0;
    int v31 = 0;
    char v32 = 1;
    int v16 = (int)v24;
    if (v24)
    {
      unsigned int v17 = *((unsigned __int8 *)v24 + 16);
      int v16 = *((_DWORD *)v24 + 1);
      long long v30 = (const char *)*((void *)v24 + 1);
      int v15 = (v17 >> 2) & 1;
    }
    int v31 = v16;
    char v32 = v15;
    uint64_t v33 = "WebExtensions";
    int v34 = 13;
    LOBYTE(v15) = 1;
    char v35 = 1;
    uint64_t v36 = 0;
    int v37 = 0;
    char v38 = 1;
    int v18 = (int)v27;
    if (v27)
    {
      unsigned int v19 = *((unsigned __int8 *)v27 + 16);
      int v18 = *((_DWORD *)v27 + 1);
      uint64_t v36 = *((void *)v27 + 1);
      int v15 = (v19 >> 2) & 1;
    }
    int v37 = v18;
    char v38 = v15;
    WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v25, &v29, 4uLL);
    WTF::FileSystemImpl::pathByAppendingComponents();
    long long v20 = v25;
    if (v25)
    {
      unint64_t v25 = 0;
      int v26 = 0;
      WTF::fastFree(v20, v10);
    }
    long long v21 = v24;
    dispatch_time_t v24 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  long long v22 = v27;
  unint64_t v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  __n128 result = v28;
  uint64_t v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1986BACBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF *a10, int a11, WTF::StringImpl *a12, WTF::StringImpl *a13, uint64_t a14)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v18);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v18);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

BOOL WebKit::processHasContainer(WebKit *this)
{
    return WebKit::processHasContainer(void)::hasContainer != 0;
  WebKit::pathForProcessContainer((uint64_t *)&v6, this);
  uint64_t v3 = v6;
  if (v6)
  {
    int v4 = *(_DWORD *)v6;
    BOOL v5 = *((_DWORD *)v6 + 1) != 0;
    uint64_t v6 = 0;
    if (v4 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)uint64_t v3 = v4 - 2;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  BOOL result = v5;
  WebKit::processHasContainer(void)::hasContainer = v5;
  return result;
}

uint64_t *WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, long long *a2, unint64_t a3)
{
  uint64_t v3 = result;
  *BOOL result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  int v4 = a3;
  if (!(a3 >> 28))
  {
    uint64_t v6 = 16 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a3));
    *((_DWORD *)v3 + 2) = v4;
    uint64_t *v3 = v7;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      long long v9 = *a2++;
      *(_OWORD *)(*v3 + 16 * v8) = v9;
      unsigned int v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 16;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_1986BAFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Block_release(0);
  _Block_release(v10);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WebKit::WebsiteDataStore *a1)
{
  uint64_t v2 = WebKit::WebsiteDataStore::websiteDataStoreIOQueue(a1);
  uint64_t v3 = *(void *)a1;
  *(void *)a1 = 0;
  uint64_t v12 = v3;
  WebKit::defaultWebsiteDataStoreRootDirectory((WebKit *)&v11);
  WTF::String::isolatedCopy();
  int v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v4 = &unk_1EE9D2FC0;
  v4[1] = v12;
  BOOL v5 = v13;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  void v4[2] = v5;
  uint64_t v14 = v4;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 32))(v2, &v14);
  uint64_t v7 = v14;
  uint64_t v14 = 0;
  if (v7) {
    (*(void (**)(void *))(*v7 + 8))(v7);
  }
  unsigned int v8 = v13;
  unint64_t v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  BOOL result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1986BB190(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v14 = *(void *)(v12 - 24);
  *(void *)(v12 - 24) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::defaultWebsiteDataStoreRootDirectory(WebKit *this)
{
  if ((byte_1EB359B5C & 1) == 0)
  {
    qword_1EB359BA8 = 0;
    byte_1EB359B5C = 1;
  }
  if (qword_1EB359BA0 != -1) {
    dispatch_once(&qword_1EB359BA0, &__block_literal_global_232);
  }
  objc_msgSend((id)objc_msgSend((id)qword_1EB359BA8, "absoluteURL"), "path");

  JUMPOUT(0x19972EAD0);
}

uint64_t WebKit::WebsiteDataStore::websiteDataStoreIOQueue(WebKit::WebsiteDataStore *this)
{
    return WebKit::WebsiteDataStore::websiteDataStoreIOQueue(void)::queue;
  WTF::WorkQueue::create();
  uint64_t result = v2;
  WebKit::WebsiteDataStore::websiteDataStoreIOQueue(void)::queue = v2;
  return result;
}

void WebKit::WebsiteDataStore::tempDirectoryFileSystemRepresentation(void *a1, int a2)
{
  if ((_MergedGlobals_88 & 1) == 0)
  {
    qword_1EB359B68 = 0;
    _MergedGlobals_88 = 1;
  }
  if (qword_1EB359B60 != -1) {
    dispatch_once(&qword_1EB359B60, &__block_literal_global_193);
  }
  int v4 = (void *)qword_1EB359B68;
  if (*a1) {
    BOOL v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    BOOL v5 = &stru_1EEA10550;
  }
  uint64_t v6 = (void *)[v4 URLByAppendingPathComponent:v5 isDirectory:1];
  if (a2) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v6, 1, 0, 0);
  }
  objc_msgSend((id)objc_msgSend(v6, "absoluteURL"), "path");

  JUMPOUT(0x19972EAD0);
}

void WebKit::WebsiteDataStore::cacheDirectoryFileSystemRepresentation(void *a1, uint64_t a2, int a3)
{
  if ((byte_1EB359B59 & 1) == 0)
  {
    qword_1EB359B78 = 0;
    byte_1EB359B59 = 1;
  }
  if (qword_1EB359B70 != -1) {
    dispatch_once(&qword_1EB359B70, &__block_literal_global_200);
  }
  BOOL v5 = (void *)qword_1EB359B78;
  if (*a1) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  uint64_t v7 = (void *)[v5 URLByAppendingPathComponent:v6 isDirectory:1];
  if (a3) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v7, 1, 0, 0);
  }
  objc_msgSend((id)objc_msgSend(v7, "absoluteURL"), "path");

  JUMPOUT(0x19972EAD0);
}

void WebKit::WebsiteDataStore::websiteDataDirectoryFileSystemRepresentation(void *a1, uint64_t a2, int a3)
{
  if ((byte_1EB359B5A & 1) == 0)
  {
    qword_1EB359B88 = 0;
    byte_1EB359B5A = 1;
  }
  if (qword_1EB359B80 != -1) {
    dispatch_once(&qword_1EB359B80, &__block_literal_global_202);
  }
  BOOL v5 = (void *)qword_1EB359B88;
  if (*a1) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  uint64_t v7 = (void *)[v5 URLByAppendingPathComponent:v6 isDirectory:1];
  if (a3) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v7, 1, 0, 0);
  }
  objc_msgSend((id)objc_msgSend(v7, "absoluteURL"), "path");

  JUMPOUT(0x19972EAD0);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::resolveDirectoriesAsynchronously(void)::$_0,void>::call(WTF::FileSystemImpl *this, WTF::StringImpl *a2)
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  int v4 = (WTF::StringImpl **)((char *)this + 112);
  uint64_t v3 = *((void *)this + 14);
  uint64_t v5 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v6 = *(unsigned int *)(v3 + 4);
    if (v6)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v3 + 8), v6 | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32), v217);
      uint64_t v7 = v217[0];
      v217[0] = 0;
      unsigned int v8 = *v4;
      *int v4 = v7;
      if (v8)
      {
        int v9 = *(_DWORD *)v8 - 2;
        if (*(_DWORD *)v8 != 2)
        {
LABEL_7:
          *(_DWORD *)unsigned int v8 = v9;
          goto LABEL_8;
        }
        WTF::StringImpl::destroy(v8, a2);
        unsigned int v8 = v217[0];
        v217[0] = 0;
        if (v8)
        {
          int v9 = *(_DWORD *)v8 - 2;
          if (*(_DWORD *)v8 == 2)
          {
            WTF::StringImpl::destroy(v8, a2);
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
    }
  }
LABEL_8:
  uint64_t v10 = *((void *)this + 15);
  uint64_t v206 = (WTF::FileSystemImpl *)((char *)this + 120);
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t Salt = WTF::FileSystemImpl::readOrMakeSalt((WTF::FileSystemImpl *)&v212, v11);
    if ((_BYTE)v13) {
      uint64_t v14 = Salt;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v205 = v14;
    WTF::FileSystemImpl::listDirectory((uint64_t *)&v215, v206, v13);
    if (HIDWORD(v216))
    {
      int v16 = v215;
      for (unint64_t i = (WTF::Lock *)(8 * HIDWORD(v216)); i; unint64_t i = (WTF::Lock *)((char *)i - 8))
      {
        int v18 = *(WTF::StringImpl **)v16;
        if (*(void *)v16)
        {
          *(_DWORD *)v18 += 2;
          if (MEMORY[0x19972E990](v18, "v1", 2)) {
            goto LABEL_52;
          }
        }
        else if (MEMORY[0x19972E990](0, "v1", 2))
        {
          goto LABEL_55;
        }
        WebCore::SecurityOriginData::fromDatabaseIdentifier();
        if (v227)
        {
          WTF::FileSystemImpl::pathByAppendingComponent();
          WebKit::computeMediaKeyFile((WebKit *)&v210, v211);
          if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v210, v19))
          {
            if (!v227) {
              goto LABEL_328;
            }
            WebCore::StorageUtilities::encodeSecurityOriginForFileName();
            WTF::FileSystemImpl::pathByAppendingComponent();
            if (WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v211, (const WTF::String *)&v208, v21))
            {
              WTF::FileSystemImpl::pathByAppendingComponent();
              if (!v227
                || (LOBYTE(v217[0]) = 0,
                    LODWORD(v217[3]) = -1,
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v217, (uint64_t)v225), !v227))
              {
LABEL_328:
                __break(1u);
                goto LABEL_329;
              }
              LOBYTE(v217[4]) = 0;
              LODWORD(v219) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v217[4], (uint64_t)v225);
              WebCore::StorageUtilities::writeOriginToFile((WebCore::StorageUtilities *)&v207, (const WTF::String *)v217, v22);
              if (v219 != -1) {
                ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v219])(&v214, &v217[4]);
              }
              LODWORD(v219) = -1;
              if (LODWORD(v217[3]) != -1) {
                ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[LODWORD(v217[3])])(&v214, v217);
              }
              long long v23 = v207;
              uint64_t v207 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, v15);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
            }
            dispatch_time_t v24 = v208;
            SessionID v208 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2) {
                WTF::StringImpl::destroy(v24, v15);
              }
              else {
                *(_DWORD *)v24 -= 2;
              }
            }
            unint64_t v25 = v209;
            uint64_t v209 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v15);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          else
          {
            WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v211, v20);
          }
          int v26 = v210;
          uint64_t v210 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v15);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          unint64_t v27 = v211;
          int v211 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v15);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          if (v227 && v226 != -1) {
            ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_9[v226])(v217, v225);
          }
        }
        if (v18)
        {
LABEL_52:
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v15);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
LABEL_55:
        int v16 = (WTF::StringImpl *)((char *)v16 + 8);
      }
    }
    uint64_t v28 = v213;
    if (v213) {
      *(_DWORD *)v213 += 2;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v215, v15);
    long long v30 = v212;
    int v212 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v29);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
    int v31 = v213;
    uint64_t v213 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v29);
        if (v28) {
          goto LABEL_70;
        }
        goto LABEL_80;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (v28)
    {
LABEL_70:
      uint64_t v32 = *((void *)v28 + 1);
      unsigned int v33 = *((_DWORD *)v28 + 1);
      unint64_t v34 = ((unint64_t)*((unsigned int *)v28 + 4) >> 2) & 1;
      goto LABEL_71;
    }
LABEL_80:
    uint64_t v32 = 0;
    unsigned int v33 = 0;
    unint64_t v34 = 1;
LABEL_71:
    WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v32, v33 | (v34 << 32), v217);
    char v35 = v217[0];
    v217[0] = 0;
    uint64_t v36 = *(WTF::StringImpl **)v206;
    *(void *)uint64_t v206 = v35;
    if (!v36) {
      goto LABEL_76;
    }
    int v37 = *(_DWORD *)v36 - 2;
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, a2);
      uint64_t v36 = v217[0];
      v217[0] = 0;
      if (!v36) {
        goto LABEL_76;
      }
      int v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, a2);
        if (!v28) {
          goto LABEL_82;
        }
LABEL_77:
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, a2);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
        goto LABEL_82;
      }
    }
    *(_DWORD *)uint64_t v36 = v37;
LABEL_76:
    if (!v28) {
      goto LABEL_82;
    }
    goto LABEL_77;
  }
LABEL_82:
  uint64_t v39 = (WTF::StringImpl **)((char *)this + 88);
  uint64_t v38 = *((void *)this + 11);
  if (v38)
  {
    uint64_t v40 = *(unsigned int *)(v38 + 4);
    if (v40)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v38 + 8), v40 | ((unint64_t)((*(_DWORD *)(v38 + 16) >> 2) & 1) << 32), v217);
      uint64_t v41 = v217[0];
      v217[0] = 0;
      uint64_t v42 = *v39;
      void *v39 = v41;
      if (v42)
      {
        int v43 = *(_DWORD *)v42 - 2;
        if (*(_DWORD *)v42 != 2)
        {
LABEL_88:
          *(_DWORD *)uint64_t v42 = v43;
          goto LABEL_89;
        }
        WTF::StringImpl::destroy(v42, a2);
        uint64_t v42 = v217[0];
        v217[0] = 0;
        if (v42)
        {
          int v43 = *(_DWORD *)v42 - 2;
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::destroy(v42, a2);
            goto LABEL_89;
          }
          goto LABEL_88;
        }
      }
    }
  }
LABEL_89:
  uint64_t v45 = (WTF::StringImpl **)((char *)this + 40);
  uint64_t v44 = *((void *)this + 5);
  if (v44)
  {
    uint64_t v46 = *(unsigned int *)(v44 + 4);
    if (v46)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v44 + 8), v46 | ((unint64_t)((*(_DWORD *)(v44 + 16) >> 2) & 1) << 32), v217);
      uint64_t v47 = v217[0];
      v217[0] = 0;
      char v48 = *v45;
      unsigned __int8 *v45 = v47;
      if (v48)
      {
        int v49 = *(_DWORD *)v48 - 2;
        if (*(_DWORD *)v48 != 2)
        {
LABEL_95:
          *(_DWORD *)char v48 = v49;
          goto LABEL_96;
        }
        WTF::StringImpl::destroy(v48, a2);
        char v48 = v217[0];
        v217[0] = 0;
        if (v48)
        {
          int v49 = *(_DWORD *)v48 - 2;
          if (*(_DWORD *)v48 == 2)
          {
            WTF::StringImpl::destroy(v48, a2);
            goto LABEL_96;
          }
          goto LABEL_95;
        }
      }
    }
  }
LABEL_96:
  char v51 = (WTF::StringImpl **)((char *)this + 104);
  uint64_t v50 = *((void *)this + 13);
  if (v50)
  {
    uint64_t v52 = *(unsigned int *)(v50 + 4);
    if (v52)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v50 + 8), v52 | ((unint64_t)((*(_DWORD *)(v50 + 16) >> 2) & 1) << 32), v217);
      char v53 = v217[0];
      v217[0] = 0;
      char v54 = *v51;
      *char v51 = v53;
      if (v54)
      {
        int v55 = *(_DWORD *)v54 - 2;
        if (*(_DWORD *)v54 != 2)
        {
LABEL_102:
          *(_DWORD *)char v54 = v55;
          goto LABEL_103;
        }
        WTF::StringImpl::destroy(v54, a2);
        char v54 = v217[0];
        v217[0] = 0;
        if (v54)
        {
          int v55 = *(_DWORD *)v54 - 2;
          if (*(_DWORD *)v54 == 2)
          {
            WTF::StringImpl::destroy(v54, a2);
            goto LABEL_103;
          }
          goto LABEL_102;
        }
      }
    }
  }
LABEL_103:
  uint64_t v57 = (WTF::StringImpl **)((char *)this + 64);
  uint64_t v56 = *((void *)this + 8);
  if (v56)
  {
    uint64_t v58 = *(unsigned int *)(v56 + 4);
    if (v58)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v56 + 8), v58 | ((unint64_t)((*(_DWORD *)(v56 + 16) >> 2) & 1) << 32), v217);
      long long v59 = v217[0];
      v217[0] = 0;
      char v60 = *v57;
      *uint64_t v57 = v59;
      if (v60)
      {
        int v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 != 2)
        {
LABEL_109:
          *(_DWORD *)char v60 = v61;
          goto LABEL_110;
        }
        WTF::StringImpl::destroy(v60, a2);
        char v60 = v217[0];
        v217[0] = 0;
        if (v60)
        {
          int v61 = *(_DWORD *)v60 - 2;
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::destroy(v60, a2);
            goto LABEL_110;
          }
          goto LABEL_109;
        }
      }
    }
  }
LABEL_110:
  char v63 = (WTF::StringImpl **)((char *)this + 128);
  uint64_t v62 = *((void *)this + 16);
  if (v62)
  {
    uint64_t v64 = *(unsigned int *)(v62 + 4);
    if (v64)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v62 + 8), v64 | ((unint64_t)((*(_DWORD *)(v62 + 16) >> 2) & 1) << 32), v217);
      uint64_t v65 = v217[0];
      v217[0] = 0;
      int v66 = *v63;
      *char v63 = v65;
      if (v66)
      {
        int v67 = *(_DWORD *)v66 - 2;
        if (*(_DWORD *)v66 != 2)
        {
LABEL_116:
          *(_DWORD *)int v66 = v67;
          goto LABEL_117;
        }
        WTF::StringImpl::destroy(v66, a2);
        int v66 = v217[0];
        v217[0] = 0;
        if (v66)
        {
          int v67 = *(_DWORD *)v66 - 2;
          if (*(_DWORD *)v66 == 2)
          {
            WTF::StringImpl::destroy(v66, a2);
            goto LABEL_117;
          }
          goto LABEL_116;
        }
      }
    }
  }
LABEL_117:
  int v69 = (WTF::StringImpl **)((char *)this + 136);
  uint64_t v68 = *((void *)this + 17);
  if (v68)
  {
    uint64_t v70 = *(unsigned int *)(v68 + 4);
    if (v70)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v68 + 8), v70 | ((unint64_t)((*(_DWORD *)(v68 + 16) >> 2) & 1) << 32), v217);
      uint64_t v71 = v217[0];
      v217[0] = 0;
      uint64_t v72 = *v69;
      *int v69 = v71;
      if (v72)
      {
        int v73 = *(_DWORD *)v72 - 2;
        if (*(_DWORD *)v72 != 2)
        {
LABEL_123:
          *(_DWORD *)uint64_t v72 = v73;
          goto LABEL_124;
        }
        WTF::StringImpl::destroy(v72, a2);
        uint64_t v72 = v217[0];
        v217[0] = 0;
        if (v72)
        {
          int v73 = *(_DWORD *)v72 - 2;
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::destroy(v72, a2);
            goto LABEL_124;
          }
          goto LABEL_123;
        }
      }
    }
  }
LABEL_124:
  uint64_t v75 = (WTF::StringImpl **)((char *)this + 152);
  uint64_t v74 = *((void *)this + 19);
  if (v74)
  {
    uint64_t v76 = *(unsigned int *)(v74 + 4);
    if (v76)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v74 + 8), v76 | ((unint64_t)((*(_DWORD *)(v74 + 16) >> 2) & 1) << 32), v217);
      uint64_t v77 = v217[0];
      v217[0] = 0;
      uint64_t v78 = *v75;
      *uint64_t v75 = v77;
      if (v78)
      {
        int v79 = *(_DWORD *)v78 - 2;
        if (*(_DWORD *)v78 != 2)
        {
LABEL_130:
          *(_DWORD *)uint64_t v78 = v79;
          goto LABEL_131;
        }
        WTF::StringImpl::destroy(v78, a2);
        uint64_t v78 = v217[0];
        v217[0] = 0;
        if (v78)
        {
          int v79 = *(_DWORD *)v78 - 2;
          if (*(_DWORD *)v78 == 2)
          {
            WTF::StringImpl::destroy(v78, a2);
            goto LABEL_131;
          }
          goto LABEL_130;
        }
      }
    }
  }
LABEL_131:
  uint64_t v80 = *((void *)this + 12);
  uint64_t v204 = (WTF::StringImpl **)((char *)this + 96);
  if (v80)
  {
    uint64_t v81 = *(unsigned int *)(v80 + 4);
    if (v81)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v80 + 8), v81 | ((unint64_t)((*(_DWORD *)(v80 + 16) >> 2) & 1) << 32), v217);
      uint64_t v82 = v217[0];
      v217[0] = 0;
      long long v83 = *v204;
      void *v204 = v82;
      if (v83)
      {
        int v84 = *(_DWORD *)v83 - 2;
        if (*(_DWORD *)v83 != 2)
        {
LABEL_137:
          *(_DWORD *)long long v83 = v84;
          goto LABEL_138;
        }
        WTF::StringImpl::destroy(v83, a2);
        long long v83 = v217[0];
        v217[0] = 0;
        if (v83)
        {
          int v84 = *(_DWORD *)v83 - 2;
          if (*(_DWORD *)v83 == 2)
          {
            WTF::StringImpl::destroy(v83, a2);
            goto LABEL_138;
          }
          goto LABEL_137;
        }
      }
    }
  }
LABEL_138:
  uint64_t v85 = *((void *)this + 6);
  uint64_t v203 = (WTF::StringImpl **)((char *)this + 48);
  if (v85)
  {
    uint64_t v86 = *(unsigned int *)(v85 + 4);
    if (v86)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v85 + 8), v86 | ((unint64_t)((*(_DWORD *)(v85 + 16) >> 2) & 1) << 32), v217);
      uint64_t v87 = v217[0];
      v217[0] = 0;
      uint64_t v88 = *v203;
      WTF::StringImpl *v203 = v87;
      if (v88)
      {
        int v89 = *(_DWORD *)v88 - 2;
        if (*(_DWORD *)v88 != 2)
        {
LABEL_144:
          *(_DWORD *)uint64_t v88 = v89;
          goto LABEL_145;
        }
        WTF::StringImpl::destroy(v88, a2);
        uint64_t v88 = v217[0];
        v217[0] = 0;
        if (v88)
        {
          int v89 = *(_DWORD *)v88 - 2;
          if (*(_DWORD *)v88 == 2)
          {
            WTF::StringImpl::destroy(v88, a2);
            goto LABEL_145;
          }
          goto LABEL_144;
        }
      }
    }
  }
LABEL_145:
  uint64_t v90 = *((void *)this + 10);
  uint64_t v202 = (WTF::StringImpl **)((char *)this + 80);
  if (v90)
  {
    uint64_t v91 = *(unsigned int *)(v90 + 4);
    if (v91)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v90 + 8), v91 | ((unint64_t)((*(_DWORD *)(v90 + 16) >> 2) & 1) << 32), v217);
      unsigned int v92 = v217[0];
      v217[0] = 0;
      uint64_t v93 = *v202;
      void *v202 = v92;
      if (v93)
      {
        int v94 = *(_DWORD *)v93 - 2;
        if (*(_DWORD *)v93 != 2)
        {
LABEL_151:
          *(_DWORD *)uint64_t v93 = v94;
          goto LABEL_152;
        }
        WTF::StringImpl::destroy(v93, a2);
        uint64_t v93 = v217[0];
        v217[0] = 0;
        if (v93)
        {
          int v94 = *(_DWORD *)v93 - 2;
          if (*(_DWORD *)v93 == 2)
          {
            WTF::StringImpl::destroy(v93, a2);
            goto LABEL_152;
          }
          goto LABEL_151;
        }
      }
    }
  }
LABEL_152:
  int v96 = (WTF::StringImpl **)((char *)this + 72);
  uint64_t v95 = *((void *)this + 9);
  if (v95)
  {
    uint64_t v97 = *(unsigned int *)(v95 + 4);
    if (v97)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v95 + 8), v97 | ((unint64_t)((*(_DWORD *)(v95 + 16) >> 2) & 1) << 32), v217);
      uint64_t v98 = v217[0];
      v217[0] = 0;
      uint64_t v99 = *v96;
      *int v96 = v98;
      if (v99)
      {
        int v100 = *(_DWORD *)v99 - 2;
        if (*(_DWORD *)v99 != 2)
        {
LABEL_158:
          *(_DWORD *)uint64_t v99 = v100;
          goto LABEL_159;
        }
        WTF::StringImpl::destroy(v99, a2);
        uint64_t v99 = v217[0];
        v217[0] = 0;
        if (v99)
        {
          int v100 = *(_DWORD *)v99 - 2;
          if (*(_DWORD *)v99 == 2)
          {
            WTF::StringImpl::destroy(v99, a2);
            goto LABEL_159;
          }
          goto LABEL_158;
        }
      }
    }
  }
LABEL_159:
  uint64_t v101 = *((void *)this + 18);
  uint64_t v201 = (WTF::StringImpl **)((char *)this + 144);
  if (v101)
  {
    uint64_t v102 = *(unsigned int *)(v101 + 4);
    if (v102)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v101 + 8), v102 | ((unint64_t)((*(_DWORD *)(v101 + 16) >> 2) & 1) << 32), v217);
      CGFloat v103 = v217[0];
      v217[0] = 0;
      uint64_t v104 = *v201;
      WTF::StringImpl *v201 = v103;
      if (v104)
      {
        int v105 = *(_DWORD *)v104 - 2;
        if (*(_DWORD *)v104 != 2)
        {
LABEL_165:
          *(_DWORD *)uint64_t v104 = v105;
          goto LABEL_166;
        }
        WTF::StringImpl::destroy(v104, a2);
        uint64_t v104 = v217[0];
        v217[0] = 0;
        if (v104)
        {
          int v105 = *(_DWORD *)v104 - 2;
          if (*(_DWORD *)v104 == 2)
          {
            WTF::StringImpl::destroy(v104, a2);
            goto LABEL_166;
          }
          goto LABEL_165;
        }
      }
    }
  }
LABEL_166:
  unsigned __int8 v106 = *v96;
  if (*v96)
  {
    uint64_t v107 = *((unsigned int *)v106 + 1);
    if (v107)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*((void *)v106 + 1), v107 | ((unint64_t)((*((_DWORD *)v106 + 4) >> 2) & 1) << 32), v217);
      CATransform3D v108 = v217[0];
      v217[0] = 0;
      char v109 = *v96;
      *int v96 = v108;
      if (v109)
      {
        int v110 = *(_DWORD *)v109 - 2;
        if (*(_DWORD *)v109 != 2)
        {
LABEL_172:
          *(_DWORD *)char v109 = v110;
          goto LABEL_173;
        }
        WTF::StringImpl::destroy(v109, a2);
        char v109 = v217[0];
        v217[0] = 0;
        if (v109)
        {
          int v110 = *(_DWORD *)v109 - 2;
          if (*(_DWORD *)v109 == 2)
          {
            WTF::StringImpl::destroy(v109, a2);
            goto LABEL_173;
          }
          goto LABEL_172;
        }
      }
    }
  }
LABEL_173:
  uint64_t v112 = (WTF::StringImpl **)((char *)this + 168);
  uint64_t v111 = *((void *)this + 21);
  if (v111)
  {
    uint64_t v113 = *(unsigned int *)(v111 + 4);
    if (v113)
    {
      WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(*(void *)(v111 + 8), v113 | ((unint64_t)((*(_DWORD *)(v111 + 16) >> 2) & 1) << 32), v217);
      char v114 = v217[0];
      v217[0] = 0;
      int v115 = *v112;
      WTF *v112 = v114;
      if (v115)
      {
        int v116 = *(_DWORD *)v115 - 2;
        if (*(_DWORD *)v115 != 2)
        {
LABEL_179:
          *(_DWORD *)int v115 = v116;
          goto LABEL_180;
        }
        WTF::StringImpl::destroy(v115, a2);
        int v115 = v217[0];
        v217[0] = 0;
        if (v115)
        {
          int v116 = *(_DWORD *)v115 - 2;
          if (*(_DWORD *)v115 == 2)
          {
            WTF::StringImpl::destroy(v115, a2);
            goto LABEL_180;
          }
          goto LABEL_179;
        }
      }
    }
  }
LABEL_180:
  uint64_t v118 = (WTF::FileSystemImpl *)((char *)this + 56);
  uint64_t v117 = *((void *)this + 7);
  if (v117 && *(_DWORD *)(v117 + 4))
  {
    WTF::FileSystemImpl::parentPath(v225, (WTF::FileSystemImpl *)((char *)this + 56), a2);
    if (v225[0])
    {
      uint64_t v119 = *(void *)(v225[0] + 8);
      unint64_t v120 = *(unsigned int *)(v225[0] + 4) | ((unint64_t)((*(_DWORD *)(v225[0] + 16) >> 2) & 1) << 32);
    }
    else
    {
      uint64_t v119 = 0;
      unint64_t v120 = 0x100000000;
    }
    WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v119, v120, v217);
    long long v122 = (WTF::StringImpl *)v225[0];
    v225[0] = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2) {
        WTF::StringImpl::destroy(v122, v121);
      }
      else {
        *(_DWORD *)v122 -= 2;
      }
    }
    WTF::FileSystemImpl::pathFileName((uint64_t *)&v215, v118, v121);
    WTF::FileSystemImpl::pathByAppendingComponent();
    uint64_t v124 = v225[0];
    v225[0] = 0;
    long long v125 = *(WTF::StringImpl **)v118;
    *(void *)uint64_t v118 = v124;
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
      {
        WTF::StringImpl::destroy(v125, v123);
        char v126 = (WTF::StringImpl *)v225[0];
        v225[0] = 0;
        if (v126)
        {
          if (*(_DWORD *)v126 == 2) {
            WTF::StringImpl::destroy(v126, v123);
          }
          else {
            *(_DWORD *)v126 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v125 -= 2;
        v225[0] = 0;
      }
    }
    char v127 = v215;
    uint64_t v215 = 0;
    if (v127)
    {
      if (*(_DWORD *)v127 == 2) {
        WTF::StringImpl::destroy(v127, v123);
      }
      else {
        *(_DWORD *)v127 -= 2;
      }
    }
    uint64_t v128 = v217[0];
    v217[0] = 0;
    if (v128)
    {
      if (*(_DWORD *)v128 == 2) {
        WTF::StringImpl::destroy(v128, v123);
      }
      else {
        *(_DWORD *)v128 -= 2;
      }
    }
  }
  if (*((unsigned char *)this + 176))
  {
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v215, (_DWORD **)v217, 3uLL);
    long long v129 = v215;
    uint64_t v200 = v216;
    uint64_t v215 = 0;
    uint64_t v216 = 0;
    v225[0] = (uint64_t)v129;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v215, v130);
    for (uint64_t j = 2; j != -1; --j)
    {
      int v133 = v217[j];
      v217[j] = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2) {
          WTF::StringImpl::destroy(v133, v131);
        }
        else {
          *(_DWORD *)v133 -= 2;
        }
      }
    }
  }
  else
  {
    long long v129 = 0;
    uint64_t v200 = 0;
  }
  uint64_t v134 = *(void *)(v5 + 280);
  (*(void (**)(uint64_t))(*(void *)v134 + 48))(v134);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v225[0] = 0;
  v217[3] = v129;
  v225[1] = 0;
  v217[4] = v200;
  uint64_t v135 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v135 = &unk_1EE9E5E38;
  *(WTF::StringImpl **)(v135 + 8) = v217[0];
  *(WTF::StringImpl **)(v135 + 16) = v217[1];
  *(WTF::StringImpl **)(v135 + 24) = v217[2];
  char v136 = v217[3];
  memset(v217, 0, 32);
  *(void *)(v135 + 32) = v136;
  uint64_t v137 = v217[4];
  v217[4] = 0;
  *(void *)(v135 + 40) = v137;
  uint64_t v215 = (WTF::StringImpl *)v135;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v134 + 32))(v134, &v215);
  char v139 = v215;
  uint64_t v215 = 0;
  if (v139) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v139 + 8))(v139);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v217[3], v138);
  uint64_t v141 = v217[2];
  v217[2] = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2) {
      WTF::StringImpl::destroy(v141, v140);
    }
    else {
      *(_DWORD *)v141 -= 2;
    }
  }
  __int16 v142 = v217[1];
  v217[1] = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2) {
      WTF::StringImpl::destroy(v142, v140);
    }
    else {
      *(_DWORD *)v142 -= 2;
    }
  }
  long long v143 = v217[0];
  v217[0] = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2) {
      WTF::StringImpl::destroy(v143, v140);
    }
    else {
      *(_DWORD *)v143 -= 2;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v134 + 56))(v134);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v225, v144);
  char v145 = 0;
  unint64_t i = (WTF::Lock *)(v5 + 32);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 32), (unsigned __int8 *)&v145, 1u, memory_order_acquire, memory_order_acquire);
  if (v145) {
LABEL_329:
  }
    MEMORY[0x19972E8D0](i);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  int v147 = *(unsigned __int8 *)(v5 + 192);
  uint64_t v148 = v217[0];
  v217[0] = 0;
  if (v147)
  {
    char v149 = *(WTF::StringImpl **)(v5 + 40);
    *(void *)(v5 + 40) = v148;
    if (v149)
    {
      if (*(_DWORD *)v149 == 2) {
        WTF::StringImpl::destroy(v149, v146);
      }
      else {
        *(_DWORD *)v149 -= 2;
      }
    }
    unint64_t v159 = v217[1];
    v217[1] = 0;
    uint64_t v160 = *(WTF::StringImpl **)(v5 + 48);
    *(void *)(v5 + 48) = v159;
    if (v160)
    {
      if (*(_DWORD *)v160 == 2) {
        WTF::StringImpl::destroy(v160, v146);
      }
      else {
        *(_DWORD *)v160 -= 2;
      }
    }
    uint64_t v161 = v217[2];
    v217[2] = 0;
    uint64_t v162 = *(WTF::StringImpl **)(v5 + 56);
    *(void *)(v5 + 56) = v161;
    if (v162)
    {
      if (*(_DWORD *)v162 == 2) {
        WTF::StringImpl::destroy(v162, v146);
      }
      else {
        *(_DWORD *)v162 -= 2;
      }
    }
    uint64_t v163 = v217[3];
    v217[3] = 0;
    uint64_t v164 = *(WTF::StringImpl **)(v5 + 64);
    *(void *)(v5 + 64) = v163;
    if (v164)
    {
      if (*(_DWORD *)v164 == 2) {
        WTF::StringImpl::destroy(v164, v146);
      }
      else {
        *(_DWORD *)v164 -= 2;
      }
    }
    unint64_t v165 = v217[4];
    v217[4] = 0;
    uint64_t v166 = *(WTF::StringImpl **)(v5 + 72);
    *(void *)(v5 + 72) = v165;
    if (v166)
    {
      if (*(_DWORD *)v166 == 2) {
        WTF::StringImpl::destroy(v166, v146);
      }
      else {
        *(_DWORD *)v166 -= 2;
      }
    }
    uint64_t v167 = v218;
    *(void *)&long long v218 = 0;
    long long v168 = *(WTF::StringImpl **)(v5 + 80);
    *(void *)(v5 + 80) = v167;
    if (v168)
    {
      if (*(_DWORD *)v168 == 2) {
        WTF::StringImpl::destroy(v168, v146);
      }
      else {
        *(_DWORD *)v168 -= 2;
      }
    }
    uint64_t v169 = *((void *)&v218 + 1);
    *((void *)&v218 + 1) = 0;
    long long v170 = *(WTF::StringImpl **)(v5 + 88);
    *(void *)(v5 + 88) = v169;
    if (v170)
    {
      if (*(_DWORD *)v170 == 2) {
        WTF::StringImpl::destroy(v170, v146);
      }
      else {
        *(_DWORD *)v170 -= 2;
      }
    }
    uint64_t v171 = v219;
    *(void *)&long long v219 = 0;
    uint64_t v172 = *(WTF::StringImpl **)(v5 + 96);
    *(void *)(v5 + 96) = v171;
    if (v172)
    {
      if (*(_DWORD *)v172 == 2) {
        WTF::StringImpl::destroy(v172, v146);
      }
      else {
        *(_DWORD *)v172 -= 2;
      }
    }
    uint64_t v173 = *((void *)&v219 + 1);
    *((void *)&v219 + 1) = 0;
    unsigned __int16 v174 = *(WTF::StringImpl **)(v5 + 104);
    *(void *)(v5 + 104) = v173;
    if (v174)
    {
      if (*(_DWORD *)v174 == 2) {
        WTF::StringImpl::destroy(v174, v146);
      }
      else {
        *(_DWORD *)v174 -= 2;
      }
    }
    uint64_t v175 = v220;
    *(void *)&long long v220 = 0;
    int v176 = *(WTF::StringImpl **)(v5 + 112);
    *(void *)(v5 + 112) = v175;
    if (v176)
    {
      if (*(_DWORD *)v176 == 2) {
        WTF::StringImpl::destroy(v176, v146);
      }
      else {
        *(_DWORD *)v176 -= 2;
      }
    }
    uint64_t v177 = *((void *)&v220 + 1);
    *((void *)&v220 + 1) = 0;
    v178 = *(WTF::StringImpl **)(v5 + 120);
    *(void *)(v5 + 120) = v177;
    if (v178)
    {
      if (*(_DWORD *)v178 == 2) {
        WTF::StringImpl::destroy(v178, v146);
      }
      else {
        *(_DWORD *)v178 -= 2;
      }
    }
    uint64_t v179 = v221;
    *(void *)&long long v221 = 0;
    uint64_t v180 = *(WTF::StringImpl **)(v5 + 128);
    *(void *)(v5 + 128) = v179;
    if (v180)
    {
      if (*(_DWORD *)v180 == 2) {
        WTF::StringImpl::destroy(v180, v146);
      }
      else {
        *(_DWORD *)v180 -= 2;
      }
    }
    uint64_t v181 = *((void *)&v221 + 1);
    *((void *)&v221 + 1) = 0;
    uint64_t v182 = *(WTF::StringImpl **)(v5 + 136);
    *(void *)(v5 + 136) = v181;
    if (v182)
    {
      if (*(_DWORD *)v182 == 2) {
        WTF::StringImpl::destroy(v182, v146);
      }
      else {
        *(_DWORD *)v182 -= 2;
      }
    }
    uint64_t v183 = v222;
    *(void *)&long long v222 = 0;
    char v184 = *(WTF::StringImpl **)(v5 + 144);
    *(void *)(v5 + 144) = v183;
    if (v184)
    {
      if (*(_DWORD *)v184 == 2) {
        WTF::StringImpl::destroy(v184, v146);
      }
      else {
        *(_DWORD *)v184 -= 2;
      }
    }
    uint64_t v185 = *((void *)&v222 + 1);
    *((void *)&v222 + 1) = 0;
    uint64_t v186 = *(WTF::StringImpl **)(v5 + 152);
    *(void *)(v5 + 152) = v185;
    if (v186)
    {
      if (*(_DWORD *)v186 == 2) {
        WTF::StringImpl::destroy(v186, v146);
      }
      else {
        *(_DWORD *)v186 -= 2;
      }
    }
    uint64_t v187 = v223;
    *(void *)&long long v223 = 0;
    char v188 = *(WTF::StringImpl **)(v5 + 160);
    *(void *)(v5 + 160) = v187;
    if (v188)
    {
      if (*(_DWORD *)v188 == 2) {
        WTF::StringImpl::destroy(v188, v146);
      }
      else {
        *(_DWORD *)v188 -= 2;
      }
    }
    uint64_t v189 = *((void *)&v223 + 1);
    *((void *)&v223 + 1) = 0;
    uint64_t v190 = *(WTF::StringImpl **)(v5 + 168);
    *(void *)(v5 + 168) = v189;
    if (v190)
    {
      if (*(_DWORD *)v190 == 2) {
        WTF::StringImpl::destroy(v190, v146);
      }
      else {
        *(_DWORD *)v190 -= 2;
      }
    }
    uint64_t v191 = v224;
    *(void *)&long long v224 = 0;
    uint64_t v192 = *(WTF::StringImpl **)(v5 + 176);
    *(void *)(v5 + 176) = v191;
    if (v192)
    {
      if (*(_DWORD *)v192 == 2) {
        WTF::StringImpl::destroy(v192, v146);
      }
      else {
        *(_DWORD *)v192 -= 2;
      }
    }
    uint64_t v193 = *((void *)&v224 + 1);
    *((void *)&v224 + 1) = 0;
    uint64_t v194 = *(WTF::StringImpl **)(v5 + 184);
    *(void *)(v5 + 184) = v193;
    if (v194)
    {
      if (*(_DWORD *)v194 == 2) {
        WTF::StringImpl::destroy(v194, v146);
      }
      else {
        *(_DWORD *)v194 -= 2;
      }
    }
  }
  else
  {
    *(void *)(v5 + 40) = v148;
    long long v150 = *(_OWORD *)&v217[1];
    memset(&v217[1], 0, 32);
    long long v151 = *(_OWORD *)&v217[3];
    *(_OWORD *)(v5 + 48) = v150;
    *(_OWORD *)(v5 + 64) = v151;
    long long v152 = v218;
    long long v218 = 0u;
    long long v153 = v219;
    long long v219 = 0u;
    *(_OWORD *)(v5 + 80) = v152;
    *(_OWORD *)(v5 + 96) = v153;
    long long v154 = v220;
    long long v220 = 0u;
    long long v155 = v221;
    long long v221 = 0u;
    *(_OWORD *)(v5 + 112) = v154;
    *(_OWORD *)(v5 + 128) = v155;
    long long v156 = v222;
    long long v222 = 0u;
    long long v157 = v223;
    long long v223 = 0u;
    *(_OWORD *)(v5 + 144) = v156;
    *(_OWORD *)(v5 + 160) = v157;
    long long v158 = v224;
    long long v224 = 0u;
    *(_OWORD *)(v5 + 176) = v158;
    *(unsigned char *)(v5 + 192) = 1;
  }
  WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration::Directories *)v217, v146);
  *(void *)(v5 + 200) = v205;
  uint64_t v195 = (WTF::RunLoop *)WTF::Condition::notifyOne((WTF::Condition *)(v5 + 33));
  int v196 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 32), (unsigned __int8 *)&v196, 0, memory_order_release, memory_order_relaxed);
  if (v196 != 1) {
    uint64_t v195 = (WTF::RunLoop *)WTF::Lock::unlockSlow(i);
  }
  WTF::RunLoop::main(v195);
  uint64_t v197 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  uint64_t v198 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v198 = &unk_1EE9E5E10;
  *((void *)v198 + 1) = v197;
  v217[0] = v198;
  WTF::RunLoop::dispatch();
  uint64_t result = v217[0];
  v217[0] = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v7 = 0;
  WTF::StringView::createNSStringWithoutCopying((uint64_t *)&cf, (WTF::StringView *)v8);
  int v4 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
  if ([v4 createDirectoryAtPath:cf withIntermediateDirectories:1 attributes:0 error:&v7])
  {
    WebKit::resolvePathForSandboxExtension(a3);
  }
  else
  {
    NSLog(&cfstr_CouldNotCreate.isa, cf, v7);
    *a3 = 0;
  }
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1986BCD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::resolvePathForSandboxExtension@<X0>(WTF::StringImpl **a1@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebKit::stringByResolvingSymlinksInPath();
  if (v7)
  {
    *a1 = v7;
  }
  else
  {
    uint64_t v3 = qword_1EB358488;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1EB358488, OS_LOG_TYPE_ERROR);
    if (result)
    {
      WTF::String::utf8();
      if (v6) {
        int v4 = (char *)v6 + 16;
      }
      else {
        int v4 = 0;
      }
      *(_DWORD *)buf = 136315394;
      int v9 = v4;
      __int16 v10 = 1024;
      int v11 = 0;
      _os_log_error_impl(&dword_1985F2000, v3, OS_LOG_TYPE_ERROR, "Could not create a valid file system representation for the string '%s' of length %u", buf, 0x12u);
      if (v6)
      {
        if (*(_DWORD *)v6 == 1) {
          WTF::fastFree(v6, v5);
        }
        else {
          --*(_DWORD *)v6;
        }
      }
      uint64_t result = 0;
      *a1 = 0;
    }
    else
    {
      *a1 = 0;
    }
  }
  return result;
}

void sub_1986BCEEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::stringByResolvingSymlinksInPath()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  WTF::StringView::utf8();
  if (v3) {
    uint64_t v0 = (char *)v3 + 16;
  }
  else {
    uint64_t v0 = 0;
  }
  realpath_DARWIN_EXTSN(v0, __s);
  if (v3)
  {
    if (*(_DWORD *)v3 == 1) {
      WTF::fastFree(v3, v1);
    }
    else {
      --*(_DWORD *)v3;
    }
  }
  strlen(__s);
  return WTF::String::fromUTF8();
}

void sub_1986BCFEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1) {
      WTF::fastFree(a9, a2);
    }
    else {
      --*(_DWORD *)a9;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::repositionRelatedLayers(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  uint64_t v2 = (void *)*((void *)this + 51);
  WebCore::FloatPoint::operator CGPoint();
  uint64_t result = objc_msgSend(v2, "setPosition:");
  int v4 = (void *)*((void *)this + 52);
  if (v4)
  {
    WebCore::FloatPoint::operator CGPoint();
    uint64_t result = objc_msgSend(v4, "setPosition:");
  }
  uint64_t v5 = (void *)*((void *)this + 53);
  if (v5)
  {
    WebCore::FloatPoint::operator CGPoint();
    return objc_msgSend(v5, "setPosition:");
  }
  return result;
}

void sub_1986BD0C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v2 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x1986BD0B0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986BD280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef a14, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a14) {
    CFRelease(a14);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::RemoteLayerTreeTransaction,void>::decode(IPC::Decoder *a1@<X0>, long long *a2@<X8>)
{
  uint64_t v2 = (WTF::StringImpl **)a1;
  uint64_t v357 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>>(v315, a1);
  int v4 = (long long *)v315;
  uint64_t v5 = v2[1];
  uint64_t v6 = *v2;
  unint64_t v7 = (((unint64_t)v2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v2;
  if ((unint64_t)v5 < v7 || (unint64_t)v5 - v7 <= 3)
  {
    long long v151 = 0;
    long long v152 = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
    long long v153 = v2[3];
    if (v153)
    {
      if (v5)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v153 + 16))(v153, v6, v5);
        long long v152 = *v2;
        long long v151 = v2[1];
      }
      else
      {
        long long v151 = 0;
        long long v152 = 0;
      }
    }
    goto LABEL_253;
  }
  int v9 = (int *)((char *)v6 + v7);
  v2[2] = (WTF::StringImpl *)(v9 + 1);
  if (v6)
  {
    int v10 = *v9;
    uint64_t v310 = 0;
    if (!v10)
    {
      uint64_t v36 = 0;
LABEL_53:
      *(void *)&long long v319 = 0;
      uint64_t v318 = 0;
      v313[0] = 0;
      v313[1] = (uint64_t)v36;
      char v314 = 1;
      WebKit::ChangedLayers::~ChangedLayers((WebKit::ChangedLayers *)&v318, v3);
      goto LABEL_54;
    }
    int v11 = 0;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)v2, (uint64_t)&v354);
      if (!v355) {
        goto LABEL_45;
      }
      IPC::ArgumentCoder<WebKit::LayerProperties,void>::decode(&v318, (IPC::Decoder *)v2);
      if (!v349)
      {
        uint64_t v3 = *v2;
        unint64_t v25 = v2[1];
        *uint64_t v2 = 0;
        v2[1] = 0;
        int v26 = v2[3];
        if (!v26 || !v25) {
          goto LABEL_243;
        }
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v3);
        if (!v349)
        {
          unint64_t v27 = v2[3];
          uint64_t v3 = *v2;
          uint64_t v28 = v2[1];
          *uint64_t v2 = 0;
          v2[1] = 0;
          if (v27 && v28) {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v27 + 16))(v27, v3);
          }
          goto LABEL_45;
        }
      }
      uint64_t v12 = (WebKit::LayerProperties *)WTF::fastMalloc((WTF *)0x2D8);
      WebKit::LayerProperties::LayerProperties((uint64_t)v12, (uint64_t)&v318);
      if (v349) {
        WebKit::LayerProperties::~LayerProperties((WebKit::LayerProperties *)&v318);
      }
      if (!v355) {
        goto LABEL_242;
      }
      if (*((void *)&v354 + 1) == -1 || v354 == 0)
      {
LABEL_44:
        WebKit::LayerProperties::~LayerProperties(v12);
        WTF::fastFree(v29, v30);
        goto LABEL_45;
      }
      unint64_t v13 = v310;
      if (v310
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)&v310),
            (unint64_t v13 = v310) != 0))
      {
        int v14 = *((_DWORD *)v13 - 2);
      }
      else
      {
        int v14 = 0;
      }
      LODWORD(v318) = -1640531527;
      WORD2(v318) = 0;
      BYTE6(v318) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v318, &v354);
      unsigned int v15 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v318) & v14;
      int v16 = (char *)v13 + 24 * v15;
      unint64_t v18 = *(void *)v16;
      unint64_t v17 = *((void *)v16 + 1);
      if (*(_OWORD *)v16 != 0)
      {
        unsigned int v19 = 0;
        int v20 = 1;
        do
        {
          if (__PAIR128__(v17, v18) == v354) {
            goto LABEL_44;
          }
          if (v17 == -1) {
            unsigned int v19 = v16;
          }
          unsigned int v15 = (v15 + v20) & v14;
          int v16 = (char *)v13 + 24 * v15;
          unint64_t v18 = *(void *)v16;
          unint64_t v17 = *((void *)v16 + 1);
          ++v20;
        }
        while (*(_OWORD *)v16 != 0);
        if (v19)
        {
          *(void *)unsigned int v19 = 0;
          *((void *)v19 + 1) = 0;
          *((void *)v19 + 2) = 0;
          --*((_DWORD *)v13 - 4);
          int v16 = v19;
        }
      }
      *(_OWORD *)int v16 = v354;
      std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100]((WebKit::LayerProperties **)v16 + 2, v12);
      long long v21 = v310;
      int v22 = v310 ? *((_DWORD *)v310 - 3) + 1 : 1;
      *((_DWORD *)v310 - 3) = v22;
      uint64_t v23 = (*((_DWORD *)v21 - 4) + v22);
      unint64_t v24 = *((unsigned int *)v21 - 1);
      if (v24 > 0x400) {
        break;
      }
      if (3 * v24 <= 4 * v23) {
        goto LABEL_32;
      }
LABEL_33:
      if (++v11 == v10)
      {
        uint64_t v36 = v310;
        uint64_t v3 = *v2;
        if (!*v2)
        {
          LOBYTE(v313[0]) = 0;
          char v314 = 0;
          if (v310)
          {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable((uint64_t)v310, 0);
            uint64_t v3 = *v2;
          }
          goto LABEL_49;
        }
        goto LABEL_53;
      }
    }
    if (v24 > 2 * v23) {
      goto LABEL_33;
    }
LABEL_32:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)&v310);
    goto LABEL_33;
  }
  long long v151 = v5;
  long long v152 = 0;
LABEL_253:
  *uint64_t v2 = 0;
  v2[1] = 0;
  long long v154 = v2[3];
  if (v154 && v151) {
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v154 + 16))(v154, v152);
  }
  while (1)
  {
    uint64_t v3 = 0;
    uint64_t v32 = *v2;
    int v31 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    unsigned int v33 = v2[3];
    if (v33)
    {
      if (v31)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v32);
        uint64_t v3 = *v2;
        if (*v2) {
          goto LABEL_242;
        }
      }
      else
      {
        uint64_t v3 = 0;
      }
    }
    LOBYTE(v313[0]) = 0;
    char v314 = 0;
LABEL_49:
    unint64_t v34 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    char v35 = v2[3];
    if (v35 && v34) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v35 + 16))(v35, v3);
    }
LABEL_54:
    int v37 = v2[1];
    uint64_t v38 = *v2;
    unint64_t v39 = v2[2] - *v2;
    if ((unint64_t)v37 <= v39)
    {
      long long v155 = 0;
      long long v156 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      long long v157 = v2[3];
      if (v157)
      {
        if (v37)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v157 + 16))(v157);
          long long v156 = *v2;
          long long v155 = v2[1];
        }
        else
        {
          long long v155 = 0;
          long long v156 = 0;
        }
      }
      goto LABEL_257;
    }
    uint64_t v40 = (unsigned __int8 *)v38 + v39;
    v2[2] = (WTF::StringImpl *)(v40 + 1);
    if (!v38)
    {
      long long v155 = v37;
      long long v156 = 0;
LABEL_257:
      int v37 = 0;
      uint64_t v38 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      long long v158 = v2[3];
      if (v158)
      {
        if (v155)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v158 + 16))(v158, v156, v155);
          uint64_t v38 = *v2;
          int v37 = v2[1];
        }
        else
        {
          int v37 = 0;
          uint64_t v38 = 0;
        }
      }
LABEL_258:
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v159 = v2[3];
      if (v159 && v37) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v159 + 16))(v159, v38);
      }
      goto LABEL_259;
    }
    unsigned int v41 = *v40;
    if (v41 >= 2) {
      goto LABEL_258;
    }
    if (v41)
    {
      uint64_t v42 = 0;
LABEL_61:
      char v286 = 1;
      goto LABEL_62;
    }
    uint64_t v43 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v2);
    if (v44)
    {
      uint64_t v42 = v43;
      goto LABEL_61;
    }
LABEL_259:
    uint64_t v160 = *v2;
    uint64_t v161 = v2[1];
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v162 = v2[3];
    if (v162 && v161) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v162 + 16))(v162, v160);
    }
    uint64_t v42 = 0;
    char v286 = 0;
LABEL_62:
    unint64_t v45 = IPC::Decoder::decode<unsigned long long>(v2);
    uint64_t v285 = v42;
    if (!(_BYTE)v46)
    {
      LOBYTE(v310) = 0;
      char v312 = 0;
LABEL_69:
      uint64_t v50 = *v2;
      char v51 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v52 = v2[3];
      if (v52 && v51) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v50);
      }
      goto LABEL_70;
    }
    unint64_t v47 = v45;
    long long v354 = 0uLL;
    if (v45 >= 0x3333)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)&v318, (IPC::Decoder *)v2);
        if (!(_BYTE)v325) {
          goto LABEL_353;
        }
        if (HIDWORD(v354) == DWORD2(v354))
        {
          WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)&v354, (unint64_t)&v318);
        }
        else
        {
          uint64_t v232 = v354 + 80 * HIDWORD(v354);
          long long v233 = v4[2];
          long long v234 = v4[3];
          long long v235 = v4[4];
          *(unsigned char *)(v232 + 48) = (_BYTE)v321;
          *(_OWORD *)(v232 + 16) = v234;
          *(_OWORD *)(v232 + 32) = v235;
          *(_OWORD *)uint64_t v232 = v233;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor(v232 + 56, (uint64_t)&v322);
          ++HIDWORD(v354);
        }
        if ((_BYTE)v325 && v324 != -1) {
          ((void (*)(WTF **, uint64_t *))off_1EE9B4E40[v324])(&v307, &v322);
        }
        if (!--v47)
        {
          unsigned int v236 = HIDWORD(v354);
          uint64_t v237 = (WTF *)v354;
          if (DWORD2(v354) > HIDWORD(v354))
          {
            char v238 = (WTF *)v354;
            if (HIDWORD(v354))
            {
              if (HIDWORD(v354) >= 0x3333334)
              {
                __break(0xC471u);
                JUMPOUT(0x1986BF32CLL);
              }
              unsigned int v239 = 80 * HIDWORD(v354);
              uint64_t v240 = WTF::fastMalloc((WTF *)(80 * HIDWORD(v354)));
              DWORD2(v354) = v239 / 0x50;
              *(void *)&long long v354 = v240;
              char v238 = v237;
              if ((WTF *)v240 != v237)
              {
                WTF::VectorMover<false,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>::move((uint64_t)v237, (uint64_t)v237 + 80 * v236, v240);
                char v238 = (WTF *)v354;
              }
            }
            if (v237)
            {
              if (v238 == v237)
              {
                *(void *)&long long v354 = 0;
                DWORD2(v354) = 0;
              }
              WTF::fastFree(v237, v46);
              uint64_t v237 = (WTF *)v354;
            }
            else
            {
              uint64_t v237 = v238;
            }
          }
          uint64_t v310 = v237;
          uint64_t v241 = *((void *)&v354 + 1);
          long long v354 = 0uLL;
          uint64_t v311 = v241;
          goto LABEL_67;
        }
      }
    }
    if (v45)
    {
      unsigned int v141 = 80 * v45;
      uint64_t v142 = WTF::fastMalloc((WTF *)(80 * v45));
      DWORD2(v354) = v141 / 0x50;
      *(void *)&long long v354 = v142;
      while (1)
      {
        IPC::Decoder::decode<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)&v318, (IPC::Decoder *)v2);
        if (!(_BYTE)v325) {
          break;
        }
        if (HIDWORD(v354) == DWORD2(v354))
        {
          WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties>((uint64_t)&v354, (unint64_t)&v318);
        }
        else
        {
          uint64_t v144 = v354 + 80 * HIDWORD(v354);
          long long v145 = v4[2];
          long long v146 = v4[3];
          long long v147 = v4[4];
          *(unsigned char *)(v144 + 48) = (_BYTE)v321;
          *(_OWORD *)(v144 + 16) = v146;
          *(_OWORD *)(v144 + 32) = v147;
          *(_OWORD *)uint64_t v144 = v145;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,(std::__variant_detail::_Trait)1>::__move_constructor(v144 + 56, (uint64_t)&v322);
          ++HIDWORD(v354);
        }
        if ((_BYTE)v325 && v324 != -1) {
          ((void (*)(WTF **, uint64_t *))off_1EE9B4E40[v324])(&v307, &v322);
        }
        if (!--v47)
        {
          uint64_t v49 = *((void *)&v354 + 1);
          char v48 = (WTF *)v354;
          goto LABEL_66;
        }
      }
LABEL_353:
      LOBYTE(v310) = 0;
      char v312 = 0;
      WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v354, v143);
      goto LABEL_69;
    }
    char v48 = 0;
    uint64_t v49 = 0;
LABEL_66:
    long long v354 = 0uLL;
    uint64_t v310 = v48;
    uint64_t v311 = v49;
LABEL_67:
    char v312 = 1;
    WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v354, v46);
LABEL_70:
    IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v307, (IPC::Decoder *)v2);
    IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v304, (IPC::Decoder *)v2);
    IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v301, (IPC::Decoder *)v2);
    IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v2, v53, (uint64_t)&v298);
    uint64_t v283 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)v2);
    char v284 = v54;
    int v281 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v2);
    uint64_t v282 = v55;
    if (!v55)
    {
      uint64_t v163 = *v2;
      uint64_t v164 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      unint64_t v165 = v2[3];
      if (v165)
      {
        if (v164) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v165 + 16))(v165, v163);
        }
      }
    }
    unint64_t v279 = IPC::Decoder::decode<WebCore::LayoutPoint>((uint64_t *)v2);
    char v280 = v56;
    unint64_t v277 = IPC::Decoder::decode<WebCore::LayoutPoint>((uint64_t *)v2);
    char v278 = v57;
    unint64_t v275 = IPC::Decoder::decode<WebCore::LayoutPoint>((uint64_t *)v2);
    char v276 = v58;
    uint64_t v273 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v2);
    uint64_t v274 = v59;
    if (!v59)
    {
      uint64_t v166 = *v2;
      uint64_t v167 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      long long v168 = v2[3];
      if (v168)
      {
        if (v167) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v168 + 16))(v168, v166);
        }
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v2, &v296);
    if (!v297)
    {
      uint64_t v169 = *v2;
      long long v170 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v171 = v2[3];
      if (v171)
      {
        if (v170) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v171 + 16))(v171, v169);
        }
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v2, &v294);
    if (!v295)
    {
      uint64_t v172 = *v2;
      uint64_t v173 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      unsigned __int16 v174 = v2[3];
      if (v174)
      {
        if (v173) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v174 + 16))(v174, v172);
        }
      }
    }
    IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)v2, &v292);
    char v60 = v2[1];
    if (v293)
    {
      int v61 = v2[1];
    }
    else
    {
      int v61 = 0;
      uint64_t v175 = *v2;
      *uint64_t v2 = 0;
      v2[1] = 0;
      int v176 = v2[3];
      if (v176)
      {
        if (v60)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v176 + 16))(v176, v175, v60);
          int v61 = v2[1];
        }
        else
        {
          int v61 = 0;
        }
      }
    }
    uint64_t v62 = *v2;
    unint64_t v63 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v2;
    if ((unint64_t)v61 < v63 || (unint64_t)v61 - v63 <= 7)
    {
      uint64_t v177 = 0;
      v178 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v179 = v2[3];
      if (v179)
      {
        if (v61)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v179 + 16))(v179);
          v178 = *v2;
          uint64_t v177 = v2[1];
        }
        else
        {
          uint64_t v177 = 0;
          v178 = 0;
        }
      }
    }
    else
    {
      uint64_t v64 = (uint64_t *)((char *)v62 + v63);
      v2[2] = (WTF::StringImpl *)(v64 + 1);
      if (v62)
      {
        int v272 = 0;
        uint64_t v271 = *v64;
        goto LABEL_80;
      }
      uint64_t v177 = v61;
      v178 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v180 = v2[3];
    if (v180 && v177)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v180 + 16))(v180, v178, v177);
      uint64_t v271 = 0;
      uint64_t v62 = *v2;
      int v61 = v2[1];
    }
    else
    {
      int v61 = 0;
      uint64_t v62 = 0;
      uint64_t v271 = 0;
    }
    int v272 = 1;
LABEL_80:
    unint64_t v65 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v62;
    if ((unint64_t)v61 < v65 || (unint64_t)v61 - v65 <= 7)
    {
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v183 = v2[3];
      if (v183)
      {
        if (v61)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v183 + 16))(v183);
          uint64_t v182 = *v2;
          uint64_t v181 = v2[1];
        }
        else
        {
          uint64_t v181 = 0;
          uint64_t v182 = 0;
        }
      }
    }
    else
    {
      int v66 = (uint64_t *)(((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (WTF::StringImpl *)(v66 + 1);
      if (v62)
      {
        int v270 = 0;
        uint64_t v269 = *v66;
        goto LABEL_84;
      }
      uint64_t v181 = v61;
      uint64_t v182 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    char v184 = v2[3];
    if (v184 && v181)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v184 + 16))(v184, v182, v181);
      uint64_t v269 = 0;
      uint64_t v62 = *v2;
      int v61 = v2[1];
    }
    else
    {
      int v61 = 0;
      uint64_t v62 = 0;
      uint64_t v269 = 0;
    }
    int v270 = 1;
LABEL_84:
    unint64_t v67 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v62;
    if ((unint64_t)v61 < v67 || (unint64_t)v61 - v67 <= 7)
    {
      uint64_t v185 = 0;
      uint64_t v186 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v187 = v2[3];
      if (v187)
      {
        if (v61)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v187 + 16))(v187);
          uint64_t v186 = *v2;
          uint64_t v185 = v2[1];
        }
        else
        {
          uint64_t v185 = 0;
          uint64_t v186 = 0;
        }
      }
    }
    else
    {
      uint64_t v68 = (uint64_t *)(((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (WTF::StringImpl *)(v68 + 1);
      if (v62)
      {
        int v268 = 0;
        uint64_t v267 = *v68;
        goto LABEL_88;
      }
      uint64_t v185 = v61;
      uint64_t v186 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    char v188 = v2[3];
    if (v188 && v185)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v188 + 16))(v188, v186, v185);
      uint64_t v267 = 0;
      uint64_t v62 = *v2;
      int v61 = v2[1];
    }
    else
    {
      int v61 = 0;
      uint64_t v62 = 0;
      uint64_t v267 = 0;
    }
    int v268 = 1;
LABEL_88:
    unint64_t v69 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v62;
    if ((unint64_t)v61 < v69 || (unint64_t)v61 - v69 <= 7)
    {
      uint64_t v189 = 0;
      uint64_t v190 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v191 = v2[3];
      if (v191)
      {
        if (v61)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v191 + 16))(v191);
          uint64_t v190 = *v2;
          uint64_t v189 = v2[1];
        }
        else
        {
          uint64_t v189 = 0;
          uint64_t v190 = 0;
        }
      }
    }
    else
    {
      uint64_t v70 = (uint64_t *)(((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (WTF::StringImpl *)(v70 + 1);
      if (v62)
      {
        int v266 = 0;
        uint64_t v265 = *v70;
        goto LABEL_92;
      }
      uint64_t v189 = v61;
      uint64_t v190 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v192 = v2[3];
    if (v192 && v189)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v192 + 16))(v192, v190, v189);
      uint64_t v265 = 0;
      uint64_t v62 = *v2;
      int v61 = v2[1];
    }
    else
    {
      int v61 = 0;
      uint64_t v62 = 0;
      uint64_t v265 = 0;
    }
    int v266 = 1;
LABEL_92:
    unint64_t v71 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v62;
    if ((unint64_t)v61 < v71 || (unint64_t)v61 - v71 <= 7)
    {
      uint64_t v193 = 0;
      uint64_t v194 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v195 = v2[3];
      if (v195)
      {
        if (v61)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v195 + 16))(v195);
          uint64_t v194 = *v2;
          uint64_t v193 = v2[1];
        }
        else
        {
          uint64_t v193 = 0;
          uint64_t v194 = 0;
        }
      }
    }
    else
    {
      uint64_t v72 = (unint64_t *)(((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (WTF::StringImpl *)(v72 + 1);
      if (v62)
      {
        int v264 = 0;
        unint64_t v263 = *v72;
        goto LABEL_96;
      }
      uint64_t v193 = v61;
      uint64_t v194 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    int v196 = v2[3];
    if (v196 && v193)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v196 + 16))(v196, v194, v193);
      unint64_t v263 = 0;
      uint64_t v62 = *v2;
      int v61 = v2[1];
    }
    else
    {
      int v61 = 0;
      uint64_t v62 = 0;
      unint64_t v263 = 0;
    }
    int v264 = 1;
LABEL_96:
    unint64_t v73 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v62;
    if ((unint64_t)v61 < v73 || (unint64_t)v61 - v73 <= 7)
    {
      uint64_t v197 = 0;
      uint64_t v198 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v199 = v2[3];
      if (v199)
      {
        if (v61)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v199 + 16))(v199);
          uint64_t v198 = *v2;
          uint64_t v197 = v2[1];
        }
        else
        {
          uint64_t v197 = 0;
          uint64_t v198 = 0;
        }
      }
    }
    else
    {
      uint64_t v74 = (uint64_t *)(((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      v2[2] = (WTF::StringImpl *)(v74 + 1);
      if (v62)
      {
        int v262 = 0;
        uint64_t v260 = *v74;
        goto LABEL_100;
      }
      uint64_t v197 = v61;
      uint64_t v198 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v200 = v2[3];
    if (v200 && v197) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v200 + 16))(v200, v198, v197);
    }
    uint64_t v260 = 0;
    int v262 = 1;
LABEL_100:
    uint64_t v259 = IPC::Decoder::decode<WebKit::MonotonicObjectIdentifier<WebKit::TransactionIDType>>((uint64_t *)v2);
    char v261 = v75;
    uint64_t v76 = *v2;
    uint64_t v77 = v2[1];
    unint64_t v78 = (((unint64_t)v2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v2;
    if ((unint64_t)v77 < v78 || (unint64_t)v77 - v78 <= 7)
    {
      unsigned __int16 v225 = 0;
      int v226 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      char v227 = v2[3];
      if (v227)
      {
        if (v77)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v227 + 16))(v227);
          int v226 = *v2;
          unsigned __int16 v225 = v2[1];
        }
        else
        {
          unsigned __int16 v225 = 0;
          int v226 = 0;
        }
      }
    }
    else
    {
      int v79 = (uint64_t *)((char *)v76 + v78);
      v2[2] = (WTF::StringImpl *)(v79 + 1);
      if (v76)
      {
        int v258 = 0;
        uint64_t v257 = *v79;
        goto LABEL_104;
      }
      unsigned __int16 v225 = v77;
      int v226 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v228 = v2[3];
    if (v228 && v225) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v228 + 16))(v228, v226);
    }
    uint64_t v257 = 0;
    int v258 = 1;
LABEL_104:
    int v256 = IPC::Decoder::decode<WTF::OptionSet<WebCore::LayoutMilestone>>((IPC::Decoder *)v2);
    uint64_t v80 = v2[1];
    uint64_t v81 = *v2;
    unint64_t v82 = v2[2] - *v2;
    if ((unint64_t)v80 <= v82)
    {
      uint64_t v201 = 0;
      uint64_t v202 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v203 = v2[3];
      if (v203)
      {
        if (v80)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v203 + 16))(v203);
          uint64_t v202 = *v2;
          uint64_t v201 = v2[1];
        }
        else
        {
          uint64_t v201 = 0;
          uint64_t v202 = 0;
        }
      }
      goto LABEL_300;
    }
    long long v83 = (unsigned __int8 *)v81 + v82;
    uint64_t v84 = (uint64_t)v81 + v82 + 1;
    v2[2] = (WTF::StringImpl *)v84;
    if (!v81)
    {
      uint64_t v201 = v80;
      uint64_t v202 = 0;
LABEL_300:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v204 = v2[3];
      if (v204 && v201)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v204 + 16))(v204, v202, v201);
        unsigned int v85 = 0;
        uint64_t v81 = *v2;
        uint64_t v80 = v2[1];
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        unsigned int v85 = 0;
      }
      goto LABEL_302;
    }
    unsigned int v85 = *v83;
    if (v85 < 2)
    {
      int v255 = 0;
      char v86 = 1;
      goto LABEL_108;
    }
LABEL_302:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v205 = v2[3];
    if (!v205 || !v80)
    {
      uint64_t v206 = 0;
      uint64_t v81 = 0;
      char v254 = 0;
      int v255 = 1;
LABEL_304:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v207 = v2[3];
      if (v207 && v206)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v207 + 16))(v207, v81, v206);
        unsigned int v90 = 0;
        uint64_t v81 = *v2;
        uint64_t v80 = v2[1];
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        unsigned int v90 = 0;
      }
      goto LABEL_306;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v205 + 16))(v205, v81);
    char v86 = 0;
    uint64_t v81 = *v2;
    uint64_t v80 = v2[1];
    int v255 = 1;
    uint64_t v84 = (uint64_t)v2[2];
LABEL_108:
    if (!v85) {
      char v86 = 0;
    }
    char v254 = v86;
    unint64_t v87 = v84 - (void)v81;
    if ((unint64_t)v80 <= v87)
    {
      uint64_t v206 = 0;
      unsigned int v249 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v249 && v80)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v249 + 16))(v249);
        uint64_t v81 = *v2;
        uint64_t v206 = v2[1];
      }
      else
      {
        uint64_t v81 = 0;
      }
      goto LABEL_304;
    }
    uint64_t v88 = (unsigned __int8 *)v81 + v87;
    uint64_t v89 = (uint64_t)v81 + v87 + 1;
    v2[2] = (WTF::StringImpl *)v89;
    if (!v81)
    {
      uint64_t v206 = v80;
      goto LABEL_304;
    }
    unsigned int v90 = *v88;
    if (v90 < 2)
    {
      int v253 = 0;
      char v91 = 1;
      goto LABEL_114;
    }
LABEL_306:
    *uint64_t v2 = 0;
    v2[1] = 0;
    SessionID v208 = v2[3];
    if (!v208 || !v80)
    {
      uint64_t v209 = 0;
      uint64_t v81 = 0;
      char v252 = 0;
      int v253 = 1;
LABEL_308:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v210 = v2[3];
      if (v210 && v209)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v210 + 16))(v210, v81, v209);
        unsigned int v95 = 0;
        uint64_t v81 = *v2;
        uint64_t v80 = v2[1];
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        unsigned int v95 = 0;
      }
      goto LABEL_310;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v208 + 16))(v208, v81);
    char v91 = 0;
    uint64_t v81 = *v2;
    uint64_t v80 = v2[1];
    int v253 = 1;
    uint64_t v89 = (uint64_t)v2[2];
LABEL_114:
    if (!v90) {
      char v91 = 0;
    }
    char v252 = v91;
    unint64_t v92 = v89 - (void)v81;
    if ((unint64_t)v80 <= v92)
    {
      uint64_t v209 = 0;
      uint64_t v248 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v248 && v80)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v248 + 16))(v248);
        uint64_t v81 = *v2;
        uint64_t v209 = v2[1];
      }
      else
      {
        uint64_t v81 = 0;
      }
      goto LABEL_308;
    }
    uint64_t v93 = (unsigned __int8 *)v81 + v92;
    uint64_t v94 = (uint64_t)v81 + v92 + 1;
    v2[2] = (WTF::StringImpl *)v94;
    if (!v81)
    {
      uint64_t v209 = v80;
      goto LABEL_308;
    }
    unsigned int v95 = *v93;
    if (v95 < 2)
    {
      int v251 = 0;
      char v96 = 1;
      goto LABEL_120;
    }
LABEL_310:
    *uint64_t v2 = 0;
    v2[1] = 0;
    int v211 = v2[3];
    if (!v211 || !v80)
    {
      int v212 = 0;
      uint64_t v81 = 0;
      char v250 = 0;
      int v251 = 1;
LABEL_312:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v213 = v2[3];
      if (v213 && v212)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v213 + 16))(v213, v81, v212);
        unsigned int v100 = 0;
        uint64_t v81 = *v2;
        uint64_t v80 = v2[1];
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        unsigned int v100 = 0;
      }
      goto LABEL_314;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v211 + 16))(v211, v81);
    char v96 = 0;
    uint64_t v81 = *v2;
    uint64_t v80 = v2[1];
    int v251 = 1;
    uint64_t v94 = (uint64_t)v2[2];
LABEL_120:
    if (!v95) {
      char v96 = 0;
    }
    char v250 = v96;
    unint64_t v97 = v94 - (void)v81;
    if ((unint64_t)v80 <= v97)
    {
      int v212 = 0;
      unint64_t v247 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v247 && v80)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v247 + 16))(v247);
        uint64_t v81 = *v2;
        int v212 = v2[1];
      }
      else
      {
        uint64_t v81 = 0;
      }
      goto LABEL_312;
    }
    uint64_t v98 = (unsigned __int8 *)v81 + v97;
    uint64_t v99 = (uint64_t)v81 + v97 + 1;
    v2[2] = (WTF::StringImpl *)v99;
    if (!v81)
    {
      int v212 = v80;
      goto LABEL_312;
    }
    unsigned int v100 = *v98;
    if (v100 < 2)
    {
      int v101 = 0;
      char v102 = 1;
      goto LABEL_126;
    }
LABEL_314:
    *uint64_t v2 = 0;
    v2[1] = 0;
    char v214 = v2[3];
    if (!v214 || !v80)
    {
      char v103 = 0;
      uint64_t v215 = 0;
      uint64_t v81 = 0;
      int v101 = 1;
LABEL_316:
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v216 = v2[3];
      if (v216 && v215)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v216 + 16))(v216, v81, v215);
        unsigned int v107 = 0;
        uint64_t v81 = *v2;
        uint64_t v80 = v2[1];
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        unsigned int v107 = 0;
      }
      goto LABEL_318;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v214 + 16))(v214, v81);
    char v102 = 0;
    uint64_t v81 = *v2;
    uint64_t v80 = v2[1];
    int v101 = 1;
    uint64_t v99 = (uint64_t)v2[2];
LABEL_126:
    if (v100) {
      char v103 = v102;
    }
    else {
      char v103 = 0;
    }
    unint64_t v104 = v99 - (void)v81;
    if ((unint64_t)v80 <= v104)
    {
      uint64_t v215 = 0;
      uint64_t v246 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v246 && v80)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v246 + 16))(v246);
        uint64_t v81 = *v2;
        uint64_t v215 = v2[1];
      }
      else
      {
        uint64_t v81 = 0;
      }
      goto LABEL_316;
    }
    int v105 = (unsigned __int8 *)v81 + v104;
    uint64_t v106 = (uint64_t)v81 + v104 + 1;
    v2[2] = (WTF::StringImpl *)v106;
    if (!v81)
    {
      uint64_t v215 = v80;
      goto LABEL_316;
    }
    unsigned int v107 = *v105;
    if (v107 < 2)
    {
      int v108 = 0;
      char v109 = 1;
      goto LABEL_133;
    }
LABEL_318:
    *uint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v217 = v2[3];
    if (!v217 || !v80)
    {
      char v110 = 0;
      long long v218 = 0;
      uint64_t v81 = 0;
      int v108 = 1;
LABEL_320:
      *uint64_t v2 = 0;
      v2[1] = 0;
      long long v219 = v2[3];
      if (v219 && v218)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v219 + 16))(v219, v81, v218);
        unsigned int v113 = 0;
        uint64_t v81 = *v2;
        uint64_t v80 = v2[1];
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        unsigned int v113 = 0;
      }
      goto LABEL_322;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v217 + 16))(v217, v81);
    char v109 = 0;
    uint64_t v81 = *v2;
    uint64_t v80 = v2[1];
    int v108 = 1;
    uint64_t v106 = (uint64_t)v2[2];
LABEL_133:
    if (v107) {
      char v110 = v109;
    }
    else {
      char v110 = 0;
    }
    unint64_t v111 = v106 - (void)v81;
    if ((unint64_t)v80 <= v111)
    {
      long long v218 = 0;
      unint64_t v245 = v2[3];
      *uint64_t v2 = 0;
      v2[1] = 0;
      if (v245 && v80)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v245 + 16))(v245);
        uint64_t v81 = *v2;
        long long v218 = v2[1];
      }
      else
      {
        uint64_t v81 = 0;
      }
      goto LABEL_320;
    }
    uint64_t v112 = (unsigned __int8 *)v81 + v111;
    v2[2] = (WTF::StringImpl *)(v112 + 1);
    if (!v81)
    {
      long long v218 = v80;
      goto LABEL_320;
    }
    unsigned int v113 = *v112;
    if (v113 < 2)
    {
      int v114 = 0;
      char v115 = 1;
      goto LABEL_140;
    }
LABEL_322:
    *uint64_t v2 = 0;
    v2[1] = 0;
    long long v220 = v2[3];
    if (!v220 || !v80)
    {
      uint64_t v81 = 0;
      char v116 = 0;
      uint64_t v80 = 0;
      int v114 = 1;
LABEL_324:
      *uint64_t v2 = 0;
      v2[1] = 0;
      long long v221 = v2[3];
      if (v221)
      {
        if (v80)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v221 + 16))(v221, v81);
          long long v222 = *v2;
          uint64_t v80 = v2[1];
        }
        else
        {
          long long v222 = 0;
        }
      }
      else
      {
        long long v222 = 0;
        uint64_t v80 = 0;
      }
LABEL_326:
      *uint64_t v2 = 0;
      v2[1] = 0;
      long long v223 = v2[3];
      if (v223)
      {
        if (v80)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v223 + 16))(v223, v222);
          uint64_t v81 = *v2;
          uint64_t v80 = v2[1];
        }
        else
        {
          uint64_t v81 = 0;
        }
      }
      else
      {
        uint64_t v81 = 0;
        uint64_t v80 = 0;
      }
      goto LABEL_328;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v220 + 16))(v220, v81);
    char v115 = 0;
    uint64_t v81 = *v2;
    uint64_t v80 = v2[1];
    int v114 = 1;
LABEL_140:
    if (v113) {
      char v116 = v115;
    }
    else {
      char v116 = 0;
    }
    if ((unint64_t)v80 <= v2[2] - v81) {
      goto LABEL_324;
    }
    uint64_t v117 = v2[2];
    v2[2] = (WTF::StringImpl *)((char *)v117 + 1);
    if (!v81)
    {
      long long v222 = 0;
      goto LABEL_326;
    }
    unsigned int v118 = *(unsigned __int8 *)v117;
    if (v118 < 2)
    {
      if (v118)
      {
        IPC::Decoder::decode<WebKit::EditorState>((uint64_t *)v2, &v318);
        char v120 = v348;
        if (!v348)
        {
          LOBYTE(v354) = 0;
          goto LABEL_152;
        }
        std::__optional_destruct_base<WebKit::EditorState,false>::__optional_destruct_base[abi:sn180100]<WebKit::EditorState>((uint64_t)&v354, (long long *)&v318);
      }
      else
      {
        LOBYTE(v318) = 0;
        char v348 = 0;
        std::__optional_move_base<WebKit::EditorState,false>::__optional_move_base[abi:sn180100](&v354, (uint64_t)&v318);
      }
      char v120 = 1;
LABEL_152:
      char v356 = v120;
      std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](&v318, v119);
      goto LABEL_153;
    }
LABEL_328:
    *uint64_t v2 = 0;
    v2[1] = 0;
    long long v224 = v2[3];
    if (v224 && v80) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v224 + 16))(v224, v81);
    }
    LOBYTE(v354) = 0;
    char v356 = 0;
LABEL_153:
    if (!v356)
    {
      unint64_t v229 = *v2;
      uint64_t v230 = v2[1];
      *uint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v231 = v2[3];
      if (v231)
      {
        if (v230) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v231 + 16))(v231, v229);
        }
      }
    }
    IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)v2, (uint64_t)&v289);
    uint64_t v121 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)v2);
    if (!*v2) {
      break;
    }
    LODWORD(v318) = 0;
    uint64_t v2 = &v318;
    *(long long *)((char *)v4 + 40) = 0u;
    *(long long *)((char *)v4 + 56) = 0u;
    *(long long *)((char *)v4 + 72) = 0u;
    *(long long *)((char *)v4 + 88) = 0u;
    *(long long *)((char *)v4 + 104) = 0u;
    *(long long *)((char *)v4 + 120) = 0u;
    *(long long *)((char *)v4 + 136) = 0u;
    *(long long *)((char *)v4 + 152) = 0u;
    *(long long *)((char *)v4 + 168) = 0u;
    *(long long *)((char *)v4 + 184) = 0u;
    *(long long *)((char *)v4 + 200) = 0u;
    *(long long *)((char *)v4 + 216) = 0u;
    __asm { FMOV            V0.2D, #1.0 }
    *(long long *)((char *)v4 + 232) = _Q0;
    *(long long *)((char *)v4 + 248) = _Q0;
    unint64_t v341 = 0xBFF0000000000000;
    uint64_t v342 = 0;
    uint64_t v344 = 0;
    uint64_t v343 = 0;
    int v345 = 0;
    char v346 = 1;
    char v350 = 0;
    LOBYTE(v351) = 0;
    char v352 = 0;
    uint64_t v353 = 0;
    int v347 = 0;
    if (v316)
    {
      long long v319 = *v4;
      if (v314)
      {
        uint64_t v127 = v121;
        char v128 = (char)v3;
        WebKit::ChangedLayers::operator=((uint64_t)v320, v313);
        if (v286)
        {
          v320[2] = v285;
          if (v312)
          {
            long long v129 = v321;
            if (HIDWORD(v322))
            {
              uint64_t v242 = 80 * HIDWORD(v322);
              uint64_t v243 = (char *)v321 + 56;
              do
              {
                uint64_t v244 = *((unsigned int *)v243 + 4);
                if (v244 != -1)
                {
                  uint64_t v287 = v242;
                  ((void (*)(char *, char *))off_1EE9B4E40[v244])(&v317, v243);
                  uint64_t v242 = v287;
                }
                *((_DWORD *)v243 + 4) = -1;
                v243 += 80;
                v242 -= 80;
              }
              while (v242);
              long long v129 = v321;
            }
            int v4 = a2;
            if (v129)
            {
              uint64_t v321 = 0;
              LODWORD(v322) = 0;
              WTF::fastFree(v129, v3);
            }
            uint64_t v321 = v310;
            uint64_t v130 = v311;
            uint64_t v310 = 0;
            uint64_t v311 = 0;
            uint64_t v322 = v130;
            if (v309)
            {
              char v131 = v323;
              if (v323)
              {
                v323 = 0;
                LODWORD(v324) = 0;
                WTF::fastFree(v131, v3);
              }
              v323 = v307;
              uint64_t v132 = v308;
              uint64_t v307 = 0;
              uint64_t v308 = 0;
              uint64_t v324 = v132;
              if (v306)
              {
                int v133 = v325;
                if (v325)
                {
                  uint64_t v325 = 0;
                  LODWORD(v326) = 0;
                  WTF::fastFree(v133, v3);
                }
                uint64_t v325 = v304;
                uint64_t v134 = v305;
                uint64_t v304 = 0;
                uint64_t v305 = 0;
                uint64_t v326 = v134;
                if (v303)
                {
                  uint64_t v135 = v327;
                  if (v327)
                  {
                    unint64_t v327 = 0;
                    LODWORD(v328) = 0;
                    WTF::fastFree(v135, v3);
                  }
                  unint64_t v327 = v301;
                  uint64_t v136 = v302;
                  uint64_t v301 = 0;
                  uint64_t v302 = 0;
                  uint64_t v328 = v136;
                  if (v300)
                  {
                    uint64_t v137 = v329;
                    if (v329)
                    {
                      uint64_t v329 = 0;
                      LODWORD(v330) = 0;
                      WTF::fastFree(v137, v3);
                    }
                    uint64_t v329 = v298;
                    uint64_t v138 = v299;
                    unint64_t v298 = 0;
                    uint64_t v299 = 0;
                    uint64_t v330 = v138;
                    if (v284)
                    {
                      uint64_t v331 = v283;
                      if (v282)
                      {
                        uint64_t v332 = v281;
                        if (v280)
                        {
                          unint64_t v333 = v279;
                          if (v278)
                          {
                            unint64_t v334 = v277;
                            if (v276)
                            {
                              unint64_t v335 = v275;
                              if (v274)
                              {
                                char v336 = v273;
                                if (v297)
                                {
                                  WebCore::Color::operator=();
                                  if (v295)
                                  {
                                    WebCore::Color::operator=();
                                    if (v293)
                                    {
                                      WebCore::Color::operator=();
                                      if (!v272)
                                      {
                                        uint64_t v337 = v271;
                                        if (!v270)
                                        {
                                          uint64_t v338 = v269;
                                          if (!v268)
                                          {
                                            uint64_t v339 = v267;
                                            if (!v266)
                                            {
                                              uint64_t v340 = v265;
                                              if (!v264)
                                              {
                                                unint64_t v341 = v263;
                                                if (!v262)
                                                {
                                                  uint64_t v342 = v260;
                                                  if (v261)
                                                  {
                                                    uint64_t v343 = v259;
                                                    if (!v258)
                                                    {
                                                      uint64_t v344 = v257;
                                                      if ((v256 & 0xFF0000) != 0)
                                                      {
                                                        LOWORD(v345) = v256;
                                                        if (!v255)
                                                        {
                                                          BYTE2(v345) = v254;
                                                          if (!v253)
                                                          {
                                                            HIBYTE(v345) = v252;
                                                            if (!v251)
                                                            {
                                                              char v346 = v250;
                                                              if (!v101)
                                                              {
                                                                LOBYTE(v347) = v103;
                                                                if (!v108)
                                                                {
                                                                  BYTE1(v347) = v110;
                                                                  if (!v114)
                                                                  {
                                                                    BYTE2(v347) = v116;
                                                                    if (v356)
                                                                    {
                                                                      std::__optional_storage_base<WebKit::EditorState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState,false>>((uint64_t)&v347 + 3, (unsigned __int8 *)&v354);
                                                                      if (v291)
                                                                      {
                                                                        uint64_t v351 = v289;
                                                                        char v352 = v290;
                                                                        if (v128)
                                                                        {
                                                                          uint64_t v353 = v127;
                                                                          WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction((uint64_t)a2, (uint64_t)&v318);
                                                                          *((unsigned char *)a2 + 800) = 1;
                                                                          WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)&v318, v139);
                                                                          goto LABEL_202;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_242:
    __break(1u);
LABEL_243:
    *uint64_t v2 = 0;
    v2[1] = 0;
LABEL_45:
    if (v310) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable((uint64_t)v310, v3);
    }
  }
  *(unsigned char *)a2 = 0;
  *((unsigned char *)a2 + 800) = 0;
LABEL_202:
  if (v356) {
    std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](&v354, v3);
  }
  if (v293)
  {
    if ((v292 & 0x8000000000000) != 0)
    {
      uint64_t v148 = (unsigned int *)(v292 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v292 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v148);
        WTF::fastFree((WTF *)v148, v3);
      }
    }
  }
  if (v295)
  {
    if ((v294 & 0x8000000000000) != 0)
    {
      char v149 = (unsigned int *)(v294 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v294 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v149);
        WTF::fastFree((WTF *)v149, v3);
      }
    }
  }
  if (v297)
  {
    if ((v296 & 0x8000000000000) != 0)
    {
      long long v150 = (unsigned int *)(v296 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v296 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v150);
        WTF::fastFree((WTF *)v150, v3);
      }
    }
  }
  if (v300)
  {
    char v140 = v298;
    if (v298)
    {
      unint64_t v298 = 0;
      LODWORD(v299) = 0;
      WTF::fastFree(v140, v3);
    }
  }
  if (v303 && v301) {
    WTF::fastFree(v301, v3);
  }
  if (v306 && v304) {
    WTF::fastFree(v304, v3);
  }
  if (v309 && v307) {
    WTF::fastFree(v307, v3);
  }
  if (v312) {
    WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v310, v3);
  }
  if (v314) {
    WebKit::ChangedLayers::~ChangedLayers((WebKit::ChangedLayers *)v313, v3);
  }
}

void sub_1986BF358(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF *a53,uint64_t a54,uint64_t a55,WTF *a56,uint64_t a57,uint64_t a58,WTF *a59,uint64_t a60,uint64_t a61,WTF *a62,uint64_t a63)
{
  if (a65) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(a65, a2);
  }
  _Unwind_Resume(a1);
}

void WebKit::LayerProperties::~LayerProperties(WebKit::LayerProperties *this)
{
  uint64_t v2 = (WebKit::LayerProperties *)((char *)this + 608);
  if (*((unsigned char *)this + 720)) {
    WebCore::Region::~Region((WebKit::LayerProperties *)((char *)this + 696));
  }
  WebCore::Region::~Region((WebKit::LayerProperties *)((char *)this + 672));
  WebCore::Region::~Region((WebKit::LayerProperties *)((char *)this + 648));
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 632, v3);
  WebCore::Region::~Region(v2);
  uint64_t v5 = *((void *)this + 72);
  if ((v5 & 0x8000000000000) != 0)
  {
    unint64_t v18 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v4);
    }
  }
  uint64_t v6 = *((void *)this + 71);
  if ((v6 & 0x8000000000000) != 0)
  {
    unsigned int v19 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v4);
    }
  }
  uint64_t v7 = *((unsigned int *)this + 124);
  if (v7 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v7])(&v20, (char *)this + 440);
  }
  *((_DWORD *)this + 124) = -1;
  std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100]((uint64_t *)this + 53, 0);
  WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties((WebKit::LayerProperties *)((char *)this + 408));
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebKit::LayerProperties *)((char *)this + 104), v8);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, v9);
  int v11 = (WTF::StringImpl **)*((void *)this + 10);
  if (v11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
  }
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v10);
  unint64_t v13 = (WTF *)*((void *)this + 6);
  if (v13)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v13, v12);
  }
  int v14 = (WTF *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v14) {
    WTF::fastFree(v14, v12);
  }
  unsigned int v15 = (WTF *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v15) {
    WTF::fastFree(v15, v12);
  }
  int v16 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v16) {
    WTF::fastFree(v16, v12);
  }
  unint64_t v17 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v12);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
}

void WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties(WebKit::RemoteLayerBackingStoreOrProperties *this)
{
  int v4 = (WTF *)*((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<WebKit::RemoteLayerBackingStoreProperties>::operator()[abi:sn180100]((int)v2, v3);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

uint64_t std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    int v4 = (WTF *)WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

void WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(WebCore::AcceleratedEffectValues *this, void *a2)
{
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, a2);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 216, v3);
  if (*((unsigned char *)this + 204) == 11) {
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 200));
  }
  if (*((unsigned char *)this + 196) == 11) {
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 192));
  }
  if (*((unsigned char *)this + 188) == 11) {
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 184));
  }
  if (*((unsigned char *)this + 180) == 11) {
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 176));
  }
  if (*((unsigned char *)this + 172) == 11) {
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 168));
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  uint64_t v7 = (_DWORD *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
  unsigned int v8 = (_DWORD *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v8)
  {
    if (v8[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v8 + 8))(v8);
    }
    else {
      --v8[2];
    }
  }
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, v4);
  if (*((unsigned char *)this + 108) == 11) {
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 104));
  }
  if (*((unsigned char *)this + 100) == 11) {
    WebCore::Length::deref((WebCore::AcceleratedEffectValues *)((char *)this + 96));
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>::destruct(*(unsigned int **)a1, (unsigned int **)(*(void *)a1 + 8 * v3));
  }
  int v4 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = 144 * v3;
    do
    {
      uint64_t v6 = std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair(v6, a2) + 144;
      v7 -= 144;
    }
    while (v7);
  }
  int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 12);
  if (v2)
  {
    uint64_t v4 = result;
    WTF::VectorDestructor<true,WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>::destruct(*(_DWORD **)result, (_DWORD **)(*(void *)result + 8 * v2));
    uint64_t result = v4;
  }
  uint64_t v3 = *(WTF **)result;
  if (*(void *)result)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)(result + 8) = 0;
    uint64_t v5 = result;
    WTF::fastFree(v3, a2);
    return v5;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 12);
  if (v2)
  {
    uint64_t v4 = result;
    WTF::VectorDestructor<true,WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>::destruct(*(_DWORD **)result, (_DWORD **)(*(void *)result + 8 * v2));
    uint64_t result = v4;
  }
  uint64_t v3 = *(WTF **)result;
  if (*(void *)result)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)(result + 8) = 0;
    uint64_t v5 = result;
    WTF::fastFree(v3, a2);
    return v5;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebCore::Region **)a1;
    uint64_t v5 = 24 * v3;
    do
    {
      WebCore::Region::~Region(v4);
      uint64_t v4 = (WebCore::Region *)(v6 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction(WebKit::RemoteLayerTreeTransaction *this, void *a2)
{
  std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100]((unsigned char *)this + 272, a2);
  uint64_t v4 = *((void *)this + 24);
  if ((v4 & 0x8000000000000) != 0)
  {
    uint64_t v12 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v3);
    }
  }
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x8000000000000) != 0)
  {
    unint64_t v13 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v3);
    }
  }
  uint64_t v6 = *((void *)this + 22);
  if ((v6 & 0x8000000000000) != 0)
  {
    int v14 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v3);
    }
  }
  uint64_t v7 = (WTF *)*((void *)this + 14);
  if (v7)
  {
    *((void *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v7, v3);
  }
  unsigned int v8 = (WTF *)*((void *)this + 12);
  if (v8)
  {
    *((void *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v8, v3);
  }
  int v9 = (WTF *)*((void *)this + 10);
  if (v9)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v9, v3);
  }
  int v10 = (WTF *)*((void *)this + 8);
  if (v10)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v10, v3);
  }
  WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v3);
  WebKit::ChangedLayers::~ChangedLayers((WebKit::RemoteLayerTreeTransaction *)((char *)this + 24), v11);
}

uint64_t WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v6 = 80 * v3;
    uint64_t v7 = (char *)v4 + 56;
    do
    {
      uint64_t v8 = *((unsigned int *)v7 + 4);
      if (v8 != -1) {
        ((void (*)(char *, char *))off_1EE9B4E40[v8])(&v9, v7);
      }
      *((_DWORD *)v7 + 4) = -1;
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned char *std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](unsigned char *a1, void *a2)
{
  if (a1[480])
  {
    std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 352), a2);
    if (a1[336]) {
      WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)(a1 + 32), v4);
    }
  }
  return a1;
}

void WebKit::ChangedLayers::~ChangedLayers(WebKit::ChangedLayers *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v3, a2);
  }
  if (*(void *)this) {
    WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::deallocateTable(*(uint64_t **)this, a2);
  }
}

uint64_t WebKit::LayerProperties::LayerProperties(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 48) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 56) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 60) = v8;
  *(void *)(a1 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 64) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 72) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = a1 + 88;
  *(_DWORD *)(a1 + 76) = v9;
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 96) = 0;
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 88) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 96) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_DWORD *)(a1 + 100) = v12;
  WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a1 + 104, a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 352);
  long long v14 = *(_OWORD *)(a2 + 368);
  long long v15 = *(_OWORD *)(a2 + 384);
  *(void *)(v11 + 312) = *(void *)(a2 + 400);
  *(_OWORD *)(v11 + 296) = v15;
  *(_OWORD *)(v11 + 280) = v14;
  *(_OWORD *)(v11 + 264) = v13;
  uint64_t v16 = *(void *)(a2 + 408);
  *(void *)(a2 + 408) = 0;
  *(void *)(v11 + 320) = v16;
  uint64_t v17 = *(void *)(a2 + 416);
  *(void *)(a2 + 416) = 0;
  *(void *)(v11 + 328) = v17;
  uint64_t v18 = *(void *)(a2 + 424);
  *(void *)(a2 + 424) = 0;
  *(void *)(v11 + 336) = v18;
  std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100](v11 + 352, a2 + 440);
  long long v19 = *(_OWORD *)(a2 + 504);
  long long v20 = *(_OWORD *)(a2 + 520);
  long long v21 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 548) = *(_OWORD *)(a2 + 548);
  *(_OWORD *)(a1 + 520) = v20;
  *(_OWORD *)(a1 + 536) = v21;
  *(_OWORD *)(a1 + 504) = v19;
  WebCore::Color::Color();
  WebCore::Color::Color();
  long long v22 = *(_OWORD *)(a2 + 584);
  *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = v22;
  WebCore::EventRegion::EventRegion(a1 + 608, a2 + 608);
  return a1;
}

void sub_1986C0064(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v22 = *v19;
  if ((*v19 & 0x8000000000000) != 0)
  {
    uint64_t v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  uint64_t v24 = *v18;
  if ((*v18 & 0x8000000000000) != 0)
  {
    unint64_t v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, a2);
    }
  }
  uint64_t v26 = *(unsigned int *)(v13 + 496);
  if (v26 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v26])(&a13, v17);
  }
  *(_DWORD *)(v13 + 496) = -1;
  std::unique_ptr<WebCore::FilterOperations>::reset[abi:sn180100]((uint64_t *)(v15 + 336), 0);
  WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties((WebKit::RemoteLayerBackingStoreOrProperties *)(v15 + 320));
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(v16, v27);
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v28);
  long long v30 = *(WTF::StringImpl ***)(v13 + 80);
  if (v30) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v29);
  }
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v29);
  uint64_t v32 = *v20;
  if (*v20)
  {
    *(void *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 56) = 0;
    WTF::fastFree(v32, v31);
  }
  unsigned int v33 = *(WTF **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
  if (v33) {
    WTF::fastFree(v33, v31);
  }
  unint64_t v34 = *(WTF **)(v13 + 32);
  *(void *)(v13 + 32) = 0;
  if (v34) {
    WTF::fastFree(v34, v31);
  }
  char v35 = *(WTF **)(v13 + 24);
  *(void *)(v13 + 24) = 0;
  if (v35) {
    WTF::fastFree(v35, v31);
  }
  uint64_t v36 = *(WTF::StringImpl **)(v13 + 16);
  *(void *)(v13 + 16) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v31);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 56);
  if (v3 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v3])(v5, a1, a2);
    *(_DWORD *)(a1 + 56) = v3;
  }
  return a1;
}

void sub_1986C0218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 56);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 56) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AcceleratedEffectValues::AcceleratedEffectValues(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(result + 48) = v4;
  *(_OWORD *)(result + 64) = v5;
  *(_OWORD *)(result + 32) = v3;
  *(_DWORD *)(result + 96) = 0;
  *(_WORD *)(result + 101) = 0;
  unsigned int v6 = *(unsigned __int8 *)(a2 + 100);
  *(unsigned char *)(result + 100) = v6;
  *(unsigned char *)(result + 101) = *(unsigned char *)(a2 + 101);
  if (v6 <= 0xD)
  {
    int v7 = 1 << v6;
    if ((v7 & 0x7FC) != 0)
    {
      int v8 = *(unsigned __int8 *)(a2 + 102);
      *(unsigned char *)(result + 102) = v8;
      if (v8)
      {
        *(_DWORD *)(result + 96) = *(_DWORD *)(a2 + 96);
        goto LABEL_10;
      }
      int v9 = *(_DWORD *)(a2 + 96);
    }
    else
    {
      if ((v7 & 0x3003) != 0)
      {
        *(_DWORD *)(result + 96) = 0;
        goto LABEL_10;
      }
      int v9 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(a2 + 96) = 0;
    }
    *(_DWORD *)(result + 96) = v9;
  }
LABEL_10:
  *(unsigned char *)(a2 + 100) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_WORD *)(result + 109) = 0;
  unsigned int v10 = *(unsigned __int8 *)(a2 + 108);
  *(unsigned char *)(result + 108) = v10;
  *(unsigned char *)(result + 109) = *(unsigned char *)(a2 + 109);
  if (v10 > 0xD) {
    goto LABEL_19;
  }
  int v11 = 1 << v10;
  if ((v11 & 0x7FC) != 0)
  {
    int v12 = *(unsigned __int8 *)(a2 + 110);
    *(unsigned char *)(result + 110) = v12;
    if (v12)
    {
      *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
      goto LABEL_19;
    }
    int v13 = *(_DWORD *)(a2 + 104);
  }
  else
  {
    if ((v11 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 104) = 0;
      goto LABEL_19;
    }
    int v13 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a2 + 104) = 0;
  }
  *(_DWORD *)(result + 104) = v13;
LABEL_19:
  *(unsigned char *)(a2 + 108) = 0;
  *(unsigned char *)(result + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  uint64_t v14 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(void *)(result + 120) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(result + 128) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(result + 132) = v14;
  uint64_t v15 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(result + 136) = v15;
  uint64_t v16 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  *(void *)(result + 144) = v16;
  uint64_t v17 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(result + 152) = v17;
  uint64_t v18 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(result + 160) = v18;
  *(_DWORD *)(result + 168) = 0;
  *(unsigned char *)(result + 173) = 0;
  *(unsigned char *)(result + 174) = 0;
  unsigned int v19 = *(unsigned __int8 *)(a2 + 172);
  *(unsigned char *)(result + 172) = v19;
  *(unsigned char *)(result + 173) = *(unsigned char *)(a2 + 173);
  if (v19 > 0xD) {
    goto LABEL_28;
  }
  int v20 = 1 << v19;
  if ((v20 & 0x7FC) != 0)
  {
    int v21 = *(unsigned __int8 *)(a2 + 174);
    *(unsigned char *)(result + 174) = v21;
    if (v21)
    {
      *(_DWORD *)(result + 168) = *(_DWORD *)(a2 + 168);
      goto LABEL_28;
    }
    int v22 = *(_DWORD *)(a2 + 168);
  }
  else
  {
    if ((v20 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 168) = 0;
      goto LABEL_28;
    }
    int v22 = *(_DWORD *)(a2 + 168);
    *(_DWORD *)(a2 + 168) = 0;
  }
  *(_DWORD *)(result + 168) = v22;
LABEL_28:
  *(unsigned char *)(a2 + 172) = 0;
  *(_DWORD *)(result + 176) = 0;
  *(_WORD *)(result + 181) = 0;
  unsigned int v23 = *(unsigned __int8 *)(a2 + 180);
  *(unsigned char *)(result + 180) = v23;
  *(unsigned char *)(result + 181) = *(unsigned char *)(a2 + 181);
  if (v23 > 0xD) {
    goto LABEL_37;
  }
  int v24 = 1 << v23;
  if ((v24 & 0x7FC) != 0)
  {
    int v25 = *(unsigned __int8 *)(a2 + 182);
    *(unsigned char *)(result + 182) = v25;
    if (v25)
    {
      *(_DWORD *)(result + 176) = *(_DWORD *)(a2 + 176);
      goto LABEL_37;
    }
    int v26 = *(_DWORD *)(a2 + 176);
  }
  else
  {
    if ((v24 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 176) = 0;
      goto LABEL_37;
    }
    int v26 = *(_DWORD *)(a2 + 176);
    *(_DWORD *)(a2 + 176) = 0;
  }
  *(_DWORD *)(result + 176) = v26;
LABEL_37:
  *(unsigned char *)(a2 + 180) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_WORD *)(result + 189) = 0;
  unsigned int v27 = *(unsigned __int8 *)(a2 + 188);
  *(unsigned char *)(result + 188) = v27;
  *(unsigned char *)(result + 189) = *(unsigned char *)(a2 + 189);
  if (v27 > 0xD) {
    goto LABEL_46;
  }
  int v28 = 1 << v27;
  if ((v28 & 0x7FC) != 0)
  {
    int v29 = *(unsigned __int8 *)(a2 + 190);
    *(unsigned char *)(result + 190) = v29;
    if (v29)
    {
      *(_DWORD *)(result + 184) = *(_DWORD *)(a2 + 184);
      goto LABEL_46;
    }
    int v30 = *(_DWORD *)(a2 + 184);
  }
  else
  {
    if ((v28 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 184) = 0;
      goto LABEL_46;
    }
    int v30 = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a2 + 184) = 0;
  }
  *(_DWORD *)(result + 184) = v30;
LABEL_46:
  *(unsigned char *)(a2 + 188) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_WORD *)(result + 197) = 0;
  unsigned int v31 = *(unsigned __int8 *)(a2 + 196);
  *(unsigned char *)(result + 196) = v31;
  *(unsigned char *)(result + 197) = *(unsigned char *)(a2 + 197);
  if (v31 > 0xD) {
    goto LABEL_55;
  }
  int v32 = 1 << v31;
  if ((v32 & 0x7FC) != 0)
  {
    int v33 = *(unsigned __int8 *)(a2 + 198);
    *(unsigned char *)(result + 198) = v33;
    if (v33)
    {
      *(_DWORD *)(result + 192) = *(_DWORD *)(a2 + 192);
      goto LABEL_55;
    }
    int v34 = *(_DWORD *)(a2 + 192);
  }
  else
  {
    if ((v32 & 0x3003) != 0)
    {
      *(_DWORD *)(result + 192) = 0;
      goto LABEL_55;
    }
    int v34 = *(_DWORD *)(a2 + 192);
    *(_DWORD *)(a2 + 192) = 0;
  }
  *(_DWORD *)(result + 192) = v34;
LABEL_55:
  *(unsigned char *)(a2 + 196) = 0;
  *(_DWORD *)(result + 200) = 0;
  *(_WORD *)(result + 205) = 0;
  unsigned int v35 = *(unsigned __int8 *)(a2 + 204);
  *(unsigned char *)(result + 204) = v35;
  *(unsigned char *)(result + 205) = *(unsigned char *)(a2 + 205);
  if (v35 <= 0xD)
  {
    int v36 = 1 << v35;
    if ((v36 & 0x7FC) != 0)
    {
      int v37 = *(unsigned __int8 *)(a2 + 206);
      *(unsigned char *)(result + 206) = v37;
      if (v37)
      {
        *(_DWORD *)(result + 200) = *(_DWORD *)(a2 + 200);
        goto LABEL_64;
      }
      int v38 = *(_DWORD *)(a2 + 200);
    }
    else
    {
      if ((v36 & 0x3003) != 0)
      {
        *(_DWORD *)(result + 200) = 0;
        goto LABEL_64;
      }
      int v38 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 200) = 0;
    }
    *(_DWORD *)(result + 200) = v38;
  }
LABEL_64:
  *(unsigned char *)(a2 + 204) = 0;
  uint64_t v39 = *(void *)(a2 + 208);
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 208) = v39;
  uint64_t v40 = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = 0;
  *(void *)(result + 216) = v40;
  LODWORD(v40) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(_DWORD *)(result + 224) = v40;
  LODWORD(v40) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a2 + 228) = 0;
  *(_DWORD *)(result + 228) = v40;
  *(void *)(result + 232) = 0;
  *(void *)(result + 240) = 0;
  uint64_t v41 = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  *(void *)(result + 232) = v41;
  LODWORD(v41) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = 0;
  *(_DWORD *)(result + 240) = v41;
  LODWORD(v41) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(_DWORD *)(result + 244) = v41;
  return result;
}

uint64_t WebCore::EventRegion::EventRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WebCore::Region::Region();
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(v4 + 24) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(v4 + 32) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(v4 + 36) = v5;
  WebCore::Region::Region();
  WebCore::Region::Region();
  std::__optional_move_base<WebCore::Region,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 88), a2 + 88);
  return a1;
}

void sub_1986C06F4(_Unwind_Exception *a1)
{
  WebCore::Region::~Region(v4);
  WebCore::Region::~Region(v3);
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, v6);
  WebCore::Region::~Region(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_move_base<WebCore::Region,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[24] = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    WebCore::Region::Region();
    a1[24] = 1;
  }
  return a1;
}

void sub_1986C0774(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 24)) {
    WebCore::Region::~Region(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 48) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 56) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 60) = v6;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 64) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 72) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 76) = v7;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 80) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 88) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 92) = v8;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 108) = v9;
  *(void *)(a1 + 120) = 0;
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 112) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v10;
  long long v11 = *(_OWORD *)(a2 + 128);
  long long v12 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  WebCore::Color::Color();
  WebCore::Color::Color();
  WebCore::Color::Color();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  long long v13 = *(_OWORD *)(a2 + 216);
  long long v14 = *(_OWORD *)(a2 + 232);
  long long v15 = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  std::__optional_move_base<WebKit::EditorState,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 272), a2 + 272);
  long long v16 = *(_OWORD *)(a2 + 768);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = v16;
  return a1;
}

void sub_1986C0990(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::ChangedLayers *a10)
{
  WebCore::Color::~Color(v15, a2);
  WebCore::Color::~Color(v14, v20);
  WebCore::Color::~Color(v13, v21);
  unsigned int v23 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 112) = 0;
    *(_DWORD *)(v10 + 120) = 0;
    WTF::fastFree(v23, v22);
  }
  int v24 = *v18;
  if (*v18)
  {
    *(void *)(v10 + 96) = 0;
    *(_DWORD *)(v10 + 104) = 0;
    WTF::fastFree(v24, v22);
  }
  int v25 = *v17;
  if (*v17)
  {
    *(void *)(v10 + 80) = 0;
    *(_DWORD *)(v10 + 88) = 0;
    WTF::fastFree(v25, v22);
  }
  int v26 = *v16;
  if (*v16)
  {
    *(void *)(v10 + 64) = 0;
    *(_DWORD *)(v10 + 72) = 0;
    WTF::fastFree(v26, v22);
  }
  WTF::Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12, v22);
  WebKit::ChangedLayers::~ChangedLayers(a10, v27);
  _Unwind_Resume(a1);
}

void sub_1986C0A2C()
{
}

void sub_1986C0A34()
{
}

unsigned char *std::__optional_move_base<WebKit::EditorState,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[480] = 0;
  if (*(unsigned char *)(a2 + 480))
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState,WebKit::EditorState,WebKit::EditorState*>((uint64_t)a1, (long long *)a2);
    a1[480] = 1;
  }
  return a1;
}

void sub_1986C0A84(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebKit::EditorState,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if ((_BYTE)v5)
  {
    unint64_t v6 = v4;
    int v25 = 0;
    uint64_t v26 = 0;
    if (v4 >= 0x10000)
    {
      do
      {
        uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v23);
        if (!v24) {
          goto LABEL_25;
        }
        if (HIDWORD(v26) == v26)
        {
          uint64_t result = (WTF *)WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)&v25, (unint64_t)&v23);
        }
        else
        {
          *((_OWORD *)v25 + HIDWORD(v26)) = v23;
          ++HIDWORD(v26);
        }
        --v6;
      }
      while (v6);
      int v14 = HIDWORD(v26);
      long long v15 = v25;
      if (v26 > HIDWORD(v26))
      {
        long long v16 = v25;
        if (HIDWORD(v26))
        {
          if (HIDWORD(v26) >> 28)
          {
            __break(0xC471u);
            return result;
          }
          int v22 = (WTF *)(16 * HIDWORD(v26));
          uint64_t v17 = (WTF *)WTF::fastMalloc(v22);
          LODWORD(v26) = v14;
          int v25 = v17;
          long long v16 = v15;
          if (v17 != v15)
          {
            uint64_t v18 = v15;
            unsigned int v19 = v22;
            do
            {
              long long v20 = *(_OWORD *)v18;
              uint64_t v18 = (WTF *)((char *)v18 + 16);
              *(_OWORD *)uint64_t v17 = v20;
              uint64_t v17 = (WTF *)((char *)v17 + 16);
              unsigned int v19 = (WTF *)((char *)v19 - 16);
            }
            while (v19);
            long long v16 = v25;
          }
        }
        if (v15)
        {
          if (v16 == v15)
          {
            int v25 = 0;
            LODWORD(v26) = 0;
          }
          WTF::fastFree(v15, v5);
          long long v15 = v25;
        }
        else
        {
          long long v15 = v16;
        }
      }
      int v9 = 0;
      *(void *)a1 = v15;
      uint64_t v21 = v26;
      int v25 = 0;
      uint64_t v26 = 0;
      *(void *)(a1 + 8) = v21;
      goto LABEL_12;
    }
    if (v4)
    {
      LODWORD(v26) = v4;
      int v25 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v23);
        if (!v24) {
          break;
        }
        if (HIDWORD(v26) == v26)
        {
          WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)&v25, (unint64_t)&v23);
        }
        else
        {
          *((_OWORD *)v25 + HIDWORD(v26)) = v23;
          ++HIDWORD(v26);
        }
        if (!--v6)
        {
          uint64_t v7 = v25;
          uint64_t v8 = v26;
          goto LABEL_11;
        }
      }
LABEL_25:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 16) = 0;
      int v9 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
LABEL_11:
      int v9 = 0;
      int v25 = 0;
      *(void *)a1 = v7;
      HIDWORD(v26) = 0;
      *(void *)(a1 + 8) = v8;
LABEL_12:
      *(unsigned char *)(a1 + 16) = 1;
    }
    uint64_t result = v25;
    if (v25)
    {
      int v25 = 0;
      LODWORD(v26) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v5);
      if (!v9) {
        return result;
      }
    }
    else if (!v9)
    {
      return result;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF *)*((void *)a2 + 3);
  if (result) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13) {
    return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v10);
  }
  return result;
}

void sub_1986C0CEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14)
{
  if (a13) {
    WTF::fastFree(a13, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::Decoder::decode<WebCore::IntSize>(unint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (!v3)
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(unint64_t *result)
{
  unint64_t v1 = result[1];
  unint64_t v2 = *result;
  unint64_t v3 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    unint64_t v10 = 0;
    unint64_t v16 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    unint64_t v17 = result[3];
    if (v17)
    {
      int v22 = result;
      if (v1)
      {
        (*(void (**)(unint64_t))(*(void *)v17 + 16))(v17);
        uint64_t result = v22;
        unint64_t v16 = *v22;
        unint64_t v10 = v22[1];
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v16 = 0;
      }
    }
    goto LABEL_18;
  }
  unint64_t v5 = (int *)(v2 + v3);
  result[2] = (unint64_t)(v5 + 1);
  if (!v2)
  {
    unint64_t v10 = v1;
    unint64_t v16 = 0;
LABEL_18:
    *uint64_t result = 0;
    result[1] = 0;
    unint64_t v8 = result[3];
    if (v8)
    {
      uint64_t v21 = result;
      if (v10)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v8 + 16))(v8, v16, v10);
        LODWORD(v8) = 0;
        int v9 = 0;
        uint64_t result = v21;
        unint64_t v10 = *v21;
        unint64_t v1 = v21[1];
        int v6 = 1;
        unint64_t v2 = *v21;
      }
      else
      {
        unint64_t v1 = 0;
        unint64_t v2 = 0;
        LODWORD(v8) = 0;
        int v9 = 0;
        int v6 = 1;
      }
    }
    else
    {
      unint64_t v10 = 0;
      unint64_t v1 = 0;
      unint64_t v2 = 0;
      int v9 = 0;
      int v6 = 1;
    }
    goto LABEL_8;
  }
  int v6 = 0;
  int v7 = *v5;
  LODWORD(v8) = v7 & 0xFFFFFF00;
  int v9 = v7;
  unint64_t v10 = v2;
LABEL_8:
  unint64_t v11 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v11 && v1 - v11 > 3)
  {
    BOOL v13 = (unsigned int *)((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    result[2] = (unint64_t)(v13 + 1);
    unint64_t v14 = v1;
    if (v2)
    {
      if (v6) {
        goto LABEL_35;
      }
      return (unint64_t *)(v9 | v8 | ((unint64_t)*v13 << 32));
    }
  }
  else
  {
    unint64_t v14 = 0;
    unint64_t v10 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    unint64_t v18 = result[3];
    if (v18)
    {
      long long v23 = result;
      if (v1)
      {
        (*(void (**)(unint64_t))(*(void *)v18 + 16))(v18);
        uint64_t result = v23;
        unint64_t v10 = *v23;
        unint64_t v14 = v23[1];
      }
      else
      {
        unint64_t v14 = 0;
        unint64_t v10 = 0;
      }
    }
  }
  uint64_t v15 = 0;
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v19 = result[3];
  if (!v19) {
    return (unint64_t *)v15;
  }
  long long v20 = result;
  if (!v14) {
    return 0;
  }
  uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v10, v14);
  if (!*v20) {
    return 0;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<unsigned int>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    unint64_t v5 = (_DWORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      unsigned int v6 = *v5 & 0xFFFFFF00;
      int v7 = *v5;
      uint64_t v8 = 0x100000000;
      return v8 | v7 | v6;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      unint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  unsigned int v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  return v8 | v7 | v6;
}

void IPC::ArgumentCoder<WebKit::LayerProperties,void>::decode(WTF::StringImpl **a1, IPC::Decoder *a2)
{
  uint64_t v564 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = WebKit::LayerProperties::LayerProperties((WebKit::LayerProperties *)v514);
  unint64_t v5 = *((void *)a2 + 1);
  unsigned int v6 = *(WTF::StringImpl **)a2;
  unint64_t v7 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *(WTF::StringImpl **)a2;
        unint64_t v12 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_10;
  }
  int v9 = (uint64_t *)((char *)v6 + v7);
  *((void *)a2 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v12 = v5;
    uint64_t v13 = 0;
LABEL_10:
    unint64_t v5 = 0;
    unsigned int v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        unsigned int v6 = *(WTF::StringImpl **)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        unsigned int v6 = 0;
      }
    }
    goto LABEL_11;
  }
  uint64_t v10 = *v9;
  if ((unint64_t)*v9 >> 41)
  {
LABEL_11:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 3);
    if (v4 && v5) {
      unint64_t v4 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v4 + 16))(v4, v6);
    }
    uint64_t v10 = 0;
    char v11 = 0;
    goto LABEL_13;
  }
  char v11 = 1;
LABEL_13:
  if (!v11) {
    goto LABEL_483;
  }
  v514[0] = v10;
  if (v10)
  {
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)v479);
    if (!LOBYTE(v479[1])) {
      goto LABEL_483;
    }
    unint64_t v16 = v479[0];
    v479[0] = 0;
    unint64_t v4 = v515;
    long long v515 = v16;
    if (v4)
    {
      int v17 = *(_DWORD *)v4 - 2;
      if (*(_DWORD *)v4 != 2)
      {
LABEL_21:
        *(_DWORD *)unint64_t v4 = v17;
        goto LABEL_22;
      }
      unint64_t v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
      if (LOBYTE(v479[1]))
      {
        unint64_t v4 = v479[0];
        v479[0] = 0;
        if (v4)
        {
          int v17 = *(_DWORD *)v4 - 2;
          if (*(_DWORD *)v4 == 2)
          {
            unint64_t v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v6);
            if ((v10 & 2) != 0) {
              goto LABEL_23;
            }
            goto LABEL_26;
          }
          goto LABEL_21;
        }
      }
    }
  }
LABEL_22:
  if ((v10 & 2) != 0)
  {
LABEL_23:
    IPC::Decoder::decode<std::unique_ptr<WebCore::TransformationMatrix>>(v479, (uint64_t *)a2);
    if (!LOBYTE(v479[1])) {
      goto LABEL_483;
    }
    unint64_t v4 = v516;
    long long v516 = v479[0];
    if (v4) {
      unint64_t v4 = (WTF::StringImpl *)WTF::fastFree(v4, v6);
    }
  }
  if ((v10 & 4) == 0) {
    goto LABEL_29;
  }
LABEL_26:
  IPC::Decoder::decode<std::unique_ptr<WebCore::TransformationMatrix>>(v479, (uint64_t *)a2);
  if (!LOBYTE(v479[1])) {
    goto LABEL_483;
  }
  unint64_t v4 = v517;
  long long v517 = v479[0];
  if (v4)
  {
    unint64_t v4 = (WTF::StringImpl *)WTF::fastFree(v4, v6);
    if ((v10 & 8) == 0) {
      goto LABEL_39;
    }
  }
  else
  {
LABEL_29:
    if ((v10 & 8) == 0) {
      goto LABEL_39;
    }
  }
  unint64_t v18 = *((void *)a2 + 1);
  unsigned int v6 = *(WTF::StringImpl **)a2;
  unint64_t v19 = *((void *)a2 + 2) - *(void *)a2;
  if (v18 <= v19)
  {
    unint64_t v29 = 0;
    int v30 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v31 = *((void *)a2 + 3);
    if (v31)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
        int v30 = *(WTF::StringImpl **)a2;
        unint64_t v29 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v29 = 0;
        int v30 = 0;
      }
    }
    goto LABEL_68;
  }
  long long v20 = (unsigned __int8 *)v6 + v19;
  *((void *)a2 + 2) = v20 + 1;
  if (!v6)
  {
    unint64_t v29 = v18;
    int v30 = 0;
LABEL_68:
    unint64_t v18 = 0;
    unsigned int v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v32 = *((void *)a2 + 3);
    if (v32)
    {
      if (v29)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v32 + 16))(v32, v30, v29);
        unsigned int v6 = *(WTF::StringImpl **)a2;
        unint64_t v18 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        unsigned int v6 = 0;
      }
    }
LABEL_69:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v33 = *((void *)a2 + 3);
    if (v33 && v18) {
LABEL_71:
    }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v6);
LABEL_73:
    unsigned int v35 = *(WTF::StringImpl **)a2;
    uint64_t v36 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v37 = *((void *)a2 + 3);
    if (v37 && v36) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v37 + 16))(v37, v35);
    }
    goto LABEL_483;
  }
  unsigned int v21 = *v20;
  if (v21 >= 2) {
    goto LABEL_69;
  }
  if (v21)
  {
    IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode((unint64_t *)a2, (uint64_t)v479);
    if (v481[16])
    {
      unint64_t v4 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
      *(_OWORD *)unint64_t v4 = *(_OWORD *)v479;
      *((_OWORD *)v4 + 1) = v480;
      *((_OWORD *)v4 + 2) = *(_OWORD *)v481;
      goto LABEL_37;
    }
    unsigned int v6 = *(WTF::StringImpl **)a2;
    uint64_t v34 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v33 = *((void *)a2 + 3);
    if (v33 && v34) {
      goto LABEL_71;
    }
    goto LABEL_73;
  }
  unint64_t v4 = 0;
LABEL_37:
  int v22 = v518;
  long long v518 = v4;
  if (v22) {
    unint64_t v4 = (WTF::StringImpl *)WTF::fastFree(v22, v6);
  }
LABEL_39:
  if ((v10 & 0x10) != 0)
  {
    IPC::Decoder::decode<WTF::Vector<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v479, a2);
    if (!(_BYTE)v480) {
      goto LABEL_483;
    }
    unint64_t v4 = v519;
    if (v519)
    {
      long long v519 = 0;
      LODWORD(v520) = 0;
      unint64_t v4 = (WTF::StringImpl *)WTF::fastFree(v4, v6);
    }
    long long v519 = v479[0];
    uint64_t v520 = v479[1];
  }
  if ((v10 & 0x20) == 0) {
    goto LABEL_210;
  }
  unint64_t v23 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v24)
  {
    LOBYTE(v476) = 0;
    char v477 = 0;
LABEL_85:
    uint64_t v40 = *(WTF::StringImpl **)a2;
    uint64_t v41 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v42 = *((void *)a2 + 3);
    if (v42 && v41) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v42 + 16))(v42, v40);
    }
    goto LABEL_86;
  }
  unint64_t v25 = v23;
  v416[0] = 0;
  v416[1] = 0;
  if (v23 >= 0x1C71)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)&v383, a2);
      if (!v391[40]) {
        goto LABEL_84;
      }
      if (HIDWORD(v416[1]) == LODWORD(v416[1]))
      {
        WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)v416, (unint64_t)&v383);
      }
      else
      {
        std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100]((void *)v416[0] + 18 * HIDWORD(v416[1]), (uint64_t *)&v383);
        ++HIDWORD(v416[1]);
      }
      if (v391[40]) {
        std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)&v383, v38);
      }
      if (!--v25)
      {
        WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v416, HIDWORD(v416[1]));
        *(WTF **)&long long v476 = v416[0];
        uint64_t v39 = v416[1];
        v416[0] = 0;
        v416[1] = 0;
        *((void *)&v476 + 1) = v39;
        goto LABEL_60;
      }
    }
  }
  if (v23)
  {
    LODWORD(v416[1]) = 144 * (int)v23 / 0x90u;
    v416[0] = (WTF *)WTF::fastMalloc((WTF *)(144 * v23));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)&v383, a2);
      if (!v391[40]) {
        break;
      }
      if (HIDWORD(v416[1]) == LODWORD(v416[1]))
      {
        WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>>((uint64_t)v416, (unint64_t)&v383);
      }
      else
      {
        std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::pair[abi:sn180100]((void *)v416[0] + 18 * HIDWORD(v416[1]), (uint64_t *)&v383);
        ++HIDWORD(v416[1]);
      }
      if (v391[40]) {
        std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)&v383, v24);
      }
      if (!--v25)
      {
        unsigned int v27 = v416[0];
        int v28 = v416[1];
        goto LABEL_59;
      }
    }
LABEL_84:
    LOBYTE(v476) = 0;
    char v477 = 0;
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v416, v26);
    goto LABEL_85;
  }
  unsigned int v27 = 0;
  int v28 = 0;
LABEL_59:
  v416[0] = 0;
  v416[1] = 0;
  *(void *)&long long v476 = v27;
  *((void *)&v476 + 1) = v28;
LABEL_60:
  char v477 = 1;
  WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v416, v24);
LABEL_86:
  IPC::Decoder::decode<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(a2, &v467);
  unint64_t v43 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v44)
  {
    LOBYTE(v470) = 0;
    char v471 = 0;
LABEL_116:
    unint64_t v65 = *(WTF::StringImpl **)a2;
    uint64_t v66 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v67 = *((void *)a2 + 3);
    if (v67 && v66) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v67 + 16))(v67, v65);
    }
    goto LABEL_117;
  }
  unint64_t v45 = v43;
  long long v383 = 0uLL;
  if (v43 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>(v416, (unint64_t *)a2);
      if (!LOBYTE(v416[1]))
      {
LABEL_115:
        LOBYTE(v470) = 0;
        char v471 = 0;
        WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v383, v44);
        goto LABEL_116;
      }
      int v57 = HIDWORD(v383);
      if (HIDWORD(v383) != DWORD2(v383)) {
        break;
      }
      char v58 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v383, HIDWORD(v383) + 1, (unint64_t)v416);
      uint64_t v59 = HIDWORD(v383);
      int v60 = HIDWORD(v383) + 1;
      uint64_t v61 = v383;
      uint64_t v62 = *v58;
      *char v58 = 0;
      *(void *)(v61 + 8 * v59) = v62;
      HIDWORD(v383) = v60;
      if (LOBYTE(v416[1])) {
        goto LABEL_109;
      }
LABEL_113:
      if (!--v45)
      {
        WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v383, HIDWORD(v383));
        uint64_t v142 = *((void *)&v383 + 1);
        *(void *)&long long v470 = v383;
        long long v383 = 0uLL;
        *((void *)&v470 + 1) = v142;
        goto LABEL_104;
      }
    }
    unint64_t v63 = v416[0];
    v416[0] = 0;
    *(void *)(v383 + 8 * HIDWORD(v383)) = v63;
    HIDWORD(v383) = v57 + 1;
LABEL_109:
    uint64_t v64 = v416[0];
    v416[0] = 0;
    if (v64)
    {
      if (*((_DWORD *)v64 + 2) == 1) {
        (*(void (**)(WTF *))(*(void *)v64 + 56))(v64);
      }
      else {
        --*((_DWORD *)v64 + 2);
      }
    }
    goto LABEL_113;
  }
  if (v43)
  {
    uint64_t v46 = WTF::fastMalloc((WTF *)(8 * v43));
    DWORD2(v383) = v45;
    *(void *)&long long v383 = v46;
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>(v416, (unint64_t *)a2);
      if (!LOBYTE(v416[1])) {
        goto LABEL_115;
      }
      int v47 = HIDWORD(v383);
      if (HIDWORD(v383) != DWORD2(v383)) {
        break;
      }
      char v48 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v383, HIDWORD(v383) + 1, (unint64_t)v416);
      uint64_t v49 = HIDWORD(v383);
      int v50 = HIDWORD(v383) + 1;
      uint64_t v51 = v383;
      uint64_t v52 = *v48;
      uint64_t *v48 = 0;
      *(void *)(v51 + 8 * v49) = v52;
      HIDWORD(v383) = v50;
      if (LOBYTE(v416[1])) {
        goto LABEL_95;
      }
LABEL_99:
      if (!--v45)
      {
        uint64_t v56 = *((void *)&v383 + 1);
        uint64_t v55 = v383;
        goto LABEL_103;
      }
    }
    char v53 = v416[0];
    v416[0] = 0;
    *(void *)(v383 + 8 * HIDWORD(v383)) = v53;
    HIDWORD(v383) = v47 + 1;
LABEL_95:
    char v54 = v416[0];
    v416[0] = 0;
    if (v54)
    {
      if (*((_DWORD *)v54 + 2) == 1) {
        (*(void (**)(WTF *))(*(void *)v54 + 56))(v54);
      }
      else {
        --*((_DWORD *)v54 + 2);
      }
    }
    goto LABEL_99;
  }
  uint64_t v55 = 0;
  uint64_t v56 = 0;
LABEL_103:
  long long v383 = 0uLL;
  *(void *)&long long v470 = v55;
  *((void *)&v470 + 1) = v56;
LABEL_104:
  char v471 = 1;
  WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v383, v44);
LABEL_117:
  unint64_t v4 = IPC::Decoder::decode<WebCore::AcceleratedEffectValues>(v416, (unint64_t *)a2);
  if (*(void *)a2)
  {
    if (!v477) {
      goto LABEL_639;
    }
    uint64_t v70 = (WTF::StringImpl *)v476;
    *(void *)&long long v383 = v476;
    unsigned int v71 = DWORD2(v476);
    unsigned int v72 = HIDWORD(v476);
    long long v476 = 0uLL;
    *((void *)&v383 + 1) = __PAIR64__(v72, v71);
    if (!BYTE8(v467)) {
      goto LABEL_639;
    }
    unint64_t v69 = (WTF::StringImpl **)v467;
    *(void *)&long long v467 = 0;
    int v384 = v69;
    if (!v471) {
      goto LABEL_639;
    }
    uint64_t v73 = v470;
    uint64_t v385 = v470;
    unsigned int v74 = DWORD2(v470);
    unsigned int v75 = HIDWORD(v470);
    long long v470 = 0uLL;
    unint64_t v386 = __PAIR64__(v75, v74);
    if (!v459) {
      goto LABEL_639;
    }
    long long v389 = v418;
    long long v390 = v419;
    *(_OWORD *)uint64_t v391 = *(_OWORD *)v420;
    *(_OWORD *)&v391[13] = *(_OWORD *)&v420[13];
    long long v387 = *(_OWORD *)v416;
    long long v388 = v417;
    *(_DWORD *)&v391[32] = 0;
    v391[38] = 0;
    int v76 = v422;
    v391[36] = v422;
    unsigned int v378 = v422 - 2;
    v391[37] = v423;
    if (v378 >= 9)
    {
      char v78 = 0;
      if (v422 == 11)
      {
        *(_DWORD *)&v391[32] = v421;
        int v77 = v421;
        int v421 = 0;
      }
      else
      {
        int v77 = 0;
      }
    }
    else
    {
      v391[38] = v424;
      if (v424)
      {
        int v77 = v421;
        *(_DWORD *)&v391[32] = v421;
        char v78 = 1;
      }
      else
      {
        char v78 = 0;
        *(_DWORD *)&v391[32] = v421;
        int v77 = v421;
      }
    }
    unsigned __int8 v422 = 0;
    *(_DWORD *)&v391[40] = 0;
    v391[46] = 0;
    int v79 = v426;
    v391[44] = v426;
    v391[45] = v427;
    unsigned int v375 = v426 - 2;
    if (v375 >= 9)
    {
      char v81 = 0;
      if (v426 == 11)
      {
        *(_DWORD *)&v391[40] = v425;
        int v80 = v425;
        int v425 = 0;
      }
      else
      {
        int v80 = 0;
      }
    }
    else
    {
      v391[46] = v428;
      if (v428)
      {
        int v80 = v425;
        *(_DWORD *)&v391[40] = v425;
        char v81 = 1;
      }
      else
      {
        char v81 = 0;
        *(_DWORD *)&v391[40] = v425;
        int v80 = v425;
      }
    }
    unsigned __int8 v426 = 0;
    LOBYTE(v392) = v429;
    uint64_t v82 = v430;
    uint64_t v430 = 0;
    uint64_t v374 = v82;
    *((void *)&v392 + 1) = v82;
    LODWORD(v82) = v431;
    unsigned int v83 = HIDWORD(v431);
    uint64_t v431 = 0;
    unsigned int v373 = v82;
    *(_DWORD *)uint64_t v393 = v82;
    *(_DWORD *)&v393[4] = v83;
    long long v84 = v432;
    long long v432 = 0u;
    *(_OWORD *)&v393[8] = v84;
    long long v85 = v433;
    long long v433 = 0u;
    *(_OWORD *)&v393[24] = v85;
    *(_DWORD *)&v393[40] = 0;
    char v394 = 0;
    int v86 = v435;
    v393[44] = v435;
    unsigned int v372 = v435 - 2;
    v393[45] = v436;
    if (v372 >= 9)
    {
      char v88 = 0;
      if (v435 == 11)
      {
        *(_DWORD *)&v393[40] = v434;
        int v87 = v434;
        int v434 = 0;
      }
      else
      {
        int v87 = 0;
      }
    }
    else
    {
      char v394 = v437;
      if (v437)
      {
        int v87 = v434;
        *(_DWORD *)&v393[40] = v434;
        char v88 = 1;
      }
      else
      {
        char v88 = 0;
        *(_DWORD *)&v393[40] = v434;
        int v87 = v434;
      }
    }
    unsigned __int8 v435 = 0;
    int v395 = 0;
    char v398 = 0;
    int v89 = v439;
    unsigned __int8 v396 = v439;
    char v397 = v440;
    unsigned int v371 = v439 - 2;
    char v369 = v78;
    if (v371 >= 9)
    {
      char v91 = 0;
      if (v439 == 11)
      {
        int v395 = v438;
        int v90 = v438;
        int v438 = 0;
      }
      else
      {
        int v90 = 0;
      }
    }
    else
    {
      char v398 = v441;
      if (v441)
      {
        int v90 = v438;
        int v395 = v438;
        char v91 = 1;
      }
      else
      {
        char v91 = 0;
        int v395 = v438;
        int v90 = v438;
      }
    }
    unsigned __int8 v439 = 0;
    int v399 = 0;
    char v402 = 0;
    int v92 = v443;
    unsigned __int8 v400 = v443;
    char v401 = v444;
    unsigned int v370 = v443 - 2;
    char v367 = v88;
    char v368 = v81;
    if (v370 >= 9)
    {
      char v365 = 0;
      if (v443 == 11)
      {
        int v399 = v442;
        int v93 = v442;
        int v442 = 0;
      }
      else
      {
        int v93 = 0;
      }
    }
    else
    {
      char v402 = v445;
      if (v445)
      {
        int v93 = v442;
        int v399 = v442;
        char v365 = 1;
      }
      else
      {
        char v365 = 0;
        int v399 = v442;
        int v93 = v442;
      }
    }
    unsigned __int8 v443 = 0;
    int v403 = 0;
    char v406 = 0;
    int v94 = v447;
    unsigned __int8 v404 = v447;
    char v405 = v448;
    unsigned int v95 = v447 - 2;
    char v366 = v91;
    if (v95 >= 9)
    {
      char v364 = 0;
      if (v447 == 11)
      {
        int v403 = v446;
        int v96 = v446;
        int v446 = 0;
      }
      else
      {
        int v96 = 0;
      }
    }
    else
    {
      char v406 = v449;
      if (v449)
      {
        int v96 = v446;
        int v403 = v446;
        char v364 = 1;
      }
      else
      {
        char v364 = 0;
        int v403 = v446;
        int v96 = v446;
      }
    }
    unsigned __int8 v447 = 0;
    int v407 = 0;
    char v410 = 0;
    int v97 = v451;
    unsigned __int8 v408 = v451;
    unsigned __int8 v409 = v452;
    unsigned int v98 = v451 - 2;
    uint64_t v381 = a1;
    if (v98 >= 9)
    {
      char v363 = 0;
      if (v451 == 11)
      {
        int v407 = v450;
        int v99 = v450;
        int v450 = 0;
      }
      else
      {
        int v99 = 0;
      }
    }
    else
    {
      char v410 = v453;
      if (v453)
      {
        char v363 = 1;
        int v99 = v450;
        int v407 = v450;
      }
      else
      {
        char v363 = 0;
        int v407 = v450;
        int v99 = v450;
      }
    }
    unsigned __int8 v451 = 0;
    uint64_t v100 = v455;
    uint64_t v455 = 0;
    uint64_t v411 = v454;
    uint64_t v412 = v100;
    int v101 = v456;
    int v102 = HIDWORD(v456);
    uint64_t v413 = v456;
    uint64_t v456 = 0;
    uint64_t v103 = v457;
    uint64_t v457 = 0;
    uint64_t v414 = v103;
    int v104 = v458;
    int v105 = HIDWORD(v458);
    uint64_t v415 = v458;
    uint64_t v458 = 0;
    long long v383 = 0uLL;
    v479[0] = v70;
    v479[1] = (WTF::StringImpl *)__PAIR64__(v72, v71);
    int v384 = 0;
    uint64_t v385 = 0;
    *(void *)&long long v480 = v69;
    *((void *)&v480 + 1) = v73;
    unint64_t v386 = 0;
    *(_DWORD *)unint64_t v481 = v74;
    *(_DWORD *)&v481[4] = v75;
    *(_OWORD *)&v481[8] = v387;
    long long v482 = v388;
    *(_OWORD *)&v485[13] = *(_OWORD *)&v391[13];
    long long v484 = v390;
    *(_OWORD *)long long v485 = *(_OWORD *)v391;
    long long v483 = v389;
    LODWORD(v486) = 0;
    BYTE4(v486) = v76;
    *(_WORD *)((char *)&v486 + 5) = v423;
    if (v378 >= 9)
    {
      if (v76 != 11)
      {
LABEL_167:
        v391[36] = 0;
        DWORD2(v486) = 0;
        BYTE12(v486) = v79;
        *(_WORD *)((char *)&v486 + 13) = v427;
        if (v375 >= 9)
        {
          if (v79 != 11)
          {
LABEL_170:
            v391[44] = 0;
            LOBYTE(v487) = v429;
            *((void *)&v392 + 1) = 0;
            memset(v393, 0, 40);
            *((void *)&v487 + 1) = v374;
            *(void *)char v488 = __PAIR64__(v83, v373);
            *(_OWORD *)&v488[8] = v84;
            *(_OWORD *)&unsigned char v488[24] = v85;
            *(_DWORD *)&v488[40] = 0;
            char v489 = 0;
            v488[44] = v86;
            v488[45] = v436;
            if (v372 >= 9)
            {
              if (v86 != 11)
              {
LABEL_173:
                v393[44] = 0;
                int v490 = 0;
                char v493 = 0;
                char v491 = v89;
                char v492 = v440;
                if (v371 >= 9)
                {
                  if (v89 != 11)
                  {
LABEL_176:
                    unsigned __int8 v396 = 0;
                    int v494 = 0;
                    char v497 = 0;
                    char v495 = v92;
                    char v496 = v444;
                    if (v370 >= 9)
                    {
                      if (v92 != 11)
                      {
LABEL_179:
                        unsigned __int8 v400 = 0;
                        int v498 = 0;
                        char v501 = 0;
                        char v499 = v94;
                        char v500 = v448;
                        if (v95 >= 9)
                        {
                          if (v94 != 11)
                          {
LABEL_182:
                            unsigned __int8 v404 = 0;
                            int v502 = 0;
                            char v505 = 0;
                            char v503 = v97;
                            unsigned __int8 v504 = v452;
                            if (v98 >= 9)
                            {
                              if (v97 != 11) {
                                goto LABEL_185;
                              }
                              int v407 = 0;
                            }
                            else
                            {
                              char v505 = v363;
                            }
                            int v502 = v99;
LABEL_185:
                            unsigned __int8 v408 = 0;
                            uint64_t v412 = 0;
                            uint64_t v506 = v454;
                            uint64_t v507 = v100;
                            int v508 = v101;
                            uint64_t v413 = 0;
                            int v509 = v102;
                            uint64_t v414 = 0;
                            uint64_t v510 = v103;
                            int v511 = v104;
                            uint64_t v415 = 0;
                            int v512 = v105;
                            char v513 = 1;
                            WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v387, (void *)v452);
                            WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v385, v106);
                            if (v384) {
                              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v384, v107);
                            }
                            WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v383, v107);
                            a1 = v381;
                            goto LABEL_188;
                          }
                          int v403 = 0;
                        }
                        else
                        {
                          char v501 = v364;
                        }
                        int v498 = v96;
                        goto LABEL_182;
                      }
                      int v399 = 0;
                    }
                    else
                    {
                      char v497 = v365;
                    }
                    int v494 = v93;
                    goto LABEL_179;
                  }
                  int v395 = 0;
                }
                else
                {
                  char v493 = v366;
                }
                int v490 = v90;
                goto LABEL_176;
              }
              *(_DWORD *)&v393[40] = 0;
            }
            else
            {
              char v489 = v367;
            }
            *(_DWORD *)&v488[40] = v87;
            goto LABEL_173;
          }
          *(_DWORD *)&v391[40] = 0;
        }
        else
        {
          BYTE14(v486) = v368;
        }
        DWORD2(v486) = v80;
        goto LABEL_170;
      }
      *(_DWORD *)&v391[32] = 0;
    }
    else
    {
      BYTE6(v486) = v369;
    }
    LODWORD(v486) = v77;
    goto LABEL_167;
  }
  LOBYTE(v479[0]) = 0;
  char v513 = 0;
LABEL_188:
  if (v459) {
    WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v416, v68);
  }
  if (v471) {
    WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v470, v68);
  }
  if (BYTE8(v467) && (void)v467) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v467, (WTF::StringImpl *)v68);
  }
  if (v477) {
    WTF::Vector<std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v476, (WTF::StringImpl *)v68);
  }
  if (!v513)
  {
    uint64_t v68 = *(char **)a2;
    uint64_t v135 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v136 = *((void *)a2 + 3);
    if (!v136 || !v135 || ((*(void (**)(uint64_t, char *))(*(void *)v136 + 16))(v136, v68), !v513))
    {
      *(unsigned char *)a1 = 0;
      *((unsigned char *)a1 + 728) = 0;
      std::__optional_destruct_base<WebKit::LayerProperties::AnimationChanges,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v479, v68);
      goto LABEL_484;
    }
  }
  if (HIDWORD(v522))
  {
    int v108 = v521;
    uint64_t v109 = 144 * HIDWORD(v522);
    do
    {
      int v108 = (WTF *)(std::pair<WTF::String,WebKit::PlatformCAAnimationRemoteProperties>::~pair((uint64_t)v108, (WTF::StringImpl *)v68)+ 144);
      v109 -= 144;
    }
    while (v109);
  }
  char v110 = v521;
  if (v521)
  {
    uint64_t v521 = 0;
    LODWORD(v522) = 0;
    WTF::fastFree(v110, v68);
  }
  unint64_t v111 = v479[0];
  v479[0] = 0;
  uint64_t v521 = v111;
  uint64_t v112 = v479[1];
  v479[1] = 0;
  char v522 = v112;
  unsigned int v113 = (WTF::StringImpl **)v480;
  *(void *)&long long v480 = 0;
  int v114 = v523;
  char v523 = v113;
  if (v114) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v114, (WTF::StringImpl *)v68);
  }
  if (HIDWORD(v525)) {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>>::destruct(v524, (_DWORD **)v524 + HIDWORD(v525));
  }
  char v115 = v524;
  if (v524)
  {
    char v524 = 0;
    LODWORD(v525) = 0;
    WTF::fastFree(v115, v68);
  }
  char v116 = (WTF *)*((void *)&v480 + 1);
  *((void *)&v480 + 1) = 0;
  char v524 = v116;
  uint64_t v117 = *(void *)v481;
  *(void *)unint64_t v481 = 0;
  uint64_t v525 = v117;
  WebCore::AcceleratedEffectValues::operator=((uint64_t)v526, (uint64_t)&v481[8]);
  unint64_t v4 = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::LayerProperties::AnimationChanges,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v479, v118);
LABEL_210:
  if ((v10 & 0x40) != 0)
  {
    unint64_t v4 = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
    if (((unint64_t)v6 & 0xFF00000000) == 0) {
      goto LABEL_483;
    }
    v526[31] = v4;
    int v527 = (int)v6;
  }
  if ((v10 & 0x80) != 0)
  {
    unint64_t v4 = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::FloatPoint3D>(a2);
    if (((unint64_t)v6 & 0xFF00000000) == 0) {
      goto LABEL_483;
    }
    char v528 = v4;
    int v529 = (int)v6;
  }
  if ((v10 & 0x100) != 0)
  {
    unint64_t v4 = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)v479);
    if (!(_BYTE)v480) {
      goto LABEL_483;
    }
    long long v530 = *(_OWORD *)v479;
  }
  if ((v10 & 0x200) != 0)
  {
    unint64_t v4 = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::FloatRect>((unint64_t *)a2, (uint64_t)v479);
    if (!(_BYTE)v480) {
      goto LABEL_483;
    }
    long long v531 = *(_OWORD *)v479;
  }
  if ((v10 & 0x400) == 0) {
    goto LABEL_330;
  }
  unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
  uint64_t v119 = *(WTF::StringImpl **)a2;
  unint64_t v120 = *((void *)a2 + 2) - *(void *)a2;
  if ((unint64_t)v69 <= v120)
  {
    uint64_t v137 = 0;
    uint64_t v138 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v139 = *((void *)a2 + 3);
    if (v139)
    {
      if (v69)
      {
        (*(void (**)(uint64_t))(*(void *)v139 + 16))(v139);
        uint64_t v138 = *(WTF::StringImpl **)a2;
        uint64_t v137 = (WTF::StringImpl **)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v137 = 0;
        uint64_t v138 = 0;
      }
    }
    goto LABEL_271;
  }
  uint64_t v121 = (unsigned __int8 *)v119 + v120;
  *((void *)a2 + 2) = v121 + 1;
  if (!v119)
  {
    uint64_t v137 = v69;
    uint64_t v138 = 0;
LABEL_271:
    unint64_t v69 = 0;
    uint64_t v119 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v140 = *((void *)a2 + 3);
    if (v140)
    {
      if (v137)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **))(*(void *)v140 + 16))(v140, v138, v137);
        uint64_t v119 = *(WTF::StringImpl **)a2;
        unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
      }
      else
      {
        unint64_t v69 = 0;
        uint64_t v119 = 0;
      }
    }
    goto LABEL_272;
  }
  if (*v121 >= 2u)
  {
LABEL_272:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v141 = *((void *)a2 + 3);
    if (v141 && v69) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v141 + 16))(v141, v119);
    }
    uint64_t v382 = a1;
    LOBYTE(v464) = 0;
    char v465 = 0;
    goto LABEL_496;
  }
  if (*v121)
  {
    if ((unint64_t)v69 <= v121 + 1 - (unsigned __int8 *)v119)
    {
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v143 = *((void *)a2 + 3);
      if (v143)
      {
        (*(void (**)(uint64_t))(*(void *)v143 + 16))(v143);
        unsigned int v122 = 0;
        unint64_t v69 = 0;
        uint64_t v360 = *(WTF::StringImpl **)a2;
        uint64_t v361 = *((void *)a2 + 1);
        uint64_t v362 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v119 = 0;
        if (v362 && v361)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, uint64_t))(*(void *)v362 + 16))(v362, v360, v361);
          unsigned int v122 = 0;
          uint64_t v119 = *(WTF::StringImpl **)a2;
          unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
        }
      }
      else
      {
        unint64_t v69 = 0;
        uint64_t v119 = 0;
        unsigned int v122 = 0;
      }
    }
    else
    {
      *((void *)a2 + 2) = v121 + 2;
      unsigned int v122 = v121[1];
      if (v122 < 2)
      {
        int v380 = 0;
        char v123 = 1;
        goto LABEL_230;
      }
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v144 = *((void *)a2 + 3);
    if (v144 && v69) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v144 + 16))(v144, v119);
    }
    char v123 = 0;
    int v380 = 1;
LABEL_230:
    if (!v122) {
      char v123 = 0;
    }
    char v379 = v123;
    LOWORD(v383) = 0;
    IPC::Decoder::operator>><BOOL>(a2, &v383);
    int v377 = BYTE1(v383);
    if (BYTE1(v383))
    {
      char v376 = v383;
    }
    else
    {
      long long v145 = *(WTF::StringImpl **)a2;
      uint64_t v146 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v147 = *((void *)a2 + 3);
      if (v147 && v146) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v147 + 16))(v147, v145);
      }
      char v376 = 0;
    }
    IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>((uint64_t *)a2, (uint64_t)v416);
    unint64_t v124 = *((void *)a2 + 1);
    long long v125 = *(WTF::StringImpl **)a2;
    unint64_t v126 = *((void *)a2 + 2) - *(void *)a2;
    if (v124 <= v126)
    {
      unint64_t v148 = 0;
      char v149 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v150 = *((void *)a2 + 3);
      if (v150)
      {
        if (v124)
        {
          (*(void (**)(uint64_t))(*(void *)v150 + 16))(v150);
          char v149 = *(WTF::StringImpl **)a2;
          unint64_t v148 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v148 = 0;
          char v149 = 0;
        }
      }
    }
    else
    {
      uint64_t v127 = (unsigned __int8 *)v125 + v126;
      *((void *)a2 + 2) = v127 + 1;
      if (v125)
      {
        unsigned int v128 = *v127;
        if (v128 < 2)
        {
          if (!v128)
          {
            int v132 = 0;
            LOBYTE(v374) = 0;
            unsigned __int8 v131 = 0;
            unint64_t v133 = 0;
            goto LABEL_286;
          }
          uint64_t v129 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)a2);
          if (v130)
          {
            unsigned __int8 v131 = v129;
            int v132 = 0;
            unint64_t v133 = v129 & 0xFFFFFFFFFFFFFF00;
            LOBYTE(v374) = 1;
            goto LABEL_286;
          }
LABEL_284:
          long long v153 = *(WTF::StringImpl **)a2;
          uint64_t v154 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v155 = *((void *)a2 + 3);
          if (v155 && v154) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v155 + 16))(v155, v153);
          }
          unsigned __int8 v131 = 0;
          unint64_t v133 = 0;
          int v132 = 1;
LABEL_286:
          IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v476, a2);
          IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v470, a2);
          IPC::Decoder::decode<std::optional<WebKit::BufferAndBackendInfo>>((uint64_t)&v467, a2);
          unint64_t v4 = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, &v460);
          long long v156 = v563;
          unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
          uint64_t v68 = *(char **)a2;
          unint64_t v157 = *((void *)a2 + 2) - *(void *)a2;
          uint64_t v382 = a1;
          if ((unint64_t)v69 <= v157)
          {
            uint64_t v162 = 0;
            uint64_t v163 = 0;
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v164 = *((void *)a2 + 3);
            if (v164)
            {
              if (v69)
              {
                (*(void (**)(uint64_t))(*(void *)v164 + 16))(v164);
                uint64_t v163 = *(WTF::StringImpl **)a2;
                uint64_t v162 = (WTF::StringImpl **)*((void *)a2 + 1);
              }
              else
              {
                uint64_t v162 = 0;
                uint64_t v163 = 0;
              }
            }
          }
          else
          {
            long long v158 = &v68[v157];
            *((void *)a2 + 2) = v158 + 1;
            if (v68)
            {
              unsigned int v159 = *v158;
              if (v159 < 2)
              {
                if (!v159)
                {
                  int v160 = 0;
                  LOBYTE(v156) = 0;
                  char v161 = 0;
                  goto LABEL_300;
                }
                unint64_t v4 = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a2, (uint64_t)&v383);
                if ((_BYTE)v384)
                {
                  int v160 = 0;
                  char v161 = v383;
                  *(void *)uint64_t v563 = *(void *)((char *)&v383 + 1);
                  *(void *)&v563[7] = *((void *)&v383 + 1);
                  LOBYTE(v156) = 1;
LABEL_300:
                  a1 = v479;
                  if (*(void *)a2)
                  {
                    LOBYTE(v383) = 0;
                    LOBYTE(v389) = 0;
                    *((void *)&v389 + 1) = 0;
                    LOBYTE(v390) = 0;
                    BYTE8(v390) = 0;
                    v391[0] = 0;
                    v391[16] = 0;
                    v391[24] = 0;
                    v391[40] = 0;
                    LOBYTE(v392) = 0;
                    v393[0] = 0;
                    v393[8] = 0;
                    v393[16] = 0;
                    v393[24] = 0;
                    v393[40] = 0;
                    if (v380) {
                      goto LABEL_639;
                    }
                    v393[44] = v379;
                    if (!v377) {
                      goto LABEL_639;
                    }
                    v393[45] = v376;
                    if (!v420[16]) {
                      goto LABEL_639;
                    }
                    unint64_t v4 = (WTF::StringImpl *)std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>((unsigned int *)&v383, (uint64_t)v416);
                    if (v132) {
                      goto LABEL_639;
                    }
                    *(void *)&long long v390 = v133 | v131;
                    BYTE8(v390) = v374;
                    if (!v478) {
                      goto LABEL_639;
                    }
                    *(_OWORD *)uint64_t v391 = v476;
                    v391[16] = v477;
                    if (!v472) {
                      goto LABEL_639;
                    }
                    *(_OWORD *)&v391[24] = v470;
                    v391[40] = v471;
                    if (!v469) {
                      goto LABEL_639;
                    }
                    long long v392 = v467;
                    v393[0] = v468;
                    if (!v462) {
                      goto LABEL_639;
                    }
                    *(void *)&v393[8] = v460;
                    v393[16] = v461;
                    if (v160) {
                      goto LABEL_639;
                    }
                    v393[24] = v161;
                    *(void *)&v393[25] = *(void *)v563;
                    *(void *)&v393[32] = *(void *)&v563[7];
                    v393[40] = (_BYTE)v156;
                    std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100]((uint64_t)v479, (uint64_t)&v383);
                    long long v487 = v392;
                    *(_OWORD *)char v488 = *(_OWORD *)v393;
                    *(_OWORD *)&v488[16] = *(_OWORD *)&v393[16];
                    *(_OWORD *)&v488[30] = *(_OWORD *)&v393[30];
                    long long v484 = v390;
                    *(_OWORD *)long long v485 = *(_OWORD *)v391;
                    *(_OWORD *)&v485[16] = *(_OWORD *)&v391[16];
                    *((void *)&v483 + 1) = *((void *)&v389 + 1);
                    long long v486 = *(_OWORD *)&v391[32];
                    LOBYTE(v490) = 1;
                    *((void *)&v389 + 1) = 0;
                    if ((_BYTE)v389 && DWORD2(v388) != -1) {
                      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[DWORD2(v388)]((int)v466, (WTF::MachSendRight *)&v383);
                    }
                  }
                  else
                  {
                    LOBYTE(v479[0]) = 0;
                    LOBYTE(v490) = 0;
                  }
                  if (v420[16] && v420[8] && *(_DWORD *)v420 != -1) {
                    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[*(unsigned int *)v420]((int)&v383, (WTF::MachSendRight *)v416);
                  }
                  if ((_BYTE)v490
                    || (int v272 = *(WTF::StringImpl **)a2,
                        uint64_t v273 = *((void *)a2 + 1),
                        *(void *)a2 = 0,
                        *((void *)a2 + 1) = 0,
                        (uint64_t v274 = *((void *)a2 + 3)) != 0)
                    && v273
                    && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v274 + 16))(v274, v272),
                        (_BYTE)v490))
                  {
                    uint64_t v167 = WTF::fastMalloc((WTF *)0xD8);
                    std::__optional_move_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__optional_move_base[abi:sn180100](v167, (uint64_t)v479);
                    uint64_t v168 = *((void *)&v483 + 1);
                    *((void *)&v483 + 1) = 0;
                    *(void *)(v167 + 80) = v168;
                    long long v169 = v484;
                    long long v170 = *(_OWORD *)v485;
                    long long v171 = *(_OWORD *)&v485[16];
                    *(_OWORD *)(v167 + 136) = v486;
                    *(_OWORD *)(v167 + 120) = v171;
                    *(_OWORD *)(v167 + 104) = v170;
                    *(_OWORD *)(v167 + 88) = v169;
                    long long v172 = v487;
                    long long v173 = *(_OWORD *)v488;
                    long long v174 = *(_OWORD *)&v488[16];
                    *(_OWORD *)(v167 + 198) = *(_OWORD *)&v488[30];
                    *(_OWORD *)(v167 + 184) = v174;
                    *(_OWORD *)(v167 + 168) = v173;
                    *(_OWORD *)(v167 + 152) = v172;
                    uint64_t v464 = (WTF *)v167;
                    char v465 = 1;
                    unint64_t v4 = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::RemoteLayerBackingStoreProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v479);
                    int v134 = 0;
LABEL_319:
                    a1 = v382;
                    goto LABEL_320;
                  }
                  LOBYTE(v464) = 0;
                  char v465 = 0;
                  std::__optional_destruct_base<WebKit::RemoteLayerBackingStoreProperties,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v479);
LABEL_496:
                  unint64_t v275 = *(WTF::StringImpl **)a2;
                  unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
                  *(void *)a2 = 0;
                  *((void *)a2 + 1) = 0;
                  unint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 3);
                  if (v4 && v69)
                  {
                    unint64_t v4 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v4 + 16))(v4, v275);
                    a1 = v382;
                    int v134 = 1;
                    goto LABEL_320;
                  }
                  int v134 = 1;
                  goto LABEL_319;
                }
LABEL_298:
                uint64_t v68 = *(char **)a2;
                unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
                *(void *)a2 = 0;
                *((void *)a2 + 1) = 0;
                unint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 3);
                if (v4 && v69) {
                  unint64_t v4 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(void *)v4 + 16))(v4, v68);
                }
                char v161 = 0;
                int v160 = 1;
                goto LABEL_300;
              }
LABEL_297:
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v166 = *((void *)a2 + 3);
              if (v166 && v69) {
                (*(void (**)(uint64_t, char *))(*(void *)v166 + 16))(v166, v68);
              }
              goto LABEL_298;
            }
            uint64_t v162 = v69;
            uint64_t v163 = 0;
          }
          unint64_t v69 = 0;
          uint64_t v68 = 0;
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v165 = *((void *)a2 + 3);
          if (v165)
          {
            if (v162)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **))(*(void *)v165 + 16))(v165, v163, v162);
              uint64_t v68 = *(char **)a2;
              unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
            }
            else
            {
              unint64_t v69 = 0;
              uint64_t v68 = 0;
            }
          }
          goto LABEL_297;
        }
LABEL_283:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v152 = *((void *)a2 + 3);
        if (v152 && v124) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v152 + 16))(v152, v125);
        }
        goto LABEL_284;
      }
      unint64_t v148 = v124;
      char v149 = 0;
    }
    unint64_t v124 = 0;
    long long v125 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v151 = *((void *)a2 + 3);
    if (v151)
    {
      if (v148)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v151 + 16))(v151, v149, v148);
        long long v125 = *(WTF::StringImpl **)a2;
        unint64_t v124 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v124 = 0;
        long long v125 = 0;
      }
    }
    goto LABEL_283;
  }
  int v134 = 0;
  uint64_t v464 = 0;
  char v465 = 1;
LABEL_320:
  uint64_t v68 = *(char **)a2;
  if (*(void *)a2)
  {
    if (v134) {
      goto LABEL_639;
    }
    v479[1] = 0;
    v479[0] = 0;
    uint64_t v473 = 0;
    BOOL v474 = v464;
    char v475 = 1;
    WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties((WebKit::RemoteLayerBackingStoreOrProperties *)v479);
  }
  else
  {
    LOBYTE(v473) = 0;
    char v475 = 0;
    if ((v134 & 1) == 0)
    {
      uint64_t v259 = v464;
      uint64_t v464 = 0;
      if (v259) {
        std::default_delete<WebKit::RemoteLayerBackingStoreProperties>::operator()[abi:sn180100]((int)&v464, v259);
      }
    }
    uint64_t v260 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v261 = *((void *)a2 + 3);
    if (v261 && v260) {
      (*(void (**)(uint64_t))(*(void *)v261 + 16))(v261);
    }
  }
  if (!v475) {
    goto LABEL_483;
  }
  uint64_t v175 = v473;
  uint64_t v473 = 0;
  int v176 = v532;
  char v532 = v175;
  if (v176) {
    (*(void (**)(WTF *))(*(void *)v176 + 8))(v176);
  }
  uint64_t v177 = v474;
  BOOL v474 = 0;
  unsigned int v6 = v533;
  uint64_t v533 = v177;
  if (v6) {
    std::default_delete<WebKit::RemoteLayerBackingStoreProperties>::operator()[abi:sn180100]((int)&v533, v6);
  }
  if (v475) {
    WebKit::RemoteLayerBackingStoreOrProperties::~RemoteLayerBackingStoreOrProperties((WebKit::RemoteLayerBackingStoreOrProperties *)&v473);
  }
LABEL_330:
  if ((v10 & 0x800) == 0) {
    goto LABEL_340;
  }
  unint64_t v178 = *((void *)a2 + 1);
  unsigned int v6 = *(WTF::StringImpl **)a2;
  unint64_t v179 = *((void *)a2 + 2) - *(void *)a2;
  if (v178 <= v179)
  {
    unint64_t v262 = 0;
    unint64_t v263 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v264 = *((void *)a2 + 3);
    if (v264)
    {
      if (v178)
      {
        (*(void (**)(uint64_t))(*(void *)v264 + 16))(v264);
        unint64_t v263 = *(WTF::StringImpl **)a2;
        unint64_t v262 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v262 = 0;
        unint64_t v263 = 0;
      }
    }
    goto LABEL_480;
  }
  uint64_t v180 = (unsigned __int8 *)v6 + v179;
  *((void *)a2 + 2) = v180 + 1;
  if (!v6)
  {
    unint64_t v262 = v178;
    unint64_t v263 = 0;
LABEL_480:
    unint64_t v178 = 0;
    unsigned int v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v265 = *((void *)a2 + 3);
    if (v265)
    {
      if (v262)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v265 + 16))(v265, v263, v262);
        unsigned int v6 = *(WTF::StringImpl **)a2;
        unint64_t v178 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v178 = 0;
        unsigned int v6 = 0;
      }
    }
    goto LABEL_481;
  }
  unsigned int v181 = *v180;
  if (v181 >= 2)
  {
LABEL_481:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v266 = *((void *)a2 + 3);
    if (v266 && v178) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v266 + 16))(v266, v6);
    }
    goto LABEL_482;
  }
  if (!v181)
  {
    uint64_t v182 = 0;
    goto LABEL_339;
  }
  IPC::Decoder::decode<WebCore::FilterOperations>((uint64_t)v479, (uint64_t *)a2);
  if (!(_BYTE)v480)
  {
LABEL_482:
    uint64_t v199 = *(WTF::StringImpl **)a2;
    uint64_t v267 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v267) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  uint64_t v182 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v182 = 0;
  *(void *)(v182 + 8) = 0;
  uint64_t v183 = v479[0];
  v479[0] = 0;
  *(void *)uint64_t v182 = v183;
  LODWORD(v183) = v479[1];
  LODWORD(v479[1]) = 0;
  *(_DWORD *)(v182 + 8) = v183;
  LODWORD(v183) = HIDWORD(v479[1]);
  HIDWORD(v479[1]) = 0;
  *(_DWORD *)(v182 + 12) = v183;
  if ((_BYTE)v480) {
    WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v479, v6);
  }
LABEL_339:
  uint64_t v184 = v534;
  uint64_t v534 = v182;
  if (v184)
  {
    uint64_t v257 = (WTF *)WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v184, v6);
    WTF::fastFree(v257, v258);
    if ((v10 & 0x1000) == 0) {
      goto LABEL_345;
    }
    goto LABEL_341;
  }
LABEL_340:
  if ((v10 & 0x1000) == 0) {
    goto LABEL_345;
  }
LABEL_341:
  IPC::ArgumentCoder<WebCore::Path,void>::decode((unint64_t *)a2, v6, v479);
  if (!(_BYTE)v483)
  {
    uint64_t v269 = *(WTF::StringImpl **)a2;
    uint64_t v270 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v271 = *((void *)a2 + 3);
    if (!v271) {
      goto LABEL_483;
    }
    if (!v270) {
      goto LABEL_483;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v271 + 16))(v271, v269);
    if (!(_BYTE)v483) {
      goto LABEL_483;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>((uint64_t)v535, (uint64_t)&v479[1]);
  if ((_BYTE)v483 && DWORD2(v482) != -1) {
    ((void (*)(long long *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[DWORD2(v482)])(&v383, &v479[1]);
  }
LABEL_345:
  if ((v10 & 0x2000) != 0)
  {
    IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>>(v479, a2);
    if (!(_BYTE)v480) {
      goto LABEL_483;
    }
    v535[4] = *(_OWORD *)v479;
  }
  if ((v10 & 0x4000) != 0)
  {
    IPC::Decoder::decode<WTF::Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::MarkableTraits>>(v479, a2);
    if (!(_BYTE)v480) {
      goto LABEL_483;
    }
    v535[5] = *(_OWORD *)v479;
  }
  if ((v10 & 0x8000) != 0)
  {
    unint64_t v185 = *((void *)a2 + 1);
    uint64_t v186 = *(WTF::StringImpl **)a2;
    unint64_t v187 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
    if (v185 < v187 || v185 - v187 <= 7)
    {
      unint64_t v276 = 0;
      unint64_t v277 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v278 = *((void *)a2 + 3);
      if (v278)
      {
        if (v185)
        {
          (*(void (**)(uint64_t))(*(void *)v278 + 16))(v278);
          unint64_t v277 = *(WTF::StringImpl **)a2;
          unint64_t v276 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v276 = 0;
          unint64_t v277 = 0;
        }
      }
    }
    else
    {
      char v188 = (uint64_t *)((char *)v186 + v187);
      *((void *)a2 + 2) = v188 + 1;
      if (v186)
      {
        uint64_t v536 = *v188;
        goto LABEL_356;
      }
      unint64_t v276 = v185;
      unint64_t v277 = 0;
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v279 = *((void *)a2 + 3);
    if (v279 && v276) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v279 + 16))(v279, v277);
    }
    goto LABEL_483;
  }
LABEL_356:
  if ((v10 & 0x10000) != 0)
  {
    uint64_t v189 = IPC::Decoder::decode<float>(a2);
    if ((v189 & 0xFF00000000) == 0) {
      goto LABEL_483;
    }
    int v537 = v189;
  }
  if ((v10 & 0x20000) != 0)
  {
    uint64_t v190 = IPC::Decoder::decode<float>(a2);
    if ((v190 & 0xFF00000000) == 0) {
      goto LABEL_483;
    }
    int v538 = v190;
  }
  if ((v10 & 0x40000) != 0)
  {
    uint64_t v191 = IPC::Decoder::decode<float>(a2);
    if ((v191 & 0xFF00000000) == 0) {
      goto LABEL_483;
    }
    int v539 = v191;
  }
  if ((v10 & 0x80000) != 0)
  {
    uint64_t v192 = IPC::Decoder::decode<float>(a2);
    if ((v192 & 0xFF00000000) == 0) {
      goto LABEL_483;
    }
    int v540 = v192;
  }
  if ((v10 & 0x100000) != 0)
  {
    uint64_t v193 = IPC::Decoder::decode<float>(a2);
    if ((v193 & 0xFF00000000) == 0) {
      goto LABEL_483;
    }
    int v541 = v193;
  }
  if ((v10 & 0x200000) != 0)
  {
    IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a2, v479);
    if (!LOBYTE(v479[1]))
    {
      uint64_t v282 = *(WTF::StringImpl **)a2;
      uint64_t v283 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v284 = *((void *)a2 + 3);
      if (!v284) {
        goto LABEL_483;
      }
      if (!v283) {
        goto LABEL_483;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v284 + 16))(v284, v282);
      if (!LOBYTE(v479[1])) {
        goto LABEL_483;
      }
    }
    WebCore::Color::operator=();
    if (LOBYTE(v479[1]))
    {
      if (((unint64_t)v479[0] & 0x8000000000000) != 0)
      {
        char v280 = (unsigned int *)((unint64_t)v479[0] & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v479[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v280);
          WTF::fastFree((WTF *)v280, v194);
        }
      }
    }
  }
  if ((v10 & 0x400000) != 0)
  {
    IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a2, v479);
    if (!LOBYTE(v479[1]))
    {
      uint64_t v285 = *(WTF::StringImpl **)a2;
      uint64_t v286 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v287 = *((void *)a2 + 3);
      if (!v287) {
        goto LABEL_483;
      }
      if (!v286) {
        goto LABEL_483;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v287 + 16))(v287, v285);
      if (!LOBYTE(v479[1])) {
        goto LABEL_483;
      }
    }
    WebCore::Color::operator=();
    if (LOBYTE(v479[1]))
    {
      if (((unint64_t)v479[0] & 0x8000000000000) != 0)
      {
        int v281 = (unsigned int *)((unint64_t)v479[0] & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v479[0] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v281);
          WTF::fastFree((WTF *)v281, v195);
        }
      }
    }
  }
  if ((v10 & 0x800000) != 0)
  {
    LOWORD(v479[0]) = 0;
    IPC::Decoder::operator>><BOOL>(a2, v479);
    if (BYTE1(v479[0]))
    {
      char v542 = (char)v479[0];
      goto LABEL_382;
    }
    uint64_t v199 = *(WTF::StringImpl **)a2;
    uint64_t v288 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v288) {
      goto LABEL_483;
    }
LABEL_576:
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v268 + 16))(v268, v199);
    goto LABEL_483;
  }
LABEL_382:
  if ((v10 & 0x1000000) != 0)
  {
    unsigned __int16 v196 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a2);
    if (v196 < 0x100u) {
      goto LABEL_483;
    }
    char v543 = v196;
  }
  if ((v10 & 0x2000000) != 0)
  {
    unsigned __int16 v197 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a2);
    if (v197 < 0x100u) {
      goto LABEL_483;
    }
    char v544 = v197;
  }
  if ((v10 & 0x4000000) != 0)
  {
    unint64_t v198 = *((void *)a2 + 1);
    uint64_t v199 = *(WTF::StringImpl **)a2;
    unint64_t v200 = *((void *)a2 + 2) - *(void *)a2;
    if (v198 <= v200)
    {
      unint64_t v289 = 0;
      char v290 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v291 = *((void *)a2 + 3);
      if (v291)
      {
        if (v198)
        {
          (*(void (**)(uint64_t))(*(void *)v291 + 16))(v291);
          char v290 = *(WTF::StringImpl **)a2;
          unint64_t v289 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v289 = 0;
          char v290 = 0;
        }
      }
    }
    else
    {
      uint64_t v201 = (unsigned __int8 *)v199 + v200;
      *((void *)a2 + 2) = v201 + 1;
      if (v199)
      {
        int v202 = *v201;
        if ((v202 - 1) < 0x12)
        {
          char v545 = v202;
          goto LABEL_393;
        }
        goto LABEL_519;
      }
      unint64_t v289 = v198;
      char v290 = 0;
    }
    unint64_t v198 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v292 = *((void *)a2 + 3);
    if (v292)
    {
      if (v289)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v292 + 16))(v292, v290, v289);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v198 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v198 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_519:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v198) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
LABEL_393:
  if ((v10 & 0x8000000) != 0)
  {
    unsigned __int16 v203 = IPC::Decoder::decode<WebCore::RotationDirection>(a2);
    if (v203 < 0x100u) {
      goto LABEL_483;
    }
    char v546 = v203;
  }
  if ((v10 & 0x10000000) != 0)
  {
    unsigned __int16 v204 = IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a2);
    if (v204 < 0x100u) {
      goto LABEL_483;
    }
    char v547 = v204;
  }
  if ((v10 & 0x20000000) != 0)
  {
    unint64_t v205 = *((void *)a2 + 1);
    uint64_t v199 = *(WTF::StringImpl **)a2;
    unint64_t v206 = *((void *)a2 + 2) - *(void *)a2;
    if (v205 <= v206)
    {
      unint64_t v293 = 0;
      uint64_t v294 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v295 = *((void *)a2 + 3);
      if (v295)
      {
        if (v205)
        {
          (*(void (**)(uint64_t))(*(void *)v295 + 16))(v295);
          uint64_t v294 = *(WTF::StringImpl **)a2;
          unint64_t v293 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v293 = 0;
          uint64_t v294 = 0;
        }
      }
    }
    else
    {
      uint64_t v207 = (unsigned __int8 *)v199 + v206;
      *((void *)a2 + 2) = v207 + 1;
      if (v199)
      {
        unsigned int v208 = *v207;
        if (v208 < 2)
        {
          BOOL v548 = v208 != 0;
          goto LABEL_404;
        }
        goto LABEL_524;
      }
      unint64_t v293 = v205;
      uint64_t v294 = 0;
    }
    unint64_t v205 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v296 = *((void *)a2 + 3);
    if (v296)
    {
      if (v293)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v296 + 16))(v296, v294, v293);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v205 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v205 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_524:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v205) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
LABEL_404:
  if ((v10 & 0x40000000) == 0) {
    goto LABEL_409;
  }
  unint64_t v209 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v210 = *((void *)a2 + 2) - *(void *)a2;
  if (v209 <= v210)
  {
    unint64_t v297 = 0;
    unint64_t v298 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v299 = *((void *)a2 + 3);
    if (v299)
    {
      if (v209)
      {
        (*(void (**)(uint64_t))(*(void *)v299 + 16))(v299);
        unint64_t v298 = *(WTF::StringImpl **)a2;
        unint64_t v297 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v297 = 0;
        unint64_t v298 = 0;
      }
    }
    goto LABEL_528;
  }
  int v211 = (unsigned __int8 *)v199 + v210;
  *((void *)a2 + 2) = v211 + 1;
  if (!v199)
  {
    unint64_t v297 = v209;
    unint64_t v298 = 0;
LABEL_528:
    unint64_t v209 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v300 = *((void *)a2 + 3);
    if (v300)
    {
      if (v297)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v300 + 16))(v300, v298, v297);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v209 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v209 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_529:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v209) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v212 = *v211;
  if (v212 >= 2) {
    goto LABEL_529;
  }
  BOOL v549 = v212 != 0;
LABEL_409:
  if ((v10 & 0x80000000) == 0) {
    goto LABEL_414;
  }
  unint64_t v213 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v214 = *((void *)a2 + 2) - *(void *)a2;
  if (v213 <= v214)
  {
    unint64_t v301 = 0;
    uint64_t v302 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v303 = *((void *)a2 + 3);
    if (v303)
    {
      if (v213)
      {
        (*(void (**)(uint64_t))(*(void *)v303 + 16))(v303);
        uint64_t v302 = *(WTF::StringImpl **)a2;
        unint64_t v301 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v301 = 0;
        uint64_t v302 = 0;
      }
    }
    goto LABEL_533;
  }
  uint64_t v215 = (unsigned __int8 *)v199 + v214;
  *((void *)a2 + 2) = v215 + 1;
  if (!v199)
  {
    unint64_t v301 = v213;
    uint64_t v302 = 0;
LABEL_533:
    unint64_t v213 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v304 = *((void *)a2 + 3);
    if (v304)
    {
      if (v301)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v304 + 16))(v304, v302, v301);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v213 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v213 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_534:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v213) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v216 = *v215;
  if (v216 >= 2) {
    goto LABEL_534;
  }
  BOOL v550 = v216 != 0;
LABEL_414:
  if ((v10 & 0x100000000) == 0) {
    goto LABEL_419;
  }
  unint64_t v217 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v218 = *((void *)a2 + 2) - *(void *)a2;
  if (v217 <= v218)
  {
    unint64_t v305 = 0;
    char v306 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v307 = *((void *)a2 + 3);
    if (v307)
    {
      if (v217)
      {
        (*(void (**)(uint64_t))(*(void *)v307 + 16))(v307);
        char v306 = *(WTF::StringImpl **)a2;
        unint64_t v305 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v305 = 0;
        char v306 = 0;
      }
    }
    goto LABEL_538;
  }
  long long v219 = (unsigned __int8 *)v199 + v218;
  *((void *)a2 + 2) = v219 + 1;
  if (!v199)
  {
    unint64_t v305 = v217;
    char v306 = 0;
LABEL_538:
    unint64_t v217 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v308 = *((void *)a2 + 3);
    if (v308)
    {
      if (v305)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v308 + 16))(v308, v306, v305);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v217 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v217 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_539:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v217) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v220 = *v219;
  if (v220 >= 2) {
    goto LABEL_539;
  }
  BOOL v551 = v220 != 0;
LABEL_419:
  if ((v10 & 0x200000000) == 0) {
    goto LABEL_424;
  }
  unint64_t v221 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v222 = *((void *)a2 + 2) - *(void *)a2;
  if (v221 <= v222)
  {
    unint64_t v309 = 0;
    uint64_t v310 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v311 = *((void *)a2 + 3);
    if (v311)
    {
      if (v221)
      {
        (*(void (**)(uint64_t))(*(void *)v311 + 16))(v311);
        uint64_t v310 = *(WTF::StringImpl **)a2;
        unint64_t v309 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v309 = 0;
        uint64_t v310 = 0;
      }
    }
    goto LABEL_543;
  }
  long long v223 = (unsigned __int8 *)v199 + v222;
  *((void *)a2 + 2) = v223 + 1;
  if (!v199)
  {
    unint64_t v309 = v221;
    uint64_t v310 = 0;
LABEL_543:
    unint64_t v221 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v312 = *((void *)a2 + 3);
    if (v312)
    {
      if (v309)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v312 + 16))(v312, v310, v309);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v221 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v221 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_544:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v221) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v224 = *v223;
  if (v224 >= 2) {
    goto LABEL_544;
  }
  BOOL v552 = v224 != 0;
LABEL_424:
  if ((v10 & 0x400000000) == 0) {
    goto LABEL_429;
  }
  unint64_t v225 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v226 = *((void *)a2 + 2) - *(void *)a2;
  if (v225 <= v226)
  {
    unint64_t v313 = 0;
    char v314 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v315 = *((void *)a2 + 3);
    if (v315)
    {
      if (v225)
      {
        (*(void (**)(uint64_t))(*(void *)v315 + 16))(v315);
        char v314 = *(WTF::StringImpl **)a2;
        unint64_t v313 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v313 = 0;
        char v314 = 0;
      }
    }
    goto LABEL_548;
  }
  char v227 = (unsigned __int8 *)v199 + v226;
  *((void *)a2 + 2) = v227 + 1;
  if (!v199)
  {
    unint64_t v313 = v225;
    char v314 = 0;
LABEL_548:
    unint64_t v225 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v316 = *((void *)a2 + 3);
    if (v316)
    {
      if (v313)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v316 + 16))(v316, v314, v313);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v225 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v225 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_549:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v225) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v228 = *v227;
  if (v228 >= 2) {
    goto LABEL_549;
  }
  BOOL v553 = v228 != 0;
LABEL_429:
  if ((v10 & 0x800000000) == 0) {
    goto LABEL_434;
  }
  unint64_t v229 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v230 = *((void *)a2 + 2) - *(void *)a2;
  if (v229 <= v230)
  {
    unint64_t v317 = 0;
    uint64_t v318 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v319 = *((void *)a2 + 3);
    if (v319)
    {
      if (v229)
      {
        (*(void (**)(uint64_t))(*(void *)v319 + 16))(v319);
        uint64_t v318 = *(WTF::StringImpl **)a2;
        unint64_t v317 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v317 = 0;
        uint64_t v318 = 0;
      }
    }
    goto LABEL_553;
  }
  uint64_t v231 = (unsigned __int8 *)v199 + v230;
  *((void *)a2 + 2) = v231 + 1;
  if (!v199)
  {
    unint64_t v317 = v229;
    uint64_t v318 = 0;
LABEL_553:
    unint64_t v229 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v320 = *((void *)a2 + 3);
    if (v320)
    {
      if (v317)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v320 + 16))(v320, v318, v317);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v229 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v229 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_554:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v229) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v232 = *v231;
  if (v232 >= 2) {
    goto LABEL_554;
  }
  BOOL v554 = v232 != 0;
LABEL_434:
  if ((v10 & 0x1000000000) == 0) {
    goto LABEL_439;
  }
  unint64_t v233 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v234 = *((void *)a2 + 2) - *(void *)a2;
  if (v233 <= v234)
  {
    unint64_t v321 = 0;
    uint64_t v322 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v323 = *((void *)a2 + 3);
    if (v323)
    {
      if (v233)
      {
        (*(void (**)(uint64_t))(*(void *)v323 + 16))(v323);
        uint64_t v322 = *(WTF::StringImpl **)a2;
        unint64_t v321 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v321 = 0;
        uint64_t v322 = 0;
      }
    }
    goto LABEL_558;
  }
  long long v235 = (unsigned __int8 *)v199 + v234;
  *((void *)a2 + 2) = v235 + 1;
  if (!v199)
  {
    unint64_t v321 = v233;
    uint64_t v322 = 0;
LABEL_558:
    unint64_t v233 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v324 = *((void *)a2 + 3);
    if (v324)
    {
      if (v321)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v324 + 16))(v324, v322, v321);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v233 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v233 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_559:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v233) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v236 = *v235;
  if (v236 >= 2) {
    goto LABEL_559;
  }
  BOOL v555 = v236 != 0;
LABEL_439:
  if ((v10 & 0x2000000000) == 0) {
    goto LABEL_444;
  }
  unint64_t v237 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v238 = *((void *)a2 + 2) - *(void *)a2;
  if (v237 <= v238)
  {
    unint64_t v325 = 0;
    uint64_t v326 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v327 = *((void *)a2 + 3);
    if (v327)
    {
      if (v237)
      {
        (*(void (**)(uint64_t))(*(void *)v327 + 16))(v327);
        uint64_t v326 = *(WTF::StringImpl **)a2;
        unint64_t v325 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v325 = 0;
        uint64_t v326 = 0;
      }
    }
    goto LABEL_563;
  }
  unsigned int v239 = (unsigned __int8 *)v199 + v238;
  *((void *)a2 + 2) = v239 + 1;
  if (!v199)
  {
    unint64_t v325 = v237;
    uint64_t v326 = 0;
LABEL_563:
    unint64_t v237 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v328 = *((void *)a2 + 3);
    if (v328)
    {
      if (v325)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v328 + 16))(v328, v326, v325);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v237 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v237 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_564:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v237) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v240 = *v239;
  if (v240 >= 2) {
    goto LABEL_564;
  }
  BOOL v556 = v240 != 0;
LABEL_444:
  if ((v10 & 0x4000000000) == 0) {
    goto LABEL_449;
  }
  unint64_t v241 = *((void *)a2 + 1);
  uint64_t v199 = *(WTF::StringImpl **)a2;
  unint64_t v242 = *((void *)a2 + 2) - *(void *)a2;
  if (v241 <= v242)
  {
    unint64_t v329 = 0;
    uint64_t v330 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v331 = *((void *)a2 + 3);
    if (v331)
    {
      if (v241)
      {
        (*(void (**)(uint64_t))(*(void *)v331 + 16))(v331);
        uint64_t v330 = *(WTF::StringImpl **)a2;
        unint64_t v329 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v329 = 0;
        uint64_t v330 = 0;
      }
    }
    goto LABEL_568;
  }
  uint64_t v243 = (unsigned __int8 *)v199 + v242;
  *((void *)a2 + 2) = v243 + 1;
  if (!v199)
  {
    unint64_t v329 = v241;
    uint64_t v330 = 0;
LABEL_568:
    unint64_t v241 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v332 = *((void *)a2 + 3);
    if (v332)
    {
      if (v329)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v332 + 16))(v332, v330, v329);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v241 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v241 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_569:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v241) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
  unsigned int v244 = *v243;
  if (v244 >= 2) {
    goto LABEL_569;
  }
  BOOL v557 = v244 != 0;
LABEL_449:
  if ((v10 & 0x8000000000) != 0)
  {
    unint64_t v245 = *((void *)a2 + 1);
    uint64_t v199 = *(WTF::StringImpl **)a2;
    unint64_t v246 = *((void *)a2 + 2) - *(void *)a2;
    if (v245 <= v246)
    {
      unint64_t v333 = 0;
      unint64_t v334 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v335 = *((void *)a2 + 3);
      if (v335)
      {
        if (v245)
        {
          (*(void (**)(uint64_t))(*(void *)v335 + 16))(v335);
          unint64_t v334 = *(WTF::StringImpl **)a2;
          unint64_t v333 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v333 = 0;
          unint64_t v334 = 0;
        }
      }
    }
    else
    {
      unint64_t v247 = (unsigned __int8 *)v199 + v246;
      *((void *)a2 + 2) = v247 + 1;
      if (v199)
      {
        unsigned int v248 = *v247;
        if (v248 < 2)
        {
          BOOL v558 = v248 != 0;
          goto LABEL_454;
        }
        goto LABEL_574;
      }
      unint64_t v333 = v245;
      unint64_t v334 = 0;
    }
    unint64_t v245 = 0;
    uint64_t v199 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v336 = *((void *)a2 + 3);
    if (v336)
    {
      if (v333)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v336 + 16))(v336, v334, v333);
        uint64_t v199 = *(WTF::StringImpl **)a2;
        unint64_t v245 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v245 = 0;
        uint64_t v199 = 0;
      }
    }
LABEL_574:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v268 = *((void *)a2 + 3);
    if (!v268 || !v245) {
      goto LABEL_483;
    }
    goto LABEL_576;
  }
LABEL_454:
  if ((v10 & 0x10000000000) == 0) {
    goto LABEL_637;
  }
  IPC::Decoder::decode<WebCore::Region>(&v476, (uint64_t *)a2);
  unint64_t v249 = IPC::Decoder::decode<unsigned long long>(a2);
  if ((_BYTE)v250)
  {
    unint64_t v251 = v249;
    v416[0] = 0;
    v416[1] = 0;
    if (v249 < 0xAAAA)
    {
      if (v249)
      {
        unsigned int v252 = 24 * v249;
        int v253 = (WTF *)WTF::fastMalloc((WTF *)(24 * v249));
        LODWORD(v416[1]) = v252 / 0x18;
        v416[0] = v253;
        do
        {
          IPC::Decoder::decode<WebCore::Region>(&v383, (uint64_t *)a2);
          if (!(_BYTE)v385) {
            goto LABEL_589;
          }
          if (HIDWORD(v416[1]) == LODWORD(v416[1]))
          {
            WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region>((uint64_t)v416, (unint64_t)&v383);
          }
          else
          {
            WebCore::Region::Region();
            ++HIDWORD(v416[1]);
          }
          if ((_BYTE)v385) {
            WebCore::Region::~Region((WebCore::Region *)&v383);
          }
          --v251;
        }
        while (v251);
        int v255 = v416[0];
        int v256 = v416[1];
      }
      else
      {
        int v255 = 0;
        int v256 = 0;
      }
      v416[0] = 0;
      v416[1] = 0;
      uint64_t v473 = v255;
      BOOL v474 = v256;
LABEL_472:
      char v475 = 1;
      WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v416, v250);
      goto LABEL_591;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::Region>(&v383, (uint64_t *)a2);
      if (!(_BYTE)v385) {
        break;
      }
      if (HIDWORD(v416[1]) == LODWORD(v416[1]))
      {
        WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region>((uint64_t)v416, (unint64_t)&v383);
      }
      else
      {
        WebCore::Region::Region();
        ++HIDWORD(v416[1]);
      }
      if ((_BYTE)v385) {
        WebCore::Region::~Region((WebCore::Region *)&v383);
      }
      if (!--v251)
      {
        WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v416, HIDWORD(v416[1]));
        uint64_t v473 = v416[0];
        uint64_t v337 = v416[1];
        v416[0] = 0;
        v416[1] = 0;
        BOOL v474 = v337;
        goto LABEL_472;
      }
    }
LABEL_589:
    LOBYTE(v473) = 0;
    char v475 = 0;
    WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v416, v254);
  }
  else
  {
    LOBYTE(v473) = 0;
    char v475 = 0;
  }
  uint64_t v68 = *(char **)a2;
  unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 3);
  if (v4) {
    goto LABEL_640;
  }
  while (1)
  {
LABEL_591:
    IPC::Decoder::decode<WebCore::Region>(&v470, (uint64_t *)a2);
    IPC::Decoder::decode<WebCore::Region>(&v467, (uint64_t *)a2);
    unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
    uint64_t v68 = *(char **)a2;
    unint64_t v338 = *((void *)a2 + 2) - *(void *)a2;
    if ((unint64_t)v69 <= v338)
    {
      uint64_t v353 = 0;
      long long v354 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v355 = *((void *)a2 + 3);
      if (v355)
      {
        if (v69)
        {
          (*(void (**)(uint64_t))(*(void *)v355 + 16))(v355);
          long long v354 = *(WTF::StringImpl **)a2;
          uint64_t v353 = (WTF::StringImpl **)*((void *)a2 + 1);
        }
        else
        {
          uint64_t v353 = 0;
          long long v354 = 0;
        }
      }
LABEL_643:
      unint64_t v69 = 0;
      uint64_t v68 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v356 = *((void *)a2 + 3);
      if (v356)
      {
        if (v353)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **))(*(void *)v356 + 16))(v356, v354, v353);
          uint64_t v68 = *(char **)a2;
          unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
        }
        else
        {
          unint64_t v69 = 0;
          uint64_t v68 = 0;
        }
      }
LABEL_644:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 3);
      if (v4 && v69) {
        unint64_t v4 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(void *)v4 + 16))(v4, v68);
      }
LABEL_645:
      LOBYTE(v416[0]) = 0;
      LOBYTE(v418) = 0;
      goto LABEL_600;
    }
    uint64_t v339 = &v68[v338];
    *((void *)a2 + 2) = v339 + 1;
    if (!v68)
    {
      uint64_t v353 = v69;
      long long v354 = 0;
      goto LABEL_643;
    }
    unsigned int v340 = *v339;
    if (v340 >= 2) {
      goto LABEL_644;
    }
    if (v340)
    {
      unint64_t v4 = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::Region>(&v383, (uint64_t *)a2);
      if (!(_BYTE)v385) {
        goto LABEL_645;
      }
      unint64_t v4 = (WTF::StringImpl *)WebCore::Region::Region();
      BYTE8(v417) = 1;
    }
    else
    {
      LOBYTE(v383) = 0;
      LOBYTE(v385) = 0;
      unint64_t v4 = (WTF::StringImpl *)std::__optional_move_base<WebCore::Region,false>::__optional_move_base[abi:sn180100](v416, (uint64_t)&v383);
    }
    LOBYTE(v418) = 1;
    if ((_BYTE)v385) {
      WebCore::Region::~Region((WebCore::Region *)&v383);
    }
LABEL_600:
    if (!(_BYTE)v418)
    {
      uint64_t v68 = *(char **)a2;
      unint64_t v69 = (WTF::StringImpl **)*((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      unint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 3);
      if (v4)
      {
        if (v69) {
          unint64_t v4 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *))(*(void *)v4 + 16))(v4, v68);
        }
      }
    }
    if (!*(void *)a2)
    {
      LOBYTE(v479[0]) = 0;
      v485[16] = 0;
      goto LABEL_612;
    }
    if (v478)
    {
      if (v475)
      {
        unint64_t v341 = v473;
        uint64_t v473 = 0;
        v466[0] = v341;
        uint64_t v342 = v474;
        BOOL v474 = 0;
        v466[1] = v342;
        if (v472)
        {
          unint64_t v4 = (WTF::StringImpl *)WebCore::Region::Region();
          if (v469)
          {
            unint64_t v4 = (WTF::StringImpl *)WebCore::Region::Region();
            if ((_BYTE)v418) {
              break;
            }
          }
        }
      }
    }
LABEL_639:
    __break(1u);
LABEL_640:
    if (v69) {
      (*(void (**)(WTF::StringImpl *, char *))(*(void *)v4 + 16))(v4, v68);
    }
  }
  std::__optional_move_base<WebCore::Region,false>::__optional_move_base[abi:sn180100](&v460, (uint64_t)v416);
  WebCore::EventRegion::EventRegion();
  WebCore::EventRegion::EventRegion((uint64_t)v479, (uint64_t)&v383);
  v485[16] = 1;
  if (v391[8]) {
    WebCore::Region::~Region((WebCore::Region *)&v390);
  }
  WebCore::Region::~Region((WebCore::Region *)((char *)&v388 + 8));
  WebCore::Region::~Region((WebCore::Region *)&v387);
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v385, v343);
  WebCore::Region::~Region((WebCore::Region *)&v383);
  if (v463) {
    WebCore::Region::~Region((WebCore::Region *)&v460);
  }
  WebCore::Region::~Region((WebCore::Region *)v563);
  WebCore::Region::~Region((WebCore::Region *)&v464);
  WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v466, v344);
LABEL_612:
  if ((_BYTE)v418 && BYTE8(v417)) {
    WebCore::Region::~Region((WebCore::Region *)v416);
  }
  if (v469) {
    WebCore::Region::~Region((WebCore::Region *)&v467);
  }
  if (v472) {
    WebCore::Region::~Region((WebCore::Region *)&v470);
  }
  if (v475) {
    WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v473, v68);
  }
  if (v478) {
    WebCore::Region::~Region((WebCore::Region *)&v476);
  }
  if (!v485[16])
  {
    uint64_t v357 = *(WTF::StringImpl **)a2;
    uint64_t v358 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v359 = *((void *)a2 + 3);
    if (!v359
      || !v358
      || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v359 + 16))(v359, v357), !v485[16]))
    {
      *(unsigned char *)a1 = 0;
      *((unsigned char *)a1 + 728) = 0;
      std::__optional_destruct_base<WebCore::EventRegion,false>::~__optional_destruct_base[abi:sn180100](v479);
      goto LABEL_484;
    }
  }
  WebCore::Region::operator=();
  if (HIDWORD(v560))
  {
    char v346 = v559;
    uint64_t v347 = 24 * HIDWORD(v560);
    do
    {
      WebCore::Region::~Region(v346);
      char v346 = (WTF *)(v348 + 24);
      v347 -= 24;
    }
    while (v347);
  }
  char v349 = v559;
  if (v559)
  {
    unint64_t v559 = 0;
    LODWORD(v560) = 0;
    WTF::fastFree(v349, v345);
  }
  char v350 = (WTF *)*((void *)&v480 + 1);
  *((void *)&v480 + 1) = 0;
  unint64_t v559 = v350;
  uint64_t v351 = *(void *)v481;
  *(void *)unint64_t v481 = 0;
  uint64_t v560 = v351;
  WebCore::Region::operator=();
  WebCore::Region::operator=();
  if (v562 == v485[8])
  {
    if (v562) {
      WebCore::Region::operator=();
    }
  }
  else
  {
    if (v562)
    {
      WebCore::Region::~Region((WebCore::Region *)&v561);
      char v352 = 0;
    }
    else
    {
      WebCore::Region::Region();
      char v352 = 1;
    }
    unsigned __int8 v562 = v352;
  }
  std::__optional_destruct_base<WebCore::EventRegion,false>::~__optional_destruct_base[abi:sn180100](v479);
LABEL_637:
  if (*(void *)a2)
  {
    WebKit::LayerProperties::LayerProperties((uint64_t)a1, (uint64_t)v514);
    *((unsigned char *)a1 + 728) = 1;
    goto LABEL_484;
  }
LABEL_483:
  *(unsigned char *)a1 = 0;
  *((unsigned char *)a1 + 728) = 0;
LABEL_484:
  WebKit::LayerProperties::~LayerProperties((WebKit::LayerProperties *)v514);
}

void sub_1986C49D0(_Unwind_Exception *a1)
{
}

void sub_1986C4E70()
{
}

unint64_t IPC::Decoder::decode<WebCore::LayoutPoint>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::LayoutPoint,void>::decode(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

void std::__optional_storage_base<WebKit::EditorState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState,false>>(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)(a1 + 480) == a2[480])
  {
    if (*(unsigned char *)(a1 + 480))
    {
      long long v4 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
      *(_OWORD *)a1 = v4;
      std::__optional_storage_base<WebKit::EditorState::PostLayoutData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::PostLayoutData,false>>((WebKit::EditorState::PostLayoutData *)(a1 + 32), a2 + 32);
      std::__optional_storage_base<WebKit::EditorState::VisualData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::EditorState::VisualData,false>>(a1 + 352, (long long *)a2 + 22);
    }
  }
  else if (*(unsigned char *)(a1 + 480))
  {
    std::__optional_destruct_base<WebKit::EditorState,false>::reset[abi:sn180100]((unsigned char *)a1, a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState,WebKit::EditorState,WebKit::EditorState*>(a1, (long long *)a2);
    *(unsigned char *)(a1 + 480) = 1;
  }
}

uint64_t WebKit::ChangedLayers::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(uint64_t **)a1;
  *(void *)a1 = v4;
  if (v5) {
    WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::deallocateTable(v5, a2);
  }
  uint64_t v6 = a2[1];
  a2[1] = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  if (v7) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::deallocateTable(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::UniqueRef<WebKit::LayerProperties>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::UniqueRef<WebKit::LayerProperties>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v3;
    do
    {
      uint64_t v10 = v2 + 24 * v8;
      if (*(void *)(v10 + 8) != -1)
      {
        if (*(_OWORD *)v10 == 0)
        {
          std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100]((WebKit::LayerProperties **)(v2 + 24 * v8 + 16), 0);
        }
        else
        {
          uint64_t v11 = *a1;
          if (*a1) {
            unsigned int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            unsigned int v12 = 0;
          }
          unsigned int v20 = -1640531527;
          __int16 v21 = 0;
          char v22 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v20, (void *)(v2 + 24 * v8));
          int v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
          int v14 = 0;
          do
          {
            unsigned int v15 = v13 & v12;
            unint64_t v16 = (_OWORD *)(v11 + 24 * (v13 & v12));
            int v13 = ++v14 + (v13 & v12);
          }
          while (*v16 != 0);
          uint64_t v17 = v11 + 24 * v15;
          std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100]((WebKit::LayerProperties **)(v17 + 16), 0);
          _OWORD *v16 = *(_OWORD *)v10;
          uint64_t v18 = v2 + 24 * v8;
          uint64_t v19 = *(void *)(v18 + 16);
          v18 += 16;
          *(void *)uint64_t v18 = 0;
          *(void *)(v17 + 16) = v19;
          std::unique_ptr<WebKit::LayerProperties>::reset[abi:sn180100]((WebKit::LayerProperties **)v18, 0);
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

WTF *IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v8();
    }
  }
  return result;
}

WTF *IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v6, v5);
        uint64_t v21 = *(void *)a1;
        unint64_t v20 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_29;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v20 = v5;
    uint64_t v21 = 0;
LABEL_29:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result)
    {
      if (v20) {
        uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v21);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      uint64_t v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
      uint64_t v24 = v18;
      unint64_t v25 = a2;
      if (!(_BYTE)a2) {
        break;
      }
      if (HIDWORD(v27) == v27)
      {
        unint64_t v16 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v24);
        *((void *)v26 + HIDWORD(v27)) = *v16;
      }
      else
      {
        *((void *)v26 + HIDWORD(v27)) = v18;
      }
      unint64_t v17 = ++HIDWORD(v27);
      if (!--v10)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v26, v17);
        *(void *)a3 = v26;
        uint64_t v23 = v27;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        *(void *)(a3 + 8) = v23;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      int v13 = 0;
      int v15 = 0;
      int v14 = 0;
LABEL_17:
      uint64_t v26 = 0;
      *(void *)a3 = v14;
      HIDWORD(v27) = 0;
      *(_DWORD *)(a3 + 8) = v15;
      *(_DWORD *)(a3 + 12) = v13;
LABEL_18:
      *(unsigned char *)(a3 + 16) = 1;
      goto LABEL_25;
    }
    LODWORD(v27) = v10;
    uint64_t v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
      uint64_t v24 = v11;
      unint64_t v25 = a2;
      if (!(_BYTE)a2) {
        break;
      }
      if (HIDWORD(v27) == v27)
      {
        unsigned int v12 = (void *)WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v24);
        *((void *)v26 + HIDWORD(v27)) = *v12;
      }
      else
      {
        *((void *)v26 + HIDWORD(v27)) = v11;
      }
      int v13 = ++HIDWORD(v27);
      if (!--v10)
      {
        int v14 = v26;
        int v15 = v27;
        goto LABEL_17;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
LABEL_25:
  uint64_t result = v26;
  if (v26)
  {
    uint64_t v26 = 0;
    LODWORD(v27) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::RemoteLayerBackingStoreProperties,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 216))
  {
    uint64_t v2 = *(const void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v2) {
      CFRelease(v2);
    }
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 64);
      if (v3 != -1) {
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v3]((int)&v5, (WTF::MachSendRight *)a1);
      }
      *(_DWORD *)(a1 + 64) = -1;
    }
  }
  return a1;
}

void std::default_delete<WebKit::RemoteLayerBackingStoreProperties>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = (const void *)*((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v3) {
      CFRelease(v3);
    }
    if (*((unsigned char *)this + 72))
    {
      uint64_t v4 = *((unsigned int *)this + 16);
      if (v4 != -1) {
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4]((int)&v5, this);
      }
      *((_DWORD *)this + 16) = -1;
    }
    WTF::fastFree(this, this);
  }
}

_OWORD *IPC::Decoder::decode<std::unique_ptr<WebCore::TransformationMatrix>>(_OWORD *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *a2;
        unint64_t v14 = a2[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_10;
  }
  uint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v14 = v6;
    uint64_t v15 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (v18 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v5);
    }
    goto LABEL_12;
  }
  if (!v9)
  {
    *(void *)uint64_t result = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<WebCore::TransformationMatrix>((uint64_t)v21, (uint64_t)a2);
  if (v22)
  {
    uint64_t result = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
    long long v10 = v21[5];
    result[4] = v21[4];
    result[5] = v10;
    long long v11 = v21[7];
    result[6] = v21[6];
    result[7] = v11;
    long long v12 = v21[1];
    *uint64_t result = v21[0];
    result[1] = v12;
    long long v13 = v21[3];
    result[2] = v21[2];
    result[3] = v13;
    *(void *)uint64_t v3 = result;
LABEL_8:
    *((unsigned char *)v3 + 8) = 1;
    return result;
  }
LABEL_12:
  *(unsigned char *)uint64_t v3 = 0;
  *((unsigned char *)v3 + 8) = 0;
  uint64_t v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (_OWORD *)a2[3];
  if (result && v19)
  {
    unint64_t v20 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (_OWORD *)v20();
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TransformationMatrix>(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    unint64_t v6 = (uint64_t *)(v3 + v4);
    *(void *)(a2 + 16) = v6 + 1;
    if (v3)
    {
      int v7 = 0;
      uint64_t v8 = *v6;
      goto LABEL_8;
    }
    unint64_t v65 = v2;
    uint64_t v66 = 0;
    goto LABEL_91;
  }
  while (1)
  {
    unint64_t v65 = 0;
    uint64_t v66 = 0;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v67 = *(void *)(a2 + 24);
    if (v67)
    {
      unint64_t v198 = (uint64_t *)a2;
      uint64_t v199 = result;
      if (v2)
      {
        (*(void (**)(void, uint64_t))(*(void *)v67 + 16))(*(void *)(a2 + 24), v3);
        a2 = (uint64_t)v198;
        uint64_t v66 = *v198;
        unint64_t v65 = v198[1];
        uint64_t result = v199;
      }
      else
      {
        unint64_t v65 = 0;
        uint64_t v66 = 0;
      }
    }
LABEL_91:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      char v115 = (uint64_t *)a2;
      uint64_t v116 = result;
      if (v65)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v3 + 16))(*(void *)(a2 + 24), v66, v65);
        uint64_t v8 = 0;
        a2 = (uint64_t)v115;
        uint64_t v3 = *v115;
        unint64_t v2 = v115[1];
        int v7 = 1;
        uint64_t result = v116;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v8 = 0;
        int v7 = 1;
      }
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v8 = 0;
      int v7 = 1;
    }
LABEL_8:
    unint64_t v9 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7)
    {
      long long v11 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v11 + 1;
      if (v3)
      {
        int v12 = 0;
        uint64_t v13 = *v11;
        goto LABEL_15;
      }
      unint64_t v68 = v2;
      uint64_t v69 = 0;
    }
    else
    {
      unint64_t v68 = 0;
      uint64_t v69 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v70 = *(void *)(a2 + 24);
      if (v70)
      {
        int v200 = v7;
        uint64_t v201 = v8;
        int v202 = (uint64_t *)a2;
        uint64_t v203 = result;
        if (v2)
        {
          (*(void (**)(void, uint64_t))(*(void *)v70 + 16))(*(void *)(a2 + 24), v3);
          a2 = (uint64_t)v202;
          uint64_t v69 = *v202;
          unint64_t v68 = v202[1];
          uint64_t result = v203;
        }
        else
        {
          unint64_t v68 = 0;
          uint64_t v69 = 0;
        }
        uint64_t v8 = v201;
        int v7 = v200;
      }
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v117 = v7;
      uint64_t v118 = v8;
      uint64_t v119 = (uint64_t *)a2;
      uint64_t v120 = result;
      if (v68)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v3 + 16))(*(void *)(a2 + 24), v69, v68);
        uint64_t v13 = 0;
        a2 = (uint64_t)v119;
        uint64_t v3 = *v119;
        unint64_t v2 = v119[1];
        int v12 = 1;
        uint64_t result = v120;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v13 = 0;
        int v12 = 1;
      }
      uint64_t v8 = v118;
      int v7 = v117;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v13 = 0;
      int v12 = 1;
    }
LABEL_15:
    unint64_t v14 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v14 || v2 - v14 <= 7)
    {
      unint64_t v71 = 0;
      uint64_t v72 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v73 = *(void *)(a2 + 24);
      if (v73)
      {
        int v204 = v12;
        uint64_t v205 = v13;
        int v206 = v7;
        uint64_t v207 = v8;
        unsigned int v208 = (uint64_t *)a2;
        uint64_t v209 = result;
        if (v2)
        {
          (*(void (**)(void, uint64_t))(*(void *)v73 + 16))(*(void *)(a2 + 24), v3);
          a2 = (uint64_t)v208;
          uint64_t v72 = *v208;
          unint64_t v71 = v208[1];
          uint64_t result = v209;
        }
        else
        {
          unint64_t v71 = 0;
          uint64_t v72 = 0;
        }
        uint64_t v8 = v207;
        int v7 = v206;
        uint64_t v13 = v205;
        int v12 = v204;
      }
    }
    else
    {
      uint64_t v15 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v15 + 1;
      if (v3)
      {
        int v16 = 0;
        uint64_t v17 = *v15;
        goto LABEL_19;
      }
      unint64_t v71 = v2;
      uint64_t v72 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v121 = v12;
      uint64_t v122 = v13;
      int v123 = v7;
      uint64_t v124 = v8;
      long long v125 = (uint64_t *)a2;
      uint64_t v126 = result;
      if (v71)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v3 + 16))(*(void *)(a2 + 24), v72, v71);
        uint64_t v17 = 0;
        a2 = (uint64_t)v125;
        uint64_t v3 = *v125;
        unint64_t v2 = v125[1];
        int v16 = 1;
        uint64_t result = v126;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v17 = 0;
        int v16 = 1;
      }
      uint64_t v8 = v124;
      int v7 = v123;
      uint64_t v13 = v122;
      int v12 = v121;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v17 = 0;
      int v16 = 1;
    }
LABEL_19:
    unint64_t v18 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v18 || v2 - v18 <= 7)
    {
      unint64_t v74 = 0;
      uint64_t v75 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v76 = *(void *)(a2 + 24);
      if (v76)
      {
        int v210 = v16;
        uint64_t v211 = v17;
        int v212 = v12;
        uint64_t v213 = v13;
        int v214 = v7;
        uint64_t v215 = v8;
        unsigned int v216 = (uint64_t *)a2;
        uint64_t v217 = result;
        if (v2)
        {
          (*(void (**)(void, uint64_t))(*(void *)v76 + 16))(*(void *)(a2 + 24), v3);
          a2 = (uint64_t)v216;
          uint64_t v75 = *v216;
          unint64_t v74 = v216[1];
          uint64_t result = v217;
        }
        else
        {
          unint64_t v74 = 0;
          uint64_t v75 = 0;
        }
        uint64_t v8 = v215;
        int v7 = v214;
        uint64_t v13 = v213;
        int v12 = v212;
        uint64_t v17 = v211;
        int v16 = v210;
      }
    }
    else
    {
      uint64_t v19 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v19 + 1;
      if (v3)
      {
        int v20 = 0;
        uint64_t v21 = *v19;
        goto LABEL_23;
      }
      unint64_t v74 = v2;
      uint64_t v75 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v127 = v16;
      uint64_t v128 = v17;
      int v129 = v12;
      uint64_t v130 = v13;
      int v131 = v7;
      uint64_t v132 = v8;
      unint64_t v133 = (uint64_t *)a2;
      uint64_t v134 = result;
      if (v74)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v3 + 16))(*(void *)(a2 + 24), v75, v74);
        a2 = (uint64_t)v133;
        uint64_t v3 = *v133;
        unint64_t v2 = v133[1];
        int v20 = 1;
        uint64_t result = v134;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        int v20 = 1;
      }
      uint64_t v8 = v132;
      int v7 = v131;
      uint64_t v13 = v130;
      int v12 = v129;
      uint64_t v17 = v128;
      uint64_t v21 = 0;
      int v16 = v127;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v21 = 0;
      int v20 = 1;
    }
LABEL_23:
    unint64_t v22 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v22 || v2 - v22 <= 7)
    {
      unint64_t v77 = 0;
      uint64_t v78 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v79 = *(void *)(a2 + 24);
      if (v79)
      {
        int v218 = v20;
        uint64_t v219 = v21;
        int v220 = v16;
        uint64_t v221 = v17;
        int v222 = v12;
        uint64_t v223 = v13;
        int v224 = v7;
        uint64_t v225 = v8;
        unint64_t v226 = (uint64_t *)a2;
        uint64_t v227 = result;
        if (v2)
        {
          (*(void (**)(void, uint64_t))(*(void *)v79 + 16))(*(void *)(a2 + 24), v3);
          a2 = (uint64_t)v226;
          uint64_t v78 = *v226;
          unint64_t v77 = v226[1];
          uint64_t result = v227;
        }
        else
        {
          unint64_t v77 = 0;
          uint64_t v78 = 0;
        }
        uint64_t v8 = v225;
        int v7 = v224;
        uint64_t v13 = v223;
        int v12 = v222;
        uint64_t v17 = v221;
        int v16 = v220;
        uint64_t v21 = v219;
        int v20 = v218;
      }
    }
    else
    {
      uint64_t v23 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v23 + 1;
      if (v3)
      {
        int v24 = 0;
        uint64_t v25 = *v23;
        goto LABEL_27;
      }
      unint64_t v77 = v2;
      uint64_t v78 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v135 = v20;
      int v136 = v16;
      uint64_t v137 = v17;
      int v138 = v12;
      uint64_t v139 = v13;
      int v140 = v7;
      uint64_t v141 = v8;
      uint64_t v142 = (uint64_t *)a2;
      uint64_t v143 = result;
      if (v77)
      {
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)v3 + 16))(*(void *)(a2 + 24), v78, v77);
        uint64_t v25 = 0;
        a2 = (uint64_t)v142;
        uint64_t v3 = *v142;
        unint64_t v2 = v142[1];
        int v24 = 1;
        uint64_t result = v143;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v25 = 0;
        int v24 = 1;
      }
      uint64_t v8 = v141;
      int v7 = v140;
      uint64_t v13 = v139;
      int v12 = v138;
      uint64_t v17 = v137;
      int v16 = v136;
      int v20 = v135;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v25 = 0;
      int v24 = 1;
    }
LABEL_27:
    unint64_t v26 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v26 || v2 - v26 <= 7)
    {
      unint64_t v80 = 0;
      uint64_t v81 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v82 = *(void *)(a2 + 24);
      if (v82)
      {
        int v482 = v24;
        uint64_t v228 = v21;
        int v229 = v20;
        int v230 = v16;
        uint64_t v231 = v17;
        int v232 = v12;
        uint64_t v233 = v13;
        int v234 = v7;
        uint64_t v235 = v8;
        unsigned int v236 = (uint64_t *)a2;
        uint64_t v237 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v3);
          a2 = (uint64_t)v236;
          uint64_t v81 = *v236;
          unint64_t v80 = v236[1];
          uint64_t result = v237;
        }
        else
        {
          unint64_t v80 = 0;
          uint64_t v81 = 0;
        }
        uint64_t v8 = v235;
        int v7 = v234;
        uint64_t v13 = v233;
        int v12 = v232;
        uint64_t v17 = v231;
        int v16 = v230;
        int v20 = v229;
        uint64_t v21 = v228;
        int v24 = v482;
      }
    }
    else
    {
      uint64_t v27 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v27 + 1;
      if (v3)
      {
        int v28 = 0;
        uint64_t v29 = *v27;
        goto LABEL_31;
      }
      unint64_t v80 = v2;
      uint64_t v81 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v471 = v24;
      uint64_t v144 = v21;
      int v145 = v20;
      int v146 = v16;
      uint64_t v147 = v17;
      int v148 = v12;
      uint64_t v149 = v13;
      int v150 = v7;
      uint64_t v151 = v8;
      uint64_t v152 = (uint64_t *)a2;
      uint64_t v153 = result;
      if (v80)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v81, v80);
        uint64_t v29 = 0;
        a2 = (uint64_t)v152;
        uint64_t v3 = *v152;
        unint64_t v2 = v152[1];
        int v28 = 1;
        uint64_t result = v153;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v29 = 0;
        int v28 = 1;
      }
      uint64_t v8 = v151;
      int v7 = v150;
      uint64_t v13 = v149;
      int v12 = v148;
      uint64_t v17 = v147;
      int v16 = v146;
      int v20 = v145;
      uint64_t v21 = v144;
      int v24 = v471;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v29 = 0;
      int v28 = 1;
    }
LABEL_31:
    unint64_t v30 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v30 || v2 - v30 <= 7)
    {
      unint64_t v83 = 0;
      uint64_t v84 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v85 = *(void *)(a2 + 24);
      if (v85)
      {
        int v456 = v28;
        uint64_t v436 = v29;
        int v483 = v24;
        int v238 = v20;
        uint64_t v239 = v21;
        uint64_t v240 = v17;
        int v241 = v12;
        uint64_t v242 = v13;
        int v243 = v7;
        uint64_t v244 = v8;
        unint64_t v245 = (uint64_t *)a2;
        uint64_t v246 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v85 + 16))(v85, v3);
          a2 = (uint64_t)v245;
          uint64_t v84 = *v245;
          unint64_t v83 = v245[1];
          uint64_t result = v246;
        }
        else
        {
          unint64_t v83 = 0;
          uint64_t v84 = 0;
        }
        uint64_t v8 = v244;
        int v7 = v243;
        uint64_t v13 = v242;
        int v12 = v241;
        uint64_t v17 = v240;
        uint64_t v21 = v239;
        int v20 = v238;
        int v24 = v483;
        uint64_t v29 = v436;
        int v28 = v456;
      }
    }
    else
    {
      uint64_t v31 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v31 + 1;
      if (v3)
      {
        int v32 = 0;
        uint64_t v33 = *v31;
        goto LABEL_35;
      }
      unint64_t v83 = v2;
      uint64_t v84 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v446 = v28;
      uint64_t v426 = v29;
      int v472 = v24;
      int v373 = v20;
      uint64_t v154 = v21;
      uint64_t v155 = v17;
      int v156 = v12;
      uint64_t v157 = v13;
      int v158 = v7;
      uint64_t v159 = v8;
      int v160 = (uint64_t *)a2;
      uint64_t v161 = result;
      if (v83)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v84, v83);
        uint64_t v33 = 0;
        a2 = (uint64_t)v160;
        uint64_t v3 = *v160;
        unint64_t v2 = v160[1];
        int v32 = 1;
        uint64_t result = v161;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v33 = 0;
        int v32 = 1;
      }
      uint64_t v8 = v159;
      int v7 = v158;
      uint64_t v13 = v157;
      int v12 = v156;
      uint64_t v17 = v155;
      uint64_t v21 = v154;
      int v20 = v373;
      int v24 = v472;
      uint64_t v29 = v426;
      int v28 = v446;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v33 = 0;
      int v32 = 1;
    }
LABEL_35:
    unint64_t v34 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v34 || v2 - v34 <= 7)
    {
      unint64_t v86 = 0;
      uint64_t v87 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v88 = *(void *)(a2 + 24);
      if (v88)
      {
        int v417 = v32;
        uint64_t v399 = v33;
        int v457 = v28;
        uint64_t v437 = v29;
        int v484 = v24;
        int v247 = v16;
        int v248 = v20;
        uint64_t v249 = v21;
        uint64_t v250 = v17;
        int v251 = v12;
        uint64_t v252 = v13;
        int v253 = v7;
        uint64_t v254 = v8;
        int v255 = (uint64_t *)a2;
        uint64_t v256 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v88 + 16))(v88, v3);
          a2 = (uint64_t)v255;
          uint64_t v87 = *v255;
          unint64_t v86 = v255[1];
          uint64_t result = v256;
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = 0;
        }
        uint64_t v8 = v254;
        int v7 = v253;
        uint64_t v13 = v252;
        int v12 = v251;
        uint64_t v17 = v250;
        uint64_t v21 = v249;
        int v20 = v248;
        int v16 = v247;
        int v24 = v484;
        uint64_t v29 = v437;
        int v28 = v457;
        uint64_t v33 = v399;
        int v32 = v417;
      }
    }
    else
    {
      unsigned int v35 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v35 + 1;
      if (v3)
      {
        int v36 = 0;
        uint64_t v37 = *v35;
        goto LABEL_39;
      }
      unint64_t v86 = v2;
      uint64_t v87 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v408 = v32;
      uint64_t v390 = v33;
      int v447 = v28;
      uint64_t v427 = v29;
      int v473 = v24;
      int v374 = v20;
      uint64_t v332 = v21;
      int v162 = v16;
      uint64_t v163 = v17;
      int v164 = v12;
      uint64_t v165 = v13;
      int v166 = v7;
      uint64_t v167 = v8;
      uint64_t v168 = (uint64_t *)a2;
      uint64_t v169 = result;
      if (v86)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v87, v86);
        uint64_t v37 = 0;
        a2 = (uint64_t)v168;
        uint64_t v3 = *v168;
        unint64_t v2 = v168[1];
        int v36 = 1;
        uint64_t result = v169;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v37 = 0;
        int v36 = 1;
      }
      uint64_t v8 = v167;
      int v7 = v166;
      uint64_t v13 = v165;
      int v12 = v164;
      uint64_t v17 = v163;
      int v16 = v162;
      uint64_t v21 = v332;
      int v20 = v374;
      int v24 = v473;
      uint64_t v29 = v427;
      int v28 = v447;
      uint64_t v33 = v390;
      int v32 = v408;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v37 = 0;
      int v36 = 1;
    }
LABEL_39:
    unint64_t v38 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v38 || v2 - v38 <= 7)
    {
      unint64_t v89 = 0;
      uint64_t v90 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v91 = *(void *)(a2 + 24);
      if (v91)
      {
        int v370 = v36;
        uint64_t v362 = v37;
        int v418 = v32;
        uint64_t v400 = v33;
        int v458 = v28;
        uint64_t v438 = v29;
        int v485 = v24;
        int v257 = v20;
        uint64_t v258 = v21;
        int v259 = v16;
        uint64_t v260 = v17;
        int v261 = v12;
        uint64_t v262 = v13;
        int v263 = v7;
        uint64_t v264 = v8;
        uint64_t v265 = (uint64_t *)a2;
        uint64_t v266 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v91 + 16))(v91, v3);
          a2 = (uint64_t)v265;
          uint64_t v90 = *v265;
          unint64_t v89 = v265[1];
          uint64_t result = v266;
        }
        else
        {
          unint64_t v89 = 0;
          uint64_t v90 = 0;
        }
        uint64_t v8 = v264;
        int v7 = v263;
        uint64_t v13 = v262;
        int v12 = v261;
        uint64_t v17 = v260;
        int v16 = v259;
        uint64_t v21 = v258;
        int v20 = v257;
        int v24 = v485;
        uint64_t v29 = v438;
        int v28 = v458;
        uint64_t v33 = v400;
        int v32 = v418;
        uint64_t v37 = v362;
        int v36 = v370;
      }
    }
    else
    {
      uint64_t v39 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v39 + 1;
      if (v3)
      {
        int v40 = 0;
        uint64_t v41 = *v39;
        goto LABEL_43;
      }
      unint64_t v89 = v2;
      uint64_t v90 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v367 = v36;
      int v375 = v20;
      uint64_t v356 = v37;
      int v409 = v32;
      uint64_t v391 = v33;
      int v448 = v28;
      uint64_t v428 = v29;
      int v474 = v24;
      uint64_t v170 = v21;
      int v171 = v16;
      uint64_t v172 = v17;
      int v173 = v12;
      uint64_t v174 = v13;
      int v175 = v7;
      uint64_t v176 = v8;
      uint64_t v177 = (uint64_t *)a2;
      uint64_t v178 = result;
      if (v89)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v90, v89);
        uint64_t v41 = 0;
        a2 = (uint64_t)v177;
        uint64_t v3 = *v177;
        unint64_t v2 = v177[1];
        int v40 = 1;
        uint64_t result = v178;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v41 = 0;
        int v40 = 1;
      }
      uint64_t v8 = v176;
      int v7 = v175;
      uint64_t v13 = v174;
      int v12 = v173;
      uint64_t v17 = v172;
      int v16 = v171;
      uint64_t v21 = v170;
      int v36 = v367;
      int v20 = v375;
      int v24 = v474;
      uint64_t v29 = v428;
      int v28 = v448;
      uint64_t v33 = v391;
      int v32 = v409;
      uint64_t v37 = v356;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v41 = 0;
      int v40 = 1;
    }
LABEL_43:
    unint64_t v42 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    uint64_t v497 = v17;
    uint64_t v495 = v8;
    if (v2 < v42 || v2 - v42 <= 7)
    {
      unint64_t v92 = 0;
      uint64_t v93 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v94 = *(void *)(a2 + 24);
      if (v94)
      {
        int v349 = v40;
        uint64_t v340 = v41;
        int v371 = v36;
        int v383 = v20;
        uint64_t v363 = v37;
        int v419 = v32;
        uint64_t v401 = v33;
        int v459 = v28;
        uint64_t v439 = v29;
        int v486 = v24;
        uint64_t v267 = v21;
        int v268 = v16;
        int v269 = v12;
        uint64_t v270 = v13;
        int v271 = v7;
        int v272 = (uint64_t *)a2;
        uint64_t v273 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v94 + 16))(v94, v3);
          a2 = (uint64_t)v272;
          uint64_t v93 = *v272;
          unint64_t v92 = v272[1];
          uint64_t result = v273;
        }
        else
        {
          unint64_t v92 = 0;
          uint64_t v93 = 0;
        }
        int v7 = v271;
        uint64_t v13 = v270;
        int v12 = v269;
        int v16 = v268;
        uint64_t v21 = v267;
        int v36 = v371;
        int v20 = v383;
        int v24 = v486;
        uint64_t v29 = v439;
        int v28 = v459;
        uint64_t v33 = v401;
        int v32 = v419;
        uint64_t v37 = v363;
        uint64_t v41 = v340;
        int v40 = v349;
      }
    }
    else
    {
      unint64_t v43 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v43 + 1;
      if (v3)
      {
        int v44 = 0;
        uint64_t v45 = *v43;
        goto LABEL_47;
      }
      unint64_t v92 = v2;
      uint64_t v93 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v342 = v40;
      uint64_t v335 = v41;
      int v368 = v36;
      int v376 = v20;
      uint64_t v357 = v37;
      int v410 = v32;
      uint64_t v392 = v33;
      int v449 = v28;
      uint64_t v429 = v29;
      int v475 = v24;
      uint64_t v179 = v21;
      int v180 = v16;
      int v181 = v12;
      uint64_t v182 = v13;
      int v183 = v7;
      uint64_t v184 = (uint64_t *)a2;
      uint64_t v185 = result;
      if (v92)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v93, v92);
        uint64_t v45 = 0;
        a2 = (uint64_t)v184;
        uint64_t v3 = *v184;
        unint64_t v2 = v184[1];
        int v44 = 1;
        uint64_t result = v185;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v45 = 0;
        int v44 = 1;
      }
      int v7 = v183;
      uint64_t v13 = v182;
      int v12 = v181;
      int v16 = v180;
      uint64_t v21 = v179;
      int v36 = v368;
      int v20 = v376;
      int v24 = v475;
      uint64_t v29 = v429;
      int v28 = v449;
      uint64_t v33 = v392;
      int v32 = v410;
      uint64_t v37 = v357;
      uint64_t v41 = v335;
      int v40 = v342;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v45 = 0;
      int v44 = 1;
    }
LABEL_47:
    unint64_t v46 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    int v499 = v12;
    int v500 = v7;
    uint64_t v496 = v13;
    if (v2 < v46 || v2 - v46 <= 7)
    {
      unint64_t v95 = 0;
      uint64_t v96 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v97 = *(void *)(a2 + 24);
      if (v97)
      {
        int v326 = v44;
        uint64_t v314 = v45;
        int v350 = v40;
        int v384 = v20;
        uint64_t v364 = v37;
        int v420 = v32;
        uint64_t v402 = v33;
        int v460 = v28;
        uint64_t v440 = v29;
        int v487 = v24;
        uint64_t v274 = (uint64_t *)a2;
        uint64_t v275 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v97 + 16))(v97, v3);
          a2 = (uint64_t)v274;
          uint64_t v96 = *v274;
          unint64_t v95 = v274[1];
          uint64_t result = v275;
        }
        else
        {
          unint64_t v95 = 0;
          uint64_t v96 = 0;
        }
        int v20 = v384;
        int v24 = v487;
        uint64_t v29 = v440;
        int v28 = v460;
        uint64_t v33 = v402;
        int v32 = v420;
        uint64_t v37 = v364;
        int v40 = v350;
        uint64_t v45 = v314;
        int v44 = v326;
      }
    }
    else
    {
      int v47 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v47 + 1;
      if (v3)
      {
        int v48 = 0;
        uint64_t v49 = *v47;
        goto LABEL_51;
      }
      unint64_t v95 = v2;
      uint64_t v96 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v320 = v44;
      uint64_t v308 = v45;
      int v343 = v40;
      uint64_t v336 = v41;
      int v377 = v20;
      uint64_t v358 = v37;
      int v411 = v32;
      uint64_t v393 = v33;
      int v450 = v28;
      uint64_t v430 = v29;
      int v476 = v24;
      uint64_t v186 = (uint64_t *)a2;
      uint64_t v187 = result;
      if (v95)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v96, v95);
        uint64_t v49 = 0;
        a2 = (uint64_t)v186;
        uint64_t v3 = *v186;
        unint64_t v2 = v186[1];
        int v48 = 1;
        uint64_t result = v187;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v49 = 0;
        int v48 = 1;
      }
      uint64_t v41 = v336;
      int v20 = v377;
      int v24 = v476;
      uint64_t v29 = v430;
      int v28 = v450;
      uint64_t v33 = v393;
      int v32 = v411;
      uint64_t v37 = v358;
      int v40 = v343;
      uint64_t v45 = v308;
      int v44 = v320;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v49 = 0;
      int v48 = 1;
    }
LABEL_51:
    unint64_t v50 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v50 || v2 - v50 <= 7)
    {
      unint64_t v98 = 0;
      uint64_t v99 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v100 = *(void *)(a2 + 24);
      if (v100)
      {
        int v303 = v48;
        uint64_t v293 = v49;
        int v327 = v44;
        uint64_t v315 = v45;
        int v351 = v40;
        int v385 = v20;
        uint64_t v365 = v37;
        int v421 = v32;
        uint64_t v403 = v33;
        int v461 = v28;
        uint64_t v441 = v29;
        int v488 = v24;
        unint64_t v276 = (uint64_t *)a2;
        uint64_t v277 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v100 + 16))(v100, v3);
          a2 = (uint64_t)v276;
          uint64_t v99 = *v276;
          unint64_t v98 = v276[1];
          uint64_t result = v277;
        }
        else
        {
          unint64_t v98 = 0;
          uint64_t v99 = 0;
        }
        int v20 = v385;
        int v24 = v488;
        uint64_t v29 = v441;
        int v28 = v461;
        uint64_t v33 = v403;
        int v32 = v421;
        uint64_t v37 = v365;
        int v40 = v351;
        uint64_t v45 = v315;
        int v44 = v327;
        uint64_t v49 = v293;
        int v48 = v303;
      }
    }
    else
    {
      *(void *)(a2 + 16) = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v3)
      {
        int v498 = 0;
        uint64_t v494 = *(void *)(v3 + v50);
        goto LABEL_55;
      }
      unint64_t v98 = v2;
      uint64_t v99 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v298 = v48;
      uint64_t v288 = v49;
      int v321 = v44;
      uint64_t v309 = v45;
      int v344 = v40;
      uint64_t v337 = v41;
      int v378 = v20;
      uint64_t v359 = v37;
      int v412 = v32;
      uint64_t v394 = v33;
      int v451 = v28;
      uint64_t v431 = v29;
      int v477 = v24;
      char v188 = (uint64_t *)a2;
      uint64_t v189 = result;
      if (v98)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v99, v98);
        uint64_t v494 = 0;
        a2 = (uint64_t)v188;
        uint64_t v3 = *v188;
        unint64_t v2 = v188[1];
        int v498 = 1;
        uint64_t result = v189;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v494 = 0;
        int v498 = 1;
      }
      uint64_t v41 = v337;
      int v20 = v378;
      int v24 = v477;
      uint64_t v29 = v431;
      int v28 = v451;
      uint64_t v33 = v394;
      int v32 = v412;
      uint64_t v37 = v359;
      int v40 = v344;
      uint64_t v45 = v309;
      int v44 = v321;
      uint64_t v49 = v288;
      int v48 = v298;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v494 = 0;
      int v498 = 1;
    }
LABEL_55:
    unint64_t v51 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v51 || v2 - v51 <= 7)
    {
      unint64_t v101 = 0;
      uint64_t v102 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v103 = *(void *)(a2 + 24);
      if (v103)
      {
        int v304 = v48;
        uint64_t v294 = v49;
        int v328 = v44;
        uint64_t v316 = v45;
        int v352 = v40;
        int v386 = v20;
        uint64_t v366 = v37;
        int v422 = v32;
        uint64_t v404 = v33;
        int v462 = v28;
        uint64_t v442 = v29;
        int v489 = v24;
        uint64_t v278 = (uint64_t *)a2;
        uint64_t v279 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v103 + 16))(v103, v3);
          a2 = (uint64_t)v278;
          uint64_t v102 = *v278;
          unint64_t v101 = v278[1];
          uint64_t result = v279;
        }
        else
        {
          unint64_t v101 = 0;
          uint64_t v102 = 0;
        }
        int v20 = v386;
        int v24 = v489;
        uint64_t v29 = v442;
        int v28 = v462;
        uint64_t v33 = v404;
        int v32 = v422;
        uint64_t v37 = v366;
        int v40 = v352;
        uint64_t v45 = v316;
        int v44 = v328;
        uint64_t v49 = v294;
        int v48 = v304;
      }
    }
    else
    {
      *(void *)(a2 + 16) = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v3)
      {
        int v52 = 0;
        uint64_t v53 = *(void *)(v3 + v51);
        goto LABEL_59;
      }
      unint64_t v101 = v2;
      uint64_t v102 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v299 = v48;
      uint64_t v289 = v49;
      int v322 = v44;
      uint64_t v310 = v45;
      int v345 = v40;
      int v379 = v20;
      uint64_t v360 = v37;
      int v413 = v32;
      uint64_t v395 = v33;
      int v452 = v28;
      uint64_t v432 = v29;
      int v478 = v24;
      int v286 = v16;
      uint64_t v190 = (uint64_t *)a2;
      uint64_t v191 = result;
      if (v101)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v102, v101);
        uint64_t v53 = 0;
        a2 = (uint64_t)v190;
        uint64_t v3 = *v190;
        unint64_t v2 = v190[1];
        int v52 = 1;
        uint64_t result = v191;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v53 = 0;
        int v52 = 1;
      }
      int v16 = v286;
      int v20 = v379;
      int v24 = v478;
      uint64_t v29 = v432;
      int v28 = v452;
      uint64_t v33 = v395;
      int v32 = v413;
      uint64_t v37 = v360;
      int v40 = v345;
      uint64_t v45 = v310;
      int v44 = v322;
      uint64_t v49 = v289;
      int v48 = v299;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v53 = 0;
      int v52 = 1;
    }
LABEL_59:
    unint64_t v54 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v54 || v2 - v54 <= 7)
    {
      uint64_t v55 = v29;
      unint64_t v104 = 0;
      uint64_t v105 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v106 = *(void *)(a2 + 24);
      if (v106)
      {
        int v305 = v48;
        uint64_t v295 = v49;
        int v329 = v44;
        uint64_t v317 = v45;
        int v353 = v40;
        uint64_t v334 = v21;
        int v387 = v20;
        int v423 = v32;
        uint64_t v405 = v33;
        int v463 = v28;
        uint64_t v443 = v29;
        int v490 = v24;
        char v280 = (uint64_t *)a2;
        uint64_t v281 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v106 + 16))(v106, v3, v2, v29);
          a2 = (uint64_t)v280;
          uint64_t v105 = *v280;
          unint64_t v104 = v280[1];
          uint64_t result = v281;
        }
        else
        {
          unint64_t v104 = 0;
          uint64_t v105 = 0;
        }
        uint64_t v21 = v334;
        int v20 = v387;
        int v24 = v490;
        uint64_t v55 = v443;
        int v28 = v463;
        uint64_t v33 = v405;
        int v32 = v423;
        int v40 = v353;
        uint64_t v45 = v317;
        int v44 = v329;
        uint64_t v49 = v295;
        int v48 = v305;
      }
    }
    else
    {
      uint64_t v55 = v29;
      uint64_t v56 = v25;
      *(void *)(a2 + 16) = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v3)
      {
        uint64_t v57 = v21;
        int v58 = 0;
        uint64_t v59 = *(void *)(v3 + v54);
        goto LABEL_63;
      }
      unint64_t v104 = v2;
      uint64_t v105 = 0;
    }
    uint64_t v56 = v25;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v300 = v48;
      uint64_t v290 = v49;
      int v323 = v44;
      uint64_t v311 = v45;
      int v346 = v40;
      uint64_t v333 = v21;
      uint64_t v338 = v41;
      int v380 = v20;
      int v414 = v32;
      uint64_t v396 = v33;
      int v453 = v28;
      uint64_t v433 = v55;
      int v479 = v24;
      uint64_t v466 = v25;
      uint64_t v192 = (uint64_t *)a2;
      uint64_t v193 = result;
      if (v104)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v105, v104);
        uint64_t v59 = 0;
        a2 = (uint64_t)v192;
        uint64_t v3 = *v192;
        unint64_t v2 = v192[1];
        int v58 = 1;
        uint64_t result = v193;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v59 = 0;
        int v58 = 1;
      }
      uint64_t v57 = v333;
      uint64_t v41 = v338;
      int v20 = v380;
      uint64_t v56 = v466;
      int v24 = v479;
      uint64_t v55 = v433;
      int v28 = v453;
      uint64_t v33 = v396;
      int v32 = v414;
      int v40 = v346;
      uint64_t v45 = v311;
      int v44 = v323;
      uint64_t v49 = v290;
      int v48 = v300;
    }
    else
    {
      uint64_t v57 = v21;
      unint64_t v2 = 0;
      uint64_t v59 = 0;
      int v58 = 1;
    }
LABEL_63:
    unint64_t v60 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v60 || v2 - v60 <= 7)
    {
      unint64_t v107 = 0;
      uint64_t v108 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      if (*(void *)(a2 + 24))
      {
        int v306 = v48;
        uint64_t v296 = v49;
        int v330 = v44;
        uint64_t v318 = v45;
        int v354 = v40;
        int v388 = v20;
        int v424 = v32;
        uint64_t v406 = v33;
        int v464 = v28;
        uint64_t v444 = v55;
        int v491 = v24;
        uint64_t v469 = v56;
        uint64_t v282 = (uint64_t *)a2;
        uint64_t v283 = result;
        if (v2)
        {
          (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24), v3);
          a2 = (uint64_t)v282;
          uint64_t v108 = *v282;
          unint64_t v107 = v282[1];
          uint64_t result = v283;
        }
        else
        {
          unint64_t v107 = 0;
          uint64_t v108 = 0;
        }
        int v20 = v388;
        uint64_t v56 = v469;
        int v24 = v491;
        uint64_t v55 = v444;
        int v28 = v464;
        uint64_t v33 = v406;
        int v32 = v424;
        int v40 = v354;
        uint64_t v45 = v318;
        int v44 = v330;
        uint64_t v49 = v296;
        int v48 = v306;
      }
    }
    else
    {
      *(void *)(a2 + 16) = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v3)
      {
        int v61 = 0;
        uint64_t v62 = *(void *)(v3 + v60);
        goto LABEL_67;
      }
      unint64_t v107 = v2;
      uint64_t v108 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      int v301 = v48;
      uint64_t v291 = v49;
      int v324 = v44;
      uint64_t v312 = v45;
      int v347 = v40;
      uint64_t v339 = v41;
      int v369 = v36;
      int v381 = v20;
      int v415 = v32;
      uint64_t v397 = v33;
      int v454 = v28;
      uint64_t v434 = v55;
      int v480 = v24;
      uint64_t v467 = v56;
      uint64_t v194 = (uint64_t *)a2;
      uint64_t v195 = result;
      if (v107)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v3 + 16))(v3, v108, v107);
        uint64_t v62 = 0;
        a2 = (uint64_t)v194;
        uint64_t v3 = *v194;
        unint64_t v2 = v194[1];
        int v61 = 1;
        uint64_t result = v195;
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v62 = 0;
        int v61 = 1;
      }
      uint64_t v41 = v339;
      int v36 = v369;
      int v20 = v381;
      uint64_t v56 = v467;
      int v24 = v480;
      uint64_t v55 = v434;
      int v28 = v454;
      uint64_t v33 = v397;
      int v32 = v415;
      int v40 = v347;
      uint64_t v45 = v312;
      int v44 = v324;
      uint64_t v49 = v291;
      int v48 = v301;
    }
    else
    {
      unint64_t v2 = 0;
      uint64_t v62 = 0;
      int v61 = 1;
    }
LABEL_67:
    unint64_t v63 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 < v63 || v2 - v63 <= 7)
    {
      unint64_t v493 = 0;
      uint64_t v109 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      uint64_t v110 = *(void *)(a2 + 24);
      if (v110)
      {
        int v307 = v48;
        uint64_t v297 = v49;
        int v331 = v44;
        uint64_t v319 = v45;
        int v355 = v40;
        uint64_t v341 = v41;
        int v372 = v36;
        int v389 = v20;
        int v425 = v32;
        uint64_t v407 = v33;
        int v465 = v28;
        uint64_t v445 = v55;
        int v492 = v24;
        uint64_t v470 = v56;
        uint64_t v284 = (uint64_t *)a2;
        uint64_t v285 = result;
        if (v2)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v110 + 16))(v110, v3);
          a2 = (uint64_t)v284;
          uint64_t v109 = *v284;
          unint64_t v493 = v284[1];
          uint64_t result = v285;
        }
        else
        {
          unint64_t v493 = 0;
          uint64_t v109 = 0;
        }
        uint64_t v41 = v341;
        int v36 = v372;
        int v20 = v389;
        uint64_t v56 = v470;
        int v24 = v492;
        uint64_t v55 = v445;
        int v28 = v465;
        uint64_t v33 = v407;
        int v32 = v425;
        int v40 = v355;
        uint64_t v45 = v319;
        int v44 = v331;
        uint64_t v49 = v297;
        int v48 = v307;
      }
    }
    else
    {
      uint64_t v64 = (uint64_t *)((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 16) = v64 + 1;
      if (v3)
      {
        a2 = 0;
        uint64_t v3 = *v64;
        goto LABEL_71;
      }
      unint64_t v493 = v2;
      uint64_t v109 = 0;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    unint64_t v111 = *(void *)(a2 + 24);
    if (!v111)
    {
      unint64_t v112 = 0;
      unint64_t v113 = 0;
      goto LABEL_138;
    }
    int v302 = v48;
    uint64_t v292 = v49;
    int v325 = v44;
    uint64_t v313 = v45;
    int v348 = v40;
    int v382 = v20;
    uint64_t v361 = v37;
    int v416 = v32;
    uint64_t v398 = v33;
    int v455 = v28;
    uint64_t v435 = v55;
    int v481 = v24;
    uint64_t v468 = v56;
    int v287 = v16;
    unsigned __int16 v196 = (unint64_t *)a2;
    uint64_t v197 = result;
    unint64_t v113 = v493;
    if (!v493) {
      break;
    }
    (*(void (**)(unint64_t, uint64_t, unint64_t))(*(void *)v111 + 16))(v111, v109, v493);
    unint64_t v113 = *v196;
    if (!*v196)
    {
      a2 = (uint64_t)v196;
      unint64_t v112 = v196[1];
      unint64_t v111 = v196[3];
      uint64_t result = v197;
      goto LABEL_138;
    }
    uint64_t v3 = 0;
    a2 = 1;
    uint64_t result = v197;
    int v16 = v287;
    int v20 = v382;
    uint64_t v56 = v468;
    int v24 = v481;
    uint64_t v55 = v435;
    int v28 = v455;
    uint64_t v33 = v398;
    int v32 = v416;
    uint64_t v37 = v361;
    int v40 = v348;
    uint64_t v45 = v313;
    int v44 = v325;
    uint64_t v49 = v292;
    int v48 = v302;
LABEL_71:
    if (!v500
      && !v499
      && !v16
      && !v20
      && !v24
      && !v28
      && !v32
      && !v36
      && !v40
      && !v44
      && !v48
      && !v498
      && !v52
      && !v58
      && !v61
      && !a2)
    {
      *(void *)uint64_t result = v495;
      *(void *)(result + 8) = v496;
      *(void *)(result + 16) = v497;
      *(void *)(result + 24) = v57;
      *(void *)(result + 32) = v56;
      *(void *)(result + 40) = v55;
      *(void *)(result + 48) = v33;
      *(void *)(result + 56) = v37;
      *(void *)(result + 64) = v41;
      *(void *)(result + 72) = v45;
      *(void *)(result + 80) = v49;
      *(void *)(result + 88) = v494;
      *(void *)(result + 96) = v53;
      *(void *)(result + 104) = v59;
      *(void *)(result + 112) = v62;
      *(void *)(result + 120) = v3;
      *(unsigned char *)(result + 128) = 1;
      return result;
    }
    __break(1u);
  }
  unint64_t v112 = 0;
LABEL_138:
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 128) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (v111 && v112)
  {
    int v114 = *(uint64_t (**)(unint64_t, unint64_t))(*(void *)v111 + 16);
    return v114(v111, v113);
  }
  return result;
}

IPC::Encoder **IPC::Connection::dispatchMessageReceiverMessage(uint64_t a1, uint64_t a2, unsigned __int16 **a3)
{
  unint64_t v4 = *a3;
  if (v4[25] > 0xE08u)
  {
    long long v11 = a3;
    uint64_t result = (IPC::Encoder **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
    if (v7)
    {
      uint64_t v8 = result;
      unint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v9 = 2872;
      *((void *)v9 + 1) = v8;
      *((void *)v9 + 66) = (char *)v9 + 16;
      *((void *)v9 + 67) = 512;
      *((void *)v9 + 68) = 0;
      *((void *)v9 + 70) = 0;
      *((void *)v9 + 69) = 0;
      IPC::Encoder::encodeHeader(v9);
      unint64_t v14 = v9;
      if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 *, IPC::Encoder **))(*(void *)a2 + 32))(a2, a1, *v11, &v14) & 1) == 0)IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 0, 0); {
      return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v14, v10);
      }
    }
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16);
    return (IPC::Encoder **)v5(a2, a1);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9D2FE8;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t __copy_helper_block_e8_32c99_ZTSN3WTF7WeakPtrIN6WebKit21AuthenticationManagerENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

uint64_t __copy_helper_block_e8_32c92_ZTSKZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyEE3__0(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

atomic_uchar *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0>(WebKit::GPUProcessProxy::sendBookmarkDataForCacheDirectory(void)::$_0)::{lambda(void const*)#1}::__invoke(atomic_uchar *result)
{
  unint64_t v1 = (atomic_uchar **)*((void *)result + 4);
  *((void *)result + 4) = 0;
  if (v1) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v1);
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = a1;
  uint64_t v4 = (unsigned char *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WebCore::Region>(v44, v2);
  unint64_t v7 = v2[1];
  uint64_t v8 = *v2;
  unint64_t v9 = v2[2] - *v2;
  if (v7 <= v9) {
    goto LABEL_29;
  }
  long long v10 = (unsigned __int8 *)(v8 + v9);
  uint64_t v11 = v8 + v9 + 1;
  v2[2] = v11;
  if (!v8)
  {
    uint64_t v27 = v7;
    uint64_t v28 = 0;
    goto LABEL_30;
  }
  unsigned int v12 = *v10;
  if (v12 < 2)
  {
    int v13 = 0;
    char v14 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v31 = v2[3];
    if (!v31 || !v7)
    {
      char v15 = 0;
      uint64_t v32 = 0;
      uint64_t v8 = 0;
      int v13 = 1;
LABEL_34:
      *unint64_t v2 = 0;
      v2[1] = 0;
      uint64_t v33 = v2[3];
      if (v33 && v32)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v8, v32);
        unsigned int v19 = 0;
        uint64_t v8 = *v2;
        unint64_t v7 = v2[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
        unsigned int v19 = 0;
      }
      goto LABEL_36;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v8);
    char v14 = 0;
    uint64_t v8 = *v2;
    unint64_t v7 = v2[1];
    int v13 = 1;
    uint64_t v11 = v2[2];
LABEL_5:
    if (v12) {
      char v15 = v14;
    }
    else {
      char v15 = 0;
    }
    unint64_t v16 = v11 - v8;
    if (v7 <= v16)
    {
      uint64_t v32 = 0;
      uint64_t v38 = v2[3];
      *unint64_t v2 = 0;
      v2[1] = 0;
      if (v38 && v7)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
        uint64_t v8 = *v2;
        uint64_t v32 = v2[1];
      }
      else
      {
        uint64_t v8 = 0;
      }
      goto LABEL_34;
    }
    uint64_t v17 = (unsigned __int8 *)(v8 + v16);
    uint64_t v18 = v8 + v16 + 1;
    v2[2] = v18;
    if (!v8)
    {
      uint64_t v32 = v7;
      goto LABEL_34;
    }
    unsigned int v19 = *v17;
    if (v19 < 2)
    {
      int v20 = 0;
      char v21 = 1;
      goto LABEL_12;
    }
LABEL_36:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v34 = v2[3];
    if (!v34 || !v7)
    {
      char v22 = 0;
      uint64_t v35 = 0;
      uint64_t v8 = 0;
      int v20 = 1;
      goto LABEL_38;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v8);
    char v21 = 0;
    uint64_t v8 = *v2;
    unint64_t v7 = v2[1];
    int v20 = 1;
    uint64_t v18 = v2[2];
LABEL_12:
    char v22 = v19 ? v21 : 0;
    unint64_t v23 = v18 - v8;
    if (v7 <= v23) {
      break;
    }
    int v24 = (unsigned __int8 *)(v8 + v23);
    v2[2] = (uint64_t)(v24 + 1);
    if (!v8)
    {
      uint64_t v35 = v7;
      goto LABEL_38;
    }
    unsigned int v25 = *v24;
    if (v25 > 1) {
      goto LABEL_40;
    }
    int v26 = 0;
    unint64_t v2 = (uint64_t *)(v25 != 0);
LABEL_19:
    if (v6)
    {
      int v40 = v4;
      if (v45)
      {
        uint64_t v4 = v41;
        WebCore::Region::Region();
        if (!v13)
        {
          LOBYTE(v42) = v15;
          if (!v20)
          {
            HIBYTE(v42) = v22;
            if (!v26)
            {
              char v43 = (char)v2;
              *(void *)a2 = v40;
              WebCore::Region::Region();
              *(_WORD *)(a2 + 32) = v42;
              *(unsigned char *)(a2 + 34) = v43;
              *(unsigned char *)(a2 + 40) = 1;
              WebCore::Region::~Region((WebCore::Region *)v41);
              goto LABEL_25;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_29:
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v29 = v2[3];
    if (v29)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        uint64_t v28 = *v2;
        uint64_t v27 = v2[1];
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
LABEL_30:
    *unint64_t v2 = 0;
    v2[1] = 0;
    uint64_t v30 = v2[3];
    if (v30 && v27)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28, v27);
      unsigned int v12 = 0;
      uint64_t v8 = *v2;
      unint64_t v7 = v2[1];
    }
    else
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      unsigned int v12 = 0;
    }
  }
  uint64_t v35 = 0;
  uint64_t v39 = v2[3];
  *unint64_t v2 = 0;
  v2[1] = 0;
  if (v39 && v7)
  {
    (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
    uint64_t v8 = *v2;
    uint64_t v35 = v2[1];
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_38:
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v36 = v2[3];
  if (v36 && v35)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v8, v35);
    uint64_t v8 = *v2;
    unint64_t v7 = v2[1];
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
  }
LABEL_40:
  *unint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v37 = v2[3];
  if (v37)
  {
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v8);
      if (*v2)
      {
        unint64_t v2 = 0;
        int v26 = 1;
        goto LABEL_19;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_25:
  if (v45) {
    WebCore::Region::~Region((WebCore::Region *)v44);
  }
}

void sub_1986C7EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18) {
    WebCore::Region::~Region((WebCore::Region *)&a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebCore::Region>(unsigned char *a1, uint64_t *a2)
{
  IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>(a2, (uint64_t)&__src);
  if (LOBYTE(v46[0]))
  {
    uint64_t v4 = (int *)__src;
    unint64_t v5 = v45;
    char v6 = v58;
    uint64_t v55 = v58;
    int v56 = 32;
    int v57 = v45;
    if (v45 >= 0x21)
    {
      if (v45 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1986C83ACLL);
      }
      char v6 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v45));
      int v56 = v5;
      uint64_t v55 = v6;
    }
    else if (!v45)
    {
LABEL_6:
      char v59 = 1;
      goto LABEL_7;
    }
    uint64_t v7 = 4 * v5;
    do
    {
      int v8 = *v4++;
      *v6++ = v8;
      v7 -= 4;
    }
    while (v7);
    goto LABEL_6;
  }
  LOBYTE(v55) = 0;
  char v59 = 0;
  uint64_t v30 = *a2;
  uint64_t v31 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v32 = a2[3];
  if (v32) {
    BOOL v33 = v31 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
  }
LABEL_7:
  unint64_t v9 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v10)
  {
    LOBYTE(v51) = 0;
    unsigned __int8 v54 = 0;
    goto LABEL_68;
  }
  unint64_t v11 = v9;
  __src = v46;
  unint64_t v45 = 16;
  if (v9 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::Region::Span>((uint64_t)&v60, a2);
      int v12 = v61;
      if (!v61) {
        break;
      }
      if (HIDWORD(v45) == v45)
      {
        WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region::Span>((uint64_t)&__src, (unint64_t)&v60);
      }
      else
      {
        *((_OWORD *)__src + HIDWORD(v45)) = v60;
        ++HIDWORD(v45);
      }
      if (!--v11)
      {
        WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&__src, (void *)HIDWORD(v45));
        unint64_t v51 = v53;
        LODWORD(v52) = 16;
        uint64_t v35 = __src;
        if (__src == v46)
        {
          unint64_t v11 = HIDWORD(v45);
LABEL_16:
          if (v11) {
            memcpy(v53, v46, 16 * v11);
          }
        }
        else
        {
          __src = v46;
          unint64_t v51 = v35;
          int v36 = v45;
          LODWORD(v11) = HIDWORD(v45);
          LODWORD(v45) = 16;
          LODWORD(v52) = v36;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (v9 < 0x11)
    {
      if (v9) {
        goto LABEL_11;
      }
      unint64_t v51 = v53;
      uint64_t v52 = 16;
LABEL_18:
      HIDWORD(v45) = 0;
      HIDWORD(v52) = v11;
      int v12 = 1;
      unsigned __int8 v54 = 1;
      goto LABEL_19;
    }
    unsigned int v25 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
    LODWORD(v45) = v11;
    __src = v25;
LABEL_11:
    while (1)
    {
      IPC::Decoder::decode<WebCore::Region::Span>((uint64_t)&v60, a2);
      int v12 = v61;
      if (!v61) {
        break;
      }
      if (HIDWORD(v45) == v45)
      {
        WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Region::Span>((uint64_t)&__src, (unint64_t)&v60);
      }
      else
      {
        *((_OWORD *)__src + HIDWORD(v45)) = v60;
        ++HIDWORD(v45);
      }
      if (!--v11)
      {
        int v13 = __src;
        unint64_t v51 = v53;
        uint64_t v52 = 16;
        unint64_t v11 = HIDWORD(v45);
        if (__src == v46) {
          goto LABEL_16;
        }
        __src = v46;
        unint64_t v51 = v13;
        int v26 = v45;
        LODWORD(v45) = 16;
        LODWORD(v52) = v26;
        goto LABEL_18;
      }
    }
  }
  LOBYTE(v51) = 0;
  unsigned __int8 v54 = 0;
LABEL_19:
  uint64_t isValidShape = (uint64_t)__src;
  if (v46 == __src || __src == 0) {
    goto LABEL_24;
  }
  while (1)
  {
    __src = 0;
    LODWORD(v45) = 0;
    uint64_t isValidShape = WTF::fastFree((WTF *)isValidShape, v10);
    int v12 = v54;
LABEL_24:
    if (!v12)
    {
LABEL_68:
      long long v10 = (void *)*a2;
      uint64_t v34 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t isValidShape = a2[3];
      if (isValidShape && v34) {
        uint64_t isValidShape = (*(uint64_t (**)(uint64_t, void *))(*(void *)isValidShape + 16))(isValidShape, v10);
      }
    }
    if (!*a2) {
      goto LABEL_54;
    }
    if (!v59 || !v54) {
      goto LABEL_52;
    }
    uint64_t isValidShape = WebCore::Region::Shape::isValidShape();
    if ((isValidShape & 1) != 0 && *a2)
    {
      if (!v59 || !v54) {
        goto LABEL_52;
      }
      WebCore::Region::Shape::Shape();
      uint64_t v37 = v39;
      uint64_t v38 = 32;
      long long v10 = __src;
      if (__src == v46)
      {
        int v16 = HIDWORD(v45);
        memcpy(v39, __src, 4 * HIDWORD(v45));
      }
      else
      {
        __src = v46;
        uint64_t v37 = v10;
        int v24 = v45;
        int v16 = HIDWORD(v45);
        LODWORD(v45) = 32;
        LODWORD(v38) = v24;
      }
      HIDWORD(v45) = 0;
      HIDWORD(v38) = v16;
      uint64_t v17 = v42;
      int v40 = (long long *)v42;
      uint64_t v41 = 16;
      uint64_t v18 = v47;
      if (v47 == (long long *)v50)
      {
        unsigned int v19 = v49;
        if (v49)
        {
          uint64_t v20 = 16 * v49;
          do
          {
            long long v21 = *v18++;
            *v17++ = v21;
            v20 -= 16;
          }
          while (v20);
        }
      }
      else
      {
        int v47 = (long long *)v50;
        int v40 = v18;
        unsigned int v19 = v49;
        LODWORD(v41) = v48;
      }
      HIDWORD(v41) = v19;
      char v43 = 1;
    }
    else
    {
LABEL_54:
      LOBYTE(v37) = 0;
      char v43 = 0;
    }
    std::__optional_destruct_base<WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v51, v10);
    uint64_t isValidShape = std::__optional_destruct_base<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v22);
    if (!v43)
    {
      long long v10 = (void *)*a2;
      uint64_t v27 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t isValidShape = a2[3];
      if (isValidShape)
      {
        if (v27) {
          uint64_t isValidShape = (*(uint64_t (**)(uint64_t, void *))(*(void *)isValidShape + 16))(isValidShape, v10);
        }
      }
    }
    if (!*a2) {
      break;
    }
    if (v43)
    {
      __src = 0;
      unint64_t v45 = 0;
      v46[0] = 0;
      WebCore::Region::setShape();
      WebCore::Region::Region();
      a1[24] = 1;
      WebCore::Region::~Region((WebCore::Region *)&__src);
      goto LABEL_43;
    }
LABEL_52:
    __break(1u);
  }
  *a1 = 0;
  a1[24] = 0;
LABEL_43:
  uint64_t result = std::__optional_destruct_base<WebCore::Region::Shape,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v10);
  if (!a1[24])
  {
    uint64_t v28 = *a2;
    uint64_t v29 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v29) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v28);
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::IntRect>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::IntRect,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::IntRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t result = (uint64_t)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
    uint64_t v8 = result;
    uint64_t v10 = v9;
    if (!v9)
    {
      unint64_t v16 = *a1;
      unint64_t v17 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t result = a1[3];
      if (result)
      {
        if (v17)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v16);
          uint64_t v10 = 0;
        }
      }
    }
    if (!*a1) {
      goto LABEL_10;
    }
    if (v6 && v10) {
      break;
    }
    __break(1u);
LABEL_13:
    unint64_t v12 = *a1;
    unint64_t v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v14 = a1[3];
    if (v14) {
      BOOL v15 = v13 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12);
    }
  }
  v18[0] = v4;
  v18[1] = v8;
  uint64_t result = WebCore::IntRect::isValid((WebCore::IntRect *)v18);
  if ((result & 1) == 0)
  {
LABEL_10:
    LOBYTE(v11) = 0;
    goto LABEL_11;
  }
  unint64_t v11 = *a1;
  if (*a1)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v8;
    LOBYTE(v11) = 1;
    goto LABEL_9;
  }
LABEL_11:
  *(unsigned char *)a2 = 0;
LABEL_9:
  *(unsigned char *)(a2 + 16) = v11;
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::IntSize>>(unint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::IntSize>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

void sub_1986C87B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986C94F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_destruct_base<WebKit::ImageAnalysisContextMenuActionData,false>::reset[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v2 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v2) {
      CFRelease(v2);
    }
    char v3 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      CFRelease(v3);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
}

WebKit::SmartMagnificationController *WebKit::SmartMagnificationController::SmartMagnificationController(WebKit::SmartMagnificationController *this, WKContentView *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9D3C68;
  unint64_t v4 = [(WKContentView *)a2 page];
  *((void *)this + 2) = v4;
  *((void *)this + 3) = a2;
  uint64_t v5 = *(void *)(v4[4] + 1928);
  unint64_t v6 = (uint64_t *)(v4[32] + 160);
  v9[0] = 142;
  v9[1] = v5;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v6, (unsigned __int8 *)v9, (uint64_t)this, &v8);
  return this;
}

void sub_1986C9674(_Unwind_Exception *a1, void *a2)
{
  *unint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

WebKit *WebKit::WebProcessProxy::updateTextCheckerState(WebKit *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = *((void *)this + 17);
  if (v2 && *(unsigned char *)(v2 + 104) || *((void *)this + 18))
  {
    WebKit::mutableState(this);
    char v3 = WebKit::mutableState(void)::state;
    unint64_t v4 = &v3;
    return (WebKit *)WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetTextCheckerState>(v1, &v4, 0, 0);
  }
  return this;
}

void WebKit::mutableState(WebKit *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&WebKit::mutableState(void)::onceFlag, memory_order_acquire) != -1)
  {
    char v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&WebKit::mutableState(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::mutableState(void)::$_0 &&>>);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetTextCheckerState>(uint64_t a1, char **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2692;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::TextCheckerState>,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::platformInitializeWebProcess(WTF::StringImpl **this, const WebKit::WebProcessProxy *a2, WebKit::WebProcessCreationParameters *a3)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  if ((byte_1E93CF6DC & 1) == 0)
  {
    unk_1E93CF768 = 0;
    qword_1E93CF760 = 0;
    byte_1E93CF6DC = 1;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)buf, (uint64_t)&qword_1E93CF760);
  uint64_t v7 = *((unsigned int *)a3 + 109);
  if (v7) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*((WTF::StringImpl **)a3 + 53), (WTF::StringImpl *)(*((void *)a3 + 53) + 8 * v7));
  }
  uint64_t v8 = (WTF *)*((void *)a3 + 53);
  if (v8)
  {
    *((void *)a3 + 53) = 0;
    *((_DWORD *)a3 + 108) = 0;
    WTF::fastFree(v8, v6);
  }
  *((void *)a3 + 53) = *(void *)buf;
  uint64_t v9 = *(void *)&buf[8];
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  *((void *)a3 + 54) = v9;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v6);
  *((unsigned char *)a3 + 394) = 0;
  uint64_t v10 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  *((unsigned char *)a3 + 392) = [v10 BOOLForKey:@"WebKitJSCJITEnabledDefaultsKey"];
  *((unsigned char *)a3 + 393) = [v10 BOOLForKey:@"WebKitJSCFTLJITEnabledDefaultsKey"];
  *((unsigned char *)a3 + 333) = [v10 BOOLForKey:@"LogMemoryJetsamDetails"];
  *((unsigned char *)a3 + 334) = [v10 BOOLForKey:@"WebKitSuppressMemoryPressureHandler"];
  WTF::String::operator=((uint64_t *)a3 + 47, this + 87);
  uint64_t v11 = *((void *)a3 + 47);
  if (v11)
  {
    unint64_t v12 = *(unsigned int *)(v11 + 16);
    unint64_t v13 = *(WebKit::SandboxExtensionImpl **)(v11 + 8);
    LODWORD(v11) = *(_DWORD *)(v11 + 4);
    uint64_t v14 = (v12 >> 2) & 1;
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v14 = 1;
  }
  WebKit::SandboxExtension::createHandleWithoutResolvingPath(v13, (WebKit::SandboxExtensionImpl *)(v11 | (unint64_t)(v14 << 32)), 0, (uint64_t)buf);
  if (buf[8])
  {
    uint64_t v16 = *(const char ***)buf;
    *(void *)buf = 0;
    BOOL v15 = std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)a3 + 48, v16);
    if (buf[8]) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
    }
  }
  WebCore::applicationBundleIdentifier((uint64_t *)buf, (WebCore *)v15);
  uint64_t v18 = *(void *)buf;
  *(void *)buf = 0;
  unsigned int v19 = (WTF::StringImpl *)*((void *)a3 + 43);
  *((void *)a3 + 43) = v18;
  if (v19)
  {
    int v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 != 2) {
      goto LABEL_16;
    }
    WTF::StringImpl::destroy(v19, v17);
    unsigned int v19 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (!v19) {
      goto LABEL_17;
    }
    int v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v21);
    }
    else {
LABEL_16:
    }
      *(_DWORD *)unsigned int v19 = v20;
  }
LABEL_17:
  if (_MergedGlobals_1177 == 1)
  {
    int v22 = dword_1E93CF6E0;
  }
  else
  {
    int v22 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"WebKitWebProcessLatencyQOS");
    dword_1E93CF6E0 = v22;
    _MergedGlobals_1177 = 1;
  }
  *((_DWORD *)a3 + 88) = v22;
  if (byte_1E93CF6D1 == 1)
  {
    int v23 = dword_1E93CF6E4;
  }
  else
  {
    int v23 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"WebKitWebProcessThroughputQOS");
    dword_1E93CF6E4 = v23;
    byte_1E93CF6D1 = 1;
  }
  *((_DWORD *)a3 + 89) = v23;
  int v24 = this[6];
  if (*((unsigned char *)v24 + 132))
  {
    int v150 = 0;
    long long v25 = *(_OWORD *)((char *)v24 + 116);
    v149[0] = *(_OWORD *)((char *)v24 + 100);
    v149[1] = v25;
    int v26 = (void *)[MEMORY[0x1E4F223F0] bundleProxyWithAuditToken:v149 error:&v150];
    uint64_t v27 = v150;
    if (v150)
    {
      uint64_t v28 = qword_1EB358820;
      if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = [(WTF::StringImpl *)v27 localizedDescription];
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v29;
        _os_log_error_impl(&dword_1985F2000, v28, OS_LOG_TYPE_ERROR, "Failed to get attribution bundleID from audit token with error: %@.", buf, 0xCu);
      }
    }
    else
    {
      MEMORY[0x19972EAD0](buf, [v26 bundleIdentifier]);
      uint64_t v31 = *(void *)buf;
      *(void *)buf = 0;
      uint64_t v32 = (WTF::StringImpl *)*((void *)a3 + 45);
      *((void *)a3 + 45) = v31;
      if (!v32) {
        goto LABEL_30;
      }
      int v33 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 != 2) {
        goto LABEL_29;
      }
      WTF::StringImpl::destroy(v32, v30);
      uint64_t v32 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (!v32) {
        goto LABEL_30;
      }
      int v33 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v34);
      }
      else {
LABEL_29:
      }
        *(_DWORD *)uint64_t v32 = v33;
    }
  }
LABEL_30:
  if (!CFPreferencesGetAppIntegerValue(@"RemoteInspectorEnabled", @"com.apple.webinspectord", 0)) {
    goto LABEL_50;
  }
  uint64_t v153 = "com.apple.webinspector";
  uint64_t v154 = 23;
  uint64_t v35 = *((void *)a2 + 18);
  if (!v35) {
    goto LABEL_38;
  }
  if (!*(void *)(v35 + 352))
  {
    LOBYTE(v35) = 0;
LABEL_38:
    char v36 = 0;
    goto LABEL_39;
  }
  xpc_connection_get_audit_token();
  char v36 = buf[0];
  v152[0] = *(_OWORD *)&buf[1];
  *(_OWORD *)((char *)v152 + 15) = *(_OWORD *)&buf[16];
  LOBYTE(v35) = 1;
LABEL_39:
  buf[0] = v36;
  *(_OWORD *)&buf[1] = v152[0];
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)((char *)v152 + 15);
  char v156 = v35;
  WebKit::SandboxExtension::createHandlesForMachLookup((uint64_t *)&v153, 1uLL, (long long *)buf, 0, 0, (uint64_t)&v150);
  uint64_t v38 = *((unsigned int *)a3 + 21);
  if (v38)
  {
    uint64_t v39 = (const char ***)*((void *)a3 + 9);
    uint64_t v40 = 8 * v38;
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v39);
      uint64_t v39 = (const char ***)(v41 + 8);
      v40 -= 8;
    }
    while (v40);
  }
  __int16 v42 = (WTF *)*((void *)a3 + 9);
  if (v42)
  {
    *((void *)a3 + 9) = 0;
    *((_DWORD *)a3 + 20) = 0;
    __int16 v42 = (WTF *)WTF::fastFree(v42, v37);
  }
  *((void *)a3 + 9) = v150;
  uint64_t v43 = v151;
  int v150 = 0;
  uint64_t v151 = 0;
  *((void *)a3 + 10) = v43;
  {
    if (WebKit::singleton(void)::singleton)
    {
      uint64_t v44 = *(void *)(WebKit::singleton(void)::singleton + 8);
      if (v44)
      {
        if (!*(unsigned char *)(v44 + 461))
        {
          WebKit::GPUProcessProxy::createGPUToolsSandboxExtensionHandlesIfNeeded(v42, buf);
          uint64_t v153 = buf;
          WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateSandboxAccess>(v44, (uint64_t *)&v153, 0, 0);
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v45);
        }
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v150, v37);
LABEL_50:
  unint64_t v46 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a3 + 70, (uint64_t)(this + 51));
  if (this[81])
  {
    int v47 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
    [v47 encodeObject:this[81] forKey:@"parameters"];
    [v47 finishEncoding];
    int v48 = (const void *)[v47 encodedData];
    CFTypeRef cf = v48;
    if (v48) {
      CFRetain(v48);
    }
    API::Data::createWithoutCopying((id *)&cf, (WebKit **)buf);
    uint64_t v49 = *(void *)buf;
    *(void *)buf = 0;
    uint64_t v50 = *((void *)a3 + 50);
    *((void *)a3 + 50) = v49;
    if (v50)
    {
      CFRelease(*(CFTypeRef *)(v50 + 8));
      uint64_t v51 = *(void *)buf;
      *(void *)buf = 0;
      if (v51) {
        CFRelease(*(CFTypeRef *)(v51 + 8));
      }
    }
    unint64_t v46 = cf;
    CFTypeRef cf = 0;
    if (v46) {
      CFRelease(v46);
    }
    if (v47) {
      CFRelease(v47);
    }
  }
  uint64_t v52 = MEMORY[0x19972CF60](v46);
  uint64_t v53 = (const void *)*((void *)a3 + 52);
  *((void *)a3 + 52) = v52;
  if (v53) {
    CFRelease(v53);
  }
  unsigned __int8 v54 = (WebCore *)[v10 BOOLForKey:@"WebKitLogCookieInformation"];
  *((unsigned char *)a3 + 456) = (_BYTE)v54;
  WebCore::collectScreenProperties((uint64_t *)&v153, v54);
  *((_DWORD *)a3 + 110) = v153;
  uint64_t v56 = v154;
  uint64_t v154 = 0;
  int v57 = (WebCore *)*((void *)a3 + 56);
  *((void *)a3 + 56) = v56;
  if (v57) {
    int v57 = (WebCore *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable((uint64_t)v57, v55);
  }
  HasBattery = (WebCore *)WebCore::systemHasBattery(v57);
  *((unsigned char *)a3 + 696) = (_BYTE)HasBattery;
  HasAC = (PAL *)WebCore::cachedSystemHasAC(HasBattery);
  if ((_BYTE)HasAC) {
    BOOL v60 = 0;
  }
  else {
    BOOL v60 = (unsigned __int16)HasAC >= 0x100u;
  }
  char v61 = !v60;
  *((unsigned char *)a3 + 697) = v61;
  uint64_t v62 = (WebCore *)PAL::currentUserInterfaceIdiom(HasAC);
  *((unsigned char *)a3 + 698) = (_BYTE)v62;
  unint64_t v63 = (WebCore::RenderThemeIOS *)WebCore::supportsPictureInPicture(v62);
  *((unsigned char *)a3 + 699) = (_BYTE)v63;
  unint64_t v65 = (uint64_t *)WebCore::RenderThemeIOS::cssValueToSystemColorMap(v63);
  if (!*v65 || (uint64_t v66 = *(unsigned int *)(*v65 - 12), !v66))
  {
    uint64_t Table = 0;
    goto LABEL_77;
  }
  unsigned int v67 = (v66 - 1) | ((v66 - 1) >> 1) | (((v66 - 1) | ((v66 - 1) >> 1)) >> 2);
  unsigned int v68 = v67 | (v67 >> 4) | ((v67 | (v67 >> 4)) >> 8);
  unint64_t v69 = (v68 | HIWORD(v68)) + 1;
  if (v69 > 0x400)
  {
    if (v69 > 2 * v66) {
      goto LABEL_143;
    }
  }
  else if (3 * v69 > 4 * v66)
  {
LABEL_75:
    double v70 = (double)v66;
    double v71 = (double)v69;
    double v72 = 0.604166667;
    goto LABEL_144;
  }
  LODWORD(v69) = 2 * v69;
  if (v69 <= 0x400) {
    goto LABEL_75;
  }
LABEL_143:
  double v70 = (double)v66;
  double v71 = (double)v69;
  double v72 = 0.416666667;
LABEL_144:
  if (v71 * v72 <= v70) {
    LODWORD(v69) = 2 * v69;
  }
  if (v69 <= 8) {
    unsigned int v135 = 8;
  }
  else {
    unsigned int v135 = v69;
  }
  uint64_t Table = WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::allocateTable(v135);
  *(_DWORD *)(Table - 8) = v135 - 1;
  *(_DWORD *)(Table - 4) = v135;
  *(_DWORD *)(Table - 16) = 0;
  *(_DWORD *)(Table - 12) = v66;
  uint64_t v136 = *v65;
  if (*v65)
  {
    if (*(_DWORD *)(v136 - 12))
    {
      uint64_t v137 = v136 + 16 * *(unsigned int *)(v136 - 4);
      *(void *)buf = *v65;
      *(void *)&uint8_t buf[8] = v137;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(buf);
      uint64_t v64 = *(Color **)buf;
      uint64_t v138 = *(void *)&buf[8];
      uint64_t v136 = *v65;
      goto LABEL_155;
    }
    uint64_t v139 = *(unsigned int *)(v136 - 4);
    uint64_t v64 = (Color *)(v136 + 16 * v139);
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v139 = 0;
  }
  uint64_t v138 = v136 + 16 * v139;
LABEL_155:
  int v150 = (WTF::StringImpl *)v64;
  uint64_t v151 = v138;
  if (v136) {
    int v140 = (WTF::StringImpl *)(v136 + 16 * *(unsigned int *)(v136 - 4));
  }
  else {
    int v140 = 0;
  }
  if (v140 != (WTF::StringImpl *)v64)
  {
    do
    {
      int v141 = 0;
      unsigned int v142 = *(_DWORD *)(Table - 8);
      for (int i = v64->m_colorAndFlags; ; int i = v141 + (i & v142))
      {
        uint64_t v144 = Table + 16 * (i & v142);
        BOOL v145 = !*(_DWORD *)v144 && *(unsigned char *)(v144 + 4) == 0;
        if (v145 && !*(unsigned char *)(v144 + 5)) {
          break;
        }
        ++v141;
      }
      *(Color *)buf = (Color)v64->m_colorAndFlags;
      WebCore::Color::Color((WebCore::Color *)&buf[8], v64 + 1);
      *(void *)uint64_t v144 = *(void *)buf;
      WebCore::Color::operator=();
      if ((*(void *)&buf[8] & 0x8000000000000) != 0)
      {
        uint64_t v147 = (unsigned int *)(*(void *)&buf[8] & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&buf[8] & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v147);
          WTF::fastFree((WTF *)v147, v146);
        }
      }
      int v150 = (WTF::StringImpl *)((char *)v150 + 16);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>,WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::skipEmptyBuckets(&v150);
      uint64_t v64 = (Color *)v150;
    }
    while (v150 != v140);
  }
LABEL_77:
  unint64_t v74 = (WebCore::RenderThemeIOS *)*((void *)a3 + 88);
  *((void *)a3 + 88) = Table;
  if (v74) {
    unint64_t v74 = (WebCore::RenderThemeIOS *)WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable((uint64_t)v74, v64);
  }
  WebCore::RenderThemeIOS::systemFocusRingColor((uint64_t *)buf, v74);
  uint64_t v75 = (unsigned int *)WebCore::Color::operator=();
  if ((*(void *)buf & 0x8000000000000) != 0)
  {
    uint64_t v75 = (unsigned int *)(*(void *)buf & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v75);
      uint64_t v75 = (unsigned int *)WTF::fastFree((WTF *)v75, v76);
    }
  }
  WebCore::localizedDeviceModel((uint64_t *)buf, (WebCore *)v75);
  uint64_t v78 = *(void *)buf;
  *(void *)buf = 0;
  uint64_t v79 = (WTF::StringImpl *)*((void *)a3 + 90);
  *((void *)a3 + 90) = v78;
  if (!v79) {
    goto LABEL_85;
  }
  int v80 = *(_DWORD *)v79 - 2;
  if (*(_DWORD *)v79 != 2)
  {
LABEL_84:
    *(_DWORD *)uint64_t v79 = v80;
    goto LABEL_85;
  }
  WTF::StringImpl::destroy(v79, v77);
  uint64_t v79 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v79)
  {
    int v80 = *(_DWORD *)v79 - 2;
    if (*(_DWORD *)v79 == 2)
    {
      uint64_t v79 = (WTF::StringImpl *)WTF::StringImpl::destroy(v79, v81);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
LABEL_85:
  uint64_t v82 = WebCore::contentSizeCategory(v79);
  MEMORY[0x19972EAD0](buf, v82);
  uint64_t v84 = *(void *)buf;
  *(void *)buf = 0;
  uint64_t v85 = (WTF::StringImpl *)*((void *)a3 + 91);
  *((void *)a3 + 91) = v84;
  if (!v85) {
    goto LABEL_90;
  }
  int v86 = *(_DWORD *)v85 - 2;
  if (*(_DWORD *)v85 != 2) {
    goto LABEL_89;
  }
  WTF::StringImpl::destroy(v85, v83);
  uint64_t v85 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (!v85) {
    goto LABEL_90;
  }
  int v86 = *(_DWORD *)v85 - 2;
  if (*(_DWORD *)v85 == 2) {
    WTF::StringImpl::destroy(v85, v87);
  }
  else {
LABEL_89:
  }
    *(_DWORD *)uint64_t v85 = v86;
LABEL_90:
  WebKit::AuxiliaryProcessProxy::createMobileGestaltSandboxExtensionIfNeeded(buf);
  std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)a3 + 640, (uint64_t)buf);
  if (buf[8]) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)buf);
  }
  *((_WORD *)a3 + 336) = 257;
  if ([MEMORY[0x1E4F42738] sharedApplication]
    && !objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42738], "sharedApplication"), "applicationState")
    && qword_1E93CF6F8 != -1)
  {
    dispatch_once(&qword_1E93CF6F8, &__block_literal_global_110);
  }
  *((unsigned char *)a3 + 337) = [+[WKMouseDeviceObserver sharedInstance] hasMouseDevice];
  uint64_t v88 = (WebCore::IOSurface *)[+[WKStylusDeviceObserver sharedInstance] hasStylusDevice];
  *((unsigned char *)a3 + 338) = (_BYTE)v88;
  unint64_t v89 = (WebCore::IOSurface *)WebCore::IOSurface::maximumSize(v88);
  *((void *)a3 + 92) = v89;
  *((void *)a3 + 93) = WebCore::IOSurface::bytesPerRowAlignment(v89);
  WebKit::accessibilityPreferences((WebKit *)buf);
  *((_OWORD *)a3 + 47) = *(_OWORD *)buf;
  *(void *)((char *)a3 + 767) = *(void *)&buf[15];
  uint64_t v90 = (WebKit::StorageAccessUserAgentStringQuirkController *)_AXSApplicationAccessibilityEnabled();
  *((unsigned char *)a3 + 776) = v90 != 0;
  uint64_t v93 = (uint64_t *)WebKit::StorageAccessUserAgentStringQuirkController::shared(v90) + 1;
  uint64_t v92 = *v93;
  if (*v93 && (int v94 = *(_DWORD *)(v92 - 12)) != 0)
  {
    unsigned int v95 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*(_DWORD *)(v92 - 12));
    uint64_t v96 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v95 + 16));
    v96[2] = v95 - 1;
    v96[3] = v95;
    *uint64_t v96 = 0;
    v96[1] = v94;
    uint64_t v99 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v93, v97, v98);
    uint64_t v100 = v99;
    unint64_t v101 = v96 + 4;
    *(void *)buf = v99;
    *(void *)&uint8_t buf[8] = v91;
    if (*v93) {
      uint64_t v102 = *v93 + 16 * *(unsigned int *)(*v93 - 4);
    }
    else {
      uint64_t v102 = 0;
    }
    if (v102 != v99)
    {
      do
      {
        unsigned int v103 = v96[2];
        int v104 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v100, v91);
        int v106 = 0;
        do
        {
          uint64_t v107 = v104 & v103;
          int v109 = WTF::equal(*(WTF **)&v101[4 * v107], 0, v105);
          int v104 = ++v106 + v107;
        }
        while (!v109);
        uint64_t v110 = *(WTF::ASCIICaseInsensitiveHash **)v100;
        if (*(void *)v100) {
          *(_DWORD *)v110 += 2;
        }
        unint64_t v111 = *(_DWORD **)(v100 + 8);
        if (v111) {
          *v111 += 2;
        }
        unint64_t v112 = (WTF::StringImpl **)&v101[4 * v107];
        unint64_t v113 = *v112;
        WTF::StringImpl *v112 = v110;
        if (v113)
        {
          if (*(_DWORD *)v113 == 2) {
            WTF::StringImpl::destroy(v113, v108);
          }
          else {
            *(_DWORD *)v113 -= 2;
          }
        }
        int v114 = &v101[4 * v107];
        char v115 = (WTF::StringImpl *)*((void *)v114 + 1);
        *((void *)v114 + 1) = v111;
        if (v115)
        {
          if (*(_DWORD *)v115 == 2) {
            WTF::StringImpl::destroy(v115, v108);
          }
          else {
            *(_DWORD *)v115 -= 2;
          }
        }
        *(void *)buf += 16;
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)buf, (uint64_t)v108, v105);
        uint64_t v100 = *(void *)buf;
      }
      while (*(void *)buf != v102);
    }
  }
  else
  {
    unint64_t v101 = 0;
  }
  uint64_t v116 = (WTF::StringImpl **)*((void *)a3 + 99);
  *((void *)a3 + 99) = v101;
  if (v116) {
    uint64_t v116 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v116, v91);
  }
  int v117 = WebKit::StorageAccessPromptQuirkController::shared((WebKit::StorageAccessPromptQuirkController *)v116);
  uint64_t v120 = *((unsigned int *)v117 + 5);
  if (v120)
  {
    uint64_t v121 = v117[1];
    uint64_t v122 = v121 + 32 * v120;
    int v123 = (uint64_t *)((char *)a3 + 800);
    do
    {
      uint64_t v124 = *(unsigned int *)(v121 + 28);
      if (v124)
      {
        long long v125 = *(const WTF::URL **)(v121 + 16);
        uint64_t v126 = 40 * v124;
        do
        {
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v150, v125);
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v123, &v150, (uint64_t)buf);
          int v127 = v150;
          int v150 = 0;
          if (v127)
          {
            if (*(_DWORD *)v127 == 2) {
              WTF::StringImpl::destroy(v127, v118);
            }
            else {
              *(_DWORD *)v127 -= 2;
            }
          }
          long long v125 = (const WTF::URL *)((char *)v125 + 40);
          v126 -= 40;
        }
        while (v126);
      }
      else
      {
        uint64_t v128 = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)(v121 + 8), (uint64_t)v118, v119);
        uint64_t v130 = *(void *)(v121 + 8);
        if (v130) {
          int v131 = (WTF::StringImpl *)(v130 + 24 * *(unsigned int *)(v130 - 4));
        }
        else {
          int v131 = 0;
        }
        int v150 = v128;
        uint64_t v151 = v129;
        while (1)
        {
          uint64_t v118 = v150;
          if (v150 == v131) {
            break;
          }
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v123, (WTF::StringImpl **)v150, (uint64_t)buf);
          int v150 = (WTF::StringImpl *)((char *)v150 + 24);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v150, v132, v133);
        }
      }
      v121 += 32;
    }
    while (v121 != v122);
  }
  uint64_t result = v154;
  if (v154) {
    return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v154, v118);
  }
  return result;
}

void sub_1986CA4A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
}

void sub_1986CA5D4(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  JUMPOUT(0x1986CA5BCLL);
}

uint64_t WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v3;
    while (1)
    {
      uint64_t v10 = (int *)(v2 + 16 * v8);
      int v11 = *v10;
      int v12 = *((unsigned __int8 *)v10 + 4);
      if (*v10) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v12 == 0;
      }
      if (v13)
      {
        if (v11) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v12 == 0;
        }
        if (v14 && !*((unsigned char *)v10 + 5))
        {
          uint64_t v15 = *(void *)(v2 + 16 * v8 + 8);
          if ((v15 & 0x8000000000000) == 0) {
            goto LABEL_36;
          }
          uint64_t v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) != 1) {
            goto LABEL_36;
          }
          goto LABEL_21;
        }
      }
      else if (*((unsigned char *)v10 + 5))
      {
        goto LABEL_36;
      }
      uint64_t v17 = *a1;
      if (*a1) {
        unsigned int v18 = *(_DWORD *)(v17 - 8);
      }
      else {
        unsigned int v18 = 0;
      }
      for (i = 0; ; int v11 = i + v20)
      {
        uint64_t v20 = v11 & v18;
        uint64_t v21 = v17 + 16 * v20;
        BOOL v22 = !*(_DWORD *)v21 && *(unsigned char *)(v21 + 4) == 0;
        if (v22 && !*(unsigned char *)(v21 + 5)) {
          break;
        }
        ++i;
      }
      uint64_t v23 = *(void *)(v17 + 16 * v20 + 8);
      if ((v23 & 0x8000000000000) != 0)
      {
        long long v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v7);
        }
      }
      *(void *)uint64_t v21 = *(void *)v10;
      WebCore::Color::Color();
      uint64_t v24 = *(void *)(v2 + 16 * v8 + 8);
      if ((v24 & 0x8000000000000) == 0) {
        goto LABEL_36;
      }
      uint64_t v16 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) != 1) {
        goto LABEL_36;
      }
LABEL_21:
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v7);
LABEL_36:
      if (++v8 == v9) {
        goto LABEL_43;
      }
    }
  }
  if (v2)
  {
LABEL_43:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::allocateTable(unsigned int a1)
{
  uint64_t result = WTF::fastMalloc((WTF *)(16 * a1 + 16)) + 16;
  if (a1)
  {
    uint64_t v3 = a1;
    int v4 = (_OWORD *)result;
    do
    {
      *v4++ = xmmword_1994F5DD0;
      --v3;
    }
    while (v3);
  }
  return result;
}

void WebKit::accessibilityPreferences(WebKit *this)
{
  *(void *)this = -1;
  *((void *)this + 1) = -1;
  *((_DWORD *)this + 4) = -1;
  *((_WORD *)this + 10) = 1;
  *((unsigned char *)this + 22) = 0;
  WebCore::applicationBundleIdentifier((uint64_t *)&v17, this);
  WTF::String::createCFString((uint64_t *)&cf, (WTF::String *)&v17);
  uint64_t v3 = v17;
  uint64_t v17 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = _AXSReduceMotionEnabledApp();
  if ((v4 + 1) >= 3) {
    int v5 = -2;
  }
  else {
    int v5 = v4;
  }
  *(_DWORD *)this = v5;
  int v6 = _AXSIncreaseButtonLegibilityApp();
  if ((v6 + 1) >= 3) {
    int v7 = -2;
  }
  else {
    int v7 = v6;
  }
  *((_DWORD *)this + 1) = v7;
  int v8 = _AXSEnhanceTextLegibilityEnabledApp();
  if ((v8 + 1) >= 3) {
    int v9 = -2;
  }
  else {
    int v9 = v8;
  }
  *((_DWORD *)this + 2) = v9;
  int v10 = _AXDarkenSystemColorsApp();
  if ((v10 + 1) >= 3) {
    int v11 = -2;
  }
  else {
    int v11 = v10;
  }
  *((_DWORD *)this + 3) = v11;
  int v12 = _AXSInvertColorsEnabledApp();
  if ((v12 + 1) >= 3) {
    int v13 = -2;
  }
  else {
    int v13 = v12;
  }
  *((_DWORD *)this + 4) = v13;
  *((unsigned char *)this + 21) = _AXSEnhanceTextLegibilityEnabled() != 0;
  if (byte_1E93CF6D6 == 1)
  {
    BOOL v14 = off_1E93CF730;
    if (!off_1E93CF730) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (byte_1E93CF6D7 == 1)
  {
    uint64_t v16 = (void *)qword_1E93CF738;
  }
  else
  {
    uint64_t v16 = dlopen("/usr/lib/libAccessibility.dylib", 2);
    qword_1E93CF738 = (uint64_t)v16;
    byte_1E93CF6D7 = 1;
  }
  BOOL v14 = dlsym(v16, "_AXSReduceMotionAutoplayAnimatedImagesEnabled");
  off_1E93CF730 = v14;
  byte_1E93CF6D6 = 1;
  if (v14) {
LABEL_22:
  }
    *((unsigned char *)this + 20) = ((unsigned int (*)(void *))v14)(v14) != 0;
LABEL_23:
  *((unsigned char *)this + 22) = _AXSPrefersNonBlinkingCursorIndicator() != 0;
  CFTypeRef v15 = cf;
  CFTypeRef cf = 0;
  if (v15) {
    CFRelease(v15);
  }
}

void sub_1986CAA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

long long *WebKit::StorageAccessUserAgentStringQuirkController::shared(WebKit::StorageAccessUserAgentStringQuirkController *this)
{
  {
    qword_1EB35A578 = 0;
    WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance = 0u;
    unk_1EB35A568 = 0u;
  }
  return &WebKit::StorageAccessUserAgentStringQuirkController::shared(void)::sharedInstance;
}

void WebKit::WebProcessProxy::platformInitialize(WebKit::WebProcessProxy *this)
{
  [+[WKMouseDeviceObserver sharedInstance] start];
  [+[WKStylusDeviceObserver sharedInstance] start];
  if ((WebKit::WebProcessProxy::platformInitialize(void)::didSetScreenWakeLockHandler & 1) == 0)
  {
    WebKit::WebProcessProxy::platformInitialize(void)::didSetScreenWakeLockHandler = 1;
    uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v2 = &unk_1EE9D4C20;
    int v5 = v2;
    PAL::SleepDisablerCocoa::setScreenWakeLockHandler();
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
  }
  uint64_t v3 = *(void *)(*((void *)this + 64) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  WebKit::ProcessThrottler::setAllowsActivities((WebKit::WebProcessProxy *)((char *)this + 200), *(unsigned __int8 *)(v4 + 944) == 0);
}

void sub_1986CAB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ProcessThrottler::setAllowsActivities(WebKit::ProcessThrottler *this, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 188) != a2)
  {
    uint64_t v4 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 136);
      if (v6) {
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      }
      int v9 = 134218496;
      int v10 = this;
      __int16 v11 = 1024;
      int v12 = v6;
      __int16 v13 = 1024;
      int v14 = a2;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::setAllowsActivities %d", (uint8_t *)&v9, 0x18u);
    }
    uint64_t v7 = *((void *)this + 1);
    if (*(unsigned __int8 *)(v7 + 16) == a2)
    {
      if (a2) {
        goto LABEL_13;
      }
    }
    else
    {
      *(unsigned char *)(v7 + 16) = a2;
      if (a2)
      {
LABEL_13:
        *((unsigned char *)this + 188) = a2;
        return;
      }
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        *(void *)(v7 + 8) = 0;
        WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::deallocateTable(v8, v5);
      }
    }
    WebKit::ProcessThrottler::invalidateAllActivities(this);
    goto LABEL_13;
  }
}

WTF::StringImpl *WebKit::GPUProcessProxy::platformInitializeGPUProcessParameters(WebKit::GPUProcessProxy *this, WebKit::GPUProcessCreationParameters *a2)
{
  WebKit::AuxiliaryProcessProxy::createMobileGestaltSandboxExtensionIfNeeded(&v18);
  std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)a2 + 96, (uint64_t)&v18);
  if ((_BYTE)v19) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v18);
  }
  WebKit::GPUProcessProxy::createGPUToolsSandboxExtensionHandlesIfNeeded(v3, &v18);
  uint64_t v5 = *((unsigned int *)a2 + 31);
  if (v5)
  {
    uint64_t v6 = (const char ***)*((void *)a2 + 14);
    uint64_t v7 = 8 * v5;
    do
    {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v6);
      uint64_t v6 = (const char ***)(v8 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  int v9 = (WTF *)*((void *)a2 + 14);
  if (v9)
  {
    *((void *)a2 + 14) = 0;
    *((_DWORD *)a2 + 30) = 0;
    WTF::fastFree(v9, v4);
  }
  *((void *)a2 + 14) = v18;
  uint64_t v10 = v19;
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  *((void *)a2 + 15) = v10;
  __int16 v11 = (WebKit *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v4);
  uint64_t v12 = WebKit::applicationVisibleName(v11);
  MEMORY[0x19972EAD0](&v18, v12);
  int v14 = v18;
  unsigned int v18 = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 16);
  *((void *)a2 + 16) = v14;
  if (result)
  {
    int v16 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v13);
      uint64_t result = v18;
      unsigned int v18 = 0;
      if (!result) {
        return result;
      }
      int v16 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      }
    }
    *(_DWORD *)uint64_t result = v16;
  }
  return result;
}

void sub_1986CAE88(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WebKit::AuxiliaryProcessProxy::createMobileGestaltSandboxExtensionIfNeeded(unsigned char *a1@<X8>)
{
  if (_MGCacheValid())
  {
    *a1 = 0;
    a1[8] = 0;
  }
  else
  {
    uint64_t v3 = qword_1EB358488;
    if (os_log_type_enabled((os_log_t)qword_1EB358488, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, "MobileGestalt cache is invalid! Creating a sandbox extension to repopulate cache in memory.", buf, 2u);
    }
    v4[0] = 0;
    v4[32] = 0;
    WebKit::SandboxExtension::createHandleForMachLookup((uint64_t)"com.apple.mobilegestalt.xpc", (uint64_t)v4, 0, a1);
  }
}

void WebKit::GPUProcessProxy::createGPUToolsSandboxExtensionHandlesIfNeeded(WebKit::GPUProcessProxy *this@<X0>, void *a2@<X8>)
{
  unsigned char v5[2] = *MEMORY[0x1E4F143B8];
  if (WebKit::WebProcessProxy::shouldEnableRemoteInspector(this))
  {
    v5[0] = (uint64_t)"com.apple.gputools.service";
    v5[1] = 27;
    LOBYTE(v3) = 0;
    char v4 = 0;
    WebKit::SandboxExtension::createHandlesForMachLookup(v5, 1uLL, &v3, 0, 0, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

BOOL WebKit::WebProcessProxy::shouldEnableRemoteInspector(WebKit::WebProcessProxy *this)
{
  return CFPreferencesGetAppIntegerValue(@"RemoteInspectorEnabled", @"com.apple.webinspectord", 0) != 0;
}

void WebKit::WebProcessPool::webProcessDataStoreParameters(WebKit::WebProcessPool *this, WebKit::WebProcessProxy *a2, atomic_uchar *a3)
{
  uint64_t v6 = WebKit::WebsiteDataStore::resolvedDirectories(a3);
  uint64_t v7 = v6;
  uint64_t v8 = *(_DWORD **)(v6 + 88);
  if (v8) {
    *v8 += 2;
  }
  uint64_t v9 = *(void *)(v6 + 96);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v9 + 4);
    *(_DWORD *)v9 += 2;
    if (v10
      && (WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(v9 + 8), (WebKit::SandboxExtensionImpl *)(v10 | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32)), 1, (uint64_t)&v49), v50))
    {
      __int16 v11 = (const char **)v49;
      uint64_t v49 = 0;
      uint64_t v51 = v11;
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v49);
    }
    else
    {
      __int16 v11 = 0;
    }
  }
  else
  {
    __int16 v11 = 0;
    uint64_t v51 = 0;
  }
  uint64_t v12 = WebKit::WebsiteDataStore::mediaKeysStorageSalt(a3);
  int v48 = 0;
  uint64_t v13 = *((void *)a2 + 64);
  if (v13 && *(_DWORD *)(v13 + 4))
  {
    WebKit::resolvePathForSandboxExtension(&v49);
    int v48 = v49;
    uint64_t v49 = 0;
  }
  else if (*((unsigned char *)a2 + 506))
  {
    WTF::String::operator=((uint64_t *)&v48, (WTF::StringImpl **)(v7 + 72));
  }
  uint64_t v38 = v11;
  if (v48 && (uint64_t v14 = *((unsigned int *)v48 + 1), v14))
  {
    WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v48 + 1), (WebKit::SandboxExtensionImpl *)(v14 | ((unint64_t)((*((_DWORD *)v48 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v49);
    if (v50)
    {
      uint64_t v15 = (const char **)v49;
      uint64_t v49 = 0;
      int v47 = v15;
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v49);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = v12;
  }
  else
  {
    uint64_t v16 = v12;
    uint64_t v15 = 0;
  }
  uint64_t v17 = *(void *)(v7 + 144);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(v17 + 4);
    *(_DWORD *)v17 += 2;
    if (v18
      && (WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(v17 + 8), (WebKit::SandboxExtensionImpl *)(v18 | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32)), 1, (uint64_t)&v49), v50))
    {
      uint64_t v19 = (const char **)v49;
      uint64_t v49 = 0;
      unint64_t v46 = v19;
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v49);
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v46 = 0;
  }
  LOBYTE(v49) = 0;
  char v50 = 0;
  WebKit::WebsiteDataStore::resolvedCookieStorageDirectory((WTF::StringImpl **)a3, &v42);
  uint64_t v21 = v42;
  if (v42)
  {
    uint64_t v22 = *((unsigned int *)v42 + 1);
    if (v22)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v42 + 1), (WebKit::SandboxExtensionImpl *)(v22 | ((unint64_t)((*((_DWORD *)v42 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v44);
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v49, (uint64_t)&v44);
      if (v45) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v44);
      }
      uint64_t v21 = v42;
      __int16 v42 = 0;
      if (!v21) {
        goto LABEL_35;
      }
    }
    else
    {
      __int16 v42 = 0;
    }
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v20);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
LABEL_35:
  LOBYTE(v44) = 0;
  char v45 = 0;
  WebKit::WebsiteDataStore::resolvedContainerCachesWebContentDirectory((WTF::StringImpl **)a3, &v39);
  uint64_t v24 = v39;
  if (!v39) {
    goto LABEL_45;
  }
  uint64_t v25 = *((unsigned int *)v39 + 1);
  if (!v25)
  {
    uint64_t v39 = 0;
LABEL_42:
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
    goto LABEL_45;
  }
  WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v39 + 1), (WebKit::SandboxExtensionImpl *)(v25 | ((unint64_t)((*((_DWORD *)v39 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v42);
  std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v44, (uint64_t)&v42);
  if (v43) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v42);
  }
  uint64_t v24 = v39;
  uint64_t v39 = 0;
  if (v24) {
    goto LABEL_42;
  }
LABEL_45:
  LOBYTE(v42) = 0;
  unsigned __int8 v43 = 0;
  WebKit::WebsiteDataStore::resolvedContainerTemporaryDirectory(a3, &v41);
  uint64_t v27 = v41;
  if (v41)
  {
    uint64_t v28 = *((unsigned int *)v41 + 1);
    if (v28)
    {
      WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v41 + 1), (WebKit::SandboxExtensionImpl *)(v28 | ((unint64_t)((*((_DWORD *)v41 + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v39);
      std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>((uint64_t)&v42, (uint64_t)&v39);
      if (v40) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v39);
      }
    }
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v26);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  *(void *)this = *((void *)a3 + 3);
  *((void *)this + 1) = v8;
  uint64_t v51 = 0;
  *((void *)this + 2) = v9;
  *((void *)this + 3) = v38;
  uint64_t v29 = v48;
  int v47 = 0;
  int v48 = 0;
  *((void *)this + 4) = v16;
  *((void *)this + 5) = v29;
  *((void *)this + 6) = v15;
  *((unsigned char *)this + 56) = WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode((WebKit::WebsiteDataStore *)a3);
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this + 8, (uint64_t *)a2 + 111);
  uint64_t v30 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this + 9, (uint64_t *)a2 + 112);
  unint64_t v46 = 0;
  *((void *)this + 10) = v17;
  *((void *)this + 11) = v19;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = 0;
  if (v50)
  {
    uint64_t v35 = v49;
    uint64_t v49 = 0;
    *((void *)this + 12) = v35;
    *((unsigned char *)this + 104) = 1;
  }
  *((unsigned char *)this + 112) = 0;
  *((unsigned char *)this + 120) = 0;
  if (v45)
  {
    char v36 = v44;
    uint64_t v44 = 0;
    *((void *)this + 14) = v36;
    *((unsigned char *)this + 120) = 1;
  }
  *((unsigned char *)this + 128) = 0;
  *((unsigned char *)this + 136) = 0;
  int v31 = v43;
  if (v43)
  {
    uint64_t v37 = v42;
    __int16 v42 = 0;
    *((void *)this + 16) = v37;
    *((unsigned char *)this + 136) = 1;
  }
  if (a3[265])
  {
    BOOL HaveTrackingPreventionEnabled = a3[265] == 2;
  }
  else if (*(unsigned __int16 *)(*((void *)a3 + 26) + 528) >= 0x100u)
  {
    BOOL HaveTrackingPreventionEnabled = *(_WORD *)(*((void *)a3 + 26) + 528) != 0;
  }
  else
  {
    BOOL HaveTrackingPreventionEnabled = WebKit::doesAppHaveTrackingPreventionEnabled((WebKit *)v30);
    int v31 = v43;
  }
  *((unsigned char *)this + 144) = HaveTrackingPreventionEnabled;
  if (v31) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v42);
  }
  if (v45) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v44);
  }
  if (v50) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v49);
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v46);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v47);
  uint64_t v34 = v48;
  int v48 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v33);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v51);
}

void std::__optional_storage_base<WebKit::SandboxExtensionHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::SandboxExtensionHandle,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v2 = *(const char ***)a2;
      *(void *)a2 = 0;
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)a1, v2);
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)a1);
    *(unsigned char *)(v3 + 8) = 0;
  }
  else
  {
    char v4 = *(const char ***)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 1;
  }
}

uint64_t WebKit::WebsiteDataStore::resolvedDirectories(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 32;
  atomic_compare_exchange_strong_explicit(this + 32, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 32);
  }
  if (!this[192])
  {
    if (!this[34])
    {
      uint64_t result = 475;
      __break(0xC471u);
      return result;
    }
    do
    {
      uint64_t v6 = 0x7FF0000000000000;
      int v7 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)(this + 33), v3, (WTF::TimeWithDynamicClockType *)&v6);
    }
    while (!this[192]);
  }
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return (uint64_t)(this + 40);
}

uint64_t *WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      unsigned int v7 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
      uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
      *a1 = v8 + 16;
      *(_DWORD *)(v8 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      uint64_t v11 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, v9, v10);
      uint64_t v13 = (WTF::StringImpl **)v11;
      v25[0] = v11;
      v25[1] = v12;
      uint64_t v14 = *a2 ? *a2 + 8 * *(unsigned int *)(*a2 - 4) : 0;
      if (v14 != v11)
      {
        do
        {
          uint64_t v24 = v13;
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          int v17 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v12);
          int v19 = 0;
          do
          {
            uint64_t v20 = v17 & v16;
            int v21 = WTF::equal(*(WTF **)(v15 + 8 * v20), 0, v18);
            int v17 = ++v19 + v20;
          }
          while (!v21);
          WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>((WTF::StringImpl **)(v15 + 8 * v20), (WTF::StringImpl *)v13, &v24);
          v25[0] += 8;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v25, v22, v23);
          uint64_t v13 = (WTF::StringImpl **)v25[0];
        }
        while (v25[0] != v14);
      }
    }
  }
  return a1;
}

uint64_t WebKit::WebsiteDataStore::thirdPartyCookieBlockingMode(WebKit::WebsiteDataStore *this)
{
  if (*((unsigned char *)this + 417))
  {
    LOBYTE(v2) = *((unsigned char *)this + 416);
  }
  else
  {
    unint64_t v3 = (unint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key;
      goto LABEL_11;
    while (1)
    {
      unsigned __int16 v4 = WebKit::optionalExperimentalFeatureEnabled(&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, 0x100uLL);
      unint64_t v3 = v4;
      if (v4 > 0xFFu) {
        break;
      }
      __break(1u);
LABEL_11:
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
      *(unsigned char *)(v3 + 3512) = 1;
    }
    if ((_BYTE)v4) {
      __int16 v2 = 259;
    }
    else {
      __int16 v2 = 256;
    }
    *((_WORD *)this + 208) = v2;
  }
  return v2;
}

WTF::StringImpl **WebKit::WebsiteDataStore::resolvedCookieStorageDirectory@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v3 = this[32];
  if (v3) {
    goto LABEL_19;
  }
  unsigned __int16 v4 = this + 32;
  uint64_t v5 = this[3];
  if (((unint64_t)v5 & 0x8000000000000000) != 0 && v5 != (WTF::StringImpl *)-1)
  {
    this = (WTF::StringImpl **)WTF::String::operator=((uint64_t *)this + 32, MEMORY[0x1E4F30980]);
    goto LABEL_18;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v6 = v16;
  uint64_t v14 = v16;
  WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory((WebKit::WebsiteDataStore *)&v14, &v15);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v7);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v15)
  {
    uint64_t v8 = *((void *)v15 + 1);
    unint64_t v9 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v8, v9, &v16);
  uint64_t v11 = v16;
  unsigned int v16 = 0;
  uint64_t v12 = *v4;
  *unsigned __int16 v4 = v11;
  if (v12)
  {
    int v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 != 2) {
      goto LABEL_13;
    }
    WTF::StringImpl::destroy(v12, v10);
    uint64_t v12 = v16;
    unsigned int v16 = 0;
    if (!v12) {
      goto LABEL_14;
    }
    int v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
LABEL_13:
    }
      *(_DWORD *)uint64_t v12 = v13;
  }
LABEL_14:
  this = (WTF::StringImpl **)v15;
  uint64_t v15 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      this = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
LABEL_18:
  unint64_t v3 = *v4;
  if (*v4) {
LABEL_19:
  }
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

void sub_1986CB9DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebsiteDataStore::mediaKeysStorageSalt(atomic_uchar *this)
{
  char v2 = 0;
  unint64_t v3 = (WTF::Lock *)(this + 32);
  atomic_compare_exchange_strong_explicit(this + 32, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 32);
  }
  if (!this[192])
  {
    __break(0xC471u);
    JUMPOUT(0x1986CBAB8);
  }
  uint64_t v4 = *((void *)this + 25);
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(this + 32, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow(v3);
  }
  return v4;
}

WTF::StringImpl **WebKit::WebsiteDataStore::resolvedContainerCachesWebContentDirectory@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4 = this + 29;
  unint64_t v3 = this[29];
  if (v3) {
    goto LABEL_19;
  }
  int v5 = this[3];
  if (((unint64_t)v5 & 0x8000000000000000) != 0 && v5 != (WTF::StringImpl *)-1)
  {
    this = (WTF::StringImpl **)WTF::String::operator=((uint64_t *)this + 29, MEMORY[0x1E4F30980]);
    goto LABEL_18;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v6 = v16;
  uint64_t v14 = v16;
  WebKit::WebsiteDataStore::cacheDirectoryInContainerOrHomeDirectory((WebKit::WebsiteDataStore *)&v14, &v15);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v7);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  if (v15)
  {
    uint64_t v8 = *((void *)v15 + 1);
    unint64_t v9 = *((unsigned int *)v15 + 1) | ((unint64_t)((*((_DWORD *)v15 + 4) >> 2) & 1) << 32);
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0x100000000;
  }
  WebKit::resolveAndCreateReadWriteDirectoryForSandboxExtension(v8, v9, &v16);
  uint64_t v11 = v16;
  unsigned int v16 = 0;
  uint64_t v12 = *v4;
  *uint64_t v4 = v11;
  if (v12)
  {
    int v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 != 2) {
      goto LABEL_13;
    }
    WTF::StringImpl::destroy(v12, v10);
    uint64_t v12 = v16;
    unsigned int v16 = 0;
    if (!v12) {
      goto LABEL_14;
    }
    int v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
LABEL_13:
    }
      *(_DWORD *)uint64_t v12 = v13;
  }
LABEL_14:
  this = (WTF::StringImpl **)v15;
  uint64_t v15 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      this = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
LABEL_18:
  unint64_t v3 = *v4;
  if (*v4) {
LABEL_19:
  }
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

void sub_1986CBC24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::WebsiteDataStore::resolvedContainerTemporaryDirectory@<X0>(void *this@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (_DWORD *)this[31];
  if (v3) {
    goto LABEL_6;
  }
  uint64_t v4 = this;
  WebKit::WebsiteDataStore::defaultResolvedContainerTemporaryDirectory((uint64_t *)&v6);
  unint64_t v3 = v6;
  this = (void *)v4[31];
  v4[31] = v6;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = (void *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
      unint64_t v3 = (_DWORD *)v4[31];
      if (!v3) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    *(_DWORD *)this -= 2;
  }
  if (v3) {
LABEL_6:
  }
    *v3 += 2;
LABEL_7:
  *a2 = v3;
  return this;
}

void API::Data::createWithoutCopying(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WebKit **a5@<X8>)
{
  uint64_t v10 = (WebKit *)API::Object::newObject(0x30uLL, 8);
  *(void *)uint64_t v10 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v10);
  *(void *)uint64_t v10 = &unk_1EE9B5358;
  *((void *)v10 + 2) = a1;
  *((void *)v10 + 3) = a2;
  *((void *)v10 + 4) = a3;
  *((void *)v10 + 5) = a4;
  *a5 = v10;
}

void API::Data::createWithoutCopying(id *a1@<X0>, WebKit **a2@<X8>)
{
  id v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = [*a1 bytes];
    uint64_t v6 = [v4 length];
    id v7 = *a1;
  }
  else
  {
    id v7 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  *a1 = 0;

  API::Data::createWithoutCopying(v5, v6, (uint64_t)API::Data::createWithoutCopying(WTF::RetainPtr<NSData>)::$_0::__invoke, (uint64_t)v7, a2);
}

void sub_1986CC2E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  id v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = v3 << 7;
    uint64_t v6 = (char *)v4 + 104;
    do
    {
      WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6);
      WTF::Vector<WebKit::WKTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 - 16);
      id v7 = (WTF *)*((void *)v6 - 4);
      if (v7)
      {
        *((void *)v6 - 4) = 0;
        *((_DWORD *)v6 - 6) = 0;
        WTF::fastFree(v7, a2);
      }
      v6 += 128;
      v5 -= 128;
    }
    while (v5);
    id v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1986CC764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Block_release(v14);
  CFRelease(v13);
  _Unwind_Resume(a1);
}

void sub_1986CD7D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1986CD9C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

API::WebsitePolicies *API::WebsitePolicies::WebsitePolicies(API::WebsitePolicies *this)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9E0AE0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 83) = 0u;
  *((unsigned char *)this + 104) = 1;
  *((void *)this + 14) = 0;
  *(void *)((char *)this + 118) = 0;
  *((unsigned char *)this + 126) = 1;
  *(_DWORD *)((char *)this + 127) = 0;
  *(_DWORD *)((char *)this + 131) = 16777218;
  *(_WORD *)((char *)this + 135) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((_WORD *)this + 80) = 0;
  char v2 = (WebKit::WebPagePreferencesLockdownModeObserver *)WTF::fastMalloc((WTF *)0x18);
  *((void *)this + 21) = WebKit::WebPagePreferencesLockdownModeObserver::WebPagePreferencesLockdownModeObserver(v2, this);
  return this;
}

WebKit::WebPagePreferencesLockdownModeObserver *WebKit::WebPagePreferencesLockdownModeObserver::WebPagePreferencesLockdownModeObserver(WebKit::WebPagePreferencesLockdownModeObserver *this, API::WebsitePolicies *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9D05E8;
  uint64_t v3 = (atomic_uint **)((char *)a2 + 16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  id v4 = *v3;
  if (*v3) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 2) = v4;
  WebKit::addLockdownModeObserver((BOOL)this);
  return this;
}

void sub_1986CE7D0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(unsigned int **)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::addLockdownModeObserver(BOOL isLockdownModeEnabledBySystemIgnoringCaching)
{
  char v1 = (unsigned int *)isLockdownModeEnabledBySystemIgnoringCaching;
  if (!HIBYTE(WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally))
  {
    isLockdownModeEnabledBySystemIgnoringCaching = WebKit::isLockdownModeEnabledBySystemIgnoringCaching((WebKit *)isLockdownModeEnabledBySystemIgnoringCaching);
    WebKit::cachedLockdownModeEnabledGlobally(void)::cachedLockdownModeEnabledGlobally = isLockdownModeEnabledBySystemIgnoringCaching | 0x100;
  }
  WebKit::lockdownModeObservers((WebKit *)isLockdownModeEnabledBySystemIgnoringCaching);
  return WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::LockdownModeObserver>((uint64_t)&qword_1E93CF750, v1, (uint64_t)v3);
}

uint64_t *WebKit::lockdownModeObservers(WebKit *this)
{
  if ((WTF::isMainRunLoop(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1986CE8B8);
  }
  if ((byte_1E93CF6DB & 1) == 0)
  {
    *(void *)&dword_1E93CF758 = 0;
    qword_1E93CF750 = 0;
    byte_1E93CF6DB = 1;
  }
  return &qword_1E93CF750;
}

unsigned int *WTF::WeakHashSet<WebKit::LockdownModeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::LockdownModeObserver>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_22;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, a2);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *(void *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *(void *)a1;
        if (*(void *)a1) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *(void *)a1;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v8 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_28;
        }
LABEL_26:
        int v19 = v18;
        goto LABEL_27;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  uint64_t v20 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v20, 1u);
  atomic_fetch_add(v20, 1u);
  uint64_t v23 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v23, a3);
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
  }
  if (v20)
  {
    if (atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v21);
    }
  }
  return result;
}

void sub_1986CEAC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10 && atomic_fetch_add((atomic_uint *volatile)a10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a10);
    WTF::fastFree(a10, a2);
  }
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::isLockdownModeEnabledBySystemIgnoringCaching(WebKit *this)
{
  {
    if (HIBYTE(WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting)) {
      return (_BYTE)WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting != 0;
    }
  }
  else
  {
    WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting = 0;
  }
  BOOL result = +[_WKSystemPreferences isCaptivePortalModeEnabled];
  if (result)
  {
    BOOL HasContainer = WebKit::processHasContainer((WebKit *)result);
    if (HasContainer)
    {
      WebKit::pathForProcessContainer((uint64_t *)&v7, (WebKit *)HasContainer);
      if (v7) {
        uint64_t v3 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v3 = &stru_1EEA10550;
      }
      BOOL v5 = +[_WKSystemPreferences isCaptivePortalModeIgnored:v3];
      unsigned int v6 = v7;
      unsigned int v7 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      return !v5;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1986CEBFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1986CECF0(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9D2FC0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t __copy_helper_block_e8_32c106_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSStringEUlP14NSNotificationE_(uint64_t result, uint64_t a2)
{
  char v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = v3;
  return result;
}

uint64_t WebKit::InspectorTargetProxy::identifier@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  char v2 = *(_DWORD **)(this + 40);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

WTF::StringImpl *WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(WebKit::NetworkSession &,WTF::String const&,WebKit::ShouldIncludeLocalhost,WebCore::ResourceLoadStatistics::IsEphemeral)::$_0::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  std::make_unique[abi:sn180100]<WebKit::ResourceLoadStatisticsStore,WebKit::WebResourceLoadStatisticsStore &,WTF::Ref<WTF::SuspendableWorkQueue,WTF::RawPtrTraits<WTF::SuspendableWorkQueue>,WTF::DefaultRefDerefTraits<WTF::SuspendableWorkQueue>> &,WebKit::ShouldIncludeLocalhost const&,WTF::String const&,PAL::SessionID const&>((uint64_t *)&v7, *(void *)a1, (WTF::WorkQueue **)(*(void *)a1 + 24), (char *)(a1 + 16), (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 24));
  char v2 = (WebKit::ResourceLoadStatisticsStore **)(v1 + 32);
  std::unique_ptr<WebKit::ResourceLoadStatisticsStore>::reset[abi:sn180100](v2, v7);
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v7, v3)) {
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v7, v4);
  }
  WebKit::ResourceLoadStatisticsStore::didCreateNetworkProcess((atomic_uchar *volatile **)*v2);
  BOOL result = v7;
  unsigned int v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebKit::ResourceLoadStatisticsStore,WebKit::WebResourceLoadStatisticsStore &,WTF::Ref<WTF::SuspendableWorkQueue,WTF::RawPtrTraits<WTF::SuspendableWorkQueue>,WTF::DefaultRefDerefTraits<WTF::SuspendableWorkQueue>> &,WebKit::ShouldIncludeLocalhost const&,WTF::String const&,PAL::SessionID const&>(uint64_t *a1, uint64_t a2, WTF::WorkQueue **a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12 = WTF::fastMalloc((WTF *)0x2D0);
  uint64_t result = WebKit::ResourceLoadStatisticsStore::ResourceLoadStatisticsStore(v12, a2, *a3, *a4, *a5, *a6);
  *a1 = result;
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::ResourceLoadStatisticsStore(uint64_t a1, uint64_t a2, WTF::WorkQueue *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  WTF::FileSystemImpl::pathByAppendingComponent();
  WebKit::DatabaseUtilities::DatabaseUtilities((void *)a1, (uint64_t *)buf);
  uint64_t v12 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)a1 = &unk_1EE9C7488;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  WTF::WorkQueue::ref(a3);
  *(void *)(a1 + 112) = a3;
  *(void *)(a1 + 120) = &unk_1EE9CE5C0;
  *(_WORD *)(a1 + 128) = 1;
  *(_OWORD *)(a1 + 136) = xmmword_1994F6410;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_1994F6420;
  *(int64x2_t *)(a1 + 184) = vdupq_n_s64(0x4122750000000000uLL);
  *(_OWORD *)(a1 + 200) = xmmword_1994F6430;
  *(void *)(a1 + 216) = 10;
  *(_WORD *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(unsigned char *)(a1 + 264) = 0;
  WTF::StringLiterals::operator"" _str("https://3rdpartytestwebkit.org", &v21);
  MEMORY[0x19972E890](buf, &v21, 0);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)(a1 + 280), (const WTF::URL *)buf);
  uint64_t v14 = *(WTF::StringImpl **)buf;
  *(void *)buf = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  int v15 = v21;
  int v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v13);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 656) = a6;
  *(_DWORD *)(a1 + 664) = 0;
  *(unsigned char *)(a1 + 668) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 684) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  *(void *)(a1 + 700) = 0;
  *(void *)(a1 + 707) = 0;
  *(unsigned char *)(a1 + 715) = a4;
  *(_DWORD *)(a1 + 716) = 0;
  WebKit::ResourceLoadStatisticsStore::openAndUpdateSchemaIfNecessary((WebKit::ResourceLoadStatisticsStore *)a1, v13);
  WebKit::DatabaseUtilities::enableForeignKeys((WebKit::DatabaseUtilities *)a1);
  if ((WebCore::SQLiteDatabase::turnOnIncrementalAutoVacuum((WebCore::SQLiteDatabase *)(a1 + 16)) & 1) == 0)
  {
    int v17 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 656);
      int Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v23 = 2048;
      uint64_t v24 = v18;
      __int16 v25 = 1024;
      int v26 = Error;
      __int16 v27 = 2081;
      uint64_t v28 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, v17, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::ResourceLoadStatisticsStore: failed to turn on auto vacuum", buf, 0x26u);
    }
  }
  WebKit::ResourceLoadStatisticsStore::includeTodayAsOperatingDateIfNecessary((WebKit::ResourceLoadStatisticsStore *)a1);
  if ((byte_1EB359872 & 1) == 0)
  {
    *(void *)&dword_1EB359888 = 0;
    qword_1EB359880 = 0;
    byte_1EB359872 = 1;
  }
  WTF::WeakHashSet<WebKit::ResourceLoadStatisticsStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ResourceLoadStatisticsStore>((uint64_t)buf, (unsigned int *)a1);
  return a1;
}

size_t WTF::StringLiterals::operator"" _str@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  size_t result = strlen(a1);
  if (result == -1)
  {
    *a2 = 0;
  }
  else
  {
    if (result)
    {
      size_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v4 = v5;
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    *a2 = v4;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::openAndUpdateSchemaIfNecessary(WebKit::ResourceLoadStatisticsStore *this, const WTF::String *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 719) = WebKit::DatabaseUtilities::openDatabaseAndCreateSchemaIfNecessary(this, a2);
  WebKit::ResourceLoadStatisticsStore::addMissingTablesIfNecessary(this);
  WebKit::DatabaseUtilities::columnsForTable((uint64_t)this, "ObservedDomains", 16, (uint64_t)&v11);
  if (WebKit::vectorEqualsArray<WTF::String,WTF::ASCIILiteral,12ul>((uint64_t)&v11, (uint64_t)&off_1E5812608)&& WebKit::DatabaseUtilities::addMissingColumnToTable((uint64_t)this, "ObservedDomains", 16, "mostRecentWebPushInteractionTime REAL DEFAULT 0.0 NOT NULL", 59))
  {
    *(void *)buf = "mostRecentWebPushInteractionTime";
    *(void *)&uint8_t buf[8] = 33;
    uint64_t v5 = v13;
    if (v13 == v12)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v11, (uint64_t *)buf);
    }
    else
    {
      uint64_t v9 = v11;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(void *)(v9 + 8 * v5) = v14;
      ++v13;
    }
  }
  if (WebKit::vectorEqualsArray<WTF::String,WTF::ASCIILiteral,13ul>((uint64_t)&v11, (uint64_t)&off_1E58126C8))
  {
    WebKit::ResourceLoadStatisticsStore::migrateDataToPCMDatabaseIfNecessary(this);
    WebKit::DatabaseUtilities::migrateDataToNewTablesIfNecessary(this);
  }
  else
  {
    WebKit::DatabaseUtilities::close(this);
    unsigned int v6 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *((void *)this + 82);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v10;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::openAndUpdateSchemaIfNecessary: failed at scheme check, will create new database", buf, 0x16u);
    }
    WTF::FileSystemImpl::deleteFile((WebKit::ResourceLoadStatisticsStore *)((char *)this + 8), v7);
    *((unsigned char *)this + 719) = WebKit::DatabaseUtilities::openDatabaseAndCreateSchemaIfNecessary(this, v8);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v3);
}

void *WebKit::DatabaseUtilities::DatabaseUtilities(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *a1 = &unk_1EE9C2F38;
  a1[1] = v3;
  uint64_t v4 = (WebCore::SQLiteDatabase *)(a1 + 2);
  WebCore::SQLiteDatabase::SQLiteDatabase((WebCore::SQLiteDatabase *)(a1 + 2));
  WebCore::SQLiteTransaction::SQLiteTransaction((WebCore::SQLiteTransaction *)(a1 + 10), v4);
  return a1;
}

uint64_t WebKit::DatabaseUtilities::openDatabaseAndCreateSchemaIfNecessary(WebKit::DatabaseUtilities *this, const WTF::String *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (WebKit::DatabaseUtilities *)((char *)this + 8);
  int v5 = WTF::FileSystemImpl::fileExists((WebKit::DatabaseUtilities *)((char *)this + 8), a2);
  if (v5) {
    goto LABEL_2;
  }
  WTF::FileSystemImpl::parentPath((uint64_t *)v32, v3, v4);
  char AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)v32, v9);
  int v12 = *(WTF::StringImpl **)v32;
  *(void *)uint64_t v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (AllDirectories)
  {
LABEL_2:
    uint64_t v6 = v5 ^ 1u;
    if (WebCore::SQLiteDatabase::open())
    {
      WebCore::SQLiteDatabase::prepareStatement();
      if (v36 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v32) != 100)
      {
        uint64_t v8 = qword_1EB3582F8;
        if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218243;
          *(void *)&uint8_t buf[4] = this;
          __int16 v28 = 2081;
          uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::DatabaseUtilities *)((char *)this + 16));
          _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::setBusyTimeout failed, error message: %{private}s", buf, 0x16u);
        }
      }
      if ((v5 & 1) == 0 && ((**(uint64_t (***)(WebKit::DatabaseUtilities *))this)(this) & 1) == 0)
      {
        int v19 = qword_1EB3582F8;
        if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::DatabaseUtilities *)((char *)this + 16));
          WTF::String::utf8();
          uint64_t v21 = v26 ? (uint64_t)v26 + 16 : 0;
          *(_DWORD *)buf = 134218498;
          *(void *)&uint8_t buf[4] = this;
          __int16 v28 = 2082;
          uint64_t ErrorMsg = v20;
          __int16 v30 = 2082;
          uint64_t v31 = v21;
          _os_log_error_impl(&dword_1985F2000, v19, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::createSchema failed, error message: %{public}s, database path: %{public}s", buf, 0x20u);
          if (v26)
          {
            if (*(_DWORD *)v26 == 1) {
              WTF::fastFree(v26, v22);
            }
            else {
              --*(_DWORD *)v26;
            }
          }
        }
      }
      if (v36 != -1) {
        (*(&off_1EE9C31A0 + v36))((int)buf, (WebCore::SQLiteStatement *)v32);
      }
    }
    else
    {
      uint64_t v14 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::DatabaseUtilities *)((char *)this + 16));
        WTF::String::utf8();
        uint64_t v16 = *(void *)buf ? *(void *)buf + 16 : 0;
        *(_DWORD *)uint64_t v32 = 134218498;
        *(void *)&v32[4] = this;
        __int16 v33 = 2082;
        uint64_t v34 = v15;
        __int16 v35 = 2082;
        uint64_t v36 = v16;
        _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::open failed, error message: %{public}s, database path: %{public}s", v32, 0x20u);
        uint64_t v18 = *(WTF **)buf;
        *(void *)buf = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1) {
            WTF::fastFree(v18, v17);
          }
          else {
            --*(_DWORD *)v18;
          }
        }
      }
    }
  }
  else
  {
    unsigned int v13 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      uint64_t v23 = *(void *)buf ? *(void *)buf + 16 : 0;
      *(_DWORD *)uint64_t v32 = 134218242;
      *(void *)&v32[4] = this;
      __int16 v33 = 2082;
      uint64_t v34 = v23;
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::open failed, error message: Failed to create directory database path: %{public}s", v32, 0x16u);
      __int16 v25 = *(WTF **)buf;
      *(void *)buf = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          WTF::fastFree(v25, v24);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
    }
    return 0;
  }
  return v6;
}

unsigned int *WebKit::WebPage::updateEditorStateAfterLayoutIfEditabilityChanged(unsigned int *this)
{
  if (this[507] != 2)
  {
    uint64_t v1 = (uint64_t)this;
    if (!*((unsigned char *)this + 948))
    {
      WebCore::Page::checkedFocusController((uint64_t *)&v4, *((WebCore::Page **)this + 6));
      this = (unsigned int *)WebCore::FocusController::focusedOrMainFrame(v4);
      char v2 = this;
      if (this) {
        atomic_fetch_add((atomic_uint *volatile)this + 2, 1u);
      }
      uint64_t v3 = v4;
      uint64_t v4 = 0;
      if (v3)
      {
        if (!*(_DWORD *)v3)
        {
          __break(0xC471u);
          JUMPOUT(0x1986CFA58);
        }
        --*(_DWORD *)v3;
      }
      if (this)
      {
        if (*(_DWORD *)(v1 + 2028) != WebCore::VisibleSelection::hasEditableStyle((WebCore::VisibleSelection *)(*(void *)(*((void *)this + 37) + 3096) + 56))) {
          WebKit::WebPage::scheduleFullEditorStateUpdate((unsigned char *)v1);
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v2 + 2);
      }
    }
  }
  return this;
}

void sub_1986CFB20(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::setInjectedBundleFormClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    void *v3 = &unk_1EEA00850;
  }
  uint64_t result = *(void *)(a1 + 352);
  *(void *)(a1 + 352) = v3;
  if (result)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void WebKit::DatabaseUtilities::currentTableAndIndexQueries(WebKit::DatabaseUtilities *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v5 = (WebKit::DatabaseUtilities *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v24)
  {
    unsigned int v13 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218243;
      uint64_t v29 = this;
      __int16 v30 = 2081;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      uint64_t v14 = "%p - DatabaseUtilities::currentTableAndIndexQueries Unable to prepare statement to fetch schema for the tabl"
            "e, error message: %{private}s";
      goto LABEL_40;
    }
    goto LABEL_28;
  }
  if (WebCore::SQLiteStatement::bindText())
  {
    unsigned int v13 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218243;
      uint64_t v29 = this;
      __int16 v30 = 2081;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      uint64_t v14 = "%p - DatabaseUtilities::currentTableAndIndexQueries Unable to bind statement to fetch schema for the table, "
            "error message: %{private}s";
LABEL_40:
      _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x16u);
    }
LABEL_28:
    *(unsigned char *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    goto LABEL_23;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v23) != 100)
  {
    unsigned int v13 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      *(_DWORD *)buf = 134218243;
      uint64_t v29 = this;
      __int16 v30 = 2081;
      uint64_t ErrorMsg = v15;
      uint64_t v14 = "%p - DatabaseUtilities::currentTableAndIndexQueries error executing statement to fetch table schema, error m"
            "essage: %{private}s";
      goto LABEL_40;
    }
    goto LABEL_28;
  }
  if (v24) {
    goto LABEL_43;
  }
  WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v23);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v32)
  {
    uint64_t v16 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      *(_DWORD *)__int16 v25 = 134218243;
      *(void *)&v25[4] = this;
      __int16 v26 = 2081;
      uint64_t v27 = v20;
      uint64_t v18 = "%p - DatabaseUtilities::currentTableAndIndexQueries Unable to prepare statement to fetch index for the table"
            ", error message: %{private}s";
      goto LABEL_42;
    }
LABEL_35:
    *(unsigned char *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    goto LABEL_18;
  }
  if (WebCore::SQLiteStatement::bindText())
  {
    uint64_t v16 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      *(_DWORD *)__int16 v25 = 134218243;
      *(void *)&v25[4] = this;
      __int16 v26 = 2081;
      uint64_t v27 = v17;
      uint64_t v18 = "%p - DatabaseUtilities::currentTableAndIndexQueries Unable to bind statement to fetch index for the table, e"
            "rror message: %{private}s";
LABEL_42:
      _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, v18, v25, 0x16u);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v25[0] = 0;
  v25[8] = 0;
  if (v32) {
    goto LABEL_43;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)buf) == 100)
  {
    if (!v32)
    {
      WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)buf);
      unsigned int v7 = v21;
      if (!v21) {
        goto LABEL_15;
      }
      if (*((_DWORD *)v21 + 1))
      {
        std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)v25, &v21);
        unsigned int v7 = v21;
        uint64_t v21 = 0;
        if (!v7) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
LABEL_15:
      int v8 = v25[8];
      uint64_t v9 = v22;
      uint64_t v22 = 0;
      *(void *)a2 = v9;
      *(unsigned char *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 0;
      if (v8)
      {
        uint64_t v10 = *(void *)v25;
        *(void *)__int16 v25 = 0;
        *(void *)(a2 + 8) = v10;
        *(unsigned char *)(a2 + 16) = 1;
      }
      goto LABEL_17;
    }
LABEL_43:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  int v19 = v22;
  uint64_t v22 = 0;
  *(void *)a2 = v19;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
LABEL_17:
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25);
LABEL_18:
  if (v32 != -1) {
    (*(&off_1EE9C31A0 + v32))((int)v25, (WebCore::SQLiteStatement *)buf);
  }
  int v12 = v22;
  uint64_t v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
LABEL_23:
  if (v24 != -1) {
    (*(&off_1EE9C31A0 + v24))((int)buf, (WebCore::SQLiteStatement *)v23);
  }
}

uint64_t WebKit::DatabaseUtilities::migrateDataToNewTablesIfNecessary(WebKit::DatabaseUtilities *this)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(void *)this + 32))(this);
  if (result)
  {
    uint64_t v3 = (WebKit::DatabaseUtilities *)((char *)this + 16);
    WebCore::SQLiteTransaction::SQLiteTransaction((WebCore::SQLiteTransaction *)v55, (WebKit::DatabaseUtilities *)((char *)this + 16));
    WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)v55);
    uint64_t v4 = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(void *)this + 40))(this);
    int v5 = &off_1EE9C31A0;
    if (*(_DWORD *)(v4 + 12))
    {
      uint64_t v6 = *(unsigned int *)(v4 + 8);
      if (v6)
      {
        uint64_t v7 = 32 * v6;
        int v8 = *(WTF::StringImpl ***)v4;
        while (!*v8)
        {
          v8 += 4;
          v7 -= 32;
          if (!v7) {
            goto LABEL_7;
          }
        }
      }
      else
      {
        int v8 = *(WTF::StringImpl ***)v4;
      }
      uint64_t v42 = *(void *)v4 + 32 * v6;
      if (v8 != (WTF::StringImpl **)v42)
      {
        unsigned __int8 v43 = *v8;
LABEL_75:
        if (v43) {
          *(_DWORD *)v43 += 2;
        }
        unsigned __int8 v54 = v43;
        uint64_t v44 = *v8;
        if (*v8) {
          *(_DWORD *)v44 += 2;
        }
        uint64_t v53 = v44;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"ALTER TABLE ", 13, (uint64_t *)&v54, (uint64_t)" RENAME TO _", 13, (uint64_t *)&v53, buf);
        WebCore::SQLiteDatabase::prepareStatementSlow();
        unint64_t v46 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2) {
            WTF::StringImpl::destroy(v46, v45);
          }
          else {
            *(_DWORD *)v46 -= 2;
          }
        }
        int v47 = v53;
        uint64_t v53 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2) {
            WTF::StringImpl::destroy(v47, v45);
          }
          else {
            *(_DWORD *)v47 -= 2;
          }
        }
        int v48 = v54;
        unsigned __int8 v54 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2) {
            WTF::StringImpl::destroy(v48, v45);
          }
          else {
            *(_DWORD *)v48 -= 2;
          }
        }
        if (v67 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v63) != 101)
        {
          uint64_t v49 = qword_1EB3582F8;
          if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
          {
            uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebKit::DatabaseUtilities *)((char *)this + 16));
            *(_DWORD *)buf = 134218242;
            *(void *)&uint8_t buf[4] = this;
            __int16 v59 = 2080;
            uint64_t v60 = ErrorMsg;
            _os_log_error_impl(&dword_1985F2000, v49, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::migrateDataToNewTablesIfNecessary failed to rename table, error message: %s", buf, 0x16u);
          }
          WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v55);
          goto LABEL_102;
        }
        if (v67 != -1) {
          (*(&off_1EE9C31A0 + v67))((int)buf, (WebCore::SQLiteStatement *)v63);
        }
        while (1)
        {
          v8 += 4;
          if (v8 == (WTF::StringImpl **)v42) {
            break;
          }
          unsigned __int8 v43 = *v8;
          if (*v8)
          {
            if (v8 != (WTF::StringImpl **)v42) {
              goto LABEL_75;
            }
            break;
          }
        }
      }
    }
LABEL_7:
    if ((**(uint64_t (***)(WebKit::DatabaseUtilities *))this)(this))
    {
      uint64_t v52 = this;
      uint64_t v9 = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(void *)this + 48))(this);
      if (v10)
      {
        uint64_t v11 = (uint64_t *)v9;
        uint64_t v12 = 16 * v10;
        while (1)
        {
          uint64_t v13 = v11[1];
          if (v13)
          {
            if (v13 == 1)
            {
              uint64_t v14 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
              *MEMORY[0x1E4F30960] += 2;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              uint64_t v14 = *(WTF::StringImpl **)buf;
            }
          }
          else
          {
            uint64_t v14 = 0;
          }
          if (MEMORY[0x19972E990](v14, "SubframeUnderTopFrameDomains", 28)
            || MEMORY[0x19972E990](v14, "SubresourceUnderTopFrameDomains", 31)
            || MEMORY[0x19972E990](v14, "SubresourceUniqueRedirectsTo", 28)
            || MEMORY[0x19972E990](v14, "TopFrameLinkDecorationsFrom", 27))
          {
            WebCore::SQLiteDatabase::prepareStatement();
          }
          else
          {
            if (v14) {
              *(_DWORD *)v14 += 4;
            }
            uint64_t v56 = v14;
            int v57 = v14;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"INSERT INTO ", 13, (uint64_t *)&v57, (uint64_t)" SELECT DISTINCT * FROM _", 26, (uint64_t *)&v56, buf);
            WebCore::SQLiteDatabase::prepareStatementSlow();
            uint64_t v16 = *(WTF::StringImpl **)buf;
            *(void *)buf = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2) {
                WTF::StringImpl::destroy(v16, v15);
              }
              else {
                *(_DWORD *)v16 -= 2;
              }
            }
            uint64_t v17 = v56;
            uint64_t v56 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2) {
                WTF::StringImpl::destroy(v17, v15);
              }
              else {
                *(_DWORD *)v17 -= 2;
              }
            }
            uint64_t v18 = v57;
            int v57 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2) {
                WTF::StringImpl::destroy(v18, v15);
              }
              else {
                *(_DWORD *)v18 -= 2;
              }
            }
          }
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v15);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          if (v67 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v63) != 101) {
            break;
          }
          if (v67 != -1) {
            (*(&off_1EE9C31A0 + v67))((int)buf, (WebCore::SQLiteStatement *)v63);
          }
          v11 += 2;
          v12 -= 16;
          if (!v12) {
            goto LABEL_42;
          }
        }
        WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v55);
        uint64_t v33 = qword_1EB3582F8;
        if (!os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        uint64_t v34 = *v11;
        uint64_t v35 = WebCore::SQLiteDatabase::lastErrorMsg(v3);
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v52;
        __int16 v59 = 2080;
        uint64_t v60 = v34;
        __int16 v61 = 2080;
        uint64_t v62 = v35;
        uint64_t v36 = "%p - DatabaseUtilities::migrateDataToNewTablesIfNecessary (table %s) failed to migrate schema, error message: %s";
        uint64_t v37 = v33;
        uint32_t v38 = 32;
LABEL_66:
        _os_log_error_impl(&dword_1985F2000, v37, OS_LOG_TYPE_ERROR, v36, buf, v38);
LABEL_102:
        if (v67 != -1) {
          v5[v67]((int)buf, (WebCore::SQLiteStatement *)v63);
        }
        return MEMORY[0x199733E80](v55);
      }
LABEL_42:
      uint64_t v19 = (*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(void *)this + 48))(this);
      if (v20)
      {
        uint64_t v21 = v19;
        uint64_t v22 = v19 + 16 * v20;
        while (1)
        {
          uint64_t v23 = *(void *)(v21 + 8);
          BOOL v24 = v23 != 0;
          size_t v25 = v23 - 1;
          if (v24) {
            size_t v26 = v25;
          }
          else {
            size_t v26 = 0;
          }
          if (v26 >> 31
            || (uint64_t v27 = v5, v28 = (v26 + 12), __OFADD__(v26, 12))
            || (uint64_t v29 = *(unsigned char **)v21, WTF::tryFastCompactMalloc((WTF *)(v28 + 20)), (v30 = *(void *)buf) == 0))
          {
            __break(0xC471u);
            JUMPOUT(0x1986D0900);
          }
          *(void *)(*(void *)buf + 20) = *(void *)"DROP TABLE _";
          *(_DWORD *)uint64_t v30 = 2;
          *(_DWORD *)(v30 + 4) = v28;
          *(void *)(v30 + 8) = v30 + 20;
          *(_DWORD *)(v30 + 16) = 4;
          *(_DWORD *)(v30 + 28) = 1595950412;
          if (v26)
          {
            uint64_t v31 = (unsigned char *)(v30 + 32);
            if (v26 == 1) {
              *uint64_t v31 = *v29;
            }
            else {
              memcpy(v31, v29, v26);
            }
          }
          WebCore::SQLiteDatabase::prepareStatementSlow();
          if (*(_DWORD *)v30 == 2) {
            WTF::StringImpl::destroy((WTF::StringImpl *)v30, v32);
          }
          else {
            *(_DWORD *)v30 -= 2;
          }
          int v5 = v27;
          if (v67 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v63) != 101) {
            break;
          }
          if (v67 != -1) {
            v27[v67]((int)buf, (WebCore::SQLiteStatement *)v63);
          }
          v21 += 16;
          if (v21 == v22) {
            goto LABEL_62;
          }
        }
        WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v55);
        uint64_t v39 = qword_1EB3582F8;
        if (!os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        uint64_t v40 = WebCore::SQLiteDatabase::lastErrorMsg(v3);
        *(_DWORD *)buf = 134218242;
        *(void *)&uint8_t buf[4] = v52;
        __int16 v59 = 2080;
        uint64_t v60 = v40;
        uint64_t v36 = "%p - DatabaseUtilities::migrateDataToNewTablesIfNecessary failed to drop temporary tables, error message: %s";
        uint64_t v37 = v39;
        uint32_t v38 = 22;
        goto LABEL_66;
      }
LABEL_62:
      if ((*(uint64_t (**)(WebKit::DatabaseUtilities *))(*(void *)v52 + 8))(v52))
      {
        WebCore::SQLiteTransaction::commit((WebCore::SQLiteTransaction *)v55);
        return MEMORY[0x199733E80](v55);
      }
      uint64_t v41 = qword_1EB3582F8;
      if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = WebCore::SQLiteDatabase::lastErrorMsg(v3);
        *(_DWORD *)unint64_t v63 = 134218242;
        uint64_t v64 = v52;
        __int16 v65 = 2080;
        uint64_t v66 = v51;
        _os_log_error_impl(&dword_1985F2000, v41, OS_LOG_TYPE_ERROR, "%p - DatabaseUtilities::migrateDataToNewTablesIfNecessary failed to create unique indices, error message: %s", v63, 0x16u);
      }
    }
    WebCore::SQLiteTransaction::rollback((WebCore::SQLiteTransaction *)v55);
    return MEMORY[0x199733E80](v55);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_iEEEEEEDcSD_DpT0_(int a1, WebCore::SQLiteStatement *this)
{
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>)
{
  v10[0] = a1;
  v10[1] = a2;
  v9[0] = a4;
  v9[1] = a5;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(v10, a3, v9, a6, a7);
  if (!*a7) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = a1[1];
  BOOL v6 = v5 != 0;
  unint64_t v7 = v5 - 1;
  if (!v6) {
    unint64_t v7 = 0;
  }
  uint64_t v15 = *a1;
  if (v7 >> 31) {
    goto LABEL_8;
  }
  int v16 = v7;
  uint64_t v14 = *a2;
  uint64_t v8 = a3[1];
  BOOL v6 = v8 != 0;
  unint64_t v9 = v8 - 1;
  if (!v6) {
    unint64_t v9 = 0;
  }
  uint64_t v12 = *a3;
  if (v9 >> 31)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1986D0A30);
  }
  int v13 = v9;
  uint64_t v11 = *a4;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v15, &v14, (uint64_t)&v12, &v11, a5);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  int v15 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v17 = v24;
        if (v24)
        {
          uint64_t v18 = v24 + 5;
          _DWORD *v24 = 2;
          v17[1] = v15;
          *((void *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a4)
          {
            if (a4 == 1) {
              *uint64_t v18 = a3->i8[0];
            }
            else {
              memcpy(v17 + 5, a3, a4);
            }
          }
          uint64_t v19 = &v18[a4];
          uint64_t v23 = a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v23, v19);
          uint64_t v20 = v23;
          if (v23) {
            uint64_t v20 = *(unsigned int *)(v23 + 4);
          }
          uint64_t v21 = &v19[v20];
          if (a7)
          {
            if (a7 == 1) {
              char *v21 = a6->i8[0];
            }
            else {
              memcpy(&v19[v20], a6, a7);
            }
          }
          BOOL v24 = (_DWORD *)a8;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v24, &v21[a7]);
        }
        goto LABEL_14;
      }
LABEL_17:
      uint64_t v17 = 0;
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v17 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_14;
  }
  if (!result) {
    goto LABEL_18;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_17;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v17 = v24;
  if (v24)
  {
    uint64_t v22 = (char *)(v24 + 5);
    _DWORD *v24 = 2;
    v17[1] = v15;
    *((void *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v22, a3, a4, a5, a6, a7, a8);
  }
LABEL_14:
  *a9 = v17;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2) {
    int v6 = *(_DWORD *)(v5 + 4);
  }
  else {
    int v6 = 0;
  }
  int v7 = *(_DWORD *)(a3 + 8);
  uint64_t v8 = *a4;
  if (*a4) {
    int v9 = *(_DWORD *)(v8 + 4);
  }
  else {
    int v9 = 0;
  }
  if (((v9 | v7) & 0x80000000) == 0)
  {
    BOOL v10 = __OFADD__(v7, v9);
    int v11 = v7 + v9;
    BOOL v12 = v10;
    if ((v6 & 0x80000000) == 0 && !v12)
    {
      int v13 = *(_DWORD *)(result + 8);
      BOOL v10 = __OFADD__(v6, v11);
      int v14 = v6 + v11;
      BOOL v15 = v10;
      if ((v13 & 0x80000000) == 0 && !v15)
      {
        BOOL v10 = __OFADD__(v13, v14);
        uint64_t v16 = (v13 + v14);
        if (!v10)
        {
          if (v5)
          {
            unsigned int v17 = *(_DWORD *)(v5 + 16);
            int v18 = (v17 >> 2) & 1;
            if (!v8 || (v17 & 4) == 0) {
              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v18, *(int8x16_t **)result, *(void *)(result + 8), v5, *(int8x16_t **)a3, *(void *)(a3 + 8), v8, a5);
            }
          }
          else if (!v8)
          {
            int v18 = 1;
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v18, *(int8x16_t **)result, *(void *)(result + 8), v5, *(int8x16_t **)a3, *(void *)(a3 + 8), v8, a5);
          }
          int v18 = (*(unsigned __int8 *)(v8 + 16) >> 2) & 1;
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v18, *(int8x16_t **)result, *(void *)(result + 8), v5, *(int8x16_t **)a3, *(void *)(a3 + 8), v8, a5);
        }
      }
    }
  }
  *a5 = 0;
  return result;
}

char **WebKit::ResourceLoadStatisticsStore::sortedTables(WebKit::ResourceLoadStatisticsStore *this)
{
  return &WebKit::ResourceLoadStatisticsStore::sortedTables(void)::sortedTables;
}

void sub_1986D19B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, char a14)
{
  CFRelease(*(CFTypeRef *)(v14 + 8));
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, v16);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WebKit::WebPreferences *API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(WebKit::WebPreferences **a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    API::PageConfiguration::Data::createWebPreferences(&v4);
    uint64_t result = v4;
    uint64_t v3 = *a1;
    *a1 = v4;
    if (v3)
    {
      CFRelease(*((CFTypeRef *)v3 + 1));
      return *a1;
    }
  }
  return result;
}

void *WebKit::WebPreferences::update(void *this)
{
  uint64_t v1 = this;
  if (*((_DWORD *)this + 26))
  {
    *((unsigned char *)this + 108) = 1;
  }
  else
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 11, &v14);
    uint64_t v2 = v1[11];
    if (v2)
    {
      uint64_t v3 = *(unsigned int *)(v2 - 4);
      uint64_t v4 = v2 + 8 * v3;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v3 = 0;
    }
    int v9 = v1 + 11;
    uint64_t v10 = v4;
    uint64_t v11 = v4;
    uint64_t v12 = v4;
    uint64_t v13 = v2 + 8 * v3;
    this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
    while (v15 != v10)
    {
      uint64_t v7 = *(void *)(*(void *)v15 + 8);
      if (v7) {
        uint64_t v8 = (WebKit::WebPageProxy *)(v7 - 16);
      }
      else {
        uint64_t v8 = 0;
      }
      WebKit::WebPageProxy::preferencesDidChange(v8, v5, v6);
      this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v14);
    }
  }
  return this;
}

void *WebKit::WebPreferences::updateBoolValueForKey(WebKit::WebPreferences *this, const WTF::String **a2, const WTF::StringImpl *a3, char a4)
{
  __int16 v4 = (__int16)a3;
  if ((a4 & 1) == 0) {
    WebKit::WebPreferences::platformUpdateBoolValueForKey((uint64_t)this, a2, (uint64_t)a3);
  }
  {
    uint64_t v7 = (const WTF::StringImpl *)WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key;
  }
  else
  {
    uint64_t v7 = (const WTF::StringImpl *)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WTF::equal(*a2, v7, a3))
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 11, &v24);
    uint64_t v9 = *((void *)this + 11);
    if (v9)
    {
      uint64_t v10 = *(unsigned int *)(v9 - 4);
      uint64_t v11 = v9 + 8 * v10;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v19 = (char *)this + 88;
    uint64_t v20 = v11;
    uint64_t v21 = v11;
    uint64_t v22 = v11;
    uint64_t v23 = v9 + 8 * v10;
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v19);
    uint64_t v15 = v25;
    if (v25 != v20)
    {
      __int16 v16 = v4 | 0x100;
      do
      {
        uint64_t v17 = *(void *)(*(void *)v15 + 8);
        if (v17) {
          uint64_t v18 = v17 - 16;
        }
        else {
          uint64_t v18 = 0;
        }
        *(_WORD *)(*(void *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((uint64_t *)(*(void *)(v18 + 48) + 24))
                             + 48)
                 + 84) = v16;
        uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v24);
        uint64_t v15 = v25;
      }
      while (v25 != v20);
    }
  }
  else
  {
    {
      uint64_t v12 = (const WTF::StringImpl *)WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key;
    }
    else
    {
      uint64_t v12 = (const WTF::StringImpl *)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
      WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::builtInNotificationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    uint64_t v13 = (WebCore::DeprecatedGlobalSettings *)WTF::equal(*a2, v12, v8);
    if (v13) {
      *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared(v13) + 33) = v4;
    }
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferences::platformUpdateBoolValueForKey(uint64_t this, const WTF::String **a2, uint64_t a3)
{
  if (*(void *)(this + 16))
  {
    uint64_t v5 = this;
    int v6 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
    Key = WebKit::makeKey(*(WebKit **)(v5 + 16), *(const WTF::String **)(v5 + 24), *a2, v7);
    return [v6 setBool:a3 forKey:Key];
  }
  return this;
}

void sub_1986D1E14(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

WebKit::WebsiteDataStore *API::PageConfiguration::websiteDataStore(API::PageConfiguration *this)
{
  uint64_t result = (WebKit::WebsiteDataStore *)*((void *)this + 8);
  if (!result)
  {
    WebKit::WebsiteDataStore::defaultDataStore(0, &v4);
    uint64_t result = v4;
    uint64_t v3 = *((void *)this + 8);
    *((void *)this + 8) = v4;
    if (v3)
    {
      CFRelease(*(CFTypeRef *)(v3 + 8));
      return (WebKit::WebsiteDataStore *)*((void *)this + 8);
    }
  }
  return result;
}

WTF *std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(WTF *result, uint64_t *a2)
{
  uint64_t v3 = (uint64_t)result;
  if (*((unsigned __int8 *)result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*((unsigned char *)result + 16))
    {
      uint64_t v4 = *((unsigned int *)result + 3);
      if (v4) {
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(void *)result + 8 * v4));
      }
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v3, a2);
    }
  }
  else if (*((unsigned char *)result + 16))
  {
    uint64_t result = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, a2);
    *(unsigned char *)(v3 + 16) = 0;
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *((_DWORD *)result + 2) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)result + 3) = v5;
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

void *WebKit::WebPreferences::setShouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaint(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAllowMediaContentTypesRequiringHardwareSupportAsFallback(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setShouldDecidePolicyBeforeLoadingQuickLookPreview(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setInlineMediaPlaybackRequiresPlaysInlineAttribute(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setServiceWorkerEntitlementDisabledForTesting(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setMediaContentTypesRequiringHardwareSupport(WebKit::WebPreferences *this, const WTF::StringImpl **a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setStringValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key, a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateStringValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key, (const WTF::String *)a2);
    return WebKit::WebPreferences::update(this);
  }
  return result;
}

uint64_t WebKit::WebPreferencesStore::setStringValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, const WTF::StringImpl **a3)
{
  WebKit::valueForKey<WTF::String>((uint64_t)this, (uint64_t)this + 24, a2, &v15);
  int v6 = v15;
  int v9 = WTF::equal(v15, *a3, v7);
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = *a3;
    if (*a3) {
      *(_DWORD *)v10 += 2;
    }
    uint64_t v13 = v10;
    int v14 = 0;
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this, a2, (const WTF::StringImpl *)&v13, (uint64_t)v12);
    if (v14 != -1) {
      ((void (*)(unsigned char *, const WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v14])(v12, &v13);
    }
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v8);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return v9 ^ 1u;
}

uint64_t WebKit::valueForKey<WTF::String>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, void *a4@<X8>)
{
  uint64_t result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a1, a3, (const WTF::StringImpl *)a3);
  if ((*(void *)a1 + 24 * *(unsigned int *)(a1 + 8) == result || *(_DWORD *)(result + 16))
    && ((uint64_t result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2, a3, v9), *(void *)a2 + 24 * *(unsigned int *)(a2 + 8) == result)|| *(_DWORD *)(result + 16))&& ((v10 = WebKit::WebPreferencesStore::defaults((WebKit::WebPreferencesStore *)result), uint64_t result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v10, a3, v11), *v10 + 24 * *((unsigned int *)v10 + 2) == result)|| *(_DWORD *)(result + 16)))
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = *(_DWORD **)(result + 8);
    if (v12) {
      *v12 += 2;
    }
  }
  *a4 = v12;
  return result;
}

void *WebKit::WebPreferences::setAllowsInlineMediaPlaybackAfterFullscreen(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setIncrementalRenderingSuppressionTimeout(WebKit::WebPreferences *this, double *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setMainContentUserGestureOverrideEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setDeviceOrientationPermissionAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setScrollToTextFragmentIndicatorEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAllowSettingAnyXHRHeaderFromFileURLs(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setRequiresUserGestureForVideoPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setRequiresUserGestureForAudioPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setNeedsStorageAccessFromFileURLsQuirk(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAllowsPictureInPictureMediaPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setScrollToTextFragmentMarkingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAlternateFormControlDesignEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setShouldConvertPositionStyleOnCopy(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setSampledPageTopColorMaxDifference(WebKit::WebPreferences *this, double *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setAllowUniversalAccessFromFileURLs(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setSuppressesIncrementalRendering(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setRequiresUserGestureToLoadVideo(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setLegacyEncryptedMediaAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setInvisibleAutoplayNotPermitted(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAllowsAirPlayForMediaPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setUserInterfaceDirectionPolicy(WebKit::WebPreferences *this, const unsigned int *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setShouldRestrictBaseURLSchemes(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setSampledPageTopColorMinHeight(WebKit::WebPreferences *this, double *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setDoubleValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateDoubleValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

BOOL WebKit::WebPreferencesStore::setDoubleValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, double a3)
{
  double v6 = WebKit::valueForKey<double>((uint64_t)this, (uint64_t)this + 24, a2);
  if (v6 != a3)
  {
    double v9 = a3;
    int v10 = 3;
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this, a2, (const WTF::StringImpl *)&v9, (uint64_t)v8);
    if (v10 != -1) {
      ((void (*)(unsigned char *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v10])(v8, &v9);
    }
  }
  return v6 != a3;
}

uint64_t WebKit::WebPreferences::platformUpdateDoubleValueForKey(uint64_t this, const WTF::String **a2, double a3)
{
  if (*(void *)(this + 16))
  {
    uint64_t v5 = this;
    double v6 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
    Key = WebKit::makeKey(*(WebKit **)(v5 + 16), *(const WTF::String **)(v5 + 24), *a2, v7);
    return [v6 setDouble:Key forKey:a3];
  }
  return this;
}

void *WebKit::WebPreferences::setIncompleteImageBorderEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    double v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAllowTopNavigationToDataURLs(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
    }
    double v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setMediaDataLoadsAutomatically(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    double v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAttachmentWideLayoutEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    double v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAllowsInlineMediaPlayback(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    double v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAttachmentElementEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    double v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setJavaScriptMarkupEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    double v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setUndoManagerAPIEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    double v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(void)::key, v6, 1);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setSystemLayoutDirection(WebKit::WebPreferences *this, const unsigned int *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

BOOL WebKit::WebPreferencesStore::setUInt32ValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2, int a3)
{
  int v6 = WebKit::valueForKey<unsigned int>((uint64_t)this, (uint64_t)this + 24, a2);
  if (v6 != a3)
  {
    int v9 = a3;
    int v10 = 2;
    WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,std::variant<WTF::String,BOOL,unsigned int,double>>((uint64_t)this, a2, (const WTF::StringImpl *)&v9, (uint64_t)v8);
    if (v10 != -1) {
      ((void (*)(unsigned char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEbjdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v10])(v8, &v9);
    }
  }
  return v6 != a3;
}

void *WebKit::WebPreferences::setUsesSingleWebProcess(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setSystemPreviewEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAppHighlightsEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key, v6, 1);
  }
  return result;
}

void *WebKit::WebPreferences::setColorFilterEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPreferences::setDataDetectorTypes(WebKit::WebPreferences *this, const unsigned int *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::setUInt32ValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key, *a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
    }
    WebKit::WebPreferences::platformUpdateUInt32ValueForKey((uint64_t)this, (const WTF::String **)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key, *a2);
    return (uint64_t)WebKit::WebPreferences::update(this);
  }
  return result;
}

void *WebKit::WebPreferences::setHTTPEquivEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setAllowTestOnlyIPC(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key, v6, 0);
  }
  return result;
}

void *WebKit::WebPreferences::setApplePayEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  uint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    int v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, v6, 0);
  }
  return result;
}

void sub_1986D4C64(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void sub_1986D4E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LaunchServicesDatabaseManager::handleEvent(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)xpc_dictionary_get_string(xdict, "message-name");
  if (result)
  {
    uint64_t result = strcmp("update-launch-services-database-message", (const char *)result);
    if (!result)
    {
      xpc_object_t value = xpc_dictionary_get_value(xdict, "launch-services-database");
      int v6 = qword_1EB358050;
      if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 134217984;
        xpc_object_t v8 = value;
        _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "Received Launch Services database %p", (uint8_t *)&v7, 0xCu);
      }
      if (value) {
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F22420], "sharedDatabaseContext"), "observeDatabaseChange4WebKit:", value);
      }
      uint64_t result = WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(a1 + 25));
      atomic_store(1u, (unsigned __int8 *)(a1 + 24));
    }
  }
  return result;
}

void WebKit::LaunchServicesDatabaseObserver::handleEvent(uint64_t a1, void *a2, id a3)
{
  if (object_getClass(a3) == (Class)MEMORY[0x1E4F145A8])
  {
    if (a3 == (id)MEMORY[0x1E4F14528] || a3 == (id)MEMORY[0x1E4F14550])
    {
      char v9 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 40), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
      if (v9) {
        MEMORY[0x19972E8D0](a1 + 40);
      }
      uint64_t v10 = *(unsigned int *)(a1 + 60);
      if (v10)
      {
        uint64_t v11 = 0;
        while (*(void **)(*(void *)(a1 + 48) + 8 * v11) != a2)
        {
          if (v10 == ++v11) {
            goto LABEL_22;
          }
        }
        WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t *)(a1 + 48), v11);
      }
LABEL_22:
      int v12 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 40), (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1)
      {
        WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 40));
      }
    }
  }
  else if (object_getClass(a3) == (Class)MEMORY[0x1E4F14590])
  {
    string = xpc_dictionary_get_string(a3, "message-name");
    if (string)
    {
      if (!strcmp("request-launch-services-database-update-message", string))
      {
        uint64_t v13 = a2;
        if (a2) {
          id v7 = a2;
        }
        WebKit::LaunchServicesDatabaseObserver::startObserving(a1, &v13);
        if (v13) {
      }
        }
    }
  }
}

void sub_1986D5144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

void WebKit::LaunchServicesDatabaseObserver::startObserving(uint64_t a1, void **a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 40), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 40);
  }
  int v6 = (void *)(a1 + 48);
  uint64_t v7 = *(unsigned int *)(a1 + 60);
  if (v7 == *(_DWORD *)(a1 + 56))
  {
    WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>&>((uint64_t)v6, (unint64_t)a2);
  }
  else
  {
    uint64_t v13 = *a2;
    *(void *)(*v6 + 8 * v7) = *a2;
    if (v13)
    {
      id v14 = v13;
      LODWORD(v7) = *(_DWORD *)(a1 + 60);
    }
    *(_DWORD *)(a1 + 60) = v7 + 1;
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  char v9 = (void *)[MEMORY[0x1E4F22420] sharedDatabaseContext];
  uint64_t v10 = *a2;
  if (v10) {
    id v11 = v10;
  }
  int v12 = malloc_type_malloc(0x28uLL, 0x10E0040799C3B1DuLL);
  *int v12 = MEMORY[0x1E4F14398];
  v12[1] = 50331650;
  v12[2] = WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*,NSError *)>::fromCallable<WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0>(WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*,NSError *)#1}::__invoke;
  v12[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*,NSError *)>::fromCallable<WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0>(WebKit::LaunchServicesDatabaseObserver::startObserving(WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>)::$_0)::descriptor;
  v12[4] = v10;
  [v9 getSystemContentDatabaseObject4WebKit:v12];

  _Block_release(v12);
}

void sub_1986D52A0(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986D52D4()
{
  if (v0) {

  }
  JUMPOUT(0x1986D52CCLL);
}

void **WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>&>(uint64_t a1, unint64_t a2)
{
  uint64_t result = (void **)WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *result;
  *(void *)(*(void *)a1 + 8 * v4) = *result;
  if (v5)
  {
    uint64_t result = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = 8 * v5;
        int v8 = (void *)result;
        uint64_t v9 = v4;
        do
        {
          *v8++ = *(void *)v9;
          *(void *)uint64_t v9 = 0;
          uint64_t v9 = (WTF *)((char *)v9 + 8);
          v7 -= 8;
        }
        while (v7);
      }
      if (v4)
      {
        if ((WTF *)result == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::fetchAllDataStoreIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1986D5520(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1986D55F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

const char *WebKit::WebCompiledContentRuleList::spanWithOffsetAndLength(WebKit::WebCompiledContentRuleList *this, const char *a2, unint64_t a3)
{
  unint64_t v3 = *((void *)this + 1);
  if ((unint64_t)&a2[a3] > v3)
  {
    a2 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/WebCompiledContentRuleList.cpp";
    __break(0xC471u);
LABEL_7:
    __break(1u);
    return &a2[v3];
  }
  unint64_t v4 = v3 - (void)a2;
  if (v3 < (unint64_t)a2) {
    goto LABEL_7;
  }
  unint64_t v3 = *((void *)this + 2);
  if (a3 != -1 && v4 < a3) {
    goto LABEL_7;
  }
  return &a2[v3];
}

uint64_t __copy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  int v2 = *(atomic_uint **)(a2 + 40);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __copy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  int v2 = *(atomic_uint **)(a2 + 40);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __copy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  int v2 = *(atomic_uint **)(a2 + 40);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __copy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  int v2 = *(atomic_uint **)(a2 + 40);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 40) = v2;
  return result;
}

void *WebKit::WebPreferences::setShouldIgnoreMetaViewport(WebKit::WebPreferences *this, const BOOL *a2)
{
  unint64_t v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = (void *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key, *(unsigned __int8 *)a2);
  if (result)
  {
    {
      WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
    }
    unint64_t v6 = (const WTF::StringImpl *)*(unsigned __int8 *)a2;
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key, v6, 0);
  }
  return result;
}

uint64_t WebKit::WebPageDebuggable::url@<X0>(atomic_uchar *volatile *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  unint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *unint64_t v4 = &unk_1EE9E3998;
  v4[1] = this;
  void v4[2] = this;
  v4[3] = a2;
  uint64_t v6 = (uint64_t)v4;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::createLoaderStrategy(WebKit::WebPlatformStrategies *this)
{
  uint64_t v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(this);

  return WebKit::WebProcess::webLoaderStrategy(v1);
}

void *WebKit::WebExtensionControllerProxy::getOrCreate@<X0>(WebKit::WebExtensionControllerProxy **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v8[0] = a1;
  v8[1] = (WebKit::WebExtensionControllerProxy **)&v9;
  uint64_t v9 = a2;
  WebKit::WebExtensionControllerProxy::get((uint64_t)*a1, &v7);
  uint64_t v5 = (uint64_t)v7;
  if (v7)
  {
    WebKit::WebExtensionControllerProxy::getOrCreate(WebKit::WebExtensionControllerParameters const&,WebKit::WebPage *)::$_0::operator()(v8, (uint64_t **)v7);
    ++*(_DWORD *)(v5 + 16);
    uint64_t result = WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v5 + 16));
  }
  else
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)0x38);
    WebKit::WebExtensionControllerProxy::WebExtensionControllerProxy(v5, a1);
    uint64_t result = WebKit::WebExtensionControllerProxy::getOrCreate(WebKit::WebExtensionControllerParameters const&,WebKit::WebPage *)::$_0::operator()(v8, (uint64_t **)v5);
  }
  *a3 = v5;
  return result;
}

uint64_t *WebKit::WebExtensionControllerProxy::getOrCreate(WebKit::WebExtensionControllerParameters const&,WebKit::WebPage *)::$_0::operator()(WebKit::WebExtensionControllerProxy ***a1, uint64_t **a2)
{
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  unint64_t v3 = *a1;
  unsigned int v4 = *((_DWORD *)*a1 + 7);
  if (v4)
  {
    uint64_t v9 = v3[2];
    unint64_t v10 = (WebKit::WebExtensionContextProxy *)((char *)v9 + 152 * v4);
    do
    {
      WebKit::WebExtensionContextProxy::getOrCreate(v9, (const WebKit::WebExtensionContextParameters *)a2, *a1[1], &v16);
      unint64_t v11 = (WebKit::WebExtensionContextProxy *)((char *)v9 + 8);
      WTF::URL::protocolHostAndPort((uint64_t *)&v15, v11);
      WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>&>((uint64_t)v14, (uint64_t *)&v17, &v15, &v16);
      uint64_t v13 = v15;
      uint64_t v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v12);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::add(v14, &v18, &v16);
      if (v16) {
        WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v16 + 16));
      }
      uint64_t v9 = (WTF::URL *)((char *)v11 + 144);
    }
    while (v9 != v10);
    unint64_t v3 = *a1;
    uint64_t v5 = v18;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *((unsigned char *)a2 + 32) = *((unsigned char *)v3 + 8);
  uint64_t v6 = a2[5];
  a2[5] = (uint64_t *)v5;
  if (v6) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>::deallocateTable(v6, a2);
  }
  uint64_t result = a2[6];
  a2[6] = v17;
  if (result) {
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContextProxy,WTF::RawPtrTraits<WebKit::WebExtensionContextProxy>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContextProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)result, (WTF::StringImpl *)a2);
  }
  return result;
}

uint64_t WebKit::WebExtensionControllerProxy::WebExtensionControllerProxy(uint64_t a1, void *a2)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = &unk_1EE9E78C8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = *a2;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if ((_MergedGlobals_106 & 1) == 0)
  {
    qword_1EB359E00 = 0;
    _MergedGlobals_106 = 1;
  }
  unint64_t v3 = (WebKit::WebProcess *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebExtensionControllerProxy&>((uint64_t)v6, (uint64_t *)(a1 + 24), a1);
  uint64_t v4 = WebKit::WebProcess::singleton(v3);
  WebKit::AuxiliaryProcess::addMessageReceiver(v4, 0xA8u, *(void *)(a1 + 24), a1);
  return a1;
}

uint64_t WebKit::WebExtensionControllerProxy::get@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((_MergedGlobals_106 & 1) == 0)
  {
    qword_1EB359E00 = 0;
    _MergedGlobals_106 = 1;
  }
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  if (result)
  {
    uint64_t v4 = *(void *)(result + 8);
    if (v4)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4) {
        ++*(_DWORD *)(v4 + 16);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1)
{
  uint64_t v1 = qword_1EB359E00;
  if (!qword_1EB359E00) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(qword_1EB359E00 - 8);
  uint64_t v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1) & v4;
  uint64_t v6 = *(void *)(v1 + 16 * v5);
  if (v6 != a1)
  {
    int v7 = 1;
    while (v6)
    {
      uint64_t v5 = (v5 + v7) & v4;
      uint64_t v6 = *(void *)(v1 + 16 * v5);
      ++v7;
      if (v6 == a1) {
        return v1 + 16 * v5;
      }
    }
    return 0;
  }
  return v1 + 16 * v5;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebExtensionControllerProxy&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v22 = a3;
  uint64_t v5 = qword_1EB359E00;
  if (qword_1EB359E00
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(0),
        (uint64_t v5 = qword_1EB359E00) != 0))
  {
    int v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v6 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  unsigned int v8 = result & v6;
  uint64_t v9 = (void *)(v5 + 16 * (result & v6));
  uint64_t v10 = *v9;
  uint64_t v11 = *a2;
  if (*v9)
  {
    uint64_t v19 = 0;
    int v20 = 1;
    do
    {
      if (v10 == v11)
      {
        if (qword_1EB359E00) {
          uint64_t v21 = *(unsigned int *)(qword_1EB359E00 - 4);
        }
        else {
          uint64_t v21 = 0;
        }
        char v18 = 0;
        uint64_t v17 = qword_1EB359E00 + 16 * v21;
        goto LABEL_12;
      }
      if (v10 == -1) {
        uint64_t v19 = v9;
      }
      unsigned int v8 = (v8 + v20) & v6;
      uint64_t v9 = (void *)(v5 + 16 * v8);
      uint64_t v10 = *v9;
      ++v20;
    }
    while (*v9);
    if (v19)
    {
      void *v19 = 0;
      v19[1] = 0;
      --*(_DWORD *)(qword_1EB359E00 - 16);
      uint64_t v11 = *a2;
      uint64_t v9 = v19;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionControllerProxy&>(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionControllerProxy&)::{lambda(void)#1}>(v9, v11, &v22);
  if (qword_1EB359E00) {
    int v12 = *(_DWORD *)(qword_1EB359E00 - 12) + 1;
  }
  else {
    int v12 = 1;
  }
  *(_DWORD *)(qword_1EB359E00 - 12) = v12;
  uint64_t v13 = qword_1EB359E00;
  if (qword_1EB359E00) {
    int v14 = *(_DWORD *)(qword_1EB359E00 - 12);
  }
  else {
    int v14 = 0;
  }
  uint64_t v15 = (*(_DWORD *)(qword_1EB359E00 - 16) + v14);
  unint64_t v16 = *(unsigned int *)(qword_1EB359E00 - 4);
  if (v16 > 0x400)
  {
    if (v16 > 2 * v15) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v9);
    uint64_t v9 = (void *)result;
    uint64_t v13 = qword_1EB359E00;
    if (qword_1EB359E00) {
      unint64_t v16 = *(unsigned int *)(qword_1EB359E00 - 4);
    }
    else {
      unint64_t v16 = 0;
    }
    goto LABEL_11;
  }
  if (3 * v16 <= 4 * v15) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v17 = v13 + 16 * v16;
  char v18 = 1;
LABEL_12:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v17;
  *(unsigned char *)(a1 + 16) = v18;
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1, void *a2)
{
  uint64_t v4 = qword_1EB359E00;
  if (qword_1EB359E00)
  {
    LODWORD(v5) = *(_DWORD *)(qword_1EB359E00 - 4);
    int v6 = *(_DWORD *)(qword_1EB359E00 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    int v6 = 0;
  }
  int v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359E00 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  _DWORD *v7 = 0;
  *(_DWORD *)(qword_1EB359E00 - 12) = v6;
  uint64_t v9 = 0;
  if (v5)
  {
    uint64_t v11 = (void *)v4;
    uint64_t v5 = v5;
    do
    {
      if (*v11 != -1)
      {
        if (*v11)
        {
          uint64_t v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(v11, v8);
          int v14 = (unsigned int *)v11[1];
          v11[1] = 0;
          if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v14);
            uint64_t v15 = v13;
            WTF::fastFree((WTF *)v14, v8);
            uint64_t v13 = v15;
          }
          if (v11 == a2) {
            uint64_t v9 = v13;
          }
        }
        else
        {
          int v12 = (unsigned int *)v11[1];
          v11[1] = 0;
          if (v12)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v12);
              WTF::fastFree((WTF *)v12, v8);
            }
          }
        }
      }
      v11 += 2;
      --v5;
    }
    while (v5);
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v9;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(void *a1)
{
  if (qword_1EB359E00 && (int v2 = *(_DWORD *)(qword_1EB359E00 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(qword_1EB359E00 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, a1);
}

unsigned int *WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionControllerProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionControllerProxy&>(WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebExtensionControllerProxy&)::{lambda(void)#1}>(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = *a3;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*a3 + 8), *a3);
  int v6 = *(atomic_uint **)(v4 + 8);
  atomic_fetch_add(v6, 1u);
  uint64_t result = (unsigned int *)a1[1];
  a1[1] = v6;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

uint64_t WebKit::InjectedBundle::initialize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6 = *(const char ****)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v6)
  {
    if (!WebKit::SandboxExtension::consumePermanently((WebKit::SandboxExtensionImpl **)v6))
    {
      WTF::String::utf8();
      WTFLogAlways();
      size_t v26 = v33;
      uint64_t v33 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1) {
          WTF::fastFree(v26, v25);
        }
        else {
          --*(_DWORD *)v26;
        }
      }
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
      return 0;
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
  }
  id v7 = objc_alloc(MEMORY[0x1E4F28B50]);
  if (*(void *)(a1 + 16)) {
    unsigned int v8 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unsigned int v8 = &stru_1EEA10550;
  }
  uint64_t v9 = (void *)[v7 initWithPath:v8];
  *(void *)(a1 + 24) = v9;
  if (!v9) {
    goto LABEL_23;
  }
  uint64_t v10 = (void *)[v9 executablePath];
  uint64_t v11 = v10;
  if (v10)
  {
    if (dlopen_preflight((const char *)[v10 fileSystemRepresentation])
      && (int v12 = dlopen((const char *)[v11 fileSystemRepresentation], 265)) != 0)
    {
      uint64_t v13 = v12;
      uint64_t v11 = dlsym(v12, "WKBundleAdditionalClassesForParameterCoder");
      FunctionPointerForCFStringRef Name = (void (*)(uint64_t, uint64_t))dlsym(v13, "WKBundleInitialize");
      if (FunctionPointerForName) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  uint64_t v33 = 0;
  if (([*(id *)(a1 + 24) preflightAndReturnError:&v33] & 1) == 0)
  {
    NSLog(&cfstr_Injectedbundle_3.isa, v33);
    return 0;
  }
  if (([*(id *)(a1 + 24) loadAndReturnError:&v33] & 1) == 0)
  {
    NSLog(&cfstr_Injectedbundle_4.isa, v33);
    return 0;
  }
  FunctionPointerForCFStringRef Name = (void (*)(uint64_t, uint64_t))CFBundleGetFunctionPointerForName((CFBundleRef)[*(id *)(a1 + 24) _cfBundle], @"WKBundleInitialize");
LABEL_11:
  if (v11)
  {
LABEL_12:
    uint64_t v16 = API::Object::wrap(a1, v14);
    uint64_t v18 = API::Object::wrap(*a3, v17);
    ((void (*)(uint64_t, uint64_t))v11)(v16, v18);
    goto LABEL_13;
  }
  uint64_t v27 = CFBundleGetFunctionPointerForName((CFBundleRef)[*(id *)(a1 + 24) _cfBundle], @"WKBundleAdditionalClassesForParameterCoder");
  if (v27)
  {
    uint64_t v11 = v27;
    goto LABEL_12;
  }
LABEL_13:
  if (FunctionPointerForName)
  {
    if (WebKit::InjectedBundle::decodeBundleParameters((WebKit::InjectedBundle *)a1, *(API::Data **)(a2 + 400)))
    {
      uint64_t v20 = API::Object::wrap(a1, v19);
      uint64_t v22 = API::Object::wrap(*a3, v21);
      FunctionPointerForName(v20, v22);
      return 1;
    }
    return 0;
  }
  uint64_t v28 = (objc_class *)[*(id *)(a1 + 24) principalClass];
  if (!v28
    || (uint64_t v29 = v28, ([(objc_class *)v28 conformsToProtocol:&unk_1EEADB580] & 1) == 0)
    || (id v30 = objc_alloc_init(v29)) == 0)
  {
LABEL_23:
    WTFLogAlways();
    return 0;
  }
  uint64_t v31 = v30;
  unsigned int v32 = *(void **)(a1 + 8);
  [v32 _setPrincipalClassInstance:v30];
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v32, "extendClassesForParameterCoder:", objc_msgSend(v31, "additionalClassesForParameterCoder"));
  }
  uint64_t v23 = WebKit::InjectedBundle::decodeBundleParameters((WebKit::InjectedBundle *)a1, *(API::Data **)(a2 + 400));
  if v23 && (objc_opt_respondsToSelector()) {
    [v31 webProcessPlugIn:v32 initializeWithObject:0];
  }
  CFRelease(v31);
  return v23;
}

void sub_1986D63AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  CFRelease(v10);
  _Unwind_Resume(a1);
}

const char ***WTF::RefCounted<WebKit::SandboxExtension>::deref(const char ***result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::SandboxExtension::~SandboxExtension(result);
    return (const char ***)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::SandboxExtension::~SandboxExtension(const char ***this)
{
}

BOOL WebKit::SandboxExtension::consumePermanently(WebKit::SandboxExtensionImpl **this)
{
  uint64_t v1 = (const char ***)(this + 1);
  BOOL v2 = WebKit::SandboxExtensionImpl::consume(this[1]);
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](v1, 0);
  return v2;
}

uint64_t WebKit::InjectedBundle::decodeBundleParameters(WebKit::InjectedBundle *this, API::Data *a2)
{
  if (!a2) {
    return 1;
  }
  WebKit::createUnarchiver(&v9, *((void *)a2 + 2), *((void *)a2 + 3));
  id v3 = v9;
  uint64_t v4 = [v9 decodeObjectOfClasses:WebKit::InjectedBundle::classesForCoder(this) forKey:@"parameters"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v5 = [[WKWebProcessBundleParameters alloc] initWithDictionary:v4];
    int v6 = (const void *)*((void *)this + 6);
    *((void *)this + 6) = v5;
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = 1;
  }
  else
  {
    WTFLogAlways();
    uint64_t v7 = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

void sub_1986D658C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986D67A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void WebKit::InjectedBundle::extendClassesForParameterCoder(WebKit::InjectedBundle *this, API::Array *a2)
{
  unint64_t v4 = *((unsigned int *)a2 + 7);
  uint64_t v5 = (void *)[(id)WebKit::InjectedBundle::classesForCoder(this) mutableCopy];
  if (v4)
  {
    unint64_t v7 = 0;
    while (API::Array::at<API::String>((uint64_t)a2, v7))
    {
      WTF::String::isolatedCopy();
      WTF::String::utf8();
      id v9 = v14;
      int v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      if (v15) {
        uint64_t v10 = (char *)v15 + 16;
      }
      else {
        uint64_t v10 = 0;
      }
      Class v11 = objc_lookUpClass(v10);
      if (v11) {
        [v5 addObject:v11];
      }
      else {
        WTFLogAlways();
      }
      uint64_t v13 = v15;
      uint64_t v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      if (v11)
      {
        if (++v7 < v4) {
          continue;
        }
      }
      goto LABEL_2;
    }
    WTFLogAlways();
  }
LABEL_2:
  if (v5) {
    CFRetain(v5);
  }
  int v6 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = v5;
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1986D69D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986D6A14()
{
}

void sub_1986D6A1C(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 != 1) {
      JUMPOUT(0x1986D6A38);
    }
    WTF::fastFree(a12, a2);
  }
  JUMPOUT(0x1986D6A00);
}

uint64_t API::Array::at<API::String>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 28) <= a2) {
    goto LABEL_8;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 8 * a2);
  if (!result) {
    return result;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16))(result) != 21) {
    return 0;
  }
  if (*(unsigned int *)(a1 + 28) <= a2)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1986D6AD0);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2);
}

uint64_t API::ObjectImpl<(API::Object::Type)21>::type()
{
  return 21;
}

uint64_t WKStringCreateWithCFString(void *a1)
{
  Class Class = object_getClass(a1);
  if (_MergedGlobals_57 != -1) {
    dispatch_once(&_MergedGlobals_57, &__block_literal_global_12);
  }
  if (Class == (Class)qword_1EB358FF0) {
    return *(void *)([(id)CFRetain(a1) _apiObject] + 8);
  }
  MEMORY[0x19972EAD0](&v7, a1);
  API::String::create(&v8);
  if (v8) {
    uint64_t v4 = *((void *)v8 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v7;
  unint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_1986D6BB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *API::String::create@<X0>(WebKit **a1@<X8>)
{
  WTF::String::isolatedCopy();
  API::String::create(&v6, a1);
  uint64_t result = v6;
  int v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1986D6C44(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void API::String::create(void *a1@<X0>, WebKit **a2@<X8>)
{
  uint64_t v4 = (WebKit *)API::Object::newObject(0x18uLL, 21);
  uint64_t v5 = v4;
  if (*a1)
  {
    uint64_t v4 = (WebKit *)WTF::String::isolatedCopy();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    uint64_t v7 = v6;
  }
  *(void *)uint64_t v5 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v4);
  *(void *)uint64_t v5 = &unk_1EE9B53D0;
  *((void *)v5 + 2) = v7;
  *a2 = v5;
}

void sub_1986D6D30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *WKBundleSetClient(void *a1, long long *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 5) = 0u;
  result[7] = 0;
  *uint64_t result = &unk_1EE9F0718;
  if (a2)
  {
    int v5 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 1)
    {
      long long v6 = *a2;
      long long v7 = a2[1];
      long long v8 = a2[2];
      result[7] = *((void *)a2 + 6);
    }
    else
    {
      if (v5 > 0) {
        goto LABEL_4;
      }
      if (v5)
      {
        __break(1u);
        return result;
      }
      long long v6 = *a2;
      long long v7 = a2[1];
      long long v8 = a2[2];
    }
    *(_OWORD *)(result + 3) = v7;
    *(_OWORD *)(result + 5) = v8;
    *(_OWORD *)(result + 1) = v6;
  }
LABEL_4:
  uint64_t v10 = result;
  WebKit::InjectedBundle::setClient(v3, &v10);
  uint64_t result = v10;
  if (v10)
  {
    id v9 = *(uint64_t (**)(void))(*v10 + 8);
    return (void *)v9();
  }
  return result;
}

uint64_t WebKit::InjectedBundle::setClient(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)8);
    void *v3 = &unk_1EE9F08A0;
  }
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v3;
  if (result)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void sub_1986D70C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1986D721C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1986D7368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(void **a1)
{
  uint64_t result = *a1;
  if (!result) {
    return 0;
  }
  uint64_t v2 = *((unsigned int *)result - 1);
  uint64_t v3 = &result[v2];
  if (!*((_DWORD *)result - 3)) {
    return &result[v2];
  }
  if (v2)
  {
    uint64_t v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4) {
        return v3;
      }
    }
  }
  return result;
}

unsigned int *WebKit::VisitedLinkTableController::getOrCreate@<X0>(WebKit *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v15 = a1;
  WebKit::visitedLinkTableControllers(a1);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&qword_1EB359F48, (uint64_t *)&v15, (uint64_t)v14);
  uint64_t v3 = v14[0];
  uint64_t v4 = *(void *)(v14[0] + 8);
  if (v4 && (uint64_t v10 = *(void *)(v4 + 8)) != 0)
  {
    uint64_t result = (unsigned int *)(v10 - 32);
    int v11 = *(_DWORD *)(v10 - 24);
    *(_DWORD *)(v10 - 24) = v11 + 2;
    *a2 = (uint64_t *)(v10 - 32);
    BOOL v12 = __CFADD__(v11, 1);
    int v13 = v11 + 1;
    if (v12) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
    else {
      *(_DWORD *)(v10 - 24) = v13;
    }
  }
  else
  {
    int v5 = (uint64_t *)WTF::fastMalloc((WTF *)0x50);
    long long v6 = WebKit::VisitedLinkTableController::VisitedLinkTableController(v5, (uint64_t)v15);
    *a2 = v6;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v6 + 10, (uint64_t)(v5 + 4));
    long long v8 = (atomic_uint *)v5[5];
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
    uint64_t result = *(unsigned int **)(v3 + 8);
    *(void *)(v3 + 8) = v8;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v7);
      }
    }
  }
  return result;
}

uint64_t *WebKit::visitedLinkTableControllers(WebKit *this)
{
  if ((_MergedGlobals_112 & 1) == 0)
  {
    qword_1EB359F48 = 0;
    _MergedGlobals_112 = 1;
  }
  if ((WTF::isMainRunLoop(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1986D754CLL);
  }
  return &qword_1EB359F48;
}

uint64_t *WebKit::VisitedLinkTableController::VisitedLinkTableController(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (void *)WebCore::VisitedLinkStore::VisitedLinkStore((WebCore::VisitedLinkStore *)a1);
  uint64_t v5 = (uint64_t)(v4 + 4);
  *uint64_t v4 = &unk_1EE9F7FB8;
  v4[4] = &unk_1EE9F7FF0;
  v4[5] = 0;
  v4[6] = a2;
  Only = (WebKit::WebProcess *)WebKit::SharedStringHashTableReadOnly::SharedStringHashTableReadOnly(v4 + 7);
  uint64_t v7 = WebKit::WebProcess::singleton(Only);
  WebKit::AuxiliaryProcess::addMessageReceiver(v7, 0x9Du, a1[6], v5);
  return a1;
}

unsigned int *WebKit::WebUserContentController::getOrCreate@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v12 = a1;
  {
    WebKit::userContentControllers(void)::userContentControllers = 0;
  }
  uint64_t result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(&WebKit::userContentControllers(void)::userContentControllers, &v12, (uint64_t)v11);
  uint64_t v4 = v11[0];
  uint64_t v5 = *(void *)(v11[0] + 8);
  if (v5 && (uint64_t v10 = *(void *)(v5 + 8)) != 0)
  {
    long long v6 = (uint64_t *)(v10 - 48);
    ++*(_DWORD *)(v10 - 40);
  }
  else
  {
    long long v6 = (uint64_t *)WTF::fastMalloc((WTF *)0x68);
    uint64_t v7 = WebKit::WebUserContentController::WebUserContentController(v6, v12);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v7 + 14, (uint64_t)(v6 + 6));
    id v9 = (atomic_uint *)v6[7];
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
    uint64_t result = *(unsigned int **)(v4 + 8);
    *(void *)(v4 + 8) = v9;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  *a2 = v6;
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebUserContentController,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<decltype(nullptr)>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2);
  unsigned int v10 = result & v7;
  int v11 = (void *)(v6 + 16 * (result & v7));
  uint64_t v12 = *v11;
  uint64_t v13 = *a2;
  if (*v11)
  {
    uint64_t v22 = 0;
    int v23 = 1;
    do
    {
      if (v12 == v13)
      {
        uint64_t v24 = *a1;
        if (*a1) {
          uint64_t v25 = *(unsigned int *)(v24 - 4);
        }
        else {
          uint64_t v25 = 0;
        }
        char v21 = 0;
        uint64_t v20 = v24 + 16 * v25;
        goto LABEL_15;
      }
      if (v12 == -1) {
        uint64_t v22 = v11;
      }
      unsigned int v10 = (v10 + v23) & v7;
      int v11 = (void *)(v6 + 16 * v10);
      uint64_t v12 = *v11;
      ++v23;
    }
    while (*v11);
    if (v22)
    {
      *uint64_t v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v13 = *a2;
      int v11 = v22;
    }
  }
  uint64_t result = v11[1];
  *int v11 = v13;
  v11[1] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = WTF::fastFree((WTF *)result, v9);
  }
  uint64_t v14 = *a1;
  if (*a1) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - 12) = v15;
  uint64_t v16 = *a1;
  if (*a1) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18) {
      goto LABEL_14;
    }
LABEL_27:
    uint64_t result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, v11);
    int v11 = (void *)result;
    uint64_t v16 = *a1;
    if (*a1) {
      unint64_t v19 = *(unsigned int *)(v16 - 4);
    }
    else {
      unint64_t v19 = 0;
    }
    goto LABEL_14;
  }
  if (3 * v19 <= 4 * v18) {
    goto LABEL_27;
  }
LABEL_14:
  uint64_t v20 = v16 + 16 * v19;
  char v21 = 1;
LABEL_15:
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v20;
  *(unsigned char *)(a3 + 16) = v21;
  return result;
}

uint64_t WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(void *a1)
{
  unint64_t v1 = *a1 + ~(*a1 << 32);
  unint64_t v2 = 9 * (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) ^ (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) >> 8));
  unint64_t v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    int v15 = (void *)v6;
    uint64_t v16 = v7;
    do
    {
      if (*v15 != -1)
      {
        if (*v15)
        {
          uint64_t v18 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(*a1, v15);
          unint64_t v19 = (unsigned int *)v15[1];
          v15[1] = 0;
          if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v19);
            uint64_t v20 = v18;
            WTF::fastFree((WTF *)v19, v10);
            uint64_t v18 = v20;
          }
          if (v15 == a3) {
            uint64_t v13 = v18;
          }
        }
        else
        {
          int v17 = (unsigned int *)v15[1];
          v15[1] = 0;
          if (v17)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v10);
            }
          }
        }
      }
      v15 += 2;
      --v16;
    }
    while (v16);
    goto LABEL_21;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_21:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WebKit::WebUserContentController::WebUserContentController(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WebCore::UserContentProvider::UserContentProvider((WebCore::UserContentProvider *)a1);
  uint64_t v5 = v4 + 48;
  *(void *)uint64_t v4 = &unk_1EE9F4C70;
  *(void *)(v4 + 48) = &unk_1EE9F4CB8;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  uint64_t v6 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v4);
  WebKit::AuxiliaryProcess::addMessageReceiver(v6, 0xD2u, a1[8], v5);
  return a1;
}

WebKit::WebRemoteObjectRegistry *WebKit::WebRemoteObjectRegistry::WebRemoteObjectRegistry(WebKit::WebRemoteObjectRegistry *this, _WKRemoteObjectRegistry *a2, WebKit::WebPage *a3)
{
  *(void *)WebKit::RemoteObjectRegistry::RemoteObjectRegistry(this, a2) = &unk_1EE9F89D0;
  uint64_t v5 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 6, (uint64_t)a3 + 16);
  uint64_t v6 = (atomic_uint *)*((void *)a3 + 3);
  atomic_fetch_add(v6, 1u);
  *((void *)this + 4) = v6;
  uint64_t v7 = WebKit::WebProcess::singleton((WebKit::WebProcess *)v5);
  WebKit::AuxiliaryProcess::addMessageReceiver(v7, 0x6Au, *((void *)a3 + 5), (uint64_t)this);
  WebKit::WebPage::setRemoteObjectRegistry(a3, this);
  return this;
}

unsigned int *WebKit::WebPage::setRemoteObjectRegistry(WebKit::WebPage *this, WebKit::WebRemoteObjectRegistry *a2)
{
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
    uint64_t v3 = (atomic_uint *)*((void *)a2 + 1);
    if (v3) {
      atomic_fetch_add(v3, 1u);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t result = (unsigned int *)*((void *)this + 264);
  *((void *)this + 264) = v3;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

WebKit::ViewGestureGeometryCollector *WebKit::ViewGestureGeometryCollector::ViewGestureGeometryCollector(WebKit::ViewGestureGeometryCollector *this, WebKit::WebPage *a2)
{
  *(void *)this = &unk_1EE9F8818;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a2;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  uint64_t v3 = WebKit::WebProcess::singleton(this);
  WebKit::AuxiliaryProcess::addMessageReceiver(v3, 0x9Au, *(void *)(*((void *)this + 2) + 40), (uint64_t)this);
  return this;
}

unsigned __int8 *WebKit::AuxiliaryProcess::addMessageReceiver(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a1 + 56), (unsigned __int8 *)v6, a4, &v5);
}

void WebKit::WebSWServerConnection::didReceiveMessage(WebKit::WebSWServerConnection *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int16 *)a3 + 25);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xACE:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::AbortBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAD0:
      uint64_t v18 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v19)
      {
        MEMORY[0x1F4173458](this, v18);
      }
      break;
    case 0xAD1:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAD2:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAD4:
      IPC::handleMessage<Messages::WebSWServerConnection::DidResolveRegistrationPromise,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::ServiceWorkerRegistrationKey const&)>((uint64_t *)a3, this);
      break;
    case 0xAD5:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAD6:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAD7:
      IPC::handleMessage<Messages::WebSWServerConnection::FinishFetchingScriptInServer,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::ServiceWorkerJobDataIdentifier const&,WebCore::ServiceWorkerRegistrationKey const&,WebCore::WorkerFetchResult &&)>((uint64_t *)a3);
      break;
    case 0xAD8:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xADA:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xADB:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xADC:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::GetRegistrations,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xADD:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::MatchBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xADE:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::MatchRegistration,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xADF:
      IPC::handleMessage<Messages::WebSWServerConnection::PostMessageToServiceWorker,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAE0:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v52);
      if (v54)
      {
        IPC::Decoder::decode<WebCore::ServiceWorkerClientData>(a3, v55);
        if (v69
          && (IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)a3, &v27), v28))
        {
          IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v29);
          char v7 = v30;
          if (v30)
          {
            if (!v54 || !v69 || !v28)
            {
              __break(1u);
              goto LABEL_34;
            }
            LOBYTE(v31[0]) = 0;
            int v33 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v31, (uint64_t)v52);
            v34[0] = 0;
            int v35 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v34, (uint64_t)&v53);
            v36[0] = v55[0];
            v36[1] = v55[1];
            __int16 v37 = v56;
            long long v8 = v58;
            LODWORD(v58) = v58 & 0xFFFFFFFE;
            uint64_t v9 = v57;
            unsigned int v10 = v60;
            int v57 = 0;
            long long v39 = v8;
            long long v40 = v59;
            uint64_t v60 = 0;
            uint32_t v38 = v9;
            uint64_t v41 = v10;
            long long v42 = v61;
            long long v43 = v62;
            LODWORD(v61) = v61 & 0xFFFFFFFE;
            long long v46 = v65;
            long long v45 = v64;
            long long v44 = v63;
            uint64_t v11 = v67;
            uint64_t v67 = 0;
            uint64_t v47 = v66;
            v48[0] = v11;
            *(void *)&long long v8 = v68;
            uint64_t v68 = 0;
            v48[1] = v8;
            long long v49 = v27;
            char v7 = 1;
            char v50 = v29;
          }
          else
          {
            LOBYTE(v31[0]) = 0;
          }
          char v51 = v7;
        }
        else
        {
          LOBYTE(v31[0]) = 0;
          char v51 = 0;
        }
        std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v6);
      }
      else
      {
        LOBYTE(v31[0]) = 0;
        char v51 = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52);
      if (v51 || (IPC::Decoder::markInvalid(a3), v51))
      {
        WebKit::WebSWServerConnection::registerServiceWorkerClient((uint64_t)this, (WebCore::SecurityOriginData *)v31, (uint64_t)v36, (uint64_t)&v49, (uint64_t)&v50);
        if (v51)
        {
          uint64_t v13 = v50;
          char v50 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v12);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v12);
          int v15 = v41;
          uint64_t v41 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v14);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t v16 = v38;
          uint32_t v38 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v14);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          if (v35 != -1) {
            ((void (*)(_OWORD *, unsigned char *))off_1EEA0D600[v35])(v55, v34);
          }
          int v35 = -1;
          if (v33 != -1) {
            ((void (*)(_OWORD *, uint64_t *))off_1EEA0D600[v33])(v55, v31);
          }
        }
      }
      break;
    case 0xAE2:
      uint64_t v20 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v21)
      {
        MEMORY[0x1F4173460](this, v20);
      }
      break;
    case 0xAE3:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAE4:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v31, (uint64_t *)a3);
      if (v32) {
        WebKit::WebSWServerConnection::retrieveRecordResponseBody((uint64_t)this, v31[0], v31[1]);
      }
      break;
    case 0xAE5:
      IPC::handleMessage<Messages::WebSWServerConnection::ScheduleJobInServer,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::ServiceWorkerJobData &&)>((uint64_t *)a3, this);
      break;
    case 0xAE6:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xAE7:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAE8:
LABEL_34:
      unsigned __int16 v17 = IPC::Decoder::decode<std::tuple<BOOL>>(a3);
      if (v17 >= 0x100u)
      {
        WebKit::WebSWServerConnection::setThrottleState(this, v17 != 0);
      }
      break;
    case 0xAE9:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAEA:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, a3);
      break;
    case 0xAEB:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAEC:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::TerminateWorkerFromClient,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xAED:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>(a3, (uint64_t)v31);
      if (v34[0]) {
        WebKit::WebSWServerConnection::unregisterServiceWorkerClient((uint64_t)this, v31);
      }
      break;
    case 0xAEE:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xAEF:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)>(a2, (uint64_t *)a3);
      break;
    case 0xAF0:
      IPC::handleMessageAsync<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    default:
      uint64_t v22 = *(void *)(*((void *)this + 10) + 8);
      if (v22) {
        uint64_t v23 = v22 - 48;
      }
      else {
        uint64_t v23 = 0;
      }
      int v24 = *(unsigned __int8 *)(v23 + 337);
      if (v5 != 2767 || v24 == 0)
      {
        if (v5 != 2785 || v24 == 0)
        {
          if (v5 == 2771 && v24)
          {
            IPC::handleMessageAsync<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
          }
          else if (v5 == 2777)
          {
            IPC::handleMessageAsync<Messages::WebSWServerConnection::GetNotifications,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData> &&)> &&)>(a2, a3, this);
          }
        }
        else
        {
          IPC::handleMessageAsync<Messages::WebSWServerConnection::RemoveCookieChangeSubscriptions,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
        }
      }
      else
      {
        IPC::handleMessageAsync<Messages::WebSWServerConnection::AddCookieChangeSubscriptions,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      }
      break;
  }
}

void WebKit::NetworkProcessConnection::didReceiveNetworkProcessConnectionMessage(WebKit::NetworkProcessConnection *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  ++*((_DWORD *)this + 5);
  if (*((_WORD *)a3 + 25) == 307)
  {
    IPC::Decoder::decode<WebCore::ResourceRequest>(a3, (uint64_t)v12);
    if (!v13 || (IPC::Decoder::decode<WebCore::ShareableResourceHandle>(a3, (uint64_t)v14), !v16))
    {
      v8[0] = 0;
      char v11 = 0;
LABEL_7:
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v12);
      if (v11 || (IPC::Decoder::markInvalid(a3), v11))
      {
        WebKit::NetworkProcessConnection::didCacheResource(this);
        if (v11)
        {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v10);
          CFTypeRef v5 = cf;
          CFTypeRef cf = 0;
          if (v5) {
            CFRelease(v5);
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v8);
        }
      }
      goto LABEL_12;
    }
    if (v13)
    {
      std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v8, (uint64_t)v12);
      WTF::MachSendRight::MachSendRight();
      *(_OWORD *)&unsigned char v10[8] = v15;
      char v11 = 1;
      if (v16) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v14);
      }
      goto LABEL_7;
    }
    __break(1u);
LABEL_28:
    IPC::handleMessage<Messages::NetworkProcessConnection::CookiesDeleted,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WTF::String const&,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(a3, (uint64_t)this);
  }
  else
  {
    switch(*((_WORD *)a3 + 25))
    {
      case 0x12D:
        WebKit::NetworkProcessConnection::allCookiesDeleted(this);
        break;
      case 0x12E:
        IPC::handleMessage<Messages::NetworkProcessConnection::BroadcastConsoleMessage,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)>((uint64_t *)a3, (uint64_t)this);
        break;
      case 0x12F:
        IPC::handleMessageAsync<Messages::NetworkProcessConnection::ConnectToRTCDataChannelRemoteSource,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier,WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&)>(a2, (uint64_t *)a3, this);
        break;
      case 0x130:
        unsigned __int16 v7 = IPC::Decoder::decode<std::tuple<WebCore::HTTPCookieAcceptPolicy>>((uint64_t *)a3);
        if (v7 >= 0x100u) {
          WebKit::NetworkProcessConnection::cookieAcceptPolicyChanged((uint64_t)this, v7);
        }
        break;
      case 0x131:
        IPC::handleMessage<Messages::NetworkProcessConnection::CookiesAdded,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WTF::String const&,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(a3, (uint64_t)this);
        break;
      case 0x132:
        goto LABEL_28;
      case 0x134:
        IPC::handleMessage<Messages::NetworkProcessConnection::DidFinishPingLoad,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError &&,WebCore::ResourceResponse &&)>(a3, (uint64_t)this);
        break;
      case 0x135:
        IPC::handleMessage<Messages::NetworkProcessConnection::DidFinishPreconnection,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError &&)>(a3, (uint64_t)this);
        break;
      case 0x136:
        IPC::handleMessage<Messages::NetworkProcessConnection::LoadCancelledDownloadRedirectRequestInFrame,WebKit::NetworkProcessConnection,WebKit::NetworkProcessConnection,void ()(WebCore::ResourceRequest &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ProcessQualified::SupportsObjectIdentifierNullState)1>>,WTF<WebCore::PageIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits,unsigned long long,(WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>)0>)>(a3, (uint64_t)this);
        break;
      case 0x137:
        IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)a3, (uint64_t)v8);
        if (v8[16]) {
          WebKit::NetworkProcessConnection::messagesAvailableForPort((uint64_t)this, (uint64_t)v8);
        }
        break;
      case 0x138:
        unsigned __int16 v6 = IPC::Decoder::decode<std::tuple<BOOL>>(a3);
        if (v6 >= 0x100u) {
          WebKit::NetworkProcessConnection::setOnLineState(this, v6 != 0);
        }
        break;
      case 0x139:
        WebKit::NetworkProcessConnection::updateCachedCookiesEnabled(this);
        break;
      default:
        break;
    }
  }
LABEL_12:
  if (*((_DWORD *)this + 5) == 1) {
    (*(void (**)(WebKit::NetworkProcessConnection *))(*(void *)this + 8))(this);
  }
  else {
    --*((_DWORD *)this + 5);
  }
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      long long v15 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        a1 = v15;
        uint64_t v10 = *v15;
        unint64_t v9 = v15[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_7;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v9 = v1;
    uint64_t v10 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v14 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        a1 = v14;
        uint64_t v2 = *v14;
        unint64_t v1 = v14[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    BOOL v6 = v5 != 0;
    int v7 = 256;
    return v7 | v6;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v2);
  }
  BOOL v6 = 0;
  int v7 = 0;
  return v7 | v6;
}

uint64_t WebKit::NetworkProcessConnection::setOnLineState(WebKit::NetworkProcessConnection *this, uint64_t a2)
{
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(this) + 320);

  return WebKit::WebLoaderStrategy::setOnLineState(v3, a2);
}

uint64_t WebKit::WebLoaderStrategy::setOnLineState(uint64_t this, uint64_t a2)
{
  if (*(unsigned __int8 *)(this + 112) != a2)
  {
    *(unsigned char *)(this + 112) = a2;
    uint64_t v3 = *(unsigned int *)(this + 92);
    if (v3)
    {
      uint64_t v4 = *(uint64_t **)(this + 80);
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4++;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return this;
}

IPC::Encoder **WebKit::WebServiceWorkerProvider::updateThrottleState(WebKit::WebServiceWorkerProvider *this, int a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t result = *(IPC::Encoder ***)(WebKit::WebProcess::singleton(void)::process + 296);
  if (result)
  {
    uint64_t result = (IPC::Encoder **)WebKit::NetworkProcessConnection::serviceWorkerConnection((WebKit::NetworkProcessConnection *)result);
    if ((*((unsigned char *)result + 96) != 0) != a2)
    {
      return WebKit::WebSWClientConnection::updateThrottleState((WebKit::WebSWClientConnection *)result);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::serviceWorkerConnection(WebKit::NetworkProcessConnection *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result)
  {
    uint64_t v3 = (WebKit::WebSWClientConnection *)WTF::fastMalloc((WTF *)0x70);
    uint64_t result = WebKit::WebSWClientConnection::WebSWClientConnection(v3);
    uint64_t v4 = (_DWORD *)*((void *)this + 10);
    *((void *)this + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = result;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        return *((void *)this + 10);
      }
      else
      {
        --v4[2];
      }
    }
  }
  return result;
}

WebKit::WebSWClientConnection *WebKit::WebSWClientConnection::WebSWClientConnection(WebKit::WebSWClientConnection *this)
{
  uint64_t v2 = (WebCore::Process *)WebCore::SWClientConnection::SWClientConnection(this);
  *(void *)uint64_t v2 = &unk_1EE9F3578;
  *((void *)v2 + 3) = &unk_1EE9F36D0;
  *((void *)v2 + 4) = &unk_1EE9F3720;
  *((void *)v2 + 5) = 0;
  *((void *)this + 6) = WebCore::Process::identifier(v2);
  WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::WebSWOriginTable>((void *)this + 7);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((unsigned char *)this + 96) = 1;
  *((void *)this + 13) = 0;
  return this;
}

uint64_t WebKit::GPUProcessConnection::didInitialize(uint64_t a1, unsigned char *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2[40])
  {
    *(unsigned char *)(a1 + 64) = 1;
    uint64_t v4 = qword_1EB358960;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      int v12 = 134217984;
      uint64_t v13 = a1;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessConnection::didInitialize", (uint8_t *)&v12, 0xCu);
    }
    uint64_t v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton((WebKit::WebProcess *)v5);
    int v7 = WebKit::WebProcess::libWebRTCCodecs(v6);
    if (!a2[40] {
      || (*((unsigned char *)v7 + 13std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = a2[36],
    }
          long long v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(v7),
          unint64_t v9 = WebKit::WebProcess::libWebRTCCodecs(v8),
          !a2[40]))
    {
      __break(1u);
    }
    return WebKit::LibWebRTCCodecs::setHasAV1HardwareDecoder((uint64_t)v9, a2[37]);
  }
  else
  {
    uint64_t v11 = qword_1EB358960;
    if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
    {
      int v12 = 134217984;
      uint64_t v13 = a1;
      _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "%p - GPUProcessConnection::didInitialize - failed", (uint8_t *)&v12, 0xCu);
    }
    uint64_t result = IPC::Connection::invalidate(*(void *)(a1 + 32));
    *(unsigned char *)(a1 + 64) = 1;
  }
  return result;
}

WebKit::LibWebRTCCodecs *WebKit::WebProcess::libWebRTCCodecs(WebKit::WebProcess *this)
{
  uint64_t result = (WebKit::LibWebRTCCodecs *)*((void *)this + 43);
  if (!result)
  {
    uint64_t v3 = (WebKit::LibWebRTCCodecs *)WTF::fastMalloc((WTF *)0x90);
    uint64_t result = WebKit::LibWebRTCCodecs::LibWebRTCCodecs(v3);
    uint64_t v5 = *((void *)this + 43);
    *((void *)this + 43) = result;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), v4);
      return (WebKit::LibWebRTCCodecs *)*((void *)this + 43);
    }
  }
  return result;
}

void WebKit::WebProcess::setInjectedBundleParameter(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  {
    unint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  int v7 = *(CFTypeRef **)(WebKit::WebProcess::singleton(void)::process + 136);
  if (v7)
  {
    CFRetain(v7[1]);
    WebKit::InjectedBundle::setBundleParameter((WebKit::InjectedBundle *)v7, a2, a3, a4);
    CFTypeRef v8 = v7[1];
    CFRelease(v8);
  }
}

uint64_t WebKit::WebProcess::singleton(WebKit::WebProcess *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return WebKit::WebProcess::singleton(void)::process;
}

void WebKit::InjectedBundle::setBundleParameter(WebKit::InjectedBundle *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::createUnarchiver(&v13, a3, a4);
  id v6 = v13;
  uint64_t v7 = [v13 decodeObjectOfClasses:WebKit::InjectedBundle::classesForCoder(a1) forKey:@"parameter"];
  uint64_t v8 = v7;
  unint64_t v9 = (WKWebProcessBundleParameters *)*((void *)a1 + 6);
  if (!v9)
  {
    if (v7)
    {
      uint64_t v10 = [WKWebProcessBundleParameters alloc];
      unint64_t v9 = [(WKWebProcessBundleParameters *)v10 initWithDictionary:MEMORY[0x1E4F1CC08]];
      uint64_t v11 = (const void *)*((void *)a1 + 6);
      *((void *)a1 + 6) = v9;
      if (v11)
      {
        CFRelease(v11);
        unint64_t v9 = (WKWebProcessBundleParameters *)*((void *)a1 + 6);
      }
    }
  }
  if (*a2) {
    int v12 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    int v12 = &stru_1EEA10550;
  }
  [(WKWebProcessBundleParameters *)v9 setParameter:v8 forKey:v12];
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_1986D94F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

const void *WebKit::InjectedBundle::classesForCoder(WebKit::InjectedBundle *this)
{
  unint64_t v1 = (const void *)*((void *)this + 7);
  if (!v1)
  {
    unsigned __int16 v17 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v16 = objc_opt_class();
    uint64_t v15 = objc_opt_class();
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    uint64_t v12 = objc_opt_class();
    id v13 = (const void *)objc_msgSend(v17, "setWithObjects:", v16, v15, v4, v5, v6, v7, v8, v9, v10, v11, v12, objc_opt_class(), 0);
    unint64_t v1 = v13;
    if (v13) {
      CFRetain(v13);
    }
    uint64_t v14 = (const void *)*((void *)this + 7);
    *((void *)this + 7) = v1;
    if (v14)
    {
      CFRelease(v14);
      return (const void *)*((void *)this + 7);
    }
  }
  return v1;
}

void WebKit::createUnarchiver(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:a2 length:a3 freeWhenDone:0];
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:v4 error:0];
  *a1 = v5;
  [v5 setDecodingFailurePolicy:0];
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_1986D972C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v3;
  *uint64_t v2 = 0;
  if (v4) {
    CFRelease(v4);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::String,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,WTF::String>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v8);
  char v6 = v9;
  if (!v9)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_4;
  }
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    *(void *)a3 = v7;
    *(_OWORD *)(a3 + 8) = v8;
    char v6 = 1;
LABEL_4:
    *(unsigned char *)(a3 + 24) = v6;
    return result;
  }
  __break(1u);
  return result;
}

WebKit::LibWebRTCCodecs *WebKit::LibWebRTCCodecs::LibWebRTCCodecs(WebKit::LibWebRTCCodecs *this)
{
  *(void *)this = &unk_1EE9B71B0;
  *((void *)this + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = this;
  *(void *)this = &unk_1EE9EF210;
  *((void *)this + 2) = v2;
  *((void *)this + 3) = &unk_1EE9EF268;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  WTF::WorkQueue::create();
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + 12std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return this;
}

uint64_t WebKit::LibWebRTCCodecs::setHasAV1HardwareDecoder(uint64_t this, int a2)
{
  *(unsigned char *)(this + 135) = a2;
  if (a2)
  {
    uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v2 = &unk_1EE9EF850;
    uint64_t v3 = (uint64_t)v2;
    WebCore::Page::forEachPage();
    this = v3;
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return this;
}

void *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::WebSWOriginTable>(void *a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  uint64_t result = WebKit::SharedStringHashTableReadOnly::SharedStringHashTableReadOnly((void *)v2);
  *((unsigned char *)result + 24) = 0;
  *a1 = result;
  return result;
}

void *WebKit::SharedStringHashTableReadOnly::SharedStringHashTableReadOnly(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

WebKit::RemoteObjectRegistry *WebKit::RemoteObjectRegistry::RemoteObjectRegistry(WebKit::RemoteObjectRegistry *this, _WKRemoteObjectRegistry *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_1EE9BE0C0;
  *((void *)this + 2) = 0;
  objc_initWeak((id *)this + 2, a2);
  *((void *)this + 3) = 0;
  return this;
}

void sub_1986D9CA4(_Unwind_Exception *a1, void *a2)
{
  *uint64_t v2 = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_3>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE9E72E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2,std::allocator<WebKit::WebProcess::setUseGPUProcessForMedia(BOOL)::$_2>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE9E7298;
  a2[1] = v2;
  return result;
}

uint64_t WebKit::RemoteLayerTreeContext::createGraphicsLayer@<X0>(unsigned int *a1@<X0>, WebKit::GraphicsLayerCARemote **a2@<X8>)
{
  uint64_t v4 = (WebKit::GraphicsLayerCARemote *)WTF::fastMalloc((WTF *)0x390);
  WebCore::GraphicsLayerCA::GraphicsLayerCA();
  *((void *)v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_1EE9DDB00;
  *((void *)v4 + 76) = &unk_1EE9DE008;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 4, (uint64_t)a1);
  uint64_t v5 = (atomic_uint *)*((void *)a1 + 2);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  *((void *)v4 + 113) = v5;
  uint64_t result = WebKit::RemoteLayerTreeContext::graphicsLayerDidEnterContext((WebKit::RemoteLayerTreeContext *)a1, v4);
  *a2 = v4;
  return result;
}

void sub_1986D9E2C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = v2[113];
  v2[113] = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2 + 112, a2);
  WebCore::GraphicsLayerCA::~GraphicsLayerCA((WebCore::GraphicsLayerCA *)v2);
  WTF::fastFree((WTF *)v2, v5);
  _Unwind_Resume(a1);
}

void sub_1986D9E7C()
{
}

uint64_t WebKit::RemoteLayerTreeContext::graphicsLayerDidEnterContext(WebKit::RemoteLayerTreeContext *this, WebKit::GraphicsLayerCARemote *a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 80);
  uint64_t v3 = *((void *)a2 + 112);
  if (!v3)
  {
    uint64_t v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v3 = 1;
    *(void *)(v3 + 8) = a2;
    char v6 = (unsigned int *)*((void *)a2 + 112);
    *((void *)a2 + 112) = v3;
    if (v6)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v5);
      }
      uint64_t v3 = *((void *)a2 + 112);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  uint64_t v7 = *v2;
  if (*v2
    || (WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::expand(v2),
        (uint64_t v7 = *v2) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  char v9 = 0;
  uint64_t v10 = *(void *)(v3 + 8);
  unint64_t v11 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    unsigned __int16 v17 = (uint64_t *)(v7 + 8 * v16);
    uint64_t result = *v17;
    if (!*v17) {
      break;
    }
    if (result != -1)
    {
      unsigned __int16 v17 = v9;
      if (*(void *)(result + 8) == v10)
      {
        if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v3);
          return WTF::fastFree((WTF *)v3, v9);
        }
        return result;
      }
    }
    unsigned int v14 = i + v16;
    char v9 = v17;
  }
  if (v9)
  {
    *char v9 = 0;
    --*(_DWORD *)(*v2 - 16);
    *char v9 = v3;
  }
  else
  {
    uint64_t *v17 = v3;
  }
  uint64_t v19 = *v2;
  if (*v2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *v2;
  if (*v2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23) {
      return result;
    }
  }
  else if (3 * v24 > 4 * v23)
  {
    return result;
  }

  return WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::expand(v2);
}

void sub_1986DA0A4(_Unwind_Exception *exception_object, void *a2)
{
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (unsigned int **)(v4 + 8 * i);
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v11 != (unsigned int *)-1)
        {
          uint64_t v12 = *a1;
          int v13 = *a1 ? *(_DWORD *)(v12 - 8) : 0;
          unint64_t v14 = ~(*((void *)v11 + 1) << 32) + *((void *)v11 + 1);
          unint64_t v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          unint64_t v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          unsigned int v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~(v16 << 27)));
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = (unsigned int **)(v12 + 8 * v19);
          API::Object *v21 = 0;
          int v22 = *v10;
          *uint64_t v10 = 0;
          API::Object *v21 = v22;
          uint64_t v23 = *v10;
          *uint64_t v10 = 0;
          if (v23)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, v8);
            }
          }
        }
      }
      else
      {
        *uint64_t v10 = 0;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v3);
}

void WebKit::RemoteImageBufferSetProxy::~RemoteImageBufferSetProxy(WebKit::RemoteImageBufferSetProxy *this, void *a2)
{
  WebKit::RemoteImageBufferSetProxy::~RemoteImageBufferSetProxy(this, a2);

  WTF::fastFree(v2, v3);
}

{
  char v3;
  atomic_uchar *v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  unsigned int *v10;

  unsigned int v3 = 0;
  *(void *)this = &unk_1EE9E9780;
  uint64_t v4 = (char *)this + 89;
  int v5 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 89, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0]((char *)this + 89);
  }
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  int v6 = (unsigned int *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(v6, a2);
  }
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v7, a2);
  }
  int v8 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v8) {
    CFRelease(v8);
  }
  char v9 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

void WebKit::RemoteLayerWithRemoteRenderingBackingStore::~RemoteLayerWithRemoteRenderingBackingStore(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, void *a2)
{
  WebKit::RemoteLayerWithRemoteRenderingBackingStore::~RemoteLayerWithRemoteRenderingBackingStore(this, a2);

  WTF::fastFree(v2, v3);
}

{
  atomic_uchar *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(void *)this = &unk_1EE9C0158;
  unsigned int v3 = (atomic_uchar *)*((void *)this + 40);
  if (v3) {
    WebKit::RemoteImageBufferSetProxy::close(v3);
  }
  if (*((unsigned char *)this + 448))
  {
    uint64_t v4 = *((unsigned int *)this + 110);
    if (v4 != -1) {
      off_1EE9C0238[v4]((int)&v6, (WebKit::RemoteLayerWithRemoteRenderingBackingStore *)((char *)this + 376));
    }
    *((_DWORD *)this + 11std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = -1;
  }
  int v5 = *((void *)this + 40);
  *((void *)this + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 16), a2);
  }
  WebKit::RemoteLayerBackingStore::~RemoteLayerBackingStore(this, a2);
}

atomic_uchar *WebKit::RemoteImageBufferSetProxy::close(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  unsigned int v3 = this + 89;
  atomic_compare_exchange_strong_explicit(this + 89, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this + 89);
  }
  v1[113] = 1;
  if (!v1[112])
  {
    this = (atomic_uchar *)*((void *)v1 + 13);
    if (this)
    {
      IPC::StreamClientConnection::removeWorkQueueMessageReceiver((uint64_t)this, 0x57u, *((void *)v1 + 3));
      this = (atomic_uchar *)*((void *)v1 + 13);
      *((void *)v1 + 13) = 0;
      if (this) {
        this = (atomic_uchar *)WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)this, v4);
      }
    }
  }
  uint64_t v5 = *((void *)v1 + 4);
  if (v5)
  {
    this = *(atomic_uchar **)(v5 + 8);
    if (this) {
      this = (atomic_uchar *)WebKit::RemoteRenderingBackendProxy::releaseRemoteImageBufferSet((WebKit::RemoteRenderingBackendProxy *)this, (WebKit::RemoteImageBufferSetProxy *)v1);
    }
  }
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return this;
}

void *WebKit::RemoteRenderingBackendProxy::releaseRemoteImageBufferSet(WebKit::RemoteRenderingBackendProxy *this, WebKit::RemoteImageBufferSetProxy *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 216);
  char v9 = (uint64_t *)*((void *)a2 + 3);
  uint64_t result = (void *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>((uint64_t *)this + 27, &v9);
  uint64_t v6 = *((void *)this + 27);
  if (v6)
  {
    uint64_t v7 = (void *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    if (v7 == result) {
      goto LABEL_5;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_5;
    }
    uint64_t v7 = 0;
  }
  if (v7 != result) {
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v4, result);
  }
LABEL_5:
  if (*((void *)this + 6))
  {
    uint64_t v8 = *((void *)a2 + 3);
    char v9 = &v8;
    return (void *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(this, &v9, *((void *)this + 8));
  }
  return result;
}

void IPC::Connection::takeAsyncReplyHandler(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v6 = a1 + 26;
  os_unfair_lock_lock(a1 + 26);
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *a3 = 0;
  }
  else
  {
    uint64_t v7 = (uint64_t *)&a1[74];
    uint64_t v8 = (void *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(v7, &v9);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::take(v7, v8, a3);
  }
  os_unfair_lock_unlock(v6);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = *a2 + ~(*a2 << 32);
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 == *a2) {
    return v2 + 16 * v7;
  }
  int v10 = 1;
  while (v8)
  {
    uint64_t v7 = (v7 + v10) & v3;
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    ++v10;
    if (v8 == *a2) {
      return v2 + 16 * v7;
    }
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unsigned int v3 = (void *)*a1;
  if (*a1) {
    v3 += 2 * *((unsigned int *)v3 - 1);
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    int v5 = (void *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    int v5 = 0;
  }
  if (v5 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
  return a1;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection(a1, &v40);
  unsigned int v7 = v40;
  if (!v40) {
    return 1;
  }
  double v8 = *((double *)v40 + 15);
  double v9 = INFINITY;
  if (fabs(v8) != INFINITY)
  {
    WTF::ApproximateTime::now(v6);
    double v9 = v8 + v10;
  }
  if (*((void *)v7 + 7) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
    if (!buf[16]) {
      goto LABEL_62;
    }
    uint64_t v27 = *(void *)buf;
    unint64_t v26 = *(void *)&buf[8];
    unint64_t v28 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v29 = v28 - *(void *)buf;
    if (v28 >= *(void *)buf)
    {
      unint64_t v30 = v29 + 2;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v30 <= *(void *)&buf[8])
      {
        *(_WORD *)(*(void *)buf + v29) = 2871;
        goto LABEL_40;
      }
      unint64_t v26 = 0;
    }
    unint64_t v30 = 0;
LABEL_40:
    char v32 = (void *)((v27 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v32 >= v27 + v30)
    {
      unint64_t v30 = (unint64_t)v32 - v27 + 8;
      if ((unint64_t)v32 - v27 > 0xFFFFFFFFFFFFFFF7 || v30 > v26) {
        goto LABEL_65;
      }
      *char v32 = a3;
    }
    if (v26)
    {
      unint64_t v34 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v35 = *((void *)v7 + 8);
      if (v34 + 16 >= v35) {
        unint64_t v34 = 0;
      }
      if (v30 <= 0x10) {
        unint64_t v30 = 16;
      }
      unint64_t v36 = v34 + v30;
      if (v35 <= v36) {
        unint64_t v36 = 0;
      }
      *((void *)v7 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v36;
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v36) == 0x80000000);
      *((void *)v7 + 7) = a3;
      goto LABEL_5;
    }
LABEL_65:
    uint64_t v25 = 17;
    goto LABEL_57;
  }
LABEL_5:
  uint64_t result = IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 16), buf, v9);
  if (!buf[16])
  {
LABEL_62:
    uint64_t v25 = 15;
    goto LABEL_57;
  }
  uint64_t v14 = *(void *)buf;
  unint64_t v13 = *(void *)&buf[8];
  unint64_t v15 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v16 = v15 - *(void *)buf;
  if (v15 >= *(void *)buf)
  {
    unint64_t v17 = v16 + 2;
    if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v16) = 1345;
      goto LABEL_12;
    }
    unint64_t v13 = 0;
  }
  unint64_t v17 = 0;
LABEL_12:
  unsigned int v19 = (void *)((v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v19 >= v14 + v17)
  {
    unint64_t v17 = (unint64_t)v19 - v14 + 8;
    if ((unint64_t)v19 - v14 > 0xFFFFFFFFFFFFFFF7 || v17 > v13) {
      goto LABEL_55;
    }
    void *v19 = **a2;
  }
  if (v13)
  {
    uint64_t v21 = *((void *)v7 + 9);
    unint64_t v22 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v23 = *((void *)v7 + 8);
    if (v22 + 16 >= v23) {
      unint64_t v22 = 0;
    }
    if (v17 <= 0x10) {
      unint64_t v17 = 16;
    }
    unint64_t v24 = v22 + v17;
    if (v23 <= v24) {
      unint64_t v24 = 0;
    }
    *((void *)v7 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v24;
    if (atomic_exchange((atomic_ullong *volatile)(*(void *)(v21 + 16) + 128), v24) == 0x80000000 || v7[29])
    {
      if (*((unsigned char *)v7 + 104)) {
        MEMORY[0x1997420B0](v7[23]);
      }
      v7[29] = 0;
    }
    uint64_t v25 = 0;
    goto LABEL_28;
  }
LABEL_55:
  if (buf[16])
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)v7 + 1);
    uint64_t v25 = IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseRemoteImageBufferSet>((uint64_t)v41, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41);
    if (!v25)
    {
LABEL_28:
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v12);
      return v25;
    }
LABEL_57:
    __int16 v37 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = *((void *)a1 + 8);
      long long v39 = IPC::errorAsString();
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = "RemoteRenderingBackend_ReleaseRemoteImageBufferSet";
      __int16 v43 = 2082;
      long long v44 = v39;
      _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void WebKit::RemoteLayerBackingStore::~RemoteLayerBackingStore(WebKit::RemoteLayerBackingStore *this, void *a2)
{
  *(void *)this = &unk_1EE9BFCC8;
  uint64_t v3 = *(void *)(*((void *)this + 2) + 832);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 88);
      if (v5) {
        (*(void (**)(uint64_t, WebKit::RemoteLayerBackingStore *))(*(void *)v5 + 24))(v5, this);
      }
    }
  }
  uint64_t v6 = (WTF *)*((void *)this + 27);
  if ((WebKit::RemoteLayerBackingStore *)((char *)this + 232) != v6 && v6 != 0)
  {
    *((void *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v6, a2);
  }
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 200, a2);
  if (*((unsigned char *)this + 176))
  {
    uint64_t v8 = *((unsigned int *)this + 42);
    if (v8 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v8]((int)&v11, (WebKit::RemoteLayerBackingStore *)((char *)this + 104));
    }
    *((_DWORD *)this + 42) = -1;
  }
  WebCore::Region::~Region((WebKit::RemoteLayerBackingStore *)((char *)this + 56));
  double v10 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v10) {
    CFRelease(v10);
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v9);
}

void sub_1986DAD50(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v14 = *(WTF **)(v12 + 216);
  if ((WTF *)(v12 + 232) != v14 && v14)
  {
    *(void *)(v12 + 216) = 0;
    *(_DWORD *)(v12 + 224) = 0;
    WTF::fastFree(v14, a2);
  }
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 + 200, a2);
  if (*(unsigned char *)(v12 + 176))
  {
    uint64_t v15 = *(unsigned int *)(v12 + 168);
    if (v15 != -1) {
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v15]((int)&a12, (WTF::MachSendRight *)(v12 + 104));
    }
    *(_DWORD *)(v12 + 168) = -1;
  }
  WebCore::Region::~Region((WebCore::Region *)(v12 + 56));
  unint64_t v17 = *(const void **)(v12 + 40);
  *(void *)(v12 + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  if (v17) {
    CFRelease(v17);
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v12 + 8), v16);
  _Unwind_Resume(a1);
}

unsigned int **WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  if (*a1)
  {
    *((void *)*a1 + 1) = 0;
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int *WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::RemoteLayerBackingStore>(unsigned int *result, void *a2)
{
  uint64_t v3 = result;
  unsigned int v4 = result[3];
  unsigned int v5 = result[2] + 1;
  result[2] = v5;
  if (v5 > v4)
  {
    uint64_t v6 = *(void *)result;
    if (*(void *)result)
    {
      uint64_t v7 = *(unsigned int *)(v6 - 4);
      if (!v7) {
        goto LABEL_15;
      }
      int v8 = 0;
      uint64_t v9 = v7 - 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t result = *(unsigned int **)(v6 + 8 * v9);
        if ((unint64_t)result + 1 >= 2 && !*((void *)result + 1))
        {
          *(void *)(v6 + 8 * v9) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, result);
            uint64_t v19 = v9;
            uint64_t v20 = v6;
            int v18 = v8;
            uint64_t v21 = v9;
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
            uint64_t v6 = v20;
            uint64_t v10 = v21;
            uint64_t v9 = v19;
            int v8 = v18;
          }
          *(void *)(v6 + 8 * v1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = -1;
          ++v8;
        }
        --v9;
      }
      while (v10);
      uint64_t v6 = *(void *)v3;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        uint64_t v16 = *(void *)v3;
        if (*(void *)v3) {
          int v17 = *(_DWORD *)(v16 - 12);
        }
        else {
          int v17 = 0;
        }
        *(_DWORD *)(v16 - 12) = v17 - v8;
        uint64_t v6 = *(void *)v3;
      }
      if (v6)
      {
        unsigned int v11 = *(_DWORD *)(v6 - 4);
        if (v11 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v11)
        {
          uint64_t result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)v3);
          uint64_t v6 = *(void *)v3;
          void v3[2] = 0;
          if (!v6) {
            goto LABEL_19;
          }
LABEL_16:
          LODWORD(v6) = *(_DWORD *)(v6 - 12);
          int v13 = 0x7FFFFFFF;
          if (v6 >= 0x7FFFFFFF) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
LABEL_15:
        void v3[2] = 0;
        goto LABEL_16;
      }
    }
    LODWORD(v6) = 0;
    void v3[2] = 0;
LABEL_19:
    int v13 = v6;
LABEL_20:
    v3[3] = 2 * v13;
  }
  uint64_t v14 = a2[1];
  if (v14 && *(void *)(v14 + 8))
  {
    uint64_t v22 = a2[1];
    uint64_t result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)v3, &v22);
    if (*(void *)v3)
    {
      uint64_t v15 = *(void *)v3 + 8 * *(unsigned int *)(*(void *)v3 - 4);
      if ((unsigned int *)v15 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v15 = 0;
    }
    if ((unsigned int *)v15 != result) {
      return (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v3, (unsigned int **)result);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDestroyed(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::RemoteLayerBackingStore>((unsigned int *)this + 6, a2);

  return WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::RemoteLayerBackingStore>((unsigned int *)this + 10, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void sub_1986DB1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder **IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasAV1HardwareDecoder>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasAV1HardwareDecoder>(a1, a2, v4);
}

void WebKit::LayerHostingContext::createForExternalHostingProcess(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)(v4 + 8) = 0;
  int v5 = (const void **)(v4 + 8);
  *(void *)(v4 + 16) = 0;
  *a2 = v4;
  uint64_t v6 = (void *)MEMORY[0x1E4F39E90];
  *(unsigned char *)uint64_t v4 = 1;
  v17[0] = *v6;
  uint64_t v7 = [NSNumber numberWithBool:*a1];
  uint64_t v8 = *MEMORY[0x1E4F39E80];
  v18[0] = v7;
  v18[1] = MEMORY[0x1E4F1CC38];
  uint64_t v9 = *MEMORY[0x1E4F39E58];
  v17[1] = v8;
  v17[2] = v9;
  void v18[2] = &unk_1EEA52FF0;
  uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:3];
  if (a1[1])
  {
    unsigned int v11 = (const void *)[(id)getBELayerHierarchyClass() layerHierarchyWithOptions:v10 error:0];
    uint64_t v12 = v11;
    if (v11) {
      CFRetain(v11);
    }
    int v13 = *(const void **)(v4 + 16);
    *(void *)(v4 + 16) = v12;
    if (v13) {
      CFRelease(v13);
    }
  }
  else
  {
    uint64_t v14 = (const void *)[MEMORY[0x1E4F39B58] remoteContextWithOptions:v10];
    uint64_t v15 = v14;
    if (v14) {
      CFRetain(v14);
    }
    uint64_t v16 = *v5;
    *int v5 = v15;
    if (v16) {
      CFRelease(v16);
    }
    *(_DWORD *)(v4 + 4) = WebKit::LayerHostingContext::contextID((WebKit::LayerHostingContext *)v4);
  }
}

void sub_1986DB3D8(_Unwind_Exception *a1)
{
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

id *WebKit::GPUConnectionToWebProcess::createVisibilityPropagationContextForPage(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  buf[0] = a4;
  buf[1] = 0;
  WebKit::LayerHostingContext::createForExternalHostingProcess(buf, (uint64_t *)&v39);
  uint64_t v7 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = WebKit::LayerHostingContext::contextID(v39);
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = a2;
    __int16 v43 = 2048;
    uint64_t v44 = a3;
    __int16 v45 = 1024;
    int v46 = v8;
    _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "GPUConnectionToWebProcess::createVisibilityPropagationContextForPage: pageProxyID=%llu, webPageID=%llu, contextID=%u", buf, 0x1Cu);
  }
  uint64_t v9 = *(void **)(a1 + 80);
  int v38 = WebKit::LayerHostingContext::contextID(v39);
  uint64_t v10 = v9[3];
  v9 += 3;
  uint64_t v11 = (*(uint64_t (**)(void *))(v10 + 56))(v9);
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 60;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 7std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  *(void *)buf = v12;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v41);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v12, &v40);
  IPC::Encoder::operator<<<int>(v12, &v38);
  (*(void (**)(void *, unsigned char *, void))(*v9 + 32))(v9, buf, 0);
  uint64_t v14 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v36, v37);
  }
  uint64_t v15 = (uint64_t *)(a1 + 328);
  uint64_t v17 = v40;
  uint64_t v16 = v41;
  uint64_t v18 = *(void *)(a1 + 328);
  if (v18
    || (WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand((uint64_t *)(a1 + 328)),
        (uint64_t v18 = *v15) != 0))
  {
    int v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    int v19 = 0;
  }
  unsigned int v20 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(v16, v17) & v19;
  uint64_t v21 = (id **)(v18 + 24 * v20);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  if (*(_OWORD *)v21 == 0)
  {
LABEL_17:
    API::Object *v21 = (id *)v16;
    v21[1] = (id *)v17;
    unint64_t v26 = (id *)v39;
    long long v39 = 0;
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v21 + 2, v26);
    uint64_t v27 = *v15;
    if (*v15) {
      int v28 = *(_DWORD *)(v27 - 12) + 1;
    }
    else {
      int v28 = 1;
    }
    *(_DWORD *)(v27 - 12) = v28;
    uint64_t v29 = *v15;
    if (*v15) {
      int v30 = *(_DWORD *)(v29 - 12);
    }
    else {
      int v30 = 0;
    }
    uint64_t v31 = (*(_DWORD *)(v29 - 16) + v30);
    unint64_t v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 > 2 * v31) {
        goto LABEL_26;
      }
    }
    else if (3 * v32 > 4 * v31)
    {
      goto LABEL_26;
    }
    WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(v15);
    goto LABEL_26;
  }
  unint64_t v24 = 0;
  int v25 = 1;
  while (v22 != (id *)v16 || v23 != (id *)v17)
  {
    if (v22 == (id *)-1) {
      unint64_t v24 = v21;
    }
    unsigned int v20 = (v20 + v25) & v19;
    uint64_t v21 = (id **)(v18 + 24 * v20);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    ++v25;
    if (*(_OWORD *)v21 == 0)
    {
      if (v24)
      {
        _DWORD *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        --*(_DWORD *)(*v15 - 16);
        uint64_t v21 = v24;
      }
      goto LABEL_17;
    }
  }
LABEL_26:
  uint64_t result = (id *)v39;
  long long v39 = 0;
  if (result)
  {
    WebKit::LayerHostingContext::~LayerHostingContext(result);
    return (id *)WTF::fastFree(v34, v35);
  }
  return result;
}

uint64_t WebKit::LayerHostingContext::contextID(WebKit::LayerHostingContext *this)
{
  WebKit::LayerHostingContext::xpcRepresentation(this, &xdict);
  xpc_object_t v2 = xdict;
  if (xdict)
  {
    uint64_t uint64 = xpc_dictionary_get_uint64(xdict, "cid");

    return uint64;
  }
  else
  {
    int v5 = (void *)*((void *)this + 1);
    return [v5 contextId];
  }
}

void sub_1986DB77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::LayerHostingContext::xpcRepresentation@<X0>(WebKit::LayerHostingContext *this@<X0>, void *a2@<X8>)
{
  id result = (id)*((void *)this + 2);
  if (result)
  {
    id result = (id)objc_msgSend((id)objc_msgSend(result, "handle"), "createXPCRepresentation");
    *a2 = result;
    if (result)
    {
      return result;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::AuxiliaryProcess::messageSenderDestinationID(WebKit::AuxiliaryProcess *this)
{
  return 0;
}

id *std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](id **a1, id *a2)
{
  id result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::LayerHostingContext::~LayerHostingContext(result);
    return (id *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    do
    {
      uint64_t v11 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v12 = *v11;
      if (*v11 != -1)
      {
        uint64_t v13 = v11[1];
        if (v12 | v13)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          int v16 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(v12, v13);
          int v17 = 0;
          do
          {
            unsigned int v18 = v16 & v15;
            int v19 = (_OWORD *)(v14 + 24 * (v16 & v15));
            int v16 = ++v17 + (v16 & v15);
          }
          while (*v19 != 0);
          uint64_t v20 = v14 + 24 * v18;
          std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v20 + 16), 0);
          _OWORD *v19 = *(_OWORD *)v11;
          uint64_t v21 = v4 + 24 * v9;
          uint64_t v22 = *(void *)(v21 + 16);
          v21 += 16;
          *(void *)uint64_t v21 = 0;
          *(void *)(v20 + 16) = v22;
          std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)v21, 0);
        }
        else
        {
          std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v4 + 24 * v9 + 16), 0);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v3);
}

unint64_t WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  unint64_t v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v4 >> 31) ^ v4)
                           + 95187966 * ((v7 >> 31) ^ v7))) >> 4;
}

uint64_t WebKit::WebPage::platformInitialize(WebKit::WebPage *a1, uint64_t a2)
{
  WebKit::WebPage::platformInitializeAccessibility(a1);
  {
    uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  unint64_t v4 = (WebKit::UserMediaCaptureManager *)WebKit::WebProcess::supplement<WebKit::UserMediaCaptureManager>((WebKit::UserMediaCaptureManager *)WebKit::WebProcess::singleton(void)::process);
  if (v4) {
    WebKit::UserMediaCaptureManager::setupCaptureProcesses(v4, *(unsigned char *)(a2 + 1160), *(unsigned char *)(a2 + 1161), *(unsigned __int8 *)(a2 + 1162), *(unsigned __int8 *)(a2 + 1163), *(unsigned __int8 *)(a2 + 1164), *(unsigned __int8 *)(a2 + 1165), (*(void *)(*(void *)(*((void *)a1 + 6) + 112) + 720) & 0x40000000000) != 0);
  }
  unint64_t v5 = *(void *)(*(void *)(*((void *)a1 + 6) + 112) + 720);
  WebKit::LibWebRTCCodecs::setCallbacks((WebKit::LibWebRTCCodecs *)((v5 >> 41) & 1), (v5 & 0x40000000000) != 0);
  WebKit::LibWebRTCCodecs::setWebRTCMediaPipelineAdditionalLoggingEnabled((WebKit::LibWebRTCCodecs *)((*(void *)(*(void *)(*((void *)a1 + 6) + 112) + 704) >> 51) & 1));
  WebCore::Color::Color((WebCore::Color *)&v14, (const Color *)(a2 + 504));
  WebCore::RenderThemeIOS::setInsertionPointColor((WebCore::RenderThemeIOS *)&v14, v6);
  if ((v14 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v7);
    }
  }
  GSEventSetHardwareKeyboardAttachedWithCountryCodeAndType();
  int v8 = (WebCore *)WebCore::setAdditionalSupportedImageTypes();
  WebCore::allowableImageTypes(v13, v8);
  WebCore::setImageSourceAllowableTypes();
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v9);
}

void sub_1986DBBE4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebPage::platformInitializeAccessibility(WebKit::WebPage *this)
{
  unint64_t v2 = objc_alloc_init(WKAccessibilityWebPageObject);
  unint64_t v3 = (const void *)*((void *)this + 33);
  *((void *)this + 33) = v2;
  if (v3)
  {
    CFRelease(v3);
    unint64_t v2 = (WKAccessibilityWebPageObject *)*((void *)this + 33);
  }
  int v8 = this;
  uint64_t result = (unsigned int *)[(WKAccessibilityWebPageObjectBase *)v2 setWebPage:&v8];
  uint64_t v5 = *(void *)(*((void *)this + 6) + 160);
  if (v5) {
    BOOL v6 = *(unsigned char *)(v5 + 144) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
    WebKit::WebPage::accessibilityRemoteTokenData(&cf);
    WebKit::WebPage::accessibilityTransferRemoteToken((uint64_t)this, (id *)&cf, *(void *)(v5 + 32), *(void *)(v5 + 40));
    if (cf) {
      CFRelease(cf);
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  }
  return result;
}

void sub_1986DBCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::WebPage::accessibilityRemoteTokenData@<X0>(void *a1@<X8>)
{
  unint64_t v3 = (void *)[MEMORY[0x1E4F29128] UUID];
  CFTypeRef result = WebKit::newAccessibilityRemoteToken(v3, v4);
  *a1 = result;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t WebKit::WebPage::accessibilityTransferRemoteToken(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a3;
  v11[1] = a4;
  id v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = [*a2 bytes];
    uint64_t v7 = [v5 length];
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v9[0] = v6;
  v9[1] = v7;
  v10[0] = v9;
  v10[1] = v11;
  return IPC::MessageSender::send<Messages::WebPageProxy::RegisterWebProcessAccessibilityToken>(a1 + 32, (uint64_t)v10);
}

WebCore::RealtimeMediaSourceCenter *WebKit::UserMediaCaptureManager::setupCaptureProcesses(WebKit::UserMediaCaptureManager *this, char a2, char a3, int a4, int a5, int a6, int a7, char a8)
{
  *((unsigned char *)this + 224) = a8;
  unsigned int v15 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(this);
  *((unsigned char *)v15 + 24) = (a2 | a3) ^ 1;
  int v16 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(v15);
  int v17 = a4 | a5;
  *((unsigned char *)v16 + 25) = v17 ^ 1;
  CFTypeRef result = (WebCore::RealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(v16);
  int v19 = a6 | a7;
  *((unsigned char *)result + 26) = v19 ^ 1;
  *((unsigned char *)this + 72) = a3;
  *((unsigned char *)this + 112) = a5;
  *((unsigned char *)this + 136) = a7;
  if ((((a2 | a3) ^ 1) & 1) == 0)
  {
    Function = (WebCore::RealtimeMediaSourceCenter *)WebCore::AudioMediaStreamTrackRendererInternalUnit::setCreateFunction();
    uint64_t v21 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(Function);
    CFTypeRef result = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::setAudioCaptureFactory(v21, (WebKit::UserMediaCaptureManager *)((char *)this + 56));
  }
  if (v17)
  {
    WebCore::RealtimeMediaSourceCenter::singleton(result);
    CFTypeRef result = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::setVideoCaptureFactory();
  }
  if (v19)
  {
    uint64_t v22 = WebCore::RealtimeMediaSourceCenter::singleton(result);
    return (WebCore::RealtimeMediaSourceCenter *)MEMORY[0x1F41714C0](v22, (char *)this + 120);
  }
  return result;
}

WebKit::LibWebRTCCodecs *WebKit::LibWebRTCCodecs::setWebRTCMediaPipelineAdditionalLoggingEnabled(WebKit::LibWebRTCCodecs *this)
{
  char v1 = (char)this;
  CFTypeRef result = (WebKit::LibWebRTCCodecs *)WebCore::WebRTCProvider::webRTCAvailable(this);
  if (result)
  {
    unint64_t v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(result);
    CFTypeRef result = WebKit::WebProcess::libWebRTCCodecs(v3);
    *((unsigned char *)result + 136) = v1;
  }
  return result;
}

WebKit::LibWebRTCCodecs *WebKit::LibWebRTCCodecs::setCallbacks(WebKit::LibWebRTCCodecs *this, char a2)
{
  int v3 = (int)this;
  CFTypeRef result = (WebKit::LibWebRTCCodecs *)WebCore::WebRTCProvider::webRTCAvailable(this);
  if (result)
  {
    if (v3)
    {
      id v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(result);
      CFTypeRef result = WebKit::WebProcess::libWebRTCCodecs(v5);
      *((unsigned char *)result + 134) = a2;
      if (!*((unsigned char *)result + 133))
      {
        *((unsigned char *)result + 133) = v3;
        webrtc::setVideoDecoderCallbacks();
        return (WebKit::LibWebRTCCodecs *)MEMORY[0x1F416B908](WebKit::createVideoEncoder, WebKit::releaseVideoEncoder, WebKit::initializeVideoEncoder, WebKit::encodeVideoFrame, WebKit::registerEncodeCompleteCallback, WebKit::setEncodeRatesCallback);
      }
    }
  }
  return result;
}

const char *WebKit::WebProcess::supplement<WebKit::UserMediaCaptureManager>(WebKit::UserMediaCaptureManager *a1)
{
  char v1 = (uint64_t *)((char *)a1 + 272);
  v4[0] = WebKit::UserMediaCaptureManager::supplementName(a1);
  v4[1] = v2;
  return WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v1, (WTF::ASCIILiteralHash *)v4);
}

const char *WebKit::UserMediaCaptureManager::supplementName(WebKit::UserMediaCaptureManager *this)
{
  return "UserMediaCaptureManager";
}

WebKit::UserMediaCaptureManager *WebKit::UserMediaCaptureManager::UserMediaCaptureManager(WebKit::UserMediaCaptureManager *this, WebKit::WebProcess *a2)
{
  unint64_t v4 = (char *)this + 8;
  *(void *)this = &unk_1EE9F9790;
  *((void *)this + 1) = &unk_1EE9F97D0;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = &unk_1EE9F98C8;
  *(_OWORD *)((char *)this + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0u;
  *((void *)this + 7) = &unk_1EE9F9868;
  *((void *)this + 8) = this;
  *((unsigned char *)this + 72) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = &unk_1EE9F9808;
  *((void *)this + 13) = this;
  *((unsigned char *)this + 112) = 0;
  *((void *)this + 15) = &unk_1EE9F9838;
  *((void *)this + 16) = this;
  *((unsigned char *)this + 136) = 0;
  WebKit::RemoteCaptureSampleManager::RemoteCaptureSampleManager((WebKit::UserMediaCaptureManager *)((char *)this + 144));
  *((unsigned char *)this + 224) = 0;
  char v7 = -107;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)a2 + 6, &v7, (uint64_t)v4, &v6);
  return this;
}

WebKit::RemoteCaptureSampleManager *WebKit::RemoteCaptureSampleManager::RemoteCaptureSampleManager(WebKit::RemoteCaptureSampleManager *this)
{
  *(void *)this = &unk_1EE9B71B0;
  *((void *)this + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = this;
  *((void *)this + 2) = v2;
  *(void *)this = &unk_1EE9F8F00;
  *((unsigned char *)this + 24) = 0;
  WTF::WorkQueue::create();
  *((void *)this + 9) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 64) = 0;
  return this;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::RegisterWebProcessAccessibilityToken>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  __int16 v8 = 2037;
  WTF::makeUniqueRefWithoutFastMallocCheck<IPC::Encoder,IPC::MessageName,unsigned long long &>(&v8, &v10, &v9);
  IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul>(v9, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v6);
  return v5;
}

void sub_1986DC2D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)va, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::RegisterWebProcessAccessibilityToken>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::RegisterWebProcessAccessibilityToken>(a1, a2, v4);
}

unint64_t IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<std::span<unsigned char const,18446744073709551615ul> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **(const void ***)a2, *(void *)(*(void *)a2 + 8));
  uint64_t v4 = *(uint64_t **)(a2 + 8);

  return IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, v4);
}

uint64_t WebKit::WebProcessPool::platformInitialize(uint64_t a1, int a2)
{
  int v3 = (unsigned int *)(a1 + 24);
  uint64_t v4 = a1 + 16;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t v5 = *(atomic_uint **)(a1 + 24);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v6 = MEMORY[0x1E4F14398];
  v6[1] = 50331650;
  void v6[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0>(WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0)::{lambda(void *)#1}::__invoke;
  v6[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0>(WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0)::descriptor;
  v6[4] = v5;
  queue = dispatch_get_global_queue(0, 0);
  dispatch_async(queue, v6);
  _Block_release(v6);
  char v7 = [WKProcessPoolWeakObserver alloc];
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v3, v4);
  __int16 v8 = *(atomic_uint **)v3;
  if (*(void *)v3) {
    atomic_fetch_add(v8, 1u);
  }
  handler = (unsigned int *)v8;
  uint64_t v10 = [(WKProcessPoolWeakObserver *)v7 initWithWeakPtr:&handler];
  uint64_t v11 = *(const void **)(a1 + 496);
  *(void *)(a1 + 496) = v10;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = handler;
  handler = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v9);
  }
  uint64_t v119 = (WTF *)WTF::fastMalloc((WTF *)0x6A0);
  memcpy(v119, &off_1E5812D20, 0x6A0uLL);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v3, v4);
  uint64_t v117 = a1;
  char v115 = v3;
  uint64_t v13 = *(atomic_uint **)v3;
  if (*(void *)v3) {
    atomic_fetch_add(v13, 1u);
  }
  uint64_t v116 = v4;
  uint64_t v14 = 0;
  uint64_t v121 = 106;
  uint64_t v120 = (WTF *)WTF::fastMalloc((WTF *)0x1A8);
  unsigned int v15 = (unsigned int *)MEMORY[0x1E4F143A8];
  do
  {
    int v16 = (_OWORD *)((char *)v119 + v14);
    out_token[0] = 0;
    int v17 = *(const char **)((char *)v119 + v14);
    handler = v15;
    uint64_t v130 = 3321888768;
    int v131 = ___ZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralE_block_invoke;
    uint64_t v132 = &__block_descriptor_56_e8_32c102_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__1clERKN3WTF12ASCIILiteralEEUliE__e8_v12__0i8l;
    if (v13)
    {
      atomic_fetch_add(v13, 1u);
      *(_OWORD *)long long v125 = *v16;
      atomic_fetch_add(v13, 1u);
    }
    else
    {
      *(_OWORD *)long long v125 = *v16;
    }
    unint64_t v133 = (WTF *)v13;
    long long v134 = *(_OWORD *)v125;
    uint32_t v19 = notify_register_dispatch(v17, out_token, queue, &handler);
    if (v13 && atomic_fetch_add(v13, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v13);
      WTF::fastFree((WTF *)v13, v18);
    }
    int v20 = out_token[0];
    uint64_t v21 = (unsigned int *)v133;
    unint64_t v133 = 0;
    if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v18);
      if (v19) {
        goto LABEL_25;
      }
    }
    else if (v19)
    {
      goto LABEL_25;
    }
    LODWORD(handler) = v20;
    int v22 = HIDWORD(v121);
    if (HIDWORD(v121) == v121)
    {
      unint64_t v23 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v120, HIDWORD(v121) + 1, (unint64_t)&handler);
      int v22 = HIDWORD(v121);
      *((_DWORD *)v120 + HIDWORD(v121)) = *v23;
    }
    else
    {
      *((_DWORD *)v120 + HIDWORD(v121)) = v20;
    }
    HIDWORD(v121) = v22 + 1;
LABEL_25:
    v14 += 16;
  }
  while (v14 != 1696);
  int v25 = v121;
  int v24 = HIDWORD(v121);
  if (v121 <= HIDWORD(v121))
  {
    uint64_t v27 = v116;
  }
  else
  {
    unint64_t v26 = v120;
    uint64_t v27 = v116;
    if (HIDWORD(v121))
    {
      LODWORD(v121) = HIDWORD(v121);
      uint64_t v120 = (WTF *)WTF::fastRealloc(v120, (void *)(4 * HIDWORD(v121)));
      int v25 = v24;
    }
    else if (v120)
    {
      uint64_t v120 = 0;
      LODWORD(v121) = 0;
      WTF::fastFree(v26, v18);
      int v25 = 0;
    }
  }
  int v28 = *(WTF **)(v117 + 904);
  if (v28)
  {
    *(void *)(v117 + 904) = 0;
    *(_DWORD *)(v117 + 912) = 0;
    WTF::fastFree(v28, v18);
  }
  uint64_t v29 = v120;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  *(void *)(v117 + 904) = v29;
  *(_DWORD *)(v117 + 912) = v25;
  *(_DWORD *)(v117 + 916) = v24;
  if (v13 && atomic_fetch_add(v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v13);
    WTF::fastFree((WTF *)v13, v18);
  }
  int v30 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(void *)int v30 = *MEMORY[0x1E4F287E8];
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v115, v27);
  uint64_t v31 = *(atomic_uint **)v115;
  if (*(void *)v115) {
    atomic_fetch_add(v31, 1u);
  }
  v125[0] = 0;
  v125[1] = 0;
  unint64_t v32 = (WTF *)WTF::fastMalloc((WTF *)8);
  LODWORD(v125[1]) = 1;
  v125[0] = v32;
  uint64_t v33 = *(void *)v30;
  unint64_t v34 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v35 = [MEMORY[0x1E4F28F08] currentQueue];
  handler = (unsigned int *)MEMORY[0x1E4F143A8];
  uint64_t v130 = 3321888768;
  int v131 = ___ZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSString_block_invoke;
  uint64_t v132 = &__block_descriptor_48_e8_32c106_ZTSKZZN6WebKit14WebProcessPool29registerNotificationObserversEvENK3__2clEP8NSStringEUlP14NSNotificationE__e24_v16__0__NSNotification_8l;
  if (v31)
  {
    atomic_fetch_add(v31, 1u);
    atomic_fetch_add(v31, 1u);
  }
  unint64_t v133 = (WTF *)v31;
  *(void *)&long long v134 = v33;
  unint64_t v36 = (unsigned int *)[v34 addObserverForName:v33 object:0 queue:v35 usingBlock:&handler];
  int v38 = v36;
  if (v36) {
    CFRetain(v36);
  }
  if (v31 && atomic_fetch_add(v31, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v31);
    WTF::fastFree((WTF *)v31, v37);
  }
  long long v39 = (unsigned int *)v133;
  unint64_t v133 = 0;
  if (v39 && atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v39);
    WTF::fastFree((WTF *)v39, v37);
  }
  unsigned int v40 = v125[1];
  LODWORD(v41) = HIDWORD(v125[1]);
  if (v38)
  {
    handler = v38;
    if (HIDWORD(v125[1]) == LODWORD(v125[1]))
    {
      long long v42 = (uint64_t *)WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v125, HIDWORD(v125[1]) + 1, (unint64_t)&handler);
      uint64_t v41 = HIDWORD(v125[1]);
      __int16 v43 = v125[0];
      uint64_t v44 = *v42;
      *long long v42 = 0;
      *((void *)v43 + v41) = v44;
    }
    else
    {
      handler = 0;
      *((void *)v125[0] + HIDWORD(v125[1])) = v38;
    }
    LODWORD(v41) = v41 + 1;
    HIDWORD(v125[1]) = v41;
    __int16 v45 = handler;
    handler = 0;
    if (v45)
    {
      CFRelease(v45);
      LODWORD(v41) = HIDWORD(v125[1]);
    }
    unsigned int v40 = v125[1];
  }
  if (v40 > v41)
  {
    int v46 = v125[0];
    if (v41)
    {
      if (v41 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1986DD250);
      }
      uint64_t v47 = (WTF *)(8 * v41);
      int v48 = (WTF *)WTF::fastMalloc(v47);
      LODWORD(v125[1]) = v41;
      v125[0] = v48;
      if (v48 != v46)
      {
        long long v49 = v46;
        do
        {
          char v50 = *(const void **)v49;
          *(void *)long long v49 = 0;
          *(void *)int v48 = v50;
          char v51 = *(const void **)v49;
          *(void *)long long v49 = 0;
          if (v51) {
            CFRelease(v51);
          }
          int v48 = (WTF *)((char *)v48 + 8);
          long long v49 = (WTF *)((char *)v49 + 8);
          uint64_t v47 = (WTF *)((char *)v47 - 8);
        }
        while (v47);
      }
    }
    if (v46)
    {
      if (v125[0] == v46)
      {
        v125[0] = 0;
        LODWORD(v125[1]) = 0;
      }
      WTF::fastFree(v46, v37);
    }
  }
  uint64_t v52 = *(unsigned int *)(v117 + 932);
  if (v52)
  {
    uint64_t v53 = *(const void ***)(v117 + 920);
    uint64_t v54 = 8 * v52;
    do
    {
      uint64_t v55 = *v53;
      *uint64_t v53 = 0;
      if (v55) {
        CFRelease(v55);
      }
      ++v53;
      v54 -= 8;
    }
    while (v54);
  }
  uint64_t v56 = v117;
  int v57 = *(WTF **)(v117 + 920);
  if (v57)
  {
    *(void *)(v117 + 92std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
    *(_DWORD *)(v117 + 928) = 0;
    WTF::fastFree(v57, v37);
  }
  *(WTF **)(v117 + 92std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v125[0];
  long long v58 = v125[1];
  v125[0] = 0;
  v125[1] = 0;
  *(void *)(v117 + 928) = v58;
  WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v125, v37);
  if (v31 && atomic_fetch_add(v31, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v31);
    WTF::fastFree((WTF *)v31, v59);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::backlightLevelDidChangeCallback, (CFStringRef)*MEMORY[0x1E4F43748], 0, (CFNotificationSuspensionBehavior)1026);
  long long v61 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v61, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::remoteWebInspectorEnabledCallback, @"com.apple.webinspectord.enabled", 0, (CFNotificationSuspensionBehavior)1026);
  id v62 = [NSString alloc];
  CFStringRef v63 = (const __CFString *)[v62 initWithCString:*MEMORY[0x1E4F64CE0] encoding:4];
  long long v64 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v64, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::hardwareKeyboardAvailabilityChangedCallback, v63, 0, (CFNotificationSuspensionBehavior)1026);
  long long v65 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v66 = *MEMORY[0x1E4FB9078];
  uint64_t v67 = [MEMORY[0x1E4F28F08] currentQueue];
  handler = (unsigned int *)MEMORY[0x1E4F143A8];
  uint64_t v130 = 3221225472;
  int v131 = ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke;
  uint64_t v132 = &__block_descriptor_40_e24_v16__0__NSNotification_8l;
  unint64_t v133 = (WTF *)v117;
  uint64_t v68 = (const void *)[v65 addObserverForName:v66 object:0 queue:v67 usingBlock:&handler];
  char v69 = v68;
  if (v68) {
    CFRetain(v68);
  }
  uint64_t v70 = *(const void **)(v117 + 480);
  *(void *)(v117 + 48std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v69;
  if (v70) {
    CFRelease(v70);
  }
  double v71 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v72 = [MEMORY[0x1E4F28F08] currentQueue];
  v125[0] = (WTF *)MEMORY[0x1E4F143A8];
  v125[1] = (WTF *)3221225472;
  uint64_t v126 = ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke_2;
  int v127 = &__block_descriptor_40_e24_v16__0__NSNotification_8l;
  uint64_t v128 = v117;
  uint64_t v73 = (const void *)[v71 addObserverForName:@"UIApplicationDidBecomeActiveNotification" object:0 queue:v72 usingBlock:v125];
  unint64_t v74 = v73;
  if (v73) {
    CFRetain(v73);
  }
  uint64_t v75 = *(const void **)(v117 + 472);
  *(void *)(v117 + 472) = v74;
  if (v75) {
    CFRelease(v75);
  }
  if (![MEMORY[0x1E4F42738] sharedApplication])
  {
    uint64_t v76 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
    uint64_t v77 = [MEMORY[0x1E4F28F08] currentQueue];
    uint64_t v78 = *MEMORY[0x1E4F43668];
    uint64_t v120 = (WTF *)MEMORY[0x1E4F143A8];
    uint64_t v121 = 3221225472;
    uint64_t v122 = ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke_3;
    int v123 = &__block_descriptor_40_e24_v16__0__NSNotification_8l;
    uint64_t v124 = v117;
    uint64_t v79 = (const void *)[v76 addObserverForName:v78 object:0 queue:v77 usingBlock:&v120];
    int v80 = v79;
    if (v79) {
      CFRetain(v79);
    }
    uint64_t v81 = *(const void **)(v117 + 488);
    *(void *)(v117 + 488) = v80;
    if (v81) {
      CFRelease(v81);
    }
  }
  uint64_t v82 = WTF::fastMalloc((WTF *)0x18);
  unint64_t v83 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unint64_t v83 = &unk_1EE9D0878;
  v83[1] = v117;
  *(void *)out_token = v83;
  MEMORY[0x1997349E0](v82, out_token);
  uint64_t v84 = *(void *)out_token;
  *(void *)out_token = 0;
  if (v84) {
    (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
  }
  std::unique_ptr<WebCore::PowerSourceNotifier>::reset[abi:sn180100]((uint64_t *)(v117 + 464), v82);
  uint64_t v85 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v85, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::lockdownModeConfigurationUpdateCallback, @"WKCaptivePortalModeContainerConfigurationChanged", 0, (CFNotificationSuspensionBehavior)1026);
  CFStringRef v86 = (const __CFString *)*MEMORY[0x1E4FB9290];
  uint64_t v87 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v87, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v86, 0, (CFNotificationSuspensionBehavior)1026);
  CFStringRef v88 = (const __CFString *)*MEMORY[0x1E4FB91D0];
  unint64_t v89 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v89, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v88, 0, (CFNotificationSuspensionBehavior)1026);
  CFStringRef v90 = (const __CFString *)*MEMORY[0x1E4FB9128];
  uint64_t v91 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v91, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v90, 0, (CFNotificationSuspensionBehavior)1026);
  CFStringRef v92 = (const __CFString *)*MEMORY[0x1E4FB9108];
  uint64_t v93 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v93, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v92, 0, (CFNotificationSuspensionBehavior)1026);
  CFStringRef v94 = (const __CFString *)*MEMORY[0x1E4FB91D8];
  unsigned int v95 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v95, *(const void **)(v117 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v94, 0, (CFNotificationSuspensionBehavior)1026);
  if (HIBYTE(word_1E93CF6D9) == 1)
  {
    if (word_1E93CF6D9 == 1)
    {
      CFStringRef v96 = (const __CFString *)qword_1E93CF748;
      goto LABEL_100;
    }
  }
  else
  {
    if (byte_1E93CF6D7 == 1)
    {
      unint64_t v112 = (void *)qword_1E93CF738;
    }
    else
    {
      unint64_t v112 = dlopen("/usr/lib/libAccessibility.dylib", 2);
      qword_1E93CF738 = (uint64_t)v112;
      byte_1E93CF6D7 = 1;
    }
    unint64_t v113 = (const __CFString **)dlsym(v112, "kAXSReduceMotionAutoplayAnimatedImagesChangedNotification");
    if (v113)
    {
      CFStringRef v96 = *v113;
      qword_1E93CF748 = (uint64_t)*v113;
      word_1E93CF6D9 = 257;
      uint64_t v56 = v117;
LABEL_100:
      uint64_t v97 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(v97, *(const void **)(v56 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v96, 0, (CFNotificationSuspensionBehavior)1026);
    }
    else
    {
      word_1E93CF6D9 = 256;
      uint64_t v56 = v117;
    }
  }
  CFStringRef v98 = (const __CFString *)*MEMORY[0x1E4FB9250];
  uint64_t v99 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v99, *(const void **)(v56 + 496), (CFNotificationCallback)WebKit::WebProcessPool::accessibilityPreferencesChangedCallback, v98, 0, (CFNotificationSuspensionBehavior)1026);
  CFStringRef MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification = (const __CFString *)WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(v100);
  uint64_t v102 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v102, *(const void **)(v56 + 496), (CFNotificationCallback)WebKit::WebProcessPool::mediaAccessibilityPreferencesChangedCallback, MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification, 0, (CFNotificationSuspensionBehavior)1026);
  if (v63) {
    CFRelease(v63);
  }
  WTF::fastFree(v30, v103);
  uint64_t result = WTF::fastFree(v119, v104);
  if (a2)
  {
    int v106 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v107 = MEMORY[0x1E4F1CC38];
    [v106 setObject:MEMORY[0x1E4F1CC38] forKey:@"WebKitJSCJITEnabledDefaultsKey"];
    [v106 setObject:v107 forKey:@"WebKitJSCFTLJITEnabledDefaultsKey"];
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "registerDefaults:", v106);
    uint64_t v108 = (WebKit *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"WebKitSuppressMemoryPressureHandler");
    if ((v108 & 1) == 0) {
      WebKit::installMemoryPressureHandler(v108);
    }
    if ((_MGCacheValid() & 1) == 0) {
      dispatch_async(queue, &__block_literal_global_79);
    }
    int v109 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v109 = &unk_1EE9C5C50;
    *((void *)v109 + 1) = &__block_literal_global_83;
    handler = v109;
    PAL::registerNotifyCallback();
    uint64_t v110 = handler;
    handler = 0;
    if (v110) {
      (*(void (**)(unsigned int *))(*(void *)v110 + 8))(v110);
    }
    unint64_t v111 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unint64_t v111 = &unk_1EE9C5C50;
    *((void *)v111 + 1) = &__block_literal_global_86;
    handler = v111;
    PAL::registerNotifyCallback();
    uint64_t result = (uint64_t)handler;
    handler = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1986DD27C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef cf,uint64_t a27,uint64_t a28,uint64_t a29,WTF *a30)
{
  CFTypeRef v33 = cf;
  CFTypeRef cf = 0;
  if (v33) {
    CFRelease(v33);
  }
  WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  if (v31)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v34);
    }
  }
  WTF::fastFree(v30, v34);
  WTF::fastFree(a15, v35);
  _Unwind_Resume(a1);
}

void sub_1986DD864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebProcessPool::ensureBundleParameters(WebKit::WebProcessPool *this)
{
  id result = (id)*((void *)this + 81);
  if (!result)
  {
    id result = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    int v3 = (const void *)*((void *)this + 81);
    *((void *)this + 81) = result;
    if (v3)
    {
      CFRelease(v3);
      return (id)*((void *)this + 81);
    }
  }
  return result;
}

void *WebKit::newAccessibilityRemoteToken(void *this, NSUUID *a2)
{
  uint64_t v5[3] = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v2 = this;
    int v3 = (void *)MEMORY[0x1E4F28DB0];
    v4[0] = @"ax-pid";
    v5[0] = [NSNumber numberWithInt:getpid()];
    v4[1] = @"ax-uuid";
    void v4[2] = @"ax-register";
    v5[1] = [v2 UUIDString];
    unsigned char v5[2] = MEMORY[0x1E4F1CC38];
    return objc_msgSend(v3, "archivedDataWithRootObject:requiringSecureCoding:error:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v5, v4, 3), 1, 0);
  }
  return this;
}

uint64_t std::unique_ptr<WebCore::PowerSourceNotifier>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = (WTF *)MEMORY[0x1997349F0]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::installMemoryPressureHandler(WebKit *this)
{
  char v1 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(this);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v2 = &unk_1EE9DDAD8;
  uint64_t v3 = *((void *)v1 + 6);
  *((void *)v1 + 6) = v2;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::MemoryPressureHandler::install(v1);
}

void WebKit::ApplicationStateTracker::setScene(id *this, UIScene *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this + 3;
  id WeakRetained = (UIScene *)objc_loadWeakRetained(this + 3);
  uint64_t v6 = WeakRetained;
  if (WeakRetained) {
    CFRelease(WeakRetained);
  }
  if (v6 == a2)
  {
    id v9 = objc_loadWeakRetained(v4);
    if (v9)
    {
      CFRelease(v9);
      if ([objc_loadWeak(v4) activationState] != 2)
      {
        BOOL v10 = [objc_loadWeak(v4) activationState] == -1;
LABEL_51:
        *((unsigned char *)this + 88) = v10;
        return;
      }
    }
    else
    {
      id v32 = objc_loadWeakRetained(this + 2);
      if (v32)
      {
        CFRelease(v32);
        BOOL v10 = 0;
        goto LABEL_51;
      }
    }
    BOOL v10 = 1;
    goto LABEL_51;
  }
  WebKit::ApplicationStateTracker::removeAllObservers(this);
  objc_storeWeak(v4, a2);
  id v7 = objc_loadWeakRetained(v4);
  if (v7)
  {
    CFRelease(v7);
    if ([objc_loadWeak(v4) activationState] != 2)
    {
      BOOL v8 = [objc_loadWeak(v4) activationState] == -1;
      goto LABEL_13;
    }
  }
  else
  {
    id v11 = objc_loadWeakRetained(this + 2);
    if (v11)
    {
      CFRelease(v11);
      BOOL v8 = 0;
      goto LABEL_13;
    }
  }
  BOOL v8 = 1;
LABEL_13:
  *((unsigned char *)this + 88) = v8;
  id v12 = objc_loadWeakRetained(v4);
  if (v12)
  {
    CFRelease(v12);
    uint64_t v13 = qword_1EB358730;
    if (os_log_type_enabled((os_log_t)qword_1EB358730, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *((unsigned __int8 *)this + 88);
      *(_DWORD *)buf = 134218240;
      int v46 = this;
      __int16 v47 = 1024;
      int v48 = v14;
      _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker::ApplicationStateTracker(): m_isInBackground=%d", buf, 0x12u);
    }
    unsigned int v15 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3321888768;
    v42[2] = ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke;
    v42[3] = &__block_descriptor_48_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__1_e24_v16__0__NSNotification_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    uint64_t v16 = *MEMORY[0x1E4F43C88];
    int v17 = (atomic_uint *)*this;
    if (*this)
    {
      atomic_fetch_add(v17, 1u);
      __int16 v43 = this;
      atomic_fetch_add(v17, 1u);
    }
    else
    {
      __int16 v43 = this;
    }
    uint64_t v44 = (WTF *)v17;
    objc_storeWeak(this + 12, (id)[v15 addObserverForName:v16 object:a2 queue:0 usingBlock:v42]);
    if (v17 && atomic_fetch_add(v17, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v17);
      WTF::fastFree((WTF *)v17, v18);
    }
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3321888768;
    v39[2] = ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_19;
    v39[3] = &__block_descriptor_48_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__2_e24_v16__0__NSNotification_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    uint64_t v19 = *MEMORY[0x1E4F43CA8];
    int v20 = (atomic_uint *)*this;
    if (*this)
    {
      atomic_fetch_add(v20, 1u);
      unsigned int v40 = this;
      atomic_fetch_add(v20, 1u);
    }
    else
    {
      unsigned int v40 = this;
    }
    uint64_t v41 = (WTF *)v20;
    objc_storeWeak(this + 13, (id)[v15 addObserverForName:v19 object:a2 queue:0 usingBlock:v39]);
    if (v20 && atomic_fetch_add(v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20);
      WTF::fastFree((WTF *)v20, v21);
    }
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3321888768;
    _OWORD v36[2] = ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_21;
    v36[3] = &__block_descriptor_48_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__3_e24_v16__0__NSNotification_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    uint64_t v22 = *MEMORY[0x1E4F44148];
    unint64_t v23 = (atomic_uint *)*this;
    if (*this)
    {
      atomic_fetch_add(v23, 1u);
      __int16 v37 = this;
      atomic_fetch_add(v23, 1u);
    }
    else
    {
      __int16 v37 = this;
    }
    int v38 = (WTF *)v23;
    objc_storeWeak(this + 14, (id)[v15 addObserverForName:v22 object:a2 queue:0 usingBlock:v36]);
    if (v23 && atomic_fetch_add(v23, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v23);
      WTF::fastFree((WTF *)v23, v24);
    }
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3321888768;
    v33[2] = ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_23;
    v33[3] = &__block_descriptor_48_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__4_e24_v16__0__NSNotification_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    uint64_t v25 = *MEMORY[0x1E4F44138];
    unint64_t v26 = (atomic_uint *)*this;
    if (*this)
    {
      atomic_fetch_add(v26, 1u);
      unint64_t v34 = this;
      atomic_fetch_add(v26, 1u);
    }
    else
    {
      unint64_t v34 = this;
    }
    uint64_t v35 = (WTF *)v26;
    objc_storeWeak(this + 15, (id)[v15 addObserverForName:v25 object:a2 queue:0 usingBlock:v33]);
    if (v26 && atomic_fetch_add(v26, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v26);
      WTF::fastFree((WTF *)v26, v27);
    }
    int v28 = (unsigned int *)v35;
    uint64_t v35 = 0;
    if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v27);
    }
    uint64_t v29 = (unsigned int *)v38;
    int v38 = 0;
    if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v27);
    }
    int v30 = (unsigned int *)v41;
    uint64_t v41 = 0;
    if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v27);
    }
    uint64_t v31 = (unsigned int *)v44;
    uint64_t v44 = 0;
    if (v31)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v27);
      }
    }
  }
}

void sub_1986DE0C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32)
{
  if (a20 && atomic_fetch_add((atomic_uint *volatile)a20, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a20);
    WTF::fastFree(a20, a2);
  }
  if (a26 && atomic_fetch_add((atomic_uint *volatile)a26, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a26);
    WTF::fastFree(a26, a2);
  }
  if (a32)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a32);
      WTF::fastFree(a32, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1986DE258(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32)
{
  if (a32)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a32);
      WTF::fastFree(a32, a2);
    }
  }
  JUMPOUT(0x1986DE208);
}

void sub_1986DE284()
{
}

id WebKit::ApplicationStateTracker::removeAllObservers(id *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  id WeakRetained = objc_loadWeakRetained(this + 12);
  if (WeakRetained)
  {
    CFRelease(WeakRetained);
    id v8 = objc_loadWeakRetained(this + 12);
    [v2 removeObserver:v8];
    if (v8) {
      CFRelease(v8);
    }
    objc_storeWeak(this + 12, 0);
  }
  id v4 = objc_loadWeakRetained(this + 13);
  if (v4)
  {
    CFRelease(v4);
    id v9 = objc_loadWeakRetained(this + 13);
    [v2 removeObserver:v9];
    if (v9) {
      CFRelease(v9);
    }
    objc_storeWeak(this + 13, 0);
  }
  id v5 = objc_loadWeakRetained(this + 14);
  if (v5)
  {
    CFRelease(v5);
    id v10 = objc_loadWeakRetained(this + 14);
    [v2 removeObserver:v10];
    if (v10) {
      CFRelease(v10);
    }
    objc_storeWeak(this + 14, 0);
  }
  uint64_t v6 = this + 15;
  id result = objc_loadWeakRetained(v6);
  if (result)
  {
    CFRelease(result);
    id v11 = objc_loadWeakRetained(v6);
    [v2 removeObserver:v11];
    if (v11) {
      CFRelease(v11);
    }
    return objc_storeWeak(v6, 0);
  }
  return result;
}

void sub_1986DE424(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    id v4 = *(const void ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      *id v4 = 0;
      if (v6) {
        CFRelease(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  id v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t *WebKit::WebProcess::setUseGPUProcessForMedia(uint64_t *this, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 763) != a2)
  {
    uint64_t v3 = this;
    *((unsigned char *)this + 763) = a2;
    uint64_t v4 = WebCore::CDMFactory::registeredFactories((WebCore::CDMFactory *)this);
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v4, v5);
    if (a2)
    {
      int v28 = (WebCore::MediaSessionHelper *)"RemoteCDMFactory";
      uint64_t v29 = 17;
      uint64_t v6 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v3 + 34, (WTF::ASCIILiteralHash *)&v28);
      if (v6) {
        uint64_t v7 = (uint64_t)(v6 - 8);
      }
      else {
        uint64_t v7 = 0;
      }
      WebKit::RemoteCDMFactory::registerFactory(v7, v4);
      id v8 = (WebKit::RemoteAudioSession *)WTF::fastMalloc((WTF *)0xE0);
      int v28 = WebKit::RemoteAudioSession::RemoteAudioSession(v8);
      WebCore::AudioSession::setSharedSession();
      id v9 = v28;
      int v28 = 0;
      if (v9) {
        (*(void (**)(WebCore::MediaSessionHelper *))(*(void *)v9 + 8))(v9);
      }
      id v10 = (WebKit::RemoteMediaSessionHelper *)WTF::fastMalloc((WTF *)0x60);
      int v28 = WebKit::RemoteMediaSessionHelper::RemoteMediaSessionHelper(v10);
      WebCore::MediaSessionHelper::setSharedHelper();
      id v12 = v28;
      int v28 = 0;
      if (v12) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((atomic_uchar **)v12 + 1), v11);
      }
      int v28 = (WebCore::MediaSessionHelper *)"RemoteLegacyCDMFactory";
      uint64_t v29 = 23;
      uint64_t v13 = (WebKit::RemoteLegacyCDMFactory *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v3 + 34, (WTF::ASCIILiteralHash *)&v28);
      WebKit::RemoteLegacyCDMFactory::registerFactory(v13);
      int v28 = (WebCore::MediaSessionHelper *)"RemoteMediaEngineConfigurationFactory";
      uint64_t v29 = 38;
      int v14 = (WebKit::RemoteMediaEngineConfigurationFactory *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v3 + 34, (WTF::ASCIILiteralHash *)&v28);
      WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(v14);
      unsigned int v15 = (WebCore::MediaSessionHelper *)WTF::fastMalloc((WTF *)0x10);
      *(void *)unsigned int v15 = &unk_1EE9E7248;
      int v28 = v15;
      WebCore::AudioHardwareListener::setCreationFunction();
      uint64_t v16 = v28;
      int v28 = 0;
      if (v16) {
        (*(void (**)(WebCore::MediaSessionHelper *))(*(void *)v16 + 8))(v16);
      }
      int v17 = (WebCore::MediaSessionHelper *)WTF::fastMalloc((WTF *)0x10);
      *(void *)int v17 = &unk_1EE9E7270;
      int v28 = v17;
      WebCore::RemoteCommandListener::setCreationFunction();
      unsigned int v18 = v28;
      int v28 = 0;
      if (v18) {
        unsigned int v18 = (WebCore::MediaSessionHelper *)(*(uint64_t (**)(WebCore::MediaSessionHelper *))(*(void *)v18 + 8))(v18);
      }
      WebCore::SystemBatteryStatusTestingOverrides::singleton(v18);
      int v28 = (WebCore::MediaSessionHelper *)&unk_1EE9E7298;
      uint64_t v29 = (uint64_t)v3;
      int v30 = &v28;
      WebCore::SystemBatteryStatusTestingOverrides::setConfigurationChangedCallback();
      uint64_t v19 = (WebCore::VP9TestingOverrides *)std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:sn180100](&v28);
      WebCore::VP9TestingOverrides::singleton(v19);
      int v28 = (WebCore::MediaSessionHelper *)&unk_1EE9E72E0;
      uint64_t v29 = (uint64_t)v3;
      int v30 = &v28;
    }
    else
    {
      int v20 = (WebCore::AudioSession *)WebCore::CDMFactory::platformRegisterFactories();
      WebCore::AudioSession::create((uint64_t *)&v28, v20);
      WebCore::AudioSession::setSharedSession();
      uint64_t v21 = v28;
      int v28 = 0;
      if (v21) {
        uint64_t v21 = (WebCore::MediaSessionHelper *)(*(uint64_t (**)(WebCore::MediaSessionHelper *))(*(void *)v21 + 8))(v21);
      }
      uint64_t v22 = (WebCore::LegacyCDM *)WebCore::MediaSessionHelper::resetSharedHelper(v21);
      unint64_t v23 = (WebCore::MediaEngineConfigurationFactory *)WebCore::LegacyCDM::resetFactories(v22);
      int v24 = (WebCore::AudioHardwareListener *)WebCore::MediaEngineConfigurationFactory::resetFactories(v23);
      uint64_t v25 = (WebCore::RemoteCommandListener *)WebCore::AudioHardwareListener::resetCreationFunction(v24);
      unint64_t v26 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::RemoteCommandListener::resetCreationFunction(v25);
      WebCore::SystemBatteryStatusTestingOverrides::singleton(v26);
      int v30 = 0;
      WebCore::SystemBatteryStatusTestingOverrides::setConfigurationChangedCallback();
      uint64_t v27 = (WebCore::VP9TestingOverrides *)std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:sn180100](&v28);
      WebCore::VP9TestingOverrides::singleton(v27);
      int v30 = 0;
    }
    WebCore::VP9TestingOverrides::setConfigurationChangedCallback();
    return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:sn180100](&v28);
  }
  return this;
}

void *std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:sn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void WebKit::RemoteMediaEngineConfigurationFactory::registerFactory(WebKit::RemoteMediaEngineConfigurationFactory *this)
{
  WebCore::MediaEngineConfigurationFactory::clearFactories(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9ED8F0;
  v3[1] = v2;
  v4[0] = v3;
  v4[1] = 0;
  WebCore::MediaEngineConfigurationFactory::installFactory();
  WebCore::MediaEngineConfigurationFactory::MediaEngineFactory::~MediaEngineFactory((WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *)v4);
}

void WebCore::MediaEngineConfigurationFactory::MediaEngineFactory::~MediaEngineFactory(WebCore::MediaEngineConfigurationFactory::MediaEngineFactory *this)
{
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

WebKit::RemoteMediaSessionHelper *WebKit::RemoteMediaSessionHelper::RemoteMediaSessionHelper(WebKit::RemoteMediaSessionHelper *this)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = this;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 1) = v2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(_DWORD *)((char *)this + 39) = 0;
  *((_DWORD *)this + 9) = 0;
  *(void *)this = &unk_1EE9BE548;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = &unk_1EE9BE5A8;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = &unk_1EE9BE5E0;
  *((void *)this + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *((void *)this + 11) = 0;
  return this;
}

uint64_t WebKit::RemoteLegacyCDMFactory::registerFactory(WebKit::RemoteLegacyCDMFactory *this)
{
  WebCore::LegacyCDM::clearFactories(this);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v2 = (atomic_uint *)*((void *)this + 1);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9ED850;
  v3[1] = v2;
  uint64_t v11 = (uint64_t)v3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v4 = (atomic_uint *)*((void *)this + 1);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9ED878;
  v5[1] = v4;
  id v10 = v5;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v6 = (atomic_uint *)*((void *)this + 1);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v7 = &unk_1EE9ED8A0;
  v7[1] = v6;
  id v9 = v7;
  WebCore::LegacyCDM::registerCDMFactory();
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  if (v10) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  uint64_t result = v11;
  if (v11) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

WebKit::RemoteAudioSession *WebKit::RemoteAudioSession::RemoteAudioSession(WebKit::RemoteAudioSession *this)
{
  uint64_t v2 = (void *)WebCore::AudioSession::AudioSession(this);
  uint64_t v3 = (WebCore::AudioSessionInterruptionObserver *)(v2 + 6);
  v2[6] = &unk_1EE9ECD60;
  v2[7] = 0;
  v2[8] = &unk_1EE9ED2E0;
  v2[9] = &unk_1EE9B71B0;
  v2[10] = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1994F5F10;
  *(void *)(v4 + 24) = this;
  *((void *)this + 11) = v4;
  *((void *)this + 12) = 0;
  *(void *)this = &unk_1EE9EC8E8;
  *((void *)this + 6) = &unk_1EE9ECA58;
  *((void *)this + 8) = &unk_1EE9ECA90;
  *((void *)this + 9) = &unk_1EE9ECAD0;
  *((unsigned char *)this + 12std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *((unsigned char *)this + 192) = 0;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 216) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  WebCore::AudioSession::addInterruptionObserver(this, v3);
  return this;
}

uint64_t WebKit::RemoteCDMFactory::registerFactory(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2 == *(_DWORD *)(a2 + 8)) {
    return WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteCDMFactory *>(a2, &v3);
  }
  *(void *)(*(void *)a2 + 8 * v2) = result;
  *(_DWORD *)(a2 + 12) = v2 + 1;
  return result;
}

const char *WebKit::WebProcess::supplement<WebKit::RemoteLegacyCDMFactory>(uint64_t a1)
{
  v2[0] = "RemoteLegacyCDMFactory";
  v2[1] = 23;
  return WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 272), (WTF::ASCIILiteralHash *)v2);
}

const char *WebKit::WebProcess::supplement<WebKit::RemoteCDMFactory>(uint64_t a1)
{
  v3[0] = "RemoteCDMFactory";
  v3[1] = 17;
  char v1 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 272), (WTF::ASCIILiteralHash *)v3);
  if (v1) {
    return v1 - 8;
  }
  else {
    return 0;
  }
}

uint64_t WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, void *a2)
{
  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12)) {
      *(_DWORD *)(result + 12) = 0;
    }
    uint64_t v2 = *(WTF **)result;
    if (*(void *)result)
    {
      *(void *)uint64_t result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteCDMFactory *>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v6 <= v4 + 1) {
    unint64_t v7 = v4 + 1;
  }
  else {
    unint64_t v7 = v6;
  }
  WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  *(void *)(*(void *)a1 + 8 * v8) = *a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

void ___ZN6WebKit14WebProcessPool29registerNotificationObserversEv_block_invoke_2()
{
  if (qword_1E93CF6F8 != -1) {
    dispatch_once(&qword_1E93CF6F8, &__block_literal_global_110);
  }
}

uint64_t ___ZL15wkNSStringClassv_block_invoke()
{
  uint64_t result = objc_opt_class();
  qword_1EB358FF0 = result;
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>>(WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))();
}

int8x16_t WebKit::PlatformCALayerRemote::setMasksToBounds(int8x16_t *this, int a2)
{
  if (this[41].u8[3] != a2)
  {
    this[41].i8[3] = a2;
    int8x16_t result = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x400000000uLL));
    this[4] = result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoadStatisticsStore::postTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t ___ZN6WebKit12SecureCodingL45internalClassNamesExemptFromSecureCodingCrashEv_block_invoke(WebCore *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebCore::isInAuxiliaryProcess(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"WebKitCrashOnSecureCodingWithExemptClassesKey");
    if (result)
    {
      uint64_t v2 = (void *)result;
      uint64_t v3 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)8);
      WebCore::AudioSessionInterruptionObserver *v3 = 0;
      v12[0] = v3;
      std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::operator=[abi:sn180100]((WTF::StringImpl ****)&qword_1EB35A400, (WTF::StringImpl *)v12);
      std::unique_ptr<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](v12, v4);
      objc_opt_class();
      uint64_t result = objc_opt_isKindOfClass();
      if (result)
      {
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        uint64_t result = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
        uint64_t v5 = result;
        if (result)
        {
          uint64_t v6 = *(void *)v15;
          do
          {
            uint64_t v7 = 0;
            do
            {
              if (*(void *)v15 != v6) {
                objc_enumerationMutation(v2);
              }
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v8 = (uint64_t *)qword_1EB35A400;
                MEMORY[0x19972EAD0](&v13, v2);
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v8, &v13, v9, (uint64_t)v12);
                uint64_t v11 = v13;
                uint64_t v13 = 0;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 2) {
                    WTF::StringImpl::destroy(v11, v10);
                  }
                  else {
                    *(_DWORD *)v11 -= 2;
                  }
                }
              }
              ++v7;
            }
            while (v5 != v7);
            uint64_t result = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
            uint64_t v5 = result;
          }
          while (result);
        }
      }
    }
  }
  return result;
}

void sub_1986DF258(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::XPCEndpointClient::setEndpoint(uint64_t a1, xpc_endpoint_t endpoint)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 8), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 8);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v7 = xpc_connection_create_from_endpoint(endpoint);
    uint64_t v8 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v7;
    if (v8)
    {

      uint64_t v7 = *(_xpc_connection_s **)(a1 + 16);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    xpc_connection_set_target_queue(v7, global_queue);
    id v10 = *(_xpc_connection_s **)(a1 + 16);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = ___ZN6WebKit17XPCEndpointClient11setEndpointEPU24objcproto13OS_xpc_object8NSObject_block_invoke;
    handler[3] = &__block_descriptor_40_e33_v16__0__NSObject_OS_xpc_object__8l;
    handler[4] = a1;
    xpc_connection_set_event_handler(v10, handler);
    xpc_connection_resume(*(xpc_connection_t *)(a1 + 16));
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (!v6) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
}

void sub_1986DF3CC(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LaunchServicesDatabaseManager::didConnect(atomic_uchar *this)
{
  xpc_object_t message = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(message, "message-name", "request-launch-services-database-update-message");
  WebKit::XPCEndpointClient::connection(this, &connection);
  xpc_connection_t v2 = connection;
  if (connection)
  {
    xpc_connection_send_message(connection, message);
  }
  if (message)
  {
  }
}

void sub_1986DF494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  id v10 = v9;

  if (a9) {
  _Unwind_Resume(a1);
  }
}

atomic_uchar *WebKit::XPCEndpointClient::connection@<X0>(atomic_uchar *this@<X0>, void *a2@<X8>)
{
  xpc_connection_t v2 = this;
  char v4 = 0;
  uint64_t v5 = this + 8;
  atomic_compare_exchange_strong_explicit(this + 8, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this + 8);
  }
  uint64_t v6 = (void *)*((void *)v2 + 2);
  *a2 = v6;
  if (v6) {
    this = v6;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

void sub_1986DF558(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,BOOL>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5)
  {
    unint64_t v6 = *((void *)a2 + 1);
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *((void *)a2 + 2) - *(void *)a2;
    if (v6 <= v8)
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v13 = *((void *)a2 + 3);
      if (v13)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
          uint64_t v12 = *(void *)a2;
          unint64_t v11 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v11 = 0;
          uint64_t v12 = 0;
        }
      }
    }
    else
    {
      id v9 = (unsigned __int8 *)(v7 + v8);
      *((void *)a2 + 2) = v9 + 1;
      if (v7)
      {
        unsigned int v10 = *v9;
        if (v10 < 2)
        {
          *(void *)a1 = result;
          *(unsigned char *)(a1 + 8) = v10 != 0;
          *(unsigned char *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_8;
      }
      unint64_t v11 = v6;
      uint64_t v12 = 0;
    }
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v7 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
      }
    }
LABEL_8:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v7);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;

  return IPC::Decoder::markInvalid(a2);
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, uint64_t *a2)
{
  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (IPC::Decoder *)a2, (uint64_t)v5);
  }
  else
  {
    *a1 = 0;
    a1[120] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  v7[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v7[1] = v6;
  if ((_BYTE)v6)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID>(a1, a2, a3, (uint64_t)v7);
  }
  else
  {
    *a1 = 0;
    a1[120] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4)
{
  IPC::Decoder::decode<IPC::ConnectionHandle>(a2, v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle>(a1, a2, a3, a4, (uint64_t)v8);
    if (v9) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v8);
    }
  }
  else
  {
    *a1 = 0;
    a1[120] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  IPC::Decoder::decode<WebKit::GPUProcessConnectionParameters>((uint64_t)v9, a2);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>((uint64_t)a1, *(void *)a3, *(unsigned char *)(a3 + 8), a4, a5, (uint64_t)v9);
    if (v10) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
    }
  }
  else
  {
    *a1 = 0;
    a1[120] = 0;
  }
}

void IPC::Decoder::decode<WebKit::GPUProcessConnectionParameters>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebKit::GPUProcessConnectionParameters,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 96))
  {
    IPC::Decoder::markInvalid(a2);
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 && *(unsigned char *)(a4 + 8) && *(unsigned char *)(a5 + 4) && *(unsigned char *)(a6 + 96))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJN3WTF23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS3_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS3_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEN3IPC16ConnectionHandleEN6WebKit30GPUProcessConnectionParametersEEEC2B8sn180100IJLm0ELm1ELm2ELm3EEJSA_SC_SE_SG_EJEJEJSA_SC_SE_SG_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(result, a2, (void *)a4, a5, a6);
    *(unsigned char *)(result + 12std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJN3WTF23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS3_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS3_33SupportsObjectIdentifierNullStateE1EEEN3PAL9SessionIDEN3IPC16ConnectionHandleEN6WebKit30GPUProcessConnectionParametersEEEC2B8sn180100IJLm0ELm1ELm2ELm3EEJSA_SC_SE_SG_EJEJEJSA_SC_SE_SG_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 24), (const WTF::MachSendRight *)a5);
  long long v7 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a5 + 8);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a5 + 40);
  long long v9 = *(_OWORD *)(a5 + 56);
  long long v10 = *(_OWORD *)(a5 + 72);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a5 + 88);
  *(_OWORD *)(a1 + 8std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v9;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 64) = v8;
  return a1;
}

void IPC::ArgumentCoder<WebKit::GPUProcessConnectionParameters,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::ProcessIdentity>(a1, (WTF::MachSendRight *)v21);
  IPC::Decoder::decode<WebKit::SharedPreferencesForWebProcess>((uint64_t *)a1, v18);
  unsigned __int16 v4 = IPC::Decoder::decode<BOOL>(a1);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCAuditToken>>(v15, a1);
  int v5 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v6 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if (*(void *)a1)
  {
    if (v22)
    {
      int v7 = v6;
      WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v10, (const WTF::MachSendRight *)v21);
      if (v20)
      {
        long long v11 = v18[0];
        long long v12 = v18[1];
        *(void *)uint64_t v13 = v19;
        if (v4 > 0xFFu)
        {
          v13[8] = v4;
          if (v17)
          {
            *(_OWORD *)&v13[12] = v15[0];
            *(_OWORD *)&v13[28] = v15[1];
            v13[44] = v16;
            if ((v5 & 0xFF0000) != 0)
            {
              LOWORD(v14) = v5;
              if ((v7 & 0xFF0000) != 0)
              {
                HIWORD(v14) = v7;
                WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)a2, (const WTF::MachSendRight *)&v10);
                long long v8 = *(_OWORD *)&v13[16];
                *(_OWORD *)(a2 + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = *(_OWORD *)v13;
                *(_OWORD *)(a2 + 56) = v8;
                *(_OWORD *)(a2 + 72) = *(_OWORD *)&v13[32];
                *(_DWORD *)(a2 + 88) = v14;
                long long v9 = v12;
                *(_OWORD *)(a2 + 8) = v11;
                *(_OWORD *)(a2 + 24) = v9;
                *(unsigned char *)(a2 + 96) = 1;
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v10);
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 96) = 0;
LABEL_9:
  if (v22) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v21);
  }
}

void sub_1986DFBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a9);
  if (*(unsigned char *)(v9 - 52)) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v9 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::GPUProcessPreferences,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v5 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v6 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v7 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v8 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v9 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v10 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  int v11 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  uint64_t result = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  unint64_t v13 = *((void *)a1 + 1);
  uint64_t v14 = *(void *)a1;
  unint64_t v15 = *((void *)a1 + 2) - *(void *)a1;
  if (v13 <= v15) {
    goto LABEL_18;
  }
  char v16 = (unsigned __int8 *)(v14 + v15);
  *((void *)a1 + 2) = v16 + 1;
  if (!v14)
  {
    unint64_t v21 = v13;
    uint64_t v22 = 0;
    goto LABEL_19;
  }
  unsigned int v17 = *v16;
  if (v17 > 1) {
    goto LABEL_20;
  }
  int v18 = 0;
  for (BOOL i = v17 != 0; ; BOOL i = 0)
  {
    if ((v4 & 0xFF0000) != 0
      && (v5 & 0xFF0000) != 0
      && (v6 & 0xFF0000) != 0
      && (v7 & 0xFF0000) != 0
      && (v8 & 0xFF0000) != 0
      && (v9 & 0xFF0000) != 0
      && (v10 & 0xFF0000) != 0
      && (v11 & 0xFF0000) != 0
      && (result & 0xFF0000) != 0
      && !v18)
    {
      *(_WORD *)a2 = v4;
      *(_WORD *)(a2 + 2) = v5;
      *(_WORD *)(a2 + 4) = v6;
      *(_WORD *)(a2 + 6) = v7;
      *(_WORD *)(a2 + 8) = v8;
      *(_WORD *)(a2 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v9;
      *(_WORD *)(a2 + 12) = v10;
      *(_WORD *)(a2 + 14) = v11;
      *(_WORD *)(a2 + 16) = result;
      char v20 = 1;
      *(unsigned char *)(a2 + 18) = i;
      goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23)
    {
      unsigned int v28 = result;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
        uint64_t v22 = *(void *)a1;
        unint64_t v21 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      uint64_t result = v28;
    }
LABEL_19:
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v24 = *((void *)a1 + 3);
    if (v24)
    {
      unsigned int v27 = result;
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v22, v21);
        uint64_t v14 = *(void *)a1;
        unint64_t v13 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
      uint64_t result = v27;
    }
LABEL_20:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v25 = *((void *)a1 + 3);
    if (!v25) {
      break;
    }
    if (!v13) {
      break;
    }
    unsigned int v26 = result;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v14);
    uint64_t result = v26;
    if (!*(void *)a1) {
      break;
    }
    int v18 = 1;
  }
  char v20 = 0;
  *(unsigned char *)a2 = 0;
LABEL_16:
  *(unsigned char *)(a2 + 19) = v20;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<BOOL>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<std::optional<BOOL>,void>::decode<IPC::Decoder>(a1);
  if ((v2 & 0xFF0000) == 0) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<std::optional<BOOL>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v22 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        a1 = v22;
        uint64_t v11 = *v22;
        unint64_t v10 = v22[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_14;
  }
  int v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v10 = v1;
    uint64_t v11 = 0;
LABEL_14:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      unint64_t v21 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v21;
        uint64_t v2 = *v21;
        unint64_t v1 = v21[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned int v5 = *v4;
  if (v5 < 2)
  {
    if (!*v4)
    {
      int v8 = 0;
      int v7 = 0x10000;
      return v8 | v7 | v5;
    }
    if (v1 <= (unint64_t)&v4[-v2 + 1])
    {
      *a1 = 0;
      a1[1] = 0;
      uint64_t v15 = a1[3];
      if (v15)
      {
        unsigned int v17 = a1;
        (*(void (**)(void))(*(void *)v15 + 16))(a1[3]);
        unsigned int v6 = 0;
        unint64_t v1 = 0;
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        uint64_t v20 = v17[3];
        void *v17 = 0;
        v17[1] = 0;
        uint64_t v2 = 0;
        if (v20)
        {
          a1 = v17;
          if (v19)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18, v19);
            a1 = v17;
            unsigned int v6 = 0;
            uint64_t v2 = *v17;
            unint64_t v1 = v17[1];
          }
        }
        else
        {
          a1 = v17;
        }
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v6 = 0;
      }
    }
    else
    {
      a1[2] = v4 + 2;
      unsigned int v6 = v4[1];
      if (v6 < 2)
      {
        int v7 = 0x10000;
        int v8 = 1;
LABEL_8:
        if (!v6) {
          int v8 = 0;
        }
        unsigned int v5 = 256;
        return v8 | v7 | v5;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      unsigned int v23 = v6;
      if (v1) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v2);
      }
      int v8 = 0;
      int v7 = 0;
      unsigned int v6 = v23;
    }
    else
    {
      int v8 = 0;
      int v7 = 0;
    }
    goto LABEL_8;
  }
LABEL_15:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v14 = a1[3];
  if (v14 && v1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v2);
  }
  int v7 = 0;
  int v8 = 0;
  unsigned int v5 = 0;
  return v8 | v7 | v5;
}

void IPC::Decoder::decode<WebCore::ProcessIdentity>(IPC::Decoder *a1@<X0>, WTF::MachSendRight *a2@<X8>)
{
  if (!*((unsigned char *)a2 + 4)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1986E01FC(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 4)) {
    WTF::MachSendRight::~MachSendRight(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::ProcessIdentity,void>::decode(IPC::Decoder *a1@<X0>, WTF::MachSendRight *a2@<X8>)
{
  IPC::Decoder::takeLastAttachment(a1, v5);
  if (*(void *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight(a2, (const WTF::MachSendRight *)v4);
    *((unsigned char *)a2 + 4) = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *((unsigned char *)a2 + 4) = 0;
  }
  if (v6) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
}

void sub_1986E02A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12, __int16 a13, char a14)
{
  if (a14) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::NetworkProcessConnectionInfo,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<IPC::ConnectionHandle>(a1, v11);
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::HTTPCookieAcceptPolicy>(a1);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCAuditToken>>(v8, a1);
  if (*(void *)a1)
  {
    if (v12)
    {
      WTF::MachSendRight::MachSendRight();
      if (v4 > 0xFFu)
      {
        v7[0] = v4;
        if (v10)
        {
          *(_OWORD *)&v7[4] = v8[0];
          *(_OWORD *)&v7[20] = v8[1];
          v7[36] = v9;
          WTF::MachSendRight::MachSendRight();
          long long v5 = *(_OWORD *)&v7[16];
          *(_OWORD *)(a2 + 4) = *(_OWORD *)v7;
          *(_OWORD *)(a2 + 2std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v5;
          *(void *)(a2 + 33) = *(void *)&v7[29];
          *(unsigned char *)(a2 + 44) = 1;
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
          goto LABEL_6;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 44) = 0;
LABEL_6:
  if (v12) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
  }
}

void sub_1986E03C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (*(unsigned char *)(v10 - 36)) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v10 - 40));
  }
  _Unwind_Resume(a1);
}

unsigned char *IPC::Decoder::decode<std::optional<WebKit::CoreIPCAuditToken>>(unsigned char *result, IPC::Decoder *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_10;
  }
  int v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
    }
    goto LABEL_12;
  }
  if (!v9)
  {
    *uint64_t result = 0;
    result[32] = 0;
    goto LABEL_7;
  }
  uint64_t result = (unsigned char *)IPC::Decoder::decode<WebKit::CoreIPCAuditToken>((uint64_t)v16, a2);
  if (v17)
  {
    long long v10 = v16[1];
    *(_OWORD *)unint64_t v3 = v16[0];
    *((_OWORD *)v3 + 1) = v10;
    v3[32] = 1;
LABEL_7:
    v3[36] = 1;
    return result;
  }
LABEL_12:
  unsigned char *v3 = 0;
  v3[36] = 0;

  return (unsigned char *)IPC::Decoder::markInvalid(a2);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCAuditToken>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v4 & 0xFF00000000) == 0) {
    goto LABEL_11;
  }
  int v5 = v4;
  uint64_t v6 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v6 & 0xFF00000000) == 0) {
    goto LABEL_11;
  }
  int v7 = v6;
  uint64_t v8 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v8 & 0xFF00000000) == 0) {
    goto LABEL_11;
  }
  int v9 = v8;
  uint64_t v10 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v10 & 0xFF00000000) == 0) {
    goto LABEL_11;
  }
  int v11 = v10;
  uint64_t v12 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v12 & 0xFF00000000) == 0) {
    goto LABEL_11;
  }
  int v13 = v12;
  uint64_t v14 = IPC::Decoder::decode<unsigned int>(a2);
  if ((v14 & 0xFF00000000) != 0
    && (int v15 = v14, v16 = IPC::Decoder::decode<unsigned int>(a2), (v16 & 0xFF00000000) != 0)
    && (v17 = v16, uint64_t result = IPC::Decoder::decode<unsigned int>(a2), (result & 0xFF00000000) != 0))
  {
    if (*(void *)a2)
    {
      *(_DWORD *)a1 = v5;
      *(_DWORD *)(a1 + 4) = v7;
      *(_DWORD *)(a1 + 8) = v9;
      *(_DWORD *)(a1 + 12) = v11;
      *(_DWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 2std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v15;
      *(_DWORD *)(a1 + 24) = v17;
      *(_DWORD *)(a1 + 28) = result;
      *(unsigned char *)(a1 + 32) = 1;
      return result;
    }
  }
  else
  {
LABEL_11:
    IPC::Decoder::markInvalid(a2);
    if (*(void *)a2) {
      __break(1u);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;

  return IPC::Decoder::markInvalid(a2);
}

uint64_t IPC::Decoder::decode<WebCore::FirstPartyWebsiteDataRemovalMode>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::FirstPartyWebsiteDataRemovalMode,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::ArgumentCoder<WebCore::FirstPartyWebsiteDataRemovalMode,void>::decode<IPC::Decoder>(void *a1)
{
  __int16 v3 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v3);
  if (v3 >= 4u || HIBYTE(v3) == 0) {
    return 0;
  }
  else {
    return v3 | 0x100u;
  }
}

void IPC::ArgumentCoder<IPC::StreamServerConnectionHandle,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<IPC::ConnectionHandle>(a1, v9);
  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v6);
  if (!*(void *)a1) {
    goto LABEL_11;
  }
  if (!v8)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if ((unint64_t)(v7 - 257) >= 0x7FFFFFFF)
  {
LABEL_11:
    *a2 = 0;
    a2[24] = 0;
    goto LABEL_6;
  }
  if (!v10) {
    goto LABEL_12;
  }
  IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)v4, (uint64_t)v9, (uint64_t)v6);
  IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)a2, (uint64_t)v4);
  a2[24] = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v5);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
LABEL_6:
  if (v8) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
  }
  if (v10) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
  }
}

void sub_1986E0854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v15 + 8));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (a15) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a13);
  }
  if (*(unsigned char *)(v16 - 20)) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v16 - 24));
  }
  _Unwind_Resume(a1);
}

void sub_1986E0898()
{
}

uint64_t IPC::StreamServerConnectionHandle::StreamServerConnectionHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = *(void *)(a3 + 8);
  return a1;
}

void sub_1986E08E0(_Unwind_Exception *a1)
{
  WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v14 = *((void *)a2 + 3);
        if (v14)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v4, v5);
            unint64_t v12 = 0;
            uint64_t v25 = *(void *)a2;
            uint64_t v26 = *((void *)a2 + 1);
            uint64_t v27 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v13 = 0;
            if (v27 && v26)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25, v26);
              uint64_t v13 = *(void *)a2;
              unint64_t v12 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v12 = 0;
            uint64_t v13 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (!v7)
          {
            v32[0] = 0;
            char v33 = 0;
            char v34 = 1;
            goto LABEL_13;
          }
          IPC::Decoder::decode<IPC::ConnectionHandle>(a2, v35);
          if (v36)
          {
            WTF::MachSendRight::MachSendRight();
            char v33 = 1;
            char v34 = 1;
            if (v36) {
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v35);
            }
            goto LABEL_13;
          }
LABEL_27:
          v32[0] = 0;
          char v34 = 0;
          uint64_t v16 = *(void *)a2;
          uint64_t v17 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v18 = *((void *)a2 + 3);
          if (!v18 || !v17 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16), !v34))
          {
            v28[0] = 0;
            unsigned __int8 v31 = 0;
            goto LABEL_29;
          }
LABEL_13:
          unsigned __int16 v9 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a2);
          if (v9 <= 0xFFu)
          {
            uint64_t v22 = *(void *)a2;
            uint64_t v23 = *((void *)a2 + 1);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v24 = *((void *)a2 + 3);
            if (v24 && v23) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
            }
            int v11 = 0;
            v28[0] = 0;
          }
          else
          {
            char v10 = v9;
            v28[0] = 0;
            char v29 = 0;
            if (v33)
            {
              WTF::MachSendRight::MachSendRight();
              char v29 = 1;
            }
            char v30 = v10;
            int v11 = 1;
          }
          unsigned __int8 v31 = v11;
          if (v34 && v33)
          {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v32);
            int v11 = v31;
          }
          if (v11)
          {
LABEL_21:
            WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0::operator()<std::optional<IPC::ConnectionHandle>,WebCore::HTTPCookieAcceptPolicy>(v2, (uint64_t)v28, v30);
            if (v31)
            {
              if (v29) {
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v28);
              }
            }
            return;
          }
LABEL_29:
          uint64_t v19 = *(void *)a2;
          uint64_t v20 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v21 = *((void *)a2 + 3);
          if (!v21 || !v20 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19), !v31))
          {
            IPC::Connection::cancelReply<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(v2);
            return;
          }
          goto LABEL_21;
        }
        unint64_t v12 = v5;
        uint64_t v13 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v15 = *((void *)a2 + 3);
      if (v15 && v12) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
      }
      goto LABEL_27;
    }
  }
  char v8 = (void *)(a1 + 8);

  IPC::Connection::cancelReply<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(v8);
}

void WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0::operator()<std::optional<IPC::ConnectionHandle>,WebCore::HTTPCookieAcceptPolicy>(void *a1, uint64_t a2, char a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[1];
  if (!v4 || !*(void *)(v4 + 8))
  {
    unsigned __int16 v9 = qword_1EB358960;
    if (!os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)buf = 0;
    int v11 = "NetworkProcessProxy::getNetworkProcessConnection: NetworkProcessProxy deallocated during connection establishment";
LABEL_15:
    _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, v11, buf, 2u);
    goto LABEL_9;
  }
  uint64_t v7 = *a1;
  WebKit::ResponsivenessTimer::stop((unsigned char *)(*a1 + 56));
  if (!*(unsigned char *)(a2 + 4))
  {
    unsigned __int16 v9 = qword_1EB358960;
    if (!os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)buf = 0;
    int v11 = "NetworkProcessProxy::getNetworkProcessConnection: connection identifier is empty";
    goto LABEL_15;
  }
  if ((*(_DWORD *)a2 - 1) >= 0xFFFFFFFE)
  {
    unint64_t v12 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)uint64_t v17 = "auto WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebProcessProxy &, CompletionHandle"
                       "r<void (NetworkProcessConnectionInfo &&)> &&)::(anonymous class)::operator()(auto &&, auto) [iden"
                       "tifier:auto = std::optional<IPC::ConnectionHandle>, cookieAcceptPolicy:auto = WebCore::HTTPCookieAcceptPolicy]";
      _os_log_fault_impl(&dword_1985F2000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 336: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    uint64_t v13 = *(void *)(v7 + 144);
    if (!v13)
    {
      __break(0xC471u);
LABEL_22:
      JUMPOUT(0x1986E0E5CLL);
    }
    *(unsigned char *)(v13 + 98) = 1;
LABEL_9:
    *(_DWORD *)buf = 0;
    v17[0] = 0;
    goto LABEL_10;
  }
  WTF::MachSendRight::MachSendRight();
  v17[0] = a3;
  uint64_t v8 = *(void *)(v7 + 144);
  if (!v8)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  if (!*(void *)(v8 + 352))
  {
LABEL_10:
    v17[4] = 0;
    char v18 = 0;
    goto LABEL_11;
  }
  xpc_connection_get_audit_token();
  *(_OWORD *)&v17[5] = *(_OWORD *)v15;
  *(_OWORD *)&v17[20] = *(_OWORD *)&v15[15];
  v17[4] = v14;
  char v18 = 1;
LABEL_11:
  uint64_t v10 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 16))(v10, buf);
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
}

unsigned char *WebKit::ResponsivenessTimer::stop(unsigned char *this)
{
  unint64_t v1 = this;
  if (!this[48])
  {
    uint64_t v2 = *(void *)(*(void *)this + 8);
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    v1[48] = 1;
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    this = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
  }
  v1[49] = 0;
  if (v1[50])
  {
    v1[50] = 0;
  }
  else
  {
    return (unsigned char *)WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v1 + 8));
  }
  return this;
}

void WebKit::WebProcessProxy::didReceiveWebProcessProxyMessage(atomic_uint *this, IPC::Connection *a2, atomic_uchar *volatile **a3)
{
  __int16 v3 = a3;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (unsigned int *)(this + 4);
  atomic_fetch_add(this + 4, 1u);
  int v7 = *((unsigned __int16 *)a3 + 25);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA1D:
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a3, a2, (uint64_t)v87);
      if (!(_BYTE)v88) {
        goto LABEL_100;
      }
      WebKit::WebProcessProxy::cacheMediaMIMETypes((IPC::Encoder *)this, (uint64_t)v87);
      if (!(_BYTE)v88) {
        goto LABEL_100;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v87, v8);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA1E:
      uint64_t v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v25
        && (uint64_t v26 = (WTF::StringImpl *)v24,
            IPC::Decoder::decode<IPC::ConnectionHandle>((IPC::Decoder *)v3, &v94),
            BYTE4(v94)))
      {
        v87[0] = v26;
        WTF::MachSendRight::MachSendRight();
        LOBYTE(v88) = 1;
        if (BYTE4(v94)) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v94);
        }
      }
      else
      {
        LOBYTE(v87[0]) = 0;
        LOBYTE(v88) = 0;
        int v48 = *v3;
        uint64_t v49 = v3[1];
        unsigned char *v3 = 0;
        v3[1] = 0;
        char v50 = v3[3];
        if (!v50) {
          goto LABEL_100;
        }
        if (!v49) {
          goto LABEL_100;
        }
        (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v50 + 2))(v50, v48);
        if (!(_BYTE)v88) {
          goto LABEL_100;
        }
      }
      WebKit::WebProcessProxy::createGPUProcessConnection((uint64_t)this, (uint64_t)v87[0], (unint64_t)&v87[1]);
      if (!(_BYTE)v88) {
        goto LABEL_100;
      }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v87[1]);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA21:
      IPC::Decoder::decode<WebCore::RegistrableDomain>((IPC::Decoder *)a3, (uint64_t)v85);
      if (!LOBYTE(v85[1]))
      {
        int v22 = 0;
        LOBYTE(v87[0]) = 0;
        v91[0] = 0;
LABEL_87:
        char v51 = *v3;
        uint64_t v52 = v3[1];
        unsigned char *v3 = 0;
        v3[1] = 0;
        uint64_t v53 = v3[3];
        if (v53 && v52) {
          (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v53 + 2))(v53, v51);
        }
        goto LABEL_95;
      }
      IPC::Decoder::decode<WebCore::PrewarmInformation>((IPC::Decoder *)v3, v14, (uint64_t)&v94);
      int v16 = v98;
      if (v98)
      {
        if (!LOBYTE(v85[1])) {
          goto LABEL_160;
        }
        uint64_t v17 = v85[0];
        v85[0] = 0;
        char v18 = v94;
        CFStringRef v94 = 0;
        v87[0] = v17;
        v87[1] = v18;
        uint64_t v19 = v95;
        unsigned int v95 = 0;
        CFStringRef v88 = v19;
        uint64_t v20 = v96;
        uint64_t v96 = 0;
        uint64_t v89 = v20;
        uint64_t v21 = v97;
        uint64_t v97 = 0;
        int v22 = 1;
        uint64_t v90 = v21;
      }
      else
      {
        int v22 = 0;
        LOBYTE(v87[0]) = 0;
      }
      v91[0] = v22;
      std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94, v15);
      if (LOBYTE(v85[1]))
      {
        double v71 = v85[0];
        v85[0] = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2) {
            WTF::StringImpl::destroy(v71, v56);
          }
          else {
            *(_DWORD *)v71 -= 2;
          }
        }
      }
      if (!v16) {
        goto LABEL_87;
      }
LABEL_95:
      if (!v22) {
        goto LABEL_100;
      }
      WebKit::WebProcessProxy::didCollectPrewarmInformation((uint64_t)this, v87, (uint64_t)&v87[1]);
      if (!v91[0]) {
        goto LABEL_100;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v57);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87[1], v58);
      uint64_t v60 = v87[0];
      v87[0] = 0;
      if (!v60) {
        goto LABEL_100;
      }
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_100;
      }
      WTF::StringImpl::destroy(v60, v59);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA22:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a3, (uint64_t)v87);
      if (!(_BYTE)v88) {
        goto LABEL_52;
      }
      uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!v28) {
        goto LABEL_52;
      }
      if (!(_BYTE)v88)
      {
LABEL_160:
        __break(1u);
LABEL_161:
        uint64_t v77 = 0;
        uint64_t v78 = *v3;
        uint64_t v79 = v3[1];
        unsigned char *v3 = 0;
        v3[1] = 0;
        int v80 = v3[3];
        if (v80)
        {
          if (v79) {
            (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v80 + 2))(v3[3], v78);
          }
          uint64_t v77 = v3[3];
        }
        uint64_t v81 = *v3;
        uint64_t v82 = v3[1];
        unsigned char *v3 = 0;
        v3[1] = 0;
        if (v77 && v82) {
          (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v77 + 2))(v77, v81);
        }
        goto LABEL_101;
      }
      WebKit::WebProcessProxy::didDestroyFrame((uint64_t)this, (uint64_t)a2, (uint64_t)v87[0], (uint64_t)v87[1], v27);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA23:
      uint64_t v29 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (!v30) {
        goto LABEL_52;
      }
      uint64_t v31 = v29;
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)v3, (uint64_t)v87);
      if (!(_BYTE)v88) {
        goto LABEL_52;
      }
      WebKit::WebProcessProxy::didDestroyUserGestureToken((uint64_t)this, v31, (uint64_t)v87[0], (uint64_t)v87[1]);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA24:
      WebKit::WebProcessProxy::didExceedActiveMemoryLimit((WebKit::WebProcessProxy *)this);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA25:
      WebKit::WebProcessProxy::didExceedCPULimit(this);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA26:
      WebKit::WebProcessProxy::didExceedInactiveMemoryLimit((WebKit::WebProcessProxy *)this);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA27:
      unint64_t v36 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (!v37) {
        goto LABEL_100;
      }
      WebKit::WebProcessProxy::didExceedMemoryFootprintThreshold((WebKit::WebProcessProxy *)this, v36);
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA28:
      WebKit::BackgroundProcessResponsivenessTimer::didReceiveBackgroundResponsivenessPong((WebKit::BackgroundProcessResponsivenessTimer *)(this + 104));
      if (this) {
        goto LABEL_101;
      }
      return;
    case 0xA29:
      uint64_t v10 = *((void *)this + 17);
      if (v10 && *(unsigned char *)(v10 + 104) || !*((void *)this + 18)) {
        goto LABEL_101;
      }
      int v11 = this[164] + 1;
      goto LABEL_25;
    case 0xA2A:
      uint64_t v23 = *((void *)this + 17);
      if ((!v23 || !*(unsigned char *)(v23 + 104)) && *((void *)this + 18))
      {
        int v11 = this[164] - 1;
LABEL_25:
        this[164] = v11;
      }
      goto LABEL_101;
    case 0xA2B:
      uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v13) {
        goto LABEL_52;
      }
      WebKit::WebProcessProxy::gpuProcessConnectionDidBecomeUnresponsive(this, v12);
      if (!this) {
        return;
      }
      goto LABEL_101;
    case 0xA2D:
      unsigned __int16 v9 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v9 > 0xFFu)
      {
        *((unsigned char *)this + 76std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v9 != 0;
        goto LABEL_101;
      }
LABEL_52:
      id v32 = *v3;
      char v33 = v3[1];
      unsigned char *v3 = 0;
      v3[1] = 0;
      char v34 = v3[3];
      if (v34) {
        BOOL v35 = v33 == 0;
      }
      else {
        BOOL v35 = 1;
      }
      if (!v35)
      {
        (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v34 + 2))(v34, v32);
        if (this) {
          goto LABEL_101;
        }
        return;
      }
LABEL_100:
      if (!this) {
        return;
      }
      goto LABEL_101;
    case 0xA32:
      WebKit::ResponsivenessTimer::stop((unsigned char *)this + 56);
      if (!this) {
        return;
      }
      goto LABEL_101;
    case 0xA34:
      IPC::Decoder::decode<std::tuple<WebKit::BackForwardListItemState>>((IPC::Decoder *)a3, v87);
      if (v93) {
        WebKit::WebProcessProxy::updateBackForwardItem((WebKit::WebProcessProxy *)this, (BackForwardListItemState *)v87);
      }
      std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v87);
      if (!this) {
        return;
      }
      goto LABEL_101;
    default:
      int v38 = *((unsigned __int8 *)this + 1111);
      if (v7 == 2591 && v38 != 0)
      {
        uint64_t v46 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((IPC::Decoder *)a3);
        if (v47) {
          WebKit::WebProcessProxy::createSpeechRecognitionServer((uint64_t)this, v46);
        }
LABEL_101:
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
        return;
      }
      if (v7 == 2592 && v38 != 0)
      {
        uint64_t v54 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((IPC::Decoder *)a3);
        if (v55) {
          WebKit::WebProcessProxy::destroySpeechRecognitionServer((uint64_t)this, v54);
        }
        goto LABEL_101;
      }
      break;
  }
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA2C:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::String>>((IPC::Decoder *)a3, v87);
      if (v91[8])
      {
        uint64_t v42 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if ((_BYTE)v41)
        {
          CFStringRef v94 = (WTF::StringImpl *)v42;
          __int16 v3 = &v95;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v95, (atomic_uchar *volatile *)a2);
          __int16 v43 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)__int16 v43 = &unk_1EEA0C408;
          *((void *)v43 + 1) = v94;
          uint64_t v44 = v95;
          unsigned int v95 = 0;
          *((void *)v43 + 2) = v44;
          v85[0] = v43;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v95);
          if (!v91[8]) {
            goto LABEL_160;
          }
          WebKit::WebProcessProxy::getNotifications((uint64_t)this, (WebCore::SecurityOriginData *)v87, (const WTF::StringImpl *)v91, (uint64_t *)v85);
          __int16 v45 = v85[0];
          v85[0] = 0;
          if (v45) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v45 + 8))(v45);
          }
        }
      }
      std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v87, v41);
      goto LABEL_101;
    case 0xA2F:
      if ((unsigned __int16)IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_161;
      }
      WebCore::CaptionUserPreferencesMediaAF::platformSetCaptionDisplayMode();
      goto LABEL_101;
    case 0xA30:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)v87);
      if (LOBYTE(v87[1]))
      {
        WebKit::WebProcessProxy::setCaptionLanguage((WebKit::WebProcessProxy *)this, (const WTF::String *)v87);
        if (LOBYTE(v87[1]))
        {
          id v62 = v87[0];
          v87[0] = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2) {
              WTF::StringImpl::destroy(v62, v61);
            }
            else {
              *(_DWORD *)v62 -= 2;
            }
          }
        }
      }
      goto LABEL_101;
    case 0xA33:
      PAL::systemBeep((PAL *)this);
      goto LABEL_101;
    default:
      if (v7 == 2606 && *((unsigned char *)this + 1093))
      {
        IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((IPC::Decoder *)a3, &v83);
        if (v84 && (IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v3, &v94), v98))
        {
          IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)v3, (uint64_t)v85);
          int v63 = v86;
          if (v86)
          {
            if (!v84 || !v98) {
              goto LABEL_160;
            }
            *(_OWORD *)uint64_t v87 = v83;
            LOBYTE(v88) = 0;
            *(_DWORD *)uint64_t v91 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v88, (uint64_t)&v94);
            *(_OWORD *)&v91[8] = *(_OWORD *)v85;
            int v63 = 1;
          }
          else
          {
            LOBYTE(v87[0]) = 0;
          }
          unsigned __int8 v92 = v63;
          if (v98 && v97 != -1)
          {
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EEA0C420[v97])(v85, &v94);
            int v63 = v92;
          }
          if (v63)
          {
LABEL_149:
            uint64_t v75 = (WTF::StringImpl **)&v88;
            WebKit::WebProcessProxy::setAppBadge((uint64_t)this, (uint64_t)v87[0], (uint64_t)v87[1], (uint64_t)&v88, *(uint64_t *)&v91[8], *(uint64_t *)&v91[16]);
            if (!v92) {
              goto LABEL_101;
            }
            uint64_t v76 = *(unsigned int *)v91;
            goto LABEL_158;
          }
        }
        else
        {
          LOBYTE(v87[0]) = 0;
          unsigned __int8 v92 = 0;
        }
        uint64_t v68 = *v3;
        char v69 = v3[1];
        unsigned char *v3 = 0;
        v3[1] = 0;
        uint64_t v70 = v3[3];
        if (!v70) {
          goto LABEL_101;
        }
        if (!v69) {
          goto LABEL_101;
        }
        (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v70 + 2))(v70, v68);
        if (!v92) {
          goto LABEL_101;
        }
        goto LABEL_149;
      }
      if (v7 != 2609 || !*((unsigned char *)this + 1093)) {
        goto LABEL_101;
      }
      uint64_t v64 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (v65
        && (uint64_t v66 = (WTF::StringImpl *)v64, IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v3, &v94), v98))
      {
        IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)v3, (uint64_t)v85);
        int v67 = v86;
        if (v86)
        {
          if (!v98) {
            goto LABEL_160;
          }
          v87[0] = v66;
          LOBYTE(v87[1]) = 0;
          LODWORD(v9std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87[1], (uint64_t)&v94);
          *(_OWORD *)uint64_t v91 = *(_OWORD *)v85;
          int v67 = 1;
        }
        else
        {
          LOBYTE(v87[0]) = 0;
        }
        v91[16] = v67;
        if (v98 && v97 != -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EEA0C420[v97])(v85, &v94);
          int v67 = v91[16];
        }
        if (v67) {
          goto LABEL_156;
        }
      }
      else
      {
        LOBYTE(v87[0]) = 0;
        v91[16] = 0;
      }
      uint64_t v72 = *v3;
      uint64_t v73 = v3[1];
      unsigned char *v3 = 0;
      v3[1] = 0;
      unint64_t v74 = v3[3];
      if (!v74) {
        goto LABEL_101;
      }
      if (!v73) {
        goto LABEL_101;
      }
      (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v74 + 2))(v74, v72);
      if (!v91[16]) {
        goto LABEL_101;
      }
LABEL_156:
      uint64_t v75 = &v87[1];
      WebKit::WebProcessProxy::setClientBadge((uint64_t)this, (uint64_t)v87[0], (uint64_t)&v87[1], *(uint64_t *)v91, *(uint64_t *)&v91[8]);
      if (!v91[16]) {
        goto LABEL_101;
      }
      uint64_t v76 = v90;
LABEL_158:
      if (v76 != -1) {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EEA0C420[v76])(&v94, v75);
      }
      goto LABEL_101;
  }
}

void IPC::Decoder::decode<IPC::ConnectionHandle>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[4]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1986E1AA0(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 4)) {
    WTF::MachSendRight::~MachSendRight(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<IPC::ConnectionHandle,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::takeLastAttachment(a1, v5);
  if (*(void *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    a2[4] = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *a2 = 0;
    a2[4] = 0;
  }
  if (v6) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
}

void sub_1986E1B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12, __int16 a13, char a14)
{
  if (a14) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  }
  _Unwind_Resume(a1);
}

void WebKit::WebProcessProxy::createGPUProcessConnection(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v16 = 0;
  LOBYTE(v19) = 0;
  char v21 = 0;
  long long v17 = 0u;
  memset(v18, 0, sizeof(v18));
  int v22 = 0;
  WebCore::ProcessIdentity::operator=();
  long long v6 = *(_OWORD *)(a1 + 1096);
  long long v17 = *(_OWORD *)(a1 + 1080);
  *(_OWORD *)char v18 = v6;
  *(void *)&v18[16] = *(void *)(a1 + 1112);
  v18[24] = *(unsigned char *)(a1 + 779);
  *(void *)(a1 + 1152) = a2;
  uint64_t v7 = *(void *)(a1 + 512);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = v8 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFRetain(*(CFTypeRef *)(v9 + 8));
  uint64_t v10 = *(void *)(v9 + 48);
  int v11 = (long long *)(v10 + 100);
  if (v21 == *(unsigned char *)(v10 + 132))
  {
    if (v21)
    {
      long long v12 = *(_OWORD *)(v10 + 116);
      long long v19 = *v11;
      long long v20 = v12;
    }
  }
  else if (v21)
  {
    char v21 = 0;
  }
  else
  {
    long long v13 = *(_OWORD *)(v10 + 116);
    long long v19 = *v11;
    long long v20 = v13;
    char v21 = 1;
  }
  uint64_t v14 = WebKit::WebProcessPool::ensureGPUProcess((WebKit::WebProcessPool *)v9);
  uint64_t v15 = (unsigned int *)(v14 + 16);
  atomic_fetch_add((atomic_uint *volatile)(v14 + 16), 1u);
  WebKit::GPUProcessProxy::createGPUProcessConnection(v14, a1, a3, (uint64_t)&v16);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v15);
  CFRelease(*(CFTypeRef *)(v9 + 8));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v16);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0,void,WebKit::NetworkProcessConnectionInfo &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9E63E8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  unint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  long long v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebsiteDataStore::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&,WebKit::WebsiteDataStore::ShouldRetryOnFailure)::$_0,void,WebKit::NetworkProcessConnectionInfo &>::call(uint64_t a1, _DWORD *a2)
{
  if ((*a2 - 1) >= 0xFFFFFFFE)
  {
    if (*(unsigned char *)(a1 + 40) && (uint64_t v5 = *(void *)(a1 + 24)) != 0 && *(void *)(v5 + 8))
    {
      WTF::RunLoop::main((WTF::RunLoop *)a1);
      long long v6 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = 0u;
      long long v11 = *(_OWORD *)(a1 + 24);
      long long v12 = v6;
      *(_OWORD *)(a1 + 24) = 0u;
      uint64_t v7 = WTF::fastMalloc((WTF *)0x28);
      *(void *)uint64_t v7 = &unk_1EE9E6410;
      *(_OWORD *)(v7 + 8) = v12;
      *(_OWORD *)(v7 + 24) = v11;
      *(void *)buf = v7;
      WTF::RunLoop::dispatch();
      uint64_t v8 = *(void *)buf;
      *(void *)buf = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
    else
    {
      uint64_t v9 = qword_1EB358960;
      if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1985F2000, v9, OS_LOG_TYPE_ERROR, "getNetworkProcessConnection: Failed to get connection to network process, will reply invalid identifier ...", buf, 2u);
      }
      *(_DWORD *)buf = 0;
      uint8_t buf[4] = 0;
      char v14 = 0;
      char v15 = 0;
      uint64_t v10 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 16))(v10, buf);
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v4 = *(void (**)(uint64_t))(*(void *)v3 + 8);
    v4(v3);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy27GetNetworkProcessConnectionEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvONS7_28NetworkProcessConnectionInfoEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0C468;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages15WebProcessProxy27GetNetworkProcessConnectionEN6WebKit15WebProcessProxyES8_FvONS_17CompletionHandlerIFvONS7_28NetworkProcessConnectionInfoEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::NetworkProcessConnectionInfo,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E20F8);
    }
    *uint64_t result = 1;
    if (*(unsigned char *)(a2 + 32))
    {
      for (uint64_t i = 0; i != 32; i += 4)
        uint64_t result = (unsigned char *)IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + i));
    }
    else
    {
      uint64_t v8 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E2118);
    }
    *uint64_t result = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::StreamServerConnectionHandle::StreamServerConnectionHandle(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

{
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

void sub_1986E21EC(_Unwind_Exception *a1)
{
  WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::decode<IPC::Decoder>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      char v14 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v8 = v14[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v8 = v3;
    uint64_t v9 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      long long v13 = a1;
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
        a1 = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12 && v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v4);
    }
    goto LABEL_14;
  }
  if (v7)
  {
    IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)a1, (uint64_t)v15);
    if (v17)
    {
      WTF::MachSendRight::MachSendRight();
      *(void *)(a2 + 8) = v16;
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_7;
    }
LABEL_14:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  v15[0] = 0;
  char v17 = 0;
  std::__optional_move_base<WebCore::SharedMemoryHandle,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v15);
LABEL_7:
  *(unsigned char *)(a2 + 24) = 1;
  if (v17) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v15);
  }
}

void sub_1986E23D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::SharedMemoryHandle>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a2 + 16)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1986E242C(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 16)) {
    WTF::MachSendRight::~MachSendRight(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::takeLastAttachment(a1, v13);
  if (*(void *)a1 && v14)
  {
    unint64_t v4 = *((void *)a1 + 1);
    unint64_t v5 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
    if (v4 >= v5 && v4 - v5 > 7)
    {
      *((void *)a1 + 2) = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
      WebCore::SharedMemoryHandle::SharedMemoryHandle();
      WTF::MachSendRight::MachSendRight();
      *(void *)(a2 + 8) = v12;
      *(unsigned char *)(a2 + 16) = 1;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
      goto LABEL_9;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        uint64_t v8 = *(void *)a1;
        uint64_t v9 = *((void *)a1 + 1);
        uint64_t v10 = *((void *)a1 + 3);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        if (v10)
        {
          if (v9)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
            if (*(void *)a1)
            {
              __break(1u);
              return;
            }
          }
        }
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
LABEL_9:
  if (v14) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
  }
}

void sub_1986E2578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, __int16 a13, char a14, char a15)
{
  if (a14) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::NetworkProcessConnectionInfo,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  char v5 = *(unsigned char *)(a2 + 4);
  IPC::Encoder::operator<<<BOOL>(a1, &v5);
  return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken>>(a1, a2 + 8);
}

uint64_t WebKit::WebProcess::initializeWebProcess(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  MEMORY[0x1997329C0](v99, 0);
  uint64_t v6 = *a3;
  *a3 = 0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v98, (const WTF::MachSendRight *)v99);
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)bytes, (const WTF::MachSendRight *)&v98);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 16))(v6, bytes);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)bytes);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v98);
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v99);
  if (*(unsigned char *)(a2 + 616)) {
    WebKit::WebProcess::setWebsiteDataStoreParameters((WebKit::WebProcess *)a1, a2 + 464);
  }
  WebCore::setPresentingApplicationPID((WebCore *)*(unsigned int *)(a2 + 368));
  WebKit::WebProcess::platformInitializeWebProcess((WebKit::WebProcess *)a1, (WebKit::WebProcessCreationParameters *)a2);
  IsUserInteractive = (WTF::MemoryPressureHandler *)WTF::Thread::setCurrentThreadIsUserInteractive((WTF::Thread *)0xFFFFFFFFLL);
  int v8 = *(unsigned __int8 *)(a2 + 334);
  *(unsigned char *)(a1 + 592) = v8;
  if (!v8)
  {
    uint64_t v9 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(IsUserInteractive);
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v10 = &unk_1EE9E7068;
    v10[1] = a1;
    uint64_t v11 = *((void *)v9 + 6);
    *((void *)v9 + 6) = v10;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v12 = &unk_1EE9E7090;
    v12[1] = a1;
    uint64_t v13 = *((void *)v9 + 4);
    *((void *)v9 + 4) = v12;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    char v14 = (void *)WTF::fastMalloc((WTF *)0x10);
    *char v14 = &unk_1EE9E70B8;
    v14[1] = a1;
    uint64_t v15 = *((void *)v9 + 5);
    *((void *)v9 + 5) = v14;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    WTF::MemoryPressureHandler::install(v9);
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v16 = &unk_1EE9E7108;
    *(void *)bytes = v16;
    PAL::registerNotifyCallback();
    uint64_t v17 = *(void *)bytes;
    *(void *)bytes = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  char v18 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v18 = &unk_1EE9E7130;
  v18[1] = a1;
  *(void *)bytes = v18;
  PAL::registerNotifyCallback();
  uint64_t v20 = *(void *)bytes;
  *(void *)bytes = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  WebKit::SandboxExtension::consumePermanently(a2 + 48, v19);
  uint64_t v21 = *(void *)(a2 + 32);
  if (v21 && *(_DWORD *)(v21 + 4))
  {
    int v22 = *(const void **)(a2 + 64);
    *(void *)bytes = &unk_1EE9E6F38;
    WebKit::UserData::transform(v22, (uint64_t)bytes, &v98);
    WebKit::InjectedBundle::create(a2, &v98, (uint64_t *)bytes);
    uint64_t v23 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = *(void *)bytes;
    if (v23) {
      CFRelease(*(CFTypeRef *)(v23 + 8));
    }
    uint64_t v24 = v98;
    uint64_t v98 = 0;
    if (v24) {
      CFRelease(*(CFTypeRef *)(v24 + 8));
    }
  }
  char v25 = *(void **)(a1 + 272);
  uint64_t v26 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v25);
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  if (v25) {
    v25 += 3 * *((unsigned int *)v25 - 1);
  }
  if (v25 != v26)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)v27[2] + 24))(v27[2], a2);
      while (1)
      {
        v27 += 3;
        if (v27 == v29) {
          break;
        }
        if (*v27) {
          BOOL v30 = *v27 == -1;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30) {
          goto LABEL_29;
        }
      }
      uint64_t v27 = v29;
LABEL_29:
      ;
    }
    while (v27 != v25);
  }
  WebKit::RemoteMediaPlayerManager::initialize(*(void *)(a1 + 384), (const WebKit::WebProcessCreationParameters *)a2);
  CanRequest = (WTF::StringImpl *)WebKit::WebProcess::setCacheModel(a1, (WTF *)*(unsigned __int8 *)(a2 + 312));
  uint64_t v34 = *(void *)(a2 + 784);
  if (v34 && *(_DWORD *)(v34 + 4)) {
    CanRequest = (WTF::StringImpl *)WTF::setTimeZoneOverride();
  }
  if (*(_DWORD *)(a2 + 308)) {
    CanRequest = (WTF::StringImpl *)WTF::overrideUserPreferredLanguages();
  }
  *(unsigned char *)(a1 + 28std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = *(unsigned char *)(a2 + 343);
  *(unsigned char *)(a1 + 258) = *(unsigned char *)(a2 + 336);
  *(_WORD *)(a1 + 259) = *(_WORD *)(a2 + 337);
  uint64_t v35 = *(unsigned int *)(a2 + 100);
  if (v35)
  {
    unint64_t v36 = *(WebCore::LegacySchemeRegistry **)(a2 + 88);
    uint64_t v37 = 8 * v35;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsEmptyDocument(v36, v32);
      unint64_t v36 = (WebCore::LegacySchemeRegistry *)((char *)v36 + 8);
      v37 -= 8;
    }
    while (v37);
  }
  uint64_t v38 = *(unsigned int *)(a2 + 116);
  if (v38)
  {
    long long v39 = *(WebCore::LegacySchemeRegistry **)(a2 + 104);
    uint64_t v40 = 8 * v38;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(v39, v32);
      long long v39 = (WebCore::LegacySchemeRegistry *)((char *)v39 + 8);
      v40 -= 8;
    }
    while (v40);
  }
  uint64_t v41 = *(unsigned int *)(a2 + 132);
  if (v41)
  {
    uint64_t v42 = *(WebCore::LegacySchemeRegistry **)(a2 + 120);
    uint64_t v43 = 8 * v41;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(v42, v32);
      uint64_t v42 = (WebCore::LegacySchemeRegistry *)((char *)v42 + 8);
      v43 -= 8;
    }
    while (v43);
  }
  uint64_t v44 = *(unsigned int *)(a2 + 148);
  if (v44)
  {
    uint64_t v45 = *(void *)(a2 + 136);
    uint64_t v46 = 8 * v44;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme((WebCore::LegacySchemeRegistry *)1, v45, v33);
      v45 += 8;
      v46 -= 8;
    }
    while (v46);
  }
  uint64_t v47 = *(unsigned int *)(a2 + 164);
  if (v47)
  {
    int v48 = *(WebCore::LegacySchemeRegistry **)(a2 + 152);
    uint64_t v49 = 8 * v47;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(v48, v32);
      int v48 = (WebCore::LegacySchemeRegistry *)((char *)v48 + 8);
      v49 -= 8;
    }
    while (v49);
  }
  uint64_t v50 = *(unsigned int *)(a2 + 180);
  if (v50)
  {
    char v51 = *(WebCore::LegacySchemeRegistry **)(a2 + 168);
    uint64_t v52 = 8 * v50;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess(v51, v32);
      char v51 = (WebCore::LegacySchemeRegistry *)((char *)v51 + 8);
      v52 -= 8;
    }
    while (v52);
  }
  uint64_t v53 = *(unsigned int *)(a2 + 196);
  if (v53)
  {
    uint64_t v54 = *(WebCore::LegacySchemeRegistry **)(a2 + 184);
    uint64_t v55 = 8 * v53;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsDisplayIsolated(v54, v32);
      uint64_t v54 = (WebCore::LegacySchemeRegistry *)((char *)v54 + 8);
      v55 -= 8;
    }
    while (v55);
  }
  uint64_t v56 = *(unsigned int *)(a2 + 212);
  if (v56)
  {
    int v57 = *(WebCore::LegacySchemeRegistry **)(a2 + 200);
    uint64_t v58 = 8 * v56;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(v57, v32);
      int v57 = (WebCore::LegacySchemeRegistry *)((char *)v57 + 8);
      v58 -= 8;
    }
    while (v58);
  }
  uint64_t v59 = *(unsigned int *)(a2 + 228);
  if (v59)
  {
    uint64_t v60 = *(WebCore::LegacySchemeRegistry **)(a2 + 216);
    uint64_t v61 = 8 * v59;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsAlwaysRevalidated(v60, v32);
      uint64_t v60 = (WebCore::LegacySchemeRegistry *)((char *)v60 + 8);
      v61 -= 8;
    }
    while (v61);
  }
  uint64_t v62 = *(unsigned int *)(a2 + 244);
  if (v62)
  {
    int v63 = *(WebCore::LegacySchemeRegistry **)(a2 + 232);
    uint64_t v64 = 8 * v62;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerURLSchemeAsCachePartitioned(v63, v32);
      int v63 = (WebCore::LegacySchemeRegistry *)((char *)v63 + 8);
      v64 -= 8;
    }
    while (v64);
  }
  uint64_t v65 = *(unsigned int *)(a2 + 260);
  if (v65)
  {
    uint64_t v66 = *(WebCore::LegacySchemeRegistry **)(a2 + 248);
    uint64_t v67 = 8 * v65;
    do
    {
      CanRequest = (WTF::StringImpl *)WebCore::LegacySchemeRegistry::registerAsCanDisplayOnlyIfCanRequest(v66, v32);
      uint64_t v66 = (WebCore::LegacySchemeRegistry *)((char *)v66 + 8);
      v67 -= 8;
    }
    while (v67);
  }
  uint64_t v68 = *(unsigned int *)(a2 + 276);
  if (v68)
  {
    char v69 = *(WTF::StringImpl ***)(a2 + 264);
    uint64_t v70 = 8 * v68;
    do
    {
      double v71 = *v69;
      if (*v69) {
        *(_DWORD *)v71 += 2;
      }
      uint64_t v97 = v71;
      WebKit::WebExtensionMatchPattern::registerCustomURLScheme((uint64_t *)&v97);
      CanRequest = v97;
      uint64_t v97 = 0;
      if (CanRequest)
      {
        if (*(_DWORD *)CanRequest == 2) {
          CanRequest = (WTF::StringImpl *)WTF::StringImpl::destroy(CanRequest, v72);
        }
        else {
          *(_DWORD *)CanRequest -= 2;
        }
      }
      ++v69;
      v70 -= 8;
    }
    while (v70);
  }
  uint64_t v73 = (WebCore::BackForwardCache *)WebCore::ResourceRequestBase::setDefaultTimeoutInterval(CanRequest, *(double *)(a2 + 320));
  unint64_t v74 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v73);
  WebCore::BackForwardCache::setMaxSize(v74);
  WebCore::FontCascade::setCodePath();
  uint64_t v75 = (WebKit::WebProcess *)WebCore::FontCascade::setDisableFontSubpixelAntialiasingForTesting((WebCore::FontCascade *)*(unsigned __int8 *)(a2 + 335));
  uint64_t v76 = (WebCore::DeprecatedGlobalSettings *)WebKit::WebProcess::setMemoryCacheDisabled(v75, *(unsigned __int8 *)(a2 + 339));
  char v77 = *(unsigned char *)(a2 + 340);
  *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared(v76) + 23) = v77;
  uint64_t v78 = *MEMORY[0x1E4FB64D8];
  if (!*MEMORY[0x1E4FB64D8]) {
    uint64_t v78 = WebCore::commonVMSlow(0);
  }
  *(unsigned char *)(v78 + 93506) = *(unsigned char *)(a2 + 341);
  uint64_t v79 = (WebCore::DeprecatedGlobalSettings *)WebCore::ScriptExecutionContext::setCrossOriginMode();
  if (!*(unsigned char *)(a1 + 619))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_107:
    qword_1EB35A910 = 0;
    unk_1EB35A918 = 0;
    byte_1EB35A920 = 0;
    WebKit::WebGamepadProvider::singleton(void)::provider = (uint64_t)&unk_1EE9F0318;
    xmmword_1EB35A928 = 0u;
    unk_1EB35A938 = 0u;
    xmmword_1EB35A948 = 0u;
    *((unsigned char *)v86 + 2392) = 1;
    goto LABEL_90;
  }
  char v80 = *(unsigned char *)(a1 + 618) ^ 1;
  *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared(v79) + 28) = v80;
  uint64_t v81 = *(Inspector::RemoteInspector **)(*(void *)(a1 + 40) + 352);
  if (v81)
  {
    xpc_connection_get_audit_token();
    char v105 = 1;
    uint64_t v82 = CFDataCreate(0, bytes, 32);
    long long v83 = (WebCore *)Inspector::RemoteInspector::singleton(v82);
    WebCore::presentingApplicationPID(v83);
    if (v82) {
      CFRetain(v82);
    }
    Inspector::RemoteInspector::setParentProcessInformation();
    uint64_t v81 = v82;
    if (v82)
    {
      CFRelease(v82);
      CFRelease(v82);
    }
  }
  if (*(_DWORD *)(a2 + 84))
  {
    char v84 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(v81);
    uint64_t v81 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::connectToWebInspector(v84);
  }
  WebCore::GamepadProvider::singleton(v81);
  unsigned __int8 v86 = &qword_1EB35A000;
    goto LABEL_107;
LABEL_90:
  WebCore::GamepadProvider::setSharedProvider((WebCore::GamepadProvider *)&WebKit::WebGamepadProvider::singleton(void)::provider, v85);
  {
    byte_1EB35A9A0 = 0;
    WebKit::WebServiceWorkerProvider::singleton(void)::provider = (uint64_t)&unk_1EE9F4AB8;
  }
  WebCore::ServiceWorkerProvider::setSharedProvider();
  {
    WebKit::WebSharedWorkerProvider::singleton(void)::provider = (uint64_t)&unk_1EE9F4C48;
  }
  uint64_t v87 = (WTF::MemoryPressureHandler *)WebCore::SharedWorkerProvider::setSharedProvider();
  WebKit::WebResourceLoadObserver::shouldLogUserInteraction = *(unsigned char *)(a2 + 456);
  if (*(_DWORD *)(a1 + 596) == 2)
  {
    CFStringRef v88 = (unsigned __int8 *)WTF::MemoryPressureHandler::singleton(v87);
    int v89 = atomic_load(v88 + 4);
    if (v89 == 2 || v88[7])
    {
      uint64_t v96 = qword_1EB358280;
      if (os_log_type_enabled((os_log_t)qword_1EB358280, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)bytes = 0;
        _os_log_impl(&dword_1985F2000, v96, OS_LOG_TYPE_DEFAULT, "WebProcess::prewarmGlobally: Not prewarming because the system in under memory pressure", bytes, 2u);
      }
    }
    else
    {
      WebCore::ProcessWarming::prewarmGlobally((WebCore::ProcessWarming *)v88);
    }
  }
  WebCore::Quirks::updateStorageAccessUserAgentStringQuirks();
  WebKit::WebProcess::updateDomainsWithStorageAccessQuirks(a1, (WTF::StringImpl *)(a2 + 800), v90);
  WebCore::NavigatorGamepad::setGamepadsRecentlyAccessedThreshold();
  uint64_t v91 = qword_1EB358960;
  BOOL v92 = os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT);
  if (v92)
  {
    if (*(unsigned char *)(a1 + 672)) {
      uint64_t v93 = *(void *)(a1 + 664);
    }
    else {
      uint64_t v93 = 0;
    }
    int v94 = WebCore::presentingApplicationPID((WebCore *)v92);
    *(_DWORD *)bytes = 134218496;
    *(void *)&bytes[4] = a1;
    __int16 v101 = 2048;
    uint64_t v102 = v93;
    __int16 v103 = 1024;
    int v104 = v94;
    _os_log_impl(&dword_1985F2000, v91, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::initializeWebProcess: Presenting processPID=%d", bytes, 0x1Cu);
  }
  return kdebug_trace();
}

uint64_t WebKit::RemoteMediaPlayerManager::initialize(uint64_t this, const WebKit::WebProcessCreationParameters *a2)
{
  if (*((_DWORD *)a2 + 109))
  {
    unint64_t v3 = WebKit::RemoteMediaPlayerManager::typeCache(this, 0);
    this = WebKit::RemoteMediaPlayerMIMETypeCache::isEmpty(v3);
    if (this)
    {
      return (uint64_t)WebKit::RemoteMediaPlayerMIMETypeCache::addSupportedTypes((WTF::StringImpl **)v3, (uint64_t)a2 + 424, v4);
    }
  }
  return this;
}

WTF::StringImpl **WebKit::WebNotificationManager::initialize(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)a2 + 51);
  if (v3 && (int v4 = *(_DWORD *)(v3 - 12)) != 0)
  {
    unsigned int v6 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v3 - 12));
    uint64_t v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
    int v8 = v7 + 4;
    void v7[2] = v6 - 1;
    v7[3] = v6;
    _DWORD *v7 = 0;
    v7[1] = v4;
    uint64_t v9 = (WTF::StringImpl **)*((void *)a2 + 51);
    uint64_t v10 = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::begin(v9);
    uint64_t v11 = v10;
    uint64_t v12 = (WTF::StringImpl **)a2;
    if (v9) {
      v9 += 2 * *((unsigned int *)v9 - 1);
    }
    if (v9 != v10)
    {
      do
      {
        int v14 = v7[2];
        unsigned int v15 = *((_DWORD *)*v11 + 4);
        if (v15 >= 0x100) {
          unsigned int v16 = v15 >> 8;
        }
        else {
          unsigned int v16 = WTF::StringImpl::hashSlowCase(*v11);
        }
        int v17 = 0;
        do
        {
          uint64_t v18 = v16 & v14;
          unsigned int v16 = ++v17 + v18;
        }
        while (*(void *)&v8[4 * v18]);
        WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,BOOL>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>((uint64_t)&v8[4 * v18], (WTF::StringImpl *)v11);
        while (1)
        {
          v11 += 2;
          if (v11 == v12) {
            break;
          }
          if ((unint64_t)*v11 + 1 > 1) {
            goto LABEL_17;
          }
        }
        uint64_t v11 = v12;
LABEL_17:
        ;
      }
      while (v11 != v9);
    }
  }
  else
  {
    int v8 = 0;
  }
  uint64_t result = *(WTF::StringImpl ***)(a1 + 32);
  *(void *)(a1 + 32) = v8;
  if (result)
  {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

unsigned int *WebKit::WebProcessProxy::addExistingWebPage(uint64_t a1, WebKit::WebPageProxy *a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 136);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    }
    uint64_t v9 = *((void *)a2 + 4);
    uint64_t v10 = *(void *)(v9 + 760);
    uint64_t v11 = *(void *)(v9 + 1928);
    *(_DWORD *)buf = 134219008;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    int v26 = v8;
    __int16 v27 = 2048;
    char v28 = a2;
    __int16 v29 = 2048;
    uint64_t v30 = v10;
    __int16 v31 = 2048;
    uint64_t v32 = v11;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::addExistingWebPage: webPage=%p, pageProxyID=%llu, webPageID=%llu", buf, 0x30u);
  }
  if (*(unsigned char *)(a1 + 712))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E3468);
  }
  if (*(unsigned char *)(a1 + 872))
  {
    uint64_t v12 = *(void *)(a1 + 552);
    if (v12)
    {
      BOOL v13 = *(_DWORD *)(v12 - 12) == 0;
      if (!a3) {
        goto LABEL_16;
      }
    }
    else
    {
      BOOL v13 = 1;
      if (!a3) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    BOOL v13 = 0;
    if (!a3) {
      goto LABEL_16;
    }
  }
  uint64_t v14 = *(void *)(a1 + 512);
  if (!v14 || (uint64_t v15 = *(void *)(v14 + 8)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E3488);
  }
  CFRetain(*(CFTypeRef *)(v15 - 8));
  unsigned int v16 = (CFTypeRef *)*((void *)a2 + 39);
  CFRetain(v16[1]);
  WebKit::WebProcessPool::pageBeginUsingWebsiteDataStore((WebKit::WebProcessPool *)(v15 - 16), a2, (WebKit::WebsiteDataStore *)v16);
  CFRelease(v16[1]);
  CFRelease(*(CFTypeRef *)(v15 - 8));
LABEL_16:
  if (!*(void *)(a1 + 1080)
    && WebKit::updateSharedPreferencesForWebProcess((unsigned char *)(a1 + 1080), (WebKit::WebPreferencesStore *)(*((void *)a2 + 34) + 40), v7))
  {
    ++*(void *)(a1 + 1080);
  }
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    *(_OWORD *)algn_1EB35A7B8 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, a1);
  uint64_t v22 = *(void *)(*((void *)a2 + 4) + 760);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebPageProxy&>((uint64_t)buf, (uint64_t *)(a1 + 552), &v22, (uint64_t)a2);
  {
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
  }
  uint64_t v22 = *(void *)(*((void *)a2 + 4) + 760);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebPageProxy&>((uint64_t)buf, &WebKit::WebProcessProxy::globalPageMap(void)::pageMap, &v22, (uint64_t)a2);
  uint64_t v17 = WebKit::WebProcessProxy::logger((WebKit::WebProcessProxy *)a1);
  char isAlwaysOnLoggingAllowed = WebKit::WebProcessProxy::isAlwaysOnLoggingAllowed((WebKit::WebProcessProxy *)a1);
  if (*(void *)(v17 + 16) == a1) {
    *(unsigned char *)(v17 + 12) = isAlwaysOnLoggingAllowed;
  }
  int shouldTakeNearSuspendedAssertion = WebKit::WebProcessProxy::shouldTakeNearSuspendedAssertion((WebKit::WebProcessProxy *)a1);
  WebKit::ProcessThrottler::setShouldTakeNearSuspendedAssertion((unsigned int *)(a1 + 200), shouldTakeNearSuspendedAssertion);
  int shouldDropNearSuspendedAssertionAfterDelay = WebKit::WebProcessProxy::shouldDropNearSuspendedAssertionAfterDelay((WebKit::WebProcessProxy *)a1);
  WebKit::ProcessThrottler::setShouldDropNearSuspendedAssertionAfterDelay(a1 + 200, shouldDropNearSuspendedAssertionAfterDelay);
  WebKit::WebProcessProxy::updateRegistrationWithDataStore((WebKit::WebProcessProxy *)a1);
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
  uint64_t result = WebKit::WebsiteDataStore::updateBlobRegistryPartitioningState(*(WebKit::WebsiteDataStore **)(a1 + 752));
  if (v13) {
    return (unsigned int *)WebKit::WebProcessProxy::didChangeThrottleState(a1, *(unsigned __int8 *)(a1 + 384));
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::WebPageProxy&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    uint64_t *v16 = v11;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4 + 16);
    uint64_t v21 = *(atomic_uint **)(a4 + 24);
    atomic_fetch_add(v21, 1u);
    uint64_t result = (uint64_t *)v16[1];
    v16[1] = (uint64_t)v21;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
    uint64_t v23 = *a2;
    if (*a2) {
      int v24 = *(_DWORD *)(v23 - 12) + 1;
    }
    else {
      int v24 = 1;
    }
    *(_DWORD *)(v23 - 12) = v24;
    uint64_t v26 = *a2;
    if (*a2) {
      int v27 = *(_DWORD *)(v26 - 12);
    }
    else {
      int v27 = 0;
    }
    uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
    unint64_t v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
      {
LABEL_23:
        uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(a2, v16);
        unsigned int v16 = result;
        uint64_t v26 = *a2;
        if (*a2) {
          unint64_t v29 = *(unsigned int *)(v26 - 4);
        }
        else {
          unint64_t v29 = 0;
        }
      }
    }
    else if (3 * v29 <= 4 * v28)
    {
      goto LABEL_23;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v26 + 16 * v29;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    unsigned int v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *uint64_t v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = *a3;
        unsigned int v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v8 + 16 * v25;
  *(unsigned char *)(a1 + 16) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4 + 16);
  __int16 v31 = *(atomic_uint **)(a4 + 24);
  atomic_fetch_add(v31, 1u);
  uint64_t result = *(uint64_t **)(*(void *)a1 + 8);
  *(void *)(*(void *)a1 + 8) = v31;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    return (uint64_t *)WTF::fastFree((WTF *)result, v30);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          int v27 = (unsigned int *)v26[1];
          v26[1] = 0;
          if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v10);
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(unsigned int **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v10);
          }
          if (v13 == a3) {
            unint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          unsigned int v16 = *(unsigned int **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v5, a2);
}

uint64_t WebKit::WebProcessProxy::didChangeThrottleState(uint64_t a1, int a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  WebKit::AuxiliaryProcessProxy::didChangeThrottleState(a1, a2);
  if (!*(unsigned char *)(a1 + 680)) {
    return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
  }
  int v4 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 136);
    if (v5) {
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    }
    *(_DWORD *)uint64_t v75 = 134218496;
    *(void *)&v75[4] = a1;
    *(_WORD *)uint64_t v76 = 1024;
    *(_DWORD *)&v76[2] = v5;
    __int16 v77 = 1024;
    int v78 = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState: type=%u", v75, 0x18u);
  }
  if (!*(unsigned char *)(a1 + 872) || (uint64_t v6 = *(void *)(a1 + 552)) != 0 && *(_DWORD *)(v6 - 12))
  {
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        if (!a2)
        {
          int v7 = qword_1EB358348;
          if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v8 = *(void *)(a1 + 136);
            if (v8) {
              LODWORD(v8) = *(_DWORD *)(v8 + 108);
            }
            *(_DWORD *)uint64_t v75 = 134218240;
            *(void *)&v75[4] = a1;
            *(_WORD *)uint64_t v76 = 1024;
            *(_DWORD *)&v76[2] = v8;
            _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState(Suspended) Release all assertions for network process", v75, 0x12u);
          }
          uint64_t v9 = *(void *)(a1 + 664);
          *(void *)(a1 + 664) = 0;
          if (v9)
          {
            int v10 = *(uint64_t **)v9;
            uint64_t v11 = *(void *)(v9 + 8) - 1;
            *(void *)(v9 + 8) = v11;
            if (v10)
            {
              uint64_t v12 = *v10;
              if (!*v10) {
                goto LABEL_23;
              }
              char v13 = *(unsigned char *)(v9 + 16);
              *(unsigned char *)(v9 + 16) = 1;
              (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
              *(unsigned char *)(v9 + 16) = v13;
              if (*(void *)v9) {
                goto LABEL_23;
              }
              uint64_t v11 = *(void *)(v9 + 8);
            }
            if (!v11) {
              MEMORY[0x199740C10](v9, 0x1020C40545B2139);
            }
          }
LABEL_23:
          uint64_t v14 = *(void *)(a1 + 672);
          *(void *)(a1 + 672) = 0;
          if (v14)
          {
            uint64_t v15 = *(uint64_t **)v14;
            uint64_t v16 = *(void *)(v14 + 8) - 1;
            *(void *)(v14 + 8) = v16;
            if (!v15) {
              goto LABEL_28;
            }
            uint64_t v17 = *v15;
            if (*v15)
            {
              char v18 = *(unsigned char *)(v14 + 16);
              *(unsigned char *)(v14 + 16) = 1;
              (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, 0);
              *(unsigned char *)(v14 + 16) = v18;
              if (!*(void *)v14)
              {
                uint64_t v16 = *(void *)(v14 + 8);
LABEL_28:
                if (!v16) {
                  MEMORY[0x199740C10](v14, 0x1020C40545B2139);
                }
              }
            }
          }
          WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)a1, (uint64_t)v75);
          if (*(_DWORD *)v76)
          {
            unint64_t v20 = *(CFTypeRef ***)v75;
            uint64_t v21 = 8 * *(unsigned int *)v76;
            do
            {
              unsigned int v22 = *v20++;
              CFRetain(v22[1]);
              WebKit::WebPageProxy::processWillBecomeSuspended((WebKit::WebPageProxy *)v22, v23, v24);
              CFRelease(v22[1]);
              v21 -= 8;
            }
            while (v21);
          }
LABEL_80:
          WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v75, v19);
        }
LABEL_81:
        WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
        return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
      }
      uint64_t v59 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = *(void *)(a1 + 136);
        if (v60) {
          LODWORD(v6std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = *(_DWORD *)(v60 + 108);
        }
        *(_DWORD *)uint64_t v75 = 134218240;
        *(void *)&v75[4] = a1;
        *(_WORD *)uint64_t v76 = 1024;
        *(_DWORD *)&v76[2] = v60;
        _os_log_impl(&dword_1985F2000, v59, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState(Background) Taking background assertion for network process", v75, 0x12u);
      }
      uint64_t v61 = *(void *)(*(void *)(a1 + 512) + 8);
      if (v61) {
        uint64_t v62 = v61 - 16;
      }
      else {
        uint64_t v62 = 0;
      }
      uint64_t v63 = *(void *)(v62 + 752);
      if (v63)
      {
        uint64_t v64 = *(void **)v63;
        ++*(void *)(v63 + 8);
        if (v64)
        {
          if (*v64) {
            (*(void (**)(void, uint64_t))(*(void *)*v64 + 16))(*v64, 1);
          }
        }
      }
      uint64_t v65 = *(void *)(a1 + 672);
      *(void *)(a1 + 672) = v63;
      if (v65)
      {
        uint64_t v66 = *(uint64_t **)v65;
        uint64_t v67 = *(void *)(v65 + 8) - 1;
        *(void *)(v65 + 8) = v67;
        if (v66)
        {
          uint64_t v68 = *v66;
          if (!*v66) {
            goto LABEL_101;
          }
          char v69 = *(unsigned char *)(v65 + 16);
          *(unsigned char *)(v65 + 16) = 1;
          (*(void (**)(uint64_t, void))(*(void *)v68 + 16))(v68, 0);
          *(unsigned char *)(v65 + 16) = v69;
          if (*(void *)v65) {
            goto LABEL_101;
          }
          uint64_t v67 = *(void *)(v65 + 8);
        }
        if (!v67) {
          MEMORY[0x199740C10](v65, 0x1020C40545B2139);
        }
      }
LABEL_101:
      uint64_t v70 = *(void *)(a1 + 664);
      *(void *)(a1 + 664) = 0;
      if (v70)
      {
        double v71 = *(uint64_t **)v70;
        uint64_t v72 = *(void *)(v70 + 8) - 1;
        *(void *)(v70 + 8) = v72;
        if (v71)
        {
          uint64_t v73 = *v71;
          if (!*v71) {
            goto LABEL_81;
          }
          char v74 = *(unsigned char *)(v70 + 16);
          *(unsigned char *)(v70 + 16) = 1;
          (*(void (**)(uint64_t, void))(*(void *)v73 + 16))(v73, 0);
          *(unsigned char *)(v70 + 16) = v74;
          if (*(void *)v70) {
            goto LABEL_81;
          }
          uint64_t v72 = *(void *)(v70 + 8);
        }
        if (!v72) {
          MEMORY[0x199740C10](v70, 0x1020C40545B2139);
        }
        goto LABEL_81;
      }
      goto LABEL_81;
    }
    uint64_t v37 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = *(void *)(a1 + 136);
      if (v38) {
        LODWORD(v38) = *(_DWORD *)(v38 + 108);
      }
      *(_DWORD *)uint64_t v75 = 134218240;
      *(void *)&v75[4] = a1;
      *(_WORD *)uint64_t v76 = 1024;
      *(_DWORD *)&v76[2] = v38;
      _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState(Foreground) Taking foreground assertion for network process", v75, 0x12u);
    }
    uint64_t v39 = *(void *)(*(void *)(a1 + 512) + 8);
    if (v39) {
      uint64_t v40 = v39 - 16;
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v41 = *(void *)(v40 + 736);
    if (v41)
    {
      uint64_t v42 = *(void **)v41;
      ++*(void *)(v41 + 8);
      if (v42)
      {
        if (*v42) {
          (*(void (**)(void, uint64_t))(*(void *)*v42 + 16))(*v42, 1);
        }
      }
    }
    uint64_t v43 = *(void *)(a1 + 664);
    *(void *)(a1 + 664) = v41;
    if (v43)
    {
      uint64_t v44 = *(uint64_t **)v43;
      uint64_t v45 = *(void *)(v43 + 8) - 1;
      *(void *)(v43 + 8) = v45;
      if (v44)
      {
        uint64_t v46 = *v44;
        if (!*v44) {
          goto LABEL_70;
        }
        char v47 = *(unsigned char *)(v43 + 16);
        *(unsigned char *)(v43 + 16) = 1;
        (*(void (**)(uint64_t, void))(*(void *)v46 + 16))(v46, 0);
        *(unsigned char *)(v43 + 16) = v47;
        if (*(void *)v43) {
          goto LABEL_70;
        }
        uint64_t v45 = *(void *)(v43 + 8);
      }
      if (!v45) {
        MEMORY[0x199740C10](v43, 0x1020C40545B2139);
      }
    }
LABEL_70:
    uint64_t v48 = *(void *)(a1 + 672);
    *(void *)(a1 + 672) = 0;
    if (v48)
    {
      uint64_t v49 = *(uint64_t **)v48;
      uint64_t v50 = *(void *)(v48 + 8) - 1;
      *(void *)(v48 + 8) = v50;
      if (!v49) {
        goto LABEL_75;
      }
      uint64_t v51 = *v49;
      if (*v49)
      {
        char v52 = *(unsigned char *)(v48 + 16);
        *(unsigned char *)(v48 + 16) = 1;
        (*(void (**)(uint64_t, void))(*(void *)v51 + 16))(v51, 0);
        *(unsigned char *)(v48 + 16) = v52;
        if (!*(void *)v48)
        {
          uint64_t v50 = *(void *)(v48 + 8);
LABEL_75:
          if (!v50) {
            MEMORY[0x199740C10](v48, 0x1020C40545B2139);
          }
        }
      }
    }
    WebKit::WebProcessProxy::pages((WebKit::WebProcessProxy *)a1, (uint64_t)v75);
    if (*(_DWORD *)v76)
    {
      uint64_t v53 = *(CFTypeRef ***)v75;
      uint64_t v54 = 8 * *(unsigned int *)v76;
      do
      {
        uint64_t v55 = *v53++;
        CFRetain(v55[1]);
        WebKit::WebPageProxy::processWillBecomeForeground((WebKit::WebPageProxy *)v55, v56, v57);
        CFRelease(v55[1]);
        v54 -= 8;
      }
      while (v54);
    }
    goto LABEL_80;
  }
  uint64_t v25 = qword_1EB358348;
  if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *(void *)(a1 + 136);
    if (v26) {
      LODWORD(v26) = *(_DWORD *)(v26 + 108);
    }
    *(_DWORD *)uint64_t v75 = 134218240;
    *(void *)&v75[4] = a1;
    *(_WORD *)uint64_t v76 = 1024;
    *(_DWORD *)&v76[2] = v26;
    _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didChangeThrottleState: Release all assertions for network process because this is a service worker process without page", v75, 0x12u);
  }
  uint64_t v27 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = 0;
  if (v27)
  {
    uint64_t v28 = *(uint64_t **)v27;
    uint64_t v29 = *(void *)(v27 + 8) - 1;
    *(void *)(v27 + 8) = v29;
    if (!v28) {
      goto LABEL_43;
    }
    uint64_t v30 = *v28;
    if (*v28)
    {
      char v31 = *(unsigned char *)(v27 + 16);
      *(unsigned char *)(v27 + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v30 + 16))(v30, 0);
      *(unsigned char *)(v27 + 16) = v31;
      if (!*(void *)v27)
      {
        uint64_t v29 = *(void *)(v27 + 8);
LABEL_43:
        if (!v29) {
          MEMORY[0x199740C10](v27, 0x1020C40545B2139);
        }
      }
    }
  }
  uint64_t v32 = *(void *)(a1 + 672);
  *(void *)(a1 + 672) = 0;
  if (!v32) {
    return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
  }
  uint64_t v33 = *(uint64_t **)v32;
  uint64_t v34 = *(void *)(v32 + 8) - 1;
  *(void *)(v32 + 8) = v34;
  if (v33)
  {
    uint64_t v35 = *v33;
    if (!*v33) {
      return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
    }
    char v36 = *(unsigned char *)(v32 + 16);
    *(unsigned char *)(v32 + 16) = 1;
    (*(void (**)(uint64_t, void))(*(void *)v35 + 16))(v35, 0);
    *(unsigned char *)(v32 + 16) = v36;
    if (*(void *)v32) {
      return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
    }
    uint64_t v34 = *(void *)(v32 + 8);
  }
  if (!v34) {
    MEMORY[0x199740C10](v32, 0x1020C40545B2139);
  }
  return WebKit::WebProcessProxy::updateRuntimeStatistics(a1);
}

uint64_t WebKit::WebProcessPool::updateProcessAssertions(WebKit::WebProcessPool *this)
{
  {
    if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
    {
      unint64_t v1 = *(atomic_uint **)(WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess + 8);
      if (v1)
      {
        uint64_t v2 = (unsigned int *)(v1 + 4);
        atomic_fetch_add(v1 + 4, 1u);
        WebKit::NetworkProcessProxy::updateProcessAssertion((WebKit::NetworkProcessProxy *)v1);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
      }
    }
  }
  else
  {
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
  }
  {
    if (WebKit::singleton(void)::singleton)
    {
      uint64_t v3 = *(atomic_uint **)(WebKit::singleton(void)::singleton + 8);
      if (v3)
      {
        int v4 = (unsigned int *)(v3 + 4);
        atomic_fetch_add(v3 + 4, 1u);
        WebKit::GPUProcessProxy::updateProcessAssertion((WebKit::GPUProcessProxy *)v3);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v5 = &unk_1EE9DD1B0;
  uint64_t v7 = (uint64_t)v5;
  WTF::callOnMainRunLoop();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::BackgroundProcessResponsivenessTimer::updateState(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  uint64_t v2 = (WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16);
  if (WTF::RunLoop::TimerBase::isActive((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16)))
  {
    *((void *)this + 1) = 0x4034000000000000;
    WTF::RunLoop::TimerBase::stop(v2);
  }
  uint64_t result = WTF::RunLoop::TimerBase::stop((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48));
  *((unsigned char *)this + 8std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 1;
  return result;
}

uint64_t WebKit::WebProcessProxy::updateRuntimeStatistics(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0;
  if (*(unsigned char *)(this + 778) || *(unsigned char *)(this + 712))
  {
    char v3 = 0;
  }
  else
  {
    char v3 = *(unsigned char *)(this + 384);
    if (!v3)
    {
      if (*(unsigned char *)(this + 389)) {
        char v3 = *(void *)(this + 224) != 0;
      }
      else {
        char v3 = 1;
      }
    }
    this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    uint64_t v2 = v7;
  }
  if (*(double *)(v1 + 1168) != 0.0)
  {
    this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    int v5 = *(unsigned __int8 *)(v1 + 1160);
    if (v5 == 2)
    {
      uint64_t v6 = (double *)(v1 + 1176);
      goto LABEL_11;
    }
    if (v5 == 1)
    {
      uint64_t v6 = (double *)(v1 + 1184);
      goto LABEL_11;
    }
    if (!*(unsigned char *)(v1 + 1160))
    {
      uint64_t v6 = (double *)(v1 + 1192);
LABEL_11:
      *uint64_t v6 = v4 - *(double *)(v1 + 1168) + *v6;
    }
  }
  *(unsigned char *)(v1 + 116std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v3;
  *(void *)(v1 + 1168) = v2;
  return this;
}

uint64_t WebKit::WebProcessProxy::shouldDropNearSuspendedAssertionAfterDelay(WebKit::WebProcessProxy *this)
{
  uint64_t v1 = *((void *)this + 69);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    uint64_t v2 = (void *)((char *)this + 552);
    char v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 69);
    int v5 = v3;
    uint64_t v7 = v6;
    if (*v2) {
      uint64_t v8 = *v2 + 16 * *(unsigned int *)(*v2 - 4);
    }
    else {
      uint64_t v8 = 0;
    }
    if ((void *)v8 == v3)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        uint64_t v10 = *(void *)(v5[1] + 8);
        uint64_t v11 = v10 ? v10 - 16 : 0;
        {
          WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::$_0::operator() const(void)::impl;
        }
        uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(void *)(v11 + 272) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(void)::key, v4);
        if (result) {
          return 1;
        }
        while (1)
        {
          v5 += 2;
          if (v5 == v7) {
            break;
          }
          if ((unint64_t)(*v5 + 1) > 1) {
            goto LABEL_19;
          }
        }
        int v5 = v7;
LABEL_19:
        if (v5 == (void *)v8) {
          return result;
        }
      }
    }
  }
  {
    return WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK != 0;
  }
  else
  {
    uint64_t result = WTF::linkedOnOrAfterSDKWithBehavior();
    WebKit::defaultShouldDropNearSuspendedAssertionAfterDelay(void)::newSDK = result;
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::shouldTakeNearSuspendedAssertion(WebKit::WebProcessProxy *this)
{
  uint64_t v1 = *((void *)this + 69);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    uint64_t v2 = (void *)((char *)this + 552);
    char v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 69);
    int v5 = v3;
    uint64_t v7 = v6;
    if (*v2) {
      uint64_t v8 = *v2 + 16 * *(unsigned int *)(*v2 - 4);
    }
    else {
      uint64_t v8 = 0;
    }
    if ((void *)v8 == v3)
    {
      return 0;
    }
    else
    {
      do
      {
        uint64_t v11 = *(void *)(v5[1] + 8);
        if (v11) {
          uint64_t v12 = v11 - 16;
        }
        else {
          uint64_t v12 = 0;
        }
        {
          WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        int BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(void *)(v12 + 272) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, v4);
        uint64_t v15 = *(void *)(v5[1] + 8);
        if (v15) {
          uint64_t v16 = v15 - 16;
        }
        else {
          uint64_t v16 = 0;
        }
        {
          WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::$_0::operator() const(void)::impl;
        }
        uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(void *)(v16 + 272) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(void)::key, v13) | BoolValueForKey ^ 1;
        if (result) {
          break;
        }
        while (1)
        {
          v5 += 2;
          if (v5 == v7) {
            break;
          }
          if ((unint64_t)(*v5 + 1) > 1) {
            goto LABEL_26;
          }
        }
        int v5 = v7;
LABEL_26:
        ;
      }
      while (v5 != (void *)v8);
    }
  }
  else
  {
    {
      int v9 = WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK;
    }
    else
    {
      int v9 = WTF::linkedOnOrAfterSDKWithBehavior();
      WebKit::defaultShouldTakeNearSuspendedAssertion(void)::newSDK = v9;
    }
    return v9 == 0;
  }
  return result;
}

uint64_t WebKit::ProcessThrottler::setShouldDropNearSuspendedAssertionAfterDelay(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 185) != a2)
  {
    *(unsigned char *)(this + 185) = a2;
    if (a2)
    {
      uint64_t v2 = *(void *)(this + 24);
      if (v2)
      {
        if (!*(unsigned char *)(v2 + 16)) {
          return WTF::RunLoop::TimerBase::start();
        }
      }
    }
    else
    {
      return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 72));
    }
  }
  return this;
}

unsigned int *WebKit::ProcessThrottler::setShouldTakeNearSuspendedAssertion(unsigned int *this, int a2)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 187) = a2;
  uint64_t v3 = *((void *)this + 3);
  if (a2)
  {
    if (!v3 && *((unsigned char *)this + 189))
    {
      double v4 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(*(void *)(*(void *)(v2 + 16) + 8) + 136);
        if (v5) {
          LODWORD(v5) = *(_DWORD *)(v5 + 108);
        }
        int v8 = 134218240;
        uint64_t v9 = v2;
        __int16 v10 = 1024;
        int v11 = v5;
        _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::setShouldTakeNearSuspendedAssertion: Taking near-suspended assertion", (uint8_t *)&v8, 0x12u);
      }
      return WebKit::ProcessThrottler::setThrottleState((unsigned int *)v2, 0);
    }
  }
  else if (v3 && !*(unsigned char *)(v3 + 16))
  {
    uint64_t v6 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(v2 + 16) + 8) + 136);
      if (v7) {
        LODWORD(v7) = *(_DWORD *)(v7 + 108);
      }
      int v8 = 134218240;
      uint64_t v9 = v2;
      __int16 v10 = 1024;
      int v11 = v7;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::setShouldTakeNearSuspendedAssertion: Releasing near-suspended assertion", (uint8_t *)&v8, 0x12u);
    }
    WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v2 + 72));
    return WebKit::ProcessThrottler::clearAssertion((unsigned int *)v2);
  }
  return this;
}

void WebKit::WebProcessProxy::updateRegistrationWithDataStore(WebKit::WebProcessProxy *this)
{
  uint64_t v1 = *((void *)this + 94);
  if (v1)
  {
    CFRetain(*(CFTypeRef *)(v1 + 8));
    uint64_t v4 = *((void *)this + 69);
    if (v4 && *(_DWORD *)(v4 - 12)
      || WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 576, v3))
    {
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(v1 + 304, (unsigned int *)this, (uint64_t)v6);
    }
    else
    {
      WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v1 + 304, this);
    }
    uint64_t v5 = *(const void **)(v1 + 8);
    CFRelease(v5);
  }
}

uint64_t WebKit::GPUProcessProxy::updatePreferences(uint64_t this, WebKit::WebProcessProxy *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(void *)(this + 136);
  if (v3 && *(unsigned char *)(v3 + 104) || *(void *)(this + 144))
  {
    uint64_t v13 = 0;
    v14[0] = 0;
    *(_DWORD *)((char *)v14 + 7) = 0;
    WebKit::WebProcessProxy::pages(a2, (uint64_t)&v11);
    if (v12)
    {
      uint64_t v5 = 8 * v12;
      uint64_t v6 = v11;
      do
      {
        uint64_t v7 = *(void *)v6;
        CFRetain(*(CFTypeRef *)(*(void *)v6 + 8));
        int v8 = *(CFTypeRef **)(v7 + 272);
        CFRetain(v8[1]);
        {
          WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
          WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
        }
        if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, v9))WebKit::GPUProcessPreferences::copyEnabledWebPreferences((WebKit::GPUProcessPreferences *)&v13, (const WebKit::WebPreferences *)v8, v10); {
        CFRelease(v8[1]);
        }
        CFRelease(*(CFTypeRef *)(v7 + 8));
        v6 += 8;
        v5 -= 8;
      }
      while (v5);
    }
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
    int v11 = (char *)&v13;
    return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateGPUProcessPreferences>(v2, &v11, 0, 0);
  }
  return this;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        CFRelease(*(CFTypeRef *)(v6 + 8));
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebKit::GPUProcessPreferences::copyEnabledWebPreferences(WebKit::GPUProcessPreferences *this, const WebKit::WebPreferences *a2, const WTF::StringImpl *a3)
{
  {
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t v4 = (const WebKit::WebPreferences *)((char *)a2 + 40);
  if (WebKit::WebPreferencesStore::getBoolValueForKey((const WebKit::WebPreferences *)((char *)a2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, a3))*(_WORD *)this = 257;
  {
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, v5))*((_WORD *)this + 1) = 257;
  {
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, v6))*((_WORD *)this + 2) = 257;
  {
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, v7))*((_WORD *)this + 3) = 257;
  {
    WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseModernAVContentKeySessionKey(void)::key, v8))*((_WORD *)this + 4) = 257;
  {
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, v9))*((_WORD *)this + 5) = 257;
  {
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, v10))*((_WORD *)this + 6) = 257;
  {
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, v11))*((_WORD *)this + 7) = 257;
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, v12))*((_WORD *)this + 8) = 257;
  {
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sWVPDecodersAlwaysEnabledKey(void)::key, v13);
  if (result) {
    *((unsigned char *)this + 18) = 1;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateGPUProcessPreferences>(uint64_t a1, char **a2, uint64_t a3, char a4)
{
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 91;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v18 = v8;
  IPC::ArgumentCoder<WebKit::GPUProcessPreferences,void>::encode(v8, *a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  unsigned int v12 = v18;
  char v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

unint64_t IPC::ArgumentCoder<WebKit::GPUProcessPreferences,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 2);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 4);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 6);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 8);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 10);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 12);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 14);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, a2 + 16);
  char v4 = a2[18];
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(IPC::Encoder *a1, char *a2)
{
  int v4 = a2[1];
  unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E50ACLL);
    }
    char v7 = 0;
LABEL_4:
    *unint64_t result = v7;
    return result;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E50CCLL);
  }
  *unint64_t result = 1;
  if (a2[1])
  {
    char v7 = *a2;
    unint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E508CLL);
    }
    goto LABEL_4;
  }
  uint64_t v9 = (WebKit::WebProcessPool *)std::__throw_bad_optional_access[abi:sn180100]();
  return (unsigned char *)WebKit::WebProcessPool::anyProcessPoolNeedsUIBackgroundAssertion(v9);
}

BOOL WebKit::WebProcessPool::anyProcessPoolNeedsUIBackgroundAssertion(WebKit::WebProcessPool *this)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    uint64_t v2 = v8;
    uint64_t v3 = 8 * v9 - 8;
    do
    {
      uint64_t v4 = *v2++;
      BOOL v5 = *(unsigned char *)(v4 + 521) != 0;
      if (*(unsigned char *)(v4 + 521)) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      v3 -= 8;
    }
    while (!v6);
  }
  else
  {
    BOOL v5 = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v1);
  return v5;
}

WebKit::ProcessThrottlerActivity *WebKit::GPUProcessProxy::updateProcessAssertion(WebKit::GPUProcessProxy *this)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v22);
  if (!v23)
  {
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
    goto LABEL_19;
  }
  char v3 = 0;
  char v4 = 0;
  BOOL v5 = v22;
  uint64_t v6 = 8 * v23;
  do
  {
    uint64_t v7 = *(void *)v5;
    BOOL v5 = (WebKit::ProcessThrottlerActivity *)((char *)v5 + 8);
    v3 |= *(void *)(*(void *)(v7 + 736) + 8) != 0;
    v4 |= *(void *)(*(void *)(v7 + 752) + 8) != 0;
    v6 -= 8;
  }
  while (v6);
  unint64_t result = (WebKit::ProcessThrottlerActivity *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
  if (v3)
  {
    unsigned int v9 = (WebKit::GPUProcessProxy *)((char *)this + 416);
    if (*((_DWORD *)this + 106) != 1
      || (uint64_t v10 = *(void *)(*(void *)v9 + 8)) == 0
      || !*(void *)(v10 + 8)
      || !*(unsigned char *)(*(void *)v9 + 32))
    {
      uint64_t v11 = WTF::fastMalloc((WTF *)0x28);
      unsigned int v12 = "GPU for foreground view(s)";
      uint64_t v13 = (char *)this + 200;
      int v14 = 1;
      goto LABEL_17;
    }
    return result;
  }
  if ((v4 & 1) == 0)
  {
LABEL_19:
    v20[0] = 0;
    int v21 = -1;
    unint64_t result = (WebKit::ProcessThrottlerActivity *)std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)v20, (uint64_t)this + 416);
    uint64_t v19 = *((unsigned int *)this + 106);
    if (v19 != -1)
    {
      if (!v19)
      {
        *((void *)this + 52) = 0;
        goto LABEL_24;
      }
      unint64_t result = (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(WebKit::ProcessThrottlerActivity **, char *))off_1EE9E3628[v19])(&v22, (char *)this + 416);
    }
    *((void *)this + 52) = 0;
    *((_DWORD *)this + 106) = 0;
LABEL_24:
    if (v21 != -1) {
      return (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(WebKit::ProcessThrottlerActivity **, unsigned char *))off_1EE9E3628[v21])(&v22, v20);
    }
    return result;
  }
  unsigned int v9 = (WebKit::GPUProcessProxy *)((char *)this + 416);
  if (*((_DWORD *)this + 106) != 1
    || (uint64_t v15 = *(void *)(*(void *)v9 + 8)) == 0
    || !*(void *)(v15 + 8)
    || *(unsigned char *)(*(void *)v9 + 32))
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)0x28);
    unsigned int v12 = "GPU for background view(s)";
    uint64_t v13 = (char *)this + 200;
    int v14 = 0;
LABEL_17:
    unsigned int v22 = (WebKit::ProcessThrottlerActivity *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v11, (uint64_t)v13, v12, 27, v14, 0);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(v9, (WebKit::ProcessThrottlerActivity **)v9, &v22);
    unint64_t result = v22;
    unsigned int v22 = 0;
    if (result)
    {
      WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(result, v16);
      return (WebKit::ProcessThrottlerActivity *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebExtensionMatchPattern::registerCustomURLScheme(uint64_t *a1)
{
  uint64_t v2 = (WTF::StringImpl *)*a1;
  if (*a1) {
    *(_DWORD *)v2 += 2;
  }
  char v3 = (WebKit::WebExtensionMatchPattern *)WTF::URLParser::maybeCanonicalizeScheme();
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      char v3 = (WebKit::WebExtensionMatchPattern *)WTF::StringImpl::destroy(v2, v4);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  WebKit::WebExtensionMatchPattern::extensionSchemes(v3);
  if (v19
    && (uint64_t v6 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&WebKit::WebExtensionMatchPattern::extensionSchemes(void)::schemes, &v18, v5, (uint64_t)&v20), WebKit::WebExtensionMatchPattern::validSchemes((WebKit::WebExtensionMatchPattern *)v6), v19)&& (v8 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes, &v18, v7, (uint64_t)&v20), WebKit::WebExtensionMatchPattern::supportedSchemes((WebKit::WebExtensionMatchPattern *)v8), v19))
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&qword_1EB35A1F0, &v18, v9, (uint64_t)&v20);
    WebKit::WebProcessPool::allProcessPools((uint64_t)&v20);
    uint64_t v11 = v21;
    if (!v21) {
      goto LABEL_10;
    }
  }
  else
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
  }
  int v14 = v20;
  uint64_t v15 = 8 * v11;
  do
  {
    uint64_t v16 = *v14;
    char v17 = a1;
    WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsWebExtension>(*(IPC::Encoder **)(v16 + 72), *(_DWORD *)(v16 + 84), &v17);
    ++v14;
    v15 -= 8;
  }
  while (v15);
LABEL_10:
  unint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v10);
  if (v19)
  {
    unint64_t result = v18;
    char v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1986E549C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

WebKit::ProcessThrottlerActivity *WebKit::NetworkProcessProxy::updateProcessAssertion(WebKit::NetworkProcessProxy *this)
{
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v22);
  if (v23)
  {
    char v3 = v22;
    uint64_t v4 = 8 * v23;
    while (!*(void *)(*(void *)(*(void *)v3 + 736) + 8))
    {
      char v3 = (WebKit::ProcessThrottlerActivity *)((char *)v3 + 8);
      v4 -= 8;
      if (!v4) {
        goto LABEL_5;
      }
    }
    unint64_t result = (WebKit::ProcessThrottlerActivity *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
    uint64_t v10 = (WebKit::NetworkProcessProxy *)((char *)this + 456);
    if (*((_DWORD *)this + 116) != 1
      || (uint64_t v11 = *(void *)(*(void *)v10 + 8)) == 0
      || !*(void *)(v11 + 8)
      || !*(unsigned char *)(*(void *)v10 + 32))
    {
      uint64_t v12 = WTF::fastMalloc((WTF *)0x28);
      uint64_t v13 = "Networking for foreground view(s)";
      int v14 = (char *)this + 200;
      int v15 = 1;
      goto LABEL_22;
    }
    return result;
  }
LABEL_5:
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v22);
  if (!v23)
  {
LABEL_9:
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
    v20[0] = 0;
    int v21 = -1;
    unint64_t result = (WebKit::ProcessThrottlerActivity *)std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)v20, (uint64_t)this + 456);
    uint64_t v9 = *((unsigned int *)this + 116);
    if (v9 != -1)
    {
      if (!v9)
      {
        *((void *)this + 57) = 0;
        goto LABEL_26;
      }
      unint64_t result = (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(WebKit::ProcessThrottlerActivity **, char *))off_1EE9E3ED0[v9])(&v22, (char *)this + 456);
    }
    *((void *)this + 57) = 0;
    *((_DWORD *)this + 116) = 0;
LABEL_26:
    if (v21 != -1) {
      return (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(WebKit::ProcessThrottlerActivity **, unsigned char *))off_1EE9E3ED0[v21])(&v22, v20);
    }
    return result;
  }
  uint64_t v6 = v22;
  uint64_t v7 = 8 * v23;
  while (!*(void *)(*(void *)(*(void *)v6 + 752) + 8))
  {
    uint64_t v6 = (WebKit::ProcessThrottlerActivity *)((char *)v6 + 8);
    v7 -= 8;
    if (!v7) {
      goto LABEL_9;
    }
  }
  unint64_t result = (WebKit::ProcessThrottlerActivity *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v5);
  uint64_t v10 = (WebKit::NetworkProcessProxy *)((char *)this + 456);
  if (*((_DWORD *)this + 116) != 1
    || (uint64_t v16 = *(void *)(*(void *)v10 + 8)) == 0
    || !*(void *)(v16 + 8)
    || *(unsigned char *)(*(void *)v10 + 32))
  {
    uint64_t v12 = WTF::fastMalloc((WTF *)0x28);
    uint64_t v13 = "Networking for background view(s)";
    int v14 = (char *)this + 200;
    int v15 = 0;
LABEL_22:
    unsigned int v22 = (WebKit::ProcessThrottlerActivity *)WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v12, (uint64_t)v14, v13, 34, v15, 0);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(v10, (WebKit::ProcessThrottlerActivity **)v10, &v22);
    unint64_t result = v22;
    unsigned int v22 = 0;
    if (result)
    {
      WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(result, v17);
      return (WebKit::ProcessThrottlerActivity *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v6 = *(WTF **)a1;
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      if (v8) {
        CFRelease(*(CFTypeRef *)(v8 + 8));
      }
      uint64_t v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void API::Object::deref(CFTypeRef *this)
{
}

WebKit::ProcessThrottlerActivity *std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(WebKit::ProcessThrottlerActivity *result, WebKit::ProcessThrottlerActivity **a2, WebKit::ProcessThrottlerActivity **a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *((unsigned int *)result + 2);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    unint64_t result = (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(char *, WebKit::ProcessThrottlerActivity *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v8, result);
LABEL_7:
    uint64_t v7 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v7;
    *((_DWORD *)v4 + 2) = 1;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;

  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a2, v6);
}

uint64_t *WebKit::WebExtensionMatchPattern::extensionSchemes(WebKit::WebExtensionMatchPattern *this)
{
  v4[1] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(&WebKit::WebExtensionMatchPattern::extensionSchemes(void)::schemes, v4, (const WTF::StringImpl *)1);
    uint64_t v3 = v4[0];
    v4[0] = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return &WebKit::WebExtensionMatchPattern::extensionSchemes(void)::schemes;
}

void sub_1986E58B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::WebExtensionMatchPattern::supportedSchemes(WebKit::WebExtensionMatchPattern *this)
{
  unsigned char v6[4] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  if ((_MergedGlobals_129 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[1] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    void v6[2] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[3] = v5;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(&qword_1EB35A1F0, v6, (const WTF::StringImpl *)4);
    for (uint64_t i = 3; i != -1; --i)
    {
      uint64_t v4 = v6[i];
      v6[i] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, v2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
    _MergedGlobals_129 = 1;
  }
  return &qword_1EB35A1F0;
}

void sub_1986E5A34(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = 24;
  while (1)
  {
    uint64_t v5 = *(WTF::StringImpl **)(v2 + v4);
    *(void *)(v2 + v4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    v4 -= 8;
    if (v4 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_1986E5A7C(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  while (1)
  {
    uint64_t v12 = (WTF::StringImpl *)*((void *)v10 - 1);
    v10 -= 8;
    uint64_t v11 = v12;
    *(void *)uint64_t v10 = 0;
    if (v12)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, a2);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (v10 == &a10) {
      JUMPOUT(0x1986E5A74);
    }
  }
}

uint64_t *WebKit::WebExtensionMatchPattern::validSchemes(WebKit::WebExtensionMatchPattern *this)
{
  void v6[6] = *(WTF::StringImpl **)MEMORY[0x1E4F143B8];
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[1] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    void v6[2] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[3] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned char v6[4] = v5;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6[5] = v5;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::HashSet(&WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes, v6, (const WTF::StringImpl *)6);
    for (uint64_t i = 5; i != -1; --i)
    {
      uint64_t v4 = v6[i];
      v6[i] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, v2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  return &WebKit::WebExtensionMatchPattern::validSchemes(void)::schemes;
}

void sub_1986E5C3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = 40;
  while (1)
  {
    uint64_t v5 = *(WTF::StringImpl **)(v2 + v4);
    *(void *)(v2 + v4) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    v4 -= 8;
    if (v4 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_1986E5C84(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  while (1)
  {
    uint64_t v12 = (WTF::StringImpl *)*((void *)v10 - 1);
    v10 -= 8;
    uint64_t v11 = v12;
    *(void *)uint64_t v10 = 0;
    if (v12)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, a2);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    if (v10 == &a10) {
      JUMPOUT(0x1986E5C7CLL);
    }
  }
}

void WebKit::WebProcessPool::allProcessPools(uint64_t a1@<X8>)
{
  {
    uint64_t v3 = dword_1EB35A78C;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (v3 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        uint64_t v4 = WTF::fastMalloc((WTF *)(8 * v3));
        *(_DWORD *)(a1 + 8) = v3;
        *(void *)a1 = v4;
        if (dword_1EB35A78C)
        {
          uint64_t v5 = v4;
          uint64_t v6 = 0;
          uint64_t v7 = WebKit::processPools(void)::processPools;
          uint64_t v8 = 8 * dword_1EB35A78C;
          do
          {
            uint64_t v9 = *(void *)(*(void *)(v7 + 8 * v6) + 8);
            if (v9) {
              uint64_t v10 = v9 - 16;
            }
            else {
              uint64_t v10 = 0;
            }
            CFRetain(*(CFTypeRef *)(v10 + 8));
            *(void *)(v5 + 8 * v6++) = v10;
            *(_DWORD *)(a1 + 12) = v6;
            v8 -= 8;
          }
          while (v8);
        }
      }
    }
  }
  else
  {
    WebKit::processPools(void)::processPools = 0;
    *(void *)&dword_1EB35A788 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

BOOL WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 28);
  unsigned int v5 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > v4) {
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v6 = *(atomic_uint **)(a2 + 8);
  atomic_fetch_add(v6, 1u);
  atomic_fetch_add(v6, 1u);
  uint64_t v11 = (WTF *)v6;
  BOOL v8 = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::moveToLastIfPresent((uint64_t *)a1, &v11);
  uint64_t v9 = (unsigned int *)v11;
  uint64_t v11 = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v7);
  }
  if (v6 && atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v6);
    WTF::fastFree((WTF *)v6, v7);
  }
  return v8;
}

BOOL WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::moveToLastIfPresent(uint64_t *a1, void *a2)
{
  uint64_t v3 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(a1, a2);
  uint64_t v4 = *a1;
  if (*a1) {
    v4 += 8 * *(unsigned int *)(v4 - 4);
  }
  if (v4 != v3)
  {
    uint64_t v5 = *(void *)v3;
    uint64_t v6 = *(void *)(*(void *)v3 + 8);
    uint64_t v7 = *(void *)(*(void *)v3 + 16);
    if (v6)
    {
      *(void *)(v6 + 16) = v7;
      uint64_t v7 = *(void *)(v5 + 16);
    }
    else
    {
      a1[1] = v7;
    }
    if (v7) {
      BOOL v8 = (void *)(v7 + 8);
    }
    else {
      BOOL v8 = a1 + 2;
    }
    *BOOL v8 = v6;
    uint64_t v9 = a1[2];
    *(void *)(v5 + 8) = v9;
    *(void *)(v5 + 16) = 0;
    if (v9) {
      uint64_t v10 = (uint64_t *)(v9 + 16);
    }
    else {
      uint64_t v10 = a1 + 1;
    }
    *uint64_t v10 = v5;
    a1[2] = v5;
  }
  return v4 != v3;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(a2);
  for (i = 0; ; int v6 = i + v8)
  {
    uint64_t v8 = v6 & v5;
    uint64_t v9 = *(void **)(v2 + 8 * v8);
    if (v9 == (void *)-1) {
      goto LABEL_6;
    }
    if (!v9) {
      break;
    }
    if (*v9 == *a2) {
      return v2 + 8 * v8;
    }
LABEL_6:
    ++i;
  }
  if (*a1) {
    return *a1 + 8 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

uint64_t WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(void *a1)
{
  unint64_t v1 = ~(*a1 << 32) + *a1;
  unint64_t v2 = 9 * (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) ^ (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) >> 8));
  unint64_t v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

unsigned int *WebKit::WebsiteDataStore::updateBlobRegistryPartitioningState(WebKit::WebsiteDataStore *this)
{
  unint64_t result = (unsigned int *)WebKit::WebsiteDataStore::isBlobRegistryPartitioningEnabled(this);
  if (*((unsigned __int8 *)this + 449) != result)
  {
    uint64_t v3 = *((void *)this + 50);
    if (v3)
    {
      uint64_t v4 = (unsigned int *)(v3 + 16);
      atomic_fetch_add((atomic_uint *volatile)(v3 + 16), 1u);
      *((unsigned char *)this + 449) = (_BYTE)result;
      uint64_t v5 = *((void *)this + 3);
      int v6 = &v5;
      char v7 = (char)result;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetBlobRegistryTopOriginPartitioningEnabled>(v3, (uint64_t)&v6, 0, 0);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
    }
  }
  return result;
}

uint64_t WebKit::WebsiteDataStore::isBlobRegistryPartitioningEnabled(WebKit::WebsiteDataStore *this)
{
  unint64_t v2 = (char *)this + 304;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 38, &v18);
  uint64_t v3 = *((void *)this + 38);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v13 = v2;
  uint64_t v14 = v5;
  uint64_t v15 = v5;
  uint64_t v16 = v5;
  uint64_t v17 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v13);
  uint64_t v6 = v19;
  if (v19 == v14) {
    return 0;
  }
  while (1)
  {
    WebKit::WebProcessProxy::pages(*(WebKit::WebProcessProxy **)(*(void *)v6 + 8), (uint64_t)&v20);
    if (v21) {
      break;
    }
LABEL_11:
    WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v7);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
    uint64_t v6 = v19;
    if (v19 == v14) {
      return 0;
    }
  }
  uint64_t v9 = v20;
  uint64_t v10 = 8 * v21;
  while (1)
  {
    uint64_t v11 = *v9;
    {
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(*(void *)(v11 + 272) + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, v8))break; {
    ++v9;
    }
    v10 -= 8;
    if (!v10) {
      goto LABEL_11;
    }
  }
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v7);
  return 1;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetBlobRegistryTopOriginPartitioningEnabled>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 457;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,BOOL>,0ul,1ul>(v8, a2);
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

uint64_t WebKit::WebProcessPool::pageBeginUsingWebsiteDataStore(WebKit::WebProcessPool *this, WebKit::WebPageProxy *a2, WebKit::WebsiteDataStore *a3)
{
  uint64_t v6 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v6) & 1) == 0
    || (uint64_t v7 = *((void *)a3 + 3), (unint64_t)(v7 - 1) >= 0xFFFFFFFFFFFFFFFELL))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E6390);
  }
  uint64_t v12 = 0;
  uint64_t v13 = v7;
  WTF::HashMap<PAL::SessionID,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>>((uint64_t *)this + 90, &v13, &v12, (uint64_t)v15);
  uint64_t v11 = *(void *)(*((void *)a2 + 4) + 760);
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::add((uint64_t *)(v15[0] + 8), &v11, (uint64_t)v14);
  if (v12) {
    WTF::fastFree((WTF *)(v12 - 16), v8);
  }
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)a3 + 320, (unsigned int *)a2, (uint64_t)v15);
  return WebKit::WebsiteDataStore::updateServiceWorkerInspectability(a3, v9);
}

uint64_t WebKit::InjectedBundle::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  kdebug_trace();
  uint64_t v6 = API::Object::newObject(0x40uLL, 132);
  WebKit::InjectedBundle::InjectedBundle((WebKit *)v6, a1);
  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v7 = 1;
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
    *(void *)(v7 + 8) = v8;
    *(void *)(v7 + 16) = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(const char ****)(v6 + 32);
  *(void *)(v6 + 32) = v7;
  if (v9) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v9);
  }
  if ((WebKit::InjectedBundle::initialize(v6, a1, a2) & 1) == 0)
  {
    CFRelease(*(CFTypeRef *)(v6 + 8));
    uint64_t v6 = 0;
  }
  *a3 = v6;

  return kdebug_trace();
}

uint64_t WebKit::SandboxExtension::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  if (*a1)
  {
    uint64_t result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t result = 1;
    uint64_t v5 = *a1;
    *a1 = 0;
    *(void *)(result + 8) = v5;
    *(void *)(result + 16) = 0;
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

WebKit *WebKit::InjectedBundle::InjectedBundle(WebKit *a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(a1);
  *(void *)a1 = &unk_1EE9F06F0;
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  if (v4) {
    *v4 += 2;
  }
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 2) = v4;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v5 = &unk_1EE9F08A0;
  *((void *)a1 + 5) = v5;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  return a1;
}

void WebKit::WebPageProxy::processWillBecomeForeground(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!*((unsigned char *)this + 801) && *((unsigned char *)this + 800))
  {
    if (*((unsigned char *)this + 448))
    {
      WebKit::WebPageProxy::setNetworkRequestsInProgress(this, 1, a3);
      *((unsigned char *)this + 448) = 0;
    }
  }
}

unsigned char *WebKit::WebProcess::setMemoryCacheDisabled(WebKit::WebProcess *this, int a2)
{
  uint64_t result = (unsigned char *)WebCore::MemoryCache::singleton(this);
  if ((*result != 0) != a2)
  {
    return (unsigned char *)MEMORY[0x1F416CA98]();
  }
  return result;
}

uint64_t WebKit::WebProcess::setCacheModel(uint64_t result, WTF *a2)
{
  if (!*(unsigned char *)(result + 256) || *(unsigned __int8 *)(result + 257) != a2)
  {
    *(unsigned char *)(result + 256) = 1;
    *(unsigned char *)(result + 257) = (_BYTE)a2;
    int v10 = 0;
    unsigned int v8 = 0;
    int v9 = 0;
    uint64_t v7 = 0;
    unsigned int v6 = 0;
    unint64_t v2 = (WebCore::MemoryCache *)WebKit::calculateMemoryCacheSizes(a2, &v10, &v9, &v8, &v7, &v6);
    uint64_t v3 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(v2);
    uint64_t v4 = (WebCore::BackForwardCache *)WebCore::MemoryCache::setCapacities(v3);
    *((void *)v3 + 2) = v7;
    uint64_t v5 = (WebCore::BackForwardCache *)WebCore::BackForwardCache::singleton(v4);
    return WebCore::BackForwardCache::setMaxSize(v5);
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    uint64_t v6 = *(void *)a1;
    if (*(void *)a1)
    {
      int v7 = *(_DWORD *)(v6 - 4);
      if (!v7) {
        goto LABEL_22;
      }
      int v8 = 0;
      unsigned int v9 = v7 - 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)(v6 + 8 * v9);
        if ((unint64_t)(v11 + 1) >= 2 && !*(void *)(v11 + 8))
        {
          *(void *)(v6 + 8 * v9) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v11);
            WTF::fastFree((WTF *)v11, a2);
          }
          *(void *)(v6 + 8 * v9) = -1;
          ++v8;
        }
        --v9;
      }
      while (v10);
      uint64_t v6 = *(void *)a1;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        uint64_t v12 = *(void *)a1;
        if (*(void *)a1) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 12) = v13 - v8;
        uint64_t v6 = *(void *)a1;
      }
      if (v6)
      {
        unsigned int v14 = *(_DWORD *)(v6 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          uint64_t v6 = *(void *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            unsigned int v16 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
        unsigned int v16 = *(_DWORD *)(v6 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 12) = 2 * v17;
          goto LABEL_28;
        }
LABEL_26:
        int v17 = v16;
        goto LABEL_27;
      }
    }
    unsigned int v16 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v18 = a2[1];
  if (!v18 || !*(void *)(v18 + 8)) {
    return 0;
  }
  uint64_t v22 = a2[1];
  uint64_t v19 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v22);
  if (*(void *)a1)
  {
    uint64_t v20 = *(void *)a1 + 8 * *(unsigned int *)(*(void *)a1 - 4);
    if ((unsigned int **)v20 == v19) {
      return 0;
    }
  }
  else
  {
    if (!v19) {
      return 0;
    }
    uint64_t v20 = 0;
  }
  if ((unsigned int **)v20 != v19) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v19);
  }
  return 1;
}

unsigned int *__destroy_helper_block_e8_32c92_ZTSKZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyEE3__0(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

dispatch_queue_t ___ZN6WebKit14WebProcessPool32setMediaAccessibilityPreferencesERNS_15WebProcessProxyE_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("MediaAccessibility queue", 0);
  qword_1E93CF6E8 = (uint64_t)result;
  return result;
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0>(WebKit::WebProcessPool::initializeHardwareKeyboardAvailability(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  dispatch_queue_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::frameLoadCompleted(WebKit::WebFrame **this)
{
  uint64_t v1 = *((void *)this[2] + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (*(void *)(*(void *)(v2 + 128) + 8) == v2) {
        WebKit::WebLocalFrameLoaderClient::completePageTransitionIfNeeded(this);
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessLauncher::finishLaunchingProcess(WTF::ASCIILiteral)::$_2::operator()(NSObject  {objcproto13OS_xpc_object}*)::{lambda(void)#2},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillCompositedRect(void *result, _DWORD *a2, WebCore::Color *a3, char a4, char a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  char v57 = a4;
  char v58 = a5;
  uint64_t v5 = result[481];
  if (v5)
  {
    uint64_t v6 = result;
    dispatch_queue_t result = *(void **)(v5 + 8);
    if (result)
    {
      dispatch_queue_t result = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (atomic_uint **)&v60);
      int v7 = v60;
      if (v60)
      {
        int v8 = (WTF::ApproximateTime *)v6[479];
        if (v8) {
          goto LABEL_84;
        }
        uint64_t v59 = 0;
        while (1)
        {
          uint64_t v9 = v6[478];
          double v10 = *((double *)v7 + 15);
          double v11 = INFINITY;
          if (fabs(v10) != INFINITY)
          {
            WTF::ApproximateTime::now(v8);
            double v11 = v10 + v12;
          }
          if (*((void *)v7 + 7) != v9)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, buf, v11);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v31 = *(void *)buf;
            unint64_t v32 = *(void *)&buf[8];
            unint64_t v33 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v34 = v33 - *(void *)buf;
            if (v33 < *(void *)buf)
            {
              unint64_t v36 = 0;
              unint64_t v35 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v35 = 0;
              if (v34 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v36 = 0;
              }
              else
              {
                unint64_t v36 = 0;
                if (v34 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v34) = 2871;
                  unint64_t v35 = v32;
                  unint64_t v36 = v34 + 2;
                }
              }
            }
            uint64_t v37 = (void *)((v31 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v37 >= v31 + v36)
            {
              uint64_t v38 = (char *)v37 - v31;
              if ((unint64_t)v37 - v31 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v36 = (unint64_t)(v38 + 8);
              if ((unint64_t)(v38 + 8) > v35) {
                goto LABEL_75;
              }
              *uint64_t v37 = v9;
            }
            if (!v35) {
              goto LABEL_75;
            }
            unint64_t v39 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v40 = *((void *)v7 + 8);
            if (v39 + 16 >= v40) {
              unint64_t v39 = 0;
            }
            if (v36 <= 0x10) {
              unint64_t v36 = 16;
            }
            unint64_t v41 = v39 + v36;
            if (v40 <= v41) {
              unint64_t v42 = 0;
            }
            else {
              unint64_t v42 = v41;
            }
            *((void *)v7 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v42;
            unint64_t v43 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v42);
            int v44 = *((_DWORD *)v7 + 29);
            if (v43 == 0x80000000 || v44 != 0)
            {
              unsigned int v46 = v44 + 1;
              *((_DWORD *)v7 + 29) = v46;
              if (v46 >= *((_DWORD *)v7 + 28))
              {
                if (*((unsigned char *)v7 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
                }
                *((_DWORD *)v7 + 29) = 0;
              }
            }
            *((void *)v7 + 7) = v9;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v7 + 64, &v61, v11);
          if (!v63) {
            goto LABEL_75;
          }
          *(void *)buf = v61;
          *(void *)&uint8_t buf[8] = v62;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v13 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v14 = v13 >= v61;
          unint64_t v15 = v13 - v61;
          if (v14)
          {
            if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v62)
            {
              *(void *)&uint8_t buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v61 + v15) = 855;
              *(void *)&uint8_t buf[16] = v15 + 2;
            }
          }
          IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v55);
          int v8 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, v56);
          uint64_t v17 = *(void *)&buf[16];
          if (*(void *)&buf[16] < *(void *)&buf[8])
          {
            uint64_t v18 = *(void *)&buf[16] + 1;
            *(unsigned char *)(*(void *)buf + *(void *)&buf[16]) = v57;
            if ((unint64_t)(v17 + 1) < *(void *)&buf[8])
            {
              unint64_t v19 = v17 + 2;
              *(unsigned char *)(*(void *)buf + v18) = v58;
              *(void *)&uint8_t buf[16] = v19;
              if (*(void *)&buf[8])
              {
                unint64_t v20 = (*((void *)v7 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v21 = *((void *)v7 + 8);
                if (v20 + 16 >= v21) {
                  unint64_t v20 = 0;
                }
                if (v19 <= 0x10) {
                  unint64_t v19 = 16;
                }
                unint64_t v22 = v20 + v19;
                if (v21 <= v22) {
                  unint64_t v22 = 0;
                }
                *((void *)v7 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v22;
                if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v7 + 9) + 16) + 128), v22) == 0x80000000
                  || *((_DWORD *)v7 + 29))
                {
                  if (*((unsigned char *)v7 + 104)) {
                    MEMORY[0x1997420B0](*((unsigned int *)v7 + 23));
                  }
                  *((_DWORD *)v7 + 29) = 0;
                }
                goto LABEL_26;
              }
            }
          }
          if (v63) {
            break;
          }
          __break(1u);
LABEL_84:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v8, v6[480], &v59);
          int v8 = v59;
          if (v59 && !*((unsigned char *)v59 + 4016))
          {
            *((unsigned char *)v59 + 4016) = 1;
            int v8 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v8);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, v61, v62);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v7 + 1);
        int v50 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillCompositedRect>(*(uint64_t *)buf, (uint64_t)&v55, v9);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v50) {
          goto LABEL_26;
        }
LABEL_75:
        uint64_t v51 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          char v52 = IPC::errorAsString();
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillCompositedRect";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v52;
          _os_log_impl(&dword_1985F2000, v51, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v53 = v6[481];
        if (v53)
        {
          uint64_t v54 = *(unsigned char **)(v53 + 8);
          if (v54) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v54);
          }
        }
LABEL_26:
        unsigned int v23 = v59;
        uint64_t v59 = 0;
        if (v23)
        {
          char v24 = 0;
          uint64_t v25 = *((void *)v23 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
          if (v24) {
            MEMORY[0x19972E8D0](v25);
          }
          uint64_t v26 = *(void *)(v25 + 8);
          int v27 = 1;
          uint64_t v28 = v26 - 1;
          *(void *)(v25 + 8) = v26 - 1;
          if (v26 == 1)
          {
            uint64_t v49 = *(void *)(v25 + 16);
            uint64_t v29 = *(void *)(v25 + 24);
            *(void *)(v25 + 24) = 0;
            BOOL v30 = v49 != 0;
          }
          else
          {
            uint64_t v29 = 0;
            BOOL v30 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
          if (v27 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v25);
          }
          if (!v28)
          {
            if (v29) {
              (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
            }
            if (!v30) {
              WTF::fastFree((WTF *)v25, v16);
            }
          }
        }
        dispatch_queue_t result = v60;
        uint64_t v60 = 0;
        if (result)
        {
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result, v16);
            return (void *)WTF::fastFree(v47, v48);
          }
        }
      }
    }
  }
  return result;
}

void *WebKit::RemoteDisplayListRecorderProxy::recordFillRectWithColor(void *this, const WebCore::FloatRect *a2, const WebCore::Color *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a2;
  char v52 = a3;
  uint64_t v3 = this[481];
  if (v3)
  {
    unsigned int v4 = this;
    this = *(void **)(v3 + 8);
    if (this)
    {
      this = (void *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (atomic_uint **)&v54);
      uint64_t v5 = v54;
      if (v54)
      {
        uint64_t v6 = (WTF::ApproximateTime *)v4[479];
        if (v6) {
          goto LABEL_82;
        }
        uint64_t v53 = 0;
        while (1)
        {
          uint64_t v7 = v4[478];
          double v8 = *((double *)v5 + 15);
          double v9 = INFINITY;
          if (fabs(v8) != INFINITY)
          {
            WTF::ApproximateTime::now(v6);
            double v9 = v8 + v10;
          }
          if (*((void *)v5 + 7) != v7)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, buf, v9);
            if (!buf[16]) {
              goto LABEL_75;
            }
            uint64_t v27 = *(void *)buf;
            unint64_t v28 = *(void *)&buf[8];
            unint64_t v29 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v30 = v29 - *(void *)buf;
            if (v29 < *(void *)buf)
            {
              unint64_t v32 = 0;
              unint64_t v31 = *(void *)&buf[8];
            }
            else
            {
              unint64_t v31 = 0;
              if (v30 > 0xFFFFFFFFFFFFFFFDLL)
              {
                unint64_t v32 = 0;
              }
              else
              {
                unint64_t v32 = 0;
                if (v30 + 2 <= *(void *)&buf[8])
                {
                  *(_WORD *)(*(void *)buf + v3std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 2871;
                  unint64_t v31 = v28;
                  unint64_t v32 = v30 + 2;
                }
              }
            }
            unint64_t v33 = (void *)((v27 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v33 >= v27 + v32)
            {
              unint64_t v34 = (char *)v33 - v27;
              if ((unint64_t)v33 - v27 > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_75;
              }
              unint64_t v32 = (unint64_t)(v34 + 8);
              if ((unint64_t)(v34 + 8) > v31) {
                goto LABEL_75;
              }
              void *v33 = v7;
            }
            if (!v31) {
              goto LABEL_75;
            }
            unint64_t v35 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v36 = *((void *)v5 + 8);
            if (v35 + 16 >= v36) {
              unint64_t v35 = 0;
            }
            if (v32 <= 0x10) {
              unint64_t v32 = 16;
            }
            unint64_t v37 = v35 + v32;
            if (v36 <= v37) {
              unint64_t v38 = 0;
            }
            else {
              unint64_t v38 = v37;
            }
            *((void *)v5 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v38;
            unint64_t v39 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v38);
            int v40 = *((_DWORD *)v5 + 29);
            if (v39 == 0x80000000 || v40 != 0)
            {
              unsigned int v42 = v40 + 1;
              *((_DWORD *)v5 + 29) = v42;
              if (v42 >= *((_DWORD *)v5 + 28))
              {
                if (*((unsigned char *)v5 + 104)) {
                  MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
                }
                *((_DWORD *)v5 + 29) = 0;
              }
            }
            *((void *)v5 + 7) = v7;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 64, &v55, v9);
          if (!v57) {
            goto LABEL_75;
          }
          *(void *)buf = v55;
          *(void *)&uint8_t buf[8] = v56;
          *(void *)&uint8_t buf[16] = 0;
          unint64_t v11 = (v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
          BOOL v12 = v11 >= v55;
          unint64_t v13 = v11 - v55;
          if (v12)
          {
            if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v56)
            {
              *(void *)&uint8_t buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v55 + v13) = 862;
              *(void *)&uint8_t buf[16] = v13 + 2;
            }
          }
          IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v51);
          uint64_t v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, v52);
          if (*(void *)&buf[8])
          {
            uint64_t v15 = *(void *)&buf[16];
            unint64_t v16 = (*((void *)v5 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v17 = *((void *)v5 + 8);
            if (v16 + 16 >= v17) {
              unint64_t v16 = 0;
            }
            if (*(void *)&buf[16] <= 0x10uLL) {
              uint64_t v15 = 16;
            }
            unint64_t v18 = v16 + v15;
            if (v17 <= v18) {
              unint64_t v18 = 0;
            }
            *((void *)v5 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v18;
            if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v5 + 9) + 16) + 128), v18) == 0x80000000
              || *((_DWORD *)v5 + 29))
            {
              if (*((unsigned char *)v5 + 104)) {
                MEMORY[0x1997420B0](*((unsigned int *)v5 + 23));
              }
              *((_DWORD *)v5 + 29) = 0;
            }
            goto LABEL_24;
          }
          if (v57) {
            break;
          }
          __break(1u);
LABEL_82:
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v6, v4[480], &v53);
          uint64_t v6 = v53;
          if (v53 && !*((unsigned char *)v53 + 4016))
          {
            *((unsigned char *)v53 + 4016) = 1;
            uint64_t v6 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v6);
          }
        }
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v55, v56);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        int v46 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithColor>(*(uint64_t *)buf, (uint64_t)&v51, v7);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
        if (!v46) {
          goto LABEL_24;
        }
LABEL_75:
        char v47 = off_1EB3583E8;
        if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = IPC::errorAsString();
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_FillRectWithColor";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v48;
          _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        uint64_t v49 = v4[481];
        if (v49)
        {
          int v50 = *(unsigned char **)(v49 + 8);
          if (v50) {
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v50);
          }
        }
LABEL_24:
        unint64_t v19 = v53;
        uint64_t v53 = 0;
        if (v19)
        {
          char v20 = 0;
          uint64_t v21 = *((void *)v19 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
          if (v20) {
            MEMORY[0x19972E8D0](v21);
          }
          uint64_t v22 = *(void *)(v21 + 8);
          int v23 = 1;
          uint64_t v24 = v22 - 1;
          *(void *)(v21 + 8) = v22 - 1;
          if (v22 == 1)
          {
            uint64_t v45 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            *(void *)(v21 + 24) = 0;
            BOOL v26 = v45 != 0;
          }
          else
          {
            uint64_t v25 = 0;
            BOOL v26 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
          if (v23 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v21);
          }
          if (!v24)
          {
            if (v25) {
              (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
            }
            if (!v26) {
              WTF::fastFree((WTF *)v21, v14);
            }
          }
        }
        this = v54;
        uint64_t v54 = 0;
        if (this)
        {
          if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)this);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this, v14);
            return (void *)WTF::fastFree(v43, v44);
          }
        }
      }
    }
  }
  return this;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(uint64_t *result, _DWORD *a2)
{
  int v2 = a2[1];
  uint64_t v3 = *result;
  unint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v8 + v4 + 4;
    if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v9) = *a2;
      result[2] = v10;
      uint64_t v3 = *result;
      unint64_t v4 = v10;
    }
  }
  unint64_t v12 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v13 = v12 - (v3 + v4);
  if (v12 >= v3 + v4)
  {
    unint64_t v14 = v12 - v3;
    unint64_t v15 = v13 + v4 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v14) = v2;
      result[2] = v15;
      uint64_t v3 = *result;
      unint64_t v4 = v15;
    }
  }
  int v17 = a2[3];
  unint64_t v18 = (v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v18 - (v3 + v4);
  if (v18 >= v3 + v4)
  {
    unint64_t v20 = v18 - v3;
    unint64_t v21 = v19 + v4 + 4;
    if (v20 > 0xFFFFFFFFFFFFFFFBLL || v21 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v3 + v2std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = a2[2];
      result[2] = v21;
      uint64_t v3 = *result;
      unint64_t v4 = v21;
    }
  }
  int v23 = (_DWORD *)((v3 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v23 >= v3 + v4)
  {
    unint64_t v24 = (unint64_t)v23 - v3 + 4;
    if ((unint64_t)v23 - v3 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      _DWORD *v23 = v17;
      result[2] = v24;
    }
  }
  return result;
}

void WebKit::RemoteDisplayListRecorderProxy::recordSetState(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::GraphicsContextState *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19972FAF0](v78, a2);
  uint64_t v4 = *((void *)this + 481);
  if (!v4) {
    goto LABEL_38;
  }
  unint64_t v5 = *(WebKit::RemoteRenderingBackendProxy **)(v4 + 8);
  if (!v5) {
    goto LABEL_38;
  }
  WebKit::RemoteRenderingBackendProxy::connection(v5, (atomic_uint **)&v73);
  unint64_t v6 = v73;
  if (!v73) {
    goto LABEL_38;
  }
  BOOL v7 = (WTF::ApproximateTime *)*((void *)this + 479);
  if (v7) {
    goto LABEL_103;
  }
  uint64_t v72 = 0;
  while (1)
  {
    uint64_t v8 = *((void *)this + 478);
    double v9 = *((double *)v6 + 15);
    double v10 = INFINITY;
    if (fabs(v9) != INFINITY)
    {
      WTF::ApproximateTime::now(v7);
      double v10 = v9 + v11;
    }
    if (*((void *)v6 + 7) == v8) {
      goto LABEL_9;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, buf, v10);
    if (!buf[16]) {
      goto LABEL_96;
    }
    uint64_t v32 = *(void *)buf;
    unint64_t v33 = *(void *)&buf[8];
    unint64_t v34 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v35 = v34 - *(void *)buf;
    BOOL v36 = v34 >= *(void *)buf;
    unint64_t v37 = v34 - *(void *)buf + 2;
    BOOL v39 = v35 < 0xFFFFFFFFFFFFFFFELL && v37 <= *(void *)&buf[8];
    if (v36 && v39) {
      goto LABEL_56;
    }
    if (!v36)
    {
      unint64_t v37 = 0;
      goto LABEL_57;
    }
    unint64_t v40 = 0;
    if (v35 > 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v37 = 0;
      goto LABEL_58;
    }
    unint64_t v37 = 0;
    if (v35 + 2 <= *(void *)&buf[8])
    {
      unint64_t v37 = v35 + 2;
LABEL_56:
      *(_WORD *)(*(void *)buf + v35) = 2871;
LABEL_57:
      unint64_t v40 = v33;
    }
LABEL_58:
    unint64_t v41 = (v32 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v41 >= v32 + v37)
    {
      unint64_t v42 = v41 - v32;
      if (v42 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_96;
      }
      unint64_t v37 = v42 + 8;
      if (v42 + 8 > v40) {
        goto LABEL_96;
      }
      *(void *)(v32 + v42) = v8;
    }
    if (!v40) {
      goto LABEL_96;
    }
    unint64_t v43 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v44 = *((void *)v6 + 8);
    if (v43 + 16 >= v44) {
      unint64_t v43 = 0;
    }
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v45 = v43 + v37;
    if (v44 <= v45) {
      unint64_t v46 = 0;
    }
    else {
      unint64_t v46 = v45;
    }
    *((void *)v6 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v46;
    unint64_t v47 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v46);
    int v48 = *((_DWORD *)v6 + 29);
    if (v47 == 0x80000000 || v48 != 0)
    {
      unsigned int v50 = v48 + 1;
      *((_DWORD *)v6 + 29) = v50;
      if (v50 >= *((_DWORD *)v6 + 28))
      {
        if (*((unsigned char *)v6 + 104)) {
          MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
        }
        *((_DWORD *)v6 + 29) = 0;
      }
    }
    *((void *)v6 + 7) = v8;
LABEL_9:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 64, &v75, v10);
    if (!v77) {
      goto LABEL_96;
    }
    *(void *)buf = v75;
    *(void *)&uint8_t buf[8] = v76;
    *(void *)&uint8_t buf[16] = 0;
    unint64_t v12 = (v75 + 1) & 0xFFFFFFFFFFFFFFFELL;
    BOOL v13 = v12 >= v75;
    unint64_t v14 = v12 - v75;
    if (v13)
    {
      if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v76)
      {
        *(void *)&uint8_t buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v75 + v14) = 881;
        *(void *)&uint8_t buf[16] = v14 + 2;
      }
    }
    BOOL v7 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::encode((uint64_t *)buf, (uint64_t)v78);
    if (*(void *)&buf[8])
    {
      uint64_t v15 = *(void *)&buf[16];
      unint64_t v16 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v17 = *((void *)v6 + 8);
      if (v16 + 16 >= v17) {
        unint64_t v16 = 0;
      }
      if (*(void *)&buf[16] <= 0x10uLL) {
        uint64_t v15 = 16;
      }
      unint64_t v18 = v16 + v15;
      if (v17 <= v18) {
        unint64_t v18 = 0;
      }
      *((void *)v6 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v18;
      unint64_t v19 = atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v18);
      int v20 = *((_DWORD *)v6 + 29);
      if (v19 == 0x80000000 || v20 != 0)
      {
        unsigned int v31 = v20 + 1;
        *((_DWORD *)v6 + 29) = v31;
        if (v31 >= *((_DWORD *)v6 + 28))
        {
          if (*((unsigned char *)v6 + 104)) {
            MEMORY[0x1997420B0](*((unsigned int *)v6 + 23));
          }
          *((_DWORD *)v6 + 29) = 0;
        }
      }
      goto LABEL_27;
    }
    uint64_t v70 = v8;
    if (v77) {
      break;
    }
    __break(1u);
LABEL_103:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteImageBufferProxy>((atomic_uchar *)v7, *((void *)this + 480), &v72);
    BOOL v7 = v72;
    if (v72 && !*((unsigned char *)v72 + 4016))
    {
      *((unsigned char *)v72 + 4016) = 1;
      BOOL v7 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::prepareForBackingStoreChange(v7);
    }
  }
  unint64_t v54 = (v75 + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = v54 - v75;
  if (v54 < v75)
  {
    unint64_t v56 = 0;
  }
  else
  {
    unint64_t v56 = 0;
    if (v55 <= 0xFFFFFFFFFFFFFFFDLL && v55 + 2 <= v76)
    {
      *(_WORD *)(v75 + v55) = 2870;
      unint64_t v56 = v55 + 2;
    }
  }
  unint64_t v57 = (*((void *)v6 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v58 = *((void *)v6 + 8);
  if (v57 + 16 >= v58) {
    unint64_t v57 = 0;
  }
  if (v56 <= 0x10) {
    unint64_t v56 = 16;
  }
  unint64_t v59 = v57 + v56;
  if (v58 <= v59) {
    unint64_t v59 = 0;
  }
  *((void *)v6 + 1std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v59;
  atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v6 + 9) + 16) + 128), v59);
  *((_DWORD *)v6 + 29) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v74, (uint64_t **)v6 + 1);
  uint64_t v60 = v74;
  unint64_t v61 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v61 = 881;
  *((void *)v61 + 1) = v70;
  *((void *)v61 + 66) = (char *)v61 + 16;
  *((void *)v61 + 67) = 512;
  *((void *)v61 + 68) = 0;
  *((void *)v61 + 7std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *((void *)v61 + 69) = 0;
  IPC::Encoder::encodeHeader(v61);
  *(void *)buf = v61;
  IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::encode(v61, (uint64_t)v78);
  int v71 = IPC::Connection::sendMessageImpl((uint64_t)v60, (uint64_t *)buf, 1, 0);
  char v63 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v63)
  {
    IPC::Encoder::~Encoder(v63, v62);
    WTF::fastFree(v68, v69);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v74);
  if (v71)
  {
LABEL_96:
    uint64_t v64 = off_1EB3583E8;
    if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v65 = IPC::errorAsString();
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "RemoteDisplayListRecorder_SetState";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v65;
      _os_log_impl(&dword_1985F2000, v64, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    uint64_t v66 = *((void *)this + 481);
    if (v66)
    {
      uint64_t v67 = *(unsigned char **)(v66 + 8);
      if (v67) {
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v67);
      }
    }
  }
LABEL_27:
  uint64_t v22 = v72;
  uint64_t v72 = 0;
  if (v22)
  {
    char v23 = 0;
    uint64_t v24 = *((void *)v22 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
    if (v23) {
      MEMORY[0x19972E8D0](v24);
    }
    uint64_t v25 = *(void *)(v24 + 8);
    int v26 = 1;
    uint64_t v27 = v25 - 1;
    *(void *)(v24 + 8) = v25 - 1;
    if (v25 == 1)
    {
      uint64_t v53 = *(void *)(v24 + 16);
      uint64_t v28 = *(void *)(v24 + 24);
      *(void *)(v24 + 24) = 0;
      BOOL v29 = v53 != 0;
    }
    else
    {
      uint64_t v28 = 0;
      BOOL v29 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
    if (v26 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
    }
    if (!v27)
    {
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
      if (!v29) {
        WTF::fastFree((WTF *)v24, v3);
      }
    }
  }
  unint64_t v30 = (unsigned int *)v73;
  uint64_t v73 = 0;
  if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v30);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v30, v3);
    WTF::fastFree(v51, v52);
  }
LABEL_38:
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v78, v3);
}

uint64_t *IPC::ArgumentCoder<WebCore::GraphicsContextState,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)a2);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 80);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = v4;
    a1[2] = v5 + 1;
  }
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_72;
    }
    if (*(_DWORD *)(a2 + 80) != 1) {
      goto LABEL_66;
    }
    IPC::ArgumentCoder<WebCore::SourceBrushLogicalGradient,void>::encode(a1, a2 + 16);
  }
  else if (*(_DWORD *)(a2 + 80))
  {
    goto LABEL_66;
  }
  while (1)
  {
    dispatch_queue_t result = IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)(a2 + 88));
    uint64_t v7 = *(unsigned __int8 *)(a2 + 168);
    unint64_t v8 = a1[2];
    if (v8 >= a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)(*a1 + v8) = v7;
      a1[2] = v8 + 1;
    }
    if (v7)
    {
      if (v7 == 1)
      {
        if (*(_DWORD *)(a2 + 168) != 1)
        {
LABEL_66:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_67;
        }
        dispatch_queue_t result = IPC::ArgumentCoder<WebCore::SourceBrushLogicalGradient,void>::encode(a1, a2 + 104);
      }
      else
      {
        dispatch_queue_t result = IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>(a1, *(void *)(a2 + 104), *(_DWORD *)(a2 + 168), v7);
      }
    }
    else if (*(_DWORD *)(a2 + 168))
    {
      goto LABEL_66;
    }
    unint64_t v10 = a1[1];
    unint64_t v9 = a1[2];
    uint64_t v11 = *a1;
    unint64_t v12 = *a1 + v9;
    unint64_t v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v14 = v13 >= v12;
    unint64_t v15 = v13 - v12;
    if (v14)
    {
      unint64_t v16 = v15 + v9;
      if (v15 + v9 > 0xFFFFFFFFFFFFFFFBLL || v16 + 4 > v10)
      {
        unint64_t v10 = 0;
        a1[1] = 0;
      }
      else
      {
        *(_DWORD *)(v11 + v16) = *(_DWORD *)(a2 + 176);
        a1[2] = v16 + 4;
        uint64_t v11 = *a1;
        unint64_t v10 = a1[1];
        unint64_t v9 = v16 + 4;
      }
    }
    unint64_t v17 = (_DWORD *)((v11 + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v17 >= v11 + v9)
    {
      unint64_t v18 = (char *)v17 - v11;
      if ((unint64_t)v17 - v11 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v18 + 4) > v10)
      {
        unint64_t v10 = 0;
        a1[1] = 0;
      }
      else
      {
        _DWORD *v17 = *(_DWORD *)(a2 + 180);
        a1[2] = (uint64_t)(v18 + 4);
        unint64_t v10 = a1[1];
        unint64_t v9 = (unint64_t)(v18 + 4);
      }
    }
    if (v9 >= v10)
    {
      unint64_t v19 = 0;
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)(*a1 + v9++) = *(unsigned char *)(a2 + 184);
      a1[2] = v9;
      unint64_t v19 = a1[1];
    }
    if (v9 >= v19)
    {
      unint64_t v20 = 0;
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)(*a1 + v9++) = *(unsigned char *)(a2 + 185);
      a1[2] = v9;
      unint64_t v20 = a1[1];
    }
    if (v9 < v20)
    {
      unint64_t v21 = v9 + 1;
      *(unsigned char *)(*a1 + v9) = *(unsigned char *)(a2 + 186);
      a1[2] = v9 + 1;
      if (v9 + 1 < a1[1])
      {
        v9 += 2;
        *(unsigned char *)(*a1 + v21) = *(unsigned char *)(a2 + 187);
        a1[2] = v9;
        unint64_t v22 = a1[1];
        goto LABEL_25;
      }
      ++v9;
    }
    unint64_t v22 = 0;
    a1[1] = 0;
LABEL_25:
    if (*(unsigned char *)(a2 + 224))
    {
      if (v9 < v22)
      {
        *(unsigned char *)(*a1 + v9) = 1;
        a1[2] = v9 + 1;
        if (!*(unsigned char *)(a2 + 224)) {
          goto LABEL_71;
        }
        goto LABEL_54;
      }
LABEL_67:
      a1[1] = 0;
LABEL_54:
      dispatch_queue_t result = IPC::ArgumentCoder<WebCore::GraphicsDropShadow,void>::encode(a1, a2 + 192);
      unint64_t v9 = a1[2];
      goto LABEL_28;
    }
    if (v9 >= v22)
    {
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)(*a1 + v9++) = 0;
      a1[2] = v9;
    }
LABEL_28:
    unint64_t v23 = a1[1];
    if (!*(unsigned char *)(a2 + 320)) {
      break;
    }
    if (v9 >= v23)
    {
      a1[1] = 0;
LABEL_70:
      dispatch_queue_t result = IPC::ArgumentCoder<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix> const&>(a1, (_DWORD *)(a2 + 232));
      unint64_t v9 = a1[2];
      goto LABEL_31;
    }
    *(unsigned char *)(*a1 + v9) = 1;
    a1[2] = v9 + 1;
    if (*(unsigned char *)(a2 + 320)) {
      goto LABEL_70;
    }
LABEL_71:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_72:
    IPC::ArgumentCoder<std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<std::monostate,WebCore::SourceBrushLogicalGradient,WTF::Ref<WebCore::Pattern,WTF::RawPtrTraits<WebCore::Pattern>,WTF::DefaultRefDerefTraits<WebCore::Pattern>>> const&,0ul,1ul>(a1, *(void *)(a2 + 16), *(_DWORD *)(a2 + 80), v4);
  }
  if (v9 >= v23)
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v9++) = 0;
    a1[2] = v9;
  }
LABEL_31:
  unint64_t v24 = a1[1];
  unint64_t v25 = *a1 + v9;
  unint64_t v26 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v14 = v26 >= v25;
  unint64_t v27 = v26 - v25;
  if (v14)
  {
    unint64_t v28 = v27 + v9;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > v24)
    {
      unint64_t v24 = 0;
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v28) = *(_DWORD *)(a2 + 328);
      a1[2] = v28 + 4;
      unint64_t v24 = a1[1];
      unint64_t v9 = v28 + 4;
    }
  }
  if (v9 >= v24)
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v9) = *(unsigned char *)(a2 + 332);
    a1[2] = v9 + 1;
    if (v9 + 1 < a1[1])
    {
      *(unsigned char *)(*a1 + v9 + 1) = *(unsigned char *)(a2 + 333);
      a1[2] = v9 + 2;
      if (v9 + 2 < a1[1])
      {
        *(unsigned char *)(*a1 + v9 + 2) = *(unsigned char *)(a2 + 334);
        a1[2] = v9 + 3;
        if (v9 + 3 < a1[1])
        {
          *(unsigned char *)(*a1 + v9 + 3) = *(unsigned char *)(a2 + 335);
          a1[2] = v9 + 4;
          if (v9 + 4 < a1[1])
          {
            *(unsigned char *)(*a1 + v9 + 4) = *(unsigned char *)(a2 + 336);
            a1[2] = v9 + 5;
            if (v9 + 5 < a1[1])
            {
              *(unsigned char *)(*a1 + v9 + 5) = *(unsigned char *)(a2 + 337);
              a1[2] = v9 + 6;
              if (v9 + 6 < a1[1])
              {
                *(unsigned char *)(*a1 + v9 + 6) = *(unsigned char *)(a2 + 338);
                a1[2] = v9 + 7;
                if (v9 + 7 < a1[1])
                {
                  *(unsigned char *)(*a1 + v9 + 7) = *(unsigned char *)(a2 + 339);
                  a1[2] = v9 + 8;
                  if (v9 + 8 < a1[1])
                  {
                    *(unsigned char *)(*a1 + v9 + 8) = *(unsigned char *)(a2 + 340);
                    a1[2] = v9 + 9;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  a1[1] = 0;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::Color,void>::encode(uint64_t *a1, WebCore::Color *this)
{
  WebCore::Color::data(v4, this);
  return IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::ColorDataForIPC>>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::ColorDataForIPC>>(uint64_t *result, unsigned char *a2)
{
  unint64_t v2 = result[1];
  unint64_t v3 = result[2];
  if (a2[28])
  {
    if (v3 >= v2) {
      goto LABEL_28;
    }
    unint64_t v4 = v3 + 1;
    *(unsigned char *)(*result + v3) = 1;
    result[2] = v3 + 1;
    if (!a2[28]) {
      goto LABEL_25;
    }
    if (v4 >= result[1]) {
      goto LABEL_26;
    }
    *(unsigned char *)(*result + v4) = *a2;
    result[2] = v3 + 2;
    if (v3 + 2 >= result[1])
    {
      v3 += 2;
      goto LABEL_28;
    }
    unint64_t v5 = v3 + 3;
    *(unsigned char *)(*result + v3 + 2) = a2[1];
    result[2] = v3 + 3;
    unsigned int v8 = a2[24];
    unint64_t v6 = a2 + 24;
    unsigned int v7 = v8;
    unint64_t v9 = v6 - 5;
    if (v3 + 3 >= result[1]) {
      goto LABEL_29;
    }
    *(unsigned char *)(*result + v5) = v7;
    unint64_t v5 = v3 + 4;
    result[2] = v3 + 4;
    while (1)
    {
      if (v7)
      {
        return IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&,0ul>(result, (uint64_t)v9, v7);
      }
      if (!*v6) {
        break;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
      dispatch_queue_t result = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_26:
      unint64_t v3 = v4;
LABEL_28:
      unsigned int v17 = a2[24];
      unint64_t v6 = a2 + 24;
      unsigned int v7 = v17;
      unint64_t v9 = v6 - 5;
      unint64_t v5 = v3;
LABEL_29:
      result[1] = 0;
    }
    unint64_t v10 = *result + v5;
    unint64_t v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v12 = v11 >= v10;
    unint64_t v13 = v11 - v10;
    if (!v12) {
      return result;
    }
    unint64_t v14 = v13 + v5;
    unint64_t v15 = v14 + 4;
    if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v15 <= result[1])
    {
      *(_DWORD *)(*result + v14) = *v9;
      result[2] = v15;
      return result;
    }
  }
  else if (v3 < v2)
  {
    *(unsigned char *)(*result + v3) = 0;
    result[2] = v3 + 1;
    return result;
  }
  result[1] = 0;
  return result;
}

void WebKit::XPCServiceEventHandler(void *a1)
{
  if (a1) {
    id v2 = a1;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  xpc_connection_set_target_queue((xpc_connection_t)a1, global_queue);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3321888768;
  handler[2] = ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke;
  handler[3] = &__block_descriptor_40_e8_32c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE_e33_v16__0__NSObject_OS_xpc_object__8l;
  id v6 = a1;
  if (a1) {
    id v4 = a1;
  }
  xpc_connection_set_event_handler((xpc_connection_t)a1, handler);
  xpc_connection_resume((xpc_connection_t)a1);
  if (v6) {

  }
  if (a1) {
}
  }

void sub_1986E8274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14) {

  }
  if (v14) {
  _Unwind_Resume(exception_object);
  }
}

uint64_t WebKit::WebUserContentController::forEachUserStyleSheet(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 80);
  if (!v3)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
LABEL_3:
    uint64_t v6 = v3 + 24 * v5;
    goto LABEL_4;
  }
  uint64_t v5 = *(unsigned int *)(v3 - 4);
  uint64_t v6 = v3 + 24 * v5;
  if (!*(_DWORD *)(v3 - 12))
  {
    uint64_t v4 = v3 + 24 * v5;
    goto LABEL_3;
  }
  uint64_t v4 = *(void *)(result + 80);
  if (v5)
  {
    uint64_t v12 = 24 * v5;
    uint64_t v4 = *(void *)(result + 80);
    while ((unint64_t)(*(void *)v4 + 1) <= 1)
    {
      v4 += 24;
      v12 -= 24;
      if (!v12)
      {
        uint64_t v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  if (v3) {
    uint64_t v7 = v3 + 24 * *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  while (v4 != v7)
  {
    uint64_t v8 = *(unsigned int *)(v4 + 20);
    if (v8)
    {
      uint64_t v9 = 120 * v8;
      uint64_t v10 = *(void *)(v4 + 8) + 16;
      do
      {
        dispatch_queue_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v10);
        v10 += 120;
        v9 -= 120;
      }
      while (v9);
    }
    uint64_t v11 = v4 + 24;
    uint64_t v4 = v6;
    if (v11 != v6)
    {
      uint64_t v4 = v11;
      while ((unint64_t)(*(void *)v4 + 1) <= 1)
      {
        v4 += 24;
        if (v4 == v6)
        {
          uint64_t v4 = v6;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t *WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1}::operator()(void *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v6 = *(unint64_t **)(*a1 + 96);
  uint64_t v4 = *a1 + 96;
  uint64_t v5 = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 108);
  if (v7)
  {
    uint64_t v8 = a1[2];
    uint64_t v9 = 20 * v7;
    do
    {
      unint64_t v10 = *v5;
      uint64_t v5 = (unint64_t *)((char *)v5 + 20);
      *(_DWORD *)(v8 + 4 * ((v10 >> 5) & 0x1FFF)) |= 1 << v10;
      *(_DWORD *)(v8 + 4 * ((v10 >> 37) & 0x1FFF)) |= 1 << SBYTE4(v10);
      v9 -= 20;
    }
    while (v9);
  }
  WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v4, a2);
  uint64_t v12 = *(unint64_t **)(v3 + 112);
  uint64_t v13 = *(unsigned int *)(v3 + 124);
  if (v13)
  {
    uint64_t v19 = a1[3];
    uint64_t v20 = 20 * v13;
    do
    {
      unint64_t v21 = *v12;
      uint64_t v12 = (unint64_t *)((char *)v12 + 20);
      *(_DWORD *)(v19 + 4 * ((v21 >> 5) & 0x1FFF)) |= 1 << v21;
      *(_DWORD *)(v19 + 4 * ((v21 >> 37) & 0x1FFF)) |= 1 << SBYTE4(v21);
      v20 -= 20;
    }
    while (v20);
  }
  WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3 + 112, v11);
  uint64_t v15 = a1[2];
  a1[2] = 0;
  unint64_t v16 = *(WTF **)(v3 + 64);
  *(void *)(v3 + 64) = v15;
  if (v16) {
    WTF::fastFree(v16, v14);
  }
  uint64_t v17 = a1[3];
  a1[3] = 0;
  dispatch_queue_t result = *(uint64_t **)(v3 + 72);
  *(void *)(v3 + 72) = v17;
  if (result) {
    dispatch_queue_t result = (uint64_t *)WTF::fastFree((WTF *)result, v14);
  }
  *(void *)(v3 + 48) = a1[4];
  *(unsigned char *)(v3 + 8std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  if (*(_DWORD *)(v3 + 24) == 1)
  {
    return WebKit::NetworkCache::Storage::dispatchPendingWriteOperations((uint64_t *)v3, (WTF::StringImpl *)v14);
  }
  return result;
}

uint64_t WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, void *a2)
{
  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12)) {
      *(_DWORD *)(result + 12) = 0;
    }
    id v2 = *(WTF **)result;
    if (*(void *)result)
    {
      *(void *)dispatch_queue_t result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcess::isSystemWebKit(void)::$_0::operator()()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  ImageCFStringRef Name = class_getImageName(v0);
  if (!ImageName) {
    return 0;
  }
  id v2 = (void *)[[NSString alloc] initWithUTF8String:ImageName];
  uint64_t v3 = [v2 hasPrefix:WTF::FileSystemImpl::systemDirectoryPath((WTF::FileSystemImpl *)v2)];
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

void sub_1986E85E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **IPC::handleMessage<Messages::WebProcess::UpdateDomainsWithStorageAccessQuirks,WebKit::WebProcess,WebKit::WebProcess,void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)>(IPC::Decoder *a1, uint64_t a2)
{
  dispatch_queue_t result = (WTF::StringImpl **)IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>(a1, (uint64_t)&v6);
  if (v7)
  {
    dispatch_queue_t result = (WTF::StringImpl **)WebKit::WebProcess::updateDomainsWithStorageAccessQuirks(a2, (WTF::StringImpl *)&v6, v4);
    if (v7)
    {
      dispatch_queue_t result = v6;
      if (v6) {
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v5);
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(a1, &v6);
  if (v7)
  {
    *(void *)a2 = v6;
    char v5 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    uint64_t result = IPC::Decoder::markInvalid(a1);
    char v5 = 0;
  }
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

const char **IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 16));
  IPC::ArgumentCoder<WebKit::NetworkSessionCreationParameters,void>::encode(a1, a2 + 32);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 640);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 656);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 672);

  return IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 688);
}

_DWORD *IPC::ArgumentCoder<WebKit::NetworkSessionCreationParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8D7CLL);
  }
  *uint64_t v6 = (v4 | v5) == 0;
  if (v4 | v5)
  {
    if (*(_OWORD *)(a2 + 16) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E911CLL);
    }
    IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 16));
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  char v8 = *(unsigned char *)(a2 + 40);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8D9CLL);
  }
  *uint64_t v9 = v8;
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, *(const __CFDictionary **)(a2 + 48));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  char v11 = *(unsigned char *)(a2 + 72);
  uint64_t v12 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8DBCLL);
  }
  *uint64_t v12 = v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 80));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 120));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 160));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 168));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 176));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 184));
  char v14 = *(unsigned char *)(a2 + 192);
  uint64_t v15 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8DDCLL);
  }
  unsigned char *v15 = v14;
  char v17 = *(unsigned char *)(a2 + 193);
  unint64_t v18 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8DFCLL);
  }
  *unint64_t v18 = v17;
  IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::encode(a1, a2 + 208);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 272));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 280));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 288));
  char v20 = *(unsigned char *)(a2 + 296);
  unint64_t v21 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8E1CLL);
  }
  unsigned char *v21 = v20;
  char v23 = *(unsigned char *)(a2 + 297);
  unint64_t v24 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8E3CLL);
  }
  unsigned char *v24 = v23;
  char v26 = *(unsigned char *)(a2 + 298);
  unint64_t v27 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8E5CLL);
  }
  *unint64_t v27 = v26;
  char v29 = *(unsigned char *)(a2 + 299);
  unint64_t v30 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8E7CLL);
  }
  *unint64_t v30 = v29;
  int v32 = *(_DWORD *)(a2 + 300);
  unint64_t v33 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v34 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8E9CLL);
  }
  _DWORD *v33 = v32;
  char v35 = *(unsigned char *)(a2 + 304);
  BOOL v36 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v37)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8EBCLL);
  }
  unsigned char *v36 = v35;
  char v38 = *(unsigned char *)(a2 + 305);
  BOOL v39 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8EDCLL);
  }
  unsigned char *v39 = v38;
  char v41 = *(unsigned char *)(a2 + 306);
  unint64_t v42 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v43)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8EFCLL);
  }
  *unint64_t v42 = v41;
  char v44 = *(unsigned char *)(a2 + 307);
  unint64_t v45 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v46)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8F1CLL);
  }
  unsigned char *v45 = v44;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>(a1, a2 + 308);
  char v47 = *(unsigned char *)(a2 + 316);
  int v48 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8F3CLL);
  }
  unsigned char *v48 = v47;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 317));
  char v50 = *(unsigned char *)(a2 + 319);
  uint64_t v51 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v52)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8F5CLL);
  }
  *uint64_t v51 = v50;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 320));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 328));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 336));
  char v53 = *(unsigned char *)(a2 + 344);
  unint64_t v54 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v55)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8F7CLL);
  }
  *unint64_t v54 = v53;
  char v56 = *(unsigned char *)(a2 + 345);
  unint64_t v57 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v58)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8F9CLL);
  }
  *unint64_t v57 = v56;
  char v59 = *(unsigned char *)(a2 + 346);
  uint64_t v60 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v61)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8FBCLL);
  }
  *uint64_t v60 = v59;
  char v62 = *(unsigned char *)(a2 + 347);
  char v63 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v64)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8FDCLL);
  }
  *char v63 = v62;
  uint64_t v65 = *(void *)(a2 + 352);
  uint64_t v66 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v67 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8FFCLL);
  }
  void *v66 = v65;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 360);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, a2 + 376);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 392));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 408));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 424));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 432));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 440));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 448));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 456));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 464));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 472));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 480));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 488));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 496));
  char v68 = *(unsigned char *)(a2 + 504);
  char v69 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v70)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E901CLL);
  }
  *char v69 = v68;
  char v71 = *(unsigned char *)(a2 + 505);
  uint64_t v72 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v73)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E903CLL);
  }
  *uint64_t v72 = v71;
  char v74 = *(unsigned char *)(a2 + 506);
  unint64_t v75 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v76)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E905CLL);
  }
  *unint64_t v75 = v74;
  char v77 = *(unsigned char *)(a2 + 507);
  int v78 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v79)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E907CLL);
  }
  unsigned char *v78 = v77;
  int v80 = *(unsigned __int8 *)(a2 + 528);
  uint64_t v81 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v80)
  {
    if (!v82)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E913CLL);
    }
    *uint64_t v81 = 1;
    if (!*(unsigned char *)(a2 + 528))
    {
      uint64_t v99 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (_DWORD *)IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(v99, v100);
    }
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 524));
    uint64_t v83 = *(unsigned int *)(a2 + 524);
    if (v83)
    {
      uint64_t v84 = *(void *)(a2 + 512);
      uint64_t v85 = v84 + 32 * v83;
      do
      {
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)v84, *(unsigned int *)(v84 + 12));
        IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(v84 + 16));
        v84 += 32;
      }
      while (v84 != v85);
    }
  }
  else
  {
    if (!v82)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E915CLL);
    }
    *uint64_t v81 = 0;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 536));
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 544));
  char v86 = *(unsigned char *)(a2 + 552);
  uint64_t v87 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v88)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E909CLL);
  }
  unsigned char *v87 = v86;
  char v89 = *(unsigned char *)(a2 + 553);
  uint64_t v90 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v91)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E90BCLL);
  }
  *uint64_t v90 = v89;
  char v92 = *(unsigned char *)(a2 + 554);
  uint64_t v93 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v94)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E90DCLL);
  }
  unsigned char *v93 = v92;
  char v95 = *(unsigned char *)(a2 + 555);
  uint64_t v96 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v97)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E90FCLL);
  }
  *uint64_t v96 = v95;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 556));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 557));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 558));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 560));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 568));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 576));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 584));

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 592));
}

uint64_t IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(IPC::Encoder *this, uint64_t *a2)
{
  if (*a2) {
    int v4 = *(_DWORD *)(*a2 - 12);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = (_DWORD *)IPC::Encoder::grow(this, 4uLL, 4);
  if (v6 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v5 = v4;
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, v6, v7);
    uint64_t v9 = (uint64_t *)result;
    v14[0] = result;
    v14[1] = v10;
    if (*a2) {
      uint64_t v11 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11 != result)
    {
      do
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v9);
        v14[0] += 8;
        uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v14, v12, v13);
        uint64_t v9 = (uint64_t *)v14[0];
      }
      while (v14[0] != v11);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(_DWORD *)(v3 - 12)) {
    return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(a1, v3, a3);
  }
  return v3 + 8 * *(unsigned int *)(v3 - 4);
}

unsigned char *IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E9314);
    }
    *uint64_t result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      double v7 = *(double *)a2;
      return (unsigned char *)IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v7);
    }
    else
    {
      uint64_t v8 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)WebKit::WebProcess::updateDomainsWithStorageAccessQuirks(v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E9334);
    }
    *uint64_t result = 0;
  }
  return result;
}

uint64_t WebKit::WebProcess::updateDomainsWithStorageAccessQuirks(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  int v4 = (uint64_t *)(a1 + 808);
  uint64_t v5 = *(WTF::StringImpl ***)(a1 + 808);
  if (v5)
  {
    *int v4 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)a2, (uint64_t)a2, a3);
  double v7 = (WTF::StringImpl **)result;
  v13[0] = result;
  v13[1] = v8;
  if (*(void *)a2) {
    uint64_t v9 = *(void *)a2 + 8 * *(unsigned int *)(*(void *)a2 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != result)
  {
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v4, v7, (uint64_t)v12);
      v13[0] += 8;
      uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v13, v10, v11);
      double v7 = (WTF::StringImpl **)v13[0];
    }
    while (v13[0] != v9);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v4 = 0;
  }
  v6[0] = a2;
  v6[1] = v3 + 8 * v4;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v6, a2, a3);
  return v6[0];
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(WTF ***)result;
  if (*(void *)result != *(void *)(result + 8))
  {
    uint64_t v4 = (void *)result;
    do
    {
      uint64_t result = WTF::equal(*v3, 0, a3);
      if ((result & 1) == 0 && *v3 != (WTF *)-1) {
        break;
      }
      uint64_t v5 = (WTF **)v4[1];
      uint64_t v3 = (WTF **)(*v4 + 8);
      *uint64_t v4 = v3;
    }
    while (v3 != v5);
  }
  return result;
}

WTF **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v7;
  uint64_t v9 = (WTF **)(v6 + 8 * v8);
  if ((WTF::equal(*v9, 0, v10) & 1) == 0)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    do
    {
      if (*v9 == (WTF *)-1)
      {
        uint64_t v12 = v9;
      }
      else
      {
        uint64_t result = (WTF **)WTF::equalIgnoringASCIICase(*v9, *a2, v11);
        if (result)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            uint64_t v16 = *(unsigned int *)(v15 - 4);
          }
          else {
            uint64_t v16 = 0;
          }
          char v17 = 0;
          uint64_t v18 = v15 + 8 * v16;
          goto LABEL_10;
        }
      }
      unsigned int v8 = (v8 + v13) & v7;
      uint64_t v9 = (WTF **)(v6 + 8 * v8);
      ++v13;
    }
    while (!WTF::equal(*v9, 0, v11));
    if (v12)
    {
      *uint64_t v12 = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v9 = v12;
    }
  }
  uint64_t result = (WTF **)WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(v9, (WTF::StringImpl *)a2, &v25);
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a1;
  if (*a1) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23) {
      goto LABEL_24;
    }
LABEL_28:
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v9);
    uint64_t v9 = result;
    uint64_t v21 = *a1;
    if (*a1) {
      unint64_t v24 = *(unsigned int *)(v21 - 4);
    }
    else {
      unint64_t v24 = 0;
    }
    goto LABEL_24;
  }
  if (3 * v24 <= 4 * v23) {
    goto LABEL_28;
  }
LABEL_24:
  uint64_t v18 = v21 + 8 * v24;
  char v17 = 1;
LABEL_10:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v18;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

uint64_t IPC::ArgumentCoder<__CFDictionary const*,void>::encode(IPC::Encoder *a1, const __CFDictionary *a2)
{
  WebKit::CoreIPCCFDictionary::CoreIPCCFDictionary((WebKit::CoreIPCCFDictionary *)&v7, a2);
  IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    uint64_t v5 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, v3);
    return WTF::fastFree(v5, v6);
  }
  return result;
}

void sub_1986E968C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    uint64_t v11 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebKit::CoreIPCCFDictionary::CoreIPCCFDictionary(WebKit::CoreIPCCFDictionary *this, const __CFDictionary *a2)
{
  *(void *)this = 0;
  if (!a2) {
    return (unint64_t)this;
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = 0;
  v4[1] = 0;
  std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)this, v4);
  uint64_t v5 = *(void *)this;
  unint64_t result = CFDictionaryGetCount(a2);
  int v7 = result;
  if (!result)
  {
LABEL_5:
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___ZN6WebKit19CoreIPCCFDictionaryC2EPK14__CFDictionary_block_invoke;
    void v9[3] = &__block_descriptor_40_e15_v32__0_8_16_B24l;
    unsigned char v9[4] = this;
    [(__CFDictionary *)a2 enumerateKeysAndObjectsUsingBlock:v9];
    return (unint64_t)this;
  }
  if (!(result >> 28))
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)(16 * result));
    *(_DWORD *)(v5 + 8) = v7;
    *(void *)uint64_t v5 = v8;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

void sub_1986E9790(_Unwind_Exception *a1)
{
  std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

void *IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::encode<IPC::Encoder,std::optional<WTF::UUID> const&>(IPC::Encoder *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    char v8 = 1;
    IPC::Encoder::operator<<<BOOL>(this, &v8);
    if (*(unsigned char *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WTF::UUID,void>::encode(this, (uint64_t *)a2);
    }
    else
    {
      uint64_t v6 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return (void *)IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v6, v7);
    }
  }
  else
  {
    unint64_t result = (void *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E9840);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *this, uint64_t *a2)
{
  if (*a2)
  {
    uint64_t v4 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E9900);
    }
    *uint64_t v4 = 1;
    uint64_t v6 = *a2;
    unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(unsigned int *)(v6 + 12));
    uint64_t v8 = *(unsigned int *)(v6 + 12);
    if (v8)
    {
      uint64_t v9 = *(void **)v6;
      uint64_t v10 = &v9[2 * v8];
      do
      {
        ((void (*)(IPC::Encoder *, void))IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>)(this, *v9);
        unint64_t result = ((uint64_t (*)(IPC::Encoder *, void))IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>)(this, v9[1]);
        v9 += 2;
      }
      while (v9 != v10);
    }
  }
  else
  {
    char v11 = 0;
    return IPC::Encoder::operator<<<BOOL>(this, &v11);
  }
  return result;
}

void *IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));

  return IPC::ArgumentCoder<std::optional<WTF::UUID>,void>::encode<IPC::Encoder,std::optional<WTF::UUID> const&>(a1, a2 + 32);
}

uint64_t IPC::handleMessage<Messages::NetworkConnectionToWebProcess::RegisterURLSchemesAsCORSEnabled,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>(IPC::Decoder *a1, void *a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, a2, (uint64_t)v5);
  if (v6)
  {
    uint64_t result = (uint64_t)WebKit::NetworkConnectionToWebProcess::registerURLSchemesAsCORSEnabled((WTF::StringImpl **)a2, (uint64_t)v5);
    if (v6) {
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
    }
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkConnectionToWebProcess::registerURLSchemesAsCORSEnabled(WTF::StringImpl **result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF::StringImpl ***)a2;
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t result = WebKit::NetworkSchemeRegistry::registerURLSchemeAsCORSEnabled((uint64_t)v3[36], v4++);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkSchemeRegistry::registerURLSchemeAsCORSEnabled(uint64_t a1, WTF::StringImpl **a2)
{
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 8), a2, (uint64_t)v3);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  char v6 = v10;
  if (v10)
  {
    *(void *)a3 = v8;
    uint64_t v7 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)(a3 + 8) = v7;
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

void sub_1986E9DF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl **a21)
{
  if (a21) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a21, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add@<X0>(uint64_t *a1@<X0>, WTF::ASCIICaseInsensitiveHash **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, 0), (uint64_t v6 = *a1) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v7;
  uint64_t v9 = (WTF **)(v6 + 8 * v8);
  if ((WTF::equal(*v9, 0, v10) & 1) == 0)
  {
    uint64_t v23 = 0;
    int v24 = 1;
    do
    {
      if (*v9 == (WTF *)-1)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t result = (WTF::StringImpl *)WTF::equalIgnoringASCIICase(*v9, *a2, v12);
        if (result)
        {
          uint64_t v25 = *a1;
          if (*a1) {
            uint64_t v26 = *(unsigned int *)(v25 - 4);
          }
          else {
            uint64_t v26 = 0;
          }
          char v22 = 0;
          uint64_t v21 = v25 + 8 * v26;
          goto LABEL_15;
        }
      }
      unsigned int v8 = (v8 + v24) & v7;
      uint64_t v9 = (WTF **)(v6 + 8 * v8);
      ++v24;
    }
    while (!WTF::equal(*v9, 0, v12));
    if (v23)
    {
      _DWORD *v23 = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v9 = v23;
    }
  }
  int v13 = *a2;
  *a2 = 0;
  uint64_t result = *v9;
  *uint64_t v9 = v13;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  uint64_t v15 = *a1;
  if (*a1) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - 12) = v16;
  uint64_t v17 = *a1;
  if (*a1) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = (WTF::StringImpl *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a1, v9);
    uint64_t v9 = (WTF **)result;
    uint64_t v17 = *a1;
    if (*a1) {
      unint64_t v20 = *(unsigned int *)(v17 - 4);
    }
    else {
      unint64_t v20 = 0;
    }
    goto LABEL_14;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v21 = v17 + 8 * v20;
  char v22 = 1;
LABEL_15:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v21;
  *(unsigned char *)(a3 + 16) = v22;
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v12 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    uint64_t v15 = (WTF::StringImpl **)v6;
    do
    {
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (WTF::equal(*v15, 0, v11))
        {
          WebCore::RegistrableDomain::~RegistrableDomain(v15, v16);
        }
        else
        {
          uint64_t v17 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::reinsert(a1, v15);
          WebCore::RegistrableDomain::~RegistrableDomain(v15, v18);
          if (v15 == a3) {
            uint64_t v12 = v17;
          }
        }
      }
      ++v15;
      --v14;
    }
    while (v14);
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebPasteboardProxy::singleton(void)::$_0 &&>>()
{
  qword_1EB359D00 = 0;
  unk_1EB359D08 = 0;
  qword_1EB359CF8 = (uint64_t)&unk_1EEA03B40;
  qword_1EB359D10 = 0;
  unk_1EB359D18 = 0;
}

uint64_t WebCore::GraphicsLayer::setAppliesPageScale(WebCore::GraphicsLayer *this, int a2)
{
  int v3 = *(unsigned __int16 *)((char *)this + 177);
  uint64_t result = (uint64_t)this + 177;
  int v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2) {
    __int16 v5 = 2048;
  }
  else {
    __int16 v5 = 0;
  }
  unsigned int v6 = v4 & 0xFFFFF7FF;
  *(_WORD *)uint64_t result = v6 | v5;
  *(unsigned char *)(result + 2) = BYTE2(v6);
  return result;
}

double WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdate(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(WebKit::RemoteLayerTreeDrawingArea **)(v1 + 8);
    if (v2)
    {
      *((unsigned char *)v2 + 36std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
      return WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(v2);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::GPUProcess::AddSession,WebKit::GPUProcess,WebKit::GPUProcess,void ()(PAL::SessionID,WebKit::GPUProcessSessionParameters &&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>>(&v4, a1);
  if (v5[32]) {
    WebKit::GPUProcess::addSession(a2, v4, (uint64_t)v5);
  }
  return std::optional<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>>::~optional((uint64_t)&v4);
}

uint64_t std::optional<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 32));
    int v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 16));
    __int16 v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl **WebKit::GPUProcess::addSession(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v12 = a2;
  WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 8), a2);
  WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 24), v5);
  unsigned int v6 = *(WTF::StringImpl **)a3;
  *(void *)a3 = 0;
  unsigned int v7 = *(WTF::StringImpl **)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  v11[0] = v6;
  v11[1] = v7;
  WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::add<WebKit::GPUProcess::GPUSession>((uint64_t)&v10, (uint64_t *)(a1 + 200), &v12, v11);
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v11, v8);
}

uint64_t WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::add<WebKit::GPUProcess::GPUSession>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl **a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  unsigned int v11 = result & v9;
  uint64_t v12 = (WTF::StringImpl **)(v8 + 24 * (result & v9));
  int v13 = *v12;
  uint64_t v14 = *a3;
  if (*v12)
  {
    uint64_t v23 = 0;
    int v24 = 1;
    do
    {
      if (v13 == v14)
      {
        uint64_t v25 = *a2;
        if (*a2) {
          unsigned int v26 = *(_DWORD *)(v25 - 4);
        }
        else {
          unsigned int v26 = 0;
        }
        char v22 = 0;
        uint64_t v21 = v25 + 24 * v26;
        goto LABEL_12;
      }
      if (v13 == (WTF::StringImpl *)-1) {
        uint64_t v23 = v12;
      }
      unsigned int v11 = (v11 + v24) & v9;
      uint64_t v12 = (WTF::StringImpl **)(v8 + 24 * v11);
      int v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      _DWORD *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v14 = *a3;
      uint64_t v12 = v23;
    }
  }
  uint64_t result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>::translate<PAL::SessionID const&,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>,PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>> WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::inlineAdd<PAL::SessionID const&,WebKit::GPUProcess::GPUSession>(PAL::SessionID const&,WebKit::GPUProcess::GPUSession &&)::{lambda(void)#1}>(v12, v14, a4);
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12) + 1;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(v15 - 12) = v16;
  uint64_t v17 = *a2;
  if (*a2) {
    int v18 = *(_DWORD *)(v17 - 12);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
  unint64_t v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = (uint64_t)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, (WTF::StringImpl *)v12);
    uint64_t v12 = (WTF::StringImpl **)result;
    uint64_t v17 = *a2;
    if (*a2) {
      LODWORD(v2std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = *(_DWORD *)(v17 - 4);
    }
    else {
      LODWORD(v2std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
    }
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v21 = v17 + 24 * v20;
  char v22 = 1;
LABEL_12:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = v22;
  return result;
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 24 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  int v13 = 0;
  if (v7)
  {
    uint64_t v15 = v7;
    int v16 = (WTF::StringImpl *)v6;
    do
    {
      if (*(void *)v16 != -1)
      {
        if (*(void *)v16)
        {
          uint64_t v17 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(*a1, v16);
          WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy(v16, v18);
          if (v16 == a3) {
            int v13 = v17;
          }
        }
        else
        {
          WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy(v16, v10);
        }
      }
      int v16 = (WTF::StringImpl *)((char *)v16 + 24);
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  uint64_t result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

void *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashMapTranslator<WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>::translate<PAL::SessionID const&,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>,PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>> WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::inlineAdd<PAL::SessionID const&,WebKit::GPUProcess::GPUSession>(PAL::SessionID const&,WebKit::GPUProcess::GPUSession &&)::{lambda(void)#1}>(WTF::StringImpl **a1, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  *a1 = a2;
  int v4 = *a3;
  unsigned int v5 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v9[0] = 0;
  uint64_t v6 = a1[1];
  a1[1] = v4;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  v9[1] = 0;
  unsigned int v7 = a1[2];
  a1[2] = v5;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v9, a2);
}

WTF::StringImpl **WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  int v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[40])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,void>::decode<IPC::Decoder,PAL::SessionID>((uint64_t)a1, a2, (uint64_t)v6);
  }
  *a1 = 0;
  a1[40] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,void>::decode<IPC::Decoder,PAL::SessionID>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WebKit::GPUProcessSessionParameters>((uint64_t)&v8, a2);
  char v6 = v10;
  if (!v10)
  {
    *(unsigned char *)a1 = 0;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a3 + 8))
  {
    *(void *)a1 = *(void *)a3;
    long long v7 = v9;
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = 0u;
    long long v9 = 0u;
    *(_OWORD *)(a1 + 24) = v7;
    char v6 = 1;
LABEL_4:
    *(unsigned char *)(a1 + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = v6;
    return std::optional<WebKit::GPUProcessSessionParameters>::~optional((uint64_t)&v8);
  }
  __break(1u);
  return result;
}

uint64_t std::optional<WebKit::GPUProcessSessionParameters>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 24));
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebKit::GPUProcessSessionParameters>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::GPUProcessSessionParameters,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 32))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v17);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v15);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  IPC::Decoder::decode<std::optional<WTF::UUID>>(a1, (uint64_t)&v23);
  if (*(void *)a1)
  {
    if (v19)
    {
      uint64_t v5 = v17;
      uint64_t v6 = v18;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      if (v16)
      {
        uint64_t v7 = v15;
        uint64_t v15 = 0;
        if (v14)
        {
          uint64_t v8 = v13;
          uint64_t v13 = 0;
          if (v25)
          {
            LOBYTE(v22) = v24;
            long long v21 = v23;
            long long v9 = v23;
            v20[0] = 0;
            v20[1] = 0;
            *(void *)a2 = v5;
            *(void *)(a2 + 8) = v6;
            v20[2] = 0;
            v20[3] = 0;
            *(void *)(a2 + 16) = v7;
            *(void *)(a2 + 24) = v8;
            long long v10 = v22;
            *(_OWORD *)(a2 + 32) = v9;
            *(_OWORD *)(a2 + 48) = v10;
            *(unsigned char *)(a2 + 64) = 1;
            WebKit::WebPushD::WebPushDaemonConnectionConfiguration::~WebPushDaemonConnectionConfiguration((WebKit::WebPushD::WebPushDaemonConnectionConfiguration *)v20, v4);
            goto LABEL_7;
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
LABEL_7:
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13);
  uint64_t result = (WTF *)std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15);
  if (v19)
  {
    uint64_t result = v17;
    if (v17)
    {
      uint64_t v17 = 0;
      LODWORD(v18) = 0;
      return (WTF *)WTF::fastFree(result, v12);
    }
  }
  return result;
}

void sub_1986EAC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF *a14, int a15, int a16, char a17)
{
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12);
  if (a17)
  {
    char v19 = a14;
    if (a14)
    {
      a14 = 0;
      a15 = 0;
      WTF::fastFree(v19, v18);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1986EAC78()
{
}

void sub_1986EAC80()
{
}

uint64_t IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<true,unsigned char,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16]) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1986EACC4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    int v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<true,unsigned char,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5);
  char v4 = v6;
  if (v6)
  {
    uint64_t result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)a2, v5[0], (WTF *)v5[1]);
    char v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(uint64_t result, char *a2, WTF *this)
{
  uint64_t v3 = this;
  uint64_t v4 = result;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = this;
  if (!this) {
    return v4;
  }
  if (!((unint64_t)this >> 32))
  {
    char v6 = (unsigned char *)WTF::fastMalloc(this);
    *(_DWORD *)(v4 + 8) = v3;
    *(void *)uint64_t v4 = v6;
    do
    {
      char v7 = *a2++;
      *v6++ = v7;
      uint64_t v3 = (WTF *)((char *)v3 - 1);
    }
    while (v3);
    return v4;
  }
  __break(0xC471u);
  return result;
}

WebKit::NetworkSession *WebKit::NetworkSession::NetworkSession(WebKit::NetworkSession *this, atomic_uint *a2, const WebKit::NetworkSessionCreationParameters *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 4) = 0;
  *(void *)this = &unk_1EE9C5EA8;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = *(void *)a3;
  atomic_fetch_add(a2 + 32, 1u);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = a2;
  *((unsigned char *)this + 56) = 0;
  char v6 = (_DWORD *)*((void *)a3 + 67);
  if (v6) {
    *v6 += 2;
  }
  *((void *)this + 8) = v6;
  *((void *)this + 9) = 0;
  *((_WORD *)this + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = *((_WORD *)a3 + 277);
  char v7 = (_DWORD *)*((void *)a3 + 74);
  if (v7) {
    *v7 += 2;
  }
  *((void *)this + 11) = v7;
  *((unsigned char *)this + 96) = *((unsigned char *)a3 + 553);
  *((unsigned char *)this + 97) = 1;
  *((unsigned char *)this + 98) = *((unsigned char *)a3 + 556);
  *(_WORD *)((char *)this + 99) = *(_WORD *)((char *)a3 + 557);
  uint64_t v8 = (_DWORD *)*((void *)a3 + 70);
  if (v8) {
    *v8 += 2;
  }
  *((void *)this + 13) = v8;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)this + 14, (uint64_t *)a3 + 73);
  *((unsigned char *)this + 144) = 0;
  *((unsigned char *)this + 152) = 0;
  *(_OWORD *)((char *)this + 12std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0u;
  *((unsigned char *)this + 136) = 0;
  WebKit::managerOrProxy((WebKit::NetworkSession *)((char *)this + 160), this, (WebKit::NetworkProcess *)a2, a3);
  *((unsigned char *)this + 168) = *((unsigned char *)a3 + 344);
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 488) = 0;
  *((unsigned char *)this + 496) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  WebKit::PrefetchCache::PrefetchCache((WebKit::NetworkSession *)((char *)this + 520));
  uint64_t v9 = MEMORY[0x1E4FB6B50] + 16;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((void *)this + 79) = v9;
  *((unsigned char *)this + 672) = 0;
  *((unsigned char *)this + 696) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 8std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(void *)((char *)this + 661) = 0;
  long long v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *((void *)this + 89) = WebKit::NetworkBroadcastChannelRegistry::NetworkBroadcastChannelRegistry(v10, (uint64_t)a2);
  *((_DWORD *)this + 18std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = *((_DWORD *)a3 + 75);
  *((unsigned char *)this + 724) = *((unsigned char *)a3 + 305);
  *((unsigned char *)this + 725) = *((unsigned char *)a3 + 307);
  *((unsigned char *)this + 726) = 0;
  *((void *)this + 91) = *(void *)((char *)a3 + 308);
  *((unsigned char *)this + 768) = 0;
  *((unsigned char *)this + 752) = 0;
  *((_OWORD *)this + 46) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((unsigned char *)this + 792) = *((unsigned char *)a3 + 505);
  *((void *)this + 102) = 0;
  *((void *)this + 10std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *((void *)this + 101) = 0;
  *((void *)this + 103) = (char *)this + 840;
  *((void *)this + 104) = 25;
  *((void *)this + 13std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  WebKit::createNetworkStorageManager((WebKit::NetworkSession *)((char *)this + 1048), (WebKit::NetworkProcess *)a2, a3);
  *((void *)this + 134) = 0;
  *((void *)this + 132) = 0;
  *(_DWORD *)((char *)this + 1063) = 0;
  if ((*(void *)a3 & 0x8000000000000000) == 0 || *(void *)a3 == -1)
  {
    uint64_t v11 = (WTF::StringImpl *)*((void *)a3 + 41);
    if (v11) {
      *(_DWORD *)v11 += 2;
    }
  }
  else
  {
    uint64_t v11 = 0;
    v33[0] = 0;
  }
  v33[0] = v11;
  WebKit::WebPushD::WebPushDaemonConnectionConfiguration::WebPushDaemonConnectionConfiguration((WebKit::WebPushD::WebPushDaemonConnectionConfiguration *)v34, (const void **)a3 + 26);
  double v12 = WebKit::configurationWithHostAuditToken(v35, *(void *)(*((void *)a2 + 5) + 352), v34);
  WebKit::NetworkNotificationManager::NetworkNotificationManager((char *)this + 1080, v33, v35, v12);
  WebKit::WebPushD::WebPushDaemonConnectionConfiguration::~WebPushDaemonConnectionConfiguration((WebKit::WebPushD::WebPushDaemonConnectionConfiguration *)v35, v13);
  WebKit::WebPushD::WebPushDaemonConnectionConfiguration::~WebPushDaemonConnectionConfiguration((WebKit::WebPushD::WebPushDaemonConnectionConfiguration *)v34, v14);
  char v16 = v33[0];
  v33[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *((void *)this + 3);
  if ((v17 & 0x8000000000000000) == 0 || v17 == -1)
  {
    uint64_t v18 = (_DWORD *)*((void *)a3 + 34);
    if (v18)
    {
      *v18 += 2;
      v35[0].n128_u64[0] = (unint64_t)v18;
      WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 35, v15);
      char v19 = *((unsigned char *)a2 + 344);
      if (*((unsigned char *)a3 + 297)) {
        v19 |= 4u;
      }
      WebKit::NetworkCache::Cache::open((WTF::FileSystemImpl *)v35, (uint64_t)a2, v19 | *((unsigned char *)a3 + 298), *((void *)this + 3), v33);
      unint64_t v20 = v33[0];
      v33[0] = 0;
      long long v21 = (WebKit::NetworkCache::Cache *)*((void *)this + 77);
      *((void *)this + 77) = v20;
      if (v21)
      {
        WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v21, v15);
        long long v22 = v33[0];
        v33[0] = 0;
        if (v22) {
          WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v22, v15);
        }
        unint64_t v20 = (WTF::StringImpl *)*((void *)this + 77);
      }
      if (!v20)
      {
        int v32 = qword_1EB358118;
        if (os_log_type_enabled((os_log_t)qword_1EB358118, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v33[0]) = 0;
          _os_log_error_impl(&dword_1985F2000, v32, OS_LOG_TYPE_ERROR, "Failed to initialize the WebKit network disk cache", (uint8_t *)v33, 2u);
        }
      }
    }
    else
    {
      v35[0].n128_u64[0] = 0;
    }
    uint64_t v23 = *((void *)a3 + 67);
    if (v23 && *(_DWORD *)(v23 + 4)) {
      WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 68, v15);
    }
    uint64_t v24 = *((void *)a3 + 57);
    if (v24 && *(_DWORD *)(v24 + 4))
    {
      WTF::String::operator=((uint64_t *)this + 132, (WTF::StringImpl **)a3 + 57);
      WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 58, v25);
    }
    uint64_t v26 = (WTF::StringImpl *)v35[0].n128_u64[0];
    v35[0].n128_u64[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v15);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  *((unsigned char *)this + 152) = *((unsigned char *)a3 + 299);
  WebKit::NetworkSession::setTrackingPreventionEnabled((WTF::StringImpl **)this, *((unsigned __int8 *)a3 + 552));
  WebKit::NetworkSession::setBlobRegistryTopOriginPartitioningEnabled(this, *((unsigned __int8 *)a3 + 345));
  *((unsigned char *)this + 726) = *((unsigned char *)a3 + 346);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 62, v27);
  uint64_t v28 = (_DWORD *)*((void *)a3 + 61);
  if (v28) {
    *v28 += 2;
  }
  v35[0].n128_u64[0] = (unint64_t)v28;
  v35[0].n128_u8[8] = *((unsigned char *)a3 + 504);
  std::optional<WebKit::NetworkSession::ServiceWorkerInfo>::operator=[abi:sn180100]<WebKit::NetworkSession::ServiceWorkerInfo,void>((uint64_t)this + 752, (uint64_t)v35);
  unint64_t v30 = (WTF::StringImpl *)v35[0].n128_u64[0];
  v35[0].n128_u64[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v29);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  return this;
}

void WebKit::WebPushD::WebPushDaemonConnectionConfiguration::~WebPushDaemonConnectionConfiguration(WebKit::WebPushD::WebPushDaemonConnectionConfiguration *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF **)this;
  if (*(void *)this)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v5, a2);
  }
}

uint64_t std::optional<WebKit::NetworkSession::ServiceWorkerInfo>::operator=[abi:sn180100]<WebKit::NetworkSession::ServiceWorkerInfo,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
    char v5 = *(unsigned char *)(a2 + 8);
  }
  else
  {
    uint64_t v4 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)a1 = v4;
    char v5 = *(unsigned char *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = 1;
  }
  *(unsigned char *)(a1 + 8) = v5;
  return a1;
}

WebKit::NetworkSession *WebKit::NetworkProcess::setBlobRegistryTopOriginPartitioningEnabled(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  uint64_t result = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v5);
  if (result) {
    return (WebKit::NetworkSession *)WebKit::NetworkSession::setBlobRegistryTopOriginPartitioningEnabled(result, a3);
  }
  return result;
}

uint64_t WebKit::NetworkSession::setBlobRegistryTopOriginPartitioningEnabled(WebKit::NetworkSession *this, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = qword_1EB3585F0;
  if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    uint64_t v6 = *((void *)this + 3);
    if (a2) {
      uint64_t v5 = "enabled";
    }
    int v8 = 136446466;
    uint64_t v9 = v5;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "NetworkSession::setBlobRegistryTopOriginPartitioningEnabled as %{public}s for session %llu", (uint8_t *)&v8, 0x16u);
  }
  return WebCore::BlobRegistryImpl::setPartitioningEnabled((WebKit::NetworkSession *)((char *)this + 632));
}

double WebKit::configurationWithHostAuditToken(__n128 *a1, uint64_t a2, __n128 *a3)
{
  if (a2)
  {
    xpc_connection_get_audit_token();
    long long v11 = *(_OWORD *)v10;
    HIBYTE(v11) = v10[15];
    uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)uint64_t v6 = v9;
    *(_OWORD *)(v6 + 16) = *(_OWORD *)&v10[15];
    *(_OWORD *)(v6 + 1) = v11;
    char v7 = (WTF *)a3->n128_u64[0];
    if (a3->n128_u64[0])
    {
      a3->n128_u64[0] = 0;
      a3->n128_u32[2] = 0;
      WTF::fastFree(v7, v5);
    }
    a3->n128_u64[0] = v6;
    a3->n128_u64[1] = 0x2000000020;
  }
  *(void *)&double result = WebKit::WebPushD::WebPushDaemonConnectionConfiguration::WebPushDaemonConnectionConfiguration(a1, a3).n128_u64[0];
  return result;
}

WTF::StringImpl *WebKit::createNetworkStorageManager(WebKit *this, WebKit::NetworkProcess *a2, const WebKit::NetworkSessionCreationParameters *a3)
{
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 54, a2);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 56, v6);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 58, v7);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 60, v8);
  uint64_t v9 = *((void *)a2 + 5);
  if (v9) {
    uint64_t v10 = *(void *)(v9 + 24);
  }
  else {
    uint64_t v10 = 0;
  }
  char v14 = 0;
  WTF::String::operator=((uint64_t *)&v14, (WTF::StringImpl **)a3 + 61);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 62, v11);
  WebKit::NetworkStorageManager::create((uint64_t)a2, *(void *)a3, v10, (WTF::StringImpl **)a3 + 59, (uint64_t)a3 + 424, (const WebKit::NetworkSessionCreationParameters *)((char *)a3 + 440), (uint64_t *)this, (uint64_t)a3 + 456, (uint64_t)&v14, *((void *)a3 + 44), *((void *)a3 + 45), *((void *)a3 + 46), *((void *)a3 + 47), *((void *)a3 + 48), *((void *)a3 + 49), *((_OWORD *)a3 + 25), *((void *)a3 + 51), *((void *)a3 + 52), HIDWORD(*((void *)a3 + 52)),
    *((unsigned char *)a3 + 347),
    *((unsigned char *)a3 + 506));
  double result = v14;
  char v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebKit::PCM::ManagerProxy *WebKit::managerOrProxy(WebKit *this, WebKit::NetworkSession *a2, WebKit::NetworkProcess *a3, const WebKit::NetworkSessionCreationParameters *a4)
{
  uint64_t v8 = *((void *)a4 + 40);
  if (v8 && *(_DWORD *)(v8 + 4) && ((uint64_t v11 = *((void *)a2 + 3), (v11 & 0x8000000000000000) == 0) || v11 == -1))
  {
    uint64_t v12 = (WebKit::PCM::ManagerProxy *)WTF::fastMalloc((WTF *)0x30);
    double result = WebKit::PCM::ManagerProxy::ManagerProxy(v12, (const WebKit::NetworkSessionCreationParameters *)((char *)a4 + 320), a2);
    *(void *)this = result;
  }
  else
  {
    uint64_t v9 = (WebKit::PCM::ClientImpl *)WTF::fastMalloc((WTF *)0x18);
    uint64_t v13 = (WebKit::PCM::ManagerProxy *)WebKit::PCM::ClientImpl::ClientImpl(v9, a2, a3);
    WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::PrivateClickMeasurementManager,WTF::UniqueRef<WebKit::PCM::ClientImpl>,WTF::String const&>(&v14, (uint64_t *)&v13, (uint64_t)a4 + 536);
    double result = v13;
    *(void *)this = v14;
    if (result) {
      return (WebKit::PCM::ManagerProxy *)(*(uint64_t (**)(WebKit::PCM::ManagerProxy *))(*(void *)result
    }
                                                                                                 + 8))(result);
  }
  return result;
}

WebKit::WebPushD::WebPushDaemonConnectionConfiguration *WebKit::WebPushD::WebPushDaemonConnectionConfiguration::WebPushDaemonConnectionConfiguration(WebKit::WebPushD::WebPushDaemonConnectionConfiguration *this, const void **a2)
{
  uint64_t v4 = (WTF *)*((unsigned int *)a2 + 3);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 3) = v4;
  if (v4)
  {
    uint64_t v5 = (void *)WTF::fastMalloc(v4);
    *((_DWORD *)this + 2) = v4;
    *(void *)this = v5;
    memcpy(v5, *a2, *((unsigned int *)a2 + 3));
  }
  uint64_t v6 = a2[2];
  if (v6) {
    *v6 += 2;
  }
  *((void *)this + 2) = v6;
  char v7 = a2[3];
  if (v7) {
    *v7 += 2;
  }
  *((void *)this + 3) = v7;
  long long v8 = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = v8;
  return this;
}

__n128 WebKit::WebPushD::WebPushDaemonConnectionConfiguration::WebPushDaemonConnectionConfiguration(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  unint64_t v2 = a2->n128_u64[0];
  a2->n128_u64[0] = 0;
  a1->n128_u64[0] = v2;
  LODWORD(v2) = a2->n128_u32[2];
  a2->n128_u32[2] = 0;
  a1->n128_u32[2] = v2;
  LODWORD(v2) = a2->n128_u32[3];
  a2->n128_u32[3] = 0;
  a1->n128_u32[3] = v2;
  uint64_t v3 = a2[1].n128_i64[0];
  a2[1].n128_u64[0] = 0;
  a1[1].n128_u64[0] = v3;
  uint64_t v4 = a2[1].n128_i64[1];
  a2[1].n128_u64[1] = 0;
  a1[1].n128_u64[1] = v4;
  __n128 result = a2[2];
  __n128 v6 = a2[3];
  a1[2] = result;
  a1[3] = v6;
  return result;
}

WebKit::PCM::ManagerProxy *WebKit::PCM::ManagerProxy::ManagerProxy(WebKit::PCM::ManagerProxy *this, const WTF::String *a2, WebKit::NetworkSession *a3)
{
  *(void *)this = &unk_1EE9C97C8;
  WTF::String::utf8();
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = v7;
  *((void *)this + 1) = &unk_1EE9BB9A0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 2, (uint64_t)a3);
  uint64_t v5 = (atomic_uint *)*((void *)a3 + 1);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  *((void *)this + 5) = v5;
  return this;
}

void *WebKit::NetworkBroadcastChannelRegistry::NetworkBroadcastChannelRegistry(void *result, uint64_t a2)
{
  *__n128 result = a2;
  result[1] = 0;
  return result;
}

void *WebKit::NetworkNotificationManager::NetworkNotificationManager(void *a1, uint64_t a2, __n128 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE9C9498;
  if (*(void *)a2)
  {
    if (*(_DWORD *)(*(void *)a2 + 4))
    {
      WTF::String::utf8();
      uint64_t v5 = (__n128 *)WTF::fastMalloc((WTF *)0x70);
      v5->n128_u64[1] = 0;
      v5[1].n128_u64[0] = 0;
      v5->n128_u64[0] = (unint64_t)&unk_1EE9BB8F0;
      v5[1].n128_u64[1] = (unint64_t)v9;
      v5[2].n128_u64[0] = (unint64_t)&unk_1EE9BB950;
      __n128 v6 = WebKit::WebPushD::WebPushDaemonConnectionConfiguration::WebPushDaemonConnectionConfiguration(v5 + 3, a3);
      uint64_t v7 = a1[2];
      a1[2] = v5;
      if (v7) {
        (*(void (**)(uint64_t, __n128))(*(void *)v7 + 8))(v7, v6);
      }
    }
  }
  return a1;
}

uint64_t WebKit::NetworkStorageManager::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, WTF::StringImpl **a4@<X5>, uint64_t a5@<X6>, WTF::FileSystemImpl *a6@<X7>, uint64_t *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, char a20,char a21)
{
  uint64_t v24 = WTF::fastMalloc((WTF *)0x190);
  uint64_t result = WebKit::NetworkStorageManager::NetworkStorageManager(v24, a1, a2, a3, a4, a5, a6, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21);
  *a7 = result;
  return result;
}

WTF::StringImpl **WebKit::NetworkSession::setTrackingPreventionEnabled(WTF::StringImpl **this, int a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if ((((this[9] == 0) ^ a2) & 1) == 0)
  {
    uint64_t v3 = (uint64_t)this;
    uint64_t v4 = qword_1EB3585F0;
    if (os_log_type_enabled((os_log_t)qword_1EB3585F0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(v3 + 24);
      *(_DWORD *)buf = 134218496;
      *(void *)&uint8_t buf[4] = v3;
      __int16 v30 = 2048;
      uint64_t v31 = v5;
      __int16 v32 = 1024;
      int v33 = a2;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - NetworkSession::setTrackingPreventionEnabled: sessionID=%llu, enabled=%d", buf, 0x1Cu);
    }
    uint64_t v6 = *(void *)(v3 + 32);
    *(void *)buf = *(void *)(v3 + 24);
    uint64_t v7 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 232), buf);
    if (v7) {
      WebCore::NetworkStorageSession::setTrackingPreventionEnabled(v7);
    }
    if (a2)
    {
      uint64_t v8 = *(void *)(v3 + 24);
      char v9 = v8 < 0 && v8 != -1;
      WebKit::WebResourceLoadStatisticsStore::create(v3, v3 + 64, *(unsigned char *)(v3 + 80) != 0, v9, (uint64_t *)buf);
      uint64_t v10 = *(void *)buf;
      *(void *)buf = 0;
      uint64_t v11 = *(atomic_uchar ***)(v3 + 72);
      *(void *)(v3 + 72) = v10;
      if (v11)
      {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v11);
        uint64_t v12 = *(atomic_uchar ***)buf;
        *(void *)buf = 0;
        if (v12) {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v12);
        }
      }
      uint64_t v13 = *(void *)(v3 + 24);
      if ((v13 & 0x8000000000000000) == 0 || v13 == -1)
      {
        uint64_t v14 = *(atomic_uchar *volatile **)(v3 + 72);
        uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v15 = &unk_1EE9C6568;
        *(void *)buf = v15;
        WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(v14, (uint64_t *)buf);
        uint64_t v16 = *(void *)buf;
        *(void *)buf = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
      if (*(unsigned char *)(v3 + 81))
      {
        uint64_t v19 = *(void *)(v3 + 72);
        unint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
        *unint64_t v20 = &unk_1EE9C6590;
        *(void *)buf = v20;
        WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(v19, 1, (uint64_t *)buf);
        uint64_t v21 = *(void *)buf;
        *(void *)buf = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
      }
      uint64_t v17 = *(void *)(v3 + 88);
      if (v17 && *(_DWORD *)(v17 + 4) && (MEMORY[0x19972E990]() & 1) == 0)
      {
        uint64_t v22 = *(void *)(v3 + 72);
        uint64_t v23 = *(_DWORD **)(v3 + 88);
        if (v23) {
          *v23 += 2;
        }
        *(void *)buf = v23;
        uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v24 = &unk_1EE9C65B8;
        uint64_t v28 = v24;
        WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(v22, (uint64_t)buf, (uint64_t *)&v28);
        uint64_t v26 = (uint64_t)v28;
        uint64_t v28 = 0;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
        unint64_t v27 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v25);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      return WebKit::NetworkSession::forwardResourceLoadStatisticsSettings((WebKit::NetworkSession *)v3);
    }
    else
    {
      uint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v18 = &unk_1EE9C6540;
      *(void *)buf = v18;
      WebKit::NetworkSession::destroyResourceLoadStatistics(v3, (uint64_t *)buf);
      this = *(WTF::StringImpl ***)buf;
      if (*(void *)buf) {
        return (WTF::StringImpl **)(*(uint64_t (**)(void))(**(void **)buf + 8))(*(void *)buf);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x80);
  uint64_t result = WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(v10, a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1994F5F10;
  *(void *)(v10 + 24) = a1;
  *(void *)a1 = v10;
  *(_DWORD *)(a1 + 8) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v11 = *(atomic_uint **)(a2 + 8);
  if (v11) {
    atomic_fetch_add(v11, 1u);
  }
  *(void *)(a1 + 16) = v11;
  uint64_t v12 = (WTF::RunLoop *)WebKit::sharedStatisticsQueue((WTF::WorkQueue **)(a1 + 24));
  *(void *)(a1 + 32) = 0;
  uint64_t v13 = (WTF::RunLoop *)WTF::RunLoop::main(v12);
  Statistics = (WTF::RunLoop *)WTF::RunLoop::Timer::Timer<WebKit::WebResourceLoadStatisticsStore>((WTF::RunLoop::TimerBase *)(a1 + 40), v13, a1);
  *(unsigned char *)(a1 + 72) = a5;
  *(void *)(a1 + 12std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *(_OWORD *)(a1 + 8std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_WORD *)(a1 + 112) = 0;
  uint64_t v15 = (WTF::RunLoop *)WTF::RunLoop::main(Statistics);
  if (WTF::RunLoop::isCurrent(v15))
  {
    if ((a5 & 1) == 0 && *(void *)a3 && *(_DWORD *)(*(void *)a3 + 4))
    {
      WTF::String::isolatedCopy();
      LOBYTE(v2std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = a4;
      *((void *)&v20 + 1) = *(void *)(a2 + 24);
      uint64_t v16 = WTF::fastMalloc((WTF *)0x28);
      *(void *)uint64_t v16 = &unk_1EE9C7DF0;
      *(void *)(v16 + 8) = a1;
      *(void *)(v16 + 16) = v19;
      *(_OWORD *)(v16 + 24) = v20;
      uint64_t v21 = v16;
      WebKit::WebResourceLoadStatisticsStore::postTask(a1, &v21);
      uint64_t v17 = v21;
      uint64_t v21 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      WTF::RunLoop::TimerBase::start();
    }
    return a1;
  }
  else
  {
    uint64_t result = 125;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::sharedStatisticsQueue@<X0>(WTF::WorkQueue **a1@<X8>)
{
  {
    uint64_t v3 = (WTF::WorkQueue *)WebKit::sharedStatisticsQueue(void)::queue;
  }
  else
  {
    WTF::SuspendableWorkQueue::create();
    uint64_t v3 = (WTF::WorkQueue *)v5;
    WebKit::sharedStatisticsQueue(void)::queue = v5;
  }
  uint64_t result = WTF::WorkQueue::ref(v3);
  *a1 = v3;
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(atomic_uchar *volatile *a1, uint64_t *a2)
{
  v8[0] = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v5 = &unk_1EE9C7E90;
  v5[1] = a1;
  void v5[2] = a1;
  uint64_t v5[3] = v4;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  char v9 = v5;
  WebKit::WebResourceLoadStatisticsStore::postTask((uint64_t)a1, (uint64_t *)&v9);
  uint64_t v6 = (uint64_t)v9;
  char v9 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v8);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uchar ***)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v3);
  }
  return a1;
}

WTF::StringImpl **WebKit::NetworkSession::forwardResourceLoadStatisticsSettings(WebKit::NetworkSession *this)
{
  WebKit::WebResourceLoadStatisticsStore::setThirdPartyCookieBlockingMode(*((void **)this + 9), *((unsigned char *)this + 98));
  WebKit::WebResourceLoadStatisticsStore::setSameSiteStrictEnforcementEnabled(*((unsigned char **)this + 9), *((unsigned char *)this + 99));
  uint64_t v2 = *((void *)this + 9);
  char v3 = *((unsigned char *)this + 100);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1EE9C65E0;
  uint64_t v11 = v4;
  WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(v2, v3, (uint64_t *)&v11);
  uint64_t v5 = (uint64_t)v11;
  uint64_t v11 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 9);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v7 = &unk_1EE9C6608;
  uint64_t v11 = v7;
  WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(v6, (uint64_t)this + 104, (uint64_t *)&v11);
  uint64_t v9 = (uint64_t)v11;
  uint64_t v11 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return WebKit::WebResourceLoadStatisticsStore::setPersistedDomains(*((WTF::StringImpl ***)this + 9), (uint64_t *)this + 14, v8);
}

unsigned char *WebKit::WebResourceLoadStatisticsStore::setSameSiteStrictEnforcementEnabled(unsigned char *result, char a2)
{
  if (!result[72])
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v4 = &unk_1EE9C82F0;
    *(void *)(v4 + 8) = v3;
    *(unsigned char *)(v4 + 16) = a2;
    uint64_t v5 = (unsigned char *)v4;
    WebKit::WebResourceLoadStatisticsStore::postTask(v3, (uint64_t *)&v5);
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WebKit::WebResourceLoadStatisticsStore::setThirdPartyCookieBlockingMode(void *result, char a2)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = result[2];
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 32);
      uint64_t v8 = *(void **)(v5 + 24);
      uint64_t result = (void *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 232), &v8);
      if (result) {
        uint64_t result = (void *)WebCore::NetworkStorageSession::setThirdPartyCookieBlockingMode();
      }
    }
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v7 = &unk_1EE9C82C8;
    *(void *)(v7 + 8) = v3;
    *(unsigned char *)(v7 + 16) = a2;
    uint64_t v8 = (void *)v7;
    WebKit::WebResourceLoadStatisticsStore::postTask(v3, (uint64_t *)&v8);
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(unsigned char *)(a1 + 72) && *(void *)a2 && *(_DWORD *)(*(void *)a2 + 4) && !MEMORY[0x19972E990]())
  {
    uint64_t v8 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "WebResourceLoadStatisticsStore::setStandaloneApplicationDomain() called with non-empty domain.", (uint8_t *)&v14, 2u);
    }
    uint64_t v14 = a1;
    WebCore::RegistrableDomain::isolatedCopy(&v15);
    uint64_t v9 = *a3;
    *a3 = 0;
    uint64_t v16 = v9;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v10 = &unk_1EE9C8390;
    v10[1] = v14;
    void v10[2] = v15;
    uint64_t v11 = v16;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    v10[3] = v11;
    uint64_t v17 = v10;
    WebKit::WebResourceLoadStatisticsStore::postTask(a1, (uint64_t *)&v17);
    uint64_t v13 = (uint64_t)v17;
    uint64_t v17 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    return WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)&v14, v12);
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
    return v6(v5);
  }
}

WTF::StringImpl **WebKit::WebResourceLoadStatisticsStore::setPersistedDomains(WTF::StringImpl **result, uint64_t *a2, const WTF::StringImpl *a3)
{
  if (!*((unsigned char *)result + 72) && *a2 && *(_DWORD *)(*a2 - 12))
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v8 = result;
    WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t)a2, a3, (uint64_t *)&v9);
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v4 = &unk_1EE9C8368;
    v4[1] = v8;
    uint64_t v5 = v9;
    uint64_t v9 = 0;
    uint64_t v10 = v4;
    void v4[2] = v5;
    WebKit::WebResourceLoadStatisticsStore::postTask(v3, (uint64_t *)&v10);
    uint64_t v7 = (uint64_t)v10;
    uint64_t v10 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t result = v9;
    if (v9) {
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v6);
    }
  }
  return result;
}

WebKit::PrefetchCache *WebKit::PrefetchCache::PrefetchCache(WebKit::PrefetchCache *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  WebCore::Timer::Timer<WebKit::PrefetchCache,WebKit::PrefetchCache>((WebKit::PrefetchCache *)((char *)this + 40), (uint64_t)this);
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::PrefetchCache,WebKit::PrefetchCache>(WebCore::TimerBase *a1, uint64_t a2)
{
  *(void *)WebCore::TimerBase::TimerBase(a1) = &unk_1EE9BA5F0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v4 = &unk_1EE9CB6C8;
  v4[1] = WebKit::PrefetchCache::clearExpiredEntries;
  void v4[2] = 0;
  void v4[3] = a2;
  *((void *)a1 + 6) = v4;
  return a1;
}

uint64_t WebKit::NetworkCache::Cache::open@<X0>(WTF::FileSystemImpl *this@<X1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = WTF::FileSystemImpl::makeAllDirectories(this, this);
  if ((result & 1) != 0
    && (uint64_t v11 = (const WTF::StringImpl *)WebKit::NetworkCache::computeCapacity(*(unsigned __int8 *)(a2 + 145), this),
        uint64_t result = (uint64_t)WebKit::NetworkCache::Storage::open((WTF::StringImpl **)this, a3 & 1, v11, (uint64_t *)&v15),
        v15))
  {
    uint64_t v12 = WTF::fastMalloc((WTF *)0x58);
    uint64_t v14 = v15;
    uint64_t v15 = 0;
    uint64_t result = WebKit::NetworkCache::Cache::Cache(v12, a2, (_DWORD **)this, (uint64_t *)&v14, a3, a4);
    *a5 = result;
    if (v14) {
      uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v14);
    }
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    if (v13) {
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkCache::Storage,(WTF::DestructionThread)2>(*v13);
    }
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

uint64_t WebKit::calculateURLCacheDiskCapacity(int a1, unint64_t a2)
{
  uint64_t v2 = 0x40000000;
  unint64_t v3 = a2 >> 14;
  uint64_t v4 = 524288000;
  unint64_t v5 = a2 >> 13;
  uint64_t v6 = 262144000;
  uint64_t v7 = 209715200;
  uint64_t v8 = 104857600;
  if (a2 > 0x3FF) {
    uint64_t v8 = 157286400;
  }
  if (a2 <= 0x7FF) {
    uint64_t v7 = v8;
  }
  if (a2 <= 0xFFF) {
    uint64_t v6 = v7;
  }
  if (!v5) {
    uint64_t v4 = v6;
  }
  if (!v3) {
    uint64_t v2 = v4;
  }
  uint64_t v9 = 20971520;
  if (a2 > 0xFFF) {
    uint64_t v9 = 31457280;
  }
  if (v5) {
    uint64_t v10 = 41943040;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v3) {
    uint64_t v11 = 78643200;
  }
  else {
    uint64_t v11 = v10;
  }
  if (a1 != 1) {
    uint64_t v11 = 0;
  }
  if (a1 == 2) {
    return v2;
  }
  else {
    return v11;
  }
}

uint64_t WebKit::NetworkCache::computeCapacity(int a1, WTF::FileSystemImpl *this)
{
  unint64_t v3 = WTF::FileSystemImpl::volumeFreeSpace(this, this);
  if (!v4) {
    return 0;
  }

  return WebKit::calculateURLCacheDiskCapacity(a1, ((v3 >> 13) * (unsigned __int128)0x20C49BA5E353F7DuLL) >> 64);
}

WTF::StringImpl *WebKit::NetworkCache::Storage::open@<X0>(WTF::StringImpl **a1@<X0>, int a2@<W1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  uint64_t v22 = v7;
  int v9 = WTF::equal(v7, v7, a3);
  if ((v9 & 1) == 0)
  {
    if ((WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v22, v8) & 1) == 0)
    {
      *a4 = 0;
      goto LABEL_17;
    }
    WTF::FileSystemImpl::setExcludedFromBackup((WTF::FileSystemImpl *)&v22, (const WTF::String *)1);
  }
  WebKit::NetworkCache::makeVersionedDirectoryPath((WebKit::NetworkCache *)&v22, v8);
  if (!WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v21, v11)) {
    goto LABEL_24;
  }
  if (v9) {
    WTF::FileSystemImpl::setExcludedFromBackup((WTF::FileSystemImpl *)&v21, (const WTF::String *)1);
  }
  WebKit::NetworkCache::makeSaltFilePath((WebKit::NetworkCache *)&v20, (const WTF::String *)&v22);
  uint64_t Salt = WTF::FileSystemImpl::readOrMakeSalt((WTF::FileSystemImpl *)&v20, v12);
  char v14 = (char)v10;
  uint64_t v15 = v20;
  long long v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v10);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (v14)
  {
    uint64_t v16 = WTF::fastMalloc((WTF *)0x170);
    uint64_t v17 = WebKit::NetworkCache::Storage::Storage(v16, (const WTF::String *)&v22, a2, Salt, (uint64_t)a3);
  }
  else
  {
LABEL_24:
    uint64_t v17 = 0;
  }
  *a4 = v17;
  uint64_t v18 = v21;
  uint64_t v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v10);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
LABEL_17:
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::makeSaltFilePath(WebKit::NetworkCache *this, const WTF::String *a2)
{
  WebKit::NetworkCache::makeVersionedDirectoryPath(a2, a2);
  WTF::FileSystemImpl::pathByAppendingComponent();
  uint64_t result = v4;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::Storage(uint64_t a1, const WTF::String *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1994F5F10;
  *(void *)(v10 + 24) = a1;
  *(void *)a1 = v10;
  uint64_t v11 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v11 += 2;
  }
  *(void *)(a1 + 8) = v11;
  WebKit::NetworkCache::makeRecordsDirectoryPath((WebKit::NetworkCache *)(a1 + 16), a2);
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 28) = a4;
  *(void *)(a1 + 4std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = a5;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 6std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 8std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  WebCore::Timer::Timer<WebKit::NetworkCache::Storage,WebKit::NetworkCache::Storage>((WebCore::TimerBase *)(a1 + 152), a1, (uint64_t)WebKit::NetworkCache::Storage::cancelAllReadOperations, 0);
  *(void *)(a1 + 24std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  WebCore::Timer::Timer<WebKit::NetworkCache::Storage,WebKit::NetworkCache::Storage>((WebCore::TimerBase *)(a1 + 248), a1, (uint64_t)WebKit::NetworkCache::Storage::dispatchPendingWriteOperations, 0);
  *(void *)(a1 + 304) = 0;
  WTF::ConcurrentWorkQueue::create();
  WTF::ConcurrentWorkQueue::create();
  WTF::WorkQueue::create();
  WebKit::NetworkCache::makeBlobDirectoryPath((WebKit::NetworkCache *)&v15, a2);
  WebKit::NetworkCache::BlobStorage::BlobStorage((void *)(a1 + 336), (_DWORD **)&v15, *(void *)(a1 + 28));
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  *(void *)(a1 + 36std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](this + 1, 0) = 0x3FF0000000000000;
  WebKit::NetworkCache::Storage::deleteOldVersions((WebKit::NetworkCache::Storage *)a1);
  WebKit::NetworkCache::Storage::synchronize(a1);
  return a1;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::NetworkCache::Storage,WebKit::NetworkCache::Storage>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)WebCore::TimerBase::TimerBase(a1) = &unk_1EE9BA5F0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EE9CB1F0;
  v8[1] = a3;
  _OWORD v8[2] = a4;
  void v8[3] = a2;
  *((void *)a1 + 6) = v8;
  return a1;
}